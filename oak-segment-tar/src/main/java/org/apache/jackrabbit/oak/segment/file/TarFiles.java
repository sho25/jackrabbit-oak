begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|listFiles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|ReferenceCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentGraph
operator|.
name|SegmentGraphVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
class|class
name|TarFiles
implements|implements
name|Closeable
block|{
specifier|private
specifier|static
class|class
name|Node
block|{
specifier|final
name|TarReader
name|reader
decl_stmt|;
specifier|final
name|Node
name|next
decl_stmt|;
name|Node
parameter_list|(
name|TarReader
name|reader
parameter_list|,
name|Node
name|next
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|CleanupResult
block|{
specifier|private
name|boolean
name|interrupted
decl_stmt|;
specifier|private
name|long
name|reclaimedSize
decl_stmt|;
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|removableFiles
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|UUID
argument_list|>
name|reclaimedSegmentIds
decl_stmt|;
specifier|private
name|CleanupResult
parameter_list|()
block|{
comment|// Prevent external instantiation.
block|}
name|long
name|getReclaimedSize
parameter_list|()
block|{
return|return
name|reclaimedSize
return|;
block|}
name|List
argument_list|<
name|File
argument_list|>
name|getRemovableFiles
parameter_list|()
block|{
return|return
name|removableFiles
return|;
block|}
name|Set
argument_list|<
name|UUID
argument_list|>
name|getReclaimedSegmentIds
parameter_list|()
block|{
return|return
name|reclaimedSegmentIds
return|;
block|}
name|boolean
name|isInterrupted
parameter_list|()
block|{
return|return
name|interrupted
return|;
block|}
block|}
specifier|static
class|class
name|Builder
block|{
specifier|private
name|File
name|directory
decl_stmt|;
specifier|private
name|boolean
name|memoryMapping
decl_stmt|;
specifier|private
name|TarRecovery
name|tarRecovery
decl_stmt|;
specifier|private
name|IOMonitor
name|ioMonitor
decl_stmt|;
specifier|private
name|FileStoreStats
name|fileStoreStats
decl_stmt|;
specifier|private
name|long
name|maxFileSize
decl_stmt|;
specifier|private
name|boolean
name|readOnly
decl_stmt|;
specifier|private
name|Builder
parameter_list|()
block|{
comment|// Prevent external instantiation.
block|}
name|Builder
name|withDirectory
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|checkNotNull
argument_list|(
name|directory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|Builder
name|withMemoryMapping
parameter_list|(
name|boolean
name|memoryMapping
parameter_list|)
block|{
name|this
operator|.
name|memoryMapping
operator|=
name|memoryMapping
expr_stmt|;
return|return
name|this
return|;
block|}
name|Builder
name|withTarRecovery
parameter_list|(
name|TarRecovery
name|tarRecovery
parameter_list|)
block|{
name|this
operator|.
name|tarRecovery
operator|=
name|checkNotNull
argument_list|(
name|tarRecovery
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|Builder
name|withIOMonitor
parameter_list|(
name|IOMonitor
name|ioMonitor
parameter_list|)
block|{
name|this
operator|.
name|ioMonitor
operator|=
name|checkNotNull
argument_list|(
name|ioMonitor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|Builder
name|withFileStoreStats
parameter_list|(
name|FileStoreStats
name|fileStoreStats
parameter_list|)
block|{
name|this
operator|.
name|fileStoreStats
operator|=
name|checkNotNull
argument_list|(
name|fileStoreStats
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|Builder
name|withMaxFileSize
parameter_list|(
name|long
name|maxFileSize
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|maxFileSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxFileSize
operator|=
name|maxFileSize
expr_stmt|;
return|return
name|this
return|;
block|}
name|Builder
name|withReadOnly
parameter_list|()
block|{
name|this
operator|.
name|readOnly
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TarFiles
name|build
parameter_list|()
throws|throws
name|IOException
block|{
name|checkState
argument_list|(
name|directory
operator|!=
literal|null
argument_list|,
literal|"Directory not specified"
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|tarRecovery
operator|!=
literal|null
argument_list|,
literal|"TAR recovery strategy not specified"
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|ioMonitor
operator|!=
literal|null
argument_list|,
literal|"I/O monitor not specified"
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|readOnly
operator|||
name|fileStoreStats
operator|!=
literal|null
argument_list|,
literal|"File store statistics not specified"
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|readOnly
operator|||
name|maxFileSize
operator|!=
literal|0
argument_list|,
literal|"Max file size not specified"
argument_list|)
expr_stmt|;
return|return
operator|new
name|TarFiles
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TarFiles
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|FILE_NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(data)((0|[1-9][0-9]*)[0-9]{4})([a-z])?.tar"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Node
name|reverse
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
name|Node
name|r
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
name|r
operator|=
operator|new
name|Node
argument_list|(
name|n
operator|.
name|reader
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|n
operator|=
name|n
operator|.
name|next
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
specifier|private
specifier|static
name|Iterable
argument_list|<
name|TarReader
argument_list|>
name|iterable
parameter_list|(
specifier|final
name|Node
name|head
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|TarReader
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|TarReader
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|TarReader
argument_list|>
argument_list|()
block|{
specifier|private
name|Node
name|next
init|=
name|head
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|TarReader
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|Node
name|current
init|=
name|next
decl_stmt|;
name|next
operator|=
name|current
operator|.
name|next
expr_stmt|;
return|return
name|current
operator|.
name|reader
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"not implemented"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
argument_list|>
name|collectFiles
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
argument_list|>
name|dataFiles
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|listFiles
argument_list|(
name|directory
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
control|)
block|{
name|Matcher
name|matcher
init|=
name|FILE_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|Integer
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
name|files
init|=
name|dataFiles
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
name|files
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
name|dataFiles
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
name|Character
name|generation
init|=
literal|'a'
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|generation
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|checkState
argument_list|(
name|files
operator|.
name|put
argument_list|(
name|generation
argument_list|,
name|file
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dataFiles
return|;
block|}
specifier|private
specifier|static
name|void
name|includeForwardReferences
parameter_list|(
name|Node
name|head
parameter_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
name|referencedIds
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|UUID
argument_list|>
name|references
init|=
name|newHashSet
argument_list|(
name|referencedIds
argument_list|)
decl_stmt|;
do|do
block|{
comment|// Add direct forward references
for|for
control|(
name|TarReader
name|reader
range|:
name|iterable
argument_list|(
name|head
argument_list|)
control|)
block|{
name|reader
operator|.
name|calculateForwardReferences
argument_list|(
name|references
argument_list|)
expr_stmt|;
if|if
condition|(
name|references
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
comment|// Optimisation: bail out if no references left
block|}
block|}
comment|// ... as long as new forward references are found.
block|}
do|while
condition|(
name|referencedIds
operator|.
name|addAll
argument_list|(
name|references
argument_list|)
condition|)
do|;
block|}
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
specifier|private
specifier|final
name|long
name|maxFileSize
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|memoryMapping
decl_stmt|;
specifier|private
specifier|final
name|IOMonitor
name|ioMonitor
decl_stmt|;
comment|/**      * Guards access to the {@link #readers} and {@link #writer} references.      */
specifier|private
specifier|final
name|ReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
comment|/**      * Points to the first node of the linked list of TAR readers. Every node in      * the linked list is immutable. Thus, you need to to hold {@link #lock}      * while reading the value of the reference, but you can release it before      * iterating through the list.      *<p>      * Please note that while the linked list is immutable, the pointer to it      * (namely this instance variable) is not itself immutable. This reference      * must be kept consistent with {@link #writer}, and this is the reason why      * it's necessary to hold a lock while accessing this variable.      */
specifier|private
name|Node
name|readers
decl_stmt|;
comment|/**      * The currently used TAR writer. Its access is protected by {@link #lock}.      */
specifier|private
name|TarWriter
name|writer
decl_stmt|;
comment|/**      * If {@code true}, a user requested this instance to close. This flag is      * used in long running, background operations - like {@link      * #cleanup(Supplier, Predicate)} - to be responsive to termination.      */
specifier|private
specifier|volatile
name|boolean
name|shutdown
decl_stmt|;
specifier|private
name|TarFiles
parameter_list|(
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|maxFileSize
operator|=
name|builder
operator|.
name|maxFileSize
expr_stmt|;
name|memoryMapping
operator|=
name|builder
operator|.
name|memoryMapping
expr_stmt|;
name|ioMonitor
operator|=
name|builder
operator|.
name|ioMonitor
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
argument_list|>
name|map
init|=
name|collectFiles
argument_list|(
name|builder
operator|.
name|directory
argument_list|)
decl_stmt|;
name|Integer
index|[]
name|indices
init|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|map
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|indices
argument_list|)
expr_stmt|;
comment|// TAR readers are stored in descending index order. The following loop
comment|// iterates the indices in ascending order, but prepends - instead of
comment|// appending - the corresponding TAR readers to the linked list. This
comment|// results in a properly ordered linked list.
for|for
control|(
name|Integer
name|index
range|:
name|indices
control|)
block|{
name|TarReader
name|r
decl_stmt|;
if|if
condition|(
name|builder
operator|.
name|readOnly
condition|)
block|{
name|r
operator|=
name|TarReader
operator|.
name|openRO
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|memoryMapping
argument_list|,
literal|true
argument_list|,
name|builder
operator|.
name|tarRecovery
argument_list|,
name|ioMonitor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
name|TarReader
operator|.
name|open
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|memoryMapping
argument_list|,
name|builder
operator|.
name|tarRecovery
argument_list|,
name|ioMonitor
argument_list|)
expr_stmt|;
block|}
name|readers
operator|=
operator|new
name|Node
argument_list|(
name|r
argument_list|,
name|readers
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|builder
operator|.
name|readOnly
condition|)
block|{
return|return;
block|}
name|int
name|writeNumber
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|indices
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|writeNumber
operator|=
name|indices
index|[
name|indices
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|1
expr_stmt|;
block|}
name|writer
operator|=
operator|new
name|TarWriter
argument_list|(
name|builder
operator|.
name|directory
argument_list|,
name|builder
operator|.
name|fileStoreStats
argument_list|,
name|writeNumber
argument_list|,
name|builder
operator|.
name|ioMonitor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|shutdown
operator|=
literal|true
expr_stmt|;
name|TarWriter
name|w
decl_stmt|;
name|Node
name|head
decl_stmt|;
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|w
operator|=
name|writer
expr_stmt|;
name|head
operator|=
name|readers
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|IOException
name|exception
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
block|}
for|for
control|(
name|TarReader
name|reader
range|:
name|iterable
argument_list|(
name|head
argument_list|)
control|)
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
else|else
block|{
name|exception
operator|.
name|addSuppressed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|w
init|=
literal|null
decl_stmt|;
name|Node
name|head
decl_stmt|;
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|w
operator|=
name|writer
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|head
operator|=
name|readers
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|String
operator|.
name|format
argument_list|(
literal|"TarFiles{readers=%s,writer=%s}"
argument_list|,
name|newArrayList
argument_list|(
name|iterable
argument_list|(
name|head
argument_list|)
argument_list|)
argument_list|,
name|w
argument_list|)
return|;
block|}
name|long
name|size
parameter_list|()
block|{
name|long
name|size
init|=
literal|0
decl_stmt|;
name|Node
name|head
decl_stmt|;
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|size
operator|=
name|writer
operator|.
name|fileLength
argument_list|()
expr_stmt|;
block|}
name|head
operator|=
name|readers
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|TarReader
name|reader
range|:
name|iterable
argument_list|(
name|head
argument_list|)
control|)
block|{
name|size
operator|+=
name|reader
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
name|int
name|readerCount
parameter_list|()
block|{
name|Node
name|head
decl_stmt|;
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|head
operator|=
name|readers
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|Iterables
operator|.
name|size
argument_list|(
name|iterable
argument_list|(
name|head
argument_list|)
argument_list|)
return|;
block|}
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|boolean
name|containsSegment
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
block|{
name|Node
name|head
decl_stmt|;
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|writer
operator|.
name|containsEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
name|head
operator|=
name|readers
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|TarReader
name|reader
range|:
name|iterable
argument_list|(
name|head
argument_list|)
control|)
block|{
if|if
condition|(
name|reader
operator|.
name|containsEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
name|ByteBuffer
name|readSegment
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
block|{
try|try
block|{
name|Node
name|head
decl_stmt|;
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|ByteBuffer
name|b
init|=
name|writer
operator|.
name|readEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|b
return|;
block|}
block|}
name|head
operator|=
name|readers
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|TarReader
name|reader
range|:
name|iterable
argument_list|(
name|head
argument_list|)
control|)
block|{
name|ByteBuffer
name|b
init|=
name|reader
operator|.
name|readEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|b
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to read from TAR file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
name|void
name|writeSegment
parameter_list|(
name|UUID
name|id
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|generation
parameter_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
name|references
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|binaryReferences
parameter_list|)
throws|throws
name|IOException
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|long
name|size
init|=
name|writer
operator|.
name|writeEntry
argument_list|(
name|id
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|generation
argument_list|)
decl_stmt|;
if|if
condition|(
name|references
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|UUID
name|reference
range|:
name|references
control|)
block|{
name|writer
operator|.
name|addGraphEdge
argument_list|(
name|id
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|binaryReferences
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|reference
range|:
name|binaryReferences
control|)
block|{
name|writer
operator|.
name|addBinaryReference
argument_list|(
name|generation
argument_list|,
name|id
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|size
operator|>=
name|maxFileSize
condition|)
block|{
name|newWriter
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Creates a new TAR writer with a higher index number, reopens the previous      * TAR writer as a TAR reader, and adds the TAR reader to the linked list.      *<p>      * This method must be invoked while holding {@link #lock} in write mode,      * because it modifies the references {@link #writer} and {@link #readers}.      *      * @throws IOException If an error occurs while operating on the TAR readers      *                     or the TAR writer.      */
specifier|private
name|void
name|newWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|TarWriter
name|newWriter
init|=
name|writer
operator|.
name|createNextGeneration
argument_list|()
decl_stmt|;
if|if
condition|(
name|newWriter
operator|==
name|writer
condition|)
block|{
return|return;
block|}
name|readers
operator|=
operator|new
name|Node
argument_list|(
name|TarReader
operator|.
name|open
argument_list|(
name|writer
operator|.
name|getFile
argument_list|()
argument_list|,
name|memoryMapping
argument_list|,
name|ioMonitor
argument_list|)
argument_list|,
name|readers
argument_list|)
expr_stmt|;
name|writer
operator|=
name|newWriter
expr_stmt|;
block|}
name|CleanupResult
name|cleanup
parameter_list|(
name|Supplier
argument_list|<
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|referencesSupplier
parameter_list|,
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|reclaimPredicate
parameter_list|)
throws|throws
name|IOException
block|{
name|CleanupResult
name|result
init|=
operator|new
name|CleanupResult
argument_list|()
decl_stmt|;
name|result
operator|.
name|removableFiles
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|result
operator|.
name|reclaimedSegmentIds
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|UUID
argument_list|>
name|references
decl_stmt|;
name|Node
name|head
decl_stmt|;
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
try|try
block|{
name|newWriter
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|head
operator|=
name|readers
expr_stmt|;
name|references
operator|=
name|referencesSupplier
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|TarReader
argument_list|,
name|TarReader
argument_list|>
name|cleaned
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|iterable
argument_list|(
name|head
argument_list|)
control|)
block|{
name|cleaned
operator|.
name|put
argument_list|(
name|reader
argument_list|,
name|reader
argument_list|)
expr_stmt|;
name|result
operator|.
name|reclaimedSize
operator|+=
name|reader
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|UUID
argument_list|>
name|reclaim
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|cleaned
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|shutdown
condition|)
block|{
name|result
operator|.
name|interrupted
operator|=
literal|true
expr_stmt|;
return|return
name|result
return|;
block|}
name|reader
operator|.
name|mark
argument_list|(
name|references
argument_list|,
name|reclaim
argument_list|,
name|reclaimPredicate
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TarReader
name|reader
range|:
name|cleaned
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|shutdown
condition|)
block|{
name|result
operator|.
name|interrupted
operator|=
literal|true
expr_stmt|;
return|return
name|result
return|;
block|}
name|cleaned
operator|.
name|put
argument_list|(
name|reader
argument_list|,
name|reader
operator|.
name|sweep
argument_list|(
name|reclaim
argument_list|,
name|result
operator|.
name|reclaimedSegmentIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Node
name|closeables
decl_stmt|;
name|long
name|reclaimed
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|closeables
operator|=
literal|null
expr_stmt|;
name|reclaimed
operator|=
literal|0
expr_stmt|;
name|Node
name|swept
init|=
literal|null
decl_stmt|;
comment|// The following loops creates a modified version of `readers` and
comment|// saves it into `swept`. Some TAR readers in `readers` have been
comment|// swept by the previous code and must be replaced with a slimmer
comment|// TAR reader with the same index but a higher generation.
for|for
control|(
name|TarReader
name|reader
range|:
name|iterable
argument_list|(
name|head
argument_list|)
control|)
block|{
if|if
condition|(
name|cleaned
operator|.
name|containsKey
argument_list|(
name|reader
argument_list|)
condition|)
block|{
comment|// We distinguish three cases. First, the original TAR
comment|// reader is unmodified. This happens with no content or not
comment|// enough content could be swept from the original TAR
comment|// reader. Second, some content could be swept from the
comment|// original TAR reader and a new TAR reader with the same
comment|// index and a higher generation was created. Third, all the
comment|// content from the original TAR reader could be swept.
name|TarReader
name|cleandedReader
init|=
name|cleaned
operator|.
name|get
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|cleandedReader
operator|!=
literal|null
condition|)
block|{
comment|// We are either in the first or in the second case.
comment|// Save the TAR reader (either the original or the one
comment|// with a higher generation) in the resulting linked list.
name|swept
operator|=
operator|new
name|Node
argument_list|(
name|cleandedReader
argument_list|,
name|swept
argument_list|)
expr_stmt|;
name|reclaimed
operator|+=
name|cleandedReader
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cleandedReader
operator|!=
name|reader
condition|)
block|{
comment|// We are either in the second or third case. Save the
comment|// original TAR reader in a list of TAR readers that
comment|// will be closed at the end of this methods.
name|closeables
operator|=
operator|new
name|Node
argument_list|(
name|reader
argument_list|,
name|closeables
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// This reader was not involved in the mark-and-sweep. This
comment|// might happen in iterations of this loop successive to the
comment|// first, when we re-read `readers` and recompute `swept`
comment|// all over again.
name|swept
operator|=
operator|new
name|Node
argument_list|(
name|reader
argument_list|,
name|swept
argument_list|)
expr_stmt|;
block|}
block|}
comment|// `swept` is in the reverse order because we prepended new nodes
comment|// to it. We have to reverse it before we save it into `readers`.
name|swept
operator|=
name|reverse
argument_list|(
name|swept
argument_list|)
expr_stmt|;
comment|// Following is a compare-and-set operation. We based the
comment|// computation of `swept` of a specific value of `readers`. If
comment|// `readers` is still the same as the one we started with, we just
comment|// update `readers` and exit from the loop. Otherwise, we read the
comment|// value of `readers` and recompute `swept` based on this value.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|readers
operator|==
name|head
condition|)
block|{
name|readers
operator|=
name|swept
expr_stmt|;
break|break;
block|}
else|else
block|{
name|head
operator|=
name|readers
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|result
operator|.
name|reclaimedSize
operator|-=
name|reclaimed
expr_stmt|;
for|for
control|(
name|TarReader
name|closeable
range|:
name|iterable
argument_list|(
name|closeables
argument_list|)
control|)
block|{
try|try
block|{
name|closeable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to close swept TAR reader"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|removableFiles
operator|.
name|add
argument_list|(
name|closeable
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
name|void
name|collectBlobReferences
parameter_list|(
name|ReferenceCollector
name|collector
parameter_list|,
name|int
name|minGeneration
parameter_list|)
throws|throws
name|IOException
block|{
name|Node
name|head
decl_stmt|;
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|newWriter
argument_list|()
expr_stmt|;
block|}
name|head
operator|=
name|readers
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|TarReader
name|reader
range|:
name|iterable
argument_list|(
name|head
argument_list|)
control|)
block|{
name|reader
operator|.
name|collectBlobReferences
argument_list|(
name|collector
argument_list|,
name|minGeneration
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterable
argument_list|<
name|UUID
argument_list|>
name|getSegmentIds
parameter_list|()
block|{
name|Node
name|head
decl_stmt|;
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|head
operator|=
name|readers
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|UUID
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|iterable
argument_list|(
name|head
argument_list|)
control|)
block|{
name|ids
operator|.
name|addAll
argument_list|(
name|reader
operator|.
name|getUUIDs
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ids
return|;
block|}
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|getGraph
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|Node
name|head
decl_stmt|;
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|head
operator|=
name|readers
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|UUID
argument_list|>
name|index
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|graph
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|iterable
argument_list|(
name|head
argument_list|)
control|)
block|{
if|if
condition|(
name|fileName
operator|.
name|equals
argument_list|(
name|reader
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|index
operator|=
name|reader
operator|.
name|getUUIDs
argument_list|()
expr_stmt|;
name|graph
operator|=
name|reader
operator|.
name|getGraph
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|UUID
name|uuid
range|:
name|index
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|uuid
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|graph
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|putAll
argument_list|(
name|graph
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|getIndices
parameter_list|()
block|{
name|Node
name|head
decl_stmt|;
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|head
operator|=
name|readers
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|index
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|iterable
argument_list|(
name|head
argument_list|)
control|)
block|{
name|index
operator|.
name|put
argument_list|(
name|reader
operator|.
name|getFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|reader
operator|.
name|getUUIDs
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
name|void
name|traverseSegmentGraph
parameter_list|(
name|Set
argument_list|<
name|UUID
argument_list|>
name|roots
parameter_list|,
name|SegmentGraphVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|Node
name|head
decl_stmt|;
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|head
operator|=
name|readers
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|includeForwardReferences
argument_list|(
name|head
argument_list|,
name|roots
argument_list|)
expr_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|iterable
argument_list|(
name|head
argument_list|)
control|)
block|{
name|reader
operator|.
name|traverseSegmentGraph
argument_list|(
name|roots
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

