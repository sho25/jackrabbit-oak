begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|id
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|id
operator|.
name|PropertyId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|persistence
operator|.
name|PersistenceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|persistence
operator|.
name|bundle
operator|.
name|AbstractBundlePersistenceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|persistence
operator|.
name|util
operator|.
name|NodePropBundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|persistence
operator|.
name|util
operator|.
name|NodePropBundle
operator|.
name|PropertyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|state
operator|.
name|ItemStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|commons
operator|.
name|name
operator|.
name|NameConstants
import|;
end_import

begin_class
class|class
name|BundleLoader
block|{
specifier|private
specifier|final
name|PersistenceManager
name|pm
decl_stmt|;
specifier|private
specifier|final
name|Method
name|loadBundle
decl_stmt|;
name|BundleLoader
parameter_list|(
name|PersistenceManager
name|pm
parameter_list|)
block|{
name|this
operator|.
name|pm
operator|=
name|pm
expr_stmt|;
name|Method
name|method
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pm
operator|instanceof
name|AbstractBundlePersistenceManager
condition|)
block|{
try|try
block|{
name|method
operator|=
name|AbstractBundlePersistenceManager
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"loadBundle"
argument_list|,
name|NodeId
operator|.
name|class
argument_list|)
expr_stmt|;
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|method
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|method
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|this
operator|.
name|loadBundle
operator|=
name|method
expr_stmt|;
block|}
name|NodePropBundle
name|loadBundle
parameter_list|(
name|NodeId
name|id
parameter_list|)
throws|throws
name|ItemStateException
block|{
if|if
condition|(
name|loadBundle
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
operator|(
name|NodePropBundle
operator|)
name|loadBundle
operator|.
name|invoke
argument_list|(
name|pm
argument_list|,
name|id
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ItemStateException
condition|)
block|{
throw|throw
operator|(
name|ItemStateException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
comment|// fall through
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// fall through
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
comment|// fall through
block|}
block|}
name|NodeState
name|state
init|=
name|pm
operator|.
name|load
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|NodePropBundle
name|bundle
init|=
operator|new
name|NodePropBundle
argument_list|(
name|state
argument_list|)
decl_stmt|;
for|for
control|(
name|Name
name|name
range|:
name|state
operator|.
name|getPropertyNames
argument_list|()
control|)
block|{
if|if
condition|(
name|NameConstants
operator|.
name|JCR_PRIMARYTYPE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{             }
elseif|else
if|if
condition|(
name|NameConstants
operator|.
name|JCR_MIXINTYPES
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{             }
elseif|else
if|if
condition|(
name|NameConstants
operator|.
name|JCR_UUID
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|bundle
operator|.
name|setReferenceable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bundle
operator|.
name|addProperty
argument_list|(
operator|new
name|PropertyEntry
argument_list|(
name|pm
operator|.
name|load
argument_list|(
operator|new
name|PropertyId
argument_list|(
name|id
argument_list|,
name|name
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bundle
return|;
block|}
block|}
end_class

end_unit

