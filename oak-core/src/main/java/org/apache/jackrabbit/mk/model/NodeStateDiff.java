begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|model
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|model
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|model
operator|.
name|PropertyState
import|;
end_import

begin_comment
comment|/**  * Utility base class for comparing two {@link NodeState} instances. The  * {@link #compare(NodeState, NodeState)} method will go through all  * properties and child nodes of the two states, calling the relevant  * added, changed or deleted methods where appropriate. Differences in  * the ordering of properties or child nodes do not affect the comparison.  */
end_comment

begin_class
specifier|public
class|class
name|NodeStateDiff
block|{
comment|/**      * Called by {@link #compare(NodeState, NodeState)} for all added      * properties. The default implementation does nothing.      *      * @param after property state after the change      */
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{     }
comment|/**      * Called by {@link #compare(NodeState, NodeState)} for all changed      * properties. The names of the given two property states are guaranteed      * to be the same. The default implementation does nothing.      *      * @param before property state before the change      * @param after property state after the change      */
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{     }
comment|/**      * Called by {@link #compare(NodeState, NodeState)} for all deleted      * properties. The default implementation does nothing.      *      * @param before property state before the change      */
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{     }
comment|/**      * Called by {@link #compare(NodeState, NodeState)} for all added      * child nodes. The default implementation does nothing.      *      * @param name name of the added child node      * @param after child node state after the change      */
specifier|public
name|void
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{     }
comment|/**      * Called by {@link #compare(NodeState, NodeState)} for all changed      * child nodes. The default implementation does nothing.      *      * @param name name of the changed child node      * @param before child node state before the change      * @param after child node state after the change      */
specifier|public
name|void
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{     }
comment|/**      * Called by {@link #compare(NodeState, NodeState)} for all deleted      * child nodes. The default implementation does nothing.      *      * @param name name of the deleted child node      * @param before child node state before the change      */
specifier|public
name|void
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{     }
comment|/**      * Compares the given two node states. Any found differences are      * reported by calling the relevant added, changed or deleted methods.      *      * @param before node state before changes      * @param after node state after changes      */
specifier|public
name|void
name|compare
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|compareProperties
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|compareChildNodes
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
comment|/**      * Compares the properties of the given two node states.      *      * @param before node state before changes      * @param after node state after changes      */
specifier|private
name|void
name|compareProperties
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|beforeProperties
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyState
name|beforeProperty
range|:
name|before
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|beforeProperty
operator|.
name|getName
argument_list|()
decl_stmt|;
name|PropertyState
name|afterProperty
init|=
name|after
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|afterProperty
operator|==
literal|null
condition|)
block|{
name|propertyDeleted
argument_list|(
name|beforeProperty
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|beforeProperties
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|beforeProperty
operator|.
name|equals
argument_list|(
name|afterProperty
argument_list|)
condition|)
block|{
name|propertyChanged
argument_list|(
name|beforeProperty
argument_list|,
name|afterProperty
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|PropertyState
name|afterProperty
range|:
name|after
operator|.
name|getProperties
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|beforeProperties
operator|.
name|contains
argument_list|(
name|afterProperty
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|propertyAdded
argument_list|(
name|afterProperty
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Compares the child nodes of the given two node states.      *      * @param before node state before changes      * @param after node state after changes      */
specifier|private
name|void
name|compareChildNodes
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|beforeChildNodes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|beforeCNE
range|:
name|before
operator|.
name|getChildNodeEntries
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
control|)
block|{
name|String
name|name
init|=
name|beforeCNE
operator|.
name|getName
argument_list|()
decl_stmt|;
name|NodeState
name|beforeChild
init|=
name|beforeCNE
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|NodeState
name|afterChild
init|=
name|after
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|afterChild
operator|==
literal|null
condition|)
block|{
name|childNodeDeleted
argument_list|(
name|name
argument_list|,
name|beforeChild
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|beforeChildNodes
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|beforeChild
operator|.
name|equals
argument_list|(
name|afterChild
argument_list|)
condition|)
block|{
name|childNodeChanged
argument_list|(
name|name
argument_list|,
name|beforeChild
argument_list|,
name|afterChild
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|ChildNodeEntry
name|afterChild
range|:
name|after
operator|.
name|getChildNodeEntries
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
control|)
block|{
name|String
name|name
init|=
name|afterChild
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|beforeChildNodes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|childNodeAdded
argument_list|(
name|name
argument_list|,
name|afterChild
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

