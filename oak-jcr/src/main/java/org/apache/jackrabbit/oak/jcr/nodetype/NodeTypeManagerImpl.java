begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|nodetype
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NoSuchNodeTypeException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeDefinitionTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinitionTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|cnd
operator|.
name|CompactNodeTypeDefReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|cnd
operator|.
name|DefinitionBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|cnd
operator|.
name|DefinitionBuilderFactory
operator|.
name|AbstractNodeDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|cnd
operator|.
name|DefinitionBuilderFactory
operator|.
name|AbstractNodeTypeDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|cnd
operator|.
name|DefinitionBuilderFactory
operator|.
name|AbstractPropertyDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|cnd
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|NodeTypeIteratorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|SessionDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|value
operator|.
name|ValueFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
operator|.
name|NamespaceRegistryImpl
import|;
end_import

begin_class
specifier|public
class|class
name|NodeTypeManagerImpl
implements|implements
name|NodeTypeManager
block|{
specifier|private
specifier|final
name|ValueFactoryImpl
name|vf
decl_stmt|;
specifier|private
specifier|final
name|NameMapper
name|mapper
decl_stmt|;
specifier|private
specifier|final
name|NamespaceRegistry
name|nsregistry
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|NodeTypeDelegate
argument_list|>
name|typeDelegates
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|NodeType
argument_list|>
name|typemap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeType
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|NodeTypeManagerImpl
parameter_list|(
name|SessionDelegate
name|sd
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|this
operator|.
name|vf
operator|=
name|sd
operator|.
name|getValueFactory
argument_list|()
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
name|sd
operator|.
name|getNamePathMapper
argument_list|()
expr_stmt|;
name|this
operator|.
name|nsregistry
operator|=
operator|new
name|NamespaceRegistryImpl
argument_list|(
name|sd
operator|.
name|getContentSession
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|InputStream
name|stream
init|=
name|NodeTypeManagerImpl
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"builtin_nodetypes.cnd"
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|stream
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
try|try
block|{
name|DefinitionBuilderFactory
argument_list|<
name|NodeTypeDelegate
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|dbf
init|=
operator|new
name|DefinitionDelegateBuilderFactory
argument_list|()
decl_stmt|;
name|CompactNodeTypeDefReader
argument_list|<
name|NodeTypeDelegate
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|cndr
init|=
operator|new
name|CompactNodeTypeDefReader
argument_list|<
name|NodeTypeDelegate
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|(
name|reader
argument_list|,
literal|null
argument_list|,
name|dbf
argument_list|)
decl_stmt|;
name|typeDelegates
operator|=
name|cndr
operator|.
name|getNodeTypeDefinitions
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Failed to load built-in node types"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Failed to load built-in node types"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|typemap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|NodeTypeDelegate
name|t
range|:
name|typeDelegates
control|)
block|{
name|NodeType
name|nt
init|=
operator|new
name|NodeTypeImpl
argument_list|(
name|this
argument_list|,
name|vf
argument_list|,
name|mapper
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|typemap
operator|.
name|put
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|,
name|nt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNodeType
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|init
argument_list|()
expr_stmt|;
name|String
name|oakName
init|=
name|mapper
operator|.
name|getOakName
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// can be null, which is fine
return|return
name|typemap
operator|.
name|containsKey
argument_list|(
name|oakName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeType
name|getNodeType
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|init
argument_list|()
expr_stmt|;
name|String
name|oakName
init|=
name|mapper
operator|.
name|getOakName
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// can be null, which is fine
name|NodeType
name|type
init|=
name|typemap
operator|.
name|get
argument_list|(
name|oakName
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchNodeTypeException
argument_list|(
literal|"Unknown node type: "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeTypeIterator
name|getAllNodeTypes
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|init
argument_list|()
expr_stmt|;
return|return
operator|new
name|NodeTypeIteratorAdapter
argument_list|(
name|typemap
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeTypeIterator
name|getPrimaryNodeTypes
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|init
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|NodeType
argument_list|>
name|primary
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeType
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeType
name|type
range|:
name|typemap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|type
operator|.
name|isMixin
argument_list|()
condition|)
block|{
name|primary
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|NodeTypeIteratorAdapter
argument_list|(
name|primary
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeTypeIterator
name|getMixinNodeTypes
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|init
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|NodeType
argument_list|>
name|mixin
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeType
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeType
name|type
range|:
name|typemap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isMixin
argument_list|()
condition|)
block|{
name|mixin
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|NodeTypeIteratorAdapter
argument_list|(
name|mixin
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeTypeTemplate
name|createNodeTypeTemplate
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
operator|new
name|NodeTypeTemplateImpl
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeTypeTemplate
name|createNodeTypeTemplate
parameter_list|(
name|NodeTypeDefinition
name|ntd
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
operator|new
name|NodeTypeTemplateImpl
argument_list|(
name|ntd
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeDefinitionTemplate
name|createNodeDefinitionTemplate
parameter_list|()
block|{
return|return
operator|new
name|NodeDefinitionTemplateImpl
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyDefinitionTemplate
name|createPropertyDefinitionTemplate
parameter_list|()
block|{
return|return
operator|new
name|PropertyDefinitionTemplateImpl
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeType
name|registerNodeType
parameter_list|(
name|NodeTypeDefinition
name|ntd
parameter_list|,
name|boolean
name|allowUpdate
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// TODO proper node type registration... (OAK-66)
name|NodeTypeDelegate
name|delegate
init|=
operator|new
name|NodeTypeDelegate
argument_list|(
name|ntd
operator|.
name|getName
argument_list|()
argument_list|,
name|ntd
operator|.
name|getDeclaredSupertypeNames
argument_list|()
argument_list|,
name|ntd
operator|.
name|getPrimaryItemName
argument_list|()
argument_list|,
name|ntd
operator|.
name|isMixin
argument_list|()
argument_list|,
name|ntd
operator|.
name|isAbstract
argument_list|()
argument_list|,
name|ntd
operator|.
name|hasOrderableChildNodes
argument_list|()
argument_list|)
decl_stmt|;
name|NodeType
name|type
init|=
operator|new
name|NodeTypeImpl
argument_list|(
name|this
argument_list|,
name|vf
argument_list|,
name|mapper
argument_list|,
name|delegate
argument_list|)
decl_stmt|;
name|typemap
operator|.
name|put
argument_list|(
name|ntd
operator|.
name|getName
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeTypeIterator
name|registerNodeTypes
parameter_list|(
name|NodeTypeDefinition
index|[]
name|ntds
parameter_list|,
name|boolean
name|allowUpdate
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// TODO handle inter-type dependencies (OAK-66)
name|NodeType
index|[]
name|types
init|=
operator|new
name|NodeType
index|[
name|ntds
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ntds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
name|registerNodeType
argument_list|(
name|ntds
index|[
name|i
index|]
argument_list|,
name|allowUpdate
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|NodeTypeIteratorAdapter
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|types
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unregisterNodeType
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unregisterNodeTypes
parameter_list|(
name|String
index|[]
name|names
parameter_list|)
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|()
throw|;
block|}
specifier|private
class|class
name|DefinitionDelegateBuilderFactory
extends|extends
name|DefinitionBuilderFactory
argument_list|<
name|NodeTypeDelegate
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nsmap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getNamespaceMapping
parameter_list|()
block|{
return|return
name|nsmap
return|;
block|}
annotation|@
name|Override
specifier|public
name|AbstractNodeTypeDefinitionBuilder
argument_list|<
name|NodeTypeDelegate
argument_list|>
name|newNodeTypeDefinitionBuilder
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
operator|new
name|NodeTypeDefinitionDelegateBuilder
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNamespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|nsmap
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNamespaceMapping
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nsmap
parameter_list|)
block|{
name|this
operator|.
name|nsmap
operator|=
name|nsmap
expr_stmt|;
block|}
specifier|public
name|String
name|convertNameToOak
parameter_list|(
name|String
name|cndName
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|cndName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|int
name|pos
init|=
name|cndName
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
comment|// no colon
return|return
name|cndName
return|;
block|}
else|else
block|{
name|String
name|pref
init|=
name|cndName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|cndName
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|ns
init|=
name|nsmap
operator|.
name|get
argument_list|(
name|pref
argument_list|)
decl_stmt|;
if|if
condition|(
name|ns
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"no namespace defined for prefix "
operator|+
name|pref
argument_list|)
throw|;
block|}
else|else
block|{
name|String
name|oakprefix
init|=
name|nsregistry
operator|.
name|getPrefix
argument_list|(
name|ns
argument_list|)
decl_stmt|;
return|return
name|oakprefix
operator|+
literal|":"
operator|+
name|name
return|;
block|}
block|}
block|}
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|convertNamesToOak
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|cndNames
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|cndName
range|:
name|cndNames
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|convertNameToOak
argument_list|(
name|cndName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
class|class
name|NodeTypeDefinitionDelegateBuilder
extends|extends
name|AbstractNodeTypeDefinitionBuilder
argument_list|<
name|NodeTypeDelegate
argument_list|>
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|PropertyDefinitionDelegateBuilder
argument_list|>
name|propertyDefinitions
init|=
operator|new
name|ArrayList
argument_list|<
name|PropertyDefinitionDelegateBuilder
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|NodeDefinitionDelegateBuilder
argument_list|>
name|childNodeDefinitions
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeDefinitionDelegateBuilder
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|DefinitionDelegateBuilderFactory
name|ddbf
decl_stmt|;
specifier|private
name|String
name|primaryItemName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|declaredSuperTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|NodeTypeDefinitionDelegateBuilder
parameter_list|(
name|DefinitionDelegateBuilderFactory
name|ddbf
parameter_list|)
block|{
name|this
operator|.
name|ddbf
operator|=
name|ddbf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addSupertype
parameter_list|(
name|String
name|superType
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|this
operator|.
name|declaredSuperTypes
operator|.
name|add
argument_list|(
name|superType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPrimaryItemName
parameter_list|(
name|String
name|primaryItemName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|this
operator|.
name|primaryItemName
operator|=
name|primaryItemName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|AbstractPropertyDefinitionBuilder
argument_list|<
name|NodeTypeDelegate
argument_list|>
name|newPropertyDefinitionBuilder
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
operator|new
name|PropertyDefinitionDelegateBuilder
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|AbstractNodeDefinitionBuilder
argument_list|<
name|NodeTypeDelegate
argument_list|>
name|newNodeDefinitionBuilder
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
operator|new
name|NodeDefinitionDelegateBuilder
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeTypeDelegate
name|build
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|name
operator|=
name|ddbf
operator|.
name|convertNameToOak
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|declaredSuperTypes
operator|=
name|ddbf
operator|.
name|convertNamesToOak
argument_list|(
name|declaredSuperTypes
argument_list|)
expr_stmt|;
name|primaryItemName
operator|=
name|ddbf
operator|.
name|convertNameToOak
argument_list|(
name|primaryItemName
argument_list|)
expr_stmt|;
name|NodeTypeDelegate
name|result
init|=
operator|new
name|NodeTypeDelegate
argument_list|(
name|name
argument_list|,
name|declaredSuperTypes
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|declaredSuperTypes
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|primaryItemName
argument_list|,
name|isMixin
argument_list|,
name|isAbstract
argument_list|,
name|isOrderable
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyDefinitionDelegateBuilder
name|pdb
range|:
name|propertyDefinitions
control|)
block|{
name|result
operator|.
name|addPropertyDefinitionDelegate
argument_list|(
name|pdb
operator|.
name|getPropertyDefinitionDelegate
argument_list|(
name|vf
operator|.
name|getCoreValueFactory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NodeDefinitionDelegateBuilder
name|ndb
range|:
name|childNodeDefinitions
control|)
block|{
name|result
operator|.
name|addChildNodeDefinitionDelegate
argument_list|(
name|ndb
operator|.
name|getNodeDefinitionDelegate
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|addPropertyDefinition
parameter_list|(
name|PropertyDefinitionDelegateBuilder
name|pd
parameter_list|)
block|{
name|this
operator|.
name|propertyDefinitions
operator|.
name|add
argument_list|(
name|pd
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addNodeDefinition
parameter_list|(
name|NodeDefinitionDelegateBuilder
name|nd
parameter_list|)
block|{
name|this
operator|.
name|childNodeDefinitions
operator|.
name|add
argument_list|(
name|nd
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|convertNameToOak
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|ddbf
operator|.
name|convertNameToOak
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|NodeDefinitionDelegateBuilder
extends|extends
name|AbstractNodeDefinitionBuilder
argument_list|<
name|NodeTypeDelegate
argument_list|>
block|{
specifier|private
name|String
name|declaringNodeType
decl_stmt|;
specifier|private
name|String
name|defaultPrimaryType
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|requiredPrimaryTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|NodeTypeDefinitionDelegateBuilder
name|ndtb
decl_stmt|;
specifier|public
name|NodeDefinitionDelegateBuilder
parameter_list|(
name|NodeTypeDefinitionDelegateBuilder
name|ntdb
parameter_list|)
block|{
name|this
operator|.
name|ndtb
operator|=
name|ntdb
expr_stmt|;
block|}
specifier|public
name|NodeDefinitionDelegate
name|getNodeDefinitionDelegate
parameter_list|()
block|{
return|return
operator|new
name|NodeDefinitionDelegate
argument_list|(
name|name
argument_list|,
name|autocreate
argument_list|,
name|isMandatory
argument_list|,
name|onParent
argument_list|,
name|isProtected
argument_list|,
name|requiredPrimaryTypes
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|requiredPrimaryTypes
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|defaultPrimaryType
argument_list|,
name|allowSns
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDefaultPrimaryType
parameter_list|(
name|String
name|defaultPrimaryType
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|this
operator|.
name|defaultPrimaryType
operator|=
name|defaultPrimaryType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRequiredPrimaryType
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|this
operator|.
name|requiredPrimaryTypes
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDeclaringNodeType
parameter_list|(
name|String
name|declaringNodeType
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|this
operator|.
name|declaringNodeType
operator|=
name|declaringNodeType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|build
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|this
operator|.
name|ndtb
operator|.
name|addNodeDefinition
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|PropertyDefinitionDelegateBuilder
extends|extends
name|AbstractPropertyDefinitionBuilder
argument_list|<
name|NodeTypeDelegate
argument_list|>
block|{
specifier|private
name|String
name|declaringNodeType
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|defaultValues
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|valueConstraints
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|NodeTypeDefinitionDelegateBuilder
name|ndtb
decl_stmt|;
specifier|public
name|PropertyDefinitionDelegateBuilder
parameter_list|(
name|NodeTypeDefinitionDelegateBuilder
name|ntdb
parameter_list|)
block|{
name|this
operator|.
name|ndtb
operator|=
name|ntdb
expr_stmt|;
block|}
specifier|public
name|PropertyDefinitionDelegate
name|getPropertyDefinitionDelegate
parameter_list|(
name|CoreValueFactory
name|cvf
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|CoreValue
index|[]
name|defaultCoreValues
init|=
operator|new
name|CoreValue
index|[
name|defaultValues
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|defaultCoreValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// TODO: need name mapping?
name|defaultCoreValues
index|[
name|i
index|]
operator|=
name|cvf
operator|.
name|createValue
argument_list|(
name|defaultValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|requiredType
argument_list|)
expr_stmt|;
block|}
name|name
operator|=
name|ndtb
operator|.
name|convertNameToOak
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
operator|new
name|PropertyDefinitionDelegate
argument_list|(
name|name
argument_list|,
name|autocreate
argument_list|,
name|isMandatory
argument_list|,
name|onParent
argument_list|,
name|isProtected
argument_list|,
name|requiredType
argument_list|,
name|isMultiple
argument_list|,
name|defaultCoreValues
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addValueConstraint
parameter_list|(
name|String
name|constraint
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|this
operator|.
name|valueConstraints
operator|.
name|add
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addDefaultValues
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|this
operator|.
name|defaultValues
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDeclaringNodeType
parameter_list|(
name|String
name|declaringNodeType
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|this
operator|.
name|declaringNodeType
operator|=
name|declaringNodeType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|build
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|this
operator|.
name|ndtb
operator|.
name|addPropertyDefinition
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

