begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HttpsURLConnection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteStreams
operator|.
name|toByteArray
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreUtils
operator|.
name|randomStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractDataRecordAccessProviderIT
block|{
specifier|protected
specifier|abstract
name|ConfigurableDataRecordAccessProvider
name|getDataStore
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|DataRecord
name|doGetRecord
parameter_list|(
name|DataStore
name|ds
parameter_list|,
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|doDeleteRecord
parameter_list|(
name|DataStore
name|ds
parameter_list|,
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
function_decl|;
specifier|protected
specifier|abstract
name|long
name|getProviderMaxPartSize
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|HttpsURLConnection
name|getHttpsConnection
parameter_list|(
name|long
name|length
parameter_list|,
name|URI
name|url
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|static
name|long
name|ONE_KB
init|=
literal|1024
decl_stmt|;
specifier|protected
specifier|static
name|long
name|ONE_MB
init|=
name|ONE_KB
operator|*
name|ONE_KB
decl_stmt|;
specifier|protected
specifier|static
name|int
name|expirySeconds
init|=
literal|60
operator|*
literal|15
decl_stmt|;
specifier|protected
specifier|static
name|long
name|TEN_MB
init|=
name|ONE_MB
operator|*
literal|10
decl_stmt|;
specifier|protected
specifier|static
name|long
name|TWENTY_MB
init|=
name|ONE_MB
operator|*
literal|20
decl_stmt|;
specifier|protected
specifier|static
name|long
name|ONE_HUNDRED_MB
init|=
name|ONE_MB
operator|*
literal|100
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testMultiPartDirectUploadIT
parameter_list|()
throws|throws
name|DataRecordUploadException
throws|,
name|DataStoreException
throws|,
name|IOException
block|{
comment|// Disabled by default - this test uses a lot of memory.
comment|// Execute this test from the command line like this:
comment|//   mvn test -Dtest=<child-class-name> -Dtest.opts.memory=-Xmx2G
name|DataRecordAccessProvider
name|ds
init|=
name|getDataStore
argument_list|()
decl_stmt|;
for|for
control|(
name|AbstractDataRecordAccessProviderTest
operator|.
name|InitUploadResult
name|res
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|AbstractDataRecordAccessProviderTest
operator|.
name|InitUploadResult
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getUploadSize
parameter_list|()
block|{
return|return
name|TWENTY_MB
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxNumURIs
parameter_list|()
block|{
return|return
literal|10
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getExpectedNumURIs
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMinPartSize
parameter_list|()
block|{
return|return
name|TEN_MB
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMaxPartSize
parameter_list|()
block|{
return|return
name|getProviderMaxPartSize
argument_list|()
return|;
block|}
block|}
argument_list|,
operator|new
name|AbstractDataRecordAccessProviderTest
operator|.
name|InitUploadResult
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getUploadSize
parameter_list|()
block|{
return|return
name|ONE_HUNDRED_MB
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxNumURIs
parameter_list|()
block|{
return|return
literal|10
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getExpectedNumURIs
parameter_list|()
block|{
return|return
literal|10
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMinPartSize
parameter_list|()
block|{
return|return
name|TEN_MB
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMaxPartSize
parameter_list|()
block|{
return|return
name|getProviderMaxPartSize
argument_list|()
return|;
block|}
block|}
argument_list|)
control|)
block|{
name|DataRecord
name|uploadedRecord
init|=
literal|null
decl_stmt|;
try|try
block|{
name|DataRecordUpload
name|uploadContext
init|=
name|ds
operator|.
name|initiateDataRecordUpload
argument_list|(
name|res
operator|.
name|getUploadSize
argument_list|()
argument_list|,
name|res
operator|.
name|getMaxNumURIs
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getExpectedNumURIs
argument_list|()
argument_list|,
name|uploadContext
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|randomStream
argument_list|(
literal|0
argument_list|,
name|res
operator|.
name|getUploadSize
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|uploadSize
init|=
name|res
operator|.
name|getUploadSize
argument_list|()
decl_stmt|;
name|long
name|uploadPartSize
init|=
name|uploadSize
operator|/
name|uploadContext
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|size
argument_list|()
operator|+
operator|(
operator|(
name|uploadSize
operator|%
name|uploadContext
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|==
literal|0
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
name|assertTrue
argument_list|(
name|uploadPartSize
operator|<=
name|uploadContext
operator|.
name|getMaxPartSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uploadPartSize
operator|>=
name|uploadContext
operator|.
name|getMinPartSize
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|URI
name|uri
range|:
name|uploadContext
operator|.
name|getUploadURIs
argument_list|()
control|)
block|{
if|if
condition|(
literal|0
operator|>=
name|uploadSize
condition|)
break|break;
name|long
name|partSize
init|=
name|Math
operator|.
name|min
argument_list|(
name|uploadSize
argument_list|,
name|uploadPartSize
argument_list|)
decl_stmt|;
name|uploadSize
operator|-=
name|partSize
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|partSize
index|]
decl_stmt|;
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|partSize
argument_list|)
expr_stmt|;
name|doHttpsUpload
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
argument_list|)
argument_list|,
name|partSize
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
name|uploadedRecord
operator|=
name|ds
operator|.
name|completeDataRecordUpload
argument_list|(
name|uploadContext
operator|.
name|getUploadToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|uploadedRecord
argument_list|)
expr_stmt|;
name|DataRecord
name|retrievedRecord
init|=
name|doGetRecord
argument_list|(
operator|(
name|DataStore
operator|)
name|ds
argument_list|,
name|uploadedRecord
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|retrievedRecord
argument_list|)
expr_stmt|;
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|toByteArray
argument_list|(
name|in
argument_list|)
argument_list|,
name|toByteArray
argument_list|(
name|retrievedRecord
operator|.
name|getStream
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|uploadedRecord
condition|)
block|{
name|doDeleteRecord
argument_list|(
operator|(
name|DataStore
operator|)
name|ds
argument_list|,
name|uploadedRecord
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|doHttpsUpload
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|long
name|contentLength
parameter_list|,
name|URI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpsURLConnection
name|conn
init|=
name|getHttpsConnection
argument_list|(
name|contentLength
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|conn
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|responseCode
init|=
name|conn
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|conn
operator|.
name|getResponseMessage
argument_list|()
argument_list|,
name|responseCode
operator|<
literal|400
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

