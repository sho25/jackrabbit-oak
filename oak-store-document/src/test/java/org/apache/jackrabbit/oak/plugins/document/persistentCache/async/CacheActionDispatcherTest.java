begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
operator|.
name|async
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|valueOf
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|System
operator|.
name|currentTimeMillis
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|sleep
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
operator|.
name|async
operator|.
name|CacheActionDispatcher
operator|.
name|MAX_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CacheActionDispatcherTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testMaxQueueSize
parameter_list|()
block|{
name|CacheActionDispatcher
name|dispatcher
init|=
operator|new
name|CacheActionDispatcher
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_SIZE
operator|+
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|dispatcher
operator|.
name|add
argument_list|(
name|createWriteAction
argument_list|(
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|MAX_SIZE
argument_list|,
name|dispatcher
operator|.
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|dispatcher
operator|.
name|queue
operator|.
name|peek
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueue
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|threads
init|=
literal|5
decl_stmt|;
name|int
name|actionsPerThread
init|=
literal|100
decl_stmt|;
specifier|final
name|CacheActionDispatcher
name|dispatcher
init|=
operator|new
name|CacheActionDispatcher
argument_list|()
decl_stmt|;
name|Thread
name|queueThread
init|=
operator|new
name|Thread
argument_list|(
name|dispatcher
argument_list|)
decl_stmt|;
name|queueThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|DummyCacheWriteAction
argument_list|>
name|allActions
init|=
operator|new
name|ArrayList
argument_list|<
name|DummyCacheWriteAction
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|producerThreads
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|List
argument_list|<
name|DummyCacheWriteAction
argument_list|>
name|threadActions
init|=
operator|new
name|ArrayList
argument_list|<
name|DummyCacheWriteAction
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|actionsPerThread
condition|;
name|j
operator|++
control|)
block|{
name|DummyCacheWriteAction
name|action
init|=
operator|new
name|DummyCacheWriteAction
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%d_%d"
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|threadActions
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|allActions
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|DummyCacheWriteAction
name|a
range|:
name|threadActions
control|)
block|{
name|dispatcher
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|producerThreads
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|producerThreads
control|)
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|producerThreads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|long
name|start
init|=
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|allActions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|DummyCacheWriteAction
argument_list|>
name|it
init|=
name|allActions
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|finished
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|>
literal|10000
condition|)
block|{
name|fail
argument_list|(
literal|"Following actions hasn't been executed: "
operator|+
name|allActions
argument_list|)
expr_stmt|;
block|}
block|}
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|queueThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|queueThread
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|maxMemory
parameter_list|()
throws|throws
name|Exception
block|{
comment|// calculate memory for a few actions and use as memory maximum
name|long
name|maxMemory
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|CacheAction
argument_list|>
name|actions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|CacheAction
name|a
init|=
operator|new
name|DummyCacheWriteAction
argument_list|(
literal|"id-"
operator|+
name|i
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|maxMemory
operator|+=
name|a
operator|.
name|getMemory
argument_list|()
expr_stmt|;
block|}
name|CacheActionDispatcher
name|dispatcher
init|=
operator|new
name|CacheActionDispatcher
argument_list|(
name|maxMemory
argument_list|)
decl_stmt|;
comment|// adding actions to the queue must all succeed
for|for
control|(
name|CacheAction
name|a
range|:
name|actions
control|)
block|{
name|assertTrue
argument_list|(
name|dispatcher
operator|.
name|add
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// adding more must be rejected
name|assertFalse
argument_list|(
name|dispatcher
operator|.
name|add
argument_list|(
operator|new
name|DummyCacheWriteAction
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// drain the queue
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|dispatcher
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|dispatcher
operator|.
name|getMemory
argument_list|()
operator|==
literal|0
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dispatcher
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// must be able to add again
name|assertTrue
argument_list|(
name|dispatcher
operator|.
name|add
argument_list|(
name|actions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// but not if it exceeds the maximum memory
name|String
name|id
init|=
literal|"abcdef"
decl_stmt|;
name|CacheAction
name|big
decl_stmt|;
do|do
block|{
name|big
operator|=
operator|new
name|DummyCacheWriteAction
argument_list|(
name|id
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|id
operator|=
name|id
operator|+
name|id
expr_stmt|;
block|}
do|while
condition|(
name|big
operator|.
name|getMemory
argument_list|()
operator|<
name|maxMemory
condition|)
do|;
name|assertFalse
argument_list|(
name|dispatcher
operator|.
name|add
argument_list|(
name|big
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DummyCacheWriteAction
name|createWriteAction
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
operator|new
name|DummyCacheWriteAction
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|private
class|class
name|DummyCacheWriteAction
implements|implements
name|CacheAction
block|{
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
specifier|private
specifier|final
name|long
name|delay
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|finished
decl_stmt|;
specifier|private
name|DummyCacheWriteAction
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DummyCacheWriteAction
parameter_list|(
name|String
name|id
parameter_list|,
name|long
name|delay
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
try|try
block|{
name|sleep
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Interrupted"
argument_list|)
expr_stmt|;
block|}
name|finished
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMemory
parameter_list|()
block|{
return|return
name|StringUtils
operator|.
name|estimateMemoryUsage
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|id
return|;
block|}
block|}
block|}
end_class

end_unit

