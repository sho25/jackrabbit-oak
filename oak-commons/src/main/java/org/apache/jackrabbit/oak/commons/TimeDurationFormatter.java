begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * Format a time duration as human-readable string, inspired by  * {@link Stopwatch#toString()}.  */
end_comment

begin_class
specifier|public
class|class
name|TimeDurationFormatter
block|{
specifier|private
specifier|final
name|int
name|threshold
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|allowNonAscii
decl_stmt|;
specifier|private
specifier|final
name|Locale
name|locale
decl_stmt|;
specifier|private
specifier|static
name|TimeUnit
index|[]
name|UNITS
init|=
block|{
name|TimeUnit
operator|.
name|DAYS
block|,
name|TimeUnit
operator|.
name|HOURS
block|,
name|TimeUnit
operator|.
name|MINUTES
block|,
name|TimeUnit
operator|.
name|SECONDS
block|,
name|TimeUnit
operator|.
name|MILLISECONDS
block|,
name|TimeUnit
operator|.
name|MICROSECONDS
block|,
name|TimeUnit
operator|.
name|NANOSECONDS
block|}
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|TimeUnit
argument_list|,
name|String
argument_list|>
name|DISPLAYUNIT
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|TimeUnit
argument_list|,
name|String
argument_list|>
name|DISPLAYUNIT_ASCII
decl_stmt|;
static|static
block|{
name|HashMap
argument_list|<
name|TimeUnit
argument_list|,
name|String
argument_list|>
name|t
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|t
operator|.
name|put
argument_list|(
name|TimeUnit
operator|.
name|DAYS
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|TimeUnit
operator|.
name|HOURS
argument_list|,
literal|"h"
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
literal|"min"
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
literal|"s"
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
literal|"ms"
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|TimeUnit
operator|.
name|MICROSECONDS
argument_list|,
literal|"us"
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|,
literal|"ns"
argument_list|)
expr_stmt|;
name|DISPLAYUNIT_ASCII
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|t
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|t
argument_list|)
expr_stmt|;
comment|// Unicode "MICRO SIGN"
name|t
operator|.
name|put
argument_list|(
name|TimeUnit
operator|.
name|MICROSECONDS
argument_list|,
literal|"\u00b5s"
argument_list|)
expr_stmt|;
name|DISPLAYUNIT
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|TimeDurationFormatter
name|FOR_LOGGING
init|=
operator|new
name|TimeDurationFormatter
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|/**      * Default formatter suitable for logging (ASCII-only)      */
specifier|public
specifier|static
name|TimeDurationFormatter
name|forLogging
parameter_list|()
block|{
return|return
name|FOR_LOGGING
return|;
block|}
comment|/**      * @param locale      *            locale for formatting (affects the decimal point)      * @param threshold      *            integral value that needs to be exceeded to switch to a      *            certain time unit for display (e.g., specify {@code 2} to      *            switch to 'days' when the elapsed time is two or more days.      * @param allowNonAscii      *            set to {@code true} if the display unit can use the non-ASCII      *            "micro" Unicode character      */
specifier|public
name|TimeDurationFormatter
parameter_list|(
name|Locale
name|locale
parameter_list|,
name|int
name|threshold
parameter_list|,
name|boolean
name|allowNonAscii
parameter_list|)
block|{
name|this
operator|.
name|locale
operator|=
name|locale
expr_stmt|;
name|this
operator|.
name|threshold
operator|=
name|threshold
expr_stmt|;
name|this
operator|.
name|allowNonAscii
operator|=
name|allowNonAscii
expr_stmt|;
block|}
comment|/**      * Format the specified duration      * @param amount number of time units      * @param unit time unit      */
specifier|public
name|String
name|format
parameter_list|(
name|long
name|amount
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|long
name|nanos
init|=
name|unit
operator|.
name|toNanos
argument_list|(
name|amount
argument_list|)
decl_stmt|;
name|TimeUnit
name|outputUnit
init|=
name|TimeUnit
operator|.
name|NANOSECONDS
decl_stmt|;
for|for
control|(
name|TimeUnit
name|u
range|:
name|UNITS
control|)
block|{
if|if
condition|(
name|u
operator|.
name|convert
argument_list|(
name|nanos
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|>=
name|this
operator|.
name|threshold
condition|)
block|{
name|outputUnit
operator|=
name|u
expr_stmt|;
break|break;
block|}
block|}
name|double
name|convertedToUnit
init|=
operator|(
operator|(
name|double
operator|)
name|nanos
operator|)
operator|/
operator|(
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|convert
argument_list|(
literal|1
argument_list|,
name|outputUnit
argument_list|)
operator|)
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|this
operator|.
name|locale
argument_list|,
literal|"%.4g %s"
argument_list|,
name|convertedToUnit
argument_list|,
name|this
operator|.
name|allowNonAscii
condition|?
name|DISPLAYUNIT
operator|.
name|get
argument_list|(
name|outputUnit
argument_list|)
else|:
name|DISPLAYUNIT_ASCII
operator|.
name|get
argument_list|(
name|outputUnit
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

