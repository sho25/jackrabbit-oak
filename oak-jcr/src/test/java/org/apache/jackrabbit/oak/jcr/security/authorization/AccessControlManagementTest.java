begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * AccessControlManagementTest... TODO  *  * copied from jr2.x AcReadWriteTest  */
end_comment

begin_class
annotation|@
name|Ignore
argument_list|(
literal|"OAK-51"
argument_list|)
specifier|public
class|class
name|AccessControlManagementTest
extends|extends
name|AbstractEvaluationTest
block|{
specifier|private
name|String
name|path
decl_stmt|;
specifier|private
name|String
name|childNPath
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// create some nodes below the test root in order to apply ac-stuff
name|Node
name|node
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|Node
name|cn1
init|=
name|node
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|Property
name|cp1
init|=
name|node
operator|.
name|setProperty
argument_list|(
name|propertyName1
argument_list|,
literal|"anyValue"
argument_list|)
decl_stmt|;
name|Node
name|cn2
init|=
name|node
operator|.
name|addNode
argument_list|(
name|nodeName3
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|Property
name|ccp1
init|=
name|cn1
operator|.
name|setProperty
argument_list|(
name|propertyName1
argument_list|,
literal|"childNodeProperty"
argument_list|)
decl_stmt|;
name|Node
name|n2
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|path
operator|=
name|node
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|childNPath
operator|=
name|cn1
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAccessControlPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* precondition:           testuser must have READ-only permission on test-node and below         */
name|checkReadOnly
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|/* grant 'testUser' rep:write, rep:readAccessControl and            rep:modifyAccessControl privileges at 'path' */
name|Privilege
index|[]
name|privileges
init|=
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|REP_WRITE
block|,
name|Privilege
operator|.
name|JCR_READ_ACCESS_CONTROL
block|,
name|Privilege
operator|.
name|JCR_MODIFY_ACCESS_CONTROL
block|}
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|allow
argument_list|(
name|path
argument_list|,
name|privileges
argument_list|)
decl_stmt|;
name|Session
name|testSession
init|=
name|getTestSession
argument_list|()
decl_stmt|;
name|AccessControlManager
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
comment|/*          testuser must have          - permission to view AC items          - permission to modify AC items         */
comment|// the policy node however must be visible to the test-user
name|assertTrue
argument_list|(
name|testSession
operator|.
name|itemExists
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
operator|+
literal|"/rep:policy"
argument_list|)
argument_list|)
expr_stmt|;
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|testAcMgr
operator|.
name|removePolicy
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test if a new applicable policy can be applied within a individual      * subtree where AC-modification is allowed.      *      * @see<a href="https://issues.apache.org/jira/browse/JCR-2869">JCR-2869</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testSetNewPolicy
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* precondition:           testuser must have READ-only permission on test-node and below         */
name|checkReadOnly
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|/* grant 'testUser' rep:write, rep:readAccessControl and            rep:modifyAccessControl privileges at 'path' */
name|Privilege
index|[]
name|privileges
init|=
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|REP_WRITE
block|,
name|Privilege
operator|.
name|JCR_READ_ACCESS_CONTROL
block|,
name|Privilege
operator|.
name|JCR_MODIFY_ACCESS_CONTROL
block|}
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|privileges
argument_list|)
expr_stmt|;
name|AccessControlManager
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
comment|/*          testuser must be allowed to set a new policy at a child node.         */
name|AccessControlPolicyIterator
name|it
init|=
name|testAcMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|childNPath
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AccessControlPolicy
name|plc
init|=
name|it
operator|.
name|nextAccessControlPolicy
argument_list|()
decl_stmt|;
name|testAcMgr
operator|.
name|setPolicy
argument_list|(
name|childNPath
argument_list|,
name|plc
argument_list|)
expr_stmt|;
name|testAcMgr
operator|.
name|removePolicy
argument_list|(
name|childNPath
argument_list|,
name|plc
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetModifiedPolicy
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* precondition:           testuser must have READ-only permission on test-node and below         */
name|checkReadOnly
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|/* grant 'testUser' rep:write, rep:readAccessControl and            rep:modifyAccessControl privileges at 'path' */
name|Privilege
index|[]
name|privileges
init|=
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|REP_WRITE
block|,
name|Privilege
operator|.
name|JCR_READ_ACCESS_CONTROL
block|,
name|Privilege
operator|.
name|JCR_MODIFY_ACCESS_CONTROL
block|}
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|allow
argument_list|(
name|path
argument_list|,
name|privileges
argument_list|)
decl_stmt|;
comment|/*          testuser must be allowed to set (modified) policy at target node.         */
name|Session
name|testSession
init|=
name|getTestSession
argument_list|()
decl_stmt|;
name|AccessControlManager
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policies
index|[
literal|0
index|]
operator|instanceof
name|AccessControlList
argument_list|)
expr_stmt|;
name|AccessControlList
name|policy
init|=
operator|(
name|AccessControlList
operator|)
name|policies
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|policy
operator|.
name|addAccessControlEntry
argument_list|(
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_LOCK_MANAGEMENT
argument_list|)
argument_list|)
condition|)
block|{
name|testAcMgr
operator|.
name|setPolicy
argument_list|(
name|path
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRetrievePrivilegesOnAcNodes
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* precondition:           testuser must have READ-only permission on test-node and below         */
name|checkReadOnly
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// give 'testUser' jcr:readAccessControl privileges at 'path'
name|Privilege
index|[]
name|privileges
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|allow
argument_list|(
name|path
argument_list|,
name|privileges
argument_list|)
decl_stmt|;
comment|/*          testuser must be allowed to read ac-content at target node.         */
name|Session
name|testSession
init|=
name|getTestSession
argument_list|()
decl_stmt|;
name|AccessControlManager
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|privileges
argument_list|)
argument_list|)
expr_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policies
index|[
literal|0
index|]
operator|instanceof
name|JackrabbitAccessControlList
argument_list|)
expr_stmt|;
name|String
name|aclNodePath
init|=
literal|null
decl_stmt|;
name|Node
name|n
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeIterator
name|itr
init|=
name|n
operator|.
name|getNodes
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Node
name|child
init|=
name|itr
operator|.
name|nextNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|isNodeType
argument_list|(
literal|"rep:Policy"
argument_list|)
condition|)
block|{
name|aclNodePath
operator|=
name|child
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|aclNodePath
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Expected node at "
operator|+
name|path
operator|+
literal|" to have an ACL child node."
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|aclNodePath
argument_list|,
name|privileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|aclNodePath
argument_list|,
name|Session
operator|.
name|ACTION_READ
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeIterator
name|aceNodes
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|aclNodePath
argument_list|)
operator|.
name|getNodes
argument_list|()
init|;
name|aceNodes
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|aceNodePath
init|=
name|aceNodes
operator|.
name|nextNode
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|aceNodePath
argument_list|,
name|privileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|aceNodePath
argument_list|,
name|Session
operator|.
name|ACTION_READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadAccessControl
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* precondition:           testuser must have READ-only permission on test-node and below         */
name|checkReadOnly
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|/* give 'testUser' jcr:readAccessControl privileges at subtree below            path excluding the node at path itself. */
name|Privilege
index|[]
name|privileges
init|=
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_READ_ACCESS_CONTROL
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
argument_list|()
decl_stmt|;
name|restrictions
operator|.
name|put
argument_list|(
literal|"rep:glob"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|'/'
operator|+
name|nodeName2
argument_list|)
argument_list|)
expr_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|allow
argument_list|(
name|path
argument_list|,
name|privileges
argument_list|,
name|restrictions
argument_list|)
decl_stmt|;
comment|/*          testuser must not be allowed to read AC content at the target node;          however, retrieving potential AC content at 'childPath' is granted.         */
name|Session
name|testSession
init|=
name|getTestSession
argument_list|()
decl_stmt|;
name|AccessControlManager
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|privileges
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessDeniedException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success.
block|}
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
name|privileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|childNPath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|/* similarly reading the corresponding AC items at 'path' must be forbidden */
name|String
name|aclNodePath
init|=
literal|null
decl_stmt|;
name|Node
name|n
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeIterator
name|itr
init|=
name|n
operator|.
name|getNodes
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Node
name|child
init|=
name|itr
operator|.
name|nextNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|isNodeType
argument_list|(
literal|"rep:Policy"
argument_list|)
condition|)
block|{
name|aclNodePath
operator|=
name|child
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|aclNodePath
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Expected node at "
operator|+
name|path
operator|+
literal|" to have an ACL child node."
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|aclNodePath
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeIterator
name|aceNodes
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|aclNodePath
argument_list|)
operator|.
name|getNodes
argument_list|()
init|;
name|aceNodes
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Node
name|aceNode
init|=
name|aceNodes
operator|.
name|nextNode
argument_list|()
decl_stmt|;
name|String
name|aceNodePath
init|=
name|aceNode
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|aceNodePath
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|PropertyIterator
name|it
init|=
name|aceNode
operator|.
name|getProperties
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|assertFalse
argument_list|(
name|testSession
operator|.
name|propertyExists
argument_list|(
name|it
operator|.
name|nextProperty
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

