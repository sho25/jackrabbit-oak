begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|ReadOnlyTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
import|;
end_import

begin_comment
comment|/**  * NodeTypeManager implementation based on a given {@code NodeState} in order  * to be used for the various node type related validators.  */
end_comment

begin_class
class|class
name|ValidatingNodeTypeManager
extends|extends
name|ReadWriteNodeTypeManager
block|{
comment|/**      * logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ValidatingNodeTypeManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Tree
name|types
decl_stmt|;
name|ValidatingNodeTypeManager
parameter_list|(
name|NodeState
name|nodeState
parameter_list|)
block|{
name|this
operator|.
name|types
operator|=
name|getTypes
argument_list|(
name|nodeState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Tree
name|getTypes
parameter_list|()
block|{
return|return
name|types
return|;
block|}
specifier|private
name|Tree
name|getTypes
parameter_list|(
name|NodeState
name|after
parameter_list|)
block|{
name|Tree
name|tree
init|=
operator|new
name|ReadOnlyTree
argument_list|(
name|after
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
control|)
block|{
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
break|break;
block|}
else|else
block|{
name|tree
operator|=
name|tree
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tree
return|;
block|}
block|}
end_class

end_unit

