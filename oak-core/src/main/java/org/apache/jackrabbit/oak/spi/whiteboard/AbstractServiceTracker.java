begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_comment
comment|/**  * {@code AbstractServiceTracker} is a base class for composite components  * that dynamically look up the available component services from the  * whiteboard.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractServiceTracker
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
decl_stmt|;
specifier|private
name|Tracker
argument_list|<
name|T
argument_list|>
name|tracker
init|=
literal|null
decl_stmt|;
specifier|public
name|AbstractServiceTracker
parameter_list|(
annotation|@
name|Nonnull
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|checkNotNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|(
name|Whiteboard
name|whiteboard
parameter_list|)
block|{
name|checkState
argument_list|(
name|tracker
operator|==
literal|null
argument_list|)
expr_stmt|;
name|tracker
operator|=
name|whiteboard
operator|.
name|track
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
name|checkState
argument_list|(
name|tracker
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|tracker
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Returns all services of type {@code T} currently available.      *      * @return services currently available.      */
specifier|protected
specifier|synchronized
name|List
argument_list|<
name|T
argument_list|>
name|getServices
parameter_list|()
block|{
name|checkState
argument_list|(
name|tracker
operator|!=
literal|null
argument_list|)
expr_stmt|;
return|return
name|tracker
operator|.
name|getServices
argument_list|()
return|;
block|}
block|}
end_class

end_unit

