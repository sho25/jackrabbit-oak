begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|CloudStorageAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentNodeStorePersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|configurationPolicy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
name|configurationPid
operator|=
block|{
name|Configuration
operator|.
name|PID
block|}
argument_list|)
specifier|public
class|class
name|AzureSegmentStoreService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AzureSegmentStoreService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CONTAINER_NAME
init|=
literal|"oak"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_ROOT_PATH
init|=
literal|"/oak"
decl_stmt|;
specifier|private
name|ServiceRegistration
name|registration
decl_stmt|;
specifier|private
name|SegmentNodeStorePersistence
name|persistence
decl_stmt|;
annotation|@
name|Activate
specifier|public
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|,
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|persistence
operator|=
name|createAzurePersistence
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|registration
operator|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|registerService
argument_list|(
name|SegmentNodeStorePersistence
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|persistence
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|public
name|void
name|deactivate
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|registration
operator|!=
literal|null
condition|)
block|{
name|registration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|registration
operator|=
literal|null
expr_stmt|;
block|}
name|persistence
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
specifier|static
name|SegmentNodeStorePersistence
name|createAzurePersistence
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|StringBuilder
name|connectionString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|connectionURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|connectionString
operator|.
name|append
argument_list|(
name|configuration
operator|.
name|connectionURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connectionString
operator|.
name|append
argument_list|(
literal|"DefaultEndpointsProtocol=https;"
argument_list|)
expr_stmt|;
name|connectionString
operator|.
name|append
argument_list|(
literal|"AccountName="
argument_list|)
operator|.
name|append
argument_list|(
name|configuration
operator|.
name|accountName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
name|connectionString
operator|.
name|append
argument_list|(
literal|"AccountKey="
argument_list|)
operator|.
name|append
argument_list|(
name|configuration
operator|.
name|accessKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Connection string: {}"
argument_list|,
name|connectionString
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|CloudStorageAccount
name|cloud
init|=
name|CloudStorageAccount
operator|.
name|parse
argument_list|(
name|connectionString
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|CloudBlobContainer
name|container
init|=
name|cloud
operator|.
name|createCloudBlobClient
argument_list|()
operator|.
name|getContainerReference
argument_list|(
name|configuration
operator|.
name|containerName
argument_list|()
argument_list|)
decl_stmt|;
name|container
operator|.
name|createIfNotExists
argument_list|()
expr_stmt|;
name|String
name|path
init|=
name|configuration
operator|.
name|rootPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
name|path
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|path
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|AzurePersistence
name|persistence
init|=
operator|new
name|AzurePersistence
argument_list|(
name|container
operator|.
name|getDirectoryReference
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|persistence
return|;
block|}
catch|catch
parameter_list|(
name|StorageException
decl||
name|URISyntaxException
decl||
name|InvalidKeyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

