begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|jaas
operator|.
name|boot
operator|.
name|ProxyLoginModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityProviderManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalLoginModuleTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|ExternalIDPManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|ExternalLoginModuleFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|SyncManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|testing
operator|.
name|mock
operator|.
name|osgi
operator|.
name|MockOsgi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
specifier|public
class|class
name|SynMBeanImplOSGiTest
extends|extends
name|ExternalLoginModuleTestBase
block|{
specifier|private
name|ExternalLoginModuleFactory
name|externalLoginModuleFactory
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|context
operator|.
name|registerService
argument_list|(
name|SyncManager
operator|.
name|class
argument_list|,
operator|new
name|SyncManagerImpl
argument_list|(
name|whiteboard
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|registerService
argument_list|(
name|ExternalIdentityProviderManager
operator|.
name|class
argument_list|,
operator|new
name|ExternalIDPManagerImpl
argument_list|(
name|whiteboard
argument_list|)
argument_list|)
expr_stmt|;
name|externalLoginModuleFactory
operator|=
operator|new
name|ExternalLoginModuleFactory
argument_list|()
expr_stmt|;
name|context
operator|.
name|registerInjectActivateService
argument_list|(
name|externalLoginModuleFactory
argument_list|)
expr_stmt|;
name|assertSyncBeanRegistration
argument_list|(
name|externalLoginModuleFactory
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Oak
name|withEditors
parameter_list|(
name|Oak
name|oak
parameter_list|)
block|{
name|super
operator|.
name|withEditors
argument_list|(
name|oak
argument_list|)
expr_stmt|;
comment|//Just grab the whiteboard but do not register any manager here
comment|//This would ensure that LoginModule would only work if the required managers
comment|//are preset
name|whiteboard
operator|=
name|oak
operator|.
name|getWhiteboard
argument_list|()
expr_stmt|;
return|return
name|oak
return|;
block|}
specifier|protected
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
operator|new
name|Configuration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AppConfigurationEntry
index|[]
name|getAppConfigurationEntry
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|AppConfigurationEntry
name|entry
init|=
operator|new
name|AppConfigurationEntry
argument_list|(
comment|//Use ProxyLoginModule so that factory mode can be used
name|ProxyLoginModule
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|REQUIRED
argument_list|,
name|options
argument_list|)
decl_stmt|;
return|return
operator|new
name|AppConfigurationEntry
index|[]
block|{
name|entry
block|}
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegisterContentRepository
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|registerService
argument_list|(
name|ContentRepository
operator|.
name|class
argument_list|,
name|getContentRepository
argument_list|()
argument_list|)
expr_stmt|;
name|assertSyncBeanRegistration
argument_list|(
name|externalLoginModuleFactory
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegisterSecurityProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|registerService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
name|assertSyncBeanRegistration
argument_list|(
name|externalLoginModuleFactory
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContentRepositoryAndSecurityProviderServices
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|registerService
argument_list|(
name|ContentRepository
operator|.
name|class
argument_list|,
name|getContentRepository
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|registerService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
name|assertSyncBeanRegistration
argument_list|(
name|externalLoginModuleFactory
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBind
parameter_list|()
throws|throws
name|Exception
block|{
name|externalLoginModuleFactory
operator|.
name|bindSecurityProvider
argument_list|(
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
name|assertSyncBeanRegistration
argument_list|(
name|externalLoginModuleFactory
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|externalLoginModuleFactory
operator|.
name|bindContentRepository
argument_list|(
name|getContentRepository
argument_list|()
argument_list|)
expr_stmt|;
name|assertSyncBeanRegistration
argument_list|(
name|externalLoginModuleFactory
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnbind
parameter_list|()
throws|throws
name|Exception
block|{
name|externalLoginModuleFactory
operator|.
name|bindSecurityProvider
argument_list|(
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
name|externalLoginModuleFactory
operator|.
name|bindContentRepository
argument_list|(
name|getContentRepository
argument_list|()
argument_list|)
expr_stmt|;
name|externalLoginModuleFactory
operator|.
name|unbindContentRepository
argument_list|(
name|getContentRepository
argument_list|()
argument_list|)
expr_stmt|;
name|assertSyncBeanRegistration
argument_list|(
name|externalLoginModuleFactory
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|externalLoginModuleFactory
operator|.
name|unbindSecurityProvider
argument_list|(
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
name|assertSyncBeanRegistration
argument_list|(
name|externalLoginModuleFactory
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeactivateFactory
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|registerService
argument_list|(
name|ContentRepository
operator|.
name|class
argument_list|,
name|getContentRepository
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|registerService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
name|MockOsgi
operator|.
name|deactivate
argument_list|(
name|externalLoginModuleFactory
argument_list|,
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSyncBeanRegistration
argument_list|(
name|externalLoginModuleFactory
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertSyncBeanRegistration
parameter_list|(
name|ExternalLoginModuleFactory
name|externalLoginModuleFactory
parameter_list|,
name|boolean
name|exists
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|ExternalLoginModuleFactory
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"mbeanRegistration"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|mbeanRegistration
init|=
name|f
operator|.
name|get
argument_list|(
name|externalLoginModuleFactory
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
condition|)
block|{
name|assertNotNull
argument_list|(
name|mbeanRegistration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|mbeanRegistration
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

