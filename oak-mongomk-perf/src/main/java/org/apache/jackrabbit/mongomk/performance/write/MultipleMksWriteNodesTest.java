begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|performance
operator|.
name|write
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|MongoMicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|util
operator|.
name|MongoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Writing tests with multiple Mks.  * @author rogoz  *  */
end_comment

begin_class
specifier|public
class|class
name|MultipleMksWriteNodesTest
extends|extends
name|MultipleNodesTestBase
block|{
specifier|static
name|int
name|mkNumber
init|=
literal|5
decl_stmt|;
specifier|static
name|long
name|nodesNumber
init|=
literal|2000
decl_stmt|;
specifier|static
name|SimpleWriter
index|[]
name|sWorker
init|=
operator|new
name|SimpleWriter
index|[
name|mkNumber
index|]
decl_stmt|;
specifier|static
name|AdvanceWriter
index|[]
name|aWorker
init|=
operator|new
name|AdvanceWriter
index|[
name|mkNumber
index|]
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|readConfig
argument_list|()
expr_stmt|;
name|initMongo
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mkNumber
condition|;
name|i
operator|++
control|)
block|{
name|MongoMicroKernel
name|mk
init|=
name|initMicroKernel
argument_list|()
decl_stmt|;
name|sWorker
index|[
name|i
index|]
operator|=
operator|new
name|SimpleWriter
argument_list|(
literal|"Thread "
operator|+
name|i
argument_list|,
name|mk
argument_list|,
name|nodesNumber
argument_list|)
expr_stmt|;
name|aWorker
index|[
name|i
index|]
operator|=
operator|new
name|AdvanceWriter
argument_list|(
literal|"Thread "
operator|+
name|i
argument_list|,
name|mk
argument_list|,
name|nodesNumber
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|cleanDatabase
parameter_list|()
block|{
name|MongoUtil
operator|.
name|initDatabase
argument_list|(
name|mongoConnection
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Each worker creates 2000 nodes on the same level. 	 * 5 workers x 2000 nodes=10000 nodes 	 * @throws InterruptedException 	 */
annotation|@
name|Test
specifier|public
name|void
name|testWriteSameLine
parameter_list|()
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mkNumber
condition|;
name|i
operator|++
control|)
block|{
name|sWorker
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mkNumber
condition|;
name|i
operator|++
control|)
block|{
name|sWorker
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 * Each worker is creating a pyramid containing 2000 nodes. 	 * 5 workers x 2000 nodes=10000 nodes 	 *  	 * @throws InterruptedException 	 */
annotation|@
name|Test
specifier|public
name|void
name|testWritePyramid
parameter_list|()
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mkNumber
condition|;
name|i
operator|++
control|)
block|{
name|aWorker
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mkNumber
condition|;
name|i
operator|++
control|)
block|{
name|aWorker
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
class|class
name|SimpleWriter
extends|extends
name|Thread
block|{
name|MongoMicroKernel
name|mk
decl_stmt|;
name|long
name|nodesNumber
decl_stmt|;
specifier|public
name|SimpleWriter
parameter_list|(
name|String
name|str
parameter_list|,
name|MongoMicroKernel
name|mk
parameter_list|,
name|long
name|nodesNumber
parameter_list|)
block|{
name|super
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|this
operator|.
name|mk
operator|=
name|mk
expr_stmt|;
name|this
operator|.
name|nodesNumber
operator|=
name|nodesNumber
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodesNumber
condition|;
name|i
operator|++
control|)
block|{
name|TestUtil
operator|.
name|createNode
argument_list|(
name|mk
argument_list|,
literal|"/"
argument_list|,
name|getId
argument_list|()
operator|+
literal|"No"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
class|class
name|AdvanceWriter
extends|extends
name|Thread
block|{
name|MongoMicroKernel
name|mk
decl_stmt|;
name|long
name|nodesNumber
decl_stmt|;
specifier|public
name|AdvanceWriter
parameter_list|(
name|String
name|str
parameter_list|,
name|MongoMicroKernel
name|mk
parameter_list|,
name|long
name|nodesNumber
parameter_list|)
block|{
name|super
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|this
operator|.
name|mk
operator|=
name|mk
expr_stmt|;
name|this
operator|.
name|nodesNumber
operator|=
name|nodesNumber
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|TestUtil
operator|.
name|insertNode
argument_list|(
name|mk
argument_list|,
literal|"/"
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|,
name|nodesNumber
argument_list|,
literal|"T"
operator|+
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

