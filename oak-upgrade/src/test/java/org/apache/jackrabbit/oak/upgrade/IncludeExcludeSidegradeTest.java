begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|repository
operator|.
name|RepositoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_class
specifier|public
class|class
name|IncludeExcludeSidegradeTest
extends|extends
name|IncludeExcludeUpgradeTest
block|{
annotation|@
name|Before
specifier|public
specifier|synchronized
name|void
name|upgradeRepository
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|targetNodeStore
operator|==
literal|null
condition|)
block|{
name|File
name|directory
init|=
name|getTestDirectory
argument_list|()
decl_stmt|;
name|File
name|source
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
literal|"source"
argument_list|)
decl_stmt|;
name|source
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileStore
name|fileStore
init|=
name|FileStore
operator|.
name|builder
argument_list|(
name|source
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|SegmentNodeStore
name|segmentNodeStore
init|=
name|SegmentNodeStore
operator|.
name|builder
argument_list|(
name|fileStore
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RepositoryImpl
name|repository
init|=
operator|(
name|RepositoryImpl
operator|)
operator|new
name|Jcr
argument_list|(
operator|new
name|Oak
argument_list|(
name|segmentNodeStore
argument_list|)
argument_list|)
operator|.
name|createRepository
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|repository
operator|.
name|login
argument_list|(
name|CREDENTIALS
argument_list|)
decl_stmt|;
try|try
block|{
name|createSourceContent
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
name|repository
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|fileStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|final
name|NodeStore
name|target
init|=
name|getTargetNodeStore
argument_list|()
decl_stmt|;
name|doUpgradeRepository
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|targetNodeStore
operator|=
name|target
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doUpgradeRepository
parameter_list|(
name|File
name|source
parameter_list|,
name|NodeStore
name|target
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|FileStore
name|fileStore
init|=
name|FileStore
operator|.
name|builder
argument_list|(
name|source
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|SegmentNodeStore
name|segmentNodeStore
init|=
name|SegmentNodeStore
operator|.
name|builder
argument_list|(
name|fileStore
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|RepositorySidegrade
name|sidegrade
init|=
operator|new
name|RepositorySidegrade
argument_list|(
name|segmentNodeStore
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|sidegrade
operator|.
name|setIncludes
argument_list|(
literal|"/content/foo/en"
argument_list|,
literal|"/content/assets/foo"
argument_list|)
expr_stmt|;
name|sidegrade
operator|.
name|setExcludes
argument_list|(
literal|"/content/assets/foo/2013"
argument_list|,
literal|"/content/assets/foo/2012"
argument_list|,
literal|"/content/assets/foo/2011"
argument_list|,
literal|"/content/assets/foo/2010"
argument_list|)
expr_stmt|;
name|sidegrade
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fileStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

