begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_comment
comment|/**  * Content change editor. An editor receives information about changes  * to the content tree and can reject the changes by throwing a  * {@link CommitFailedException} or adjust them using the {@link NodeBuilder}  * instance passed to the {@link EditorProvider} that returned this editor.  * Note that the given builder can contain updates from multiple different  * editors, so its state might not match exactly the state of the given  * after state.  *  * @since Oak 0.7  */
end_comment

begin_interface
specifier|public
interface|interface
name|Editor
block|{
name|void
name|enter
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
function_decl|;
name|void
name|leave
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
function_decl|;
comment|/**      * Processes an added property.      *      * @param after the added property      * @throws CommitFailedException if processing failed      */
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
function_decl|;
comment|/**      * Processes a changed property.      *      * @param before the original property      * @param after  the changed property      * @throws CommitFailedException if processing failed      */
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
function_decl|;
comment|/**      * Processes a removed property.      *      * @param before the removed property      * @throws CommitFailedException if processing failed      */
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
function_decl|;
comment|/**      * Processes an added child node.      *      * @param name name of the added node      * @param after the added child node      * @return an editor for processing the subtree below the added node,      *         or {@code null} if the subtree does not need processing      * @throws CommitFailedException if processing failed      */
annotation|@
name|CheckForNull
name|Editor
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
function_decl|;
comment|/**      * Processes a changed child node.      *      * @param name name of the changed node      * @param before child node before the change      * @param after child node after the change      * @return an editor for processing the subtree below the added node,      *         or {@code null} if the subtree does not need processing      * @throws CommitFailedException if processing failed      */
annotation|@
name|CheckForNull
name|Editor
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
function_decl|;
comment|/**      * Processes a deleted child node.      *      * @param name name of the deleted node      * @param before the deleted child node      * @return an editor for processing the subtree below the removed node,      *         or {@code null} if the subtree does not need processing      * @throws CommitFailedException if processing failed      */
annotation|@
name|CheckForNull
name|Editor
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
function_decl|;
block|}
end_interface

end_unit

