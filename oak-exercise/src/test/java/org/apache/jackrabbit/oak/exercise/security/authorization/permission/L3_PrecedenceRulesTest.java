begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|ExerciseUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Authorization (Permission Evaluation)  * =============================================================================  *  * Title: Basic Precedence Rules in Permission Evaluation  * -----------------------------------------------------------------------------  *  * Goal:  * The aim of this exercise is to make you familiar with some implementations  * details of the default permission evaluation.  *  * Exercises:  *  * - Overview  *   Read the on the Oak documentation about the default permission evaluation  *   implementation such that the following test cases are easy to solve.  *  *  * - {@link #testGroupMembership()}  *   Test illustrating that permissions granted/denied to groups are inherited  *   to the group members.  *  * - {@link #testHierarchy()}  *   Test illustrating that in the default implemenation permissions are inherited  *   though the item hierarchy.  *   Create the correct permission setup to verify this.  *  * - {@link #testAceOrder()}  *   This case shows how the order of ACEs within a given ACL affect the resulting  *   permissions. Fix the test case without dropping either of the two ACEs such  *   that the test passes and look at the ACEs present on the list before and  *   after the fix.  *  *   Question: How many ways to you find to fix the test?  *  * - {@link #testPrecedenceOfUserPrincipals()}  *   The goal of this test is to make you aware of the precendence of user principals  *   during permission evaluation.  *   Fix the test according to the instructions.  *  *   Question: How many ways to you find to fix the test?  *  * - {@link #testCombination()} and {@link #testCombination2()}  *   Additional tests combining the different rules testes above.  *   Fill in the correct values and explain the behaviour.  *  *  * Additional Exercise  * -----------------------------------------------------------------------------  *  * So far the test-cases only modify read permissions.  *  * - Write additional test-cases playing with different privileges  *  * - Once you feel comfortable with the basics include restrictions in your  *   tests and verify your expectations.  *  * - Create a test setting up permission at the 'null' path and describe the  *   result.  *   Question: What can you say about the inheritance rules you learned so far  *             when it comes to repository level permissions?  *  * HINT: there are plenty of test-cases present with oak-jcr and oak-core. Use  *       the tests already present to invent new exercises.  *  *  *</pre>  *  * @see<a href="http://jackrabbit.apache.org/oak/docs/security/permission/evaluation.html">Permission Evaluation in the Oak Docu</a>  */
end_comment

begin_class
specifier|public
class|class
name|L3_PrecedenceRulesTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
name|Principal
name|testPrincipal
decl_stmt|;
specifier|private
name|Principal
name|testGroupPrincipal
decl_stmt|;
specifier|private
name|Session
name|testSession
decl_stmt|;
specifier|private
name|String
name|childPath
decl_stmt|;
specifier|private
name|String
name|propertyPath
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Property
name|p
init|=
name|testRootNode
operator|.
name|setProperty
argument_list|(
name|propertyName1
argument_list|,
literal|"val"
argument_list|)
decl_stmt|;
name|propertyPath
operator|=
name|p
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|Node
name|child
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|)
decl_stmt|;
name|childPath
operator|=
name|child
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|User
name|testUser
init|=
name|ExerciseUtility
operator|.
name|createTestUser
argument_list|(
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
argument_list|)
decl_stmt|;
name|Group
name|testGroup
init|=
name|ExerciseUtility
operator|.
name|createTestGroup
argument_list|(
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
argument_list|)
decl_stmt|;
name|testGroup
operator|.
name|addMember
argument_list|(
name|testUser
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|testPrincipal
operator|=
name|testUser
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
name|testGroupPrincipal
operator|=
name|testGroup
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
name|AccessControlUtils
operator|.
name|addAccessControlEntry
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|superuser
argument_list|,
name|Privilege
operator|.
name|JCR_ALL
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testSession
operator|=
name|superuser
operator|.
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
name|ExerciseUtility
operator|.
name|getTestCredentials
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|testSession
operator|!=
literal|null
operator|&&
name|testSession
operator|.
name|isLive
argument_list|()
condition|)
block|{
name|testSession
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
name|UserManager
name|uMgr
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
decl_stmt|;
name|Authorizable
name|testUser
init|=
name|uMgr
operator|.
name|getAuthorizable
argument_list|(
name|testPrincipal
argument_list|)
decl_stmt|;
if|if
condition|(
name|testUser
operator|!=
literal|null
condition|)
block|{
name|testUser
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|Authorizable
name|testGroup
init|=
name|uMgr
operator|.
name|getAuthorizable
argument_list|(
name|testGroupPrincipal
argument_list|)
decl_stmt|;
if|if
condition|(
name|testGroup
operator|!=
literal|null
condition|)
block|{
name|testGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGroupMembership
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|testRoot
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|java
operator|.
name|security
operator|.
name|acl
operator|.
name|Group
operator|)
name|testGroupPrincipal
operator|)
operator|.
name|isMember
argument_list|(
name|testPrincipal
argument_list|)
argument_list|)
expr_stmt|;
name|AccessControlUtils
operator|.
name|addAccessControlEntry
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|,
name|testGroupPrincipal
argument_list|,
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|superuser
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|expected
init|=
literal|false
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|testSession
operator|.
name|nodeExists
argument_list|(
name|testRoot
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testHierarchy
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|testRoot
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|propertyExists
argument_list|(
name|propertyPath
argument_list|)
argument_list|)
expr_stmt|;
name|Principal
name|principal
init|=
name|testPrincipal
decl_stmt|;
comment|// EXERCISE : create the correct permission setup such that the test session can read all items below.
comment|// EXERCISE : how many entries do you need to create?
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|testRoot
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|propertyExists
argument_list|(
name|propertyPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAceOrder
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|testRoot
argument_list|)
argument_list|)
expr_stmt|;
name|Privilege
index|[]
name|readPrivs
init|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|superuser
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
comment|// EXERCISE: fix the permission setup such that the test success without dropping either ACE
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testGroupPrincipal
argument_list|,
name|readPrivs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|readPrivs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|getAccessControlManager
argument_list|()
operator|.
name|setPolicy
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|testRoot
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|propertyExists
argument_list|(
name|propertyPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPrecedenceOfUserPrincipals
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Privilege
index|[]
name|readPrivs
init|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|superuser
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|readPrivs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testGroupPrincipal
argument_list|,
name|readPrivs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|getAccessControlManager
argument_list|()
operator|.
name|setPolicy
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// EXERCISE what is the expected result?
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Boolean
name|canRead
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|canRead
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|testSession
operator|.
name|nodeExists
argument_list|(
name|testRoot
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|canRead
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// EXERCISE: now change the permission setup such that the testSession has read access
comment|// EXERCISE: how many ways to you find to achieve this?
block|}
specifier|public
name|void
name|testCombination
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Privilege
index|[]
name|readPrivs
init|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|superuser
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
name|AccessControlUtils
operator|.
name|addAccessControlEntry
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|,
name|testPrincipal
argument_list|,
name|readPrivs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|AccessControlUtils
operator|.
name|addAccessControlEntry
argument_list|(
name|superuser
argument_list|,
name|childPath
argument_list|,
name|testGroupPrincipal
argument_list|,
name|readPrivs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// EXERCISE what is the expected result?
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Boolean
name|canRead
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|canRead
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|testSession
operator|.
name|nodeExists
argument_list|(
name|testRoot
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|canRead
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|testSession
operator|.
name|propertyExists
argument_list|(
name|propertyPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|canRead
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCombination2
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Privilege
index|[]
name|readPrivs
init|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|superuser
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
name|AccessControlUtils
operator|.
name|addAccessControlEntry
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|,
name|testPrincipal
argument_list|,
name|readPrivs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|AccessControlUtils
operator|.
name|addAccessControlEntry
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|,
name|testPrincipal
argument_list|,
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|AccessControlUtils
operator|.
name|addAccessControlEntry
argument_list|(
name|superuser
argument_list|,
name|childPath
argument_list|,
name|testGroupPrincipal
argument_list|,
name|readPrivs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// EXERCISE what is the expected result?
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Boolean
name|canRead
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|canRead
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|testSession
operator|.
name|nodeExists
argument_list|(
name|testRoot
argument_list|)
argument_list|)
expr_stmt|;
name|canRead
operator|=
literal|null
expr_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|canRead
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|testSession
operator|.
name|propertyExists
argument_list|(
name|propertyPath
argument_list|)
argument_list|)
expr_stmt|;
name|canRead
operator|=
literal|null
expr_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|canRead
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childPath
argument_list|)
argument_list|)
expr_stmt|;
name|canRead
operator|=
literal|null
expr_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|canRead
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|testSession
operator|.
name|propertyExists
argument_list|(
name|childPath
operator|+
literal|"/jcr:primaryType"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

