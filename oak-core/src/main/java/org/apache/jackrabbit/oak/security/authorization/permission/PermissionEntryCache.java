begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_comment
comment|/**  * {@code PermissionEntryCache} caches the permission entries of principals.  * The cache is held locally for each session and contains a version of the principal permission  * entries of the session that read them last.  *  * TODO:  * - report cache usage metrics  * - limit size of local caches based on ppe sizes. the current implementation loads all ppes. this can get a memory  *   problem, as well as a performance problem for principals with many entries. principals with many entries must  *   fallback to the direct store.load() methods when providing the entries. if those principals with many entries  *   are used often, they might get elected to live in the global cache; memory permitting.  */
end_comment

begin_class
class|class
name|PermissionEntryCache
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PrincipalPermissionEntries
argument_list|>
name|entries
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PrincipalPermissionEntries
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Nonnull
name|PrincipalPermissionEntries
name|getEntries
parameter_list|(
annotation|@
name|Nonnull
name|PermissionStore
name|store
parameter_list|,
annotation|@
name|Nonnull
name|String
name|principalName
parameter_list|)
block|{
name|PrincipalPermissionEntries
name|ppe
init|=
name|entries
operator|.
name|get
argument_list|(
name|principalName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ppe
operator|==
literal|null
condition|)
block|{
name|ppe
operator|=
name|store
operator|.
name|load
argument_list|(
name|principalName
argument_list|)
expr_stmt|;
name|entries
operator|.
name|put
argument_list|(
name|principalName
argument_list|,
name|ppe
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|ppe
operator|.
name|isFullyLoaded
argument_list|()
condition|)
block|{
name|ppe
operator|=
name|store
operator|.
name|load
argument_list|(
name|principalName
argument_list|)
expr_stmt|;
name|entries
operator|.
name|put
argument_list|(
name|principalName
argument_list|,
name|ppe
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ppe
return|;
block|}
name|void
name|load
parameter_list|(
annotation|@
name|Nonnull
name|PermissionStore
name|store
parameter_list|,
annotation|@
name|Nonnull
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
argument_list|>
name|pathEntryMap
parameter_list|,
annotation|@
name|Nonnull
name|String
name|principalName
parameter_list|)
block|{
comment|// todo: conditionally load entries if too many
name|PrincipalPermissionEntries
name|ppe
init|=
name|getEntries
argument_list|(
name|store
argument_list|,
name|principalName
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
argument_list|>
name|e
range|:
name|ppe
operator|.
name|getEntries
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
name|pathEntries
init|=
name|pathEntryMap
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathEntries
operator|==
literal|null
condition|)
block|{
name|pathEntries
operator|=
operator|new
name|TreeSet
argument_list|<
name|PermissionEntry
argument_list|>
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|pathEntryMap
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|pathEntries
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pathEntries
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|load
parameter_list|(
annotation|@
name|Nonnull
name|PermissionStore
name|store
parameter_list|,
annotation|@
name|Nonnull
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
name|ret
parameter_list|,
annotation|@
name|Nonnull
name|String
name|principalName
parameter_list|,
annotation|@
name|Nonnull
name|String
name|path
parameter_list|)
block|{
name|PrincipalPermissionEntries
name|ppe
init|=
name|entries
operator|.
name|get
argument_list|(
name|principalName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ppe
operator|==
literal|null
condition|)
block|{
name|ppe
operator|=
operator|new
name|PrincipalPermissionEntries
argument_list|()
expr_stmt|;
name|entries
operator|.
name|put
argument_list|(
name|principalName
argument_list|,
name|ppe
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
name|pes
init|=
name|ppe
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|pes
operator|==
literal|null
condition|)
block|{
name|pes
operator|=
name|store
operator|.
name|load
argument_list|(
literal|null
argument_list|,
name|principalName
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|pes
operator|==
literal|null
condition|)
block|{
name|pes
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|pes
argument_list|)
expr_stmt|;
block|}
name|ppe
operator|.
name|getEntries
argument_list|()
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|pes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|pes
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|flush
parameter_list|(
annotation|@
name|Nonnull
name|Set
argument_list|<
name|String
argument_list|>
name|principalNames
parameter_list|)
block|{
name|entries
operator|.
name|keySet
argument_list|()
operator|.
name|removeAll
argument_list|(
name|principalNames
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

