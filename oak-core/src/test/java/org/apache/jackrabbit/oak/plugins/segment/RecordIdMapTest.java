begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Segment
operator|.
name|RECORD_ALIGN_BITS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Segment
operator|.
name|encode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|TestUtils
operator|.
name|newValidOffset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|memory
operator|.
name|MemoryStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|RecordIdMapTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testEmpty
parameter_list|()
block|{
name|RecordIdMap
name|map
init|=
operator|new
name|RecordIdMap
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|map
operator|.
name|getKey
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected AIOBE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|ignored
parameter_list|)
block|{}
try|try
block|{
name|map
operator|.
name|getRecordId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected AIOBE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|ignored
parameter_list|)
block|{}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecordIdMap
parameter_list|()
block|{
name|int
name|maxSegments
init|=
literal|1000
decl_stmt|;
name|int
name|maxEntriesPerSegment
init|=
literal|10
decl_stmt|;
name|int
name|seed
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|SegmentTracker
name|tracker
init|=
operator|new
name|MemoryStore
argument_list|()
operator|.
name|getTracker
argument_list|()
decl_stmt|;
name|RecordIdMap
name|map
init|=
operator|new
name|RecordIdMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Short
argument_list|,
name|RecordId
argument_list|>
name|reference
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|int
name|segments
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|maxSegments
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|segments
condition|;
name|i
operator|++
control|)
block|{
name|SegmentId
name|id
init|=
name|tracker
operator|.
name|newDataSegmentId
argument_list|()
decl_stmt|;
name|int
name|n
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|maxEntriesPerSegment
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
name|MAX_SEGMENT_SIZE
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|n
condition|;
name|j
operator|++
control|)
block|{
name|offset
operator|=
name|newValidOffset
argument_list|(
name|r
argument_list|,
operator|(
name|n
operator|-
name|j
operator|)
operator|<<
name|RECORD_ALIGN_BITS
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|RecordId
name|record
init|=
operator|new
name|RecordId
argument_list|(
name|id
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|reference
operator|.
name|put
argument_list|(
name|encode
argument_list|(
name|record
operator|.
name|getOffset
argument_list|()
argument_list|)
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|Short
argument_list|,
name|RecordId
argument_list|>
name|entry
range|:
name|reference
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Failed with seed "
operator|+
name|seed
argument_list|,
name|reference
operator|.
name|size
argument_list|()
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Short
argument_list|,
name|RecordId
argument_list|>
name|entry
range|:
name|reference
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|short
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Failed with seed "
operator|+
name|seed
argument_list|,
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|RecordId
name|expected
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|RecordId
name|actual
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Failed with seed "
operator|+
name|seed
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|map
operator|.
name|size
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|short
name|key
init|=
name|map
operator|.
name|getKey
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|RecordId
name|expected
init|=
name|reference
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|RecordId
name|actual
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Failed with seed "
operator|+
name|seed
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Failed with seed "
operator|+
name|seed
argument_list|,
name|expected
argument_list|,
name|map
operator|.
name|getRecordId
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

