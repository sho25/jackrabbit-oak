begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ItemNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionHistory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_comment
comment|/**  * Some very special reference tests also including references into the version store.  */
end_comment

begin_class
specifier|public
class|class
name|ReferencesTest
extends|extends
name|AbstractJCRTest
block|{
specifier|public
name|void
name|testSimpleReferences
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|ref
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|ref
operator|.
name|addMixin
argument_list|(
name|mixReferenceable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"myref"
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ref"
argument_list|,
name|ref
operator|.
name|getPath
argument_list|()
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
literal|"myref"
argument_list|)
operator|.
name|getNode
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|checkReferences
argument_list|(
literal|"refs"
argument_list|,
name|ref
operator|.
name|getReferences
argument_list|()
argument_list|,
name|n
operator|.
name|getPath
argument_list|()
operator|+
literal|"/myref"
argument_list|)
expr_stmt|;
block|}
comment|// OAK-1194 Missing properties in Node.getReferences()
specifier|public
name|void
name|testMultipleReferencesOnSameNode
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|ref
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|ref
operator|.
name|addMixin
argument_list|(
name|mixReferenceable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"myref0"
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"myref1"
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ref"
argument_list|,
name|ref
operator|.
name|getPath
argument_list|()
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
literal|"myref0"
argument_list|)
operator|.
name|getNode
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ref"
argument_list|,
name|ref
operator|.
name|getPath
argument_list|()
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
literal|"myref1"
argument_list|)
operator|.
name|getNode
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|checkReferences
argument_list|(
literal|"refs"
argument_list|,
name|ref
operator|.
name|getReferences
argument_list|()
argument_list|,
name|n
operator|.
name|getPath
argument_list|()
operator|+
literal|"/myref0"
argument_list|,
name|n
operator|.
name|getPath
argument_list|()
operator|+
literal|"/myref1"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMultipleReferencesOnSameNode1
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|ref
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|ref
operator|.
name|addMixin
argument_list|(
name|mixReferenceable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"myref0"
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"myref1"
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ref"
argument_list|,
name|ref
operator|.
name|getPath
argument_list|()
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
literal|"myref0"
argument_list|)
operator|.
name|getNode
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ref"
argument_list|,
name|ref
operator|.
name|getPath
argument_list|()
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
literal|"myref1"
argument_list|)
operator|.
name|getNode
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|checkReferences
argument_list|(
literal|"refs"
argument_list|,
name|ref
operator|.
name|getReferences
argument_list|(
literal|"myref0"
argument_list|)
argument_list|,
name|n
operator|.
name|getPath
argument_list|()
operator|+
literal|"/myref0"
argument_list|)
expr_stmt|;
name|checkReferences
argument_list|(
literal|"refs"
argument_list|,
name|ref
operator|.
name|getReferences
argument_list|(
literal|"myref1"
argument_list|)
argument_list|,
name|n
operator|.
name|getPath
argument_list|()
operator|+
literal|"/myref1"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMultipleReferences
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|ref
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|ref
operator|.
name|addMixin
argument_list|(
name|mixReferenceable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|n0
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|n0
operator|.
name|setProperty
argument_list|(
literal|"myref"
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|Node
name|n1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName3
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
literal|"myref"
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|checkReferences
argument_list|(
literal|"refs"
argument_list|,
name|ref
operator|.
name|getReferences
argument_list|()
argument_list|,
name|n0
operator|.
name|getPath
argument_list|()
operator|+
literal|"/myref"
argument_list|,
name|n1
operator|.
name|getPath
argument_list|()
operator|+
literal|"/myref"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMultipleReferences1
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|ref
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|ref
operator|.
name|addMixin
argument_list|(
name|mixReferenceable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|n0
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|n0
operator|.
name|setProperty
argument_list|(
literal|"myref0"
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|Node
name|n1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName3
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
literal|"myref1"
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|checkReferences
argument_list|(
literal|"refs"
argument_list|,
name|ref
operator|.
name|getReferences
argument_list|(
literal|"myref0"
argument_list|)
argument_list|,
name|n0
operator|.
name|getPath
argument_list|()
operator|+
literal|"/myref0"
argument_list|)
expr_stmt|;
name|checkReferences
argument_list|(
literal|"refs"
argument_list|,
name|ref
operator|.
name|getReferences
argument_list|(
literal|"myref1"
argument_list|)
argument_list|,
name|n1
operator|.
name|getPath
argument_list|()
operator|+
literal|"/myref1"
argument_list|)
expr_stmt|;
block|}
comment|// OAK-1195 Unable to move referenced mode
specifier|public
name|void
name|testMovedReferences
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|ref
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|ref
operator|.
name|addMixin
argument_list|(
name|mixReferenceable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"myref"
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|newPath
init|=
name|testRootNode
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
name|nodeName3
decl_stmt|;
name|superuser
operator|.
name|move
argument_list|(
name|ref
operator|.
name|getPath
argument_list|()
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|ref
operator|=
name|superuser
operator|.
name|getNode
argument_list|(
name|newPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ref"
argument_list|,
name|ref
operator|.
name|getPath
argument_list|()
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
literal|"myref"
argument_list|)
operator|.
name|getNode
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|checkReferences
argument_list|(
literal|"refs"
argument_list|,
name|ref
operator|.
name|getReferences
argument_list|()
argument_list|,
name|n
operator|.
name|getPath
argument_list|()
operator|+
literal|"/myref"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMVReferences
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|ref0
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|ref0
operator|.
name|addMixin
argument_list|(
name|mixReferenceable
argument_list|)
expr_stmt|;
name|Node
name|ref1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName3
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|ref1
operator|.
name|addMixin
argument_list|(
name|mixReferenceable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|Value
index|[]
name|vs
init|=
operator|new
name|Value
index|[]
block|{
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|ref0
argument_list|)
block|,
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|ref1
argument_list|)
block|}
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"myref"
argument_list|,
name|vs
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ref0"
argument_list|,
name|ref0
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
literal|"myref"
argument_list|)
operator|.
name|getValues
argument_list|()
index|[
literal|0
index|]
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ref1"
argument_list|,
name|ref1
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
literal|"myref"
argument_list|)
operator|.
name|getValues
argument_list|()
index|[
literal|1
index|]
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|checkReferences
argument_list|(
literal|"refs"
argument_list|,
name|ref0
operator|.
name|getReferences
argument_list|()
argument_list|,
name|n
operator|.
name|getPath
argument_list|()
operator|+
literal|"/myref"
argument_list|)
expr_stmt|;
name|checkReferences
argument_list|(
literal|"refs"
argument_list|,
name|ref1
operator|.
name|getReferences
argument_list|()
argument_list|,
name|n
operator|.
name|getPath
argument_list|()
operator|+
literal|"/myref"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testVersionReferencesVH
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|n
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|p
init|=
name|n
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|VersionManager
name|vMgr
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|VersionHistory
name|vh
init|=
name|vMgr
operator|.
name|getVersionHistory
argument_list|(
name|p
argument_list|)
decl_stmt|;
comment|// check if versionable node has references to root version
name|assertEquals
argument_list|(
literal|"Version History"
argument_list|,
name|vh
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
name|Property
operator|.
name|JCR_VERSION_HISTORY
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|checkReferences
argument_list|(
literal|"Version History"
argument_list|,
name|vh
operator|.
name|getReferences
argument_list|()
argument_list|,
name|p
operator|+
literal|"/jcr:versionHistory"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testVersionReferencesV0
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|n
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|p
init|=
name|n
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|VersionManager
name|vMgr
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|Version
name|v0
init|=
name|vMgr
operator|.
name|getVersionHistory
argument_list|(
name|p
argument_list|)
operator|.
name|getRootVersion
argument_list|()
decl_stmt|;
comment|// check if versionable node has references to root version
name|assertEquals
argument_list|(
literal|"Root Version"
argument_list|,
name|v0
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
name|Property
operator|.
name|JCR_BASE_VERSION
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Root Version"
argument_list|,
name|v0
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
name|Property
operator|.
name|JCR_PREDECESSORS
argument_list|)
operator|.
name|getValues
argument_list|()
index|[
literal|0
index|]
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|checkReferences
argument_list|(
literal|"Root Version"
argument_list|,
name|v0
operator|.
name|getReferences
argument_list|()
argument_list|,
name|p
operator|+
literal|"/jcr:baseVersion"
argument_list|,
name|p
operator|+
literal|"/jcr:predecessors"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testVersionReferencesV1
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|n
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|p
init|=
name|n
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|VersionManager
name|vMgr
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|Version
name|v1
init|=
name|vMgr
operator|.
name|checkpoint
argument_list|(
name|p
argument_list|)
decl_stmt|;
comment|// check if versionable node has references to v1.0
name|assertEquals
argument_list|(
literal|"v1.0"
argument_list|,
name|v1
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
name|Property
operator|.
name|JCR_BASE_VERSION
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v1.0"
argument_list|,
name|v1
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
name|Property
operator|.
name|JCR_PREDECESSORS
argument_list|)
operator|.
name|getValues
argument_list|()
index|[
literal|0
index|]
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|checkReferences
argument_list|(
literal|"v1.0"
argument_list|,
name|v1
operator|.
name|getReferences
argument_list|()
argument_list|,
name|p
operator|+
literal|"/jcr:baseVersion"
argument_list|,
name|p
operator|+
literal|"/jcr:predecessors"
argument_list|)
expr_stmt|;
block|}
comment|// OAK-1196 - Node.getReferences() should not show references in frozen nodes
specifier|public
name|void
name|testVersionedReferences
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|ref
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|ref
operator|.
name|addMixin
argument_list|(
name|mixReferenceable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|n
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"myref"
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|p
init|=
name|n
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|VersionManager
name|vMgr
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|Version
name|v1
init|=
name|vMgr
operator|.
name|checkpoint
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|Node
name|frozen
init|=
name|v1
operator|.
name|getFrozenNode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ref"
argument_list|,
name|ref
operator|.
name|getPath
argument_list|()
argument_list|,
name|frozen
operator|.
name|getProperty
argument_list|(
literal|"myref"
argument_list|)
operator|.
name|getNode
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|checkReferences
argument_list|(
literal|"ref in version store"
argument_list|,
name|ref
operator|.
name|getReferences
argument_list|()
argument_list|,
name|n
operator|.
name|getPath
argument_list|()
operator|+
literal|"/myref"
argument_list|)
expr_stmt|;
comment|// also test what happens if node is removed
name|n
operator|.
name|remove
argument_list|()
expr_stmt|;
name|ref
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
try|try
block|{
name|frozen
operator|.
name|getProperty
argument_list|(
literal|"myref"
argument_list|)
operator|.
name|getNode
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"removed reference should not be accessible"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ItemNotFoundException
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
specifier|public
name|void
name|testMovedVersionedReferences
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|ref
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|ref
operator|.
name|addMixin
argument_list|(
name|mixReferenceable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|n
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"myref"
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|p
init|=
name|n
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|VersionManager
name|vMgr
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|Version
name|v1
init|=
name|vMgr
operator|.
name|checkpoint
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|String
name|newPath
init|=
name|testRootNode
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
name|nodeName3
decl_stmt|;
name|superuser
operator|.
name|move
argument_list|(
name|ref
operator|.
name|getPath
argument_list|()
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|ref
operator|=
name|superuser
operator|.
name|getNode
argument_list|(
name|newPath
argument_list|)
expr_stmt|;
name|Node
name|frozen
init|=
name|v1
operator|.
name|getFrozenNode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ref"
argument_list|,
name|ref
operator|.
name|getPath
argument_list|()
argument_list|,
name|frozen
operator|.
name|getProperty
argument_list|(
literal|"myref"
argument_list|)
operator|.
name|getNode
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|checkReferences
argument_list|(
literal|"ref in version store"
argument_list|,
name|ref
operator|.
name|getReferences
argument_list|()
argument_list|,
name|n
operator|.
name|getPath
argument_list|()
operator|+
literal|"/myref"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|checkReferences
parameter_list|(
name|String
name|msg
parameter_list|,
name|PropertyIterator
name|refs
parameter_list|,
name|String
modifier|...
name|expected
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|refs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|refs
operator|.
name|nextProperty
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|checkEquals
argument_list|(
name|msg
argument_list|,
name|paths
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|checkEquals
parameter_list|(
name|String
name|msg
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|result
parameter_list|,
name|String
modifier|...
name|expected
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|exp
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|exp
operator|.
name|toString
argument_list|()
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

