begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tika
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|CompositeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|EmptyParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParserDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
class|class
name|TikaHelper
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_TIKA_CONFIG
init|=
literal|"/org/apache/jackrabbit/oak/plugins/index/lucene/tika-config.xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TikaHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AutoDetectParser
name|parser
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|supportedMediaTypes
decl_stmt|;
specifier|private
specifier|static
name|AtomicBoolean
name|supportedTypesLogged
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|public
name|TikaHelper
parameter_list|(
annotation|@
name|Nullable
name|File
name|tikaConfig
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|parser
operator|=
operator|new
name|AutoDetectParser
argument_list|(
name|getTikaConfig
argument_list|(
name|tikaConfig
argument_list|)
argument_list|)
expr_stmt|;
name|supportedMediaTypes
operator|=
name|parser
operator|.
name|getSupportedTypes
argument_list|(
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|logSupportedTypesOnce
argument_list|(
name|supportedMediaTypes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Parser
name|getParser
parameter_list|()
block|{
return|return
name|parser
return|;
block|}
specifier|public
name|boolean
name|isSupportedMediaType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|supportedMediaTypes
operator|.
name|contains
argument_list|(
name|MediaType
operator|.
name|parse
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This method should only be used for information purpose and not be relied      * upon to determine if the given type is indexed or not. It relies on Tika      * implementation detail to determine if a given type is meant to be indexed      *      * @param type mimeType to check      * @return true if the given type is supported and indexed      */
specifier|public
name|boolean
name|isIndexed
parameter_list|(
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSupportedMediaType
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|MediaType
name|mediaType
init|=
name|MediaType
operator|.
name|parse
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|Parser
name|p
init|=
name|getSupportingParser
argument_list|(
name|parser
argument_list|,
name|mediaType
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|p
operator|=
name|unwrap
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|EmptyParser
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|TikaConfig
name|getTikaConfig
parameter_list|(
name|File
name|tikaConfig
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|TikaConfig
name|config
decl_stmt|;
if|if
condition|(
name|tikaConfig
operator|==
literal|null
condition|)
block|{
name|URL
name|configUrl
init|=
name|TextExtractor
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|DEFAULT_TIKA_CONFIG
argument_list|)
decl_stmt|;
if|if
condition|(
name|configUrl
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Loading default Tika config from {}"
argument_list|,
name|configUrl
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|TikaConfig
argument_list|(
name|configUrl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Using default Tika config"
argument_list|)
expr_stmt|;
name|config
operator|=
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Loading external Tika config from {}"
argument_list|,
name|tikaConfig
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|TikaConfig
argument_list|(
name|tikaConfig
argument_list|)
expr_stmt|;
block|}
return|return
name|config
return|;
block|}
specifier|private
specifier|static
name|Parser
name|getSupportingParser
parameter_list|(
name|Parser
name|p
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|CompositeParser
condition|)
block|{
name|Map
argument_list|<
name|MediaType
argument_list|,
name|Parser
argument_list|>
name|parsers
init|=
operator|(
operator|(
name|CompositeParser
operator|)
name|p
operator|)
operator|.
name|getParsers
argument_list|()
decl_stmt|;
return|return
name|getSupportingParser
argument_list|(
name|parsers
operator|.
name|get
argument_list|(
name|mediaType
argument_list|)
argument_list|,
name|mediaType
argument_list|)
return|;
block|}
return|return
name|p
return|;
block|}
specifier|private
specifier|static
name|Parser
name|unwrap
parameter_list|(
name|Parser
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|ParserDecorator
condition|)
block|{
return|return
name|unwrap
argument_list|(
operator|(
operator|(
name|ParserDecorator
operator|)
name|p
operator|)
operator|.
name|getWrappedParser
argument_list|()
argument_list|)
return|;
block|}
return|return
name|p
return|;
block|}
specifier|private
specifier|static
name|void
name|logSupportedTypesOnce
parameter_list|(
name|Set
argument_list|<
name|MediaType
argument_list|>
name|supportedMediaTypes
parameter_list|)
block|{
name|boolean
name|alreadyLogged
init|=
name|supportedTypesLogged
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|alreadyLogged
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Supported media types {}"
argument_list|,
name|supportedMediaTypes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

