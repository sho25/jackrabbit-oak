begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/** * A revision range for {@link NodeDocument#PREVIOUS} documents. */
end_comment

begin_class
specifier|final
class|class
name|Range
block|{
specifier|final
name|Revision
name|high
decl_stmt|;
specifier|final
name|Revision
name|low
decl_stmt|;
specifier|final
name|int
name|height
decl_stmt|;
comment|/**      * A range of revisions, with both inclusive bounds.      *      * @param high the high bound.      * @param low the low bound.      */
name|Range
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|high
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|low
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|this
operator|.
name|high
operator|=
name|checkNotNull
argument_list|(
name|high
argument_list|)
expr_stmt|;
name|this
operator|.
name|low
operator|=
name|checkNotNull
argument_list|(
name|low
argument_list|)
expr_stmt|;
name|this
operator|.
name|height
operator|=
name|height
expr_stmt|;
name|checkArgument
argument_list|(
name|high
operator|.
name|getClusterId
argument_list|()
operator|==
name|low
operator|.
name|getClusterId
argument_list|()
argument_list|,
literal|"Revisions from have the same clusterId"
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|high
operator|.
name|compareRevisionTime
argument_list|(
name|low
argument_list|)
operator|>=
literal|0
argument_list|,
literal|"High Revision must be later than low Revision, high="
operator|+
name|high
operator|+
literal|" low="
operator|+
name|low
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|height
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a {@code Range} from a revisioned document entry.      *      * @param rev the revision of the entry corresponding to the high bound      *            of the range.      * @param value the string representation of the lower bound with the height      *              (e.g. r1-0-1/0).      * @return the range.      */
annotation|@
name|Nonnull
specifier|static
name|Range
name|fromEntry
parameter_list|(
name|Revision
name|rev
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|Revision
name|low
decl_stmt|;
name|int
name|height
decl_stmt|;
name|int
name|idx
init|=
name|value
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
block|{
comment|// backward compatibility for lower bound without height
name|low
operator|=
name|Revision
operator|.
name|fromString
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|height
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|low
operator|=
name|Revision
operator|.
name|fromString
argument_list|(
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
name|height
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Range
argument_list|(
name|rev
argument_list|,
name|low
argument_list|,
name|height
argument_list|)
return|;
block|}
comment|/**      * @return the string representation of the lower bound, including the      *         height (e.g. r1-0-1/0).      */
annotation|@
name|Nonnull
name|String
name|getLowValue
parameter_list|()
block|{
return|return
name|low
operator|+
literal|"/"
operator|+
name|height
return|;
block|}
comment|/**      * Returns<code>true</code> if the given revision is within this range.      *      * @param r the revision to check.      * @return<code>true</code> if within this range;<code>false</code>      * otherwise.      */
name|boolean
name|includes
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|r
parameter_list|)
block|{
return|return
name|high
operator|.
name|getClusterId
argument_list|()
operator|==
name|r
operator|.
name|getClusterId
argument_list|()
operator|&&
name|high
operator|.
name|compareRevisionTime
argument_list|(
name|r
argument_list|)
operator|>=
literal|0
operator|&&
name|low
operator|.
name|compareRevisionTime
argument_list|(
name|r
argument_list|)
operator|<=
literal|0
return|;
block|}
comment|/**      * Returns the height of this range in the tree of previous documents. The      * range of a leaf document has height zero.      *      * @return the height.      */
name|int
name|getHeight
parameter_list|()
block|{
return|return
name|height
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|high
operator|.
name|toString
argument_list|()
operator|+
literal|" : "
operator|+
name|low
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|height
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|high
operator|.
name|hashCode
argument_list|()
operator|^
name|low
operator|.
name|hashCode
argument_list|()
operator|^
name|height
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Range
condition|)
block|{
name|Range
name|other
init|=
operator|(
name|Range
operator|)
name|obj
decl_stmt|;
return|return
name|high
operator|.
name|equals
argument_list|(
name|other
operator|.
name|high
argument_list|)
operator|&&
name|low
operator|.
name|equals
argument_list|(
name|other
operator|.
name|low
argument_list|)
operator|&&
name|height
operator|==
name|other
operator|.
name|height
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

