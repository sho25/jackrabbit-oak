begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|commit
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ThreeWayConflictHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ThreeWayConflictHandlerTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|addExistingProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ThreeWayConflictHandler
name|handler
init|=
operator|new
name|ErrorThreeWayConflictHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Resolution
name|addExistingProperty
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|PropertyState
name|ours
parameter_list|,
name|PropertyState
name|theirs
parameter_list|)
block|{
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ours"
argument_list|,
name|ours
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"theirs"
argument_list|,
name|theirs
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
block|}
decl_stmt|;
name|ContentRepository
name|repo
init|=
name|newRepo
argument_list|(
name|handler
argument_list|)
decl_stmt|;
name|Root
name|root
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|setup
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|Root
name|ourRoot
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|Root
name|theirRoot
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p0"
argument_list|,
literal|"theirs"
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p0"
argument_list|,
literal|"ours"
argument_list|)
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeDeletedProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ThreeWayConflictHandler
name|handler
init|=
operator|new
name|ErrorThreeWayConflictHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Resolution
name|changeDeletedProperty
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|PropertyState
name|ours
parameter_list|,
name|PropertyState
name|base
parameter_list|)
block|{
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ours"
argument_list|,
name|ours
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"base"
argument_list|,
name|base
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
block|}
decl_stmt|;
name|ContentRepository
name|repo
init|=
name|newRepo
argument_list|(
name|handler
argument_list|)
decl_stmt|;
name|Root
name|root
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|setup
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|Root
name|ourRoot
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|Root
name|theirRoot
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/c"
argument_list|)
operator|.
name|removeProperty
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"ours"
argument_list|)
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeChangedProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ThreeWayConflictHandler
name|handler
init|=
operator|new
name|ErrorThreeWayConflictHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Resolution
name|changeChangedProperty
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|PropertyState
name|ours
parameter_list|,
name|PropertyState
name|theirs
parameter_list|,
name|PropertyState
name|base
parameter_list|)
block|{
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ours"
argument_list|,
name|ours
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"theirs"
argument_list|,
name|theirs
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"base"
argument_list|,
name|base
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
block|}
decl_stmt|;
name|ContentRepository
name|repo
init|=
name|newRepo
argument_list|(
name|handler
argument_list|)
decl_stmt|;
name|Root
name|root
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|setup
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|Root
name|ourRoot
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|Root
name|theirRoot
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"theirs"
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"ours"
argument_list|)
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteDeletedProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ThreeWayConflictHandler
name|handler
init|=
operator|new
name|ErrorThreeWayConflictHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Resolution
name|deleteDeletedProperty
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|PropertyState
name|base
parameter_list|)
block|{
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"base"
argument_list|,
name|base
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
block|}
decl_stmt|;
name|ContentRepository
name|repo
init|=
name|newRepo
argument_list|(
name|handler
argument_list|)
decl_stmt|;
name|Root
name|root
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|setup
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|Root
name|ourRoot
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|Root
name|theirRoot
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/c"
argument_list|)
operator|.
name|removeProperty
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/c"
argument_list|)
operator|.
name|removeProperty
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteChangedProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ThreeWayConflictHandler
name|handler
init|=
operator|new
name|ErrorThreeWayConflictHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Resolution
name|deleteChangedProperty
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|PropertyState
name|theirs
parameter_list|,
name|PropertyState
name|base
parameter_list|)
block|{
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"theirs"
argument_list|,
name|theirs
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"base"
argument_list|,
name|base
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
block|}
decl_stmt|;
name|ContentRepository
name|repo
init|=
name|newRepo
argument_list|(
name|handler
argument_list|)
decl_stmt|;
name|Root
name|root
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|setup
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|Root
name|ourRoot
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|Root
name|theirRoot
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"theirs"
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/c"
argument_list|)
operator|.
name|removeProperty
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeDeletedNode
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ThreeWayConflictHandler
name|handler
init|=
operator|new
name|ErrorThreeWayConflictHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Resolution
name|changeDeletedNode
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|ours
parameter_list|,
name|NodeState
name|base
parameter_list|)
block|{
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ours
operator|.
name|hasProperty
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|base
operator|.
name|hasProperty
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ours"
argument_list|,
name|ours
operator|.
name|getProperty
argument_list|(
literal|"p"
argument_list|)
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"base"
argument_list|,
name|base
operator|.
name|getProperty
argument_list|(
literal|"p"
argument_list|)
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
block|}
decl_stmt|;
name|ContentRepository
name|repo
init|=
name|newRepo
argument_list|(
name|handler
argument_list|)
decl_stmt|;
name|Root
name|root
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|setup
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|Root
name|ourRoot
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|Root
name|theirRoot
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/c"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"ours"
argument_list|)
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteChangedNode
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ThreeWayConflictHandler
name|handler
init|=
operator|new
name|ErrorThreeWayConflictHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Resolution
name|deleteChangedNode
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|theirs
parameter_list|,
name|NodeState
name|base
parameter_list|)
block|{
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|theirs
operator|.
name|hasProperty
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|base
operator|.
name|hasProperty
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"theirs"
argument_list|,
name|theirs
operator|.
name|getProperty
argument_list|(
literal|"p"
argument_list|)
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"base"
argument_list|,
name|base
operator|.
name|getProperty
argument_list|(
literal|"p"
argument_list|)
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
block|}
decl_stmt|;
name|ContentRepository
name|repo
init|=
name|newRepo
argument_list|(
name|handler
argument_list|)
decl_stmt|;
name|Root
name|root
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|setup
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|Root
name|ourRoot
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|Root
name|theirRoot
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"theirs"
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/c"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteDeletedNode
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ThreeWayConflictHandler
name|handler
init|=
operator|new
name|ErrorThreeWayConflictHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Resolution
name|deleteDeletedNode
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|base
parameter_list|)
block|{
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|base
operator|.
name|hasProperty
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"base"
argument_list|,
name|base
operator|.
name|getProperty
argument_list|(
literal|"p"
argument_list|)
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
block|}
decl_stmt|;
name|ContentRepository
name|repo
init|=
name|newRepo
argument_list|(
name|handler
argument_list|)
decl_stmt|;
name|Root
name|root
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|setup
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|Root
name|ourRoot
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|Root
name|theirRoot
init|=
name|login
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/c"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/c"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|ContentRepository
name|newRepo
parameter_list|(
name|ThreeWayConflictHandler
name|handler
parameter_list|)
block|{
return|return
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
name|handler
argument_list|)
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|Root
name|login
parameter_list|(
name|ContentRepository
name|repo
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|repo
operator|.
name|login
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|getLatestRoot
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|setup
parameter_list|(
name|Root
name|root
parameter_list|)
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|tree
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"base"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|ErrorThreeWayConflictHandler
implements|implements
name|ThreeWayConflictHandler
block|{
annotation|@
name|Override
specifier|public
name|Resolution
name|addExistingProperty
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|PropertyState
name|ours
parameter_list|,
name|PropertyState
name|theirs
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"method should not be called"
argument_list|)
expr_stmt|;
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
annotation|@
name|Override
specifier|public
name|Resolution
name|changeDeletedProperty
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|PropertyState
name|ours
parameter_list|,
name|PropertyState
name|base
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"method should not be called"
argument_list|)
expr_stmt|;
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
annotation|@
name|Override
specifier|public
name|Resolution
name|changeChangedProperty
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|PropertyState
name|ours
parameter_list|,
name|PropertyState
name|theirs
parameter_list|,
name|PropertyState
name|base
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"method should not be called"
argument_list|)
expr_stmt|;
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
annotation|@
name|Override
specifier|public
name|Resolution
name|deleteDeletedProperty
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|PropertyState
name|base
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"method should not be called"
argument_list|)
expr_stmt|;
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
annotation|@
name|Override
specifier|public
name|Resolution
name|deleteChangedProperty
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|PropertyState
name|theirs
parameter_list|,
name|PropertyState
name|base
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"method should not be called"
argument_list|)
expr_stmt|;
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
annotation|@
name|Override
specifier|public
name|Resolution
name|addExistingNode
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|ours
parameter_list|,
name|NodeState
name|theirs
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"method should not be called"
argument_list|)
expr_stmt|;
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
annotation|@
name|Override
specifier|public
name|Resolution
name|changeDeletedNode
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|ours
parameter_list|,
name|NodeState
name|base
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"method should not be called"
argument_list|)
expr_stmt|;
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
annotation|@
name|Override
specifier|public
name|Resolution
name|deleteChangedNode
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|theirs
parameter_list|,
name|NodeState
name|base
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"method should not be called"
argument_list|)
expr_stmt|;
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
annotation|@
name|Override
specifier|public
name|Resolution
name|deleteDeletedNode
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|base
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"method should not be called"
argument_list|)
expr_stmt|;
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
block|}
block|}
end_class

end_unit

