begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|RootProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeTypeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|composite
operator|.
name|CompositeAuthorizationConfiguration
operator|.
name|CompositionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|AggregatedPermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|RepositoryPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBitsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * Permission provider implementation that aggregates a list of different  * provider implementations. Note, that the aggregated provider implementations  * *must* implement the  * {@link org.apache.jackrabbit.oak.spi.security.authorization.permission.AggregatedPermissionProvider}  * interface.  */
end_comment

begin_class
specifier|abstract
class|class
name|CompositePermissionProvider
implements|implements
name|AggregatedPermissionProvider
block|{
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
specifier|private
specifier|final
name|AggregatedPermissionProvider
index|[]
name|pps
decl_stmt|;
specifier|private
specifier|final
name|Context
name|ctx
decl_stmt|;
specifier|private
specifier|final
name|RootProvider
name|rootProvider
decl_stmt|;
specifier|private
specifier|final
name|TreeProvider
name|treeProvider
decl_stmt|;
specifier|private
specifier|final
name|RepositoryPermission
name|repositoryPermission
decl_stmt|;
specifier|private
name|Root
name|immutableRoot
decl_stmt|;
specifier|private
name|PrivilegeBitsProvider
name|privilegeBitsProvider
decl_stmt|;
specifier|private
name|TreeTypeProvider
name|typeProvider
decl_stmt|;
name|CompositePermissionProvider
parameter_list|(
annotation|@
name|NotNull
name|Root
name|root
parameter_list|,
annotation|@
name|NotNull
name|List
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
name|pps
parameter_list|,
annotation|@
name|NotNull
name|Context
name|acContext
parameter_list|,
annotation|@
name|NotNull
name|RootProvider
name|rootProvider
parameter_list|,
annotation|@
name|NotNull
name|TreeProvider
name|treeProvider
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|pps
operator|=
name|pps
operator|.
name|toArray
argument_list|(
operator|new
name|AggregatedPermissionProvider
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|ctx
operator|=
name|acContext
expr_stmt|;
name|this
operator|.
name|rootProvider
operator|=
name|rootProvider
expr_stmt|;
name|this
operator|.
name|treeProvider
operator|=
name|treeProvider
expr_stmt|;
name|repositoryPermission
operator|=
name|createRepositoryPermission
argument_list|()
expr_stmt|;
name|immutableRoot
operator|=
name|rootProvider
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|privilegeBitsProvider
operator|=
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|immutableRoot
argument_list|)
expr_stmt|;
name|typeProvider
operator|=
operator|new
name|TreeTypeProvider
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
specifier|static
name|CompositePermissionProvider
name|create
parameter_list|(
annotation|@
name|NotNull
name|Root
name|root
parameter_list|,
annotation|@
name|NotNull
name|List
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
name|pps
parameter_list|,
annotation|@
name|NotNull
name|Context
name|acContext
parameter_list|,
annotation|@
name|NotNull
name|CompositionType
name|compositionType
parameter_list|,
annotation|@
name|NotNull
name|RootProvider
name|rootProvider
parameter_list|,
annotation|@
name|NotNull
name|TreeProvider
name|treeProvider
parameter_list|)
block|{
if|if
condition|(
name|compositionType
operator|==
name|CompositionType
operator|.
name|AND
condition|)
block|{
return|return
operator|new
name|CompositePermissionProviderAnd
argument_list|(
name|root
argument_list|,
name|pps
argument_list|,
name|acContext
argument_list|,
name|rootProvider
argument_list|,
name|treeProvider
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|CompositePermissionProviderOr
argument_list|(
name|root
argument_list|,
name|pps
argument_list|,
name|acContext
argument_list|,
name|rootProvider
argument_list|,
name|treeProvider
argument_list|)
return|;
block|}
block|}
annotation|@
name|NotNull
specifier|abstract
name|CompositionType
name|getCompositeType
parameter_list|()
function_decl|;
annotation|@
name|NotNull
specifier|abstract
name|RepositoryPermission
name|createRepositoryPermission
parameter_list|()
function_decl|;
annotation|@
name|NotNull
name|Root
name|getImmutableRoot
parameter_list|()
block|{
return|return
name|immutableRoot
return|;
block|}
annotation|@
name|NotNull
name|PrivilegeBitsProvider
name|getBitsProvider
parameter_list|()
block|{
return|return
name|privilegeBitsProvider
return|;
block|}
annotation|@
name|NotNull
name|AggregatedPermissionProvider
index|[]
name|getPermissionProviders
parameter_list|()
block|{
return|return
name|pps
return|;
block|}
comment|//-------------------------------------------------< PermissionProvider>---
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
block|{
name|immutableRoot
operator|=
name|rootProvider
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|privilegeBitsProvider
operator|=
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|immutableRoot
argument_list|)
expr_stmt|;
for|for
control|(
name|PermissionProvider
name|pp
range|:
name|pps
control|)
block|{
name|pp
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|RepositoryPermission
name|getRepositoryPermission
parameter_list|()
block|{
return|return
name|repositoryPermission
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|TreePermission
name|getTreePermission
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|,
annotation|@
name|NotNull
name|TreePermission
name|parentPermission
parameter_list|)
block|{
name|Tree
name|readOnlyTree
init|=
name|PermissionUtil
operator|.
name|getReadOnlyTree
argument_list|(
name|tree
argument_list|,
name|immutableRoot
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|isRoot
argument_list|()
condition|)
block|{
return|return
name|CompositeTreePermission
operator|.
name|create
argument_list|(
name|readOnlyTree
argument_list|,
name|treeProvider
argument_list|,
name|typeProvider
argument_list|,
name|pps
argument_list|,
name|getCompositeType
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|parentPermission
operator|instanceof
name|CompositeTreePermission
condition|)
block|{
return|return
name|CompositeTreePermission
operator|.
name|create
argument_list|(
name|readOnlyTree
argument_list|,
name|treeProvider
argument_list|,
operator|(
operator|(
name|CompositeTreePermission
operator|)
name|parentPermission
operator|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|parentPermission
operator|.
name|getChildPermission
argument_list|(
name|readOnlyTree
operator|.
name|getName
argument_list|()
argument_list|,
name|treeProvider
operator|.
name|asNodeState
argument_list|(
name|readOnlyTree
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
annotation|@
name|NotNull
name|String
name|oakPath
parameter_list|,
annotation|@
name|NotNull
name|String
name|jcrActions
parameter_list|)
block|{
name|TreeLocation
name|location
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|immutableRoot
argument_list|,
name|oakPath
argument_list|)
decl_stmt|;
name|boolean
name|isAcContent
init|=
name|ctx
operator|.
name|definesLocation
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|long
name|permissions
init|=
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|jcrActions
argument_list|,
name|location
argument_list|,
name|isAcContent
argument_list|)
decl_stmt|;
return|return
name|isGranted
argument_list|(
name|location
argument_list|,
name|permissions
argument_list|)
return|;
block|}
comment|//---------------------------------------< AggregatedPermissionProvider>---
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|PrivilegeBits
name|supportedPrivileges
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nullable
name|PrivilegeBits
name|privilegeBits
parameter_list|)
block|{
name|PrivilegeBits
name|result
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregatedPermissionProvider
name|aggregatedPermissionProvider
range|:
name|pps
control|)
block|{
name|PrivilegeBits
name|supported
init|=
name|aggregatedPermissionProvider
operator|.
name|supportedPrivileges
argument_list|(
name|tree
argument_list|,
name|privilegeBits
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|supported
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|supportedPermissions
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
return|return
name|supportedPermissions
argument_list|(
parameter_list|(
name|aggregatedPermissionProvider
parameter_list|)
lambda|->
name|aggregatedPermissionProvider
operator|.
name|supportedPermissions
argument_list|(
name|tree
argument_list|,
name|property
argument_list|,
name|permissions
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|supportedPermissions
parameter_list|(
annotation|@
name|NotNull
name|TreeLocation
name|location
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
return|return
name|supportedPermissions
argument_list|(
parameter_list|(
name|aggregatedPermissionProvider
parameter_list|)
lambda|->
name|aggregatedPermissionProvider
operator|.
name|supportedPermissions
argument_list|(
name|location
argument_list|,
name|permissions
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|supportedPermissions
parameter_list|(
annotation|@
name|NotNull
name|TreePermission
name|treePermission
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
return|return
name|supportedPermissions
argument_list|(
parameter_list|(
name|aggregatedPermissionProvider
parameter_list|)
lambda|->
name|aggregatedPermissionProvider
operator|.
name|supportedPermissions
argument_list|(
name|treePermission
argument_list|,
name|property
argument_list|,
name|permissions
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|long
name|supportedPermissions
parameter_list|(
name|Function
argument_list|<
name|AggregatedPermissionProvider
argument_list|,
name|Long
argument_list|>
name|supported
parameter_list|)
block|{
name|long
name|coveredPermissions
init|=
name|Permissions
operator|.
name|NO_PERMISSION
decl_stmt|;
for|for
control|(
name|AggregatedPermissionProvider
name|aggregatedPermissionProvider
range|:
name|pps
control|)
block|{
name|long
name|supportedPermissions
init|=
name|supported
operator|.
name|apply
argument_list|(
name|aggregatedPermissionProvider
argument_list|)
decl_stmt|;
name|coveredPermissions
operator||=
name|supportedPermissions
expr_stmt|;
block|}
return|return
name|coveredPermissions
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|TreePermission
name|getTreePermission
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|,
annotation|@
name|NotNull
name|TreeType
name|type
parameter_list|,
annotation|@
name|NotNull
name|TreePermission
name|parentPermission
parameter_list|)
block|{
name|Tree
name|immutableTree
init|=
name|PermissionUtil
operator|.
name|getReadOnlyTree
argument_list|(
name|tree
argument_list|,
name|immutableRoot
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|isRoot
argument_list|()
condition|)
block|{
return|return
name|CompositeTreePermission
operator|.
name|create
argument_list|(
name|immutableTree
argument_list|,
name|treeProvider
argument_list|,
name|typeProvider
argument_list|,
name|pps
argument_list|,
name|getCompositeType
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|parentPermission
operator|instanceof
name|CompositeTreePermission
condition|)
block|{
return|return
name|CompositeTreePermission
operator|.
name|create
argument_list|(
name|immutableTree
argument_list|,
name|treeProvider
argument_list|,
operator|(
operator|(
name|CompositeTreePermission
operator|)
name|parentPermission
operator|)
argument_list|,
name|type
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|parentPermission
operator|.
name|getChildPermission
argument_list|(
name|immutableTree
operator|.
name|getName
argument_list|()
argument_list|,
name|treeProvider
operator|.
name|asNodeState
argument_list|(
name|immutableTree
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

