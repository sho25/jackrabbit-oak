begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newConcurrentHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_comment
comment|/**  * This {@link IOMonitor} instance delegates all calls to all  * {@code IOMonitor} instances registered.  */
end_comment

begin_class
specifier|public
class|class
name|CompositeIOMonitor
implements|implements
name|IOMonitor
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|IOMonitor
argument_list|>
name|ioMonitors
decl_stmt|;
comment|/**      * Create a new {@code CompositeIOMonitor} instance delegating the passed {@code ioMonitors}      * @param ioMonitors  {@link IOMonitor} instances to delegate to      */
specifier|public
name|CompositeIOMonitor
parameter_list|(
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|?
extends|extends
name|IOMonitor
argument_list|>
name|ioMonitors
parameter_list|)
block|{
name|this
operator|.
name|ioMonitors
operator|=
name|newConcurrentHashSet
argument_list|(
name|checkNotNull
argument_list|(
name|ioMonitors
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new empty {@code CompositeIOMonitor} instance.      */
specifier|public
name|CompositeIOMonitor
parameter_list|()
block|{
name|this
argument_list|(
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Register a {@code IOMonitor} instance to which this {@code CompositeIOMonitor}      * will delegate all its calls until {@link Registration#unregister()} is called      * on the return {@code Registration}.      *      * @param ioMonitor  {@code IOMonitor} to delegate to      * @return  a {@code Registration} for {@code ioMonitor}.      */
annotation|@
name|Nonnull
specifier|public
name|Registration
name|registerIOMonitor
parameter_list|(
annotation|@
name|Nonnull
name|IOMonitor
name|ioMonitor
parameter_list|)
block|{
name|ioMonitors
operator|.
name|add
argument_list|(
name|checkNotNull
argument_list|(
name|ioMonitor
argument_list|)
argument_list|)
expr_stmt|;
return|return
parameter_list|()
lambda|->
name|ioMonitors
operator|.
name|remove
argument_list|(
name|ioMonitor
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeSegmentRead
parameter_list|(
name|File
name|file
parameter_list|,
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|ioMonitors
operator|.
name|forEach
argument_list|(
name|ioMonitor
lambda|->
name|ioMonitor
operator|.
name|beforeSegmentRead
argument_list|(
name|file
argument_list|,
name|msb
argument_list|,
name|lsb
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterSegmentRead
parameter_list|(
name|File
name|file
parameter_list|,
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|,
name|int
name|length
parameter_list|,
name|long
name|elapsed
parameter_list|)
block|{
name|ioMonitors
operator|.
name|forEach
argument_list|(
name|ioMonitor
lambda|->
name|ioMonitor
operator|.
name|afterSegmentRead
argument_list|(
name|file
argument_list|,
name|msb
argument_list|,
name|lsb
argument_list|,
name|length
argument_list|,
name|elapsed
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeSegmentWrite
parameter_list|(
name|File
name|file
parameter_list|,
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|ioMonitors
operator|.
name|forEach
argument_list|(
name|ioMonitor
lambda|->
name|ioMonitor
operator|.
name|beforeSegmentWrite
argument_list|(
name|file
argument_list|,
name|msb
argument_list|,
name|lsb
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterSegmentWrite
parameter_list|(
name|File
name|file
parameter_list|,
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|,
name|int
name|length
parameter_list|,
name|long
name|elapsed
parameter_list|)
block|{
name|ioMonitors
operator|.
name|forEach
argument_list|(
name|ioMonitor
lambda|->
name|ioMonitor
operator|.
name|afterSegmentWrite
argument_list|(
name|file
argument_list|,
name|msb
argument_list|,
name|lsb
argument_list|,
name|length
argument_list|,
name|elapsed
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

