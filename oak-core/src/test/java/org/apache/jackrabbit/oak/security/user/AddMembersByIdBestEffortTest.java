begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ImportBehavior
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedItemImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|AddMembersByIdBestEffortTest
extends|extends
name|AbstractAddMembersByIdTest
block|{
specifier|private
name|List
argument_list|<
name|Authorizable
argument_list|>
name|toRemove
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|toRemove
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Authorizable
name|a
range|:
name|toRemove
control|)
block|{
name|a
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|ConfigurationParameters
name|getSecurityConfigParameters
parameter_list|()
block|{
return|return
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserConfiguration
operator|.
name|NAME
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|ProtectedItemImporter
operator|.
name|PARAM_IMPORT_BEHAVIOR
argument_list|,
name|ImportBehavior
operator|.
name|NAME_BESTEFFORT
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * "Oddity" when adding per id + besteffort: everyone group will not be      * dealt with separately and will end up being listed in a rep:members property.      */
annotation|@
name|Test
specifier|public
name|void
name|testEveryoneAsMember
parameter_list|()
throws|throws
name|Exception
block|{
name|UserManagerImpl
name|userManager
init|=
operator|(
name|UserManagerImpl
operator|)
name|getUserManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|Group
name|everyone
init|=
name|userManager
operator|.
name|createGroup
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|testGroup
operator|.
name|addMembers
argument_list|(
name|everyone
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|failed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|testGroup
operator|.
name|isDeclaredMember
argument_list|(
name|everyone
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testGroup
operator|.
name|isMember
argument_list|(
name|everyone
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Group
argument_list|>
name|it
init|=
name|everyone
operator|.
name|memberOf
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|assertNotEquals
argument_list|(
name|testGroup
operator|.
name|getID
argument_list|()
argument_list|,
name|it
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Group
argument_list|>
name|it
init|=
name|everyone
operator|.
name|declaredMemberOf
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|assertNotEquals
argument_list|(
name|testGroup
operator|.
name|getID
argument_list|()
argument_list|,
name|it
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// oddity of the current impl that add members without testing for
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|MembershipProvider
name|mp
init|=
name|userManager
operator|.
name|getMembershipProvider
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|mp
operator|.
name|getMembership
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|everyone
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|p
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|testGroup
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|everyone
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonExistingMember
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|addNonExistingMember
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|failed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|memberIds
init|=
name|getMemberIds
argument_list|(
name|testGroup
argument_list|)
decl_stmt|;
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|NON_EXISTING_IDS
argument_list|)
argument_list|,
name|memberIds
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|members
init|=
name|testGroup
operator|.
name|getDeclaredMembers
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|members
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|toRemove
operator|=
operator|new
name|ArrayList
argument_list|<
name|Authorizable
argument_list|>
argument_list|(
name|NON_EXISTING_IDS
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|NON_EXISTING_IDS
control|)
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createGroup
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|members
operator|=
name|testGroup
operator|.
name|getDeclaredMembers
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|members
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Authorizable
name|a
range|:
name|toRemove
control|)
block|{
name|assertTrue
argument_list|(
name|testGroup
operator|.
name|isDeclaredMember
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddByContentID
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|testGroup
operator|.
name|addMembers
argument_list|(
name|AuthorizableBaseProvider
operator|.
name|getContentID
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|failed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testGroup
operator|.
name|isMember
argument_list|(
name|getTestUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExistingMemberWithoutAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|addExistingMemberWithoutAccess
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|failed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|testGroup
operator|.
name|isMember
argument_list|(
name|memberGroup
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCyclicWithoutAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|memberGroup
operator|.
name|addMember
argument_list|(
name|testGroup
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
try|try
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|addExistingMemberWithoutAccess
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"CommitFailedException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|isConstraintViolation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|31
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|testGroup
operator|.
name|isMember
argument_list|(
name|memberGroup
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMemberListExistingMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|MembershipProvider
name|mp
init|=
operator|(
operator|(
name|UserManagerImpl
operator|)
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|)
operator|.
name|getMembershipProvider
argument_list|()
decl_stmt|;
try|try
block|{
name|mp
operator|.
name|setMembershipSizeThreshold
argument_list|(
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|testGroup
operator|.
name|addMembers
argument_list|(
literal|"member"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|testGroup
operator|.
name|addMembers
argument_list|(
literal|"member2"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|failed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|mp
operator|.
name|setMembershipSizeThreshold
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// back to default
block|}
block|}
block|}
end_class

end_unit

