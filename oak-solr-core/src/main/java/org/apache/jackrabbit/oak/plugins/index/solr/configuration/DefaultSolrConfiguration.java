begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|configuration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_comment
comment|/**  * Default {@link org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration}  */
end_comment

begin_class
specifier|public
class|class
name|DefaultSolrConfiguration
implements|implements
name|OakSolrConfiguration
block|{
specifier|private
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|ignoredProperties
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|SolrServerConfigurationDefaults
operator|.
name|IGNORED_PROPERTIES
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|getFieldNameFor
parameter_list|(
name|Type
argument_list|<
name|?
argument_list|>
name|propertyType
parameter_list|)
block|{
if|if
condition|(
name|Type
operator|.
name|BINARIES
operator|.
name|equals
argument_list|(
name|propertyType
argument_list|)
operator|||
name|Type
operator|.
name|BINARY
operator|.
name|equals
argument_list|(
name|propertyType
argument_list|)
condition|)
block|{
comment|// TODO : use Tika / SolrCell here
return|return
name|propertyType
operator|.
name|toString
argument_list|()
operator|+
literal|"_bin"
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPathField
parameter_list|()
block|{
return|return
name|SolrServerConfigurationDefaults
operator|.
name|PATH_FIELD_NAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFieldForPathRestriction
parameter_list|(
name|Filter
operator|.
name|PathRestriction
name|pathRestriction
parameter_list|)
block|{
name|String
name|fieldName
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|pathRestriction
condition|)
block|{
case|case
name|ALL_CHILDREN
case|:
block|{
name|fieldName
operator|=
name|SolrServerConfigurationDefaults
operator|.
name|DESC_FIELD_NAME
expr_stmt|;
break|break;
block|}
case|case
name|DIRECT_CHILDREN
case|:
block|{
name|fieldName
operator|=
name|SolrServerConfigurationDefaults
operator|.
name|CHILD_FIELD_NAME
expr_stmt|;
break|break;
block|}
case|case
name|EXACT
case|:
block|{
name|fieldName
operator|=
name|SolrServerConfigurationDefaults
operator|.
name|PATH_FIELD_NAME
expr_stmt|;
break|break;
block|}
case|case
name|PARENT
case|:
block|{
name|fieldName
operator|=
name|SolrServerConfigurationDefaults
operator|.
name|ANC_FIELD_NAME
expr_stmt|;
break|break;
block|}
case|case
name|NO_RESTRICTION
case|:
break|break;
default|default:
break|break;
block|}
return|return
name|fieldName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFieldForPropertyRestriction
parameter_list|(
name|Filter
operator|.
name|PropertyRestriction
name|propertyRestriction
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CommitPolicy
name|getCommitPolicy
parameter_list|()
block|{
return|return
name|CommitPolicy
operator|.
name|SOFT
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCatchAllField
parameter_list|()
block|{
return|return
name|SolrServerConfigurationDefaults
operator|.
name|CATCHALL_FIELD
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRows
parameter_list|()
block|{
return|return
name|SolrServerConfigurationDefaults
operator|.
name|ROWS
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|useForPropertyRestrictions
parameter_list|()
block|{
return|return
name|SolrServerConfigurationDefaults
operator|.
name|PROPERTY_RESTRICTIONS
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|useForPrimaryTypes
parameter_list|()
block|{
return|return
name|SolrServerConfigurationDefaults
operator|.
name|PRIMARY_TYPES
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|useForPathRestrictions
parameter_list|()
block|{
return|return
name|SolrServerConfigurationDefaults
operator|.
name|PATH_RESTRICTIONS
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getIgnoredProperties
parameter_list|()
block|{
return|return
name|ignoredProperties
return|;
block|}
block|}
end_class

end_unit

