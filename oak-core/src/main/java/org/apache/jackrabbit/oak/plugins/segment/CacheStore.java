begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_class
specifier|public
class|class
name|CacheStore
implements|implements
name|SegmentStore
block|{
specifier|private
specifier|final
name|SegmentStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|LoadingCache
argument_list|<
name|UUID
argument_list|,
name|Segment
argument_list|>
name|cache
decl_stmt|;
specifier|public
name|CacheStore
parameter_list|(
specifier|final
name|SegmentStore
name|store
parameter_list|,
name|long
name|cacheSize
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumWeight
argument_list|(
name|cacheSize
argument_list|)
operator|.
name|weigher
argument_list|(
name|Segment
operator|.
name|weigher
argument_list|()
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|UUID
argument_list|,
name|Segment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Segment
name|load
parameter_list|(
name|UUID
name|key
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|store
operator|.
name|readSegment
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RecordId
name|getJournalHead
parameter_list|()
block|{
return|return
name|store
operator|.
name|getJournalHead
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|setJournalHead
parameter_list|(
name|RecordId
name|head
parameter_list|,
name|RecordId
name|base
parameter_list|)
block|{
return|return
name|store
operator|.
name|setJournalHead
argument_list|(
name|head
argument_list|,
name|base
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxSegmentSize
parameter_list|()
block|{
return|return
name|store
operator|.
name|getMaxSegmentSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Segment
name|readSegment
parameter_list|(
name|UUID
name|segmentId
parameter_list|)
block|{
try|try
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|segmentId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failed to read segment "
operator|+
name|segmentId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createSegment
parameter_list|(
name|Segment
name|segment
parameter_list|)
block|{
name|store
operator|.
name|createSegment
argument_list|(
name|segment
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|segment
operator|.
name|getSegmentId
argument_list|()
argument_list|,
name|segment
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createSegment
parameter_list|(
name|UUID
name|segmentId
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|store
operator|.
name|createSegment
argument_list|(
name|segmentId
argument_list|,
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteSegment
parameter_list|(
name|UUID
name|segmentId
parameter_list|)
block|{
name|store
operator|.
name|deleteSegment
argument_list|(
name|segmentId
argument_list|)
expr_stmt|;
name|cache
operator|.
name|invalidate
argument_list|(
name|segmentId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

