begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
operator|.
name|broadcast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A broadcast mechanism that uses TCP. It is mainly used for testing.  */
end_comment

begin_class
specifier|public
class|class
name|TCPBroadcaster
implements|implements
name|Broadcaster
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TCPBroadcaster
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|TIMEOUT
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_BUFFER_SIZE
init|=
literal|64
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|NEXT_ID
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Charset
name|UTF8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|id
init|=
name|NEXT_ID
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Listener
argument_list|>
name|listeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|Listener
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Client
argument_list|>
name|clients
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Client
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ArrayBlockingQueue
argument_list|<
name|ByteBuffer
argument_list|>
name|sendBuffer
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|MAX_BUFFER_SIZE
operator|*
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|DynamicBroadcastConfig
name|broadcastConfig
decl_stmt|;
specifier|private
name|ServerSocket
name|serverSocket
decl_stmt|;
specifier|private
name|Thread
name|acceptThread
decl_stmt|;
specifier|private
name|Thread
name|discoverThread
decl_stmt|;
specifier|private
name|Thread
name|sendThread
decl_stmt|;
specifier|private
name|String
name|ownListener
decl_stmt|;
specifier|private
name|String
name|ownKeyUUID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|private
name|byte
index|[]
name|ownKey
init|=
name|ownKeyUUID
operator|.
name|getBytes
argument_list|(
name|UTF8
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|public
name|TCPBroadcaster
parameter_list|(
name|String
name|config
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Init "
operator|+
name|config
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|String
name|config
parameter_list|)
block|{
try|try
block|{
name|String
index|[]
name|parts
init|=
name|config
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|int
name|startPort
init|=
literal|9800
decl_stmt|;
name|int
name|endPort
init|=
literal|9810
decl_stmt|;
name|String
name|key
init|=
literal|""
decl_stmt|;
comment|// for debugging, this will send everything to localhost:
comment|// String[] sendTo = {"sendTo", "localhost"};
comment|// by default, only the entries in the clusterNodes
comment|// collection are used:
name|String
index|[]
name|sendTo
init|=
block|{
literal|"sendTo"
block|}
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|parts
control|)
block|{
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
literal|"ports "
argument_list|)
condition|)
block|{
name|String
index|[]
name|ports
init|=
name|p
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|startPort
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|ports
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|endPort
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|ports
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
literal|"key "
argument_list|)
condition|)
block|{
name|key
operator|=
name|p
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
literal|"sendTo "
argument_list|)
condition|)
block|{
name|sendTo
operator|=
name|p
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
name|sendTo
index|[
literal|0
index|]
operator|=
literal|null
expr_stmt|;
name|MessageDigest
name|messageDigest
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA-256"
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ownKey
operator|=
name|messageDigest
operator|.
name|digest
argument_list|(
name|key
operator|.
name|getBytes
argument_list|(
name|UTF8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|IOException
name|lastException
init|=
literal|null
decl_stmt|;
name|ServerSocket
name|server
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|port
init|=
name|startPort
init|;
name|port
operator|<=
name|endPort
condition|;
name|port
operator|++
control|)
block|{
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|server
operator|=
operator|new
name|ServerSocket
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot open port "
operator|+
name|port
argument_list|)
expr_stmt|;
name|lastException
operator|=
name|e
expr_stmt|;
comment|// ignore
block|}
block|}
for|for
control|(
name|String
name|send
range|:
name|sendTo
control|)
block|{
if|if
condition|(
name|send
operator|!=
literal|null
operator|&&
operator|!
name|send
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|Client
name|c
init|=
operator|new
name|Client
argument_list|(
name|send
argument_list|,
name|port
argument_list|,
name|ownKey
argument_list|)
decl_stmt|;
name|clients
operator|.
name|put
argument_list|(
name|send
operator|+
literal|":"
operator|+
name|port
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot connect to "
operator|+
name|send
operator|+
literal|" "
operator|+
name|port
argument_list|)
expr_stmt|;
comment|// ignore
block|}
block|}
block|}
block|}
if|if
condition|(
name|server
operator|==
literal|null
operator|&&
name|lastException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|lastException
throw|;
block|}
name|server
operator|.
name|setSoTimeout
argument_list|(
name|TIMEOUT
argument_list|)
expr_stmt|;
name|serverSocket
operator|=
name|server
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Listening on port "
operator|+
name|server
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|acceptThread
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|accept
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
literal|"Oak TCPBroadcaster: accept #"
operator|+
name|id
argument_list|)
expr_stmt|;
name|acceptThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|acceptThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|discoverThread
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|discover
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
literal|"Oak TCPBroadcaster: discover #"
operator|+
name|id
argument_list|)
expr_stmt|;
name|discoverThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|discoverThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|sendThread
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|send
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
literal|"Oak TCPBroadcaster: send #"
operator|+
name|id
argument_list|)
expr_stmt|;
name|sendThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sendThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBroadcastConfig
parameter_list|(
name|DynamicBroadcastConfig
name|broadcastConfig
parameter_list|)
block|{
name|this
operator|.
name|broadcastConfig
operator|=
name|broadcastConfig
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|clientInfo
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|clientInfo
operator|.
name|put
argument_list|(
name|DynamicBroadcastConfig
operator|.
name|ID
argument_list|,
name|ownKeyUUID
argument_list|)
expr_stmt|;
name|ServerSocket
name|s
init|=
name|serverSocket
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|String
name|address
init|=
name|getLocalAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|address
operator|!=
literal|null
condition|)
block|{
name|ownListener
operator|=
name|address
operator|+
literal|":"
operator|+
name|s
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
name|clientInfo
operator|.
name|put
argument_list|(
name|DynamicBroadcastConfig
operator|.
name|LISTENER
argument_list|,
name|ownListener
argument_list|)
expr_stmt|;
block|}
block|}
name|broadcastConfig
operator|.
name|connect
argument_list|(
name|clientInfo
argument_list|)
expr_stmt|;
block|}
specifier|static
name|String
name|getLocalAddress
parameter_list|()
block|{
name|String
name|bind
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.tcpBindAddress"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|InetAddress
name|address
decl_stmt|;
if|if
condition|(
name|bind
operator|!=
literal|null
operator|&&
operator|!
name|bind
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|address
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|bind
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|address
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
expr_stmt|;
block|}
return|return
name|address
operator|.
name|getHostAddress
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
return|return
literal|""
return|;
block|}
block|}
name|void
name|accept
parameter_list|()
block|{
while|while
condition|(
name|isRunning
argument_list|()
condition|)
block|{
try|try
block|{
specifier|final
name|Socket
name|socket
init|=
name|serverSocket
operator|.
name|accept
argument_list|()
decl_stmt|;
name|Runnable
name|r
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
specifier|final
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|socket
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|testKey
init|=
operator|new
name|byte
index|[
name|ownKey
operator|.
name|length
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|testKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|testKey
argument_list|)
operator|.
name|compareTo
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|ownKey
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Key mismatch"
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
while|while
condition|(
operator|!
name|socket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|int
name|len
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|ByteBuffer
name|buff
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|int
name|start
init|=
name|buff
operator|.
name|position
argument_list|()
decl_stmt|;
for|for
control|(
name|Listener
name|l
range|:
name|listeners
control|)
block|{
name|buff
operator|.
name|position
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|l
operator|.
name|receive
argument_list|(
name|buff
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
literal|"Oak TCPBroadcaster: listener"
argument_list|)
decl_stmt|;
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|isRunning
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Receive failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// ignore
block|}
block|}
try|try
block|{
name|serverSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closed"
argument_list|)
expr_stmt|;
comment|// ignore
block|}
block|}
name|void
name|discover
parameter_list|()
block|{
while|while
condition|(
name|isRunning
argument_list|()
condition|)
block|{
name|DynamicBroadcastConfig
name|b
init|=
name|broadcastConfig
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|readClients
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Client
name|c
range|:
name|clients
operator|.
name|values
argument_list|()
control|)
block|{
name|c
operator|.
name|tryConnect
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isRunning
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
synchronized|synchronized
init|(
name|stop
init|)
block|{
if|if
condition|(
name|isRunning
argument_list|()
condition|)
block|{
try|try
block|{
name|stop
operator|.
name|wait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
block|}
name|void
name|readClients
parameter_list|(
name|DynamicBroadcastConfig
name|b
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|list
init|=
name|b
operator|.
name|getClientInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
range|:
name|list
control|)
block|{
name|String
name|listener
init|=
name|m
operator|.
name|get
argument_list|(
name|DynamicBroadcastConfig
operator|.
name|LISTENER
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|m
operator|.
name|get
argument_list|(
name|DynamicBroadcastConfig
operator|.
name|ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|listener
operator|.
name|equals
argument_list|(
name|ownListener
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// the key is the combination of listener and id,
comment|// because the same ip address / port combination
comment|// could be there multiple times for some time
comment|// (in case there is a old, orphan entry for the same machine)
name|String
name|clientKey
init|=
name|listener
operator|+
literal|" "
operator|+
name|id
decl_stmt|;
name|Client
name|c
init|=
name|clients
operator|.
name|get
argument_list|(
name|clientKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|int
name|index
init|=
name|listener
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|String
name|host
init|=
name|listener
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|listener
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|key
init|=
name|id
operator|.
name|getBytes
argument_list|(
name|UTF8
argument_list|)
decl_stmt|;
name|c
operator|=
operator|new
name|Client
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|clients
operator|.
name|put
argument_list|(
name|clientKey
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
block|}
name|void
name|send
parameter_list|()
block|{
while|while
condition|(
name|isRunning
argument_list|()
condition|)
block|{
try|try
block|{
name|ByteBuffer
name|buff
init|=
name|sendBuffer
operator|.
name|poll
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|buff
operator|!=
literal|null
operator|&&
name|isRunning
argument_list|()
condition|)
block|{
name|sendBuffer
argument_list|(
name|buff
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|send
parameter_list|(
name|ByteBuffer
name|buff
parameter_list|)
block|{
name|ByteBuffer
name|b
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|buff
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|put
argument_list|(
name|buff
argument_list|)
expr_stmt|;
name|b
operator|.
name|flip
argument_list|()
expr_stmt|;
while|while
condition|(
name|sendBuffer
operator|.
name|size
argument_list|()
operator|>
name|MAX_BUFFER_SIZE
condition|)
block|{
name|sendBuffer
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|sendBuffer
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// ignore - might happen once in a while,
comment|// if the buffer was not yet full just before, but now
comment|// many threads concurrently tried to add
block|}
block|}
specifier|private
name|void
name|sendBuffer
parameter_list|(
name|ByteBuffer
name|buff
parameter_list|)
block|{
name|int
name|len
init|=
name|buff
operator|.
name|limit
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|buff
operator|.
name|get
argument_list|(
name|data
argument_list|)
expr_stmt|;
for|for
control|(
name|Client
name|c
range|:
name|clients
operator|.
name|values
argument_list|()
control|)
block|{
name|c
operator|.
name|send
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isRunning
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|isRunning
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stopping"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|stop
init|)
block|{
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stop
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|serverSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
try|try
block|{
name|acceptThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
try|try
block|{
name|sendThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
try|try
block|{
name|discoverThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
specifier|public
specifier|final
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
operator|!
name|stop
operator|.
name|get
argument_list|()
return|;
block|}
specifier|static
class|class
name|Client
block|{
specifier|final
name|String
name|host
decl_stmt|;
specifier|final
name|int
name|port
decl_stmt|;
specifier|final
name|byte
index|[]
name|key
decl_stmt|;
name|DataOutputStream
name|out
decl_stmt|;
name|Client
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|byte
index|[]
name|key
parameter_list|)
throws|throws
name|UnknownHostException
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
name|void
name|send
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|DataOutputStream
name|o
init|=
name|out
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|o
init|)
block|{
try|try
block|{
name|o
operator|.
name|writeInt
argument_list|(
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|o
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|o
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing failed, port "
operator|+
name|port
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|o
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
name|out
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|tryConnect
parameter_list|()
block|{
name|DataOutputStream
name|o
init|=
name|out
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
operator|||
name|host
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|InetAddress
name|address
decl_stmt|;
try|try
block|{
name|address
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e1
parameter_list|)
block|{
return|return;
block|}
name|Socket
name|socket
init|=
operator|new
name|Socket
argument_list|()
decl_stmt|;
try|try
block|{
name|socket
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|address
argument_list|,
name|port
argument_list|)
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|o
operator|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|socket
operator|.
name|getOutputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|o
operator|.
name|write
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|o
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|=
name|o
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connected to "
operator|+
name|address
operator|+
literal|" port "
operator|+
name|port
operator|+
literal|" k "
operator|+
name|key
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ok, done
block|}
block|}
block|}
block|}
end_class

end_unit

