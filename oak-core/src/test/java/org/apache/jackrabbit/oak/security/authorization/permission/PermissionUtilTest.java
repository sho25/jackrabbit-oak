begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|ReadOnly
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|AdminPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|SystemPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionConstants
operator|.
name|PARAM_ADMINISTRATIVE_PRINCIPALS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionConstants
operator|.
name|REP_ACCESS_CONTROLLED_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|withSettings
import|;
end_import

begin_class
specifier|public
class|class
name|PermissionUtilTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testParentPathOrNull
parameter_list|()
block|{
for|for
control|(
name|String
name|path
range|:
operator|new
name|String
index|[]
block|{
literal|""
block|,
name|PathUtils
operator|.
name|ROOT_PATH
block|,
literal|"a"
block|}
control|)
block|{
name|assertNull
argument_list|(
name|PermissionUtil
operator|.
name|getParentPathOrNull
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|PermissionUtil
operator|.
name|getParentPathOrNull
argument_list|(
literal|"/single"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
operator|new
name|String
index|[]
block|{
literal|"/a/path"
block|,
literal|"/a/longer/path"
block|}
control|)
block|{
name|assertEquals
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|PermissionUtil
operator|.
name|getParentPathOrNull
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckACLPath
parameter_list|()
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|path
init|=
literal|"/path"
decl_stmt|;
name|when
argument_list|(
name|tree
operator|.
name|getProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|PermissionUtil
operator|.
name|checkACLPath
argument_list|(
name|tree
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyState
name|nonMatching
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|,
literal|"/another"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|tree
operator|.
name|getProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nonMatching
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|PermissionUtil
operator|.
name|checkACLPath
argument_list|(
name|tree
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyState
name|matching
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|,
literal|"/path"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|tree
operator|.
name|getProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|matching
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PermissionUtil
operator|.
name|checkACLPath
argument_list|(
name|tree
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckACLPath2
parameter_list|()
block|{
name|NodeBuilder
name|nb
init|=
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|path
init|=
literal|"/path"
decl_stmt|;
name|when
argument_list|(
name|nb
operator|.
name|getProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|PermissionUtil
operator|.
name|checkACLPath
argument_list|(
name|nb
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyState
name|nonMatching
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|,
literal|"/another"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nb
operator|.
name|getProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nonMatching
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|PermissionUtil
operator|.
name|checkACLPath
argument_list|(
name|nb
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyState
name|matching
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|,
literal|"/path"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nb
operator|.
name|getProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|matching
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PermissionUtil
operator|.
name|checkACLPath
argument_list|(
name|nb
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsAdminOrSystem
parameter_list|()
block|{
name|ConfigurationParameters
name|params
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|PARAM_ADMINISTRATIVE_PRINCIPALS
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"administrative"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|"name"
argument_list|)
argument_list|,
operator|new
name|PrincipalImpl
argument_list|(
literal|"administrative"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|PermissionUtil
operator|.
name|isAdminOrSystem
argument_list|(
name|principals
argument_list|,
name|params
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|PermissionUtil
operator|.
name|isAdminOrSystem
argument_list|(
name|principals
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsAdminOrSystemForAdminPrincipal
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|PermissionUtil
operator|.
name|isAdminOrSystem
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|mock
argument_list|(
name|AdminPrincipal
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PermissionUtil
operator|.
name|isAdminOrSystem
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|mock
argument_list|(
name|AdminPrincipal
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsAdminOrSystemForSystemPrincial
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|PermissionUtil
operator|.
name|isAdminOrSystem
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|SystemPrincipal
operator|.
name|INSTANCE
argument_list|)
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PermissionUtil
operator|.
name|isAdminOrSystem
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|SystemPrincipal
operator|.
name|INSTANCE
argument_list|)
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPath
parameter_list|()
block|{
name|Tree
name|t
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"/path"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|PermissionUtil
operator|.
name|getPath
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/path"
argument_list|,
name|PermissionUtil
operator|.
name|getPath
argument_list|(
name|t
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/path"
argument_list|,
name|PermissionUtil
operator|.
name|getPath
argument_list|(
literal|null
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|afterT
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"/afterPath"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/path"
argument_list|,
name|PermissionUtil
operator|.
name|getPath
argument_list|(
name|t
argument_list|,
name|afterT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetReadOnlyTree
parameter_list|()
block|{
name|Tree
name|readOnlyTree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|,
name|withSettings
argument_list|()
operator|.
name|extraInterfaces
argument_list|(
name|ReadOnly
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|Root
name|r
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|readOnlyTree
argument_list|,
name|PermissionUtil
operator|.
name|getReadOnlyTree
argument_list|(
name|readOnlyTree
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|r
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getTree
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetReadOnlyTreeFromTree
parameter_list|()
block|{
name|Tree
name|readOnlyTree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|,
name|withSettings
argument_list|()
operator|.
name|extraInterfaces
argument_list|(
name|ReadOnly
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|Root
name|r
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/path"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|readOnlyTree
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|Tree
name|t
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"/path"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|readOnlyTree
argument_list|,
name|PermissionUtil
operator|.
name|getReadOnlyTree
argument_list|(
name|t
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|r
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/path"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

