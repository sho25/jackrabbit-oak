begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalUser
import|;
end_import

begin_class
specifier|public
class|class
name|LdapUser
implements|implements
name|ExternalUser
block|{
specifier|private
specifier|final
name|String
name|uid
decl_stmt|;
specifier|private
specifier|final
name|String
name|pwd
decl_stmt|;
specifier|private
specifier|final
name|LdapSearch
name|search
decl_stmt|;
specifier|private
name|String
name|path
decl_stmt|;
specifier|private
name|String
name|dn
decl_stmt|;
specifier|private
name|Principal
name|principal
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|LdapGroup
argument_list|>
name|groups
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|LdapUser
parameter_list|(
annotation|@
name|Nonnull
name|String
name|uid
parameter_list|,
annotation|@
name|Nullable
name|String
name|pwd
parameter_list|,
annotation|@
name|Nonnull
name|LdapSearch
name|search
parameter_list|)
block|{
name|this
operator|.
name|uid
operator|=
name|uid
expr_stmt|;
name|this
operator|.
name|pwd
operator|=
name|pwd
expr_stmt|;
name|this
operator|.
name|search
operator|=
name|search
expr_stmt|;
block|}
comment|//-------------------------------------------------------< ExternalUser>---
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|uid
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|pwd
return|;
block|}
annotation|@
name|Override
specifier|public
name|Principal
name|getPrincipal
parameter_list|()
block|{
if|if
condition|(
name|principal
operator|==
literal|null
condition|)
block|{
name|principal
operator|=
operator|new
name|PrincipalImpl
argument_list|(
name|uid
argument_list|)
expr_stmt|;
block|}
return|return
name|principal
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPath
parameter_list|()
block|{
comment|//TODO also support splitdn mode
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|getDN
argument_list|()
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|LdapGroup
argument_list|>
name|getGroups
parameter_list|()
block|{
if|if
condition|(
name|groups
operator|==
literal|null
condition|)
block|{
name|groups
operator|=
name|search
operator|.
name|findGroups
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|groups
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
comment|//--------------------------------------------------------------------------
name|void
name|setProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
name|String
name|getDN
parameter_list|()
block|{
return|return
name|dn
return|;
block|}
name|void
name|setDN
parameter_list|(
name|String
name|dn
parameter_list|)
block|{
name|this
operator|.
name|dn
operator|=
name|dn
expr_stmt|;
block|}
block|}
end_class

end_unit

