begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMKBuilderProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NamePathRev
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|PathRev
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|RevisionVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|mvstore
operator|.
name|WriteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|DataTypeUtilTest
block|{
annotation|@
name|Rule
specifier|public
name|DocumentMKBuilderProvider
name|builderProvider
init|=
operator|new
name|DocumentMKBuilderProvider
argument_list|()
decl_stmt|;
specifier|private
name|WriteBuffer
name|wb
init|=
operator|new
name|WriteBuffer
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|booleanToBufferTrue
parameter_list|()
block|{
name|DataTypeUtil
operator|.
name|booleanToBuffer
argument_list|(
literal|true
argument_list|,
name|wb
argument_list|)
expr_stmt|;
name|ByteBuffer
name|rb
init|=
name|readBufferFrom
argument_list|(
name|wb
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|DataTypeUtil
operator|.
name|booleanFromBuffer
argument_list|(
name|rb
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|booleanToBufferFalse
parameter_list|()
block|{
name|DataTypeUtil
operator|.
name|booleanToBuffer
argument_list|(
literal|false
argument_list|,
name|wb
argument_list|)
expr_stmt|;
name|ByteBuffer
name|rb
init|=
name|readBufferFrom
argument_list|(
name|wb
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|DataTypeUtil
operator|.
name|booleanFromBuffer
argument_list|(
name|rb
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|revisionVectorToBufferEmpty
parameter_list|()
block|{
name|RevisionVector
name|empty
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|DataTypeUtil
operator|.
name|revisionVectorToBuffer
argument_list|(
name|empty
argument_list|,
name|wb
argument_list|)
expr_stmt|;
name|ByteBuffer
name|rb
init|=
name|readBufferFrom
argument_list|(
name|wb
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|empty
argument_list|,
name|DataTypeUtil
operator|.
name|revisionVectorFromBuffer
argument_list|(
name|rb
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|revisionVectorToBuffer
parameter_list|()
block|{
name|RevisionVector
name|revisions
init|=
name|RevisionVector
operator|.
name|fromString
argument_list|(
literal|"r9-0-1,br7-0-2"
argument_list|)
decl_stmt|;
name|DataTypeUtil
operator|.
name|revisionVectorToBuffer
argument_list|(
name|revisions
argument_list|,
name|wb
argument_list|)
expr_stmt|;
name|ByteBuffer
name|rb
init|=
name|readBufferFrom
argument_list|(
name|wb
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|revisions
argument_list|,
name|DataTypeUtil
operator|.
name|revisionVectorFromBuffer
argument_list|(
name|rb
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pathToBufferRoot
parameter_list|()
block|{
name|Path
name|p
init|=
name|Path
operator|.
name|ROOT
decl_stmt|;
name|DataTypeUtil
operator|.
name|pathToBuffer
argument_list|(
name|p
argument_list|,
name|wb
argument_list|)
expr_stmt|;
name|ByteBuffer
name|rb
init|=
name|readBufferFrom
argument_list|(
name|wb
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p
argument_list|,
name|DataTypeUtil
operator|.
name|pathFromBuffer
argument_list|(
name|rb
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pathToBuffer
parameter_list|()
block|{
name|Path
name|p
init|=
name|Path
operator|.
name|fromString
argument_list|(
literal|"/foo/bar/quux"
argument_list|)
decl_stmt|;
name|DataTypeUtil
operator|.
name|pathToBuffer
argument_list|(
name|p
argument_list|,
name|wb
argument_list|)
expr_stmt|;
name|ByteBuffer
name|rb
init|=
name|readBufferFrom
argument_list|(
name|wb
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p
argument_list|,
name|DataTypeUtil
operator|.
name|pathFromBuffer
argument_list|(
name|rb
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|relPathToBuffer
parameter_list|()
block|{
name|Path
name|p
init|=
name|Path
operator|.
name|fromString
argument_list|(
literal|"foo/bar/quux"
argument_list|)
decl_stmt|;
name|DataTypeUtil
operator|.
name|pathToBuffer
argument_list|(
name|p
argument_list|,
name|wb
argument_list|)
expr_stmt|;
name|ByteBuffer
name|rb
init|=
name|readBufferFrom
argument_list|(
name|wb
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p
argument_list|,
name|DataTypeUtil
operator|.
name|pathFromBuffer
argument_list|(
name|rb
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|relPathSingleElementToBuffer
parameter_list|()
block|{
name|Path
name|p
init|=
name|Path
operator|.
name|fromString
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|DataTypeUtil
operator|.
name|pathToBuffer
argument_list|(
name|p
argument_list|,
name|wb
argument_list|)
expr_stmt|;
name|ByteBuffer
name|rb
init|=
name|readBufferFrom
argument_list|(
name|wb
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p
argument_list|,
name|DataTypeUtil
operator|.
name|pathFromBuffer
argument_list|(
name|rb
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|relPathMultipleToBuffer
parameter_list|()
block|{
name|Path
name|fooBar
init|=
name|Path
operator|.
name|fromString
argument_list|(
literal|"foo/bar"
argument_list|)
decl_stmt|;
name|Path
name|barBaz
init|=
name|Path
operator|.
name|fromString
argument_list|(
literal|"bar/baz"
argument_list|)
decl_stmt|;
name|DataTypeUtil
operator|.
name|pathToBuffer
argument_list|(
name|fooBar
argument_list|,
name|wb
argument_list|)
expr_stmt|;
name|DataTypeUtil
operator|.
name|pathToBuffer
argument_list|(
name|barBaz
argument_list|,
name|wb
argument_list|)
expr_stmt|;
name|ByteBuffer
name|rb
init|=
name|readBufferFrom
argument_list|(
name|wb
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fooBar
argument_list|,
name|DataTypeUtil
operator|.
name|pathFromBuffer
argument_list|(
name|rb
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|barBaz
argument_list|,
name|DataTypeUtil
operator|.
name|pathFromBuffer
argument_list|(
name|rb
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pathRevToBuffer
parameter_list|()
block|{
name|Path
name|p
init|=
name|Path
operator|.
name|fromString
argument_list|(
literal|"/foo/bar/quux"
argument_list|)
decl_stmt|;
name|RevisionVector
name|rv
init|=
name|RevisionVector
operator|.
name|fromString
argument_list|(
literal|"r3-4-1,br4-9-2"
argument_list|)
decl_stmt|;
name|PathRev
name|expected
init|=
operator|new
name|PathRev
argument_list|(
name|p
argument_list|,
name|rv
argument_list|)
decl_stmt|;
name|DataTypeUtil
operator|.
name|pathRevToBuffer
argument_list|(
name|expected
argument_list|,
name|wb
argument_list|)
expr_stmt|;
name|ByteBuffer
name|rb
init|=
name|readBufferFrom
argument_list|(
name|wb
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|DataTypeUtil
operator|.
name|pathRevFromBuffer
argument_list|(
name|rb
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pathNameRevToBuffer
parameter_list|()
block|{
name|Path
name|p
init|=
name|Path
operator|.
name|fromString
argument_list|(
literal|"/foo/bar/quux"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
literal|"baz"
decl_stmt|;
name|RevisionVector
name|rv
init|=
name|RevisionVector
operator|.
name|fromString
argument_list|(
literal|"r3-4-1,br4-9-2"
argument_list|)
decl_stmt|;
name|NamePathRev
name|expected
init|=
operator|new
name|NamePathRev
argument_list|(
name|name
argument_list|,
name|p
argument_list|,
name|rv
argument_list|)
decl_stmt|;
name|DataTypeUtil
operator|.
name|namePathRevToBuffer
argument_list|(
name|expected
argument_list|,
name|wb
argument_list|)
expr_stmt|;
name|ByteBuffer
name|rb
init|=
name|readBufferFrom
argument_list|(
name|wb
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|DataTypeUtil
operator|.
name|namePathRevFromBuffer
argument_list|(
name|rb
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stateToBufferLastRevNull
parameter_list|()
block|{
name|DocumentNodeStore
name|ns
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
name|Path
operator|.
name|fromString
argument_list|(
literal|"/foo/bar"
argument_list|)
decl_stmt|;
name|RevisionVector
name|rootRev
init|=
name|ns
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|DocumentNodeState
name|expected
init|=
operator|new
name|DocumentNodeState
argument_list|(
name|ns
argument_list|,
name|p
argument_list|,
name|rootRev
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|DataTypeUtil
operator|.
name|stateToBuffer
argument_list|(
name|expected
argument_list|,
name|wb
argument_list|)
expr_stmt|;
name|ByteBuffer
name|rb
init|=
name|readBufferFrom
argument_list|(
name|wb
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|DataTypeUtil
operator|.
name|stateFromBuffer
argument_list|(
name|ns
argument_list|,
name|rb
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stateToBuffer
parameter_list|()
block|{
name|DocumentNodeStore
name|ns
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
name|Path
operator|.
name|fromString
argument_list|(
literal|"/foo/bar"
argument_list|)
decl_stmt|;
name|RevisionVector
name|rootRev
init|=
name|ns
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|DocumentNodeState
name|expected
init|=
operator|new
name|DocumentNodeState
argument_list|(
name|ns
argument_list|,
name|p
argument_list|,
name|rootRev
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
name|rootRev
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|DataTypeUtil
operator|.
name|stateToBuffer
argument_list|(
name|expected
argument_list|,
name|wb
argument_list|)
expr_stmt|;
name|ByteBuffer
name|rb
init|=
name|readBufferFrom
argument_list|(
name|wb
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|DataTypeUtil
operator|.
name|stateFromBuffer
argument_list|(
name|ns
argument_list|,
name|rb
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|ByteBuffer
name|readBufferFrom
parameter_list|(
name|WriteBuffer
name|wb
parameter_list|)
block|{
name|ByteBuffer
name|rb
init|=
name|wb
operator|.
name|getBuffer
argument_list|()
decl_stmt|;
name|rb
operator|.
name|rewind
argument_list|()
expr_stmt|;
return|return
name|rb
return|;
block|}
block|}
end_class

end_unit

