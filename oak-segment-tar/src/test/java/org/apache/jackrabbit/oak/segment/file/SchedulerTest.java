begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|currentThread
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SchedulerTest
block|{
specifier|private
specifier|final
name|Scheduler
name|scheduler
init|=
operator|new
name|Scheduler
argument_list|(
literal|"test-scheduler"
argument_list|)
decl_stmt|;
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|scheduler
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|TestTask
name|task
init|=
operator|new
name|TestTask
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|execute
argument_list|(
literal|"execute"
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|task
operator|.
name|await
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"execute"
argument_list|,
name|task
operator|.
name|getThreadName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|scheduleOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|TestTask
name|task
init|=
operator|new
name|TestTask
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|scheduleOnce
argument_list|(
literal|"scheduleOnce"
argument_list|,
literal|1
argument_list|,
name|SECONDS
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|task
operator|.
name|getThreadName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|task
operator|.
name|await
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scheduleOnce"
argument_list|,
name|task
operator|.
name|getThreadName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|scheduleAtFixedRate
parameter_list|()
throws|throws
name|Exception
block|{
name|TestTask
name|task
init|=
operator|new
name|TestTask
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|scheduleAtFixedRate
argument_list|(
literal|"scheduleAtFixedRate"
argument_list|,
literal|200
argument_list|,
name|MILLISECONDS
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|task
operator|.
name|getThreadName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|task
operator|.
name|await
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scheduleAtFixedRate"
argument_list|,
name|task
operator|.
name|getThreadName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|scheduleWithFixedDelay
parameter_list|()
throws|throws
name|Exception
block|{
name|TestTask
name|task
init|=
operator|new
name|TestTask
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|scheduleWithFixedDelay
argument_list|(
literal|"scheduleWithFixedDelay"
argument_list|,
literal|200
argument_list|,
name|MILLISECONDS
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|task
operator|.
name|getThreadName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|task
operator|.
name|await
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scheduleWithFixedDelay"
argument_list|,
name|task
operator|.
name|getThreadName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|TestTask
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|String
argument_list|>
name|threadName
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|done
decl_stmt|;
specifier|public
name|TestTask
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|done
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|done
operator|.
name|getCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|threadName
operator|.
name|set
argument_list|(
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|await
parameter_list|()
throws|throws
name|InterruptedException
block|{
return|return
name|done
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|SECONDS
argument_list|)
return|;
block|}
specifier|public
name|String
name|getThreadName
parameter_list|()
block|{
return|return
name|threadName
operator|.
name|get
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

