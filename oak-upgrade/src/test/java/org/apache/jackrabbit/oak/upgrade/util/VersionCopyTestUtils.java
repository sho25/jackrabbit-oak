begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionConstants
operator|.
name|MIX_REP_VERSIONABLE_PATHS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionHistory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|JcrUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|RepositoryUpgrade
import|;
end_import

begin_class
specifier|public
class|class
name|VersionCopyTestUtils
block|{
specifier|public
specifier|static
name|String
name|createVersionableNode
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|versionablePath
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
block|{
specifier|final
name|VersionManager
name|versionManager
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
specifier|final
name|Node
name|versionable
init|=
name|JcrUtils
operator|.
name|getOrCreateUniqueByPath
argument_list|(
name|session
operator|.
name|getRootNode
argument_list|()
argument_list|,
name|versionablePath
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|versionable
operator|.
name|addMixin
argument_list|(
literal|"mix:versionable"
argument_list|)
expr_stmt|;
name|versionable
operator|.
name|setProperty
argument_list|(
literal|"version"
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
specifier|final
name|String
name|path
init|=
name|versionable
operator|.
name|getPath
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|versionNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|versionable
operator|.
name|setProperty
argument_list|(
literal|"version"
argument_list|,
literal|"1."
operator|+
name|i
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
specifier|final
name|Version
name|v
init|=
name|versionManager
operator|.
name|checkpoint
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|versionNames
operator|.
name|add
argument_list|(
name|v
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|VersionHistory
name|history
init|=
name|versionManager
operator|.
name|getVersionHistory
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|versionName
range|:
name|versionNames
control|)
block|{
name|history
operator|.
name|addVersionLabel
argument_list|(
name|versionName
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"version %s"
argument_list|,
name|versionName
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|history
operator|.
name|getPath
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isVersionable
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|session
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
operator|.
name|isNodeType
argument_list|(
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|)
return|;
block|}
specifier|public
interface|interface
name|RepositoryUpgradeSetup
block|{
name|void
name|setup
parameter_list|(
name|RepositoryUpgrade
name|upgrade
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

