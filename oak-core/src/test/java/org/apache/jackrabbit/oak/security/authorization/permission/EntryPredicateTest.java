begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|EntryPredicateTest
block|{
specifier|private
name|String
name|path
init|=
literal|"/some/path"
decl_stmt|;
specifier|private
name|String
name|parentPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|private
name|RestrictionPattern
name|pattern
init|=
name|mock
argument_list|(
name|RestrictionPattern
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|PermissionEntry
name|entry
init|=
operator|new
name|PermissionEntry
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
name|pattern
argument_list|)
decl_stmt|;
specifier|private
name|Tree
name|mockTree
parameter_list|(
annotation|@
name|NotNull
name|String
name|path
parameter_list|,
annotation|@
name|Nullable
name|Tree
name|parent
parameter_list|)
block|{
name|Tree
name|t
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|when
argument_list|(
name|t
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPredicateRepositoryLevel
parameter_list|()
block|{
name|EntryPredicate
name|pred
init|=
name|EntryPredicate
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|pred
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pattern
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPredicatePathRespectParent
parameter_list|()
block|{
name|EntryPredicate
name|pred
init|=
name|EntryPredicate
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|pred
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// pattern neither matches path nor parent path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parentPath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// pattern matches path and parent path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parentPath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// pattern only matches path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parentPath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// pattern only matches parent path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parentPath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pattern
argument_list|,
name|times
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pattern
argument_list|,
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|parentPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPredicatePathDontRespectParent
parameter_list|()
block|{
name|EntryPredicate
name|pred
init|=
name|EntryPredicate
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|pred
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// pattern neither matches path nor parent path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parentPath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// pattern matches path and parent path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parentPath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// pattern only matches path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parentPath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// pattern only matches parent path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parentPath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pattern
argument_list|,
name|times
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pattern
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|parentPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPredicateTreeRespectParent
parameter_list|()
block|{
name|Tree
name|parent
init|=
name|mockTree
argument_list|(
name|parentPath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
name|mockTree
argument_list|(
name|path
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|PropertyState
name|ps
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ps
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"property"
argument_list|)
expr_stmt|;
name|EntryPredicate
name|pred
init|=
name|EntryPredicate
operator|.
name|create
argument_list|(
name|tree
argument_list|,
name|ps
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|pred
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// pattern neither matches path nor parent path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parent
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parent
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// pattern matches path and parent path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parent
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parent
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// pattern only matches path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parent
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parent
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// pattern only matches parent path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parent
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parent
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pattern
argument_list|,
name|times
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
name|ps
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pattern
argument_list|,
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|parent
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pattern
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|parent
argument_list|,
name|ps
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPredicateTreeDontRespectParent
parameter_list|()
block|{
name|Tree
name|parent
init|=
name|mockTree
argument_list|(
name|parentPath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
name|mockTree
argument_list|(
name|path
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|PropertyState
name|ps
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ps
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"property"
argument_list|)
expr_stmt|;
name|EntryPredicate
name|pred
init|=
name|EntryPredicate
operator|.
name|create
argument_list|(
name|tree
argument_list|,
name|ps
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|pred
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// pattern neither matches path nor parent path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parent
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parent
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// pattern matches path and parent path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parent
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parent
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// pattern only matches path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parent
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parent
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// pattern only matches parent path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parent
argument_list|,
name|ps
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|parent
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pattern
argument_list|,
name|times
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
name|ps
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pattern
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|parent
argument_list|,
name|ps
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pattern
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|parent
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPredicateRootPath
parameter_list|()
block|{
name|EntryPredicate
name|pred
init|=
name|EntryPredicate
operator|.
name|create
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|pred
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// pattern doesn't match path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// pattern matches path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pattern
argument_list|,
name|times
argument_list|(
literal|6
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPredicateRootPathDontRespectParent
parameter_list|()
block|{
name|EntryPredicate
name|pred
init|=
name|EntryPredicate
operator|.
name|create
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|pred
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// pattern doesn't match path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// pattern matches path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pattern
argument_list|,
name|times
argument_list|(
literal|6
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPredicateRootTree
parameter_list|()
block|{
name|Tree
name|tree
init|=
name|mockTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|tree
operator|.
name|isRoot
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EntryPredicate
name|pred
init|=
name|EntryPredicate
operator|.
name|create
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|pred
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// pattern doesn't match path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// pattern matches path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pattern
argument_list|,
name|times
argument_list|(
literal|6
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPredicateRootTreeDontRespectParent
parameter_list|()
block|{
name|Tree
name|tree
init|=
name|mockTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|tree
operator|.
name|isRoot
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EntryPredicate
name|pred
init|=
name|EntryPredicate
operator|.
name|create
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|pred
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// pattern doesn't match path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// pattern matches path
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pred
operator|.
name|apply
argument_list|(
name|entry
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pattern
argument_list|,
name|times
argument_list|(
literal|6
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

