begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|OperationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|min
import|;
end_import

begin_class
specifier|public
class|class
name|ReverseFileReader
block|{
specifier|private
specifier|static
specifier|final
name|int
name|BUFFER_SIZE
init|=
literal|16
operator|*
literal|1024
decl_stmt|;
specifier|private
name|int
name|bufferSize
decl_stmt|;
specifier|private
specifier|final
name|CloudBlob
name|blob
decl_stmt|;
specifier|private
name|byte
index|[]
name|buffer
decl_stmt|;
specifier|private
name|int
name|bufferOffset
decl_stmt|;
specifier|private
name|int
name|fileOffset
decl_stmt|;
specifier|public
name|ReverseFileReader
parameter_list|(
name|CloudBlob
name|blob
parameter_list|)
throws|throws
name|StorageException
block|{
name|this
argument_list|(
name|blob
argument_list|,
name|BUFFER_SIZE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ReverseFileReader
parameter_list|(
name|CloudBlob
name|blob
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|StorageException
block|{
name|this
operator|.
name|blob
operator|=
name|blob
expr_stmt|;
if|if
condition|(
name|blob
operator|.
name|exists
argument_list|()
condition|)
block|{
name|this
operator|.
name|fileOffset
operator|=
operator|(
name|int
operator|)
name|blob
operator|.
name|getProperties
argument_list|()
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|fileOffset
operator|=
literal|0
expr_stmt|;
block|}
name|this
operator|.
name|bufferSize
operator|=
name|bufferSize
expr_stmt|;
block|}
specifier|private
name|void
name|readBlock
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
name|buffer
operator|=
operator|new
name|byte
index|[
name|min
argument_list|(
name|fileOffset
argument_list|,
name|bufferSize
argument_list|)
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fileOffset
operator|<
name|buffer
operator|.
name|length
condition|)
block|{
name|buffer
operator|=
operator|new
name|byte
index|[
name|fileOffset
index|]
expr_stmt|;
block|}
if|if
condition|(
name|buffer
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|fileOffset
operator|-=
name|buffer
operator|.
name|length
expr_stmt|;
try|try
block|{
name|OperationContext
name|opContext
init|=
operator|new
name|OperationContext
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userHeaders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|userHeaders
operator|.
name|put
argument_list|(
literal|"If-Match"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|opContext
operator|.
name|setUserHeaders
argument_list|(
name|userHeaders
argument_list|)
expr_stmt|;
name|blob
operator|.
name|downloadRangeToByteArray
argument_list|(
name|fileOffset
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|buffer
operator|.
name|length
argument_list|)
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|opContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|bufferOffset
operator|=
name|buffer
operator|.
name|length
expr_stmt|;
block|}
specifier|private
name|String
name|readUntilNewLine
parameter_list|()
block|{
if|if
condition|(
name|bufferOffset
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|""
return|;
block|}
name|int
name|stop
init|=
name|bufferOffset
decl_stmt|;
while|while
condition|(
operator|--
name|bufferOffset
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|buffer
index|[
name|bufferOffset
index|]
operator|==
literal|'\n'
condition|)
block|{
break|break;
block|}
block|}
comment|// bufferOffset points either the previous '\n' character or -1
return|return
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
name|bufferOffset
operator|+
literal|1
argument_list|,
name|stop
operator|-
name|bufferOffset
operator|-
literal|1
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|readLine
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|bufferOffset
operator|==
operator|-
literal|1
operator|&&
name|fileOffset
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
name|readBlock
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|readUntilNewLine
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bufferOffset
operator|>
operator|-
literal|1
condition|)
block|{
comment|// stopped on the '\n'
break|break;
block|}
if|if
condition|(
name|fileOffset
operator|==
literal|0
condition|)
block|{
comment|// reached the beginning of the file
break|break;
block|}
name|readBlock
argument_list|()
expr_stmt|;
block|}
name|Collections
operator|.
name|reverse
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|String
operator|.
name|join
argument_list|(
literal|""
argument_list|,
name|result
argument_list|)
return|;
block|}
block|}
end_class

end_unit

