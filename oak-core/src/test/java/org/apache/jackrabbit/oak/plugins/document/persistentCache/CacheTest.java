begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CacheTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/cacheTest"
argument_list|)
argument_list|)
expr_stmt|;
name|PersistentCache
name|cache
init|=
operator|new
name|PersistentCache
argument_list|(
literal|"target/cacheTest,size=1,-compress"
argument_list|)
decl_stmt|;
try|try
block|{
name|MemoryBlobStore
name|mem
init|=
operator|new
name|MemoryBlobStore
argument_list|()
decl_stmt|;
name|mem
operator|.
name|setBlockSizeMin
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|BlobStore
name|b
init|=
name|cache
operator|.
name|wrapBlobStore
argument_list|(
name|mem
argument_list|)
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|b
operator|.
name|writeBlob
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|b
operator|.
name|readBlob
argument_list|(
name|id
argument_list|,
literal|0
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|interrupt
parameter_list|()
throws|throws
name|Exception
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/cacheTest"
argument_list|)
argument_list|)
expr_stmt|;
name|PersistentCache
name|cache
init|=
operator|new
name|PersistentCache
argument_list|(
literal|"target/cacheTest,size=1,-compress"
argument_list|)
decl_stmt|;
try|try
block|{
name|CacheMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m1
init|=
name|cache
operator|.
name|openMap
argument_list|(
literal|0
argument_list|,
literal|"m1"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CacheMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m2
init|=
name|cache
operator|.
name|openMap
argument_list|(
literal|0
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// the cache file was opened once so far
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// we store 20 mb of data, to ensure not all data is kept in memory
name|String
name|largeString
init|=
operator|new
name|String
argument_list|(
operator|new
name|char
index|[
literal|1024
operator|*
literal|1024
index|]
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|m1
operator|.
name|put
argument_list|(
literal|"x"
operator|+
name|i
argument_list|,
name|largeString
argument_list|)
expr_stmt|;
name|m2
operator|.
name|put
argument_list|(
literal|"y"
operator|+
name|i
argument_list|,
name|largeString
argument_list|)
expr_stmt|;
block|}
comment|// interrupt the thread, which will cause the FileChannel
comment|// to be closed in the next read operation
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// this will force at least one read operation,
comment|// which should re-open the maps
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|m1
operator|.
name|get
argument_list|(
literal|"x"
operator|+
name|i
argument_list|)
expr_stmt|;
name|m2
operator|.
name|get
argument_list|(
literal|"y"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// re-opening will clear the interrupt flag
name|assertFalse
argument_list|(
name|Thread
operator|.
name|interrupted
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

