begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|metric
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|JmxReporter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|ObjectNameFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|RatioGauge
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|stats
operator|.
name|RepositoryStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|stats
operator|.
name|RepositoryStatistics
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|JmxUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|CounterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|MeterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|SimpleStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Stats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|TimerStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|stats
operator|.
name|RepositoryStatisticsImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|MetricStatisticsProvider
implements|implements
name|StatisticsProvider
implements|,
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MetricStatisticsProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JMX_TYPE_METRICS
init|=
literal|"Metrics"
decl_stmt|;
comment|/**      * Types for which Metrics based stats would not be collected      * and only default stats would be collected      */
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|NOOP_METRIC_TYPES
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Type
operator|.
name|SESSION_READ_COUNTER
operator|.
name|name
argument_list|()
argument_list|,
name|Type
operator|.
name|SESSION_READ_DURATION
operator|.
name|name
argument_list|()
argument_list|,
name|Type
operator|.
name|SESSION_WRITE_DURATION
operator|.
name|name
argument_list|()
argument_list|,
name|Type
operator|.
name|QUERY_COUNT
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Stats
argument_list|>
name|statsRegistry
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|MetricRegistry
name|registry
decl_stmt|;
specifier|private
specifier|final
name|JmxReporter
name|reporter
decl_stmt|;
specifier|private
specifier|final
name|RepositoryStatisticsImpl
name|repoStats
decl_stmt|;
specifier|private
specifier|final
name|Clock
operator|.
name|Fast
name|clock
decl_stmt|;
specifier|private
specifier|final
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Clock
name|metricsClock
decl_stmt|;
specifier|public
name|MetricStatisticsProvider
parameter_list|(
name|MBeanServer
name|server
parameter_list|,
name|ScheduledExecutorService
name|executor
parameter_list|)
block|{
name|clock
operator|=
operator|new
name|Clock
operator|.
name|Fast
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|metricsClock
operator|=
operator|new
name|OakMetricClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|registry
operator|=
operator|new
name|MetricRegistry
argument_list|()
expr_stmt|;
name|repoStats
operator|=
operator|new
name|RepositoryStatisticsImpl
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|reporter
operator|=
name|JmxReporter
operator|.
name|forRegistry
argument_list|(
name|registry
argument_list|)
operator|.
name|inDomain
argument_list|(
name|WhiteboardUtils
operator|.
name|JMX_OAK_DOMAIN
argument_list|)
operator|.
name|registerWith
argument_list|(
name|server
argument_list|)
operator|.
name|createsObjectNamesWith
argument_list|(
operator|new
name|OakNameFactory
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|reporter
operator|.
name|start
argument_list|()
expr_stmt|;
name|registerAverages
argument_list|()
expr_stmt|;
block|}
specifier|static
name|String
name|typeToName
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|name
argument_list|()
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|clock
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|reporter
operator|!=
literal|null
condition|)
block|{
name|reporter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RepositoryStatistics
name|getStats
parameter_list|()
block|{
return|return
name|repoStats
return|;
block|}
annotation|@
name|Override
specifier|public
name|MeterStats
name|getMeter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getStats
argument_list|(
name|name
argument_list|,
name|StatsBuilder
operator|.
name|METERS
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CounterStats
name|getCounterStats
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getStats
argument_list|(
name|name
argument_list|,
name|StatsBuilder
operator|.
name|COUNTERS
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TimerStats
name|getTimer
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getStats
argument_list|(
name|name
argument_list|,
name|StatsBuilder
operator|.
name|TIMERS
argument_list|)
return|;
block|}
specifier|public
name|MetricRegistry
name|getRegistry
parameter_list|()
block|{
return|return
name|registry
return|;
block|}
name|RepositoryStatisticsImpl
name|getRepoStats
parameter_list|()
block|{
return|return
name|repoStats
return|;
block|}
specifier|private
specifier|synchronized
parameter_list|<
name|T
extends|extends
name|Stats
parameter_list|>
name|T
name|getStats
parameter_list|(
name|String
name|type
parameter_list|,
name|StatsBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|String
name|name
init|=
name|type
decl_stmt|;
name|Type
name|enumType
init|=
name|Type
operator|.
name|getType
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|Stats
name|stats
init|=
name|statsRegistry
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|==
literal|null
condition|)
block|{
name|SimpleStats
name|delegate
decl_stmt|;
if|if
condition|(
name|enumType
operator|!=
literal|null
condition|)
block|{
name|delegate
operator|=
operator|new
name|SimpleStats
argument_list|(
name|repoStats
operator|.
name|getCounter
argument_list|(
name|enumType
argument_list|)
argument_list|)
expr_stmt|;
name|name
operator|=
name|typeToName
argument_list|(
name|enumType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|resetValueEachSecond
init|=
name|builder
operator|!=
name|StatsBuilder
operator|.
name|COUNTERS
decl_stmt|;
name|delegate
operator|=
operator|new
name|SimpleStats
argument_list|(
name|repoStats
operator|.
name|getCounter
argument_list|(
name|type
argument_list|,
name|resetValueEachSecond
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|NOOP_METRIC_TYPES
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|stats
operator|=
name|delegate
expr_stmt|;
block|}
else|else
block|{
name|stats
operator|=
name|builder
operator|.
name|newComposite
argument_list|(
name|delegate
argument_list|,
name|this
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|statsRegistry
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|stats
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|builder
operator|.
name|isInstance
argument_list|(
name|stats
argument_list|)
condition|)
block|{
comment|//noinspection unchecked
return|return
operator|(
name|T
operator|)
name|stats
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
specifier|private
name|void
name|registerAverages
parameter_list|()
block|{
name|registry
operator|.
name|register
argument_list|(
name|typeToName
argument_list|(
name|Type
operator|.
name|OBSERVATION_EVENT_AVERAGE
argument_list|)
argument_list|,
operator|new
name|AvgGauge
argument_list|(
name|compStats
argument_list|(
name|Type
operator|.
name|OBSERVATION_EVENT_COUNTER
argument_list|,
name|StatsBuilder
operator|.
name|METERS
argument_list|)
operator|.
name|getMeter
argument_list|()
argument_list|,
name|compStats
argument_list|(
name|Type
operator|.
name|OBSERVATION_EVENT_DURATION
argument_list|,
name|StatsBuilder
operator|.
name|TIMERS
argument_list|)
operator|.
name|getTimer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CompositeStats
name|compStats
parameter_list|(
name|Type
name|type
parameter_list|,
name|StatsBuilder
name|builder
parameter_list|)
block|{
name|Stats
name|stats
init|=
name|getStats
argument_list|(
name|typeToName
argument_list|(
name|type
argument_list|)
argument_list|,
name|builder
argument_list|)
decl_stmt|;
return|return
operator|(
name|CompositeStats
operator|)
name|stats
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
interface|interface
name|StatsBuilder
parameter_list|<
name|T
extends|extends
name|Stats
parameter_list|>
block|{
name|StatsBuilder
argument_list|<
name|CounterStats
argument_list|>
name|COUNTERS
init|=
operator|new
name|StatsBuilder
argument_list|<
name|CounterStats
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CompositeStats
name|newComposite
parameter_list|(
name|SimpleStats
name|delegate
parameter_list|,
name|MetricStatisticsProvider
name|provider
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|CompositeStats
argument_list|(
name|delegate
argument_list|,
name|provider
operator|.
name|registry
operator|.
name|counter
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInstance
parameter_list|(
name|Stats
name|metric
parameter_list|)
block|{
return|return
name|CounterStats
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|metric
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|StatsBuilder
argument_list|<
name|MeterStats
argument_list|>
name|METERS
init|=
operator|new
name|StatsBuilder
argument_list|<
name|MeterStats
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CompositeStats
name|newComposite
parameter_list|(
name|SimpleStats
name|delegate
parameter_list|,
name|MetricStatisticsProvider
name|provider
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Meter
name|meter
init|=
operator|new
name|Meter
argument_list|(
name|provider
operator|.
name|metricsClock
argument_list|)
decl_stmt|;
name|provider
operator|.
name|registry
operator|.
name|register
argument_list|(
name|name
argument_list|,
name|meter
argument_list|)
expr_stmt|;
return|return
operator|new
name|CompositeStats
argument_list|(
name|delegate
argument_list|,
name|meter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInstance
parameter_list|(
name|Stats
name|metric
parameter_list|)
block|{
return|return
name|MeterStats
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|metric
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|StatsBuilder
argument_list|<
name|TimerStats
argument_list|>
name|TIMERS
init|=
operator|new
name|StatsBuilder
argument_list|<
name|TimerStats
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CompositeStats
name|newComposite
parameter_list|(
name|SimpleStats
name|delegate
parameter_list|,
name|MetricStatisticsProvider
name|provider
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|CompositeStats
argument_list|(
name|delegate
argument_list|,
name|provider
operator|.
name|registry
operator|.
name|timer
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInstance
parameter_list|(
name|Stats
name|metric
parameter_list|)
block|{
return|return
name|TimerStats
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|metric
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|CompositeStats
name|newComposite
parameter_list|(
name|SimpleStats
name|delegate
parameter_list|,
name|MetricStatisticsProvider
name|provider
parameter_list|,
name|String
name|name
parameter_list|)
function_decl|;
name|boolean
name|isInstance
parameter_list|(
name|Stats
name|stats
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|AvgGauge
extends|extends
name|RatioGauge
block|{
specifier|private
specifier|final
name|Meter
name|meter
decl_stmt|;
specifier|private
specifier|final
name|Timer
name|timer
decl_stmt|;
specifier|private
name|AvgGauge
parameter_list|(
name|Meter
name|meter
parameter_list|,
name|Timer
name|timer
parameter_list|)
block|{
name|this
operator|.
name|meter
operator|=
name|meter
expr_stmt|;
name|this
operator|.
name|timer
operator|=
name|timer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Ratio
name|getRatio
parameter_list|()
block|{
comment|//TODO Should we use getMeanRate
return|return
name|Ratio
operator|.
name|of
argument_list|(
name|meter
operator|.
name|getFifteenMinuteRate
argument_list|()
argument_list|,
name|timer
operator|.
name|getFifteenMinuteRate
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|OakNameFactory
implements|implements
name|ObjectNameFactory
block|{
annotation|@
name|Override
specifier|public
name|ObjectName
name|createName
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|domain
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|table
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|JMX_TYPE_METRICS
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|JmxUtil
operator|.
name|quoteValueIfRequired
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
return|return
operator|new
name|ObjectName
argument_list|(
name|domain
argument_list|,
name|table
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedObjectNameException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to register {} {}"
argument_list|,
name|type
argument_list|,
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|OakMetricClock
extends|extends
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Clock
block|{
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
specifier|public
name|OakMetricClock
parameter_list|(
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTick
parameter_list|()
block|{
return|return
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|convert
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

