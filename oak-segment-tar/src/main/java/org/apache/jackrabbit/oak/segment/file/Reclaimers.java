begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|GCGeneration
import|;
end_import

begin_class
class|class
name|Reclaimers
block|{
specifier|private
name|Reclaimers
parameter_list|()
block|{
comment|// Prevent instantiation.
block|}
specifier|static
name|Predicate
argument_list|<
name|GCGeneration
argument_list|>
name|newOldReclaimer
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|GCGeneration
name|reference
parameter_list|,
name|int
name|retainedGenerations
parameter_list|)
block|{
return|return
operator|new
name|Predicate
argument_list|<
name|GCGeneration
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|GCGeneration
name|generation
parameter_list|)
block|{
name|int
name|deltaFull
init|=
name|reference
operator|.
name|compareFull
argument_list|(
name|generation
argument_list|)
decl_stmt|;
if|if
condition|(
name|deltaFull
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|generation
operator|.
name|getTail
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|deltaTail
init|=
name|reference
operator|.
name|compareTail
argument_list|(
name|generation
argument_list|)
decl_stmt|;
if|if
condition|(
name|deltaTail
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|deltaTail
operator|>=
name|retainedGenerations
condition|)
block|{
return|return
operator|!
name|generation
operator|.
name|isTail
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
if|if
condition|(
name|deltaFull
operator|>=
name|retainedGenerations
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|generation
operator|.
name|getTail
argument_list|()
operator|!=
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|// FIXME OAK-3349 align string representation with above predicate
return|return
literal|"("
operator|+
name|reference
operator|+
literal|" - generation>= "
operator|+
name|retainedGenerations
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
specifier|static
name|Predicate
argument_list|<
name|GCGeneration
argument_list|>
name|newExactReclaimer
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|GCGeneration
name|failedGeneration
parameter_list|)
block|{
return|return
operator|new
name|Predicate
argument_list|<
name|GCGeneration
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|GCGeneration
name|generation
parameter_list|)
block|{
return|return
name|generation
operator|.
name|equals
argument_list|(
name|failedGeneration
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"(generation=="
operator|+
name|failedGeneration
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

