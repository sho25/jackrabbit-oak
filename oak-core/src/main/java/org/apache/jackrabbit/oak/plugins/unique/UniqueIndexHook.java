begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|unique
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ValidatingHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Commit hook for validating uniqueness constraints and maintaining  * indices of unique properties.  *<p>  * TODO: verify if enforcing uniqueness constraints is really  * feasible in oak-core taking potential clustering into account  *<p>  * TODO: check if constraint validation needs to take property  * definition into account e.g. a jcr:uuid property that isn't  * defined by mix:referenceable may not necessarily be subject  * to the validation.  */
end_comment

begin_class
specifier|public
class|class
name|UniqueIndexHook
implements|implements
name|CommitHook
block|{
annotation|@
name|Override
specifier|public
name|NodeState
name|processCommit
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
init|=
name|after
operator|.
name|getBuilder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|system
init|=
name|builder
operator|.
name|getChildBuilder
argument_list|(
literal|"jcr:system"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|unique
init|=
name|system
operator|.
name|getChildBuilder
argument_list|(
literal|":unique"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|UniqueIndexValidator
argument_list|>
name|validators
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|NodeState
name|state
init|=
name|unique
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|state
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|validators
operator|.
name|add
argument_list|(
operator|new
name|UniqueIndexValidator
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|validators
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|after
return|;
comment|// shortcut
block|}
operator|new
name|ValidatingHook
argument_list|(
name|validators
argument_list|)
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
for|for
control|(
name|UniqueIndexValidator
name|validator
range|:
name|validators
control|)
block|{
name|validator
operator|.
name|apply
argument_list|(
name|unique
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|getNodeState
argument_list|()
return|;
block|}
block|}
end_class

end_unit

