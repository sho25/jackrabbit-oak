begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentWriterBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_class
specifier|public
class|class
name|NodeRecordTest
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|root
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|private
name|FileStore
name|newFileStore
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
argument_list|(
name|root
operator|.
name|getRoot
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|unreferencedNodeRecordShouldBeRoot
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|FileStore
name|store
init|=
name|newFileStore
argument_list|()
init|)
block|{
name|SegmentWriter
name|writer
init|=
name|SegmentWriterBuilder
operator|.
name|segmentWriterBuilder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|build
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|SegmentNodeState
name|state
init|=
name|writer
operator|.
name|writeNode
argument_list|(
name|EmptyNodeState
operator|.
name|EMPTY_NODE
argument_list|)
decl_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|isRootRecord
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"OAK-4560"
argument_list|)
specifier|public
name|void
name|stableIdShouldPersistAcrossGenerations
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|FileStore
name|store
init|=
name|newFileStore
argument_list|()
init|)
block|{
name|SegmentWriter
name|writer
decl_stmt|;
name|writer
operator|=
name|SegmentWriterBuilder
operator|.
name|segmentWriterBuilder
argument_list|(
literal|"1"
argument_list|)
operator|.
name|withGeneration
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|one
init|=
name|writer
operator|.
name|writeNode
argument_list|(
name|EmptyNodeState
operator|.
name|EMPTY_NODE
argument_list|)
decl_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|=
name|SegmentWriterBuilder
operator|.
name|segmentWriterBuilder
argument_list|(
literal|"2"
argument_list|)
operator|.
name|withGeneration
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|two
init|=
name|writer
operator|.
name|writeNode
argument_list|(
name|one
argument_list|)
decl_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|=
name|SegmentWriterBuilder
operator|.
name|segmentWriterBuilder
argument_list|(
literal|"3"
argument_list|)
operator|.
name|withGeneration
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|three
init|=
name|writer
operator|.
name|writeNode
argument_list|(
name|two
argument_list|)
decl_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|three
operator|.
name|getStableIdBytes
argument_list|()
argument_list|,
name|two
operator|.
name|getStableIdBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|two
operator|.
name|getStableIdBytes
argument_list|()
argument_list|,
name|one
operator|.
name|getStableIdBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isRootRecord
parameter_list|(
name|SegmentNodeState
name|sns
parameter_list|)
block|{
name|Segment
name|segment
init|=
name|sns
operator|.
name|getRecordId
argument_list|()
operator|.
name|getSegment
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|segment
operator|.
name|getRootCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|segment
operator|.
name|getRootType
argument_list|(
name|i
argument_list|)
operator|!=
name|RecordType
operator|.
name|NODE
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|segment
operator|.
name|getRootOffset
argument_list|(
name|i
argument_list|)
operator|!=
name|sns
operator|.
name|getRecordId
argument_list|()
operator|.
name|getOffset
argument_list|()
condition|)
block|{
continue|continue;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

