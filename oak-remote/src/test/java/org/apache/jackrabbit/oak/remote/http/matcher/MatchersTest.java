begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|matcher
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|matcher
operator|.
name|Matchers
operator|.
name|matchesAll
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|matcher
operator|.
name|Matchers
operator|.
name|matchesMethod
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|matcher
operator|.
name|Matchers
operator|.
name|matchesPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|matcher
operator|.
name|Matchers
operator|.
name|matchesRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|MatchersTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testCreateMethodMatcher
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|matchesMethod
argument_list|(
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateMethodMatcherWithNullMethod
parameter_list|()
block|{
name|matchesMethod
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreatePathMatcher
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|matchesPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreatePathMatcherWithNullPattern
parameter_list|()
block|{
name|matchesPath
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreatePathMatcherWithInvalidPattern
parameter_list|()
block|{
name|matchesPath
argument_list|(
literal|"/test("
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateAllMatcher
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|matchesAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateAllMatchersWithNullMatcher
parameter_list|()
block|{
name|matchesAll
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateRequestMatcher
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|matchesRequest
argument_list|(
literal|"GET"
argument_list|,
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateRequestMatcherWithNullMethod
parameter_list|()
block|{
name|matchesRequest
argument_list|(
literal|null
argument_list|,
literal|"/test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateRequestMatcherWithNullPattern
parameter_list|()
block|{
name|matchesRequest
argument_list|(
literal|"GET"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateRequestMatcherWithInvalidPattern
parameter_list|()
block|{
name|matchesRequest
argument_list|(
literal|"GET"
argument_list|,
literal|"/test("
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

