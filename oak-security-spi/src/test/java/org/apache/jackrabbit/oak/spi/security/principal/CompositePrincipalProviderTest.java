begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|GroupPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|ItemBasedPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|CompositePrincipalProviderTest
block|{
specifier|private
specifier|final
name|TestPrincipalProvider
name|pp1
init|=
operator|new
name|TestPrincipalProvider
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|TestPrincipalProvider
name|pp2
init|=
operator|new
name|TestPrincipalProvider
argument_list|(
literal|"p1"
argument_list|,
literal|"p2"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|PrincipalProvider
name|cpp
init|=
name|CompositePrincipalProvider
operator|.
name|of
argument_list|(
name|ImmutableList
operator|.
expr|<
name|PrincipalProvider
operator|>
name|of
argument_list|(
name|pp1
argument_list|,
name|pp2
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|Iterable
argument_list|<
name|Principal
argument_list|>
name|testPrincipals
parameter_list|()
block|{
return|return
name|Iterables
operator|.
name|concat
argument_list|(
name|pp1
operator|.
name|getTestPrincipals
argument_list|()
argument_list|,
name|pp2
operator|.
name|getTestPrincipals
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|assertIterator
parameter_list|(
annotation|@
name|NotNull
name|Iterable
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|expected
parameter_list|,
annotation|@
name|NotNull
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|result
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|expected
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOfEmptyList
parameter_list|()
block|{
name|assertSame
argument_list|(
name|EmptyPrincipalProvider
operator|.
name|INSTANCE
argument_list|,
name|CompositePrincipalProvider
operator|.
name|of
argument_list|(
name|ImmutableList
operator|.
expr|<
name|PrincipalProvider
operator|>
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOfSingletonList
parameter_list|()
block|{
name|PrincipalProvider
name|pp
init|=
operator|new
name|TestPrincipalProvider
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|pp
argument_list|,
name|CompositePrincipalProvider
operator|.
name|of
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|pp
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOfList
parameter_list|()
block|{
name|assertNotSame
argument_list|(
name|pp1
argument_list|,
name|cpp
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|pp2
argument_list|,
name|cpp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cpp
operator|instanceof
name|CompositePrincipalProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPrincipalUnknown
parameter_list|()
block|{
name|assertNull
argument_list|(
name|cpp
operator|.
name|getPrincipal
argument_list|(
name|TestPrincipalProvider
operator|.
name|UNKNOWN
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPrincipal
parameter_list|()
block|{
for|for
control|(
name|Principal
name|principal
range|:
name|testPrincipals
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|principal
argument_list|,
name|cpp
operator|.
name|getPrincipal
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetItemBasedPrincipalDefault
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Principal
name|p
range|:
name|testPrincipals
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|ItemBasedPrincipal
condition|)
block|{
name|assertNull
argument_list|(
name|cpp
operator|.
name|getItemBasedPrincipal
argument_list|(
operator|(
operator|(
name|ItemBasedPrincipal
operator|)
name|p
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetItemBasedPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|ItemBasedPrincipal
name|p
init|=
name|mock
argument_list|(
name|ItemBasedPrincipal
operator|.
name|class
argument_list|)
decl_stmt|;
name|PrincipalProvider
name|pp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PrincipalProvider
operator|.
name|class
argument_list|)
operator|.
name|getItemBasedPrincipal
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|p
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|p
argument_list|,
name|CompositePrincipalProvider
operator|.
name|of
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|pp
argument_list|,
name|pp2
argument_list|)
argument_list|)
operator|.
name|getItemBasedPrincipal
argument_list|(
literal|"/any/path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getGroupMembership
parameter_list|()
block|{
for|for
control|(
name|Principal
name|principal
range|:
name|testPrincipals
argument_list|()
control|)
block|{
name|boolean
name|atleastEveryone
init|=
name|cpp
operator|.
name|getMembershipPrincipals
argument_list|(
name|principal
argument_list|)
operator|.
name|contains
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"All principals (except everyone) must be member of the everyone group. Violation: "
operator|+
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|atleastEveryone
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|getGroupMembershipUnknown
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|cpp
operator|.
name|getMembershipPrincipals
argument_list|(
name|TestPrincipalProvider
operator|.
name|UNKNOWN
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalsByUnknownId
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|cpp
operator|.
name|getPrincipals
argument_list|(
name|TestPrincipalProvider
operator|.
name|getIDFromPrincipal
argument_list|(
name|TestPrincipalProvider
operator|.
name|UNKNOWN
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|findPrincipalsUnknown
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|cpp
operator|.
name|findPrincipals
argument_list|(
name|TestPrincipalProvider
operator|.
name|UNKNOWN
operator|.
name|getName
argument_list|()
argument_list|,
name|PrincipalManager
operator|.
name|SEARCH_TYPE_ALL
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cpp
operator|.
name|findPrincipals
argument_list|(
name|TestPrincipalProvider
operator|.
name|UNKNOWN
operator|.
name|getName
argument_list|()
argument_list|,
name|PrincipalManager
operator|.
name|SEARCH_TYPE_NOT_GROUP
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cpp
operator|.
name|findPrincipals
argument_list|(
name|TestPrincipalProvider
operator|.
name|UNKNOWN
operator|.
name|getName
argument_list|()
argument_list|,
name|PrincipalManager
operator|.
name|SEARCH_TYPE_GROUP
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|findPrincipalsByTypeGroup
parameter_list|()
block|{
name|Iterable
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|expected
init|=
name|Iterables
operator|.
name|concat
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|,
name|Iterables
operator|.
name|filter
argument_list|(
name|testPrincipals
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Principal
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Principal
name|input
parameter_list|)
block|{
return|return
name|input
operator|instanceof
name|GroupPrincipal
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|result
init|=
name|cpp
operator|.
name|findPrincipals
argument_list|(
name|PrincipalManager
operator|.
name|SEARCH_TYPE_GROUP
argument_list|)
decl_stmt|;
name|assertIterator
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|findPrincipalsByTypeNotGroup
parameter_list|()
block|{
name|Iterable
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|expected
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|testPrincipals
argument_list|()
argument_list|,
name|input
lambda|->
operator|!
operator|(
name|input
operator|instanceof
name|GroupPrincipal
operator|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|result
init|=
name|cpp
operator|.
name|findPrincipals
argument_list|(
name|PrincipalManager
operator|.
name|SEARCH_TYPE_NOT_GROUP
argument_list|)
decl_stmt|;
name|assertIterator
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|findPrincipalsByTypeAll
parameter_list|()
block|{
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|result
init|=
name|cpp
operator|.
name|findPrincipals
argument_list|(
name|PrincipalManager
operator|.
name|SEARCH_TYPE_ALL
argument_list|)
decl_stmt|;
name|assertIterator
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|,
name|testPrincipals
argument_list|()
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that the default implementation of range based      * {@code findPrincipals} methods of PrincipalProvider work properly. See      * OAK-7994      */
annotation|@
name|Test
specifier|public
name|void
name|testRangeDefault
parameter_list|()
block|{
name|List
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|pps
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|"p0"
argument_list|)
argument_list|,
operator|new
name|PrincipalImpl
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
operator|new
name|PrincipalImpl
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
decl_stmt|;
name|PrincipalProvider
name|pp
init|=
operator|new
name|PrincipalProvider
argument_list|()
block|{
annotation|@
name|Override
annotation|@
name|NotNull
specifier|public
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|getPrincipals
parameter_list|(
annotation|@
name|NotNull
name|String
name|userID
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
specifier|public
name|Principal
name|getPrincipal
parameter_list|(
annotation|@
name|NotNull
name|String
name|principalName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
annotation|@
name|NotNull
specifier|public
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|findPrincipals
parameter_list|(
name|int
name|searchType
parameter_list|)
block|{
return|return
name|pps
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|NotNull
specifier|public
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|findPrincipals
parameter_list|(
annotation|@
name|Nullable
name|String
name|nameHint
parameter_list|,
name|int
name|searchType
parameter_list|)
block|{
return|return
name|pps
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|getNames
argument_list|(
name|pps
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|offset
init|=
literal|0
init|;
name|offset
operator|<
name|expected
operator|.
name|size
argument_list|()
operator|+
literal|1
condition|;
name|offset
operator|++
control|)
block|{
for|for
control|(
name|int
name|limit
init|=
operator|-
literal|1
init|;
name|limit
operator|<
name|expected
operator|.
name|size
argument_list|()
operator|+
literal|2
condition|;
name|limit
operator|++
control|)
block|{
name|int
name|to
init|=
name|expected
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|limit
operator|>=
literal|0
condition|)
block|{
name|to
operator|=
name|Math
operator|.
name|min
argument_list|(
name|offset
operator|+
name|limit
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|sub
init|=
name|expected
operator|.
name|subList
argument_list|(
name|offset
argument_list|,
name|to
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|i0
init|=
name|pp
operator|.
name|findPrincipals
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
name|PrincipalManager
operator|.
name|SEARCH_TYPE_ALL
argument_list|,
name|offset
argument_list|,
name|limit
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sub
argument_list|,
name|getNames
argument_list|(
name|i0
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|i1
init|=
name|pp
operator|.
name|findPrincipals
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|,
name|PrincipalManager
operator|.
name|SEARCH_TYPE_ALL
argument_list|,
name|offset
argument_list|,
name|limit
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sub
argument_list|,
name|getNames
argument_list|(
name|i1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getNames
parameter_list|(
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|i
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|l
operator|.
name|add
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindPrincipalsRandom
parameter_list|()
block|{
name|long
name|seed
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|bound
init|=
literal|10
decl_stmt|;
name|int
name|inputSize
init|=
literal|3
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|Comparator
argument_list|<
name|Principal
argument_list|>
name|comparator
init|=
name|Comparator
operator|.
name|comparing
argument_list|(
name|Principal
operator|::
name|getName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Iterator
argument_list|<
name|Principal
argument_list|>
argument_list|>
name|input
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputSize
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|Principal
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|bound
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|size
condition|;
name|s
operator|++
control|)
block|{
name|int
name|v
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|bound
argument_list|)
decl_stmt|;
name|Principal
name|p
init|=
operator|new
name|PrincipalImpl
argument_list|(
literal|"p"
operator|+
name|v
argument_list|)
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|l
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|input
operator|.
name|add
argument_list|(
name|l
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Principal
name|pb
init|=
operator|new
name|PrincipalImpl
argument_list|(
literal|"p"
operator|+
name|bound
argument_list|)
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|pb
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|input
operator|.
name|add
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|pb
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|input
operator|.
name|add
argument_list|(
name|Collections
operator|.
expr|<
name|Principal
operator|>
name|emptyIterator
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PrincipalProvider
argument_list|>
name|in
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Principal
argument_list|>
name|i
range|:
name|input
control|)
block|{
name|PrincipalProvider
name|pp
init|=
name|mock
argument_list|(
name|PrincipalProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|pp
operator|.
name|findPrincipals
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Iterator
argument_list|<
name|Principal
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Principal
argument_list|>
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|i
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|in
operator|.
name|add
argument_list|(
name|pp
argument_list|)
expr_stmt|;
block|}
name|PrincipalProvider
name|cpp
init|=
name|CompositePrincipalProvider
operator|.
name|of
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|out
init|=
name|getNames
argument_list|(
name|cpp
operator|.
name|findPrincipals
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

