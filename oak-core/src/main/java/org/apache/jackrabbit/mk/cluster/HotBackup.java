begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|fast
operator|.
name|Jsop
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|fast
operator|.
name|JsopArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|fast
operator|.
name|JsopObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|PathUtils
import|;
end_import

begin_comment
comment|/**  * This class connects two<code>MicroKernel</code> instances, where one  * instance will periodically commit the changes made to the other.  *   * TODO do a full sync on first call  * TODO add periodic background check  */
end_comment

begin_class
specifier|public
class|class
name|HotBackup
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PATH_PROPERTY_LASTREV
init|=
literal|"/:lastrev"
decl_stmt|;
specifier|private
specifier|final
name|MicroKernel
name|source
decl_stmt|;
specifier|private
specifier|final
name|MicroKernel
name|target
decl_stmt|;
specifier|private
name|String
name|lastRev
decl_stmt|;
comment|/**      * Create a new instance of this class.      *       * @param source source microkernel where changes are read      * @param target target microkernel where changes are committed      */
specifier|public
name|HotBackup
parameter_list|(
name|MicroKernel
name|source
parameter_list|,
name|MicroKernel
name|target
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
name|lastRev
operator|=
name|getProperty
argument_list|(
name|target
argument_list|,
name|PATH_PROPERTY_LASTREV
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastRev
operator|==
literal|null
condition|)
block|{
name|lastRev
operator|=
name|source
operator|.
name|getHeadRevision
argument_list|()
expr_stmt|;
comment|// TODO never sync'ed, so do a full copy
name|setProperty
argument_list|(
name|target
argument_list|,
name|PATH_PROPERTY_LASTREV
argument_list|,
name|lastRev
argument_list|)
expr_stmt|;
block|}
name|sync
argument_list|()
expr_stmt|;
block|}
comment|/**      * Read all changes from the source microkernel and commit them to      * the target microkernel.      */
specifier|public
name|void
name|sync
parameter_list|()
block|{
name|String
name|headRev
init|=
name|source
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastRev
operator|!=
name|headRev
condition|)
block|{
name|JsopArray
name|journal
init|=
operator|(
name|JsopArray
operator|)
name|Jsop
operator|.
name|parse
argument_list|(
name|source
operator|.
name|getJournal
argument_list|(
name|lastRev
argument_list|,
name|headRev
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|journal
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JsopObject
name|record
init|=
operator|(
name|JsopObject
operator|)
name|journal
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|diff
init|=
operator|(
name|String
operator|)
name|record
operator|.
name|get
argument_list|(
literal|"changes"
argument_list|)
decl_stmt|;
name|String
name|message
init|=
operator|(
name|String
operator|)
name|record
operator|.
name|get
argument_list|(
literal|"msg"
argument_list|)
decl_stmt|;
name|target
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
name|diff
argument_list|,
name|target
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|lastRev
operator|=
name|headRev
expr_stmt|;
name|setProperty
argument_list|(
name|target
argument_list|,
name|PATH_PROPERTY_LASTREV
argument_list|,
name|lastRev
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getProperty
parameter_list|(
name|MicroKernel
name|mk
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|String
name|parent
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// todo use filter parameter for specifying the property?
name|JsopObject
name|props
init|=
operator|(
name|JsopObject
operator|)
name|Jsop
operator|.
name|parse
argument_list|(
name|mk
operator|.
name|getNodes
argument_list|(
name|parent
argument_list|,
name|mk
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|setProperty
parameter_list|(
name|MicroKernel
name|mk
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|String
name|parent
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|String
name|diff
init|=
operator|new
name|JsopBuilder
argument_list|()
operator|.
name|tag
argument_list|(
literal|'-'
argument_list|)
operator|.
name|key
argument_list|(
name|name
argument_list|)
operator|.
name|value
argument_list|(
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
name|parent
argument_list|,
name|diff
argument_list|,
name|mk
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|diff
init|=
operator|new
name|JsopBuilder
argument_list|()
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
name|name
argument_list|)
operator|.
name|value
argument_list|(
name|value
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
name|parent
argument_list|,
name|diff
argument_list|,
name|mk
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

