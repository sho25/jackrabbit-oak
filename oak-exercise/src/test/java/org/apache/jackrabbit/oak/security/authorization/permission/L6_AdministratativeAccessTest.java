begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Authorization (Permission Evaluation)  * =============================================================================  *  * Title: Administrative Permissions  * -----------------------------------------------------------------------------  *  * Goal:  * Learn how the default implementation handles administrative access and makes  * sure administrative session always have full access to the repository and  * cannot be locked out.  *  * Exercises:  *  * - {@link #testAdmininistrativePermissions()}  *   Use this test to walk through both read and write access with an administrative  *   session.  *  *   Question: Can you identify where there administrative permissions are being evaluated?  *   Question: Can you list the differences compared to regular permission evaluation?  *   Question: Can you explain, where the different handling is started and what are the criteria?  *  *  * Additional Exercises:  * -----------------------------------------------------------------------------  *  * - {@link #testAdministrativeConfiguration()}  *   For this test you have to modify the default configuration such that the  *   test principal is treated as administrative principal upon evaluation.  *   Make sure the test passes and verify the expected result.  *  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|L6_AdministratativeAccessTest
extends|extends
name|AbstractSecurityTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testAdmininistrativePermissions
parameter_list|()
throws|throws
name|AccessDeniedException
throws|,
name|CommitFailedException
block|{
comment|// EXERCISE walk through the read access
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
comment|// EXERCISE walk through the add + remove
name|NodeUtil
name|child
init|=
operator|new
name|NodeUtil
argument_list|(
name|rootTree
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|child
operator|.
name|getTree
argument_list|()
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ConfigurationParameters
name|getSecurityConfigParameters
parameter_list|()
block|{
comment|// EXERCISE : change the configuration to make the test principal being treated as 'administrative' principal
return|return
name|super
operator|.
name|getSecurityConfigParameters
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAdministrativeConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
comment|// EXERCISE once you have defined the right permission-eval configuration options
comment|// EXERCISE the test principal should be treated as 'administrative' principal and the test should pass.
name|ContentSession
name|testSession
init|=
name|createTestSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Root
name|testRoot
init|=
name|testSession
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|rootTree
init|=
name|testRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
comment|// EXERCISE walk through the add + remove
name|NodeUtil
name|child
init|=
operator|new
name|NodeUtil
argument_list|(
name|rootTree
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|child
operator|.
name|setString
argument_list|(
literal|"prop"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|child
operator|.
name|getTree
argument_list|()
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|testSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

