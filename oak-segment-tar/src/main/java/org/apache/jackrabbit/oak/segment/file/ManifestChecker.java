begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStorePersistence
operator|.
name|ManifestFile
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
specifier|public
class|class
name|ManifestChecker
block|{
specifier|public
specifier|static
name|ManifestChecker
name|newManifestChecker
parameter_list|(
name|ManifestFile
name|file
parameter_list|,
name|boolean
name|shouldExist
parameter_list|,
name|int
name|minStoreVersion
parameter_list|,
name|int
name|maxStoreVersion
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|file
operator|!=
literal|null
argument_list|,
literal|"file"
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|minStoreVersion
operator|>
literal|0
argument_list|,
literal|"minStoreVersion"
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|maxStoreVersion
operator|>
literal|0
argument_list|,
literal|"maxStoreVersion"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ManifestChecker
argument_list|(
name|file
argument_list|,
name|shouldExist
argument_list|,
name|minStoreVersion
argument_list|,
name|maxStoreVersion
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|ManifestFile
name|file
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|shouldExist
decl_stmt|;
specifier|private
specifier|final
name|int
name|minStoreVersion
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxStoreVersion
decl_stmt|;
specifier|private
name|ManifestChecker
parameter_list|(
name|ManifestFile
name|file
parameter_list|,
name|boolean
name|shouldExist
parameter_list|,
name|int
name|minStoreVersion
parameter_list|,
name|int
name|maxStoreVersion
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|shouldExist
operator|=
name|shouldExist
expr_stmt|;
name|this
operator|.
name|minStoreVersion
operator|=
name|minStoreVersion
expr_stmt|;
name|this
operator|.
name|maxStoreVersion
operator|=
name|maxStoreVersion
expr_stmt|;
block|}
name|void
name|checkAndUpdateManifest
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidFileStoreVersionException
block|{
name|Manifest
name|manifest
init|=
name|openManifest
argument_list|()
decl_stmt|;
name|checkManifest
argument_list|(
name|manifest
argument_list|)
expr_stmt|;
name|updateManifest
argument_list|(
name|manifest
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkManifest
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidFileStoreVersionException
block|{
name|checkManifest
argument_list|(
name|openManifest
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Manifest
name|openManifest
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidFileStoreVersionException
block|{
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|Manifest
operator|.
name|load
argument_list|(
name|file
argument_list|)
return|;
block|}
if|if
condition|(
name|shouldExist
condition|)
block|{
throw|throw
operator|new
name|InvalidFileStoreVersionException
argument_list|(
literal|"Using oak-segment-tar, but oak-segment should be used"
argument_list|)
throw|;
block|}
return|return
name|Manifest
operator|.
name|empty
argument_list|()
return|;
block|}
specifier|private
name|void
name|checkManifest
parameter_list|(
name|Manifest
name|manifest
parameter_list|)
throws|throws
name|InvalidFileStoreVersionException
block|{
name|checkStoreVersion
argument_list|(
name|manifest
operator|.
name|getStoreVersion
argument_list|(
name|maxStoreVersion
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkStoreVersion
parameter_list|(
name|int
name|storeVersion
parameter_list|)
throws|throws
name|InvalidFileStoreVersionException
block|{
comment|// A store version less than or equal to the highest invalid value means
comment|// that something or someone is messing up with the manifest. This error
comment|// is not recoverable and is thus represented as an ISE.
if|if
condition|(
name|storeVersion
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Invalid store version"
argument_list|)
throw|;
block|}
if|if
condition|(
name|storeVersion
operator|<
name|minStoreVersion
condition|)
block|{
throw|throw
operator|new
name|InvalidFileStoreVersionException
argument_list|(
literal|"Using a too recent version of oak-segment-tar"
argument_list|)
throw|;
block|}
if|if
condition|(
name|storeVersion
operator|>
name|maxStoreVersion
condition|)
block|{
throw|throw
operator|new
name|InvalidFileStoreVersionException
argument_list|(
literal|"Using a too old version of oak-segment tar"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|updateManifest
parameter_list|(
name|Manifest
name|manifest
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Always update the store version to the maximum supported store
comment|// version. In doing so, we prevent older implementations from tampering
comment|// with the store's data, which from this moment on could be written in
comment|// a format that an older implementation might not be able to
comment|// understand.
name|manifest
operator|.
name|setStoreVersion
argument_list|(
name|maxStoreVersion
argument_list|)
expr_stmt|;
name|manifest
operator|.
name|save
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

