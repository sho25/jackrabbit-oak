begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|JcrUtils
import|;
end_import

begin_class
specifier|public
class|class
name|TestContentLoader
block|{
comment|/**      * The encoding of the test resources.      */
specifier|private
specifier|static
specifier|final
name|String
name|ENCODING
init|=
literal|"UTF-8"
decl_stmt|;
specifier|public
name|void
name|loadTestContent
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Node
name|data
init|=
name|getOrAddNode
argument_list|(
name|session
operator|.
name|getRootNode
argument_list|()
argument_list|,
literal|"testdata"
argument_list|)
decl_stmt|;
name|addPropertyTestData
argument_list|(
name|getOrAddNode
argument_list|(
name|data
argument_list|,
literal|"property"
argument_list|)
argument_list|)
expr_stmt|;
name|addQueryTestData
argument_list|(
name|getOrAddNode
argument_list|(
name|data
argument_list|,
literal|"query"
argument_list|)
argument_list|)
expr_stmt|;
name|addNodeTestData
argument_list|(
name|getOrAddNode
argument_list|(
name|data
argument_list|,
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Node
name|getOrAddNode
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
try|try
block|{
return|return
name|node
operator|.
name|getNode
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
return|return
name|node
operator|.
name|addNode
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
comment|/**      * Creates a boolean, double, long, calendar and a path property at the      * given node.      */
specifier|private
name|void
name|addPropertyTestData
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|node
operator|.
name|setProperty
argument_list|(
literal|"boolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"double"
argument_list|,
name|Math
operator|.
name|PI
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"long"
argument_list|,
literal|90834953485278298l
argument_list|)
expr_stmt|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2005
argument_list|,
literal|6
argument_list|,
literal|18
argument_list|,
literal|17
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"calendar"
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|ValueFactory
name|factory
init|=
name|node
operator|.
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
decl_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"path"
argument_list|,
name|factory
operator|.
name|createValue
argument_list|(
literal|"/"
argument_list|,
name|PropertyType
operator|.
name|PATH
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"multi"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"one"
block|,
literal|"two"
block|,
literal|"three"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates four nodes under the given node. Each node has a String      * property named "prop1" with some content set.      */
specifier|private
name|void
name|addQueryTestData
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
while|while
condition|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"node1"
argument_list|)
condition|)
block|{
name|node
operator|.
name|getNode
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|getOrAddNode
argument_list|(
name|node
argument_list|,
literal|"node1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop1"
argument_list|,
literal|"You can have it good, cheap, or fast. Any two."
argument_list|)
expr_stmt|;
name|getOrAddNode
argument_list|(
name|node
argument_list|,
literal|"node1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop1"
argument_list|,
literal|"foo bar"
argument_list|)
expr_stmt|;
name|getOrAddNode
argument_list|(
name|node
argument_list|,
literal|"node1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop1"
argument_list|,
literal|"Hello world!"
argument_list|)
expr_stmt|;
name|getOrAddNode
argument_list|(
name|node
argument_list|,
literal|"node2"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop1"
argument_list|,
literal|"Apache Jackrabbit"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates three nodes under the given node: one of type nt:resource      * and the other nodes referencing it.      */
specifier|private
name|void
name|addNodeTestData
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
if|if
condition|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"multiReference"
argument_list|)
condition|)
block|{
name|node
operator|.
name|getNode
argument_list|(
literal|"multiReference"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"resReference"
argument_list|)
condition|)
block|{
name|node
operator|.
name|getNode
argument_list|(
literal|"resReference"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"myResource"
argument_list|)
condition|)
block|{
name|node
operator|.
name|getNode
argument_list|(
literal|"myResource"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|Node
name|resource
init|=
name|node
operator|.
name|addNode
argument_list|(
literal|"myResource"
argument_list|,
literal|"nt:resource"
argument_list|)
decl_stmt|;
comment|// nt:resource not longer referenceable since JCR 2.0
name|resource
operator|.
name|addMixin
argument_list|(
literal|"mix:referenceable"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:encoding"
argument_list|,
name|ENCODING
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:mimeType"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:data"
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"Hello w\u00F6rld."
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:lastModified"
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: re-add once we have referenceable nodes
comment|//        Node resReference = getOrAddNode(node, "reference");
comment|//        resReference.setProperty("ref", resource);
comment|//        // make this node itself referenceable
comment|//        resReference.addMixin("mix:referenceable");
comment|//
comment|//        Node multiReference = node.addNode("multiReference");
comment|//        ValueFactory factory = node.getSession().getValueFactory();
comment|//        multiReference.setProperty("ref", new Value[] {
comment|//                factory.createValue(resource),
comment|//                factory.createValue(resReference)
comment|//            });
comment|// NodeDefTest requires a test node with a mandatory child node
name|JcrUtils
operator|.
name|putFile
argument_list|(
name|node
argument_list|,
literal|"testFile"
argument_list|,
literal|"text/plain"
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"Hello, World!"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

