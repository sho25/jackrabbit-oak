begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
operator|.
name|isNullOrEmpty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|closeQuietly
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiUtil
operator|.
name|lookupConfigurationThenFramework
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|CachingSegmentReader
operator|.
name|DEFAULT_STRING_CACHE_MB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|CachingSegmentReader
operator|.
name|DEFAULT_TEMPLATE_CACHE_MB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentCache
operator|.
name|DEFAULT_SEGMENT_CACHE_MB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|WriterCacheManager
operator|.
name|DEFAULT_NODE_CACHE_SIZE_OSGi
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|WriterCacheManager
operator|.
name|DEFAULT_STRING_CACHE_SIZE_OSGi
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|WriterCacheManager
operator|.
name|DEFAULT_TEMPLATE_CACHE_SIZE_OSGi
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|DISABLE_ESTIMATION_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|FORCE_TIMEOUT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|GC_PROGRESS_LOG_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|MEMORY_THRESHOLD_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|PAUSE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|RETAINED_GENERATIONS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|RETRY_COUNT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|SIZE_DELTA_ESTIMATION_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
operator|.
name|DEFAULT_MAX_FILE_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|osgi
operator|.
name|SplitBlobStoreService
operator|.
name|ONLY_STANDALONE_TARGET
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|stats
operator|.
name|RepositoryStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|stats
operator|.
name|TimeSeries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentNodeStorePersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|CounterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|HistogramStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|MeterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatsOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|TimerStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|ReferencePolicyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|metatype
operator|.
name|annotations
operator|.
name|AttributeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|metatype
operator|.
name|annotations
operator|.
name|Designate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|metatype
operator|.
name|annotations
operator|.
name|ObjectClassDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A factory allowing creation of secondary segment node stores.  *<p>  * The different secondaries are distinguished by their role attribute.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|configurationPolicy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|)
annotation|@
name|Designate
argument_list|(
name|factory
operator|=
literal|true
argument_list|,
name|ocd
operator|=
name|SegmentNodeStoreFactory
operator|.
name|Configuration
operator|.
name|class
argument_list|)
specifier|public
class|class
name|SegmentNodeStoreFactory
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_BLOB_SNAPSHOT_INTERVAL
init|=
literal|12
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_BLOB_GC_MAX_AGE
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
annotation|@
name|ObjectClassDefinition
argument_list|(
name|name
operator|=
literal|"Apache Jackrabbit Oak Segment-Tar NodeStore Factory"
argument_list|,
name|description
operator|=
literal|"Factory allowing configuration of adjacent instances of "
operator|+
literal|"NodeStore implementation based on Segment model besides a default SegmentNodeStore in same setup."
argument_list|)
annotation_defn|@interface
name|Configuration
block|{
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Repository Home Directory"
argument_list|,
name|description
operator|=
literal|"Path on the file system where repository data will be stored. "
operator|+
literal|"Defaults to the value of the framework property 'repository.home' or to 'repository' "
operator|+
literal|"if that is neither specified."
argument_list|)
name|String
name|repository_home
parameter_list|()
default|default
literal|""
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Mode"
argument_list|,
name|description
operator|=
literal|"TarMK mode (64 for memory mapped file access, 32 for normal file access). "
operator|+
literal|"Default value is taken from the 'sun.arch.data.model' system property."
argument_list|)
name|String
name|tarmk_mode
parameter_list|()
default|default
literal|""
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Maximum tar file size (MB)"
argument_list|,
name|description
operator|=
literal|"The maximum size of the tar files in megabytes. "
operator|+
literal|"Default value is '"
operator|+
name|DEFAULT_MAX_FILE_SIZE
operator|+
literal|"'."
argument_list|)
name|int
name|tarmk_size
parameter_list|()
default|default
name|DEFAULT_MAX_FILE_SIZE
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Segment cache size (MB)"
argument_list|,
name|description
operator|=
literal|"Cache size for storing most recently used segments in megabytes. "
operator|+
literal|"Default value is '"
operator|+
name|DEFAULT_SEGMENT_CACHE_MB
operator|+
literal|"'."
argument_list|)
name|int
name|segmentCache_size
parameter_list|()
default|default
name|DEFAULT_SEGMENT_CACHE_MB
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"String cache size (MB)"
argument_list|,
name|description
operator|=
literal|"Cache size for storing most recently used strings in megabytes. "
operator|+
literal|"Default value is '"
operator|+
name|DEFAULT_STRING_CACHE_MB
operator|+
literal|"'."
argument_list|)
name|int
name|stringCache_size
parameter_list|()
default|default
name|DEFAULT_STRING_CACHE_MB
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Template cache size (MB)"
argument_list|,
name|description
operator|=
literal|"Cache size for storing most recently used templates in megabytes. "
operator|+
literal|"Default value is '"
operator|+
name|DEFAULT_TEMPLATE_CACHE_MB
operator|+
literal|"'."
argument_list|)
name|int
name|templateCache_size
parameter_list|()
default|default
name|DEFAULT_TEMPLATE_CACHE_MB
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"String deduplication cache size (#items)"
argument_list|,
name|description
operator|=
literal|"Maximum number of strings to keep in the deduplication cache. "
operator|+
literal|"Default value is '"
operator|+
name|DEFAULT_STRING_CACHE_SIZE_OSGi
operator|+
literal|"'."
argument_list|)
name|int
name|stringDeduplicationCache_size
parameter_list|()
default|default
name|DEFAULT_STRING_CACHE_SIZE_OSGi
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Template deduplication cache size (#items)"
argument_list|,
name|description
operator|=
literal|"Maximum number of templates to keep in the deduplication cache. "
operator|+
literal|"Default value is '"
operator|+
name|DEFAULT_TEMPLATE_CACHE_SIZE_OSGi
operator|+
literal|"'."
argument_list|)
name|int
name|templateDeduplicationCache_size
parameter_list|()
default|default
name|DEFAULT_TEMPLATE_CACHE_SIZE_OSGi
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Node deduplication cache size (#items)"
argument_list|,
name|description
operator|=
literal|"Maximum number of node to keep in the deduplication cache. If the supplied "
operator|+
literal|"value is not a power of 2, it will be rounded up to the next power of 2. "
operator|+
literal|"Default value is '"
operator|+
name|DEFAULT_NODE_CACHE_SIZE_OSGi
operator|+
literal|"'."
argument_list|)
name|int
name|nodeDeduplicationCache_size
parameter_list|()
default|default
name|DEFAULT_NODE_CACHE_SIZE_OSGi
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Pause compaction"
argument_list|,
name|description
operator|=
literal|"When set to true the compaction phase is skipped during garbage collection. "
operator|+
literal|"Default value is '"
operator|+
name|PAUSE_DEFAULT
operator|+
literal|"'."
argument_list|)
name|boolean
name|pauseCompaction
parameter_list|()
default|default
name|PAUSE_DEFAULT
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Compaction retries"
argument_list|,
name|description
operator|=
literal|"Number of tries to compact concurrent commits on top of already "
operator|+
literal|"compacted commits. "
operator|+
literal|"Default value is '"
operator|+
name|RETRY_COUNT_DEFAULT
operator|+
literal|"'."
argument_list|)
name|int
name|compaction_retryCount
parameter_list|()
default|default
name|RETRY_COUNT_DEFAULT
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Force compaction timeout"
argument_list|,
name|description
operator|=
literal|"Number of seconds to attempt to force compact concurrent commits on top "
operator|+
literal|"of already compacted commits after the maximum number of retries has been "
operator|+
literal|"reached. Forced compaction tries to acquire an exclusive write lock on the "
operator|+
literal|"node store, blocking concurrent write access as long as the lock is held. "
operator|+
literal|"Default value is '"
operator|+
name|FORCE_TIMEOUT_DEFAULT
operator|+
literal|"'."
argument_list|)
name|int
name|compaction_force_timeout
parameter_list|()
default|default
name|FORCE_TIMEOUT_DEFAULT
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Garbage collection repository size threshold"
argument_list|,
name|description
operator|=
literal|"Garbage collection will be skipped unless the repository grew at least by "
operator|+
literal|"the number of bytes specified. "
operator|+
literal|"Default value is '"
operator|+
name|SIZE_DELTA_ESTIMATION_DEFAULT
operator|+
literal|"'."
argument_list|)
name|long
name|compaction_sizeDeltaEstimation
parameter_list|()
default|default
name|SIZE_DELTA_ESTIMATION_DEFAULT
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Disable estimation phase"
argument_list|,
name|description
operator|=
literal|"Disables the estimation phase allowing garbage collection to run unconditionally. "
operator|+
literal|"Default value is '"
operator|+
name|DISABLE_ESTIMATION_DEFAULT
operator|+
literal|"'."
argument_list|)
name|boolean
name|compaction_disableEstimation
parameter_list|()
default|default
name|DISABLE_ESTIMATION_DEFAULT
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Compaction retained generations"
argument_list|,
name|description
operator|=
literal|"Number of segment generations to retain during garbage collection. "
operator|+
literal|"The number of generations defaults to "
operator|+
name|RETAINED_GENERATIONS_DEFAULT
operator|+
literal|" and "
operator|+
literal|"can't be changed. This configuration option is considered deprecated "
operator|+
literal|"and will be removed in the future."
argument_list|)
name|int
name|compaction_retainedGenerations
parameter_list|()
default|default
name|RETAINED_GENERATIONS_DEFAULT
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Compaction memory threshold"
argument_list|,
name|description
operator|=
literal|"Threshold of available heap memory in percent of total heap memory below "
operator|+
literal|"which the compaction phase is canceled. 0 disables heap memory monitoring. "
operator|+
literal|"Default value is '"
operator|+
name|MEMORY_THRESHOLD_DEFAULT
operator|+
literal|"'."
argument_list|)
name|int
name|compaction_memoryThreshold
parameter_list|()
default|default
name|MEMORY_THRESHOLD_DEFAULT
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Compaction progress log"
argument_list|,
name|description
operator|=
literal|"The number of nodes compacted after which a status message is logged. "
operator|+
literal|"-1 disables progress logging. "
operator|+
literal|"Default value is '"
operator|+
name|GC_PROGRESS_LOG_DEFAULT
operator|+
literal|"'."
argument_list|)
name|long
name|compaction_progressLog
parameter_list|()
default|default
name|GC_PROGRESS_LOG_DEFAULT
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Standby mode"
argument_list|,
name|description
operator|=
literal|"Flag indicating this component will not register as a NodeStore but as a "
operator|+
literal|"NodeStoreProvider instead. "
operator|+
literal|"Default value is 'false'."
argument_list|)
name|boolean
name|standby
parameter_list|()
default|default
literal|false
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Custom blob store"
argument_list|,
name|description
operator|=
literal|"Boolean value indicating that a custom BlobStore is used for storing "
operator|+
literal|"large binary values."
argument_list|)
name|boolean
name|customBlobStore
parameter_list|()
default|default
literal|false
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Custom segment store"
argument_list|,
name|description
operator|=
literal|"Boolean value indicating that a custom (non-tar) segment store is used"
argument_list|)
name|boolean
name|customSegmentStore
parameter_list|()
default|default
literal|false
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Backup directory"
argument_list|,
name|description
operator|=
literal|"Directory (relative to current working directory) for storing repository backups. "
operator|+
literal|"Defaults to 'repository.home/segmentstore-backup'."
argument_list|)
name|String
name|repository_backup_dir
parameter_list|()
default|default
literal|""
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Blob gc max age (in secs)"
argument_list|,
name|description
operator|=
literal|"The blob garbage collection logic will only consider those blobs which "
operator|+
literal|"are not accessed recently (currentTime - lastModifiedTime> blobGcMaxAgeInSecs). "
operator|+
literal|"For example with the default setting only those blobs which have been created "
operator|+
literal|"at least 24 hours ago will be considered for garbage collection. "
operator|+
literal|"Default value is '"
operator|+
name|DEFAULT_BLOB_GC_MAX_AGE
operator|+
literal|"'."
argument_list|)
name|long
name|blobGcMaxAgeInSecs
parameter_list|()
default|default
name|DEFAULT_BLOB_GC_MAX_AGE
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Blob tracking snapshot interval"
argument_list|,
name|description
operator|=
literal|"Interval in seconds in which snapshots of locally tracked blob ids are "
operator|+
literal|"taken and synchronized with the blob store. This should be configured to be "
operator|+
literal|"less than the frequency of blob garbage collection so that deletions during blob "
operator|+
literal|"garbage collection can be accounted for in the next garbage collection execution. "
operator|+
literal|"Default value is '"
operator|+
name|DEFAULT_BLOB_SNAPSHOT_INTERVAL
operator|+
literal|"'."
argument_list|)
name|long
name|blobTrackSnapshotIntervalInSecs
parameter_list|()
default|default
name|DEFAULT_BLOB_SNAPSHOT_INTERVAL
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Role"
argument_list|,
name|description
operator|=
literal|"As multiple SegmentNodeStores can be configured, this parameter defines the role "
operator|+
literal|"of 'this' SegmentNodeStore."
argument_list|)
name|String
name|role
parameter_list|()
default|default
literal|""
function_decl|;
annotation|@
name|AttributeDefinition
argument_list|(
name|name
operator|=
literal|"Register JCR descriptors as OSGi services"
argument_list|,
name|description
operator|=
literal|"Should only be done for one factory instance"
argument_list|)
name|boolean
name|registerDescriptors
parameter_list|()
default|default
literal|false
function_decl|;
block|}
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|STATIC
argument_list|,
name|policyOption
operator|=
name|ReferencePolicyOption
operator|.
name|GREEDY
argument_list|,
name|target
operator|=
name|ONLY_STANDALONE_TARGET
argument_list|)
specifier|private
specifier|volatile
name|BlobStore
name|blobStore
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|STATIC
argument_list|,
name|policyOption
operator|=
name|ReferencePolicyOption
operator|.
name|GREEDY
argument_list|)
specifier|private
specifier|volatile
name|SegmentNodeStorePersistence
name|segmentStore
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|StatisticsProvider
name|statisticsProvider
init|=
name|StatisticsProvider
operator|.
name|NOOP
decl_stmt|;
specifier|private
specifier|final
name|Closer
name|registrations
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
annotation|@
name|Activate
specifier|public
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"activate: SegmentNodeStore '"
operator|+
name|configuration
operator|.
name|role
argument_list|()
operator|+
literal|"' starting."
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|role
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|OsgiWhiteboard
name|whiteboard
init|=
operator|new
name|OsgiWhiteboard
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|)
decl_stmt|;
name|SegmentNodeStore
name|store
init|=
name|registerSegmentStore
argument_list|(
name|context
argument_list|,
name|configuration
argument_list|,
name|blobStore
argument_list|,
name|segmentStore
argument_list|,
name|getRoleStatisticsProvider
argument_list|(
name|statisticsProvider
argument_list|,
name|configuration
operator|.
name|role
argument_list|()
argument_list|)
argument_list|,
name|registrations
argument_list|,
name|whiteboard
argument_list|,
name|configuration
operator|.
name|role
argument_list|()
argument_list|,
name|log
argument_list|)
decl_stmt|;
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|NodeStoreProvider
operator|.
name|ROLE
argument_list|,
name|configuration
operator|.
name|role
argument_list|()
argument_list|)
expr_stmt|;
name|registrations
operator|.
name|register
argument_list|(
name|asCloseable
argument_list|(
name|whiteboard
operator|.
name|register
argument_list|(
name|NodeStoreProvider
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|store
argument_list|,
name|props
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Registered NodeStoreProvider backed by SegmentNodeStore of type '{}'"
argument_list|,
name|configuration
operator|.
name|role
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|public
name|void
name|deactivate
parameter_list|()
block|{
name|closeQuietly
argument_list|(
name|registrations
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Closeable
name|asCloseable
parameter_list|(
specifier|final
name|Registration
name|r
parameter_list|)
block|{
return|return
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|r
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|static
name|String
name|property
parameter_list|(
name|String
name|name
parameter_list|,
name|ComponentContext
name|context
parameter_list|)
block|{
return|return
name|lookupConfigurationThenFramework
argument_list|(
name|context
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|SegmentNodeStore
name|registerSegmentStore
parameter_list|(
name|ComponentContext
name|context
parameter_list|,
name|Configuration
name|configuration
parameter_list|,
name|BlobStore
name|blobStore
parameter_list|,
name|SegmentNodeStorePersistence
name|segmentStore
parameter_list|,
name|StatisticsProvider
name|statisticsProvider
parameter_list|,
name|Closer
name|closer
parameter_list|,
name|Whiteboard
name|whiteboard
parameter_list|,
name|String
name|role
parameter_list|,
name|Logger
name|logger
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|SegmentNodeStoreRegistrar
operator|.
name|registerSegmentNodeStore
argument_list|(
operator|new
name|SegmentNodeStoreRegistrar
operator|.
name|Configuration
argument_list|()
block|{
name|String
name|appendRole
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|+
literal|"-"
operator|+
name|role
return|;
block|}
name|int
name|roundToNextPowerOfTwo
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
literal|1
operator|<<
operator|(
literal|32
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
argument_list|)
operator|)
return|;
block|}
name|String
name|getMode
parameter_list|()
block|{
name|String
name|mode
init|=
name|configuration
operator|.
name|tarmk_mode
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|mode
argument_list|)
condition|)
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"tarmk.mode"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"sun.arch.data.model"
argument_list|,
literal|"32"
argument_list|)
argument_list|)
return|;
block|}
return|return
name|mode
return|;
block|}
name|int
name|getCacheSize
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|otherwise
parameter_list|)
block|{
name|Integer
name|size
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
return|return
name|size
return|;
block|}
return|return
name|otherwise
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPrimarySegmentStore
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSecondarySegmentStore
parameter_list|()
block|{
return|return
literal|"secondary"
operator|.
name|equals
argument_list|(
name|role
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStandbyInstance
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|standby
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRole
parameter_list|()
block|{
return|return
name|role
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRetainedGenerations
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|compaction_retainedGenerations
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDefaultRetainedGenerations
parameter_list|()
block|{
return|return
name|RETAINED_GENERATIONS_DEFAULT
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getPauseCompaction
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|pauseCompaction
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRetryCount
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|compaction_retryCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getForceCompactionTimeout
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|compaction_force_timeout
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSizeDeltaEstimation
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|compaction_sizeDeltaEstimation
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMemoryThreshold
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|compaction_memoryThreshold
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getDisableEstimation
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|compaction_disableEstimation
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getGCProcessLog
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|compaction_progressLog
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|File
name|getSegmentDirectory
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|getRepositoryHome
argument_list|()
argument_list|,
name|appendRole
argument_list|(
literal|"segmentstore"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSegmentCacheSize
parameter_list|()
block|{
return|return
name|getCacheSize
argument_list|(
literal|"segmentCache.size"
argument_list|,
name|configuration
operator|.
name|segmentCache_size
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getStringCacheSize
parameter_list|()
block|{
return|return
name|getCacheSize
argument_list|(
literal|"stringCache.size"
argument_list|,
name|configuration
operator|.
name|stringCache_size
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTemplateCacheSize
parameter_list|()
block|{
return|return
name|getCacheSize
argument_list|(
literal|"templateCache.size"
argument_list|,
name|configuration
operator|.
name|templateCache_size
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getStringDeduplicationCacheSize
parameter_list|()
block|{
return|return
name|getCacheSize
argument_list|(
literal|"stringDeduplicationCache.size"
argument_list|,
name|configuration
operator|.
name|stringDeduplicationCache_size
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTemplateDeduplicationCacheSize
parameter_list|()
block|{
return|return
name|getCacheSize
argument_list|(
literal|"templateDeduplicationCache.size"
argument_list|,
name|configuration
operator|.
name|templateDeduplicationCache_size
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNodeDeduplicationCacheSize
parameter_list|()
block|{
return|return
name|roundToNextPowerOfTwo
argument_list|(
name|getCacheSize
argument_list|(
literal|"nodeDeduplicationCache.size"
argument_list|,
name|configuration
operator|.
name|nodeDeduplicationCache_size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxFileSize
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|tarmk_size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getMemoryMapping
parameter_list|()
block|{
return|return
name|getMode
argument_list|()
operator|.
name|equals
argument_list|(
literal|"64"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasCustomBlobStore
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|customBlobStore
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasCustomSegmentStore
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|customSegmentStore
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|registerDescriptors
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|registerDescriptors
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRepositoryHome
parameter_list|()
block|{
name|String
name|repositoryHome
init|=
name|OsgiUtil
operator|.
name|lookupConfigurationThenFramework
argument_list|(
name|context
argument_list|,
literal|"repository.home"
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|repositoryHome
argument_list|)
condition|)
block|{
return|return
literal|"repository"
return|;
block|}
return|return
name|repositoryHome
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getBlobSnapshotInterval
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|blobTrackSnapshotIntervalInSecs
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getBlobGcMaxAge
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|blobGcMaxAgeInSecs
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|File
name|getBackupDirectory
parameter_list|()
block|{
name|String
name|backupDirectory
init|=
name|configuration
operator|.
name|repository_backup_dir
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|backupDirectory
argument_list|)
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getRepositoryHome
argument_list|()
argument_list|,
name|appendRole
argument_list|(
literal|"segmentstore-backup"
argument_list|)
argument_list|)
return|;
block|}
return|return
operator|new
name|File
argument_list|(
name|backupDirectory
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Whiteboard
name|getWhiteboard
parameter_list|()
block|{
return|return
name|whiteboard
return|;
block|}
annotation|@
name|Override
specifier|public
name|Closer
name|getCloser
parameter_list|()
block|{
return|return
name|closer
return|;
block|}
annotation|@
name|Override
specifier|public
name|Logger
name|getLogger
parameter_list|()
block|{
return|return
name|logger
return|;
block|}
annotation|@
name|Override
specifier|public
name|StatisticsProvider
name|getStatisticsProvider
parameter_list|()
block|{
return|return
name|statisticsProvider
return|;
block|}
annotation|@
name|Override
specifier|public
name|BlobStore
name|getBlobStore
parameter_list|()
block|{
return|return
name|blobStore
return|;
block|}
annotation|@
name|Override
specifier|public
name|SegmentNodeStorePersistence
name|getSegmentNodeStorePersistence
parameter_list|()
block|{
return|return
name|segmentStore
return|;
block|}
annotation|@
name|Override
specifier|public
name|BundleContext
name|getBundleContext
parameter_list|()
block|{
return|return
name|context
operator|.
name|getBundleContext
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|StatisticsProvider
name|getRoleStatisticsProvider
parameter_list|(
name|StatisticsProvider
name|delegate
parameter_list|,
name|String
name|role
parameter_list|)
block|{
name|RepositoryStatistics
name|repositoryStatistics
init|=
operator|new
name|RepositoryStatistics
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TimeSeries
name|getTimeSeries
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
return|return
name|getTimeSeries
argument_list|(
name|type
operator|.
name|name
argument_list|()
argument_list|,
name|type
operator|.
name|isResetValueEachSecond
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TimeSeries
name|getTimeSeries
parameter_list|(
name|String
name|type
parameter_list|,
name|boolean
name|resetValueEachSecond
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getStats
argument_list|()
operator|.
name|getTimeSeries
argument_list|(
name|addRoleToName
argument_list|(
name|type
argument_list|,
name|role
argument_list|)
argument_list|,
name|resetValueEachSecond
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|StatisticsProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RepositoryStatistics
name|getStats
parameter_list|()
block|{
return|return
name|repositoryStatistics
return|;
block|}
annotation|@
name|Override
specifier|public
name|MeterStats
name|getMeter
parameter_list|(
name|String
name|name
parameter_list|,
name|StatsOptions
name|options
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getMeter
argument_list|(
name|addRoleToName
argument_list|(
name|name
argument_list|,
name|role
argument_list|)
argument_list|,
name|options
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CounterStats
name|getCounterStats
parameter_list|(
name|String
name|name
parameter_list|,
name|StatsOptions
name|options
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getCounterStats
argument_list|(
name|addRoleToName
argument_list|(
name|name
argument_list|,
name|role
argument_list|)
argument_list|,
name|options
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TimerStats
name|getTimer
parameter_list|(
name|String
name|name
parameter_list|,
name|StatsOptions
name|options
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getTimer
argument_list|(
name|addRoleToName
argument_list|(
name|name
argument_list|,
name|role
argument_list|)
argument_list|,
name|options
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HistogramStats
name|getHistogram
parameter_list|(
name|String
name|name
parameter_list|,
name|StatsOptions
name|options
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getHistogram
argument_list|(
name|addRoleToName
argument_list|(
name|name
argument_list|,
name|role
argument_list|)
argument_list|,
name|options
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|String
name|addRoleToName
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|role
parameter_list|)
block|{
return|return
name|role
operator|+
literal|'.'
operator|+
name|name
return|;
block|}
block|}
end_class

end_unit

