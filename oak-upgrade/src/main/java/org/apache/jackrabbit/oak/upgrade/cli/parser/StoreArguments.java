begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|node
operator|.
name|StoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|parser
operator|.
name|StoreType
operator|.
name|JCR2_DIR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|parser
operator|.
name|StoreType
operator|.
name|JCR2_DIR_XML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|parser
operator|.
name|StoreType
operator|.
name|JCR2_XML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|parser
operator|.
name|StoreType
operator|.
name|SEGMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|parser
operator|.
name|StoreType
operator|.
name|SEGMENT_TAR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|parser
operator|.
name|StoreType
operator|.
name|getMatchingType
import|;
end_import

begin_class
specifier|public
class|class
name|StoreArguments
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CRX2_REPO
init|=
literal|"crx-quickstart/repository"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REPOSITORY_XML
init|=
literal|"repository.xml"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SEGMENT_OLD_PREFIX
init|=
literal|"segment-old:"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StoreArguments
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MigrationOptions
name|options
decl_stmt|;
specifier|private
specifier|final
name|StoreDescriptor
name|src
decl_stmt|;
specifier|private
specifier|final
name|StoreDescriptor
name|dst
decl_stmt|;
specifier|private
name|Boolean
name|srcHasExternalBlobRefs
decl_stmt|;
specifier|public
name|StoreArguments
parameter_list|(
name|MigrationOptions
name|options
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|arguments
parameter_list|)
throws|throws
name|CliArgumentException
block|{
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|List
argument_list|<
name|StoreDescriptor
argument_list|>
name|descriptors
init|=
name|createStoreDescriptors
argument_list|(
name|arguments
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|src
operator|=
name|descriptors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dst
operator|=
name|descriptors
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|getSrcExternalBlobs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|srcHasExternalBlobRefs
operator|=
name|options
operator|.
name|getSrcExternalBlobs
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|logOptions
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Source: {}"
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Destination: {}"
argument_list|,
name|dst
argument_list|)
expr_stmt|;
if|if
condition|(
name|dst
operator|.
name|getType
argument_list|()
operator|==
name|SEGMENT
condition|)
block|{
name|logSegmentVersion
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|StoreFactory
name|getSrcStore
parameter_list|()
block|{
return|return
name|src
operator|.
name|getFactory
argument_list|(
name|MigrationDirection
operator|.
name|SRC
argument_list|,
name|options
argument_list|)
return|;
block|}
specifier|public
name|StoreFactory
name|getDstStore
parameter_list|()
block|{
return|return
name|dst
operator|.
name|getFactory
argument_list|(
name|MigrationDirection
operator|.
name|DST
argument_list|,
name|options
argument_list|)
return|;
block|}
specifier|public
name|StoreType
name|getSrcType
parameter_list|()
block|{
return|return
name|src
operator|.
name|getType
argument_list|()
return|;
block|}
specifier|public
name|StoreType
name|getDstType
parameter_list|()
block|{
return|return
name|dst
operator|.
name|getType
argument_list|()
return|;
block|}
name|String
name|getSrcDescriptor
parameter_list|()
block|{
return|return
name|src
operator|.
name|toString
argument_list|()
return|;
block|}
name|String
name|getDstDescriptor
parameter_list|()
block|{
return|return
name|dst
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isInPlaceUpgrade
parameter_list|()
block|{
if|if
condition|(
name|src
operator|.
name|getType
argument_list|()
operator|==
name|JCR2_DIR_XML
operator|&&
name|dst
operator|.
name|getType
argument_list|()
operator|==
name|SEGMENT_TAR
condition|)
block|{
return|return
name|src
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|dst
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|String
index|[]
name|getSrcPaths
parameter_list|()
block|{
return|return
name|src
operator|.
name|getPaths
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|srcUsesEmbeddedDatastore
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|srcHasExternalBlobRefs
operator|==
literal|null
condition|)
block|{
name|srcHasExternalBlobRefs
operator|=
name|src
operator|.
name|getFactory
argument_list|(
name|StoreArguments
operator|.
name|MigrationDirection
operator|.
name|SRC
argument_list|,
name|options
argument_list|)
operator|.
name|hasExternalBlobReferences
argument_list|()
expr_stmt|;
block|}
return|return
operator|!
name|srcHasExternalBlobRefs
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|StoreDescriptor
argument_list|>
name|createStoreDescriptors
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|arguments
parameter_list|,
name|MigrationOptions
name|options
parameter_list|)
throws|throws
name|CliArgumentException
block|{
name|List
argument_list|<
name|StoreDescriptor
argument_list|>
name|descriptors
init|=
name|mapToStoreDescriptors
argument_list|(
name|arguments
argument_list|)
decl_stmt|;
name|mergeCrx2Descriptors
argument_list|(
name|descriptors
argument_list|)
expr_stmt|;
name|addSegmentAsDestination
argument_list|(
name|descriptors
argument_list|)
expr_stmt|;
name|validateDescriptors
argument_list|(
name|descriptors
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|descriptors
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|StoreDescriptor
argument_list|>
name|mapToStoreDescriptors
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|arguments
parameter_list|)
throws|throws
name|CliArgumentException
block|{
name|List
argument_list|<
name|StoreDescriptor
argument_list|>
name|descriptors
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|jcr2Dir
init|=
literal|false
decl_stmt|;
name|boolean
name|jcr2Xml
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|argument
range|:
name|arguments
control|)
block|{
name|StoreType
name|type
init|=
name|getMatchingType
argument_list|(
name|argument
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|JCR2_DIR
condition|)
block|{
if|if
condition|(
name|jcr2Dir
condition|)
block|{
name|type
operator|=
name|SEGMENT_TAR
expr_stmt|;
block|}
name|jcr2Dir
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
name|JCR2_DIR_XML
condition|)
block|{
if|if
condition|(
name|jcr2Xml
condition|)
block|{
throw|throw
operator|new
name|CliArgumentException
argument_list|(
literal|"Too many repository.xml files passed as arguments"
argument_list|,
literal|1
argument_list|)
throw|;
block|}
name|jcr2Xml
operator|=
literal|true
expr_stmt|;
block|}
name|descriptors
operator|.
name|add
argument_list|(
operator|new
name|StoreDescriptor
argument_list|(
name|type
argument_list|,
name|argument
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|descriptors
return|;
block|}
specifier|private
specifier|static
name|void
name|mergeCrx2Descriptors
parameter_list|(
name|List
argument_list|<
name|StoreDescriptor
argument_list|>
name|descriptors
parameter_list|)
block|{
name|int
name|crx2DirIndex
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|crx2XmlIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|descriptors
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|StoreType
name|type
init|=
name|descriptors
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|JCR2_DIR
condition|)
block|{
name|crx2DirIndex
operator|=
name|i
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|JCR2_XML
condition|)
block|{
name|crx2XmlIndex
operator|=
name|i
expr_stmt|;
block|}
block|}
if|if
condition|(
name|crx2DirIndex
operator|>
operator|-
literal|1
operator|||
name|crx2XmlIndex
operator|>
operator|-
literal|1
condition|)
block|{
name|String
name|repoDir
decl_stmt|;
if|if
condition|(
name|crx2DirIndex
operator|>
operator|-
literal|1
condition|)
block|{
name|repoDir
operator|=
name|descriptors
operator|.
name|get
argument_list|(
name|crx2DirIndex
argument_list|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|descriptors
operator|.
name|set
argument_list|(
name|crx2DirIndex
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|repoDir
operator|=
name|DEFAULT_CRX2_REPO
expr_stmt|;
block|}
name|String
name|repoXml
decl_stmt|;
if|if
condition|(
name|crx2XmlIndex
operator|>
operator|-
literal|1
condition|)
block|{
name|repoXml
operator|=
name|descriptors
operator|.
name|get
argument_list|(
name|crx2XmlIndex
argument_list|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|descriptors
operator|.
name|set
argument_list|(
name|crx2XmlIndex
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|repoXml
operator|=
name|repoDir
operator|+
literal|"/"
operator|+
name|REPOSITORY_XML
expr_stmt|;
block|}
name|descriptors
operator|.
name|add
argument_list|(
literal|0
argument_list|,
operator|new
name|StoreDescriptor
argument_list|(
name|JCR2_DIR_XML
argument_list|,
name|repoDir
argument_list|,
name|repoXml
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|StoreDescriptor
argument_list|>
name|it
init|=
name|descriptors
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|it
operator|.
name|next
argument_list|()
operator|==
literal|null
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|addSegmentAsDestination
parameter_list|(
name|List
argument_list|<
name|StoreDescriptor
argument_list|>
name|descriptors
parameter_list|)
block|{
if|if
condition|(
name|descriptors
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|StoreType
name|type
init|=
name|descriptors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|JCR2_DIR_XML
condition|)
block|{
name|String
name|crx2Dir
init|=
name|descriptors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|descriptors
operator|.
name|add
argument_list|(
operator|new
name|StoreDescriptor
argument_list|(
name|SEGMENT_TAR
argument_list|,
name|crx2Dir
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"In place migration between JCR2 and SegmentNodeStore in {}"
argument_list|,
name|crx2Dir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|validateDescriptors
parameter_list|(
name|List
argument_list|<
name|StoreDescriptor
argument_list|>
name|descriptors
parameter_list|,
name|MigrationOptions
name|options
parameter_list|)
throws|throws
name|CliArgumentException
block|{
if|if
condition|(
name|descriptors
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|CliArgumentException
argument_list|(
literal|"Not enough node store arguments: "
operator|+
name|descriptors
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|descriptors
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|CliArgumentException
argument_list|(
literal|"Too much node store arguments: "
operator|+
name|descriptors
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|descriptors
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
name|JCR2_DIR_XML
condition|)
block|{
throw|throw
operator|new
name|CliArgumentException
argument_list|(
literal|"Can't use CRX2 as a destination"
argument_list|,
literal|1
argument_list|)
throw|;
block|}
name|StoreDescriptor
name|src
init|=
name|descriptors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|StoreDescriptor
name|dst
init|=
name|descriptors
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|src
operator|.
name|getType
argument_list|()
operator|==
name|dst
operator|.
name|getType
argument_list|()
operator|&&
name|src
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|dst
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CliArgumentException
argument_list|(
literal|"The source and the destination is the same repository."
argument_list|,
literal|1
argument_list|)
throw|;
block|}
if|if
condition|(
name|src
operator|.
name|getType
argument_list|()
operator|==
name|StoreType
operator|.
name|JCR2_DIR_XML
operator|&&
name|options
operator|.
name|isSrcBlobStoreDefined
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CliArgumentException
argument_list|(
literal|"The --src-datastore can't be used for the repository upgrade. Source datastore configuration is placed in the repository.xml file."
argument_list|,
literal|1
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|logSegmentVersion
parameter_list|()
block|{
name|SegmentVersion
index|[]
name|versions
init|=
name|SegmentVersion
operator|.
name|values
argument_list|()
decl_stmt|;
name|SegmentVersion
name|lastVersion
init|=
name|versions
index|[
name|versions
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Using Oak segment format {} - please make sure your version of AEM supports that format"
argument_list|,
name|lastVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastVersion
operator|==
name|SegmentVersion
operator|.
name|V_11
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Requires Oak 1.0.12, 1.1.7 or later"
argument_list|)
expr_stmt|;
block|}
block|}
enum|enum
name|MigrationDirection
block|{
name|SRC
block|,
name|DST
block|}
specifier|private
specifier|static
class|class
name|StoreDescriptor
block|{
specifier|private
specifier|final
name|String
index|[]
name|paths
decl_stmt|;
specifier|private
specifier|final
name|StoreType
name|type
decl_stmt|;
specifier|public
name|StoreDescriptor
parameter_list|(
name|StoreType
name|type
parameter_list|,
name|String
modifier|...
name|paths
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|paths
operator|=
name|paths
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getPaths
parameter_list|()
block|{
return|return
name|paths
return|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|paths
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|StoreType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|StoreFactory
name|getFactory
parameter_list|(
name|MigrationDirection
name|direction
parameter_list|,
name|MigrationOptions
name|options
parameter_list|)
block|{
return|return
name|type
operator|.
name|createFactory
argument_list|(
name|paths
argument_list|,
name|direction
argument_list|,
name|options
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|paths
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s[%s]"
argument_list|,
name|type
argument_list|,
name|getPath
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s%s"
argument_list|,
name|type
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|getPaths
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

