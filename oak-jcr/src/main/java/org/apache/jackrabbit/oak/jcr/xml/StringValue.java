begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|TextValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_comment
comment|/**  * {@code StringValue} represents an immutable serialized value.  */
end_comment

begin_class
class|class
name|StringValue
implements|implements
name|TextValue
block|{
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
specifier|private
specifier|final
name|ValueFactory
name|valueFactory
decl_stmt|;
specifier|private
specifier|final
name|NamePathMapper
name|namePathMapper
decl_stmt|;
comment|/**      * Constructs a new {@code StringValue} representing the given      * value.      *      * @param value serialized value from document      * @param valueFactory the ValueFactory      * @param namePathMapper a namePathMapper knowing the document context      */
specifier|protected
name|StringValue
parameter_list|(
name|String
name|value
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|,
name|NamePathMapper
name|namePathMapper
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|valueFactory
operator|=
name|valueFactory
expr_stmt|;
name|this
operator|.
name|namePathMapper
operator|=
name|namePathMapper
expr_stmt|;
block|}
comment|//--------------------------------------------------------< TextValue>
annotation|@
name|Override
specifier|public
name|String
name|getString
parameter_list|()
block|{
return|return
name|this
operator|.
name|value
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|Value
name|getValue
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|type
operator|==
name|PropertyType
operator|.
name|BINARY
condition|)
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|Base64
operator|.
name|decode
argument_list|(
name|value
argument_list|,
name|baos
argument_list|)
expr_stmt|;
return|return
name|valueFactory
operator|.
name|createValue
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Failed to decode binary value: "
operator|+
name|value
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// The ValueFactory instance takes care of name and path mapping
comment|// from JCR to Oak values, but here we need an additional level of
comment|// mapping for XML to JCR values.
name|String
name|jcrValue
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|PropertyType
operator|.
name|NAME
condition|)
block|{
name|jcrValue
operator|=
name|namePathMapper
operator|.
name|getOakName
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|PropertyType
operator|.
name|PATH
condition|)
block|{
name|jcrValue
operator|=
name|namePathMapper
operator|.
name|getOakPath
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jcrValue
operator|=
name|value
expr_stmt|;
block|}
return|return
name|valueFactory
operator|.
name|createValue
argument_list|(
name|jcrValue
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
comment|// do nothing
block|}
block|}
end_class

end_unit

