begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests the behavior of Oak when facing MongoDB failover.  */
end_comment

begin_class
annotation|@
name|Ignore
argument_list|(
literal|"OAK-759"
argument_list|)
specifier|public
class|class
name|FailoverTest
extends|extends
name|AbstractClusterTest
block|{
annotation|@
name|Override
specifier|protected
name|NodeStoreFixture
name|getFixture
parameter_list|()
block|{
return|return
name|NodeStoreFixture
operator|.
name|createMongoFixture
argument_list|(
literal|"mongodb://localhost:27017,localhost:27018,localhost:27019/oak"
argument_list|)
return|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|s1
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|s1
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
literal|"test"
argument_list|)
condition|)
block|{
name|s1
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
literal|"test"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|String
name|nodeName
init|=
literal|"test"
operator|+
name|i
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testing with "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
name|s1
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|s1
operator|.
name|save
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|x
range|:
name|seconds
argument_list|(
literal|5
argument_list|)
control|)
block|{
name|s2
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|s2
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|s2
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
name|nodeName
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|s2
operator|.
name|save
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|x
range|:
name|seconds
argument_list|(
literal|5
argument_list|)
control|)
block|{
name|s1
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|s1
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|s1
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|s1
operator|.
name|save
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|x
range|:
name|seconds
argument_list|(
literal|5
argument_list|)
control|)
block|{
name|s2
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|s2
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|s2
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
name|nodeName
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|s2
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

