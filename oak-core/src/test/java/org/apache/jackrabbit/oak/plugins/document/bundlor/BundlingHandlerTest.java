begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|bundlor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|BundlingHandlerTest
block|{
specifier|private
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|defaultSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|BundlingHandler
name|handler
init|=
operator|new
name|BundlingHandler
argument_list|(
name|BundledTypesRegistry
operator|.
name|from
argument_list|(
name|EMPTY_NODE
argument_list|)
argument_list|)
decl_stmt|;
name|childBuilder
argument_list|(
name|builder
argument_list|,
literal|"/x/y/z"
argument_list|)
expr_stmt|;
name|NodeState
name|state
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|handler
operator|.
name|getRootBundlePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler
operator|.
name|isBundlingRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|handler
operator|.
name|getPropertyPath
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|BundlingHandler
name|xh
init|=
name|childHandler
argument_list|(
name|handler
argument_list|,
name|state
argument_list|,
literal|"/x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/x"
argument_list|,
name|xh
operator|.
name|getRootBundlePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xh
operator|.
name|isBundlingRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|xh
operator|.
name|getPropertyPath
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|BundlingHandler
name|xz
init|=
name|childHandler
argument_list|(
name|handler
argument_list|,
name|state
argument_list|,
literal|"/x/y/z"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/x/y/z"
argument_list|,
name|xz
operator|.
name|getRootBundlePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xz
operator|.
name|isBundlingRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|xz
operator|.
name|getPropertyPath
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ntFileBundled
parameter_list|()
throws|throws
name|Exception
block|{
name|BundledTypesRegistry
name|registry
init|=
name|BundledTypesRegistry
operator|.
name|builder
argument_list|()
operator|.
name|forType
argument_list|(
literal|"nt:file"
argument_list|,
literal|"jcr:content"
argument_list|)
operator|.
name|buildRegistry
argument_list|()
decl_stmt|;
name|childBuilder
argument_list|(
name|builder
argument_list|,
literal|"sunrise.jpg/jcr:content"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:data"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|childBuilder
argument_list|(
name|builder
argument_list|,
literal|"sunrise.jpg/jcr:content/bar"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:data"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|type
argument_list|(
name|childBuilder
argument_list|(
name|builder
argument_list|,
literal|"sunrise.jpg"
argument_list|)
argument_list|,
literal|"nt:file"
argument_list|)
expr_stmt|;
name|childBuilder
argument_list|(
name|builder
argument_list|,
literal|"/sunrise.jpg/metadata"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|NodeState
name|state
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|BundlingHandler
name|handler
init|=
operator|new
name|BundlingHandler
argument_list|(
name|registry
argument_list|)
decl_stmt|;
name|BundlingHandler
name|fileHandler
init|=
name|childHandler
argument_list|(
name|handler
argument_list|,
name|state
argument_list|,
literal|"/sunrise.jpg"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/sunrise.jpg"
argument_list|,
name|fileHandler
operator|.
name|getRootBundlePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileHandler
operator|.
name|isBundlingRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|fileHandler
operator|.
name|getPropertyPath
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|BundlingHandler
name|jcrContentHandler
init|=
name|childHandler
argument_list|(
name|handler
argument_list|,
name|state
argument_list|,
literal|"/sunrise.jpg/jcr:content"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/sunrise.jpg"
argument_list|,
name|jcrContentHandler
operator|.
name|getRootBundlePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|jcrContentHandler
operator|.
name|isBundlingRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jcr:content/foo"
argument_list|,
name|jcrContentHandler
operator|.
name|getPropertyPath
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|BundlingHandler
name|metadataHandler
init|=
name|childHandler
argument_list|(
name|handler
argument_list|,
name|state
argument_list|,
literal|"/sunrise.jpg/metadata"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/sunrise.jpg/metadata"
argument_list|,
name|metadataHandler
operator|.
name|getRootBundlePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metadataHandler
operator|.
name|isBundlingRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|metadataHandler
operator|.
name|getPropertyPath
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// /sunrise.jpg/jcr:content/bar should have bundle root reset
name|BundlingHandler
name|barHandler
init|=
name|childHandler
argument_list|(
name|handler
argument_list|,
name|state
argument_list|,
literal|"/sunrise.jpg/jcr:content/bar"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/sunrise.jpg/jcr:content/bar"
argument_list|,
name|barHandler
operator|.
name|getRootBundlePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|barHandler
operator|.
name|isBundlingRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|barHandler
operator|.
name|getPropertyPath
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|BundlingHandler
name|childHandler
parameter_list|(
name|BundlingHandler
name|parent
parameter_list|,
name|NodeState
name|parentState
parameter_list|,
name|String
name|childPath
parameter_list|)
block|{
name|BundlingHandler
name|result
init|=
name|parent
decl_stmt|;
name|NodeState
name|state
init|=
name|parentState
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|checkNotNull
argument_list|(
name|childPath
argument_list|)
argument_list|)
control|)
block|{
name|state
operator|=
name|state
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|childHandler
argument_list|(
name|name
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|NodeBuilder
name|childBuilder
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|String
name|childPath
parameter_list|)
block|{
name|NodeBuilder
name|result
init|=
name|parent
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|checkNotNull
argument_list|(
name|childPath
argument_list|)
argument_list|)
control|)
block|{
name|result
operator|=
name|result
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|NodeBuilder
name|type
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|typeName
parameter_list|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

