begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|NullOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|JournalReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|LocalJournalFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_class
specifier|public
class|class
name|RecoverJournalTest
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|successfulRecovery
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|FileStore
name|fileStore
init|=
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
argument_list|(
name|folder
operator|.
name|getRoot
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|SegmentNodeStore
name|nodeStore
init|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|fileStore
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Assumption: a repository in the real world always has (or had at
comment|// least once in the past) a checkpoint. This means that the
comment|// super-root always has a `checkpoints` child node, which enables
comment|// the heuristic in `RecoverJournal` to recognize the head states we
comment|// are about to create as super-roots.
name|nodeStore
operator|.
name|checkpoint
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|root
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|root
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|root
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|fileStore
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|originalDigest
init|=
name|digest
argument_list|(
name|file
argument_list|(
literal|"journal.log"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|originalRevisions
init|=
name|revisions
argument_list|(
name|file
argument_list|(
literal|"journal.log"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|code
init|=
name|RecoverJournal
operator|.
name|builder
argument_list|()
operator|.
name|withPath
argument_list|(
name|folder
operator|.
name|getRoot
argument_list|()
argument_list|)
operator|.
name|withOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
operator|new
name|NullOutputStream
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
operator|new
name|NullOutputStream
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|run
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|String
name|backupDigest
init|=
name|digest
argument_list|(
name|file
argument_list|(
literal|"journal.log.bak.000"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|originalDigest
argument_list|,
name|backupDigest
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|recoveredRevisions
init|=
name|revisions
argument_list|(
name|file
argument_list|(
literal|"journal.log"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|recoveredRevisions
operator|.
name|containsAll
argument_list|(
name|originalRevisions
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|File
name|file
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|folder
operator|.
name|getRoot
argument_list|()
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|revisions
parameter_list|(
name|File
name|journal
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|revisions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|JournalReader
name|reader
init|=
operator|new
name|JournalReader
argument_list|(
operator|new
name|LocalJournalFile
argument_list|(
name|journal
argument_list|)
argument_list|)
init|)
block|{
while|while
condition|(
name|reader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|revisions
operator|.
name|add
argument_list|(
name|reader
operator|.
name|next
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|revisions
return|;
block|}
specifier|private
specifier|static
name|String
name|digest
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|InputStream
name|stream
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
return|return
name|DigestUtils
operator|.
name|md5Hex
argument_list|(
name|stream
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

