begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|inventory
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_class
specifier|final
class|class
name|NodeStateJsonUtils
block|{
specifier|public
specifier|static
name|String
name|toJson
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|boolean
name|includeHiddenContent
parameter_list|)
block|{
name|JsopWriter
name|json
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|copyAsJson
argument_list|(
name|json
argument_list|,
name|state
argument_list|,
name|includeHiddenContent
argument_list|)
expr_stmt|;
return|return
name|json
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|copyAsJson
parameter_list|(
name|JsopWriter
name|json
parameter_list|,
name|NodeState
name|state
parameter_list|,
name|boolean
name|includeHiddenContent
parameter_list|)
block|{
name|json
operator|.
name|object
argument_list|()
expr_stmt|;
name|copyNode
argument_list|(
name|state
argument_list|,
name|json
argument_list|,
name|includeHiddenContent
argument_list|)
expr_stmt|;
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|copyNode
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|JsopWriter
name|json
parameter_list|,
name|boolean
name|includeHiddenContent
parameter_list|)
block|{
name|copyProperties
argument_list|(
name|state
argument_list|,
name|json
argument_list|,
name|includeHiddenContent
argument_list|)
expr_stmt|;
for|for
control|(
name|ChildNodeEntry
name|cne
range|:
name|state
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|includeHiddenContent
operator|&&
name|NodeStateUtils
operator|.
name|isHidden
argument_list|(
name|cne
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|json
operator|.
name|key
argument_list|(
name|cne
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|object
argument_list|()
expr_stmt|;
name|copyNode
argument_list|(
name|cne
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|json
argument_list|,
name|includeHiddenContent
argument_list|)
expr_stmt|;
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|copyProperties
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|JsopWriter
name|json
parameter_list|,
name|boolean
name|includeHiddenContent
parameter_list|)
block|{
for|for
control|(
name|PropertyState
name|ps
range|:
name|state
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|ps
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeHiddenContent
operator|&&
name|NodeStateUtils
operator|.
name|isHidden
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|ps
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|json
operator|.
name|key
argument_list|(
name|name
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ps
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|copyProperty
argument_list|(
name|ps
argument_list|,
name|i
argument_list|,
name|json
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|json
operator|.
name|key
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|copyProperty
argument_list|(
name|ps
argument_list|,
literal|0
argument_list|,
name|json
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|copyProperty
parameter_list|(
name|PropertyState
name|ps
parameter_list|,
name|int
name|i
parameter_list|,
name|JsopWriter
name|json
parameter_list|)
block|{
switch|switch
condition|(
name|ps
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
condition|)
block|{
case|case
name|PropertyType
operator|.
name|LONG
case|:
name|long
name|longVal
init|=
name|ps
operator|.
name|isArray
argument_list|()
condition|?
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
name|i
argument_list|)
else|:
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|json
operator|.
name|value
argument_list|(
name|longVal
argument_list|)
expr_stmt|;
break|break;
case|case
name|PropertyType
operator|.
name|BOOLEAN
case|:
name|boolean
name|boolVal
init|=
name|ps
operator|.
name|isArray
argument_list|()
condition|?
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|i
argument_list|)
else|:
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
name|json
operator|.
name|value
argument_list|(
name|boolVal
argument_list|)
expr_stmt|;
break|break;
case|case
name|PropertyType
operator|.
name|BINARY
case|:
name|Blob
name|b
init|=
name|ps
operator|.
name|isArray
argument_list|()
condition|?
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|,
name|i
argument_list|)
else|:
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
decl_stmt|;
name|String
name|binVal
init|=
name|toString
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|json
operator|.
name|value
argument_list|(
name|binVal
argument_list|)
expr_stmt|;
break|break;
default|default:
name|String
name|strVal
init|=
name|ps
operator|.
name|isArray
argument_list|()
condition|?
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|i
argument_list|)
else|:
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|json
operator|.
name|value
argument_list|(
name|strVal
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|toString
parameter_list|(
name|Blob
name|b
parameter_list|)
block|{
name|String
name|id
init|=
name|b
operator|.
name|getContentIdentity
argument_list|()
decl_stmt|;
return|return
name|id
operator|==
literal|null
condition|?
literal|"<binary>#"
operator|+
name|b
operator|.
name|length
argument_list|()
else|:
name|b
operator|.
name|getContentIdentity
argument_list|()
return|;
block|}
block|}
end_class

end_unit

