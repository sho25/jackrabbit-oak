begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventJournal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventListenerIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|ObservationManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|EventListenerIteratorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|ReadOnlyNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|ChangeDispatcher
operator|.
name|Listener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Marker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MarkerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ObservationManagerImpl
implements|implements
name|ObservationManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ObservationManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Marker
name|OBSERVATION
init|=
name|MarkerFactory
operator|.
name|getMarker
argument_list|(
literal|"observation"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|EventListener
argument_list|,
name|ChangeProcessor
argument_list|>
name|processors
init|=
operator|new
name|HashMap
argument_list|<
name|EventListener
argument_list|,
name|ChangeProcessor
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|hasEvents
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ContentSession
name|contentSession
decl_stmt|;
specifier|private
specifier|final
name|ReadOnlyNodeTypeManager
name|ntMgr
decl_stmt|;
specifier|private
specifier|final
name|NamePathMapper
name|namePathMapper
decl_stmt|;
specifier|private
specifier|final
name|Whiteboard
name|whiteboard
decl_stmt|;
specifier|public
name|ObservationManagerImpl
parameter_list|(
name|ContentSession
name|contentSession
parameter_list|,
name|ReadOnlyNodeTypeManager
name|nodeTypeManager
parameter_list|,
name|NamePathMapper
name|namePathMapper
parameter_list|,
name|Whiteboard
name|whiteboard
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|contentSession
operator|instanceof
name|Observable
argument_list|)
expr_stmt|;
name|this
operator|.
name|contentSession
operator|=
name|contentSession
expr_stmt|;
name|this
operator|.
name|ntMgr
operator|=
name|nodeTypeManager
expr_stmt|;
name|this
operator|.
name|namePathMapper
operator|=
name|namePathMapper
expr_stmt|;
name|this
operator|.
name|whiteboard
operator|=
name|whiteboard
expr_stmt|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|List
argument_list|<
name|ChangeProcessor
argument_list|>
name|toBeStopped
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|toBeStopped
operator|=
name|newArrayList
argument_list|(
name|processors
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|processors
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|ChangeProcessor
name|processor
range|:
name|toBeStopped
control|)
block|{
name|processor
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Determine whether events have been generated since the time this method has been called.      * @return  {@code true} if this {@code ObservationManager} instance has generated events      *          since the last time this method has been called, {@code false} otherwise.      */
specifier|public
name|boolean
name|hasEvents
parameter_list|()
block|{
return|return
name|hasEvents
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|addEventListener
parameter_list|(
name|EventListener
name|listener
parameter_list|,
name|int
name|eventTypes
parameter_list|,
name|String
name|absPath
parameter_list|,
name|boolean
name|isDeep
parameter_list|,
name|String
index|[]
name|uuid
parameter_list|,
name|String
index|[]
name|nodeTypeName
parameter_list|,
name|boolean
name|noLocal
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|EventFilter
name|filter
init|=
operator|new
name|EventFilter
argument_list|(
name|ntMgr
argument_list|,
name|namePathMapper
argument_list|,
name|eventTypes
argument_list|,
name|absPath
argument_list|,
name|isDeep
argument_list|,
name|uuid
argument_list|,
name|nodeTypeName
argument_list|,
name|noLocal
argument_list|)
decl_stmt|;
name|ChangeProcessor
name|processor
init|=
name|processors
operator|.
name|get
argument_list|(
name|listener
argument_list|)
decl_stmt|;
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
name|OBSERVATION
argument_list|,
literal|"Registering event listener {} with filter {}"
argument_list|,
name|listener
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|processor
operator|=
operator|new
name|ChangeProcessor
argument_list|(
name|this
argument_list|,
name|listener
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|processors
operator|.
name|put
argument_list|(
name|listener
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|processor
operator|.
name|start
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
name|OBSERVATION
argument_list|,
literal|"Changing event listener {} to filter {}"
argument_list|,
name|listener
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|processor
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeEventListener
parameter_list|(
name|EventListener
name|listener
parameter_list|)
block|{
name|ChangeProcessor
name|processor
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|processor
operator|=
name|processors
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|processor
operator|!=
literal|null
condition|)
block|{
name|processor
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// needs to happen outside synchronization
block|}
block|}
annotation|@
name|Override
specifier|public
name|EventListenerIterator
name|getRegisteredEventListeners
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
operator|new
name|EventListenerIteratorAdapter
argument_list|(
name|processors
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUserData
parameter_list|(
name|String
name|userData
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|ChangeProcessor
name|processor
range|:
name|processors
operator|.
name|values
argument_list|()
control|)
block|{
name|processor
operator|.
name|setUserData
argument_list|(
name|userData
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|EventJournal
name|getEventJournal
parameter_list|()
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|EventJournal
name|getEventJournal
parameter_list|(
name|int
name|eventTypes
parameter_list|,
name|String
name|absPath
parameter_list|,
name|boolean
name|isDeep
parameter_list|,
name|String
index|[]
name|uuid
parameter_list|,
name|String
index|[]
name|nodeTypeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|()
throw|;
block|}
comment|//------------------------------------------------------------< internal>---
name|NamePathMapper
name|getNamePathMapper
parameter_list|()
block|{
return|return
name|namePathMapper
return|;
block|}
name|void
name|setHasEvents
parameter_list|()
block|{
name|hasEvents
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|Listener
name|newChangeListener
parameter_list|()
block|{
return|return
operator|(
operator|(
name|Observable
operator|)
name|contentSession
operator|)
operator|.
name|newListener
argument_list|()
return|;
block|}
specifier|public
name|ContentSession
name|getContentSession
parameter_list|()
block|{
return|return
name|contentSession
return|;
block|}
block|}
end_class

end_unit

