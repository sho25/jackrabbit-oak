begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|IndexStatsMBean
operator|.
name|STATUS_DONE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|elements
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|ASYNC_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|MISSING_NODE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|IndexStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|AnnotatedStandardMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|commit
operator|.
name|AnnotatingConflictHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|commit
operator|.
name|ConflictHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|commit
operator|.
name|ConflictValidatorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdate
operator|.
name|MissingIndexProviderStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CompositeHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|VisibleEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|stats
operator|.
name|TimeSeriesRecorder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|stats
operator|.
name|TimeSeriesStatsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO8601
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AsyncIndexUpdate
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AsyncIndexUpdate
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Name of the hidden node under which information about the checkpoints      * seen and indexed by each async indexer is kept.      */
specifier|static
specifier|final
name|String
name|ASYNC
init|=
literal|":async"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_LIFETIME
init|=
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|CommitFailedException
name|CONCURRENT_UPDATE
init|=
operator|new
name|CommitFailedException
argument_list|(
literal|"Async"
argument_list|,
literal|1
argument_list|,
literal|"Concurrent update detected"
argument_list|)
decl_stmt|;
comment|/**      * Timeout in milliseconds after which an async job would be considered as      * timed out. Another node in cluster would wait for timeout before      * taking over a running job      */
specifier|private
specifier|static
specifier|final
name|long
name|ASYNC_TIMEOUT
decl_stmt|;
static|static
block|{
name|int
name|value
init|=
literal|15
decl_stmt|;
try|try
block|{
name|value
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.async.lease.timeout"
argument_list|,
literal|"15"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// use default
block|}
name|ASYNC_TIMEOUT
operator|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|NodeStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|IndexEditorProvider
name|provider
decl_stmt|;
comment|/**      * Property name which stores the timestamp upto which the repository is      * indexed      */
specifier|private
specifier|final
name|String
name|lastIndexedTo
decl_stmt|;
specifier|private
specifier|final
name|long
name|lifetime
init|=
name|DEFAULT_LIFETIME
decl_stmt|;
comment|// TODO: make configurable
comment|/** Flag to avoid repeatedly logging failure warnings */
specifier|private
name|boolean
name|failing
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|AsyncIndexStats
name|indexStats
init|=
operator|new
name|AsyncIndexStats
argument_list|()
decl_stmt|;
comment|/** Flag to switch to synchronous updates once the index caught up to the repo */
specifier|private
specifier|final
name|boolean
name|switchOnSync
decl_stmt|;
comment|/**      * Set of reindexed definitions updated between runs because a single diff      * can report less definitions than there really are. Used in coordination      * with the switchOnSync flag, so we know which def need to be updated after      * a run with no changes.      */
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|reindexedDefinitions
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|MissingIndexProviderStrategy
name|missingStrategy
init|=
operator|new
name|DefaultMissingIndexProviderStrategy
argument_list|()
decl_stmt|;
comment|/**      * Property name which stores the temporary checkpoint that need to be released on the next run      */
specifier|private
specifier|final
name|String
name|tempCpName
decl_stmt|;
specifier|private
specifier|final
name|IndexTaskSpliter
name|taskSplitter
init|=
operator|new
name|IndexTaskSpliter
argument_list|()
decl_stmt|;
specifier|private
name|IndexMBeanRegistration
name|mbeanRegistration
decl_stmt|;
specifier|public
name|AsyncIndexUpdate
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|,
annotation|@
name|Nonnull
name|NodeStore
name|store
parameter_list|,
annotation|@
name|Nonnull
name|IndexEditorProvider
name|provider
parameter_list|,
name|boolean
name|switchOnSync
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastIndexedTo
operator|=
name|name
operator|+
literal|"-LastIndexedTo"
expr_stmt|;
name|this
operator|.
name|tempCpName
operator|=
name|name
operator|+
literal|"-temp"
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|checkNotNull
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|this
operator|.
name|provider
operator|=
name|checkNotNull
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|this
operator|.
name|switchOnSync
operator|=
name|switchOnSync
expr_stmt|;
block|}
specifier|public
name|AsyncIndexUpdate
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|,
annotation|@
name|Nonnull
name|NodeStore
name|store
parameter_list|,
annotation|@
name|Nonnull
name|IndexEditorProvider
name|provider
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|store
argument_list|,
name|provider
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Index update callback that tries to raise the async status flag when      * the first index change is detected.      *      * @see<a href="https://issues.apache.org/jira/browse/OAK-1292">OAK-1292</a>      */
specifier|private
class|class
name|AsyncUpdateCallback
implements|implements
name|IndexUpdateCallback
block|{
comment|/** The base checkpoint */
specifier|private
specifier|final
name|String
name|checkpoint
decl_stmt|;
comment|/** Expiration time of the last lease we committed */
specifier|private
name|long
name|lease
decl_stmt|;
specifier|private
name|long
name|updates
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|String
name|leaseName
decl_stmt|;
specifier|public
name|AsyncUpdateCallback
parameter_list|(
name|String
name|checkpoint
parameter_list|,
name|String
name|afterCheckpoint
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|this
operator|.
name|checkpoint
operator|=
name|checkpoint
expr_stmt|;
name|this
operator|.
name|lease
operator|=
name|now
operator|+
literal|2
operator|*
name|ASYNC_TIMEOUT
expr_stmt|;
name|this
operator|.
name|leaseName
operator|=
name|name
operator|+
literal|"-lease"
expr_stmt|;
name|NodeState
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|long
name|beforeLease
init|=
name|root
operator|.
name|getChildNode
argument_list|(
name|ASYNC
argument_list|)
operator|.
name|getLong
argument_list|(
name|leaseName
argument_list|)
decl_stmt|;
if|if
condition|(
name|beforeLease
operator|>
name|now
condition|)
block|{
throw|throw
name|CONCURRENT_UPDATE
throw|;
block|}
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|async
init|=
name|builder
operator|.
name|child
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
name|async
operator|.
name|setProperty
argument_list|(
name|leaseName
argument_list|,
name|lease
argument_list|)
expr_stmt|;
name|updateTempCheckpoints
argument_list|(
name|async
argument_list|,
name|checkpoint
argument_list|,
name|afterCheckpoint
argument_list|)
expr_stmt|;
name|mergeWithConcurrencyCheck
argument_list|(
name|builder
argument_list|,
name|checkpoint
argument_list|,
name|beforeLease
argument_list|)
expr_stmt|;
comment|// reset updates counter
name|indexStats
operator|.
name|setUpdates
argument_list|(
name|this
operator|.
name|updates
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateTempCheckpoints
parameter_list|(
name|NodeBuilder
name|async
parameter_list|,
name|String
name|checkpoint
parameter_list|,
name|String
name|afterCheckpoint
parameter_list|)
block|{
name|indexStats
operator|.
name|setReferenceCheckpoint
argument_list|(
name|checkpoint
argument_list|)
expr_stmt|;
name|indexStats
operator|.
name|setProcessedCheckpoint
argument_list|(
name|afterCheckpoint
argument_list|)
expr_stmt|;
comment|// try to drop temp cps, add 'currentCp' to the temp cps list
name|Set
argument_list|<
name|String
argument_list|>
name|temps
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|cp
range|:
name|getStrings
argument_list|(
name|async
argument_list|,
name|tempCpName
argument_list|)
control|)
block|{
if|if
condition|(
name|cp
operator|.
name|equals
argument_list|(
name|checkpoint
argument_list|)
condition|)
block|{
name|temps
operator|.
name|add
argument_list|(
name|cp
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|boolean
name|released
init|=
name|store
operator|.
name|release
argument_list|(
name|cp
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] Releasing temporary checkpoint {}: {}"
argument_list|,
name|name
argument_list|,
name|cp
argument_list|,
name|released
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|released
condition|)
block|{
name|temps
operator|.
name|add
argument_list|(
name|cp
argument_list|)
expr_stmt|;
block|}
block|}
name|temps
operator|.
name|add
argument_list|(
name|afterCheckpoint
argument_list|)
expr_stmt|;
name|async
operator|.
name|setProperty
argument_list|(
name|tempCpName
argument_list|,
name|temps
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|indexStats
operator|.
name|setTempCheckpoints
argument_list|(
name|temps
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isDirty
parameter_list|()
block|{
return|return
name|updates
operator|>
literal|0
return|;
block|}
name|void
name|close
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|async
init|=
name|builder
operator|.
name|child
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
name|async
operator|.
name|removeProperty
argument_list|(
name|leaseName
argument_list|)
expr_stmt|;
name|mergeWithConcurrencyCheck
argument_list|(
name|builder
argument_list|,
name|async
operator|.
name|getString
argument_list|(
name|name
argument_list|)
argument_list|,
name|lease
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|indexUpdate
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|updates
operator|++
expr_stmt|;
if|if
condition|(
name|updates
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|indexStats
operator|.
name|setUpdates
argument_list|(
name|this
operator|.
name|updates
argument_list|)
expr_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|+
name|ASYNC_TIMEOUT
operator|>
name|lease
condition|)
block|{
name|long
name|newLease
init|=
name|now
operator|+
literal|2
operator|*
name|ASYNC_TIMEOUT
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
name|ASYNC
argument_list|)
operator|.
name|setProperty
argument_list|(
name|leaseName
argument_list|,
name|newLease
argument_list|)
expr_stmt|;
name|mergeWithConcurrencyCheck
argument_list|(
name|builder
argument_list|,
name|checkpoint
argument_list|,
name|lease
argument_list|)
expr_stmt|;
name|lease
operator|=
name|newLease
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|indexStats
operator|.
name|isPaused
argument_list|()
condition|)
block|{
return|return;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] Running background index task"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|NodeState
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
decl_stmt|;
comment|// check for concurrent updates
name|NodeState
name|async
init|=
name|root
operator|.
name|getChildNode
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
name|long
name|leaseEndTime
init|=
name|async
operator|.
name|getLong
argument_list|(
name|name
operator|+
literal|"-lease"
argument_list|)
decl_stmt|;
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|leaseEndTime
operator|>
name|currentTime
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] Another copy of the index update is already running; skipping this update. Time left for lease to expire {}s"
argument_list|,
name|name
argument_list|,
operator|(
name|leaseEndTime
operator|-
name|currentTime
operator|)
operator|/
literal|1000
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// find the last indexed state, and check if there are recent changes
name|NodeState
name|before
decl_stmt|;
name|String
name|beforeCheckpoint
init|=
name|async
operator|.
name|getString
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|beforeCheckpoint
operator|!=
literal|null
condition|)
block|{
name|NodeState
name|state
init|=
name|store
operator|.
name|retrieve
argument_list|(
name|beforeCheckpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"[{}] Failed to retrieve previously indexed checkpoint {}; re-running the initial index update"
argument_list|,
name|name
argument_list|,
name|beforeCheckpoint
argument_list|)
expr_stmt|;
name|beforeCheckpoint
operator|=
literal|null
expr_stmt|;
name|before
operator|=
name|MISSING_NODE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|noVisibleChanges
argument_list|(
name|state
argument_list|,
name|root
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] No changes since last checkpoint; skipping the index update"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|before
operator|=
name|state
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"[{}] Initial index update"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|before
operator|=
name|MISSING_NODE
expr_stmt|;
block|}
comment|// there are some recent changes, so let's create a new checkpoint
name|String
name|afterTime
init|=
name|now
argument_list|()
decl_stmt|;
name|String
name|afterCheckpoint
init|=
name|store
operator|.
name|checkpoint
argument_list|(
name|lifetime
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"creator"
argument_list|,
name|AsyncIndexUpdate
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|"thread"
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"name"
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|NodeState
name|after
init|=
name|store
operator|.
name|retrieve
argument_list|(
name|afterCheckpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|after
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] Unable to retrieve newly created checkpoint {}, skipping the index update"
argument_list|,
name|name
argument_list|,
name|afterCheckpoint
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|checkpointToRelease
init|=
name|afterCheckpoint
decl_stmt|;
try|try
block|{
name|updateIndex
argument_list|(
name|before
argument_list|,
name|beforeCheckpoint
argument_list|,
name|after
argument_list|,
name|afterCheckpoint
argument_list|,
name|afterTime
argument_list|)
expr_stmt|;
comment|// the update succeeded, i.e. it no longer fails
if|if
condition|(
name|failing
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"[{}] Index update no longer fails"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|failing
operator|=
literal|false
expr_stmt|;
block|}
comment|// the update succeeded, so we can release the earlier checkpoint
comment|// otherwise the new checkpoint associated with the failed update
comment|// will get released in the finally block
name|checkpointToRelease
operator|=
name|beforeCheckpoint
expr_stmt|;
name|indexStats
operator|.
name|setReferenceCheckpoint
argument_list|(
name|afterCheckpoint
argument_list|)
expr_stmt|;
name|indexStats
operator|.
name|setProcessedCheckpoint
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|indexStats
operator|.
name|releaseTempCheckpoint
argument_list|(
name|afterCheckpoint
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|==
name|CONCURRENT_UPDATE
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] Concurrent update detected in the index update"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|failing
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] The index update is still failing"
argument_list|,
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"[{}] The index update failed"
argument_list|,
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|failing
operator|=
literal|true
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// null during initial indexing
comment|// and skip release if this cp was used in a split operation
if|if
condition|(
name|checkpointToRelease
operator|!=
literal|null
operator|&&
operator|!
name|checkpointToRelease
operator|.
name|equals
argument_list|(
name|taskSplitter
operator|.
name|getLastReferencedCp
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|store
operator|.
name|release
argument_list|(
name|checkpointToRelease
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] Unable to release checkpoint {}"
argument_list|,
name|name
argument_list|,
name|checkpointToRelease
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|updateIndex
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|String
name|beforeCheckpoint
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|String
name|afterCheckpoint
parameter_list|,
name|String
name|afterTime
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Stopwatch
name|watch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|boolean
name|progressLogged
init|=
literal|false
decl_stmt|;
comment|// start collecting runtime statistics
name|preAsyncRunStatsStats
argument_list|(
name|indexStats
argument_list|)
expr_stmt|;
comment|// create an update callback for tracking index updates
comment|// and maintaining the update lease
name|AsyncUpdateCallback
name|callback
init|=
operator|new
name|AsyncUpdateCallback
argument_list|(
name|beforeCheckpoint
argument_list|,
name|afterCheckpoint
argument_list|)
decl_stmt|;
comment|// check for index tasks split requests, if a split happened, make
comment|// sure to not delete the reference checkpoint, as the other index
comment|// task will take care of it
name|taskSplitter
operator|.
name|maybeSplit
argument_list|(
name|beforeCheckpoint
argument_list|,
name|callback
operator|.
name|lease
argument_list|)
expr_stmt|;
try|try
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|IndexUpdate
name|indexUpdate
init|=
operator|new
name|IndexUpdate
argument_list|(
name|provider
argument_list|,
name|name
argument_list|,
name|after
argument_list|,
name|builder
argument_list|,
name|callback
argument_list|)
operator|.
name|withMissingProviderStrategy
argument_list|(
name|missingStrategy
argument_list|)
decl_stmt|;
name|CommitFailedException
name|exception
init|=
name|EditorDiff
operator|.
name|process
argument_list|(
name|VisibleEditor
operator|.
name|wrap
argument_list|(
name|indexUpdate
argument_list|)
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
decl_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
name|builder
operator|.
name|child
argument_list|(
name|ASYNC
argument_list|)
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|afterCheckpoint
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
name|ASYNC
argument_list|)
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|lastIndexedTo
argument_list|,
name|afterTime
argument_list|,
name|Type
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|updatePostRunStatus
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|callback
operator|.
name|isDirty
argument_list|()
operator|||
name|before
operator|==
name|MISSING_NODE
condition|)
block|{
if|if
condition|(
name|switchOnSync
condition|)
block|{
name|reindexedDefinitions
operator|.
name|addAll
argument_list|(
name|indexUpdate
operator|.
name|getReindexedDefinitions
argument_list|()
argument_list|)
expr_stmt|;
name|updatePostRunStatus
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|updatePostRunStatus
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|switchOnSync
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] No changes detected after diff; will try to switch to synchronous updates on {}"
argument_list|,
name|name
argument_list|,
name|reindexedDefinitions
argument_list|)
expr_stmt|;
comment|// no changes after diff, switch to sync on the async defs
for|for
control|(
name|String
name|path
range|:
name|reindexedDefinitions
control|)
block|{
name|NodeBuilder
name|c
init|=
name|builder
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|c
operator|=
name|c
operator|.
name|getChildNode
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|c
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
condition|)
block|{
name|c
operator|.
name|removeProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|)
expr_stmt|;
block|}
block|}
name|reindexedDefinitions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|updatePostRunStatus
operator|=
literal|true
expr_stmt|;
block|}
name|mergeWithConcurrencyCheck
argument_list|(
name|builder
argument_list|,
name|beforeCheckpoint
argument_list|,
name|callback
operator|.
name|lease
argument_list|)
expr_stmt|;
if|if
condition|(
name|updatePostRunStatus
condition|)
block|{
name|postAsyncRunStatsStatus
argument_list|(
name|indexStats
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexUpdate
operator|.
name|isReindexingPerformed
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"[{}] Reindexing completed for indexes: {} in {}"
argument_list|,
name|name
argument_list|,
name|indexUpdate
operator|.
name|getReindexStats
argument_list|()
argument_list|,
name|watch
argument_list|)
expr_stmt|;
name|progressLogged
operator|=
literal|true
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|callback
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|progressLogged
condition|)
block|{
name|String
name|msg
init|=
literal|"[{}] AsyncIndex update run completed in {}. Indexed {} nodes"
decl_stmt|;
comment|//Log at info level if time taken is more than 5 min
if|if
condition|(
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
operator|>=
literal|5
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|msg
argument_list|,
name|name
argument_list|,
name|watch
argument_list|,
name|callback
operator|.
name|updates
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
name|msg
argument_list|,
name|name
argument_list|,
name|watch
argument_list|,
name|callback
operator|.
name|updates
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|mergeWithConcurrencyCheck
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
specifier|final
name|String
name|checkpoint
parameter_list|,
specifier|final
name|long
name|lease
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|CommitHook
name|concurrentUpdateCheck
init|=
operator|new
name|CommitHook
argument_list|()
block|{
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|NodeState
name|processCommit
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
comment|// check for concurrent updates by this async task
name|NodeState
name|async
init|=
name|before
operator|.
name|getChildNode
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkpoint
operator|==
literal|null
operator|||
name|Objects
operator|.
name|equal
argument_list|(
name|checkpoint
argument_list|,
name|async
operator|.
name|getString
argument_list|(
name|name
argument_list|)
argument_list|)
operator|&&
name|lease
operator|==
name|async
operator|.
name|getLong
argument_list|(
name|name
operator|+
literal|"-lease"
argument_list|)
condition|)
block|{
return|return
name|after
return|;
block|}
else|else
block|{
throw|throw
name|CONCURRENT_UPDATE
throw|;
block|}
block|}
block|}
decl_stmt|;
name|CompositeHook
name|hooks
init|=
operator|new
name|CompositeHook
argument_list|(
operator|new
name|ConflictHook
argument_list|(
operator|new
name|AnnotatingConflictHandler
argument_list|()
argument_list|)
argument_list|,
operator|new
name|EditorHook
argument_list|(
operator|new
name|ConflictValidatorProvider
argument_list|()
argument_list|)
argument_list|,
name|concurrentUpdateCheck
argument_list|)
decl_stmt|;
try|try
block|{
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|hooks
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|ex
parameter_list|)
block|{
comment|// OAK-2961
if|if
condition|(
name|ex
operator|.
name|isOfType
argument_list|(
name|CommitFailedException
operator|.
name|STATE
argument_list|)
operator|&&
name|ex
operator|.
name|getCode
argument_list|()
operator|==
literal|1
condition|)
block|{
throw|throw
name|CONCURRENT_UPDATE
throw|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|preAsyncRunStatsStats
parameter_list|(
name|AsyncIndexStats
name|stats
parameter_list|)
block|{
name|stats
operator|.
name|start
argument_list|(
name|now
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|postAsyncRunStatsStatus
parameter_list|(
name|AsyncIndexStats
name|stats
parameter_list|)
block|{
name|stats
operator|.
name|done
argument_list|(
name|now
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|now
parameter_list|()
block|{
return|return
name|ISO8601
operator|.
name|format
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|AsyncIndexStats
name|getIndexStats
parameter_list|()
block|{
return|return
name|indexStats
return|;
block|}
specifier|public
name|boolean
name|isFinished
parameter_list|()
block|{
return|return
name|indexStats
operator|.
name|getStatus
argument_list|()
operator|==
name|STATUS_DONE
return|;
block|}
specifier|final
class|class
name|AsyncIndexStats
extends|extends
name|AnnotatedStandardMBean
implements|implements
name|IndexStatsMBean
implements|,
name|Runnable
block|{
specifier|protected
name|AsyncIndexStats
parameter_list|()
block|{
name|super
argument_list|(
name|IndexStatsMBean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|start
init|=
literal|""
decl_stmt|;
specifier|private
name|String
name|done
init|=
literal|""
decl_stmt|;
specifier|private
name|String
name|status
init|=
name|STATUS_INIT
decl_stmt|;
specifier|private
name|String
name|referenceCp
init|=
literal|""
decl_stmt|;
specifier|private
name|String
name|processedCp
init|=
literal|""
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|tempCps
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|isPaused
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|updates
decl_stmt|;
specifier|private
specifier|final
name|Stopwatch
name|watch
init|=
name|Stopwatch
operator|.
name|createUnstarted
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ExecutionStats
name|execStats
init|=
operator|new
name|ExecutionStats
argument_list|()
decl_stmt|;
specifier|public
name|void
name|start
parameter_list|(
name|String
name|now
parameter_list|)
block|{
name|status
operator|=
name|STATUS_RUNNING
expr_stmt|;
name|start
operator|=
name|now
expr_stmt|;
name|done
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|watch
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|watch
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|watch
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|done
parameter_list|(
name|String
name|now
parameter_list|)
block|{
name|status
operator|=
name|STATUS_DONE
expr_stmt|;
name|done
operator|=
name|now
expr_stmt|;
if|if
condition|(
name|watch
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|watch
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|execStats
operator|.
name|incrementCounter
argument_list|()
expr_stmt|;
name|execStats
operator|.
name|recordExecution
argument_list|(
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|updates
argument_list|)
expr_stmt|;
name|watch
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStart
parameter_list|()
block|{
return|return
name|start
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDone
parameter_list|()
block|{
return|return
name|done
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLastIndexedTime
parameter_list|()
block|{
name|PropertyState
name|ps
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|ASYNC
argument_list|)
operator|.
name|getProperty
argument_list|(
name|lastIndexedTo
argument_list|)
decl_stmt|;
return|return
name|ps
operator|!=
literal|null
condition|?
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|pause
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] Pausing the async indexer"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|isPaused
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resume
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] Resuming the async indexer"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|isPaused
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPaused
parameter_list|()
block|{
return|return
name|this
operator|.
name|isPaused
return|;
block|}
name|void
name|setUpdates
parameter_list|(
name|long
name|updates
parameter_list|)
block|{
name|this
operator|.
name|updates
operator|=
name|updates
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getUpdates
parameter_list|()
block|{
return|return
name|updates
return|;
block|}
name|void
name|setReferenceCheckpoint
parameter_list|(
name|String
name|checkpoint
parameter_list|)
block|{
name|this
operator|.
name|referenceCp
operator|=
name|checkpoint
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReferenceCheckpoint
parameter_list|()
block|{
return|return
name|referenceCp
return|;
block|}
name|void
name|setProcessedCheckpoint
parameter_list|(
name|String
name|checkpoint
parameter_list|)
block|{
name|this
operator|.
name|processedCp
operator|=
name|checkpoint
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProcessedCheckpoint
parameter_list|()
block|{
return|return
name|processedCp
return|;
block|}
name|void
name|setTempCheckpoints
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|tempCheckpoints
parameter_list|)
block|{
name|this
operator|.
name|tempCps
operator|=
name|tempCheckpoints
expr_stmt|;
block|}
name|void
name|releaseTempCheckpoint
parameter_list|(
name|String
name|tempCheckpoint
parameter_list|)
block|{
name|this
operator|.
name|tempCps
operator|.
name|remove
argument_list|(
name|tempCheckpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTemporaryCheckpoints
parameter_list|()
block|{
return|return
name|tempCps
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getExecutionCount
parameter_list|()
block|{
return|return
name|execStats
operator|.
name|getExecutionCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getExecutionTime
parameter_list|()
block|{
return|return
name|execStats
operator|.
name|getExecutionTime
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getConsolidatedExecutionStats
parameter_list|()
block|{
return|return
name|execStats
operator|.
name|getConsolidatedStats
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetConsolidatedExecutionStats
parameter_list|()
block|{
name|execStats
operator|.
name|resetConsolidatedStats
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AsyncIndexStats [start="
operator|+
name|start
operator|+
literal|", done="
operator|+
name|done
operator|+
literal|", status="
operator|+
name|status
operator|+
literal|", paused="
operator|+
name|isPaused
operator|+
literal|", updates="
operator|+
name|updates
operator|+
literal|", referenceCheckpoint="
operator|+
name|referenceCp
operator|+
literal|", processedCheckpoint="
operator|+
name|processedCp
operator|+
literal|" ,tempCheckpoints="
operator|+
name|tempCps
operator|+
literal|" ]"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|execStats
operator|.
name|recordTick
argument_list|()
expr_stmt|;
block|}
specifier|private
class|class
name|ExecutionStats
block|{
specifier|private
specifier|final
name|TimeSeriesRecorder
name|execCounter
decl_stmt|;
specifier|private
specifier|final
name|TimeSeriesRecorder
name|execTimer
decl_stmt|;
comment|/**              * Captures consolidated execution stats since last reset              */
specifier|private
specifier|final
name|AtomicLong
name|consolidatedExecTime
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|consolidatedExecRuns
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|consolidatedNodes
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|names
init|=
block|{
literal|"Executions"
block|,
literal|"Execution Time"
block|,
literal|"Nodes"
block|}
decl_stmt|;
specifier|private
name|CompositeType
name|consolidatedType
decl_stmt|;
specifier|private
name|ExecutionStats
parameter_list|()
block|{
name|execCounter
operator|=
operator|new
name|TimeSeriesRecorder
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|execTimer
operator|=
operator|new
name|TimeSeriesRecorder
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|consolidatedType
operator|=
operator|new
name|CompositeType
argument_list|(
literal|"ConsolidatedStats"
argument_list|,
literal|"Consolidated stats"
argument_list|,
name|names
argument_list|,
name|names
argument_list|,
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|LONG
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"[{}] Error in creating CompositeType for consolidated stats"
argument_list|,
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|incrementCounter
parameter_list|()
block|{
name|execCounter
operator|.
name|getCounter
argument_list|()
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|consolidatedExecRuns
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|recordExecution
parameter_list|(
name|long
name|time
parameter_list|,
name|long
name|updates
parameter_list|)
block|{
name|execTimer
operator|.
name|getCounter
argument_list|()
operator|.
name|addAndGet
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|consolidatedExecTime
operator|.
name|addAndGet
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|consolidatedNodes
operator|.
name|addAndGet
argument_list|(
name|updates
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CompositeData
name|getExecutionCount
parameter_list|()
block|{
return|return
name|TimeSeriesStatsUtil
operator|.
name|asCompositeData
argument_list|(
name|execCounter
argument_list|,
literal|"ExecutionCount"
argument_list|)
return|;
block|}
specifier|private
name|CompositeData
name|getExecutionTime
parameter_list|()
block|{
return|return
name|TimeSeriesStatsUtil
operator|.
name|asCompositeData
argument_list|(
name|execTimer
argument_list|,
literal|"ExecutionTime"
argument_list|)
return|;
block|}
specifier|private
name|CompositeData
name|getConsolidatedStats
parameter_list|()
block|{
try|try
block|{
name|Long
index|[]
name|values
init|=
operator|new
name|Long
index|[]
block|{
name|consolidatedExecRuns
operator|.
name|longValue
argument_list|()
block|,
name|consolidatedExecTime
operator|.
name|longValue
argument_list|()
block|,
name|consolidatedNodes
operator|.
name|longValue
argument_list|()
block|}
decl_stmt|;
return|return
operator|new
name|CompositeDataSupport
argument_list|(
name|consolidatedType
argument_list|,
name|names
argument_list|,
name|values
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"[{}] Error retrieving consolidated stats"
argument_list|,
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|void
name|resetConsolidatedStats
parameter_list|()
block|{
name|consolidatedExecRuns
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|consolidatedExecTime
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|consolidatedNodes
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|recordTick
parameter_list|()
block|{
name|execCounter
operator|.
name|recordOneSecond
argument_list|()
expr_stmt|;
name|execTimer
operator|.
name|recordOneSecond
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|splitIndexingTask
parameter_list|(
name|String
name|paths
parameter_list|,
name|String
name|newIndexTaskName
parameter_list|)
block|{
name|splitIndexingTask
argument_list|(
name|newHashSet
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|split
argument_list|(
name|paths
argument_list|)
argument_list|)
argument_list|,
name|newIndexTaskName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|splitIndexingTask
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|,
name|String
name|newIndexTaskName
parameter_list|)
block|{
name|taskSplitter
operator|.
name|registerSplit
argument_list|(
name|paths
argument_list|,
name|newIndexTaskName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerAsyncIndexer
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|delayInSeconds
parameter_list|)
block|{
name|taskSplitter
operator|.
name|registerAsyncIndexer
argument_list|(
name|name
argument_list|,
name|delayInSeconds
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Checks whether there are no visible changes between the given states.      */
specifier|private
specifier|static
name|boolean
name|noVisibleChanges
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
return|return
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|NodeStateDiff
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
return|return
name|isHidden
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
return|return
name|isHidden
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
return|return
name|isHidden
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
return|return
name|isHidden
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
return|return
name|isHidden
argument_list|(
name|name
argument_list|)
operator|||
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
return|return
name|isHidden
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isHidden
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|':'
return|;
block|}
specifier|static
class|class
name|DefaultMissingIndexProviderStrategy
extends|extends
name|MissingIndexProviderStrategy
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|ignore
init|=
name|newHashSet
argument_list|(
literal|"disabled"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onMissingIndex
parameter_list|(
name|String
name|type
parameter_list|,
name|NodeBuilder
name|definition
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|ignore
operator|.
name|contains
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Async"
argument_list|,
literal|2
argument_list|,
literal|"Missing index provider detected for type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isFailing
parameter_list|()
block|{
return|return
name|failing
return|;
block|}
class|class
name|IndexTaskSpliter
block|{
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|newIndexTaskName
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|lastReferencedCp
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|registeredTasks
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|void
name|registerSplit
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|,
name|String
name|newIndexTaskName
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"[{}] Registered split of following index definitions {} to new async task {}."
argument_list|,
name|name
argument_list|,
name|paths
argument_list|,
name|newIndexTaskName
argument_list|)
expr_stmt|;
name|this
operator|.
name|paths
operator|=
name|newHashSet
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|this
operator|.
name|newIndexTaskName
operator|=
name|newIndexTaskName
expr_stmt|;
block|}
name|void
name|maybeSplit
parameter_list|(
annotation|@
name|CheckForNull
name|String
name|refCheckpoint
parameter_list|,
name|long
name|lease
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|paths
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|split
argument_list|(
name|refCheckpoint
argument_list|,
name|lease
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|split
parameter_list|(
annotation|@
name|CheckForNull
name|String
name|refCheckpoint
parameter_list|,
name|long
name|lease
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|refCheckpoint
operator|!=
literal|null
condition|)
block|{
name|NodeBuilder
name|async
init|=
name|builder
operator|.
name|child
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
comment|// add new reference
name|async
operator|.
name|setProperty
argument_list|(
name|newIndexTaskName
argument_list|,
name|refCheckpoint
argument_list|)
expr_stmt|;
comment|// update old 'temp' list: remove refcp so it doesn't get released on next run
name|Set
argument_list|<
name|String
argument_list|>
name|temps
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|cp
range|:
name|getStrings
argument_list|(
name|async
argument_list|,
name|tempCpName
argument_list|)
control|)
block|{
if|if
condition|(
name|cp
operator|.
name|equals
argument_list|(
name|refCheckpoint
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|temps
operator|.
name|add
argument_list|(
name|cp
argument_list|)
expr_stmt|;
block|}
name|async
operator|.
name|setProperty
argument_list|(
name|tempCpName
argument_list|,
name|temps
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|indexStats
operator|.
name|setTempCheckpoints
argument_list|(
name|temps
argument_list|)
expr_stmt|;
block|}
comment|// update index defs name => newIndexTaskName
name|Set
argument_list|<
name|String
argument_list|>
name|updated
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|NodeBuilder
name|c
init|=
name|builder
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|c
operator|=
name|c
operator|.
name|getChildNode
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|.
name|exists
argument_list|()
operator|&&
name|name
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getString
argument_list|(
literal|"async"
argument_list|)
argument_list|)
condition|)
block|{
name|c
operator|.
name|setProperty
argument_list|(
literal|"async"
argument_list|,
name|newIndexTaskName
argument_list|)
expr_stmt|;
name|updated
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|updated
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mergeWithConcurrencyCheck
argument_list|(
name|builder
argument_list|,
name|refCheckpoint
argument_list|,
name|lease
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"[{}] Successfully split index definitions {} to async task named {} with referenced checkpoint {}."
argument_list|,
name|name
argument_list|,
name|updated
argument_list|,
name|newIndexTaskName
argument_list|,
name|refCheckpoint
argument_list|)
expr_stmt|;
name|lastReferencedCp
operator|=
name|refCheckpoint
expr_stmt|;
block|}
name|paths
operator|=
literal|null
expr_stmt|;
name|newIndexTaskName
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getLastReferencedCp
parameter_list|()
block|{
return|return
name|lastReferencedCp
return|;
block|}
name|void
name|registerAsyncIndexer
parameter_list|(
name|String
name|newTask
parameter_list|,
name|long
name|delayInSeconds
parameter_list|)
block|{
if|if
condition|(
name|registeredTasks
operator|.
name|contains
argument_list|(
name|newTask
argument_list|)
condition|)
block|{
comment|// prevent accidental double call
name|log
operator|.
name|warn
argument_list|(
literal|"[{}] Task {} is already registered."
argument_list|,
name|name
argument_list|,
name|newTask
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|mbeanRegistration
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"[{}] Registering a new indexing task {} running each {} seconds."
argument_list|,
name|name
argument_list|,
name|newTask
argument_list|,
name|delayInSeconds
argument_list|)
expr_stmt|;
name|AsyncIndexUpdate
name|task
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
name|newTask
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|mbeanRegistration
operator|.
name|registerAsyncIndexer
argument_list|(
name|task
argument_list|,
name|delayInSeconds
argument_list|)
expr_stmt|;
name|registeredTasks
operator|.
name|add
argument_list|(
name|newTask
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|getStrings
parameter_list|(
name|NodeBuilder
name|b
parameter_list|,
name|String
name|p
parameter_list|)
block|{
name|PropertyState
name|ps
init|=
name|b
operator|.
name|getProperty
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|!=
literal|null
condition|)
block|{
return|return
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
return|;
block|}
return|return
name|newHashSet
argument_list|()
return|;
block|}
name|IndexTaskSpliter
name|getTaskSplitter
parameter_list|()
block|{
return|return
name|taskSplitter
return|;
block|}
specifier|public
name|void
name|setIndexMBeanRegistration
parameter_list|(
name|IndexMBeanRegistration
name|mbeanRegistration
parameter_list|)
block|{
name|this
operator|.
name|mbeanRegistration
operator|=
name|mbeanRegistration
expr_stmt|;
block|}
specifier|protected
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

