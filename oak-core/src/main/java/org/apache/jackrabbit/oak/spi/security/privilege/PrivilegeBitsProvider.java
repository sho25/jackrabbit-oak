begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Reads and writes privilege definitions from and to the repository content  * without applying any validation.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PrivilegeBitsProvider
implements|implements
name|PrivilegeConstants
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PrivilegeBitsProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|PrivilegeBits
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|bitsToNames
init|=
operator|new
name|HashMap
argument_list|<
name|PrivilegeBits
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|aggregation
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
specifier|public
name|PrivilegeBitsProvider
parameter_list|(
name|Root
name|root
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
block|}
comment|/**      * Returns the root tree for all privilege definitions stored in the content      * repository.      *      * @return The privileges root.      */
annotation|@
name|Nonnull
specifier|public
name|Tree
name|getPrivilegesTree
parameter_list|()
block|{
return|return
name|PrivilegeUtil
operator|.
name|getPrivilegesTree
argument_list|(
name|root
argument_list|)
return|;
block|}
comment|/**      * Returns the bits for the given privilege names      * @param privilegeNames the names      * @return the privilege bits      */
annotation|@
name|Nonnull
specifier|public
name|PrivilegeBits
name|getBits
parameter_list|(
annotation|@
name|Nonnull
name|String
modifier|...
name|privilegeNames
parameter_list|)
block|{
if|if
condition|(
name|privilegeNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|PrivilegeBits
operator|.
name|EMPTY
return|;
block|}
else|else
block|{
return|return
name|getBits
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|privilegeNames
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns the bits for the given privilege names      * @param privilegeNames the names      * @return the privilege bits      */
annotation|@
name|Nonnull
specifier|public
name|PrivilegeBits
name|getBits
parameter_list|(
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|String
argument_list|>
name|privilegeNames
parameter_list|)
block|{
if|if
condition|(
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|privilegeNames
argument_list|)
condition|)
block|{
return|return
name|PrivilegeBits
operator|.
name|EMPTY
return|;
block|}
name|Tree
name|privilegesTree
init|=
literal|null
decl_stmt|;
name|PrivilegeBits
name|bits
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|privilegeName
range|:
name|privilegeNames
control|)
block|{
name|PrivilegeBits
name|builtIn
init|=
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|privilegeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|builtIn
operator|!=
literal|null
condition|)
block|{
name|bits
operator|.
name|add
argument_list|(
name|builtIn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|privilegesTree
operator|==
literal|null
condition|)
block|{
name|privilegesTree
operator|=
name|getPrivilegesTree
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|privilegesTree
operator|.
name|exists
argument_list|()
operator|&&
name|privilegesTree
operator|.
name|hasChild
argument_list|(
name|privilegeName
argument_list|)
condition|)
block|{
name|Tree
name|defTree
init|=
name|privilegesTree
operator|.
name|getChild
argument_list|(
name|privilegeName
argument_list|)
decl_stmt|;
name|bits
operator|.
name|add
argument_list|(
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|defTree
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Ignoring privilege name "
operator|+
name|privilegeName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|bits
operator|.
name|unmodifiable
argument_list|()
return|;
block|}
comment|/**      * Returns the bits for the given privileges      *      * @param privileges the privileges      * @param nameMapper the name mapper      * @return the privilege bits      */
annotation|@
name|Nonnull
specifier|public
name|PrivilegeBits
name|getBits
parameter_list|(
annotation|@
name|Nonnull
name|Privilege
index|[]
name|privileges
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|NameMapper
name|nameMapper
parameter_list|)
block|{
return|return
name|getBits
argument_list|(
name|Iterables
operator|.
name|filter
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|privileges
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|Privilege
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|Privilege
name|privilege
parameter_list|)
block|{
if|if
condition|(
name|privilege
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|nameMapper
operator|.
name|getOakName
argument_list|(
name|privilege
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Unable to resolve OAK name of privilege "
operator|+
name|privilege
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// null privilege or failed to resolve the privilege name
return|return
literal|null
return|;
block|}
block|}
argument_list|)
argument_list|,
name|Predicates
operator|.
name|notNull
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Resolve the given privilege bits to a set of privilege names.      *      * @param privilegeBits An instance of privilege bits.      * @return The names of the registered privileges associated with the given      *         bits. Any bits that don't have a corresponding privilege definition will      *         be ignored.      */
annotation|@
name|Nonnull
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPrivilegeNames
parameter_list|(
name|PrivilegeBits
name|privilegeBits
parameter_list|)
block|{
if|if
condition|(
name|privilegeBits
operator|==
literal|null
operator|||
name|privilegeBits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
name|PrivilegeBits
name|pb
init|=
name|privilegeBits
operator|.
name|unmodifiable
argument_list|()
decl_stmt|;
if|if
condition|(
name|bitsToNames
operator|.
name|containsKey
argument_list|(
name|pb
argument_list|)
condition|)
block|{
comment|// matches all built-in aggregates and single built-in privileges
return|return
name|bitsToNames
operator|.
name|get
argument_list|(
name|pb
argument_list|)
return|;
block|}
else|else
block|{
name|Tree
name|privilegesTree
init|=
name|getPrivilegesTree
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|privilegesTree
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
if|if
condition|(
name|bitsToNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Tree
name|child
range|:
name|privilegesTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|bitsToNames
operator|.
name|put
argument_list|(
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|child
argument_list|)
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|privilegeNames
decl_stmt|;
if|if
condition|(
name|bitsToNames
operator|.
name|containsKey
argument_list|(
name|pb
argument_list|)
condition|)
block|{
name|privilegeNames
operator|=
name|bitsToNames
operator|.
name|get
argument_list|(
name|pb
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|privilegeNames
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|aggregates
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|privilegesTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|PrivilegeBits
name|bits
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|pb
operator|.
name|includes
argument_list|(
name|bits
argument_list|)
condition|)
block|{
name|privilegeNames
operator|.
name|add
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|hasProperty
argument_list|(
name|REP_AGGREGATES
argument_list|)
condition|)
block|{
name|aggregates
operator|.
name|addAll
argument_list|(
name|PrivilegeUtil
operator|.
name|readDefinition
argument_list|(
name|child
argument_list|)
operator|.
name|getDeclaredAggregateNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|privilegeNames
operator|.
name|removeAll
argument_list|(
name|aggregates
argument_list|)
expr_stmt|;
name|bitsToNames
operator|.
name|put
argument_list|(
name|pb
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|privilegeNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|privilegeNames
return|;
block|}
block|}
comment|/**      * Return the names of the non-aggregate privileges corresponding to the      * specified {@code privilegeNames}.      *      * @param privilegeNames The privilege names to be converted.      * @return The names of the non-aggregate privileges that correspond to the      * given {@code privilegeNames}.      */
annotation|@
name|Nonnull
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getAggregatedPrivilegeNames
parameter_list|(
annotation|@
name|Nonnull
name|String
modifier|...
name|privilegeNames
parameter_list|)
block|{
if|if
condition|(
name|privilegeNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|privilegeNames
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|String
name|privName
init|=
name|privilegeNames
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|NON_AGGREGATE_PRIVILEGES
operator|.
name|contains
argument_list|(
name|privName
argument_list|)
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
name|privName
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|aggregation
operator|.
name|containsKey
argument_list|(
name|privName
argument_list|)
condition|)
block|{
return|return
name|aggregation
operator|.
name|get
argument_list|(
name|privName
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|AGGREGATE_PRIVILEGES
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|privName
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|aggregates
init|=
name|resolveBuiltInAggregation
argument_list|(
name|privName
argument_list|)
decl_stmt|;
name|aggregation
operator|.
name|put
argument_list|(
name|privName
argument_list|,
name|aggregates
argument_list|)
expr_stmt|;
return|return
name|aggregates
return|;
block|}
else|else
block|{
return|return
name|extractAggregatedPrivileges
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|privName
argument_list|)
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|pNames
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|privilegeNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|NON_AGGREGATE_PRIVILEGES
operator|.
name|containsAll
argument_list|(
name|pNames
argument_list|)
condition|)
block|{
return|return
name|pNames
return|;
block|}
else|else
block|{
return|return
name|extractAggregatedPrivileges
argument_list|(
name|pNames
argument_list|)
return|;
block|}
block|}
block|}
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|extractAggregatedPrivileges
parameter_list|(
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|String
argument_list|>
name|privilegeNames
parameter_list|)
block|{
return|return
name|FluentIterable
operator|.
name|from
argument_list|(
name|privilegeNames
argument_list|)
operator|.
name|transformAndConcat
argument_list|(
operator|new
name|ExtractAggregatedPrivileges
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|resolveBuiltInAggregation
parameter_list|(
annotation|@
name|Nonnull
name|String
name|privilegeName
parameter_list|)
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|AGGREGATE_PRIVILEGES
operator|.
name|get
argument_list|(
name|privilegeName
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|AGGREGATE_PRIVILEGES
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|resolveBuiltInAggregation
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|aggregation
operator|.
name|put
argument_list|(
name|privilegeName
argument_list|,
name|set
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
specifier|private
specifier|final
class|class
name|ExtractAggregatedPrivileges
implements|implements
name|Function
argument_list|<
name|String
argument_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|apply
parameter_list|(
annotation|@
name|Nullable
name|String
name|privName
parameter_list|)
block|{
if|if
condition|(
name|privName
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
name|NON_AGGREGATE_PRIVILEGES
operator|.
name|contains
argument_list|(
name|privName
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|privName
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|aggregation
operator|.
name|containsKey
argument_list|(
name|privName
argument_list|)
condition|)
block|{
return|return
name|aggregation
operator|.
name|get
argument_list|(
name|privName
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|AGGREGATE_PRIVILEGES
operator|.
name|containsKey
argument_list|(
name|privName
argument_list|)
condition|)
block|{
return|return
name|resolveBuiltInAggregation
argument_list|(
name|privName
argument_list|)
return|;
block|}
else|else
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|fillAggregation
argument_list|(
name|getPrivilegesTree
argument_list|()
operator|.
name|getChild
argument_list|(
name|privName
argument_list|)
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|aggregates
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|JCR_ALL
operator|.
name|equals
argument_list|(
name|privName
argument_list|)
operator|&&
operator|!
name|aggregates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|aggregation
operator|.
name|put
argument_list|(
name|privName
argument_list|,
name|aggregates
argument_list|)
expr_stmt|;
block|}
return|return
name|aggregates
return|;
block|}
block|}
block|}
specifier|private
name|void
name|fillAggregation
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|privTree
parameter_list|,
annotation|@
name|Nonnull
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
parameter_list|)
block|{
if|if
condition|(
operator|!
name|privTree
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
name|PropertyState
name|aggregates
init|=
name|privTree
operator|.
name|getProperty
argument_list|(
name|REP_AGGREGATES
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggregates
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|aggregates
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
control|)
block|{
if|if
condition|(
name|NON_AGGREGATE_PRIVILEGES
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|aggregation
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|aggregation
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|AGGREGATE_PRIVILEGES
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|resolveBuiltInAggregation
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fillAggregation
argument_list|(
name|privTree
operator|.
name|getParent
argument_list|()
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|builder
operator|.
name|add
argument_list|(
name|privTree
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

