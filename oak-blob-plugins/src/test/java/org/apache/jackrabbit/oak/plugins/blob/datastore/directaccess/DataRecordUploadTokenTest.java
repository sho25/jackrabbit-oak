begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|DataRecordUploadTokenTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|BLOB_ID
init|=
literal|"blob"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UPLOAD_ID
init|=
literal|"upload"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|SECRET
init|=
literal|"1234567890"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testUploadToken
parameter_list|()
block|{
name|String
name|encodedToken
init|=
operator|new
name|DataRecordUploadToken
argument_list|(
name|BLOB_ID
argument_list|,
name|UPLOAD_ID
argument_list|)
operator|.
name|getEncodedToken
argument_list|(
name|SECRET
argument_list|)
decl_stmt|;
comment|// also check token can be parsed and is valid
name|DataRecordUploadToken
name|parsedToken
init|=
name|DataRecordUploadToken
operator|.
name|fromEncodedToken
argument_list|(
name|encodedToken
argument_list|,
name|SECRET
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|BLOB_ID
argument_list|,
name|parsedToken
operator|.
name|getBlobId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parsedToken
operator|.
name|getUploadId
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UPLOAD_ID
argument_list|,
name|parsedToken
operator|.
name|getUploadId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUploadTokenIsAscii
parameter_list|()
block|{
comment|// run a few times to rule out the (low) chance it is ascii just by chance; the seed will change regularly
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|String
name|encodedToken
init|=
operator|new
name|DataRecordUploadToken
argument_list|(
name|BLOB_ID
argument_list|,
name|UPLOAD_ID
argument_list|)
operator|.
name|getEncodedToken
argument_list|(
name|SECRET
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"upload token is not ascii: "
operator|+
name|encodedToken
argument_list|,
name|StringUtils
operator|.
name|isAsciiPrintable
argument_list|(
name|encodedToken
argument_list|)
argument_list|)
expr_stmt|;
comment|// also check token can be parsed and is valid
name|DataRecordUploadToken
name|parsedToken
init|=
name|DataRecordUploadToken
operator|.
name|fromEncodedToken
argument_list|(
name|encodedToken
argument_list|,
name|SECRET
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|BLOB_ID
argument_list|,
name|parsedToken
operator|.
name|getBlobId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parsedToken
operator|.
name|getUploadId
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UPLOAD_ID
argument_list|,
name|parsedToken
operator|.
name|getUploadId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUploadTokenSignature
parameter_list|()
block|{
comment|// simple test to check the signature is present and validated
name|String
name|spoofedToken
init|=
name|Base64
operator|.
name|encodeBase64String
argument_list|(
operator|(
name|BLOB_ID
operator|+
literal|"#"
operator|+
name|UPLOAD_ID
operator|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|DataRecordUploadToken
operator|.
name|fromEncodedToken
argument_list|(
name|spoofedToken
argument_list|,
name|SECRET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{         }
block|}
block|}
end_class

end_unit

