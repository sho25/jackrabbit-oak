begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|MoveTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ValidatorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|lifecycle
operator|.
name|CompositeInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|lifecycle
operator|.
name|CompositeWorkspaceInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|lifecycle
operator|.
name|RepositoryInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|lifecycle
operator|.
name|WorkspaceInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedItemImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|TreeLocation
import|;
end_import

begin_comment
comment|/**  * Abstract base implementation for {@link SecurityConfiguration}s that can  * combine different implementations.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|CompositeConfiguration
parameter_list|<
name|T
extends|extends
name|SecurityConfiguration
parameter_list|>
implements|implements
name|SecurityConfiguration
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|configurations
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|SecurityProvider
name|securityProvider
decl_stmt|;
specifier|public
name|CompositeConfiguration
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|,
annotation|@
name|Nonnull
name|SecurityProvider
name|securityProvider
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|securityProvider
operator|=
name|securityProvider
expr_stmt|;
block|}
specifier|public
name|void
name|addConfiguration
parameter_list|(
annotation|@
name|Nonnull
name|T
name|configuration
parameter_list|)
block|{
name|configurations
operator|.
name|add
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeConfiguration
parameter_list|(
annotation|@
name|Nonnull
name|T
name|configuration
parameter_list|)
block|{
name|configurations
operator|.
name|remove
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|List
argument_list|<
name|T
argument_list|>
name|getConfigurations
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|configurations
argument_list|)
return|;
block|}
specifier|protected
name|SecurityProvider
name|getSecurityProvider
parameter_list|()
block|{
return|return
name|securityProvider
return|;
block|}
comment|//----------------------------------------------< SecurityConfiguration>---
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|ConfigurationParameters
name|getParameters
parameter_list|()
block|{
name|ConfigurationParameters
index|[]
name|params
init|=
operator|new
name|ConfigurationParameters
index|[
name|configurations
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|configurations
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|params
index|[
name|i
index|]
operator|=
name|configurations
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getParameters
argument_list|()
expr_stmt|;
block|}
return|return
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|params
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|WorkspaceInitializer
name|getWorkspaceInitializer
parameter_list|()
block|{
return|return
operator|new
name|CompositeWorkspaceInitializer
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|configurations
argument_list|,
operator|new
name|Function
argument_list|<
name|T
argument_list|,
name|WorkspaceInitializer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|WorkspaceInitializer
name|apply
parameter_list|(
name|T
name|securityConfiguration
parameter_list|)
block|{
return|return
name|securityConfiguration
operator|.
name|getWorkspaceInitializer
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|RepositoryInitializer
name|getRepositoryInitializer
parameter_list|()
block|{
return|return
operator|new
name|CompositeInitializer
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|configurations
argument_list|,
operator|new
name|Function
argument_list|<
name|T
argument_list|,
name|RepositoryInitializer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RepositoryInitializer
name|apply
parameter_list|(
name|T
name|securityConfiguration
parameter_list|)
block|{
return|return
name|securityConfiguration
operator|.
name|getRepositoryInitializer
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|CommitHook
argument_list|>
name|getCommitHooks
parameter_list|(
specifier|final
name|String
name|workspaceName
parameter_list|)
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|configurations
argument_list|,
operator|new
name|Function
argument_list|<
name|T
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|CommitHook
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|CommitHook
argument_list|>
name|apply
parameter_list|(
name|T
name|securityConfiguration
parameter_list|)
block|{
return|return
name|securityConfiguration
operator|.
name|getCommitHooks
argument_list|(
name|workspaceName
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|ValidatorProvider
argument_list|>
name|getValidators
parameter_list|(
specifier|final
name|String
name|workspaceName
parameter_list|,
specifier|final
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|,
specifier|final
name|MoveTracker
name|moveTracker
parameter_list|)
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|configurations
argument_list|,
operator|new
name|Function
argument_list|<
name|T
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|ValidatorProvider
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|ValidatorProvider
argument_list|>
name|apply
parameter_list|(
name|T
name|securityConfiguration
parameter_list|)
block|{
return|return
name|securityConfiguration
operator|.
name|getValidators
argument_list|(
name|workspaceName
argument_list|,
name|principals
argument_list|,
name|moveTracker
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ProtectedItemImporter
argument_list|>
name|getProtectedItemImporters
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|configurations
argument_list|,
operator|new
name|Function
argument_list|<
name|T
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|ProtectedItemImporter
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|ProtectedItemImporter
argument_list|>
name|apply
parameter_list|(
name|T
name|securityConfiguration
parameter_list|)
block|{
return|return
name|securityConfiguration
operator|.
name|getProtectedItemImporters
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Context
name|getContext
parameter_list|()
block|{
return|return
operator|new
name|Context
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|definesProperty
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|parent
parameter_list|,
annotation|@
name|Nonnull
name|PropertyState
name|property
parameter_list|)
block|{
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|configurations
control|)
block|{
if|if
condition|(
name|sc
operator|.
name|getContext
argument_list|()
operator|.
name|definesProperty
argument_list|(
name|parent
argument_list|,
name|property
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|definesContextRoot
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|)
block|{
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|configurations
control|)
block|{
if|if
condition|(
name|sc
operator|.
name|getContext
argument_list|()
operator|.
name|definesContextRoot
argument_list|(
name|tree
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|definesTree
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|)
block|{
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|configurations
control|)
block|{
if|if
condition|(
name|sc
operator|.
name|getContext
argument_list|()
operator|.
name|definesTree
argument_list|(
name|tree
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|definesLocation
parameter_list|(
annotation|@
name|Nonnull
name|TreeLocation
name|location
parameter_list|)
block|{
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|configurations
control|)
block|{
if|if
condition|(
name|sc
operator|.
name|getContext
argument_list|()
operator|.
name|definesLocation
argument_list|(
name|location
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

