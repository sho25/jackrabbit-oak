begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|ExerciseUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|ExerciseUtility
operator|.
name|TEST_USER_HINT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|ExerciseUtility
operator|.
name|TEST_GROUP_HINT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|ExerciseUtility
operator|.
name|TEST_PRINCIPAL_HINT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|ExerciseUtility
operator|.
name|TEST_GROUP_PRINCIPAL_HINT
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: User Management | Principal Management  * =============================================================================  *  * Title: User vs. Principal  * -----------------------------------------------------------------------------  *  * Goal:  * Understand the difference between {@link org.apache.jackrabbit.api.security.user.User}  * and {@link java.security.Principal}.  *  * Exercises:  *  * - {@link #testLookup()}  *   Test case illustrating lookup of principals and authorizables by principal  *   name and ID as well as authorizable lookup by principal.  *   Fix the test-case and making you familiar with the distiction between  *   the ID and the principal name in the first place.  *  * - {@link #testCreateUserWithGroupPrincipalName()}  *   This test attempts to create a new user with a principal that is already  *   used by a Group. Complete the test-case such that it passes.  *  * - {@link #testCreateWithReverse()}  *   Test case that attempts to create a user using the principal name of another  *   user as ID and vice versa. Complete|Fix the test and explain the expected  *   and the actually behavior.  *  *  * Additional Exercises:  * -----------------------------------------------------------------------------  *  * - {@link #testLoginWithPrincipalName()}  *   Test case creating SimpleCredentials from principal name + password and create a  *   new ContentSession from these credentials. Fix the case and make the  *   appropriate assertions.  *  * - {@link #testAccessControlEntryWithId()}  *   Test case attempting to create a new access control entry for a principal  *   based from an authorizable ID. Fix the case and make the appropriate assertions.  *  *  * Related Exercises:  * -----------------------------------------------------------------------------  *  * - {@link org.apache.jackrabbit.oak.security.authentication.L2_AuthInfoTest}  *   For tests related to exposure of principal and ID upon successful login.  *  * - {@link L6_AuthorizableContentTest}  *   for tests related to the content structure of users/groups and how the  *   ID and the principal name are represented there.  *  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|L3_UserVsPrincipalTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|String
name|testId
init|=
name|ExerciseUtility
operator|.
name|getTestId
argument_list|(
name|TEST_USER_HINT
argument_list|)
decl_stmt|;
specifier|private
name|Principal
name|testPrincipal
init|=
name|ExerciseUtility
operator|.
name|getTestPrincipal
argument_list|(
name|TEST_PRINCIPAL_HINT
argument_list|)
decl_stmt|;
specifier|private
name|String
name|testGroupId
init|=
name|ExerciseUtility
operator|.
name|getTestId
argument_list|(
name|TEST_GROUP_HINT
argument_list|)
decl_stmt|;
specifier|private
name|Principal
name|testGroupPrincipal
init|=
name|ExerciseUtility
operator|.
name|getTestPrincipal
argument_list|(
name|TEST_GROUP_PRINCIPAL_HINT
argument_list|)
decl_stmt|;
specifier|private
name|User
name|testUser
decl_stmt|;
specifier|private
name|Group
name|testGroup
decl_stmt|;
specifier|private
name|PrincipalManager
name|principalManager
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|UserManager
name|userMgr
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|testUser
operator|=
name|ExerciseUtility
operator|.
name|createTestUser
argument_list|(
name|userMgr
argument_list|)
expr_stmt|;
name|testGroup
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|testGroupId
argument_list|,
name|testGroupPrincipal
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|testGroup
operator|.
name|addMember
argument_list|(
name|testUser
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|principalManager
operator|=
name|getPrincipalManager
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|testUser
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLookup
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
index|[]
argument_list|>
name|resultMap
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|testId
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|,
name|testPrincipal
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|,
name|testGroupId
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|null
block|,
literal|null
block|}
argument_list|,
name|testGroupPrincipal
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|null
block|,
literal|null
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|resultMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Object
index|[]
name|result
init|=
name|resultMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// lookup principal by "ID"
name|Principal
name|expectedP
init|=
operator|(
name|Principal
operator|)
name|result
index|[
literal|0
index|]
decl_stmt|;
name|Principal
name|principal
init|=
name|principalManager
operator|.
name|getPrincipal
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedP
argument_list|,
name|principal
argument_list|)
expr_stmt|;
comment|// lookup authorizable by "principal"
name|Principal
name|p
init|=
operator|new
name|PrincipalImpl
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Authorizable
name|a
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedP
argument_list|,
name|a
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// lookup Authorizable by "ID"
name|Authorizable
name|expectedA
init|=
operator|(
name|Authorizable
operator|)
name|result
index|[
literal|1
index|]
decl_stmt|;
name|a
operator|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedA
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateUserWithGroupPrincipalName
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|CommitFailedException
block|{
comment|// EXERCISE: fix the test-case with the correct assertions and exception catching! And explain why...
name|User
name|user2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|user2
operator|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createUser
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ExerciseUtility
operator|.
name|TEST_PW
argument_list|,
name|testGroupPrincipal
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|user2
operator|!=
literal|null
condition|)
block|{
name|user2
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateWithReverse
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|CommitFailedException
block|{
comment|// EXERCISE: fix the test-case with the correct assertions and exception catching!
comment|// EXERCISE: if creating the user suceeds : verify if the testUser and user2 are equal. explain why!
name|User
name|user2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|user2
operator|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createUser
argument_list|(
name|testPrincipal
operator|.
name|getName
argument_list|()
argument_list|,
name|ExerciseUtility
operator|.
name|TEST_PW
argument_list|,
operator|new
name|PrincipalImpl
argument_list|(
name|testId
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Boolean
name|expectedEquals
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedEquals
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|testUser
operator|.
name|equals
argument_list|(
name|user2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|user2
operator|!=
literal|null
condition|)
block|{
name|user2
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoginWithPrincipalName
parameter_list|()
throws|throws
name|Exception
block|{
comment|// EXERCISE fix the test case and add proper verification
name|login
argument_list|(
name|ExerciseUtility
operator|.
name|getTestCredentials
argument_list|(
name|testPrincipal
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAccessControlEntryWithId
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
comment|// EXERCISE fix the test case
name|String
index|[]
name|ids
init|=
operator|new
name|String
index|[]
block|{
name|testId
block|,
name|testGroupId
block|}
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|AccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
name|id
argument_list|)
argument_list|,
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

