begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * {@code PermissionEntries} holds the permission entries of one principal  */
end_comment

begin_class
class|class
name|PrincipalPermissionEntries
block|{
specifier|private
specifier|final
name|long
name|expectedSize
decl_stmt|;
comment|/**      * indicating if all entries were loaded.      */
specifier|private
name|boolean
name|fullyLoaded
decl_stmt|;
comment|/**      * map of permission entries, accessed by path      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
argument_list|>
name|entries
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|emptyPaths
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|PrincipalPermissionEntries
parameter_list|()
block|{
name|this
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
name|PrincipalPermissionEntries
parameter_list|(
name|long
name|expectedSize
parameter_list|)
block|{
name|this
operator|.
name|expectedSize
operator|=
name|expectedSize
expr_stmt|;
name|fullyLoaded
operator|=
operator|(
name|expectedSize
operator|==
literal|0
operator|)
expr_stmt|;
block|}
name|long
name|getSize
parameter_list|()
block|{
return|return
name|entries
operator|.
name|size
argument_list|()
operator|+
name|emptyPaths
operator|.
name|size
argument_list|()
return|;
block|}
name|boolean
name|isFullyLoaded
parameter_list|()
block|{
return|return
name|fullyLoaded
return|;
block|}
name|void
name|setFullyLoaded
parameter_list|(
name|boolean
name|fullyLoaded
parameter_list|)
block|{
name|this
operator|.
name|fullyLoaded
operator|=
name|fullyLoaded
expr_stmt|;
block|}
annotation|@
name|NotNull
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
argument_list|>
name|getEntries
parameter_list|()
block|{
return|return
name|entries
return|;
block|}
annotation|@
name|Nullable
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
name|getEntriesByPath
parameter_list|(
annotation|@
name|NotNull
name|String
name|path
parameter_list|)
block|{
return|return
operator|(
name|emptyPaths
operator|.
name|contains
argument_list|(
name|path
argument_list|)
operator|)
condition|?
name|Collections
operator|.
name|emptySet
argument_list|()
else|:
name|entries
operator|.
name|get
argument_list|(
name|path
argument_list|)
return|;
block|}
name|void
name|putEntriesByPath
parameter_list|(
annotation|@
name|NotNull
name|String
name|path
parameter_list|,
annotation|@
name|NotNull
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
name|pathEntries
parameter_list|)
block|{
name|entries
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|pathEntries
argument_list|)
expr_stmt|;
if|if
condition|(
name|entries
operator|.
name|size
argument_list|()
operator|>=
name|expectedSize
condition|)
block|{
name|setFullyLoaded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|rememberNotAccessControlled
parameter_list|(
annotation|@
name|NotNull
name|String
name|path
parameter_list|)
block|{
name|emptyPaths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|void
name|putAllEntries
parameter_list|(
annotation|@
name|NotNull
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
argument_list|>
name|allEntries
parameter_list|)
block|{
name|entries
operator|.
name|putAll
argument_list|(
name|allEntries
argument_list|)
expr_stmt|;
name|setFullyLoaded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

