begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|TokenizerChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|writer
operator|.
name|CommitMitigatingTieredMergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FieldNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|IndexFormatVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|LimitTokenCountAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|PerFieldAnalyzerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|path
operator|.
name|PathHierarchyTokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LogByteSizeMergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LogDocMergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NoMergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TieredMergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|ANL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|INDEX_ORIGINAL_TERM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|VERSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|util
operator|.
name|ConfigUtil
operator|.
name|getOptionalValue
import|;
end_import

begin_class
specifier|public
class|class
name|LuceneIndexDefinition
extends|extends
name|IndexDefinition
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LuceneIndexDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|saveDirListing
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
name|analyzers
decl_stmt|;
specifier|private
specifier|final
name|Analyzer
name|analyzer
decl_stmt|;
specifier|private
specifier|final
name|Codec
name|codec
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxFieldLength
decl_stmt|;
specifier|public
name|LuceneIndexDefinition
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|NodeState
name|defn
parameter_list|,
name|String
name|indexPath
parameter_list|)
block|{
name|this
argument_list|(
name|root
argument_list|,
name|getIndexDefinitionState
argument_list|(
name|defn
argument_list|)
argument_list|,
name|determineIndexFormatVersion
argument_list|(
name|defn
argument_list|)
argument_list|,
name|determineUniqueId
argument_list|(
name|defn
argument_list|)
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
block|}
name|LuceneIndexDefinition
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|NodeState
name|defn
parameter_list|,
name|IndexFormatVersion
name|version
parameter_list|,
name|String
name|uid
parameter_list|,
name|String
name|indexPath
parameter_list|)
block|{
name|super
argument_list|(
name|root
argument_list|,
name|defn
argument_list|,
name|version
argument_list|,
name|uid
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|saveDirListing
operator|=
name|getOptionalValue
argument_list|(
name|defn
argument_list|,
name|LuceneIndexConstants
operator|.
name|SAVE_DIR_LISTING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxFieldLength
operator|=
name|getOptionalValue
argument_list|(
name|defn
argument_list|,
name|LuceneIndexConstants
operator|.
name|MAX_FIELD_LENGTH
argument_list|,
name|DEFAULT_MAX_FIELD_LENGTH
argument_list|)
expr_stmt|;
name|this
operator|.
name|analyzers
operator|=
name|collectAnalyzers
argument_list|(
name|defn
argument_list|)
expr_stmt|;
name|this
operator|.
name|analyzer
operator|=
name|createAnalyzer
argument_list|()
expr_stmt|;
name|this
operator|.
name|codec
operator|=
name|createCodec
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|NodeState
name|defn
parameter_list|,
name|String
name|indexPath
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
operator|new
name|Builder
argument_list|()
operator|.
name|root
argument_list|(
name|root
argument_list|)
operator|.
name|defn
argument_list|(
name|defn
argument_list|)
operator|.
name|indexPath
argument_list|(
name|indexPath
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|Builder
extends|extends
name|IndexDefinition
operator|.
name|Builder
block|{
annotation|@
name|Override
specifier|public
name|LuceneIndexDefinition
name|build
parameter_list|()
block|{
return|return
operator|(
name|LuceneIndexDefinition
operator|)
name|super
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|LuceneIndexDefinition
operator|.
name|Builder
name|reindex
parameter_list|()
block|{
name|super
operator|.
name|reindex
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|protected
name|IndexDefinition
name|createInstance
parameter_list|(
name|NodeState
name|indexDefnStateToUse
parameter_list|)
block|{
return|return
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|indexDefnStateToUse
argument_list|,
name|version
argument_list|,
name|uid
argument_list|,
name|indexPath
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getDefaultFunctionName
parameter_list|()
block|{
return|return
literal|"lucene"
return|;
comment|//TODO should this be LuceneIndexConstants.TYPE_LUCENE?
block|}
annotation|@
name|Override
specifier|protected
name|double
name|getDefaultCostPerEntry
parameter_list|(
name|IndexFormatVersion
name|version
parameter_list|)
block|{
comment|//For older format cost per entry would be higher as it does a runtime
comment|//aggregation
return|return
name|version
operator|==
name|IndexFormatVersion
operator|.
name|V1
condition|?
literal|1.5
else|:
literal|1.0
return|;
block|}
specifier|public
name|boolean
name|saveDirListing
parameter_list|()
block|{
return|return
name|saveDirListing
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|Codec
name|getCodec
parameter_list|()
block|{
return|return
name|codec
return|;
block|}
annotation|@
name|NotNull
specifier|public
name|MergePolicy
name|getMergePolicy
parameter_list|()
block|{
comment|// MP is not cached to avoid complaining about multiple IWs with multiplexing writers
return|return
name|createMergePolicy
argument_list|()
return|;
block|}
specifier|public
name|Analyzer
name|getAnalyzer
parameter_list|()
block|{
return|return
name|analyzer
return|;
block|}
comment|//~---------------------------------------------------< Analyzer>
specifier|private
name|Analyzer
name|createAnalyzer
parameter_list|()
block|{
name|Analyzer
name|result
decl_stmt|;
name|Analyzer
name|defaultAnalyzer
init|=
name|LuceneIndexConstants
operator|.
name|ANALYZER
decl_stmt|;
if|if
condition|(
name|analyzers
operator|.
name|containsKey
argument_list|(
name|ANL_DEFAULT
argument_list|)
condition|)
block|{
name|defaultAnalyzer
operator|=
name|analyzers
operator|.
name|get
argument_list|(
name|ANL_DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|evaluatePathRestrictions
argument_list|()
condition|)
block|{
name|result
operator|=
name|defaultAnalyzer
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
name|analyzerMap
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Analyzer
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
name|FieldNames
operator|.
name|ANCESTORS
argument_list|,
operator|new
name|TokenizerChain
argument_list|(
operator|new
name|PathHierarchyTokenizerFactory
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|result
operator|=
operator|new
name|PerFieldAnalyzerWrapper
argument_list|(
name|defaultAnalyzer
argument_list|,
name|analyzerMap
argument_list|)
expr_stmt|;
block|}
comment|//In case of negative value no limits would be applied
if|if
condition|(
name|maxFieldLength
operator|<
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
return|return
operator|new
name|LimitTokenCountAnalyzer
argument_list|(
name|result
argument_list|,
name|maxFieldLength
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
name|collectAnalyzers
parameter_list|(
name|NodeState
name|defn
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
name|analyzerMap
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|NodeStateAnalyzerFactory
name|factory
init|=
operator|new
name|NodeStateAnalyzerFactory
argument_list|(
name|VERSION
argument_list|)
decl_stmt|;
name|NodeState
name|analyzersTree
init|=
name|defn
operator|.
name|getChildNode
argument_list|(
name|LuceneIndexConstants
operator|.
name|ANALYZERS
argument_list|)
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|cne
range|:
name|analyzersTree
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|Analyzer
name|a
init|=
name|factory
operator|.
name|createInstance
argument_list|(
name|cne
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|analyzerMap
operator|.
name|put
argument_list|(
name|cne
operator|.
name|getName
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getOptionalValue
argument_list|(
name|analyzersTree
argument_list|,
name|INDEX_ORIGINAL_TERM
argument_list|,
literal|false
argument_list|)
operator|&&
operator|!
name|analyzerMap
operator|.
name|containsKey
argument_list|(
name|ANL_DEFAULT
argument_list|)
condition|)
block|{
name|analyzerMap
operator|.
name|put
argument_list|(
name|ANL_DEFAULT
argument_list|,
operator|new
name|OakAnalyzer
argument_list|(
name|VERSION
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|analyzerMap
argument_list|)
return|;
block|}
comment|//~---------------------------------------------< utility>
specifier|private
name|Codec
name|createCodec
parameter_list|()
block|{
name|String
name|codecName
init|=
name|getOptionalValue
argument_list|(
name|definition
argument_list|,
name|LuceneIndexConstants
operator|.
name|CODEC_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Codec
name|codec
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|codecName
operator|!=
literal|null
condition|)
block|{
comment|// prevent LUCENE-6482
comment|// (also done in LuceneIndexProviderService, just to be save)
name|OakCodec
name|ensureLucene46CodecLoaded
init|=
operator|new
name|OakCodec
argument_list|()
decl_stmt|;
comment|// to ensure the JVM doesn't optimize away object creation
comment|// (probably not really needed; just to be save)
name|log
operator|.
name|debug
argument_list|(
literal|"Lucene46Codec is loaded: {}"
argument_list|,
name|ensureLucene46CodecLoaded
argument_list|)
expr_stmt|;
name|codec
operator|=
name|Codec
operator|.
name|forName
argument_list|(
name|codecName
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Codec is loaded: {}"
argument_list|,
name|codecName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fullTextEnabled
condition|)
block|{
name|codec
operator|=
operator|new
name|OakCodec
argument_list|()
expr_stmt|;
block|}
return|return
name|codec
return|;
block|}
specifier|private
name|MergePolicy
name|createMergePolicy
parameter_list|()
block|{
name|String
name|mmp
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.lucene.cmmp"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mmp
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|CommitMitigatingTieredMergePolicy
argument_list|()
return|;
block|}
name|String
name|mergePolicyName
init|=
name|getOptionalValue
argument_list|(
name|definition
argument_list|,
name|LuceneIndexConstants
operator|.
name|MERGE_POLICY_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MergePolicy
name|mergePolicy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mergePolicyName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mergePolicyName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"no"
argument_list|)
condition|)
block|{
name|mergePolicy
operator|=
name|NoMergePolicy
operator|.
name|COMPOUND_FILES
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mergePolicyName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mitigated"
argument_list|)
condition|)
block|{
name|mergePolicy
operator|=
operator|new
name|CommitMitigatingTieredMergePolicy
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mergePolicyName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"tiered"
argument_list|)
operator|||
name|mergePolicyName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"default"
argument_list|)
condition|)
block|{
name|mergePolicy
operator|=
operator|new
name|TieredMergePolicy
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mergePolicyName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"logbyte"
argument_list|)
condition|)
block|{
name|mergePolicy
operator|=
operator|new
name|LogByteSizeMergePolicy
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mergePolicyName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"logdoc"
argument_list|)
condition|)
block|{
name|mergePolicy
operator|=
operator|new
name|LogDocMergePolicy
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mergePolicy
operator|==
literal|null
condition|)
block|{
name|mergePolicy
operator|=
operator|new
name|TieredMergePolicy
argument_list|()
expr_stmt|;
block|}
return|return
name|mergePolicy
return|;
block|}
block|}
end_class

end_unit

