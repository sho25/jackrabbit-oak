begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|FieldNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|DirectSpellChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|SuggestWord
import|;
end_import

begin_comment
comment|/**  * Helper class for getting spellcheck results for a given term, calling a {@link org.apache.lucene.search.spell.DirectSpellChecker}  * under the hood.  */
end_comment

begin_class
specifier|public
class|class
name|SpellcheckHelper
block|{
specifier|public
specifier|static
name|SuggestWord
index|[]
name|getSpellcheck
parameter_list|(
name|String
name|spellcheckQueryString
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
block|{
name|DirectSpellChecker
name|spellChecker
init|=
operator|new
name|DirectSpellChecker
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|text
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|param
range|:
name|spellcheckQueryString
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
control|)
block|{
name|String
index|[]
name|keyValuePair
init|=
name|param
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyValuePair
operator|.
name|length
operator|!=
literal|2
operator|||
name|keyValuePair
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|keyValuePair
index|[
literal|1
index|]
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unparsable native Lucene Spellcheck query: "
operator|+
name|spellcheckQueryString
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
literal|"term"
operator|.
name|equals
argument_list|(
name|keyValuePair
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|text
operator|=
name|keyValuePair
index|[
literal|1
index|]
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
return|return
name|spellChecker
operator|.
name|suggestSimilar
argument_list|(
operator|new
name|Term
argument_list|(
name|FieldNames
operator|.
name|FULLTEXT
argument_list|,
name|text
argument_list|)
argument_list|,
literal|10
argument_list|,
name|reader
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SuggestWord
index|[
literal|0
index|]
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"could not handle Spellcheck query "
operator|+
name|spellcheckQueryString
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

