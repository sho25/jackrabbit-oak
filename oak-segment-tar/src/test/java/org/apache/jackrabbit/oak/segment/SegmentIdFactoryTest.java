begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|memory
operator|.
name|MemoryStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SegmentIdFactoryTest
block|{
specifier|private
specifier|final
name|SegmentStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|SegmentTracker
name|tracker
decl_stmt|;
specifier|public
name|SegmentIdFactoryTest
parameter_list|()
throws|throws
name|IOException
block|{
name|store
operator|=
operator|new
name|MemoryStore
argument_list|()
expr_stmt|;
name|tracker
operator|=
name|store
operator|.
name|getTracker
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|segmentIdType
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|tracker
operator|.
name|newDataSegmentId
argument_list|()
operator|.
name|isDataSegmentId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tracker
operator|.
name|newBulkSegmentId
argument_list|()
operator|.
name|isBulkSegmentId
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tracker
operator|.
name|newDataSegmentId
argument_list|()
operator|.
name|isBulkSegmentId
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tracker
operator|.
name|newBulkSegmentId
argument_list|()
operator|.
name|isDataSegmentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|internedSegmentIds
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|tracker
operator|.
name|getSegmentId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|==
name|tracker
operator|.
name|getSegmentId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tracker
operator|.
name|getSegmentId
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|==
name|tracker
operator|.
name|getSegmentId
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tracker
operator|.
name|getSegmentId
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|!=
name|tracker
operator|.
name|getSegmentId
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|referencedSegmentIds
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|SegmentId
name|a
init|=
name|tracker
operator|.
name|newDataSegmentId
argument_list|()
decl_stmt|;
name|SegmentId
name|b
init|=
name|tracker
operator|.
name|newBulkSegmentId
argument_list|()
decl_stmt|;
name|SegmentId
name|c
init|=
name|tracker
operator|.
name|newDataSegmentId
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|SegmentId
argument_list|>
name|ids
init|=
name|tracker
operator|.
name|getReferencedSegmentIds
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|ids
operator|.
name|contains
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ids
operator|.
name|contains
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ids
operator|.
name|contains
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
comment|// the returned set is a snapshot in time, not continuously updated
name|assertFalse
argument_list|(
name|ids
operator|.
name|contains
argument_list|(
name|tracker
operator|.
name|newBulkSegmentId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test can't be enabled in general, as gc() contract is too      * weak for this to work reliably. But it's a good manual check for      * the correct operation of the tracking of segment id references.      */
comment|// @Test
specifier|public
name|void
name|garbageCollection
parameter_list|()
block|{
name|SegmentId
name|a
init|=
name|tracker
operator|.
name|newDataSegmentId
argument_list|()
decl_stmt|;
name|SegmentId
name|b
init|=
name|tracker
operator|.
name|newBulkSegmentId
argument_list|()
decl_stmt|;
comment|// generate lots of garbage copies of an UUID to get the
comment|// garbage collector to reclaim also the original instance
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000000
condition|;
name|i
operator|++
control|)
block|{
name|a
operator|=
operator|new
name|SegmentId
argument_list|(
literal|null
argument_list|,
name|a
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|a
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
comment|// now the original UUID should no longer be present
name|Set
argument_list|<
name|SegmentId
argument_list|>
name|ids
init|=
name|tracker
operator|.
name|getReferencedSegmentIds
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|ids
operator|.
name|contains
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ids
operator|.
name|contains
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * OAK-2049 - error for data segments      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|dataAIOOBE
parameter_list|()
throws|throws
name|IOException
block|{
name|MemoryStore
name|store
init|=
operator|new
name|MemoryStore
argument_list|()
decl_stmt|;
name|Segment
name|segment
init|=
name|store
operator|.
name|getHead
argument_list|()
operator|.
name|getSegment
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|segment
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|segment
operator|.
name|readBytes
argument_list|(
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
operator|-
name|segment
operator|.
name|size
argument_list|()
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|segment
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SegmentId
name|id
init|=
name|tracker
operator|.
name|newDataSegmentId
argument_list|()
decl_stmt|;
name|ByteBuffer
name|data
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|Segment
name|s
init|=
operator|new
name|Segment
argument_list|(
name|store
argument_list|,
name|id
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|s
operator|.
name|getRefId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * OAK-2049 - error for bulk segments      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|bulkAIOOBE
parameter_list|()
block|{
name|SegmentId
name|id
init|=
name|tracker
operator|.
name|newBulkSegmentId
argument_list|()
decl_stmt|;
name|ByteBuffer
name|data
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|Segment
name|s
init|=
operator|new
name|Segment
argument_list|(
name|store
argument_list|,
name|id
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|s
operator|.
name|getRefId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

