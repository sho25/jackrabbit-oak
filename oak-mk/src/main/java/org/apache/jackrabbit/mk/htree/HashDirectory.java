begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|htree
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|ChildNodeEntries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|Id
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|RevisionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|RevisionStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|RevisionStore
operator|.
name|PutToken
import|;
end_import

begin_comment
comment|/**  * Directory structure in an<code>HTree</code>.   */
end_comment

begin_class
class|class
name|HashDirectory
implements|implements
name|ChildNodeEntries
block|{
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|ChildNodeEntry
argument_list|>
name|EMPTY
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_CHILDREN
init|=
literal|256
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BIT_SIZE
init|=
literal|8
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_DEPTH
init|=
literal|3
decl_stmt|;
specifier|private
specifier|final
name|RevisionProvider
name|provider
decl_stmt|;
specifier|private
specifier|final
name|int
name|depth
decl_stmt|;
specifier|private
name|int
name|count
decl_stmt|;
specifier|private
name|IndexEntry
index|[]
name|index
init|=
operator|new
name|IndexEntry
index|[
name|MAX_CHILDREN
index|]
decl_stmt|;
specifier|public
name|HashDirectory
parameter_list|(
name|RevisionProvider
name|provider
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
name|this
operator|.
name|depth
operator|=
name|depth
expr_stmt|;
block|}
specifier|public
name|HashDirectory
parameter_list|(
name|HashDirectory
name|other
parameter_list|)
block|{
name|provider
operator|=
name|other
operator|.
name|provider
expr_stmt|;
name|depth
operator|=
name|other
operator|.
name|depth
expr_stmt|;
name|count
operator|=
name|other
operator|.
name|count
expr_stmt|;
name|index
operator|=
name|other
operator|.
name|index
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|HashDirectory
name|clone
init|=
literal|null
decl_stmt|;
try|try
block|{
name|clone
operator|=
operator|(
name|HashDirectory
operator|)
name|super
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
comment|// can't possibly get here
block|}
comment|// shallow clone of array of immutable IndexEntry objects
name|clone
operator|.
name|index
operator|=
name|index
operator|.
name|clone
argument_list|()
expr_stmt|;
return|return
name|clone
return|;
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
specifier|public
name|ChildNodeEntry
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|hash
init|=
name|hashCode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|IndexEntry
name|ie
init|=
name|index
index|[
name|hash
index|]
decl_stmt|;
if|if
condition|(
name|ie
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|ie
operator|instanceof
name|ChildNodeEntry
condition|)
block|{
name|ChildNodeEntry
name|cne
init|=
operator|(
name|ChildNodeEntry
operator|)
name|ie
decl_stmt|;
return|return
name|cne
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
name|cne
else|:
literal|null
return|;
block|}
name|ChildNodeEntries
name|container
init|=
operator|(
operator|(
name|ContainerEntry
operator|)
name|ie
operator|)
operator|.
name|getContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
return|return
name|container
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|getEntries
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|<
literal|0
operator|||
name|count
operator|<
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
if|if
condition|(
name|offset
operator|>=
name|this
operator|.
name|count
operator|||
name|count
operator|==
literal|0
condition|)
block|{
return|return
name|EMPTY
operator|.
name|iterator
argument_list|()
return|;
block|}
name|int
name|skipped
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|count
operator|==
operator|-
literal|1
operator|||
operator|(
name|offset
operator|+
name|count
operator|)
operator|>
name|this
operator|.
name|count
condition|)
block|{
name|count
operator|=
name|this
operator|.
name|count
operator|-
name|offset
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|ChildNodeEntry
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|(
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexEntry
name|ie
range|:
name|index
control|)
block|{
if|if
condition|(
name|ie
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|skipped
operator|+
name|ie
operator|.
name|getSize
argument_list|()
operator|<=
name|offset
condition|)
block|{
name|skipped
operator|+=
name|ie
operator|.
name|getSize
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|ie
operator|instanceof
name|ChildNodeEntry
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|(
name|ChildNodeEntry
operator|)
name|ie
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ChildNodeEntries
name|container
init|=
operator|(
operator|(
name|ContainerEntry
operator|)
name|ie
operator|)
operator|.
name|getContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|it
init|=
name|container
operator|.
name|getEntries
argument_list|(
name|offset
operator|-
name|skipped
argument_list|,
name|count
operator|-
name|list
operator|.
name|size
argument_list|()
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|skipped
operator|=
name|offset
expr_stmt|;
block|}
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
name|count
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|list
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|ChildNodeEntry
name|add
parameter_list|(
name|ChildNodeEntry
name|entry
parameter_list|)
block|{
name|int
name|hash
init|=
name|hashCode
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|IndexEntry
name|ie
init|=
name|index
index|[
name|hash
index|]
decl_stmt|;
if|if
condition|(
name|ie
operator|==
literal|null
condition|)
block|{
name|index
index|[
name|hash
index|]
operator|=
operator|new
name|NodeEntry
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|ie
operator|instanceof
name|ChildNodeEntry
condition|)
block|{
name|ChildNodeEntry
name|existing
init|=
operator|(
name|ChildNodeEntry
operator|)
name|ie
decl_stmt|;
if|if
condition|(
name|existing
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|index
index|[
name|hash
index|]
operator|=
operator|new
name|NodeEntry
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|existing
return|;
block|}
else|else
block|{
name|ContainerEntry
name|ce
init|=
name|createContainerEntry
argument_list|()
decl_stmt|;
name|ce
operator|.
name|getContainer
argument_list|()
operator|.
name|add
argument_list|(
name|existing
argument_list|)
expr_stmt|;
name|ce
operator|.
name|getContainer
argument_list|()
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|index
index|[
name|hash
index|]
operator|=
name|ce
expr_stmt|;
name|count
operator|++
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|ContainerEntry
name|ce
init|=
operator|(
name|ContainerEntry
operator|)
name|ie
decl_stmt|;
name|ChildNodeEntries
name|container
init|=
name|ce
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|ChildNodeEntry
name|existing
init|=
name|container
operator|.
name|add
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|equals
argument_list|(
name|existing
argument_list|)
condition|)
block|{
comment|// no-op
return|return
name|existing
return|;
block|}
name|ce
operator|.
name|setDirty
argument_list|(
name|container
argument_list|)
expr_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
comment|// new entry
name|count
operator|++
expr_stmt|;
block|}
return|return
name|existing
return|;
block|}
specifier|public
name|ChildNodeEntry
name|remove
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|hash
init|=
name|hashCode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|IndexEntry
name|ie
init|=
name|index
index|[
name|hash
index|]
decl_stmt|;
if|if
condition|(
name|ie
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|ie
operator|instanceof
name|ChildNodeEntry
condition|)
block|{
name|ChildNodeEntry
name|existing
init|=
operator|(
name|ChildNodeEntry
operator|)
name|ie
decl_stmt|;
if|if
condition|(
name|existing
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|index
index|[
name|hash
index|]
operator|=
literal|null
expr_stmt|;
name|count
operator|--
expr_stmt|;
return|return
name|existing
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
name|ContainerEntry
name|ce
init|=
operator|(
name|ContainerEntry
operator|)
name|ie
decl_stmt|;
name|ChildNodeEntries
name|container
init|=
name|ce
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|ChildNodeEntry
name|existing
init|=
name|container
operator|.
name|remove
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|container
operator|.
name|getCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|index
index|[
name|hash
index|]
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|container
operator|.
name|getCount
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// inline single remaining entry
name|ChildNodeEntry
name|remaining
init|=
name|container
operator|.
name|getEntries
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|next
argument_list|()
decl_stmt|;
name|index
index|[
name|hash
index|]
operator|=
operator|new
name|NodeEntry
argument_list|(
name|remaining
operator|.
name|getName
argument_list|()
argument_list|,
name|remaining
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ce
operator|.
name|setDirty
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
name|count
operator|--
expr_stmt|;
return|return
name|existing
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|getAdded
parameter_list|(
name|ChildNodeEntries
name|otherContainer
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|otherContainer
operator|instanceof
name|HashDirectory
operator|)
condition|)
block|{
comment|// needs no implementation
return|return
literal|null
return|;
block|}
name|HashDirectory
name|other
init|=
operator|(
name|HashDirectory
operator|)
name|otherContainer
decl_stmt|;
name|List
argument_list|<
name|ChildNodeEntry
argument_list|>
name|added
init|=
operator|new
name|ArrayList
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|IndexEntry
name|ie1
init|=
name|index
index|[
name|i
index|]
decl_stmt|;
name|IndexEntry
name|ie2
init|=
name|other
operator|.
name|index
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|ie1
operator|==
literal|null
operator|&&
name|ie2
operator|==
literal|null
operator|||
operator|(
name|ie1
operator|!=
literal|null
operator|&&
name|ie1
operator|.
name|equals
argument_list|(
name|ie2
argument_list|)
operator|)
condition|)
block|{
continue|continue;
block|}
comment|// index entries aren't equal
if|if
condition|(
name|ie1
operator|==
literal|null
condition|)
block|{
comment|// this index entry in null => other must be non-null, add all its entries
if|if
condition|(
name|ie2
operator|instanceof
name|ChildNodeEntry
condition|)
block|{
name|added
operator|.
name|add
argument_list|(
operator|(
name|ChildNodeEntry
operator|)
name|ie2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ChildNodeEntries
name|container
init|=
operator|(
operator|(
name|ContainerEntry
operator|)
name|ie2
operator|)
operator|.
name|getContainer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|it
init|=
name|container
operator|.
name|getEntries
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|added
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
continue|continue;
block|}
comment|// optimization for simple child node entries
if|if
condition|(
name|ie1
operator|instanceof
name|ChildNodeEntry
operator|&&
name|ie2
operator|instanceof
name|ChildNodeEntry
condition|)
block|{
name|ChildNodeEntry
name|cne1
init|=
operator|(
name|ChildNodeEntry
operator|)
name|ie1
decl_stmt|;
name|ChildNodeEntry
name|cne2
init|=
operator|(
name|ChildNodeEntry
operator|)
name|ie2
decl_stmt|;
if|if
condition|(
name|cne2
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|cne1
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|added
operator|.
name|add
argument_list|(
name|cne2
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
comment|// all other cases
for|for
control|(
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|it
init|=
name|ie1
operator|.
name|getAdded
argument_list|(
name|ie2
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|added
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|added
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|getModified
parameter_list|(
name|ChildNodeEntries
name|otherContainer
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|otherContainer
operator|instanceof
name|HashDirectory
operator|)
condition|)
block|{
comment|// needs no implementation
return|return
literal|null
return|;
block|}
name|HashDirectory
name|other
init|=
operator|(
name|HashDirectory
operator|)
name|otherContainer
decl_stmt|;
name|List
argument_list|<
name|ChildNodeEntry
argument_list|>
name|modified
init|=
operator|new
name|ArrayList
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|IndexEntry
name|ie1
init|=
name|index
index|[
name|i
index|]
decl_stmt|;
name|IndexEntry
name|ie2
init|=
name|other
operator|.
name|index
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|ie1
operator|==
literal|null
operator|||
name|ie2
operator|==
literal|null
operator|||
name|ie1
operator|.
name|equals
argument_list|(
name|ie2
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// optimization for simple child node entries
if|if
condition|(
name|ie1
operator|instanceof
name|ChildNodeEntry
operator|&&
name|ie2
operator|instanceof
name|ChildNodeEntry
condition|)
block|{
name|ChildNodeEntry
name|cne1
init|=
operator|(
name|ChildNodeEntry
operator|)
name|ie1
decl_stmt|;
name|ChildNodeEntry
name|cne2
init|=
operator|(
name|ChildNodeEntry
operator|)
name|ie2
decl_stmt|;
if|if
condition|(
name|cne1
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|cne2
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
name|cne1
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|cne2
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|modified
operator|.
name|add
argument_list|(
name|cne1
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
comment|// all other cases
for|for
control|(
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|it
init|=
name|ie1
operator|.
name|getModified
argument_list|(
name|ie2
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|modified
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|modified
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|private
name|ContainerEntry
name|createContainerEntry
parameter_list|()
block|{
return|return
name|depth
operator|<
name|MAX_DEPTH
operator|-
literal|1
condition|?
operator|new
name|DirectoryEntry
argument_list|(
name|depth
operator|+
literal|1
argument_list|)
else|:
operator|new
name|BucketEntry
argument_list|()
return|;
block|}
specifier|private
name|int
name|hashCode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|hashMask
init|=
name|hashMask
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|name
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|hash
operator|=
name|hash
operator|&
name|hashMask
expr_stmt|;
name|hash
operator|=
name|hash
operator|>>>
operator|(
operator|(
name|MAX_DEPTH
operator|-
name|depth
operator|)
operator|*
name|BIT_SIZE
operator|)
expr_stmt|;
name|hash
operator|=
name|hash
operator|%
name|MAX_CHILDREN
expr_stmt|;
return|return
name|hash
return|;
block|}
name|int
name|hashMask
parameter_list|()
block|{
name|int
name|bits
init|=
name|MAX_CHILDREN
operator|-
literal|1
decl_stmt|;
name|int
name|hashMask
init|=
name|bits
operator|<<
operator|(
operator|(
name|MAX_DEPTH
operator|-
name|depth
operator|)
operator|*
name|BIT_SIZE
operator|)
decl_stmt|;
return|return
name|hashMask
return|;
block|}
specifier|public
name|void
name|deserialize
parameter_list|(
name|Binding
name|binding
parameter_list|)
throws|throws
name|Exception
block|{
name|count
operator|=
name|binding
operator|.
name|readIntValue
argument_list|(
literal|":count"
argument_list|)
expr_stmt|;
name|Binding
operator|.
name|StringEntryIterator
name|iter
init|=
name|binding
operator|.
name|readStringMap
argument_list|(
literal|":index"
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Binding
operator|.
name|StringEntry
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
operator|++
name|pos
expr_stmt|;
comment|// deserialize index array entry
assert|assert
operator|(
name|pos
operator|==
name|Integer
operator|.
name|parseInt
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
assert|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// ""
name|index
index|[
name|pos
index|]
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
condition|)
block|{
case|case
literal|'n'
case|:
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|i
init|=
name|value
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|value
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|index
index|[
name|pos
index|]
operator|=
operator|new
name|NodeEntry
argument_list|(
name|name
argument_list|,
name|Id
operator|.
name|fromString
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'b'
case|:
name|value
operator|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|i
operator|=
name|value
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|id
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|index
index|[
name|pos
index|]
operator|=
operator|new
name|BucketEntry
argument_list|(
name|provider
argument_list|,
name|Id
operator|.
name|fromString
argument_list|(
name|id
argument_list|)
argument_list|,
name|count
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'d'
case|:
name|value
operator|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|i
operator|=
name|value
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|id
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|count
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|index
index|[
name|pos
index|]
operator|=
operator|new
name|DirectoryEntry
argument_list|(
name|provider
argument_list|,
name|Id
operator|.
name|fromString
argument_list|(
name|id
argument_list|)
argument_list|,
name|count
argument_list|,
name|depth
operator|+
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|HashDirectory
condition|)
block|{
name|HashDirectory
name|other
init|=
operator|(
name|HashDirectory
operator|)
name|obj
decl_stmt|;
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|index
argument_list|,
name|other
operator|.
name|index
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|prePersist
parameter_list|(
name|RevisionStore
name|store
parameter_list|,
name|PutToken
name|token
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|index
index|[
name|i
index|]
operator|instanceof
name|ContainerEntry
condition|)
block|{
name|ContainerEntry
name|ce
init|=
operator|(
name|ContainerEntry
operator|)
name|index
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|ce
operator|.
name|isDirty
argument_list|()
condition|)
block|{
name|ce
operator|.
name|store
argument_list|(
name|store
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|serialize
parameter_list|(
name|Binding
name|binding
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|IndexEntry
index|[]
name|index
init|=
name|this
operator|.
name|index
decl_stmt|;
name|binding
operator|.
name|write
argument_list|(
literal|":count"
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|binding
operator|.
name|writeMap
argument_list|(
literal|":index"
argument_list|,
name|index
operator|.
name|length
argument_list|,
operator|new
name|Binding
operator|.
name|StringEntryIterator
argument_list|()
block|{
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|pos
operator|<
name|index
operator|.
name|length
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Binding
operator|.
name|StringEntry
name|next
parameter_list|()
block|{
name|pos
operator|++
expr_stmt|;
if|if
condition|(
name|pos
operator|>=
name|index
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
comment|// serialize index array entry
name|IndexEntry
name|entry
init|=
name|index
index|[
name|pos
index|]
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
comment|// null entry: ""
return|return
operator|new
name|Binding
operator|.
name|StringEntry
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|pos
argument_list|)
argument_list|,
literal|""
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Binding
operator|.
name|StringEntry
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|pos
argument_list|)
argument_list|,
name|entry
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Entry inside this directory's index.      */
specifier|static
interface|interface
name|IndexEntry
block|{
specifier|public
name|int
name|getSize
parameter_list|()
function_decl|;
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|getAdded
parameter_list|(
name|IndexEntry
name|other
parameter_list|)
function_decl|;
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|getModified
parameter_list|(
name|IndexEntry
name|other
parameter_list|)
function_decl|;
block|}
comment|/**      * Direct entry inside this directory's index, pointing to a child node.      */
specifier|static
class|class
name|NodeEntry
extends|extends
name|ChildNodeEntry
implements|implements
name|IndexEntry
block|{
specifier|public
name|NodeEntry
parameter_list|(
name|String
name|name
parameter_list|,
name|Id
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|getAdded
parameter_list|(
name|IndexEntry
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ChildNodeEntries
name|container
init|=
operator|(
operator|(
name|ContainerEntry
operator|)
name|other
operator|)
operator|.
name|createCompatibleContainer
argument_list|()
decl_stmt|;
name|container
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|container
operator|.
name|getAdded
argument_list|(
operator|(
operator|(
name|ContainerEntry
operator|)
name|other
operator|)
operator|.
name|getContainer
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|getModified
parameter_list|(
name|IndexEntry
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ChildNodeEntries
name|container
init|=
operator|(
operator|(
name|ContainerEntry
operator|)
name|other
operator|)
operator|.
name|createCompatibleContainer
argument_list|()
decl_stmt|;
name|container
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|container
operator|.
name|getModified
argument_list|(
operator|(
operator|(
name|ContainerEntry
operator|)
name|other
operator|)
operator|.
name|getContainer
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"n"
operator|+
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|getName
argument_list|()
return|;
block|}
block|}
comment|/**      * Container entry inside this directory's index, pointing to either a      * directory or a bucket.      */
specifier|static
specifier|abstract
class|class
name|ContainerEntry
implements|implements
name|IndexEntry
block|{
specifier|protected
name|RevisionProvider
name|provider
decl_stmt|;
specifier|protected
name|Id
name|id
decl_stmt|;
specifier|protected
name|int
name|count
decl_stmt|;
specifier|protected
name|ChildNodeEntries
name|container
decl_stmt|;
specifier|public
name|ContainerEntry
parameter_list|(
name|RevisionProvider
name|provider
parameter_list|,
name|Id
name|id
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
block|}
specifier|public
name|ContainerEntry
parameter_list|()
block|{         }
specifier|public
specifier|abstract
name|ChildNodeEntries
name|getContainer
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|ChildNodeEntries
name|createCompatibleContainer
parameter_list|()
function_decl|;
specifier|public
name|boolean
name|isDirty
parameter_list|()
block|{
return|return
name|container
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDirty
parameter_list|(
name|ChildNodeEntries
name|container
parameter_list|)
block|{
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
block|}
specifier|public
name|Id
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
return|return
name|container
operator|.
name|getCount
argument_list|()
return|;
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|other
operator|instanceof
name|ContainerEntry
condition|)
block|{
name|ContainerEntry
name|ce
init|=
operator|(
name|ContainerEntry
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|container
operator|!=
literal|null
operator|&&
name|ce
operator|.
name|container
operator|!=
literal|null
condition|)
block|{
return|return
name|container
operator|.
name|equals
argument_list|(
name|ce
operator|.
name|container
argument_list|)
return|;
block|}
if|if
condition|(
name|container
operator|==
literal|null
operator|&&
name|ce
operator|.
name|container
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|count
operator|==
name|ce
operator|.
name|count
operator|&&
name|id
operator|==
literal|null
condition|?
name|ce
operator|.
name|id
operator|==
literal|null
else|:
name|id
operator|.
name|equals
argument_list|(
name|ce
operator|.
name|id
argument_list|)
operator|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|getAdded
parameter_list|(
name|IndexEntry
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|other
operator|instanceof
name|ChildNodeEntry
condition|)
block|{
name|ChildNodeEntries
name|container
init|=
name|createCompatibleContainer
argument_list|()
decl_stmt|;
name|container
operator|.
name|add
argument_list|(
operator|(
name|ChildNodeEntry
operator|)
name|other
argument_list|)
expr_stmt|;
return|return
name|getContainer
argument_list|()
operator|.
name|getAdded
argument_list|(
name|container
argument_list|)
return|;
block|}
return|return
name|getContainer
argument_list|()
operator|.
name|getAdded
argument_list|(
operator|(
operator|(
name|ContainerEntry
operator|)
name|other
operator|)
operator|.
name|getContainer
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|getModified
parameter_list|(
name|IndexEntry
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|other
operator|instanceof
name|ChildNodeEntry
condition|)
block|{
name|ChildNodeEntries
name|container
init|=
name|createCompatibleContainer
argument_list|()
decl_stmt|;
name|container
operator|.
name|add
argument_list|(
operator|(
name|ChildNodeEntry
operator|)
name|other
argument_list|)
expr_stmt|;
return|return
name|getContainer
argument_list|()
operator|.
name|getModified
argument_list|(
name|container
argument_list|)
return|;
block|}
return|return
name|getContainer
argument_list|()
operator|.
name|getModified
argument_list|(
operator|(
operator|(
name|ContainerEntry
operator|)
name|other
operator|)
operator|.
name|getContainer
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|store
parameter_list|(
name|RevisionStore
name|store
parameter_list|,
name|PutToken
name|token
parameter_list|)
throws|throws
name|Exception
block|{
name|store
operator|.
name|putCNEMap
argument_list|(
name|token
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Directory entry inside this directory's index, pointing to a directory on the      * next level.      */
specifier|static
class|class
name|DirectoryEntry
extends|extends
name|ContainerEntry
block|{
specifier|private
specifier|final
name|int
name|depth
decl_stmt|;
specifier|public
name|DirectoryEntry
parameter_list|(
name|RevisionProvider
name|provider
parameter_list|,
name|Id
name|id
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|super
argument_list|(
name|provider
argument_list|,
name|id
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|this
operator|.
name|depth
operator|=
name|depth
expr_stmt|;
block|}
specifier|public
name|DirectoryEntry
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
name|this
operator|.
name|depth
operator|=
name|depth
expr_stmt|;
block|}
specifier|public
name|ChildNodeEntries
name|getContainer
parameter_list|()
block|{
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
return|return
name|container
return|;
block|}
try|try
block|{
comment|// TODO return provider.getCNEMap(id);
return|return
operator|new
name|HashDirectory
argument_list|(
name|provider
argument_list|,
name|depth
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// todo log error and gracefully handle exception
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|ChildNodeEntries
name|createCompatibleContainer
parameter_list|()
block|{
return|return
operator|new
name|HashDirectory
argument_list|(
name|provider
argument_list|,
name|depth
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"d"
operator|+
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|getSize
argument_list|()
return|;
block|}
specifier|public
name|void
name|store
parameter_list|(
name|RevisionStore
name|store
parameter_list|,
name|PutToken
name|token
parameter_list|)
throws|throws
name|Exception
block|{
operator|(
operator|(
name|HashDirectory
operator|)
name|container
operator|)
operator|.
name|prePersist
argument_list|(
name|store
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|super
operator|.
name|store
argument_list|(
name|store
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Bucket entry inside this directory's index, pointing to a bucket or leaf node.      */
specifier|static
class|class
name|BucketEntry
extends|extends
name|ContainerEntry
block|{
specifier|public
name|BucketEntry
parameter_list|(
name|RevisionProvider
name|provider
parameter_list|,
name|Id
name|id
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|super
argument_list|(
name|provider
argument_list|,
name|id
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BucketEntry
parameter_list|()
block|{         }
specifier|public
name|HashBucket
name|getContainer
parameter_list|()
block|{
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|HashBucket
operator|)
name|container
return|;
block|}
try|try
block|{
return|return
operator|new
name|HashBucket
argument_list|(
name|provider
operator|.
name|getCNEMap
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// todo log error and gracefully handle exception
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|ChildNodeEntries
name|createCompatibleContainer
parameter_list|()
block|{
return|return
operator|new
name|HashBucket
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"b"
operator|+
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|getSize
argument_list|()
return|;
block|}
block|}
comment|// ------------------------------------------------------------------------------------------- unimplemented methods
annotation|@
name|Override
specifier|public
name|boolean
name|inlined
parameter_list|()
block|{
throw|throw
operator|new
name|NoSuchMethodError
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getNames
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|count
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchMethodError
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ChildNodeEntry
name|rename
parameter_list|(
name|String
name|oldName
parameter_list|,
name|String
name|newName
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchMethodError
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|getRemoved
parameter_list|(
name|ChildNodeEntries
name|other
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchMethodError
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMemory
parameter_list|()
block|{
comment|// assuming a fixed size of 1000 entries, each with 100 bytes, plus 100
comment|// bytes overhead
name|int
name|memory
init|=
literal|100
operator|+
literal|1000
operator|*
literal|100
decl_stmt|;
return|return
name|memory
return|;
block|}
block|}
end_class

end_unit

