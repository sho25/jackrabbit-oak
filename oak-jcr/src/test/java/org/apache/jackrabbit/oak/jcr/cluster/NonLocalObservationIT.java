begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|cluster
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|ObservationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|observation
operator|.
name|JackrabbitEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test for external events from another cluster node.  */
end_comment

begin_class
specifier|public
class|class
name|NonLocalObservationIT
extends|extends
name|AbstractClusterTest
block|{
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|exception
init|=
operator|new
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|NodeStoreFixture
name|getFixture
parameter_list|()
block|{
return|return
operator|new
name|NodeStoreFixture
argument_list|()
block|{
specifier|private
name|DocumentStore
name|documentStore
decl_stmt|;
specifier|private
name|DocumentStore
name|getDocumentStore
parameter_list|()
block|{
if|if
condition|(
name|documentStore
operator|==
literal|null
condition|)
block|{
name|documentStore
operator|=
operator|new
name|MemoryDocumentStore
argument_list|()
expr_stmt|;
block|}
return|return
name|documentStore
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TestNodeStoreFixture"
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeStore
name|createNodeStore
parameter_list|()
block|{
return|return
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|getDocumentStore
argument_list|()
argument_list|)
operator|.
name|getNodeStore
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeStore
name|createNodeStore
parameter_list|(
name|int
name|clusterNodeId
parameter_list|)
block|{
return|return
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|getDocumentStore
argument_list|()
argument_list|)
operator|.
name|setClusterId
argument_list|(
name|clusterNodeId
argument_list|)
operator|.
name|getNodeStore
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|private
name|void
name|addEventHandler
parameter_list|(
name|Session
name|s
parameter_list|,
specifier|final
name|String
name|expectedNodeSuffix
parameter_list|)
throws|throws
name|Exception
block|{
name|ObservationManager
name|o
init|=
name|s
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getObservationManager
argument_list|()
decl_stmt|;
name|o
operator|.
name|addEventListener
argument_list|(
operator|new
name|EventListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
name|EventIterator
name|events
parameter_list|)
block|{
while|while
condition|(
name|events
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Event
name|e
init|=
name|events
operator|.
name|nextEvent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|JackrabbitEvent
operator|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|(
operator|(
name|JackrabbitEvent
operator|)
name|e
operator|)
operator|.
name|isExternal
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|p
decl_stmt|;
try|try
block|{
name|p
operator|=
name|e
operator|.
name|getPath
argument_list|()
expr_stmt|;
comment|// System.out.println("expectedNodeSuffix:
comment|// "+expectedNodeSuffix+", path: " + p);
if|if
condition|(
operator|!
name|p
operator|.
name|endsWith
argument_list|(
name|expectedNodeSuffix
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"EXCEPTION: expectedNodeSuffix: "
operator|+
name|expectedNodeSuffix
operator|+
literal|", path: "
operator|+
name|p
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"expectedNodeSuffix: "
operator|+
name|expectedNodeSuffix
operator|+
literal|", non-local path: "
operator|+
name|p
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|exception
operator|.
name|set
argument_list|(
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|,
name|Event
operator|.
name|NODE_ADDED
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|randomized
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|Date
argument_list|()
operator|+
literal|": initialization"
argument_list|)
expr_stmt|;
if|if
condition|(
name|s1
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|s1
operator|.
name|itemExists
argument_list|(
literal|"/test"
argument_list|)
condition|)
block|{
name|s1
operator|.
name|getNode
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|s1
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|s1
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"test"
argument_list|,
literal|"oak:Unstructured"
argument_list|)
expr_stmt|;
name|s1
operator|.
name|save
argument_list|()
expr_stmt|;
name|addEventHandler
argument_list|(
name|s1
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|addEventHandler
argument_list|(
name|s2
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// phase 1 is measuring how long 10000 iterations take
comment|// (is taking 4-6sec on my laptop)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|Date
argument_list|()
operator|+
literal|": measuring 10000 iterations..."
argument_list|)
expr_stmt|;
name|long
name|scaleMeasurement
init|=
name|doRandomized
argument_list|(
name|r
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
comment|// phase 2 is 10 times measuring how long subsequent 10000 iterations take
comment|//  (this used to fail due to 'many commit roots')
name|boolean
name|ignoreFirstSpike
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|14
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|Date
argument_list|()
operator|+
literal|": test run of 10000 iterations..."
argument_list|)
expr_stmt|;
name|long
name|testMeasurement
init|=
name|doRandomized
argument_list|(
name|r
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|Exception
name|e
init|=
name|exception
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
throw|throw
name|e
throw|;
block|}
comment|// the testMeasurement should now take less than 100% in relation to
comment|// the
comment|// scaleMeasurement
name|long
name|max
init|=
call|(
name|long
call|)
argument_list|(
name|scaleMeasurement
operator|*
literal|2
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|Date
argument_list|()
operator|+
literal|": test run took "
operator|+
name|testMeasurement
operator|+
literal|", scaleMeasurement="
operator|+
name|scaleMeasurement
operator|+
literal|", plus 100% margin: "
operator|+
name|max
argument_list|)
expr_stmt|;
if|if
condition|(
name|testMeasurement
operator|>=
name|max
operator|&&
name|ignoreFirstSpike
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|Date
argument_list|()
operator|+
literal|": this iteration would have failed, but we're now allowing one spike (ignoreFirstSpike)"
argument_list|)
expr_stmt|;
name|ignoreFirstSpike
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
name|assertTrue
argument_list|(
literal|"test run ("
operator|+
name|testMeasurement
operator|+
literal|") took more than 50% longer than initial measurement ("
operator|+
name|scaleMeasurement
operator|+
literal|") (check VM memory settings)"
argument_list|,
name|testMeasurement
operator|<
name|max
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|long
name|doRandomized
parameter_list|(
name|Random
name|r
parameter_list|,
name|long
name|loopCnt
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|lastOut
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loopCnt
operator|&&
name|exception
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|diff
init|=
name|now
operator|-
name|lastOut
decl_stmt|;
name|lastOut
operator|=
name|now
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|Date
argument_list|()
operator|+
literal|": diff: "
operator|+
name|diff
operator|+
literal|" for "
operator|+
name|i
operator|+
literal|"/"
operator|+
literal|100000
argument_list|)
expr_stmt|;
block|}
name|int
name|sId
init|=
name|r
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|1
else|:
literal|2
decl_stmt|;
name|Session
name|s
init|=
name|sId
operator|==
literal|1
condition|?
name|s1
else|:
name|s2
decl_stmt|;
name|Node
name|test
init|=
name|s
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|String
name|nodeName
init|=
literal|"n"
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|10000
argument_list|)
operator|+
name|sId
decl_stmt|;
switch|switch
condition|(
name|r
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
try|try
block|{
name|s
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|s
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
operator|!
name|test
operator|.
name|hasNode
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
name|test
operator|.
name|addNode
argument_list|(
name|nodeName
argument_list|,
literal|"oak:Unstructured"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|test
operator|.
name|hasNode
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
name|test
operator|.
name|getNode
argument_list|(
name|nodeName
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|test
operator|.
name|hasNode
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
name|test
operator|.
name|getNode
argument_list|(
name|nodeName
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"test"
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
return|;
block|}
block|}
end_class

end_unit

