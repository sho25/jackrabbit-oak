begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|importer
operator|.
name|ClusterNodeStoreLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|IndexRootDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|LocalIndexDir
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|IndexDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
operator|.
name|getNode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|IndexImportIT
extends|extends
name|AbstractIndexCommandTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|reindexOutOfBand
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fixture
operator|.
name|getAsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|String
name|checkpoint
init|=
name|fixture
operator|.
name|getNodeStore
argument_list|()
operator|.
name|checkpoint
argument_list|(
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMillis
argument_list|(
literal|24
argument_list|)
argument_list|)
decl_stmt|;
comment|//Close the repository so as all changes are flushed
name|fixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexCommand
name|command
init|=
operator|new
name|IndexCommand
argument_list|()
decl_stmt|;
name|File
name|outDir
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|File
name|storeDir
init|=
name|fixture
operator|.
name|getDir
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"--index-temp-dir="
operator|+
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--index-out-dir="
operator|+
name|outDir
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--index-paths=/oak:index/fooIndex"
block|,
literal|"--checkpoint="
operator|+
name|checkpoint
block|,
literal|"--reindex"
block|,
literal|"--"
block|,
comment|// -- indicates that options have ended and rest needs to be treated as non option
name|storeDir
operator|.
name|getAbsolutePath
argument_list|()
block|}
decl_stmt|;
name|command
operator|.
name|execute
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|RepositoryFixture
name|fixture2
init|=
operator|new
name|RepositoryFixture
argument_list|(
name|storeDir
argument_list|)
decl_stmt|;
name|NodeStore
name|store2
init|=
name|fixture2
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|PropertyState
name|reindexCount
init|=
name|getNode
argument_list|(
name|store2
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"/oak:index/fooIndex"
argument_list|)
operator|.
name|getProperty
argument_list|(
name|IndexConstants
operator|.
name|REINDEX_COUNT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reindexCount
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|indexes
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|OutOfBandIndexer
operator|.
name|LOCAL_INDEX_ROOT_DIR
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|indexes
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|IndexRootDirectory
name|idxRoot
init|=
operator|new
name|IndexRootDirectory
argument_list|(
name|indexes
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LocalIndexDir
argument_list|>
name|idxDirs
init|=
name|idxRoot
operator|.
name|getAllLocalIndexes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|idxDirs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|reindexAndThenImport
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fixture
operator|.
name|getAsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|int
name|fooCount
init|=
name|getFooCount
argument_list|(
name|fixture
argument_list|)
decl_stmt|;
name|String
name|checkpoint
init|=
name|fixture
operator|.
name|getNodeStore
argument_list|()
operator|.
name|checkpoint
argument_list|(
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMillis
argument_list|(
literal|24
argument_list|)
argument_list|)
decl_stmt|;
comment|//Close the repository so as all changes are flushed
name|fixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexCommand
name|command
init|=
operator|new
name|IndexCommand
argument_list|()
decl_stmt|;
name|File
name|outDir
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|File
name|storeDir
init|=
name|fixture
operator|.
name|getDir
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"--index-temp-dir="
operator|+
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--index-out-dir="
operator|+
name|outDir
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--index-paths=/oak:index/fooIndex"
block|,
literal|"--checkpoint="
operator|+
name|checkpoint
block|,
literal|"--reindex"
block|,
literal|"--"
block|,
comment|// -- indicates that options have ended and rest needs to be treated as non option
name|storeDir
operator|.
name|getAbsolutePath
argument_list|()
block|}
decl_stmt|;
name|command
operator|.
name|execute
argument_list|(
name|args
argument_list|)
expr_stmt|;
comment|//----------------------------------------
comment|//Phase 2 - Add some more indexable content. This would let us validate that post
comment|//import
name|RepositoryFixture
name|fixture2
init|=
operator|new
name|RepositoryFixture
argument_list|(
name|storeDir
argument_list|)
decl_stmt|;
name|addTestContent
argument_list|(
name|fixture2
argument_list|,
literal|"/testNode/b"
argument_list|,
literal|"foo"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|addTestContent
argument_list|(
name|fixture2
argument_list|,
literal|"/testNode/c"
argument_list|,
literal|"bar"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|indexBarPropertyAlso
argument_list|(
name|fixture2
argument_list|)
expr_stmt|;
name|fixture2
operator|.
name|getAsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|String
name|explain
init|=
name|getQueryPlan
argument_list|(
name|fixture2
argument_list|,
literal|"select * from [nt:base] where [bar] is not null"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|,
name|containsString
argument_list|(
literal|"traverse"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|,
name|not
argument_list|(
name|containsString
argument_list|(
name|TEST_INDEX_PATH
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|foo2Count
init|=
name|getFooCount
argument_list|(
name|fixture2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fooCount
operator|+
literal|100
argument_list|,
name|foo2Count
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fixture2
operator|.
name|getNodeStore
argument_list|()
operator|.
name|retrieve
argument_list|(
name|checkpoint
argument_list|)
argument_list|)
expr_stmt|;
name|fixture2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//~-----------------------------------------
comment|//Phase 3 - Import the indexes
name|IndexCommand
name|command3
init|=
operator|new
name|IndexCommand
argument_list|()
decl_stmt|;
name|File
name|outDir3
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|File
name|indexDir
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|OutOfBandIndexer
operator|.
name|LOCAL_INDEX_ROOT_DIR
argument_list|)
decl_stmt|;
name|String
index|[]
name|args3
init|=
block|{
literal|"--index-temp-dir="
operator|+
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--index-out-dir="
operator|+
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--index-import-dir="
operator|+
name|indexDir
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--index-import"
block|,
literal|"--read-write"
block|,
literal|"--"
block|,
comment|// -- indicates that options have ended and rest needs to be treated as non option
name|storeDir
operator|.
name|getAbsolutePath
argument_list|()
block|}
decl_stmt|;
name|command3
operator|.
name|execute
argument_list|(
name|args3
argument_list|)
expr_stmt|;
comment|//~-----------------------------------------
comment|//Phase 4 - Validate the import
name|RepositoryFixture
name|fixture4
init|=
operator|new
name|RepositoryFixture
argument_list|(
name|storeDir
argument_list|)
decl_stmt|;
name|int
name|foo4Count
init|=
name|getFooCount
argument_list|(
name|fixture4
argument_list|)
decl_stmt|;
comment|//new count should be same as previous
name|assertEquals
argument_list|(
name|foo2Count
argument_list|,
name|foo4Count
argument_list|)
expr_stmt|;
comment|//Checkpoint must be released
name|assertNull
argument_list|(
name|fixture4
operator|.
name|getNodeStore
argument_list|()
operator|.
name|retrieve
argument_list|(
name|checkpoint
argument_list|)
argument_list|)
expr_stmt|;
comment|//Lock should also be released
name|ClusterNodeStoreLock
name|clusterLock
init|=
operator|new
name|ClusterNodeStoreLock
argument_list|(
name|fixture4
operator|.
name|getNodeStore
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|clusterLock
operator|.
name|isLocked
argument_list|(
literal|"async"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Updates to the index definition should have got picked up
name|String
name|explain4
init|=
name|getQueryPlan
argument_list|(
name|fixture4
argument_list|,
literal|"select * from [nt:base] where [bar] is not null"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|explain4
argument_list|,
name|containsString
argument_list|(
name|TEST_INDEX_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|fixture4
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|indexBarPropertyAlso
parameter_list|(
name|RepositoryFixture
name|fixture2
parameter_list|)
throws|throws
name|IOException
throws|,
name|RepositoryException
block|{
name|Session
name|session
init|=
name|fixture2
operator|.
name|getAdminSession
argument_list|()
decl_stmt|;
name|NodeState
name|idxState
init|=
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|fixture2
operator|.
name|getNodeStore
argument_list|()
operator|.
name|getRoot
argument_list|()
argument_list|,
name|TEST_INDEX_PATH
argument_list|)
decl_stmt|;
name|IndexDefinitionBuilder
name|idxb
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
operator|new
name|MemoryNodeBuilder
argument_list|(
name|idxState
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|idxb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|Node
name|idxNode
init|=
name|session
operator|.
name|getNode
argument_list|(
name|TEST_INDEX_PATH
argument_list|)
decl_stmt|;
name|idxb
operator|.
name|build
argument_list|(
name|idxNode
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
specifier|private
name|int
name|getFooCount
parameter_list|(
name|RepositoryFixture
name|fixture
parameter_list|)
throws|throws
name|IOException
throws|,
name|RepositoryException
block|{
name|Session
name|session
init|=
name|fixture
operator|.
name|getAdminSession
argument_list|()
decl_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|String
name|explanation
init|=
name|getQueryPlan
argument_list|(
name|fixture
argument_list|,
literal|"select * from [nt:base] where [foo] is not null"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|explanation
argument_list|,
name|containsString
argument_list|(
literal|"/oak:index/fooIndex"
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"select * from [nt:base] where [foo] is not null"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|Iterators
operator|.
name|size
argument_list|(
name|result
operator|.
name|getNodes
argument_list|()
argument_list|)
decl_stmt|;
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
return|return
name|size
return|;
block|}
specifier|private
specifier|static
name|String
name|getQueryPlan
parameter_list|(
name|RepositoryFixture
name|fixture
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Session
name|session
init|=
name|fixture
operator|.
name|getAdminSession
argument_list|()
decl_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|Query
name|explain
init|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"explain "
operator|+
name|query
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|explainResult
init|=
name|explain
operator|.
name|execute
argument_list|()
decl_stmt|;
name|Row
name|explainRow
init|=
name|explainResult
operator|.
name|getRows
argument_list|()
operator|.
name|nextRow
argument_list|()
decl_stmt|;
name|String
name|explanation
init|=
name|explainRow
operator|.
name|getValue
argument_list|(
literal|"plan"
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
return|return
name|explanation
return|;
block|}
block|}
end_class

end_unit

