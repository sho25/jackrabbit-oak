begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|CompositePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|CompositeRestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|Restriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionDefinitionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Additional tests for {@link CompositeRestrictionProvider} that require a full  * oak repository.  */
end_comment

begin_class
specifier|public
class|class
name|CompositeRestrictionProviderTest
extends|extends
name|AbstractSecurityTest
implements|implements
name|AccessControlConstants
block|{
specifier|private
name|RestrictionProvider
name|rp1
init|=
operator|new
name|TestProvider
argument_list|(
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|RestrictionDefinition
operator|>
name|of
argument_list|(
name|REP_GLOB
argument_list|,
operator|new
name|RestrictionDefinitionImpl
argument_list|(
name|REP_GLOB
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|false
argument_list|)
argument_list|,
name|REP_NT_NAMES
argument_list|,
operator|new
name|RestrictionDefinitionImpl
argument_list|(
name|REP_NT_NAMES
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|,
literal|false
argument_list|)
argument_list|,
name|REP_PREFIXES
argument_list|,
operator|new
name|RestrictionDefinitionImpl
argument_list|(
name|REP_PREFIXES
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|RestrictionProvider
name|rp2
init|=
operator|new
name|TestProvider
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"boolean"
argument_list|,
operator|new
name|RestrictionDefinitionImpl
argument_list|(
literal|"boolean"
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|"longs"
argument_list|,
operator|new
name|RestrictionDefinitionImpl
argument_list|(
literal|"longs"
argument_list|,
name|Type
operator|.
name|LONGS
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|RestrictionProvider
name|rp3
init|=
operator|new
name|TestProvider
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"string"
argument_list|,
operator|new
name|RestrictionDefinitionImpl
argument_list|(
literal|"string"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|supported
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"boolean"
argument_list|,
literal|"longs"
argument_list|,
name|REP_NT_NAMES
argument_list|,
name|REP_GLOB
argument_list|)
decl_stmt|;
specifier|private
name|RestrictionProvider
name|provider
init|=
name|CompositeRestrictionProvider
operator|.
name|newInstance
argument_list|(
name|rp1
argument_list|,
name|rp2
argument_list|)
decl_stmt|;
specifier|private
name|ValueFactory
name|vf
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|vf
operator|=
name|getValueFactory
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadRestrictions
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|aceNode
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|NT_REP_GRANT_ACE
argument_list|)
decl_stmt|;
name|aceNode
operator|.
name|setProperty
argument_list|(
literal|"boolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|aceNode
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"longs"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|vf
operator|.
name|createValue
argument_list|(
literal|10
argument_list|)
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|290
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|aceNode
operator|.
name|setProperty
argument_list|(
name|REP_GLOB
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|aceNode
operator|.
name|setProperty
argument_list|(
name|REP_NT_NAMES
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
comment|// empty array
name|aceNode
operator|.
name|setProperty
argument_list|(
literal|"invalid"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|aceNode
operator|.
name|setProperty
argument_list|(
literal|"invalid2"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"val1"
argument_list|,
literal|"val2"
argument_list|,
literal|"val3"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
init|=
name|provider
operator|.
name|readRestrictions
argument_list|(
literal|"/test"
argument_list|,
name|aceNode
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|restrictions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Restriction
name|r
range|:
name|restrictions
control|)
block|{
name|String
name|name
init|=
name|r
operator|.
name|getDefinition
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|supported
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"read unsupported restriction"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteRestrictions
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|aceNode
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|NT_REP_GRANT_ACE
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|provider
operator|.
name|createRestriction
argument_list|(
literal|"/test"
argument_list|,
literal|"boolean"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|,
name|provider
operator|.
name|createRestriction
argument_list|(
literal|"/test"
argument_list|,
literal|"longs"
argument_list|)
argument_list|,
name|provider
operator|.
name|createRestriction
argument_list|(
literal|"/test"
argument_list|,
name|REP_GLOB
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|"*"
argument_list|)
argument_list|)
argument_list|,
name|provider
operator|.
name|createRestriction
argument_list|(
literal|"/test"
argument_list|,
name|REP_NT_NAMES
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|"nt:base"
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|"nt:version"
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|provider
operator|.
name|writeRestrictions
argument_list|(
literal|"/test"
argument_list|,
name|aceNode
argument_list|,
name|restrictions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteUnsupportedRestrictions
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|aceNode
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|NT_REP_GRANT_ACE
argument_list|)
decl_stmt|;
name|Restriction
name|invalid
init|=
operator|new
name|RestrictionImpl
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"invalid"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|provider
operator|.
name|writeRestrictions
argument_list|(
literal|"/test"
argument_list|,
name|aceNode
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Restriction
operator|>
name|of
argument_list|(
name|invalid
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidateRestrictions
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|aceNode
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|NT_REP_GRANT_ACE
argument_list|)
decl_stmt|;
name|Tree
name|rNode
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|aceNode
argument_list|,
name|REP_RESTRICTIONS
argument_list|,
name|NT_REP_RESTRICTIONS
argument_list|)
decl_stmt|;
name|rNode
operator|.
name|setProperty
argument_list|(
literal|"boolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rNode
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"longs"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|vf
operator|.
name|createValue
argument_list|(
literal|10
argument_list|)
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|290
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rNode
operator|.
name|setProperty
argument_list|(
name|REP_GLOB
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|rNode
operator|.
name|setProperty
argument_list|(
name|REP_NT_NAMES
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
comment|// empty array
name|provider
operator|.
name|validateRestrictions
argument_list|(
literal|"/test"
argument_list|,
name|aceNode
argument_list|)
expr_stmt|;
comment|// remove mandatory restriction
name|rNode
operator|.
name|removeProperty
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
try|try
block|{
name|provider
operator|.
name|validateRestrictions
argument_list|(
literal|"/test"
argument_list|,
name|aceNode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"validation should detect missing mandatory restrictions"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
comment|// set with wrong type
name|rNode
operator|.
name|setProperty
argument_list|(
literal|"boolean"
argument_list|,
literal|"nt:base"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
try|try
block|{
name|provider
operator|.
name|validateRestrictions
argument_list|(
literal|"/test"
argument_list|,
name|aceNode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"validation should detect wrong restriction type"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
finally|finally
block|{
name|rNode
operator|.
name|setProperty
argument_list|(
literal|"boolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|rNode
operator|.
name|setProperty
argument_list|(
name|REP_GLOB
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"*"
argument_list|,
literal|"/jcr:content"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
try|try
block|{
name|provider
operator|.
name|validateRestrictions
argument_list|(
literal|"/test"
argument_list|,
name|aceNode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"validation should detect wrong restriction type (multi vs single valued)"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidateRestrictionsAtEntryNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|aceNode
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|NT_REP_GRANT_ACE
argument_list|)
decl_stmt|;
name|aceNode
operator|.
name|setProperty
argument_list|(
literal|"boolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|aceNode
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"longs"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|vf
operator|.
name|createValue
argument_list|(
literal|10
argument_list|)
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|290
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|aceNode
operator|.
name|setProperty
argument_list|(
name|REP_GLOB
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|aceNode
operator|.
name|setProperty
argument_list|(
name|REP_NT_NAMES
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
comment|// empty array
name|provider
operator|.
name|validateRestrictions
argument_list|(
literal|"/test"
argument_list|,
name|aceNode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidateInvalidRestrictionDef
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionProvider
name|rp
init|=
name|CompositeRestrictionProvider
operator|.
name|newInstance
argument_list|(
name|rp1
argument_list|,
name|rp3
argument_list|)
decl_stmt|;
name|Tree
name|aceNode
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|NT_REP_GRANT_ACE
argument_list|)
decl_stmt|;
name|Tree
name|rNode
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|aceNode
argument_list|,
name|REP_RESTRICTIONS
argument_list|,
name|NT_REP_RESTRICTIONS
argument_list|)
decl_stmt|;
name|rNode
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"longs"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|vf
operator|.
name|createValue
argument_list|(
literal|10
argument_list|)
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|290
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|rp
operator|.
name|validateRestrictions
argument_list|(
literal|"/test"
argument_list|,
name|aceNode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Validation must detect invalid restriction definition"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidateUnsupportedRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionProvider
name|rp
init|=
name|CompositeRestrictionProvider
operator|.
name|newInstance
argument_list|(
name|rp1
argument_list|,
name|rp3
argument_list|)
decl_stmt|;
name|Tree
name|aceNode
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|NT_REP_GRANT_ACE
argument_list|)
decl_stmt|;
name|Tree
name|rNode
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|aceNode
argument_list|,
name|REP_RESTRICTIONS
argument_list|,
name|NT_REP_RESTRICTIONS
argument_list|)
decl_stmt|;
name|rNode
operator|.
name|setProperty
argument_list|(
literal|"unsupported"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
try|try
block|{
name|rp
operator|.
name|validateRestrictions
argument_list|(
literal|"/test"
argument_list|,
name|aceNode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Validation must detect unsupported restriction"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRestrictionPattern
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|aceNode
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|NT_REP_GRANT_ACE
argument_list|)
decl_stmt|;
name|Tree
name|rNode
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|aceNode
argument_list|,
name|REP_RESTRICTIONS
argument_list|,
name|NT_REP_RESTRICTIONS
argument_list|)
decl_stmt|;
name|rNode
operator|.
name|setProperty
argument_list|(
name|REP_GLOB
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|provider
operator|.
name|getPattern
argument_list|(
literal|"/test"
argument_list|,
name|aceNode
argument_list|)
operator|instanceof
name|CompositePattern
argument_list|)
expr_stmt|;
name|rNode
operator|.
name|setProperty
argument_list|(
literal|"boolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rNode
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"longs"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|vf
operator|.
name|createValue
argument_list|(
literal|10
argument_list|)
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|290
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|provider
operator|.
name|getPattern
argument_list|(
literal|"/test"
argument_list|,
name|rNode
argument_list|)
operator|instanceof
name|CompositePattern
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

