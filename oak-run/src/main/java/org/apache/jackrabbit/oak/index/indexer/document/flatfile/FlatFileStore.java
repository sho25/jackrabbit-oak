begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|flatfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|AbstractIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|LineIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|NodeStateEntry
import|;
end_import

begin_class
specifier|public
class|class
name|FlatFileStore
implements|implements
name|Iterable
argument_list|<
name|NodeStateEntry
argument_list|>
implements|,
name|Closeable
block|{
specifier|private
specifier|final
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|File
name|storeFile
decl_stmt|;
specifier|private
specifier|final
name|NodeStateEntryReader
name|entryReader
decl_stmt|;
specifier|public
name|FlatFileStore
parameter_list|(
name|File
name|storeFile
parameter_list|,
name|NodeStateEntryReader
name|entryReader
parameter_list|)
block|{
name|this
operator|.
name|storeFile
operator|=
name|storeFile
expr_stmt|;
name|this
operator|.
name|entryReader
operator|=
name|entryReader
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|NodeStateEntry
argument_list|>
name|iterator
parameter_list|()
block|{
name|LineIterator
name|itr
init|=
operator|new
name|LineIterator
argument_list|(
name|createReader
argument_list|()
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|itr
operator|::
name|close
argument_list|)
expr_stmt|;
return|return
operator|new
name|AbstractIterator
argument_list|<
name|NodeStateEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|NodeStateEntry
name|computeNext
parameter_list|()
block|{
if|if
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|convert
argument_list|(
name|itr
operator|.
name|nextLine
argument_list|()
argument_list|)
return|;
block|}
comment|//End of iterator then close it
name|LineIterator
operator|.
name|closeQuietly
argument_list|(
name|itr
argument_list|)
expr_stmt|;
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|private
name|NodeStateEntry
name|convert
parameter_list|(
name|String
name|line
parameter_list|)
block|{
return|return
name|entryReader
operator|.
name|read
argument_list|(
name|line
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Reader
name|createReader
parameter_list|()
block|{
try|try
block|{
return|return
name|Files
operator|.
name|newReader
argument_list|(
name|storeFile
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error opening file "
operator|+
name|storeFile
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

