begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|FragmentMatcher
operator|.
name|Result
operator|.
name|FULL_MATCH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|FragmentMatcher
operator|.
name|Result
operator|.
name|MISMATCH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|FragmentMatcher
operator|.
name|Result
operator|.
name|PARTIAL_MATCH
import|;
end_import

begin_comment
comment|/**  * This utility class allows to match strings against a simple pattern language.  * There are two special characters:  *<ul>  *<li><code>*</code> - matches zero or more any characters different than slash</li>  *<li><code>$</code> - matches the end of the subject</li>  *</ul>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|FragmentMatcher
block|{
specifier|private
name|FragmentMatcher
parameter_list|()
block|{     }
specifier|public
enum|enum
name|Result
block|{
name|FULL_MATCH
block|,
name|PARTIAL_MATCH
block|,
name|MISMATCH
block|}
comment|/**      * Check if the subject starts with the pattern. See the class docs for the      * pattern syntax.      *      * @param pattern pattern to be matched      * @param subject subject      * @return {@link Result#FULL_MATCH} if the subject starts with the pattern,      * {@link Result#PARTIAL_MATCH} if the subject is shorter than the pattern,      * but matches it so far and {@link Result#MISMATCH} if it doesn't start with      * the pattern.      */
specifier|public
specifier|static
name|Result
name|startsWith
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|subject
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|,
name|j
init|=
literal|0
decl_stmt|;
name|char
name|patternChar
init|=
literal|0
decl_stmt|,
name|subjectChar
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|pattern
operator|.
name|length
argument_list|()
operator|&&
name|j
operator|<
name|subject
operator|.
name|length
argument_list|()
condition|)
block|{
name|patternChar
operator|=
name|pattern
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|subjectChar
operator|=
name|subject
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|patternChar
condition|)
block|{
case|case
literal|'*'
case|:
comment|// matches everything until the next slash
if|if
condition|(
name|subjectChar
operator|==
literal|'/'
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|j
operator|++
expr_stmt|;
block|}
break|break;
case|case
literal|'$'
case|:
return|return
name|MISMATCH
return|;
default|default:
if|if
condition|(
name|patternChar
operator|!=
name|subjectChar
condition|)
block|{
return|return
name|MISMATCH
return|;
block|}
else|else
block|{
name|i
operator|++
expr_stmt|;
name|j
operator|++
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|j
operator|==
name|subject
operator|.
name|length
argument_list|()
condition|)
block|{
while|while
condition|(
name|i
operator|<
name|pattern
operator|.
name|length
argument_list|()
condition|)
block|{
name|patternChar
operator|=
name|pattern
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|patternChar
condition|)
block|{
case|case
literal|'*'
case|:
name|i
operator|++
expr_stmt|;
break|break;
case|case
literal|'$'
case|:
name|i
operator|++
expr_stmt|;
break|break;
default|default:
return|return
name|PARTIAL_MATCH
return|;
block|}
block|}
return|return
name|FULL_MATCH
return|;
block|}
else|else
block|{
return|return
name|FULL_MATCH
return|;
block|}
block|}
block|}
end_class

end_unit

