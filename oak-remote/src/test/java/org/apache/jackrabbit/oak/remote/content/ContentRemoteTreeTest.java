begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|content
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteTreeFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO8601
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|getOnlyElement
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
specifier|public
class|class
name|ContentRemoteTreeTest
block|{
specifier|private
name|ContentRemoteTree
name|createTree
parameter_list|(
name|Tree
name|tree
parameter_list|)
block|{
return|return
operator|new
name|ContentRemoteTree
argument_list|(
name|tree
argument_list|,
literal|0
argument_list|,
operator|new
name|RemoteTreeFilters
argument_list|()
argument_list|,
name|mock
argument_list|(
name|ContentRemoteBinaries
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|ContentRemoteTree
name|createTree
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|ContentRemoteBinaries
name|binaries
parameter_list|)
block|{
return|return
operator|new
name|ContentRemoteTree
argument_list|(
name|tree
argument_list|,
literal|0
argument_list|,
operator|new
name|RemoteTreeFilters
argument_list|()
argument_list|,
name|binaries
argument_list|)
return|;
block|}
specifier|private
name|ContentRemoteTree
name|createTree
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|RemoteTreeFilters
name|filters
parameter_list|)
block|{
return|return
operator|new
name|ContentRemoteTree
argument_list|(
name|tree
argument_list|,
literal|0
argument_list|,
name|filters
argument_list|,
name|mock
argument_list|(
name|ContentRemoteBinaries
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBinaryProperty
parameter_list|()
block|{
name|InputStream
name|stream
init|=
name|mock
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Blob
name|blob
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|stream
argument_list|)
operator|.
name|when
argument_list|(
name|blob
argument_list|)
operator|.
name|getNewStream
argument_list|()
expr_stmt|;
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|blob
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|ContentRemoteTree
name|remoteTree
init|=
name|createTree
argument_list|(
name|tree
argument_list|,
operator|new
name|RemoteTreeFilters
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getBinaryThreshold
parameter_list|()
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|remoteTree
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isBinary
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stream
argument_list|,
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asBinary
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMultiBinaryProperty
parameter_list|()
block|{
name|InputStream
name|stream
init|=
name|mock
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Blob
name|blob
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|stream
argument_list|)
operator|.
name|when
argument_list|(
name|blob
argument_list|)
operator|.
name|getNewStream
argument_list|()
expr_stmt|;
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|BINARIES
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|blob
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARIES
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|ContentRemoteTree
name|remoteTree
init|=
name|createTree
argument_list|(
name|tree
argument_list|,
operator|new
name|RemoteTreeFilters
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getBinaryThreshold
parameter_list|()
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|remoteTree
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isMultiBinary
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stream
argument_list|,
name|getOnlyElement
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asMultiBinary
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBinaryIdProperty
parameter_list|()
block|{
name|Blob
name|blob
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|blob
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|ContentRemoteBinaries
name|binaries
init|=
name|mock
argument_list|(
name|ContentRemoteBinaries
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"id"
argument_list|)
operator|.
name|when
argument_list|(
name|binaries
argument_list|)
operator|.
name|put
argument_list|(
name|blob
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|,
name|binaries
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isBinaryId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asBinaryId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMultiBinaryIdProperty
parameter_list|()
block|{
name|Blob
name|blob
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|BINARIES
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|blob
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARIES
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|ContentRemoteBinaries
name|binaries
init|=
name|mock
argument_list|(
name|ContentRemoteBinaries
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"id"
argument_list|)
operator|.
name|when
argument_list|(
name|binaries
argument_list|)
operator|.
name|put
argument_list|(
name|blob
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|,
name|binaries
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isMultiBinaryId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|getOnlyElement
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asMultiBinaryId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBooleanProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMultiBooleanProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|BOOLEANS
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEANS
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isMultiBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|getOnlyElement
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asMultiBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDateProperty
parameter_list|()
block|{
name|Calendar
name|calendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|ISO8601
operator|.
name|format
argument_list|(
name|calendar
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isDate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|calendar
operator|.
name|getTimeInMillis
argument_list|()
argument_list|,
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asDate
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMultiDateProperty
parameter_list|()
block|{
name|Calendar
name|calendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|DATES
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|ISO8601
operator|.
name|format
argument_list|(
name|calendar
argument_list|)
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATES
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isMultiDate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|calendar
operator|.
name|getTimeInMillis
argument_list|()
argument_list|,
name|getOnlyElement
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asMultiDate
argument_list|()
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDecimalProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|DECIMAL
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isDecimal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|,
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asDecimal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMultiDecimalProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|DECIMALS
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DECIMALS
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isMultiDecimal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|,
name|getOnlyElement
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asMultiDecimal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|4.2
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isDouble
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.2
argument_list|,
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asDouble
argument_list|()
argument_list|,
literal|1e-9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMultiDoubleProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|DOUBLES
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
literal|4.2
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DOUBLES
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isMultiDouble
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.2
argument_list|,
name|getOnlyElement
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asMultiDouble
argument_list|()
argument_list|)
argument_list|,
literal|1e-9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|42L
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42L
argument_list|,
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asLong
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMultiLongProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|LONGS
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
literal|42L
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONGS
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isMultiLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42L
argument_list|,
name|getOnlyElement
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asMultiLong
argument_list|()
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNameProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|"value"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMultiNameProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isMultiName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|getOnlyElement
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asMultiName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|PATH
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|"value"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|PATH
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMultiPathProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|PATHS
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|PATHS
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isMultiPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|getOnlyElement
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asMultiPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReferenceProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|REFERENCE
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|"value"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCE
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isReference
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMultiReferenceProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|REFERENCES
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCES
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isMultiReference
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|getOnlyElement
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asMultiReference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|"value"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asText
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMultiTextProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isMultiText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|getOnlyElement
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asMultiText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUriProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|URI
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|"value"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|URI
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMultiUriProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|URIS
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|URIS
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isMultiUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|getOnlyElement
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asMultiUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWeakReferenceProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|WEAKREFERENCE
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|"value"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|WEAKREFERENCE
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isWeakReference
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asWeakReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMultiWeakReferenceProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"name"
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|WEAKREFERENCES
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|property
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|WEAKREFERENCES
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|singletonList
argument_list|(
name|property
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|isMultiWeakReference
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|getOnlyElement
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|asMultiWeakReference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterPropertyIn
parameter_list|()
block|{
name|PropertyState
name|fooProperty
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|when
argument_list|(
name|fooProperty
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
operator|.
name|when
argument_list|(
name|fooProperty
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|fooProperty
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|PropertyState
name|barProperty
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|when
argument_list|(
name|barProperty
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
operator|.
name|when
argument_list|(
name|barProperty
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|barProperty
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
name|fooProperty
argument_list|,
name|barProperty
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|ContentRemoteTree
name|remoteTree
init|=
name|createTree
argument_list|(
name|tree
argument_list|,
operator|new
name|RemoteTreeFilters
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPropertyFilters
parameter_list|()
block|{
return|return
name|newHashSet
argument_list|(
literal|"foo"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|remoteTree
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterPropertyOut
parameter_list|()
block|{
name|PropertyState
name|fooProperty
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|when
argument_list|(
name|fooProperty
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
operator|.
name|when
argument_list|(
name|fooProperty
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|fooProperty
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|PropertyState
name|barProperty
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|when
argument_list|(
name|barProperty
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
operator|.
name|when
argument_list|(
name|barProperty
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|barProperty
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
name|fooProperty
argument_list|,
name|barProperty
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|ContentRemoteTree
name|remoteTree
init|=
name|createTree
argument_list|(
name|tree
argument_list|,
operator|new
name|RemoteTreeFilters
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPropertyFilters
parameter_list|()
block|{
return|return
name|newHashSet
argument_list|(
literal|"-bar"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
name|remoteTree
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildrenMaxDepth
parameter_list|()
block|{
name|Tree
name|child
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"child"
argument_list|)
operator|.
name|when
argument_list|(
name|child
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
name|child
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getChildren
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteTree
argument_list|>
name|children
init|=
name|createTree
argument_list|(
name|tree
argument_list|)
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"child"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|"child"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildren
parameter_list|()
block|{
name|Tree
name|child
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"child"
argument_list|)
operator|.
name|when
argument_list|(
name|child
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
name|child
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getChildren
argument_list|()
expr_stmt|;
name|ContentRemoteTree
name|remoteTree
init|=
name|createTree
argument_list|(
name|tree
argument_list|,
operator|new
name|RemoteTreeFilters
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getDepth
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteTree
argument_list|>
name|children
init|=
name|remoteTree
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"child"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|"child"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildrenWithStart
parameter_list|()
block|{
name|Tree
name|foo
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|when
argument_list|(
name|foo
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|bar
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|when
argument_list|(
name|bar
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
name|foo
argument_list|,
name|bar
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getChildren
argument_list|()
expr_stmt|;
name|ContentRemoteTree
name|remoteTree
init|=
name|createTree
argument_list|(
name|tree
argument_list|,
operator|new
name|RemoteTreeFilters
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getChildrenStart
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteTree
argument_list|>
name|children
init|=
name|remoteTree
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildrenWithNegativeStart
parameter_list|()
block|{
name|Tree
name|foo
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|when
argument_list|(
name|foo
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|bar
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|when
argument_list|(
name|bar
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
name|foo
argument_list|,
name|bar
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getChildren
argument_list|()
expr_stmt|;
name|ContentRemoteTree
name|remoteTree
init|=
name|createTree
argument_list|(
name|tree
argument_list|,
operator|new
name|RemoteTreeFilters
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getChildrenStart
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteTree
argument_list|>
name|children
init|=
name|remoteTree
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildrenWithStartTooBig
parameter_list|()
block|{
name|Tree
name|foo
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|when
argument_list|(
name|foo
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|bar
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|when
argument_list|(
name|bar
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
name|foo
argument_list|,
name|bar
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getChildren
argument_list|()
expr_stmt|;
name|ContentRemoteTree
name|remoteTree
init|=
name|createTree
argument_list|(
name|tree
argument_list|,
operator|new
name|RemoteTreeFilters
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getChildrenStart
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteTree
argument_list|>
name|children
init|=
name|remoteTree
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildrenWithCount
parameter_list|()
block|{
name|Tree
name|foo
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|when
argument_list|(
name|foo
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|bar
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|when
argument_list|(
name|bar
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
name|foo
argument_list|,
name|bar
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getChildren
argument_list|()
expr_stmt|;
name|ContentRemoteTree
name|remoteTree
init|=
name|createTree
argument_list|(
name|tree
argument_list|,
operator|new
name|RemoteTreeFilters
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getChildrenCount
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteTree
argument_list|>
name|children
init|=
name|remoteTree
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildrenWithNegativeCount
parameter_list|()
block|{
name|Tree
name|foo
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|when
argument_list|(
name|foo
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|bar
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|when
argument_list|(
name|bar
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
name|foo
argument_list|,
name|bar
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getChildren
argument_list|()
expr_stmt|;
name|ContentRemoteTree
name|remoteTree
init|=
name|createTree
argument_list|(
name|tree
argument_list|,
operator|new
name|RemoteTreeFilters
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getChildrenCount
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteTree
argument_list|>
name|children
init|=
name|remoteTree
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildrenWithZeroCount
parameter_list|()
block|{
name|Tree
name|foo
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|when
argument_list|(
name|foo
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|bar
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|when
argument_list|(
name|bar
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
name|foo
argument_list|,
name|bar
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getChildren
argument_list|()
expr_stmt|;
name|ContentRemoteTree
name|remoteTree
init|=
name|createTree
argument_list|(
name|tree
argument_list|,
operator|new
name|RemoteTreeFilters
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getChildrenCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteTree
argument_list|>
name|children
init|=
name|remoteTree
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildrenWithCountTooBig
parameter_list|()
block|{
name|Tree
name|foo
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|when
argument_list|(
name|foo
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|bar
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|when
argument_list|(
name|bar
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
name|foo
argument_list|,
name|bar
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getChildren
argument_list|()
expr_stmt|;
name|ContentRemoteTree
name|remoteTree
init|=
name|createTree
argument_list|(
name|tree
argument_list|,
operator|new
name|RemoteTreeFilters
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getChildrenCount
parameter_list|()
block|{
return|return
literal|3
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteTree
argument_list|>
name|children
init|=
name|remoteTree
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildrenWithSlicing
parameter_list|()
block|{
name|Tree
name|foo
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|when
argument_list|(
name|foo
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|bar
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|when
argument_list|(
name|bar
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|baz
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"baz"
argument_list|)
operator|.
name|when
argument_list|(
name|baz
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
name|foo
argument_list|,
name|bar
argument_list|,
name|baz
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getChildren
argument_list|()
expr_stmt|;
name|ContentRemoteTree
name|remoteTree
init|=
name|createTree
argument_list|(
name|tree
argument_list|,
operator|new
name|RemoteTreeFilters
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getChildrenStart
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getChildrenCount
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteTree
argument_list|>
name|children
init|=
name|remoteTree
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildrenWithIncludeFilters
parameter_list|()
block|{
name|Tree
name|foo
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|when
argument_list|(
name|foo
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|bar
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|when
argument_list|(
name|bar
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
name|foo
argument_list|,
name|bar
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getChildren
argument_list|()
expr_stmt|;
name|ContentRemoteTree
name|remoteTree
init|=
name|createTree
argument_list|(
name|tree
argument_list|,
operator|new
name|RemoteTreeFilters
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getNodeFilters
parameter_list|()
block|{
return|return
name|newHashSet
argument_list|(
literal|"foo"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteTree
argument_list|>
name|children
init|=
name|remoteTree
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildrenWithExcludeFilters
parameter_list|()
block|{
name|Tree
name|foo
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|when
argument_list|(
name|foo
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|bar
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|when
argument_list|(
name|bar
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
name|foo
argument_list|,
name|bar
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getChildren
argument_list|()
expr_stmt|;
name|ContentRemoteTree
name|remoteTree
init|=
name|createTree
argument_list|(
name|tree
argument_list|,
operator|new
name|RemoteTreeFilters
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getNodeFilters
parameter_list|()
block|{
return|return
name|newHashSet
argument_list|(
literal|"-bar"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteTree
argument_list|>
name|children
init|=
name|remoteTree
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildrenWithSlicingAndFiltering
parameter_list|()
block|{
name|Tree
name|bar
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|when
argument_list|(
name|bar
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|foo
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|when
argument_list|(
name|foo
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|baz
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"baz"
argument_list|)
operator|.
name|when
argument_list|(
name|baz
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
name|bar
argument_list|,
name|foo
argument_list|,
name|baz
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|getChildren
argument_list|()
expr_stmt|;
name|ContentRemoteTree
name|remoteTree
init|=
name|createTree
argument_list|(
name|tree
argument_list|,
operator|new
name|RemoteTreeFilters
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getNodeFilters
parameter_list|()
block|{
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"ba*"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getChildrenStart
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getChildrenCount
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteTree
argument_list|>
name|children
init|=
name|remoteTree
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|children
operator|.
name|containsKey
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

