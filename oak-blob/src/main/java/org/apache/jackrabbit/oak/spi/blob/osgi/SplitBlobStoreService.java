begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|PropertyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|split
operator|.
name|DefaultSplitBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|split
operator|.
name|WrappingSplitBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|osgi
operator|.
name|SplitBlobStoreService
operator|.
name|BlobStoreType
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|)
specifier|public
class|class
name|SplitBlobStoreService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SplitBlobStoreService
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Property
specifier|private
specifier|static
specifier|final
name|String
name|PROP_HOME
init|=
literal|"repository.home"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|options
operator|=
block|{
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"External"
argument_list|,
name|value
operator|=
literal|"EXTERNAL"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"Internal - Segment"
argument_list|,
name|value
operator|=
literal|"SEGMENT"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"Internal - Document"
argument_list|,
name|value
operator|=
literal|"DOCUMENT"
argument_list|)
block|}
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|PROP_OLD_BLOB_STORE_TYPE
init|=
literal|"split.old.blobstore.type"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROP_SPLIT_BLOBSTORE
init|=
literal|"split.blobstore"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ONLY_STANDALONE_TARGET
init|=
literal|"(&(!(split.blobstore=old))(!(split.blobstore=new)))"
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|target
operator|=
literal|"(split.blobstore=old)"
argument_list|)
specifier|private
name|BlobStore
name|oldBlobStore
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|target
operator|=
literal|"(split.blobstore=new)"
argument_list|)
specifier|private
name|BlobStore
name|newBlobStore
decl_stmt|;
specifier|private
name|BundleContext
name|ctx
decl_stmt|;
specifier|private
name|ServiceRegistration
name|reg
decl_stmt|;
specifier|private
name|String
name|homeDir
decl_stmt|;
specifier|private
name|BlobStoreType
name|oldBlobStoreType
decl_stmt|;
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|InvalidSyntaxException
block|{
name|String
name|oldTypeName
init|=
name|lookup
argument_list|(
name|context
argument_list|,
name|PROP_OLD_BLOB_STORE_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldTypeName
operator|==
literal|null
condition|)
block|{
name|oldBlobStoreType
operator|=
name|BlobStoreType
operator|.
name|EXTERNAL
expr_stmt|;
block|}
else|else
block|{
name|oldBlobStoreType
operator|=
name|BlobStoreType
operator|.
name|valueOf
argument_list|(
name|oldTypeName
argument_list|)
expr_stmt|;
block|}
name|homeDir
operator|=
name|lookup
argument_list|(
name|context
argument_list|,
name|PROP_HOME
argument_list|)
expr_stmt|;
if|if
condition|(
name|homeDir
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Initializing the SplitBlobStore with home [{}]"
argument_list|,
name|homeDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Can't initialize SplitBlobStore - empty {}"
argument_list|,
name|PROP_HOME
argument_list|)
expr_stmt|;
return|return;
block|}
name|ctx
operator|=
name|context
operator|.
name|getBundleContext
argument_list|()
expr_stmt|;
name|registerSplitBlobStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|()
block|{
name|unregisterSplitBlobStore
argument_list|()
expr_stmt|;
name|ctx
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|registerSplitBlobStore
parameter_list|()
block|{
if|if
condition|(
name|oldBlobStore
operator|==
literal|null
operator|&&
name|oldBlobStoreType
operator|==
name|BlobStoreType
operator|.
name|EXTERNAL
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No BlobStore with ({}=old)"
argument_list|,
name|PROP_SPLIT_BLOBSTORE
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|newBlobStore
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No BlobStore with ({}=new)"
argument_list|,
name|PROP_SPLIT_BLOBSTORE
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|reg
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"SplitBlobStore already registered"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|ctx
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Component not activated yet"
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Registering SplitBlobStore with old={} ({}) and new={}"
argument_list|,
name|oldBlobStore
argument_list|,
name|oldBlobStoreType
argument_list|,
name|newBlobStore
argument_list|)
expr_stmt|;
name|BlobStore
name|blobStore
decl_stmt|;
if|if
condition|(
name|oldBlobStoreType
operator|==
name|EXTERNAL
operator|||
name|oldBlobStoreType
operator|==
name|SEGMENT
condition|)
block|{
name|blobStore
operator|=
operator|new
name|DefaultSplitBlobStore
argument_list|(
name|homeDir
argument_list|,
name|oldBlobStore
argument_list|,
name|newBlobStore
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oldBlobStoreType
operator|==
name|DOCUMENT
condition|)
block|{
name|blobStore
operator|=
operator|new
name|WrappingSplitBlobStore
argument_list|(
name|homeDir
argument_list|,
name|newBlobStore
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Illegal blob store type value: "
operator|+
name|oldBlobStoreType
argument_list|)
throw|;
block|}
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"service.pid"
argument_list|,
literal|"org.apache.jackrabbit.oak.spi.blob.split.SplitBlobStore"
argument_list|)
expr_stmt|;
name|reg
operator|=
name|ctx
operator|.
name|registerService
argument_list|(
operator|new
name|String
index|[]
block|{
name|BlobStore
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|,
name|blobStore
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|unregisterSplitBlobStore
parameter_list|()
block|{
if|if
condition|(
name|reg
operator|!=
literal|null
condition|)
block|{
name|reg
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
name|reg
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|lookup
parameter_list|(
name|ComponentContext
name|context
parameter_list|,
name|String
name|property
parameter_list|)
block|{
comment|// Prefer property from BundleContext first
if|if
condition|(
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
return|;
block|}
if|if
condition|(
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|property
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|property
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|bindOldBlobStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|this
operator|.
name|oldBlobStore
operator|=
name|blobStore
expr_stmt|;
name|registerSplitBlobStore
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|unbindOldBlobStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|this
operator|.
name|oldBlobStore
operator|=
literal|null
expr_stmt|;
name|unregisterSplitBlobStore
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|bindNewBlobStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|this
operator|.
name|newBlobStore
operator|=
name|blobStore
expr_stmt|;
name|registerSplitBlobStore
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|unbindNewBlobStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|this
operator|.
name|newBlobStore
operator|=
literal|null
expr_stmt|;
name|unregisterSplitBlobStore
argument_list|()
expr_stmt|;
block|}
enum|enum
name|BlobStoreType
block|{
name|EXTERNAL
block|,
name|DOCUMENT
block|,
name|SEGMENT
block|}
block|}
end_class

end_unit

