begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|AbstractQueryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TestUtil
operator|.
name|useV2
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests the query engine using the default index implementation: the  * {@link LuceneIndexProvider}  */
end_comment

begin_class
specifier|public
class|class
name|LuceneIndexQueryTest
extends|extends
name|AbstractQueryTest
block|{
annotation|@
name|Override
specifier|protected
name|void
name|createTestIndexNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|index
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|indexDefn
init|=
name|createTestIndexNode
argument_list|(
name|index
argument_list|,
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
argument_list|)
decl_stmt|;
name|useV2
argument_list|(
name|indexDefn
argument_list|)
expr_stmt|;
name|indexDefn
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|TEST_MODE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|indexDefn
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|EVALUATE_PATH_RESTRICTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|props
init|=
name|TestUtil
operator|.
name|newRulePropTree
argument_list|(
name|indexDefn
argument_list|,
literal|"nt:base"
argument_list|)
decl_stmt|;
name|props
operator|.
name|getParent
argument_list|()
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|INDEX_NODE_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|enablePropertyIndex
argument_list|(
name|props
argument_list|,
literal|"c1/p"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|enableForFullText
argument_list|(
name|props
argument_list|,
name|LuceneIndexConstants
operator|.
name|REGEX_ALL_PROPS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
name|LowCostLuceneIndexProvider
name|provider
init|=
operator|new
name|LowCostLuceneIndexProvider
argument_list|()
decl_stmt|;
return|return
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|QueryIndexProvider
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|Observer
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|LuceneIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sql1
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"sql1.txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sql2
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"sql2.txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sql2FullText
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"sql2-fulltext.txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|descendantTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|result
init|=
name|executeQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where isdescendantnode('/test')"
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/a"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/b"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|descendantTest2
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|asList
argument_list|(
literal|"Hello"
argument_list|,
literal|"World"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|result
init|=
name|executeQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where isdescendantnode('/test') and name='World'"
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/a"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ischildnodeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|parents
init|=
name|tree
operator|.
name|addChild
argument_list|(
literal|"parents"
argument_list|)
decl_stmt|;
name|parents
operator|.
name|addChild
argument_list|(
literal|"p0"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|parents
operator|.
name|addChild
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|parents
operator|.
name|addChild
argument_list|(
literal|"p2"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|Tree
name|children
init|=
name|tree
operator|.
name|addChild
argument_list|(
literal|"children"
argument_list|)
decl_stmt|;
name|children
operator|.
name|addChild
argument_list|(
literal|"c1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|children
operator|.
name|addChild
argument_list|(
literal|"c2"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|children
operator|.
name|addChild
argument_list|(
literal|"c3"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|children
operator|.
name|addChild
argument_list|(
literal|"c4"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|result
init|=
name|executeQuery
argument_list|(
literal|"select p.[jcr:path], p2.[jcr:path] from [nt:base] as p inner join [nt:base] as p2 on ischildnode(p2, p) where p.[jcr:path] = '/'"
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/, /children"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/, /jcr:system"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/, /oak:index"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/, /parents"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|contains
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|h
init|=
literal|"Hello"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|w
init|=
literal|"World"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|asList
argument_list|(
name|h
argument_list|,
name|w
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// query 'hello'
name|StringBuffer
name|stmt
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"/jcr:root//*[jcr:contains(., '"
argument_list|)
operator|.
name|append
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"')]"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|stmt
operator|.
name|toString
argument_list|()
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// query 'world'
name|stmt
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"/jcr:root//*[jcr:contains(., '"
argument_list|)
operator|.
name|append
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"')]"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|stmt
operator|.
name|toString
argument_list|()
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"OAK-2424"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|containsDash
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"hello-wor"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"hello-world"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root//*[jcr:contains(., 'hello-wor*')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root//*[jcr:contains(., '*hello-wor*')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"OAK-2424"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|multiPhraseQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"dc:format"
argument_list|,
literal|"type:application/pdf"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"dc:format"
argument_list|,
literal|"progress"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root//*[jcr:contains(@dc:format, 'pro*')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root//*[jcr:contains(@dc:format, 'type:appli*')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"/parent/child/node"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|StringBuffer
name|stmt
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"//*[jcr:contains(., '/parent/child')]"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|stmt
operator|.
name|toString
argument_list|()
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsPathNum
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Tree
name|a
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"/segment1/segment2/segment3"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|StringBuffer
name|stmt
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"//*[jcr:contains(., '/segment1/segment2')]"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|stmt
operator|.
name|toString
argument_list|()
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsPathStrict
parameter_list|()
throws|throws
name|Exception
block|{
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"matchOnPath"
argument_list|)
expr_stmt|;
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"match_on_path"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|StringBuffer
name|stmt
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"//*[jcr:contains(., 'match')]"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|stmt
operator|.
name|toString
argument_list|()
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/match_on_path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsPathStrictNum
parameter_list|()
throws|throws
name|Exception
block|{
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"matchOnPath1234"
argument_list|)
expr_stmt|;
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"match_on_path1234"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|StringBuffer
name|stmt
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"//*[jcr:contains(., 'match')]"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|stmt
operator|.
name|toString
argument_list|()
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/match_on_path1234"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * OAK-1208 property existence constraints break queries      */
annotation|@
name|Test
specifier|public
name|void
name|testOAK1208
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"containsWithMultipleOr"
argument_list|)
decl_stmt|;
name|Tree
name|one
init|=
name|t
operator|.
name|addChild
argument_list|(
literal|"one"
argument_list|)
decl_stmt|;
name|one
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"dam/smartcollection"
argument_list|)
expr_stmt|;
name|one
operator|.
name|setProperty
argument_list|(
literal|"t"
argument_list|,
literal|"media"
argument_list|)
expr_stmt|;
name|Tree
name|two
init|=
name|t
operator|.
name|addChild
argument_list|(
literal|"two"
argument_list|)
decl_stmt|;
name|two
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"dam/collection"
argument_list|)
expr_stmt|;
name|two
operator|.
name|setProperty
argument_list|(
literal|"t"
argument_list|,
literal|"media"
argument_list|)
expr_stmt|;
name|Tree
name|three
init|=
name|t
operator|.
name|addChild
argument_list|(
literal|"three"
argument_list|)
decl_stmt|;
name|three
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"dam/hits"
argument_list|)
expr_stmt|;
name|three
operator|.
name|setProperty
argument_list|(
literal|"t"
argument_list|,
literal|"media"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|StringBuffer
name|stmt
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"//*[jcr:contains(., 'media') and (@p = 'dam/smartcollection' or @p = 'dam/collection') ]"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|stmt
operator|.
name|toString
argument_list|()
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|one
operator|.
name|getPath
argument_list|()
argument_list|,
name|two
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNativeLuceneQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nativeQueryString
init|=
literal|"select [jcr:path] from [nt:base] where native('lucene', 'title:foo -title:bar')"
decl_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"title"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"title"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|result
init|=
name|executeQuery
argument_list|(
name|nativeQueryString
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/a"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRepSimilarAsNativeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nativeQueryString
init|=
literal|"select [jcr:path] from [nt:base] where "
operator|+
literal|"native('lucene', 'mlt?stream.body=/test/a&mlt.fl=:path&mlt.mindf=0&mlt.mintf=0')"
decl_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"He said Hello and then the world said Hello as well."
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"He said Hi."
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|result
init|=
name|executeQuery
argument_list|(
name|nativeQueryString
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/a"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/b"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRepSimilarQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|query
init|=
literal|"select [jcr:path] from [nt:base] where similar(., '/test/a')"
decl_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"Hello World Hello World"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"World"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"e"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"World"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"f"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"g"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"World"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"h"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|result
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/a"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/b"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRepSimilarXPathQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|query
init|=
literal|"//element(*, nt:base)[rep:similar(., '/test/a')]"
decl_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"Hello World Hello World"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"World"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"e"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"World"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"f"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"g"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"World"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"h"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|result
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
literal|"xpath"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/a"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/b"
argument_list|,
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTokenizeCN
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"containsCN"
argument_list|)
decl_stmt|;
name|Tree
name|one
init|=
name|t
operator|.
name|addChild
argument_list|(
literal|"one"
argument_list|)
decl_stmt|;
name|one
operator|.
name|setProperty
argument_list|(
literal|"t"
argument_list|,
literal|"美女衬衫"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[jcr:contains(., '美女')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|one
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|oak2660
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|name
init|=
literal|"name"
decl_stmt|;
specifier|final
name|String
name|surname
init|=
literal|"surname"
decl_stmt|;
specifier|final
name|String
name|description
init|=
literal|"description"
decl_stmt|;
specifier|final
name|String
name|added
init|=
literal|"added"
decl_stmt|;
specifier|final
name|String
name|yes
init|=
literal|"yes"
decl_stmt|;
name|Tree
name|t
decl_stmt|;
comment|// re-define the lucene index
name|t
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/oak:index/"
operator|+
name|TEST_INDEX_NAME
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/oak:index/"
operator|+
name|TEST_INDEX_NAME
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|Tree
name|indexDefn
init|=
name|createTestIndexNode
argument_list|(
name|t
argument_list|,
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
argument_list|)
decl_stmt|;
name|useV2
argument_list|(
name|indexDefn
argument_list|)
expr_stmt|;
name|indexDefn
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|TEST_MODE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|props
init|=
name|TestUtil
operator|.
name|newRulePropTree
argument_list|(
name|indexDefn
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|enablePropertyIndex
argument_list|(
name|props
argument_list|,
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|enableForFullText
argument_list|(
name|props
argument_list|,
name|surname
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|enableForFullText
argument_list|(
name|props
argument_list|,
name|description
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|enableForOrdered
argument_list|(
name|props
argument_list|,
name|added
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// creating the dataset
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Tree
name|content
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|t
operator|=
name|content
operator|.
name|addChild
argument_list|(
literal|"test1"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|yes
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|surname
argument_list|,
name|yes
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|description
argument_list|,
name|yes
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|added
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|content
operator|.
name|addChild
argument_list|(
literal|"test2"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|yes
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|surname
argument_list|,
name|yes
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|description
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|added
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|content
operator|.
name|addChild
argument_list|(
literal|"test3"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|yes
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|surname
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|description
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|added
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|content
operator|.
name|addChild
argument_list|(
literal|"test4"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|surname
argument_list|,
name|yes
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|description
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|added
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|content
operator|.
name|addChild
argument_list|(
literal|"test5"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|surname
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|description
argument_list|,
name|yes
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|added
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|content
operator|.
name|addChild
argument_list|(
literal|"test6"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|surname
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|description
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|added
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// asserting the initial state
for|for
control|(
name|String
name|s
range|:
name|expected
control|)
block|{
name|assertTrue
argument_list|(
literal|"wrong initial state"
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|s
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|statement
init|=
literal|"SELECT * "
operator|+
literal|"FROM ["
operator|+
name|NT_UNSTRUCTURED
operator|+
literal|"] AS c "
operator|+
literal|"WHERE "
operator|+
literal|"( "
operator|+
literal|"c.["
operator|+
name|name
operator|+
literal|"] = '"
operator|+
name|yes
operator|+
literal|"' "
operator|+
literal|"OR CONTAINS(c.["
operator|+
name|surname
operator|+
literal|"], '"
operator|+
name|yes
operator|+
literal|"') "
operator|+
literal|"OR CONTAINS(c.["
operator|+
name|description
operator|+
literal|"], '"
operator|+
name|yes
operator|+
literal|"') "
operator|+
literal|") "
operator|+
literal|"AND ISDESCENDANTNODE(c, '"
operator|+
name|content
operator|.
name|getPath
argument_list|()
operator|+
literal|"') "
operator|+
literal|"ORDER BY "
operator|+
name|added
operator|+
literal|" DESC "
decl_stmt|;
name|assertQuery
argument_list|(
name|statement
argument_list|,
name|SQL2
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiValuedPropUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|String
name|child
init|=
literal|"child"
decl_stmt|;
name|String
name|mulValuedProp
init|=
literal|"prop"
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
name|child
argument_list|)
operator|.
name|setProperty
argument_list|(
name|mulValuedProp
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root//*[jcr:contains(@"
operator|+
name|mulValuedProp
operator|+
literal|", 'foo')]"
argument_list|,
literal|"xpath"
argument_list|,
name|of
argument_list|(
literal|"/test/"
operator|+
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|.
name|getChild
argument_list|(
name|child
argument_list|)
operator|.
name|setProperty
argument_list|(
name|mulValuedProp
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root//*[jcr:contains(@"
operator|+
name|mulValuedProp
operator|+
literal|", 'foo')]"
argument_list|,
literal|"xpath"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|.
name|getChild
argument_list|(
name|child
argument_list|)
operator|.
name|setProperty
argument_list|(
name|mulValuedProp
argument_list|,
name|of
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root//*[jcr:contains(@"
operator|+
name|mulValuedProp
operator|+
literal|", 'foo')]"
argument_list|,
literal|"xpath"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|.
name|getChild
argument_list|(
name|child
argument_list|)
operator|.
name|removeProperty
argument_list|(
name|mulValuedProp
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root//*[jcr:contains(@"
operator|+
name|mulValuedProp
operator|+
literal|", 'foo')]"
argument_list|,
literal|"xpath"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|static
name|void
name|walktree
parameter_list|(
specifier|final
name|Tree
name|t
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"+ "
operator|+
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PropertyState
name|p
range|:
name|t
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -"
operator|+
name|p
operator|.
name|getName
argument_list|()
operator|+
literal|"="
operator|+
name|p
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Tree
name|t1
range|:
name|t
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|walktree
argument_list|(
name|t1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

