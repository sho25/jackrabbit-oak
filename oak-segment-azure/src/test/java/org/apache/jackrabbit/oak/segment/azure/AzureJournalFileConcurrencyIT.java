begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|CloudStorageAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|JournalFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|JournalFileReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|JournalFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_class
specifier|public
class|class
name|AzureJournalFileConcurrencyIT
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AzureJournalFileConcurrencyIT
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|CloudBlobContainer
name|container
decl_stmt|;
specifier|private
specifier|static
name|int
name|suffix
decl_stmt|;
specifier|private
name|AzurePersistence
name|persistence
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|connectToAzure
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|InvalidKeyException
throws|,
name|StorageException
block|{
name|String
name|azureConnectionString
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"AZURE_CONNECTION"
argument_list|)
decl_stmt|;
name|Assume
operator|.
name|assumeNotNull
argument_list|(
name|azureConnectionString
argument_list|)
expr_stmt|;
name|CloudBlobClient
name|client
init|=
name|CloudStorageAccount
operator|.
name|parse
argument_list|(
name|azureConnectionString
argument_list|)
operator|.
name|createCloudBlobClient
argument_list|()
decl_stmt|;
name|container
operator|=
name|client
operator|.
name|getContainerReference
argument_list|(
literal|"oak-test-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|createIfNotExists
argument_list|()
expr_stmt|;
name|suffix
operator|=
literal|1
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|StorageException
throws|,
name|InvalidKeyException
throws|,
name|URISyntaxException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|persistence
operator|=
operator|new
name|AzurePersistence
argument_list|(
name|container
operator|.
name|getDirectoryReference
argument_list|(
literal|"oak-"
operator|+
operator|(
name|suffix
operator|++
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|writeJournalLines
argument_list|(
literal|300
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Finished writing initial content to journal!"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanupContainer
parameter_list|()
throws|throws
name|StorageException
block|{
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|deleteIfExists
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrency
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|exContainer
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|Thread
name|producer
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
while|while
condition|(
operator|!
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
name|writeJournalLines
argument_list|(
literal|300
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exContainer
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Thread
name|consumer
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
while|while
condition|(
operator|!
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
name|readJournal
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exContainer
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|producer
operator|.
name|start
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|start
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|<
literal|30_000
operator|&&
operator|!
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|producer
operator|.
name|join
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
name|exContainer
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exContainer
operator|.
name|get
argument_list|()
throw|;
block|}
block|}
specifier|private
name|void
name|readJournal
parameter_list|()
throws|throws
name|IOException
block|{
name|JournalFile
name|file
init|=
name|persistence
operator|.
name|getJournalFile
argument_list|()
decl_stmt|;
try|try
init|(
name|JournalFileReader
name|reader
init|=
name|file
operator|.
name|openJournalReader
argument_list|()
init|)
block|{
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|writeJournalLines
parameter_list|(
name|int
name|lines
parameter_list|,
name|int
name|delayMillis
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|JournalFile
name|file
init|=
name|persistence
operator|.
name|getJournalFile
argument_list|()
decl_stmt|;
try|try
init|(
name|JournalFileWriter
name|writer
init|=
name|file
operator|.
name|openJournalWriter
argument_list|()
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lines
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|writeLine
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%4X - %s"
argument_list|,
name|i
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|delayMillis
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

