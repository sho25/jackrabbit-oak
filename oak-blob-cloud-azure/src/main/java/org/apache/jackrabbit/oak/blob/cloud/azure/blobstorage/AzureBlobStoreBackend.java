begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|azure
operator|.
name|blobstorage
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|AbstractIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|RequestOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|ResultContinuation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|ResultSegment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlobListingDetails
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlobRequestOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobDirectory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlockBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CopyStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|ListBlobItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|AbstractDataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|AbstractSharedBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|currentThread
import|;
end_import

begin_class
specifier|public
class|class
name|AzureBlobStoreBackend
extends|extends
name|AbstractSharedBackend
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AzureBlobStoreBackend
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|META_DIR_NAME
init|=
literal|"META"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|META_KEY_PREFIX
init|=
name|META_DIR_NAME
operator|+
literal|"/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REF_KEY
init|=
literal|"reference.key"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|BUFFERED_STREAM_THRESHHOLD
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|private
name|Properties
name|properties
decl_stmt|;
specifier|private
name|String
name|containerName
decl_stmt|;
specifier|private
name|String
name|connectionString
decl_stmt|;
specifier|private
name|int
name|concurrentRequestCount
init|=
literal|1
decl_stmt|;
specifier|private
name|RetryPolicy
name|retryPolicy
decl_stmt|;
specifier|private
name|Integer
name|requestTimeout
decl_stmt|;
specifier|private
name|byte
index|[]
name|secret
decl_stmt|;
specifier|public
name|void
name|setProperties
parameter_list|(
specifier|final
name|Properties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
specifier|protected
name|CloudBlobContainer
name|getAzureContainer
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|CloudBlobContainer
name|container
init|=
name|Utils
operator|.
name|getBlobContainer
argument_list|(
name|connectionString
argument_list|,
name|containerName
argument_list|)
decl_stmt|;
name|RequestOptions
name|requestOptions
init|=
name|container
operator|.
name|getServiceClient
argument_list|()
operator|.
name|getDefaultRequestOptions
argument_list|()
decl_stmt|;
if|if
condition|(
name|retryPolicy
operator|!=
literal|null
condition|)
block|{
name|requestOptions
operator|.
name|setRetryPolicyFactory
argument_list|(
name|retryPolicy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requestTimeout
operator|!=
literal|null
condition|)
block|{
name|requestOptions
operator|.
name|setTimeoutIntervalInMs
argument_list|(
name|requestTimeout
argument_list|)
expr_stmt|;
block|}
return|return
name|container
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started backend initialization"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|properties
condition|)
block|{
try|try
block|{
name|properties
operator|=
name|Utils
operator|.
name|readConfig
argument_list|(
name|Utils
operator|.
name|DEFAULT_CONFIG_FILE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
literal|"Unable to initialize Azure Data Store from "
operator|+
name|Utils
operator|.
name|DEFAULT_CONFIG_FILE
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|Utils
operator|.
name|setProxyIfNeeded
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|containerName
operator|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|AzureConstants
operator|.
name|AZURE_BLOB_CONTAINER_NAME
argument_list|)
expr_stmt|;
name|connectionString
operator|=
name|Utils
operator|.
name|getConnectionStringFromProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|concurrentRequestCount
operator|=
name|PropertiesUtil
operator|.
name|toInteger
argument_list|(
name|properties
operator|.
name|get
argument_list|(
name|AzureConstants
operator|.
name|AZURE_BLOB_CONCURRENT_REQUESTS_PER_OPERATION
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using concurrentRequestsPerOperation={}"
argument_list|,
name|concurrentRequestCount
argument_list|)
expr_stmt|;
name|retryPolicy
operator|=
name|Utils
operator|.
name|getRetryPolicy
argument_list|(
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|AzureConstants
operator|.
name|AZURE_BLOB_MAX_REQUEST_RETRY
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|.
name|getProperty
argument_list|(
name|AzureConstants
operator|.
name|AZURE_BLOB_REQUEST_TIMEOUT
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|requestTimeout
operator|=
name|PropertiesUtil
operator|.
name|toInteger
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|AzureConstants
operator|.
name|AZURE_BLOB_REQUEST_TIMEOUT
argument_list|)
argument_list|,
name|RetryPolicy
operator|.
name|DEFAULT_CLIENT_RETRY_COUNT
argument_list|)
expr_stmt|;
block|}
name|CloudBlobContainer
name|azureContainer
init|=
name|getAzureContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|azureContainer
operator|.
name|createIfNotExists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"New container created. containerName={}"
argument_list|,
name|containerName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reusing existing container. containerName={}"
argument_list|,
name|containerName
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Backend initialized. duration={}"
argument_list|,
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|read
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
if|if
condition|(
literal|null
operator|==
name|identifier
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"identifier"
argument_list|)
throw|;
name|String
name|key
init|=
name|getKeyName
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|CloudBlockBlob
name|blob
init|=
name|getAzureContainer
argument_list|()
operator|.
name|getBlockBlobReference
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|blob
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Trying to read missing blob. identifier=%s"
argument_list|,
name|key
argument_list|)
argument_list|)
throw|;
block|}
name|InputStream
name|is
init|=
name|blob
operator|.
name|openInputStream
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got input stream for blob. identifier={} duration={}"
argument_list|,
name|key
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
return|return
name|is
return|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error reading blob. identifier=%s"
argument_list|,
name|key
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot read blob. identifier=%s"
argument_list|,
name|key
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error reading blob. identifier=%s"
argument_list|,
name|key
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot read blob. identifier=%s"
argument_list|,
name|key
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|DataStoreException
block|{
if|if
condition|(
literal|null
operator|==
name|identifier
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"identifier"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|file
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"file"
argument_list|)
throw|;
block|}
name|String
name|key
init|=
name|getKeyName
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|len
init|=
name|file
operator|.
name|length
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Blob write started. identifier={} length={}"
argument_list|,
name|key
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|CloudBlockBlob
name|blob
init|=
name|getAzureContainer
argument_list|()
operator|.
name|getBlockBlobReference
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|blob
operator|.
name|exists
argument_list|()
condition|)
block|{
name|BlobRequestOptions
name|options
init|=
operator|new
name|BlobRequestOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|setConcurrentRequestCount
argument_list|(
name|concurrentRequestCount
argument_list|)
expr_stmt|;
name|boolean
name|useBufferedStream
init|=
name|len
operator|<
name|BUFFERED_STREAM_THRESHHOLD
decl_stmt|;
specifier|final
name|InputStream
name|in
init|=
name|useBufferedStream
condition|?
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
else|:
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|blob
operator|.
name|upload
argument_list|(
name|in
argument_list|,
name|len
argument_list|,
literal|null
argument_list|,
name|options
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Blob created. identifier={} length={} duration={} buffered={}"
argument_list|,
name|key
argument_list|,
name|len
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|,
name|useBufferedStream
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
name|blob
operator|.
name|downloadAttributes
argument_list|()
expr_stmt|;
if|if
condition|(
name|blob
operator|.
name|getProperties
argument_list|()
operator|.
name|getLength
argument_list|()
operator|!=
name|len
condition|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
literal|"Length Collision. identifier="
operator|+
name|key
operator|+
literal|" new length="
operator|+
name|len
operator|+
literal|" old length="
operator|+
name|blob
operator|.
name|getProperties
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Blob already exists. identifier={} lastModified={}"
argument_list|,
name|key
argument_list|,
name|blob
operator|.
name|getProperties
argument_list|()
operator|.
name|getLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|blob
operator|.
name|startCopy
argument_list|(
name|blob
argument_list|)
expr_stmt|;
comment|//TODO: better way of updating lastModified (use custom metadata?)
if|if
condition|(
operator|!
name|waitForCopy
argument_list|(
name|blob
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot update lastModified for blob. identifier=%s status=%s"
argument_list|,
name|key
argument_list|,
name|blob
operator|.
name|getCopyState
argument_list|()
operator|.
name|getStatusDescription
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Blob updated. identifier={} lastModified={} duration={}"
argument_list|,
name|key
argument_list|,
name|blob
operator|.
name|getProperties
argument_list|()
operator|.
name|getLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error writing blob. identifier={}"
argument_list|,
name|key
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot write blob. identifier=%s"
argument_list|,
name|key
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error writing blob. identifier={}"
argument_list|,
name|key
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot write blob. identifier=%s"
argument_list|,
name|key
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error writing blob. identifier={}"
argument_list|,
name|key
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot copy blob. identifier=%s"
argument_list|,
name|key
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|contextClassLoader
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|boolean
name|waitForCopy
parameter_list|(
name|CloudBlob
name|blob
parameter_list|)
throws|throws
name|StorageException
throws|,
name|InterruptedException
block|{
name|boolean
name|continueLoop
init|=
literal|true
decl_stmt|;
name|CopyStatus
name|status
init|=
name|CopyStatus
operator|.
name|PENDING
decl_stmt|;
while|while
condition|(
name|continueLoop
condition|)
block|{
name|blob
operator|.
name|downloadAttributes
argument_list|()
expr_stmt|;
name|status
operator|=
name|blob
operator|.
name|getCopyState
argument_list|()
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|continueLoop
operator|=
name|status
operator|==
name|CopyStatus
operator|.
name|PENDING
expr_stmt|;
comment|// Sleep if retry is needed
if|if
condition|(
name|continueLoop
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|status
operator|==
name|CopyStatus
operator|.
name|SUCCESS
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getOrCreateReferenceKey
parameter_list|()
throws|throws
name|DataStoreException
block|{
try|try
block|{
if|if
condition|(
name|secret
operator|!=
literal|null
operator|&&
name|secret
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
return|return
name|secret
return|;
block|}
else|else
block|{
name|byte
index|[]
name|key
decl_stmt|;
comment|// Try reading from the metadata folder if it exists
name|DataRecord
name|rec
init|=
name|getMetadataRecord
argument_list|(
name|REF_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|rec
operator|!=
literal|null
condition|)
block|{
name|key
operator|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|rec
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|key
operator|=
name|super
operator|.
name|getOrCreateReferenceKey
argument_list|()
expr_stmt|;
name|addMetadataRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|key
argument_list|)
argument_list|,
name|REF_KEY
argument_list|)
expr_stmt|;
block|}
name|secret
operator|=
name|key
expr_stmt|;
return|return
name|secret
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
literal|"Unable to get or create key "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DataRecord
name|getRecord
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
if|if
condition|(
literal|null
operator|==
name|identifier
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"identifier"
argument_list|)
throw|;
block|}
name|String
name|key
init|=
name|getKeyName
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|CloudBlockBlob
name|blob
init|=
name|getAzureContainer
argument_list|()
operator|.
name|getBlockBlobReference
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|blob
operator|.
name|exists
argument_list|()
condition|)
block|{
name|blob
operator|.
name|downloadAttributes
argument_list|()
expr_stmt|;
name|AzureBlobStoreDataRecord
name|record
init|=
operator|new
name|AzureBlobStoreDataRecord
argument_list|(
name|this
argument_list|,
name|connectionString
argument_list|,
name|containerName
argument_list|,
operator|new
name|DataIdentifier
argument_list|(
name|getIdentifierName
argument_list|(
name|blob
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|blob
operator|.
name|getProperties
argument_list|()
operator|.
name|getLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
name|blob
operator|.
name|getProperties
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data record read for blob. identifier={} duration={} record={}"
argument_list|,
name|key
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|,
name|record
argument_list|)
expr_stmt|;
return|return
name|record
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Blob not found. identifier={} duration={}"
argument_list|,
name|key
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot find blob. identifier=%s"
argument_list|,
name|key
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error getting data record for blob. identifier={}"
argument_list|,
name|key
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot retrieve blob. identifier=%s"
argument_list|,
name|key
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error getting data record for blob. identifier={}"
argument_list|,
name|key
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot retrieve blob. identifier=%s"
argument_list|,
name|key
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|DataIdentifier
argument_list|>
name|getAllIdentifiers
parameter_list|()
throws|throws
name|DataStoreException
block|{
return|return
operator|new
name|RecordsIterator
argument_list|<
name|DataIdentifier
argument_list|>
argument_list|(
operator|new
name|Function
argument_list|<
name|AzureBlobInfo
argument_list|,
name|DataIdentifier
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DataIdentifier
name|apply
parameter_list|(
name|AzureBlobInfo
name|input
parameter_list|)
block|{
return|return
operator|new
name|DataIdentifier
argument_list|(
name|getIdentifierName
argument_list|(
name|input
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|DataRecord
argument_list|>
name|getAllRecords
parameter_list|()
throws|throws
name|DataStoreException
block|{
specifier|final
name|AbstractSharedBackend
name|backend
init|=
name|this
decl_stmt|;
return|return
operator|new
name|RecordsIterator
argument_list|<
name|DataRecord
argument_list|>
argument_list|(
operator|new
name|Function
argument_list|<
name|AzureBlobInfo
argument_list|,
name|DataRecord
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DataRecord
name|apply
parameter_list|(
name|AzureBlobInfo
name|input
parameter_list|)
block|{
return|return
operator|new
name|AzureBlobStoreDataRecord
argument_list|(
name|backend
argument_list|,
name|connectionString
argument_list|,
name|containerName
argument_list|,
operator|new
name|DataIdentifier
argument_list|(
name|getIdentifierName
argument_list|(
name|input
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|input
operator|.
name|getLastModified
argument_list|()
argument_list|,
name|input
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|getKeyName
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|exists
init|=
name|getAzureContainer
argument_list|()
operator|.
name|getBlockBlobReference
argument_list|(
name|key
argument_list|)
operator|.
name|exists
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Blob exists={} identifier={} duration={}"
argument_list|,
name|exists
argument_list|,
name|key
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
return|return
name|exists
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|contextClassLoader
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"AzureBlobBackend closed."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteRecord
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
if|if
condition|(
literal|null
operator|==
name|identifier
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"identifier"
argument_list|)
throw|;
name|String
name|key
init|=
name|getKeyName
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
name|getAzureContainer
argument_list|()
operator|.
name|getBlockBlobReference
argument_list|(
name|key
argument_list|)
operator|.
name|deleteIfExists
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Blob {}. identifier={} duration={}"
argument_list|,
name|result
condition|?
literal|"deleted"
else|:
literal|"delete requested, but it does not exist (perhaps already deleted)"
argument_list|,
name|key
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error deleting blob. identifier={}"
argument_list|,
name|key
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addMetadataRecord
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|DataStoreException
block|{
if|if
condition|(
literal|null
operator|==
name|input
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"input"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"name"
argument_list|)
throw|;
block|}
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|addMetadataRecordImpl
argument_list|(
name|input
argument_list|,
name|name
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Metadata record added. metadataName={} duration={}"
argument_list|,
name|name
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|contextClassLoader
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addMetadataRecord
parameter_list|(
name|File
name|input
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|DataStoreException
block|{
if|if
condition|(
literal|null
operator|==
name|input
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"input"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"name"
argument_list|)
throw|;
block|}
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|addMetadataRecordImpl
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|input
argument_list|)
argument_list|,
name|name
argument_list|,
name|input
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Metadata record added. metadataName={} duration={}"
argument_list|,
name|name
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|contextClassLoader
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addMetadataRecordImpl
parameter_list|(
specifier|final
name|InputStream
name|input
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|recordLength
parameter_list|)
throws|throws
name|DataStoreException
block|{
try|try
block|{
name|CloudBlobDirectory
name|metaDir
init|=
name|getAzureContainer
argument_list|()
operator|.
name|getDirectoryReference
argument_list|(
name|META_DIR_NAME
argument_list|)
decl_stmt|;
name|CloudBlockBlob
name|blob
init|=
name|metaDir
operator|.
name|getBlockBlobReference
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|blob
operator|.
name|upload
argument_list|(
name|input
argument_list|,
name|recordLength
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error adding metadata record. metadataName={} length={}"
argument_list|,
name|name
argument_list|,
name|recordLength
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DataRecord
name|getMetadataRecord
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|CloudBlobDirectory
name|metaDir
init|=
name|getAzureContainer
argument_list|()
operator|.
name|getDirectoryReference
argument_list|(
name|META_DIR_NAME
argument_list|)
decl_stmt|;
name|CloudBlockBlob
name|blob
init|=
name|metaDir
operator|.
name|getBlockBlobReference
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|blob
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Trying to read missing metadata. metadataName={}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|blob
operator|.
name|downloadAttributes
argument_list|()
expr_stmt|;
name|long
name|lastModified
init|=
name|blob
operator|.
name|getProperties
argument_list|()
operator|.
name|getLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|length
init|=
name|blob
operator|.
name|getProperties
argument_list|()
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|AzureBlobStoreDataRecord
name|record
init|=
operator|new
name|AzureBlobStoreDataRecord
argument_list|(
name|this
argument_list|,
name|connectionString
argument_list|,
name|containerName
argument_list|,
operator|new
name|DataIdentifier
argument_list|(
name|name
argument_list|)
argument_list|,
name|lastModified
argument_list|,
name|length
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Metadata record read. metadataName={} duration={} record={}"
argument_list|,
name|name
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|,
name|record
argument_list|)
expr_stmt|;
return|return
name|record
return|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error reading metadata record. metadataName={}"
argument_list|,
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error reading metadata record. metadataName={}"
argument_list|,
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|contextClassLoader
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|DataRecord
argument_list|>
name|getAllMetadataRecords
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|prefix
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"prefix"
argument_list|)
throw|;
block|}
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DataRecord
argument_list|>
name|records
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|CloudBlobDirectory
name|metaDir
init|=
name|getAzureContainer
argument_list|()
operator|.
name|getDirectoryReference
argument_list|(
name|META_DIR_NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|ListBlobItem
name|item
range|:
name|metaDir
operator|.
name|listBlobs
argument_list|(
name|prefix
argument_list|)
control|)
block|{
if|if
condition|(
name|item
operator|instanceof
name|CloudBlob
condition|)
block|{
name|CloudBlob
name|blob
init|=
operator|(
name|CloudBlob
operator|)
name|item
decl_stmt|;
name|records
operator|.
name|add
argument_list|(
operator|new
name|AzureBlobStoreDataRecord
argument_list|(
name|this
argument_list|,
name|connectionString
argument_list|,
name|containerName
argument_list|,
operator|new
name|DataIdentifier
argument_list|(
name|stripMetaKeyPrefix
argument_list|(
name|blob
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|blob
operator|.
name|getProperties
argument_list|()
operator|.
name|getLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
name|blob
operator|.
name|getProperties
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Metadata records read. recordsRead={} metadataFolder={} duration={}"
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|,
name|prefix
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error reading all metadata records. metadataFolder={}"
argument_list|,
name|prefix
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
decl||
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error reading all metadata records. metadataFolder={}"
argument_list|,
name|prefix
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|contextClassLoader
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|records
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteMetadataRecord
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|CloudBlockBlob
name|blob
init|=
name|getAzureContainer
argument_list|()
operator|.
name|getBlockBlobReference
argument_list|(
name|addMetaKeyPrefix
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
name|blob
operator|.
name|deleteIfExists
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Metadata record {}. metadataName={} duration={}"
argument_list|,
name|result
condition|?
literal|"deleted"
else|:
literal|"delete requested, but it does not exist (perhaps already deleted)"
argument_list|,
name|name
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error deleting metadata record. metadataName={}"
argument_list|,
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
decl||
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error deleting metadata record. metadataName={}"
argument_list|,
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteAllMetadataRecords
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|prefix
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"prefix"
argument_list|)
throw|;
block|}
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|CloudBlobDirectory
name|metaDir
init|=
name|getAzureContainer
argument_list|()
operator|.
name|getDirectoryReference
argument_list|(
name|META_DIR_NAME
argument_list|)
decl_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ListBlobItem
name|item
range|:
name|metaDir
operator|.
name|listBlobs
argument_list|(
name|prefix
argument_list|)
control|)
block|{
if|if
condition|(
name|item
operator|instanceof
name|CloudBlob
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|CloudBlob
operator|)
name|item
operator|)
operator|.
name|deleteIfExists
argument_list|()
condition|)
block|{
name|total
operator|++
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Metadata records deleted. recordsDeleted={} metadataFolder={} duration={}"
argument_list|,
name|total
argument_list|,
name|prefix
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error deleting all metadata records. metadataFolder={}"
argument_list|,
name|prefix
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
decl||
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error deleting all metadata records. metadataFolder={}"
argument_list|,
name|prefix
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|contextClassLoader
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Get key from data identifier. Object is stored with key in ADS.      */
specifier|private
specifier|static
name|String
name|getKeyName
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
block|{
name|String
name|key
init|=
name|identifier
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
operator|+
name|Utils
operator|.
name|DASH
operator|+
name|key
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
return|;
block|}
comment|/**      * Get data identifier from key.      */
specifier|private
specifier|static
name|String
name|getIdentifierName
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|key
operator|.
name|contains
argument_list|(
name|Utils
operator|.
name|DASH
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|contains
argument_list|(
name|META_KEY_PREFIX
argument_list|)
condition|)
block|{
return|return
name|key
return|;
block|}
return|return
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
operator|+
name|key
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|addMetaKeyPrefix
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
return|return
name|META_KEY_PREFIX
operator|+
name|key
return|;
block|}
specifier|private
specifier|static
name|String
name|stripMetaKeyPrefix
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|META_KEY_PREFIX
argument_list|)
condition|)
block|{
return|return
name|name
operator|.
name|substring
argument_list|(
name|META_KEY_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
return|return
name|name
return|;
block|}
specifier|private
specifier|static
class|class
name|AzureBlobInfo
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|long
name|lastModified
decl_stmt|;
specifier|private
specifier|final
name|long
name|length
decl_stmt|;
specifier|public
name|AzureBlobInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|lastModified
parameter_list|,
name|long
name|length
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|lastModified
operator|=
name|lastModified
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|long
name|getLastModified
parameter_list|()
block|{
return|return
name|lastModified
return|;
block|}
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
specifier|public
specifier|static
name|AzureBlobInfo
name|fromCloudBlob
parameter_list|(
name|CloudBlob
name|cloudBlob
parameter_list|)
block|{
return|return
operator|new
name|AzureBlobInfo
argument_list|(
name|cloudBlob
operator|.
name|getName
argument_list|()
argument_list|,
name|cloudBlob
operator|.
name|getProperties
argument_list|()
operator|.
name|getLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
name|cloudBlob
operator|.
name|getProperties
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|RecordsIterator
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractIterator
argument_list|<
name|T
argument_list|>
block|{
comment|// Seems to be thread-safe (in 5.0.0)
name|ResultContinuation
name|resultContinuation
decl_stmt|;
name|boolean
name|firstCall
init|=
literal|true
decl_stmt|;
specifier|final
name|Function
argument_list|<
name|AzureBlobInfo
argument_list|,
name|T
argument_list|>
name|transformer
decl_stmt|;
specifier|final
name|Queue
argument_list|<
name|AzureBlobInfo
argument_list|>
name|items
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
specifier|public
name|RecordsIterator
parameter_list|(
name|Function
argument_list|<
name|AzureBlobInfo
argument_list|,
name|T
argument_list|>
name|transformer
parameter_list|)
block|{
name|this
operator|.
name|transformer
operator|=
name|transformer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|T
name|computeNext
parameter_list|()
block|{
if|if
condition|(
name|items
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|loadItems
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|items
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|transformer
operator|.
name|apply
argument_list|(
name|items
operator|.
name|remove
argument_list|()
argument_list|)
return|;
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|loadItems
parameter_list|()
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ClassLoader
name|contextClassLoader
init|=
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|CloudBlobContainer
name|container
init|=
name|Utils
operator|.
name|getBlobContainer
argument_list|(
name|connectionString
argument_list|,
name|containerName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|firstCall
operator|&&
operator|(
name|resultContinuation
operator|==
literal|null
operator|||
operator|!
name|resultContinuation
operator|.
name|hasContinuation
argument_list|()
operator|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"No more records in container. containerName={}"
argument_list|,
name|container
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|firstCall
operator|=
literal|false
expr_stmt|;
name|ResultSegment
argument_list|<
name|ListBlobItem
argument_list|>
name|results
init|=
name|container
operator|.
name|listBlobsSegmented
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|BlobListingDetails
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
name|resultContinuation
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|resultContinuation
operator|=
name|results
operator|.
name|getContinuationToken
argument_list|()
expr_stmt|;
for|for
control|(
name|ListBlobItem
name|item
range|:
name|results
operator|.
name|getResults
argument_list|()
control|)
block|{
if|if
condition|(
name|item
operator|instanceof
name|CloudBlob
condition|)
block|{
name|items
operator|.
name|add
argument_list|(
name|AzureBlobInfo
operator|.
name|fromCloudBlob
argument_list|(
operator|(
name|CloudBlob
operator|)
name|item
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Container records batch read. batchSize={} containerName={} duration={}"
argument_list|,
name|results
operator|.
name|getLength
argument_list|()
argument_list|,
name|containerName
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
return|return
name|results
operator|.
name|getLength
argument_list|()
operator|>
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error listing blobs. containerName={}"
argument_list|,
name|containerName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot list blobs. containerName={}"
argument_list|,
name|containerName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|static
class|class
name|AzureBlobStoreDataRecord
extends|extends
name|AbstractDataRecord
block|{
specifier|final
name|String
name|connectionString
decl_stmt|;
specifier|final
name|String
name|containerName
decl_stmt|;
specifier|final
name|long
name|lastModified
decl_stmt|;
specifier|final
name|long
name|length
decl_stmt|;
specifier|final
name|boolean
name|isMeta
decl_stmt|;
specifier|public
name|AzureBlobStoreDataRecord
parameter_list|(
name|AbstractSharedBackend
name|backend
parameter_list|,
name|String
name|connectionString
parameter_list|,
name|String
name|containerName
parameter_list|,
name|DataIdentifier
name|key
parameter_list|,
name|long
name|lastModified
parameter_list|,
name|long
name|length
parameter_list|)
block|{
name|this
argument_list|(
name|backend
argument_list|,
name|connectionString
argument_list|,
name|containerName
argument_list|,
name|key
argument_list|,
name|lastModified
argument_list|,
name|length
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AzureBlobStoreDataRecord
parameter_list|(
name|AbstractSharedBackend
name|backend
parameter_list|,
name|String
name|connectionString
parameter_list|,
name|String
name|containerName
parameter_list|,
name|DataIdentifier
name|key
parameter_list|,
name|long
name|lastModified
parameter_list|,
name|long
name|length
parameter_list|,
name|boolean
name|isMeta
parameter_list|)
block|{
name|super
argument_list|(
name|backend
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectionString
operator|=
name|connectionString
expr_stmt|;
name|this
operator|.
name|containerName
operator|=
name|containerName
expr_stmt|;
name|this
operator|.
name|lastModified
operator|=
name|lastModified
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|isMeta
operator|=
name|isMeta
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|()
throws|throws
name|DataStoreException
block|{
return|return
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getStream
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|String
name|id
init|=
name|getKeyName
argument_list|(
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|CloudBlobContainer
name|container
init|=
name|Utils
operator|.
name|getBlobContainer
argument_list|(
name|connectionString
argument_list|,
name|containerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|isMeta
condition|)
block|{
name|id
operator|=
name|addMetaKeyPrefix
argument_list|(
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|container
operator|.
name|getBlockBlobReference
argument_list|(
name|id
argument_list|)
operator|.
name|openInputStream
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|StorageException
decl||
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLastModified
parameter_list|()
block|{
return|return
name|lastModified
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AzureBlobStoreDataRecord{"
operator|+
literal|"identifier="
operator|+
name|getIdentifier
argument_list|()
operator|+
literal|", length="
operator|+
name|length
operator|+
literal|", lastModified="
operator|+
name|lastModified
operator|+
literal|", containerName='"
operator|+
name|containerName
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
block|}
block|}
end_class

end_unit

