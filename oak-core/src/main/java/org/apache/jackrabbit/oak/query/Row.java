begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
package|;
end_package

begin_comment
comment|/**  * A query result row that keeps all data in memory.  */
end_comment

begin_class
specifier|public
class|class
name|Row
implements|implements
name|Comparable
argument_list|<
name|Row
argument_list|>
block|{
specifier|private
specifier|final
name|Query
name|qom
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|paths
decl_stmt|;
specifier|private
specifier|final
name|Value
index|[]
name|values
decl_stmt|;
specifier|private
specifier|final
name|Value
index|[]
name|orderValues
decl_stmt|;
name|Row
parameter_list|(
name|Query
name|qom
parameter_list|,
name|String
index|[]
name|paths
parameter_list|,
name|Value
index|[]
name|values
parameter_list|,
name|Value
index|[]
name|orderValues
parameter_list|)
block|{
name|this
operator|.
name|qom
operator|=
name|qom
expr_stmt|;
name|this
operator|.
name|paths
operator|=
name|paths
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|orderValues
operator|=
name|orderValues
expr_stmt|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
if|if
condition|(
name|paths
operator|.
name|length
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"More than one selector"
argument_list|)
throw|;
block|}
return|return
name|paths
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|String
name|getPath
parameter_list|(
name|String
name|selectorName
parameter_list|)
block|{
return|return
name|paths
index|[
name|qom
operator|.
name|getSelectorIndex
argument_list|(
name|selectorName
argument_list|)
index|]
return|;
block|}
specifier|public
name|Value
name|getValue
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
return|return
name|values
index|[
name|qom
operator|.
name|getColumnIndex
argument_list|(
name|columnName
argument_list|)
index|]
return|;
block|}
specifier|public
name|Value
index|[]
name|getValues
parameter_list|()
block|{
name|Value
index|[]
name|v2
init|=
operator|new
name|Value
index|[
name|values
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|v2
argument_list|,
literal|0
argument_list|,
name|v2
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|v2
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Row
name|o
parameter_list|)
block|{
return|return
name|qom
operator|.
name|compareRows
argument_list|(
name|orderValues
argument_list|,
name|o
operator|.
name|orderValues
argument_list|)
return|;
block|}
block|}
end_class

end_unit

