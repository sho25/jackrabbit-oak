begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|flatfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|NodeStateEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|size
import|;
end_import

begin_class
specifier|public
class|class
name|FlatFileNodeStoreBuilder
block|{
specifier|public
specifier|static
specifier|final
name|String
name|OAK_INDEXER_USE_ZIP
init|=
literal|"oak.indexer.useZip"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OAK_INDEXER_TRAVERSE_WITH_SORT
init|=
literal|"oak.indexer.traverseWithSortStrategy"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OAK_INDEXER_SORTED_FILE_PATH
init|=
literal|"oak.indexer.sortedFilePath"
decl_stmt|;
specifier|static
specifier|final
name|String
name|OAK_INDEXER_MAX_SORT_MEMORY_IN_GB
init|=
literal|"oak.indexer.maxSortMemoryInGB"
decl_stmt|;
specifier|static
specifier|final
name|int
name|OAK_INDEXER_MAX_SORT_MEMORY_IN_GB_DEFAULT
init|=
literal|2
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Iterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|nodeStates
decl_stmt|;
specifier|private
specifier|final
name|File
name|workDir
decl_stmt|;
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|preferredPathElements
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
specifier|private
name|BlobStore
name|blobStore
decl_stmt|;
specifier|private
name|PathElementComparator
name|comparator
decl_stmt|;
specifier|private
name|NodeStateEntryWriter
name|entryWriter
decl_stmt|;
specifier|private
name|long
name|entryCount
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|useZip
init|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|OAK_INDEXER_USE_ZIP
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|useTraverseWithSort
init|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|OAK_INDEXER_TRAVERSE_WITH_SORT
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|FlatFileNodeStoreBuilder
parameter_list|(
name|Iterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|nodeStates
parameter_list|,
name|File
name|workDir
parameter_list|)
block|{
name|this
operator|.
name|nodeStates
operator|=
name|nodeStates
expr_stmt|;
name|this
operator|.
name|workDir
operator|=
name|workDir
expr_stmt|;
block|}
specifier|public
name|FlatFileNodeStoreBuilder
name|withBlobStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|FlatFileNodeStoreBuilder
name|withPreferredPathElements
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|preferredPathElements
parameter_list|)
block|{
name|this
operator|.
name|preferredPathElements
operator|=
name|preferredPathElements
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|FlatFileStore
name|build
parameter_list|()
throws|throws
name|IOException
block|{
name|logFlags
argument_list|()
expr_stmt|;
name|comparator
operator|=
operator|new
name|PathElementComparator
argument_list|(
name|preferredPathElements
argument_list|)
expr_stmt|;
name|entryWriter
operator|=
operator|new
name|NodeStateEntryWriter
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
name|FlatFileStore
name|store
init|=
operator|new
name|FlatFileStore
argument_list|(
name|createdSortedStoreFile
argument_list|()
argument_list|,
operator|new
name|NodeStateEntryReader
argument_list|(
name|blobStore
argument_list|)
argument_list|,
name|size
argument_list|(
name|preferredPathElements
argument_list|)
argument_list|,
name|useZip
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryCount
operator|>
literal|0
condition|)
block|{
name|store
operator|.
name|setEntryCount
argument_list|(
name|entryCount
argument_list|)
expr_stmt|;
block|}
return|return
name|store
return|;
block|}
specifier|private
name|File
name|createdSortedStoreFile
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|sortedFilePath
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|OAK_INDEXER_SORTED_FILE_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortedFilePath
operator|!=
literal|null
condition|)
block|{
name|File
name|sortedFile
init|=
operator|new
name|File
argument_list|(
name|sortedFilePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortedFile
operator|.
name|exists
argument_list|()
operator|&&
name|sortedFile
operator|.
name|isFile
argument_list|()
operator|&&
name|sortedFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Reading from provided sorted file [{}] (via system property '{}')"
argument_list|,
name|sortedFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|OAK_INDEXER_SORTED_FILE_PATH
argument_list|)
expr_stmt|;
return|return
name|sortedFile
return|;
block|}
else|else
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Cannot read sorted file at [%s] configured via system property '%s'"
argument_list|,
name|sortedFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|OAK_INDEXER_SORTED_FILE_PATH
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|File
name|flatFileStoreDir
init|=
name|createStoreDir
argument_list|()
decl_stmt|;
name|SortStrategy
name|strategy
init|=
name|createSortStrategy
argument_list|(
name|flatFileStoreDir
argument_list|)
decl_stmt|;
name|File
name|result
init|=
name|strategy
operator|.
name|createSortedStoreFile
argument_list|()
decl_stmt|;
name|entryCount
operator|=
name|strategy
operator|.
name|getEntryCount
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
specifier|private
name|SortStrategy
name|createSortStrategy
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
if|if
condition|(
name|useTraverseWithSort
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Using TraverseWithSortStrategy"
argument_list|)
expr_stmt|;
return|return
operator|new
name|TraverseWithSortStrategy
argument_list|(
name|nodeStates
argument_list|,
name|comparator
argument_list|,
name|entryWriter
argument_list|,
name|dir
argument_list|,
name|useZip
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Using StoreAndSortStrategy"
argument_list|)
expr_stmt|;
return|return
operator|new
name|StoreAndSortStrategy
argument_list|(
name|nodeStates
argument_list|,
name|comparator
argument_list|,
name|entryWriter
argument_list|,
name|dir
argument_list|,
name|useZip
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|logFlags
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Preferred path elements are {}"
argument_list|,
name|Iterables
operator|.
name|toString
argument_list|(
name|preferredPathElements
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Compression enabled while sorting : {} ({})"
argument_list|,
name|useZip
argument_list|,
name|OAK_INDEXER_USE_ZIP
argument_list|)
expr_stmt|;
name|String
name|strategy
init|=
name|useTraverseWithSort
condition|?
name|TraverseWithSortStrategy
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
else|:
name|StoreAndSortStrategy
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sort strategy : {} ({})"
argument_list|,
name|strategy
argument_list|,
name|OAK_INDEXER_TRAVERSE_WITH_SORT
argument_list|)
expr_stmt|;
block|}
specifier|private
name|File
name|createStoreDir
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"flat-file-store"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|dir
argument_list|)
expr_stmt|;
return|return
name|dir
return|;
block|}
block|}
end_class

end_unit

