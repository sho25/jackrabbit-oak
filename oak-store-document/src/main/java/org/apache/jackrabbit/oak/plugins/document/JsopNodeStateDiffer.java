begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_comment
comment|/**  * A {@link NodeStateDiffer} implementation backed by a JSOP String.  */
end_comment

begin_class
class|class
name|JsopNodeStateDiffer
implements|implements
name|NodeStateDiffer
block|{
specifier|private
specifier|final
name|String
name|jsonDiff
decl_stmt|;
specifier|private
name|boolean
name|withoutPropertyChanges
init|=
literal|false
decl_stmt|;
name|JsopNodeStateDiffer
parameter_list|(
name|String
name|diff
parameter_list|)
block|{
name|this
operator|.
name|jsonDiff
operator|=
name|diff
operator|==
literal|null
condition|?
literal|""
else|:
name|diff
expr_stmt|;
block|}
name|JsopNodeStateDiffer
name|withoutPropertyChanges
parameter_list|()
block|{
name|withoutPropertyChanges
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|compare
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|AbstractDocumentNodeState
name|node
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|AbstractDocumentNodeState
name|base
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|NodeStateDiff
name|diff
parameter_list|)
block|{
if|if
condition|(
operator|!
name|withoutPropertyChanges
condition|)
block|{
if|if
condition|(
operator|!
name|AbstractNodeState
operator|.
name|comparePropertiesAgainstBaseState
argument_list|(
name|node
argument_list|,
name|base
argument_list|,
name|diff
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
name|DiffCache
operator|.
name|parseJsopDiff
argument_list|(
name|jsonDiff
argument_list|,
operator|new
name|DiffCache
operator|.
name|Diff
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|diff
operator|.
name|childNodeAdded
argument_list|(
name|name
argument_list|,
name|node
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|boolean
name|continueComparison
init|=
literal|true
decl_stmt|;
name|NodeState
name|baseChild
init|=
name|base
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|NodeState
name|nodeChild
init|=
name|node
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseChild
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|nodeChild
operator|.
name|exists
argument_list|()
condition|)
block|{
name|continueComparison
operator|=
name|compareExisting
argument_list|(
name|baseChild
argument_list|,
name|nodeChild
argument_list|,
name|name
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|continueComparison
operator|=
name|diff
operator|.
name|childNodeDeleted
argument_list|(
name|name
argument_list|,
name|baseChild
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|nodeChild
operator|.
name|exists
argument_list|()
condition|)
block|{
name|continueComparison
operator|=
name|diff
operator|.
name|childNodeAdded
argument_list|(
name|name
argument_list|,
name|nodeChild
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|continueComparison
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|diff
operator|.
name|childNodeDeleted
argument_list|(
name|name
argument_list|,
name|base
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|compareExisting
parameter_list|(
name|NodeState
name|baseChild
parameter_list|,
name|NodeState
name|nodeChild
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeStateDiff
name|diff
parameter_list|)
block|{
if|if
condition|(
name|baseChild
operator|instanceof
name|AbstractDocumentNodeState
operator|&&
name|nodeChild
operator|instanceof
name|AbstractDocumentNodeState
condition|)
block|{
name|AbstractDocumentNodeState
name|beforeChild
init|=
operator|(
name|AbstractDocumentNodeState
operator|)
name|baseChild
decl_stmt|;
name|AbstractDocumentNodeState
name|afterChild
init|=
operator|(
name|AbstractDocumentNodeState
operator|)
name|nodeChild
decl_stmt|;
if|if
condition|(
name|beforeChild
operator|.
name|getLastRevision
argument_list|()
operator|.
name|equals
argument_list|(
name|afterChild
operator|.
name|getLastRevision
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
name|diff
operator|.
name|childNodeChanged
argument_list|(
name|name
argument_list|,
name|baseChild
argument_list|,
name|nodeChild
argument_list|)
return|;
block|}
block|}
end_class

end_unit

