begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|getIdFromPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|LastRevRecoveryAgentTest
extends|extends
name|AbstractTwoNodeTest
block|{
specifier|public
name|LastRevRecoveryAgentTest
parameter_list|(
name|DocumentStoreFixture
name|fixture
parameter_list|)
block|{
name|super
argument_list|(
name|fixture
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsRecoveryRequired
parameter_list|()
throws|throws
name|Exception
block|{
comment|//1. Create base structure /x/y
name|NodeBuilder
name|b1
init|=
name|ds1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
operator|.
name|child
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|ds1
operator|.
name|merge
argument_list|(
name|b1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|ds1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|ds2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|//2. Add a new node /x/y/z in C2
name|NodeBuilder
name|b2
init|=
name|ds2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b2
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
operator|.
name|child
argument_list|(
literal|"y"
argument_list|)
operator|.
name|child
argument_list|(
literal|"z"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|ds2
operator|.
name|merge
argument_list|(
name|b2
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|Revision
name|zlastRev2
init|=
name|ds2
operator|.
name|getHeadRevision
argument_list|()
operator|.
name|getRevision
argument_list|(
name|ds2
operator|.
name|getClusterId
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|leaseTime
init|=
name|ds1
operator|.
name|getClusterInfo
argument_list|()
operator|.
name|getLeaseTime
argument_list|()
decl_stmt|;
name|ds1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|leaseTime
operator|+
literal|10
argument_list|)
expr_stmt|;
comment|//Renew the lease for C1
name|ds1
operator|.
name|getClusterInfo
argument_list|()
operator|.
name|renewLease
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ds1
operator|.
name|getLastRevRecoveryAgent
argument_list|()
operator|.
name|isRecoveryNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|cids
init|=
name|ds1
operator|.
name|getLastRevRecoveryAgent
argument_list|()
operator|.
name|getRecoveryCandidateNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|cids
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c2Id
argument_list|,
name|Iterables
operator|.
name|get
argument_list|(
name|cids
argument_list|,
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|ds1
operator|.
name|getLastRevRecoveryAgent
argument_list|()
operator|.
name|recover
argument_list|(
name|Iterables
operator|.
name|get
argument_list|(
name|cids
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zlastRev2
argument_list|,
name|getDocument
argument_list|(
name|ds1
argument_list|,
literal|"/x/y"
argument_list|)
operator|.
name|getLastRev
argument_list|()
operator|.
name|get
argument_list|(
name|c2Id
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zlastRev2
argument_list|,
name|getDocument
argument_list|(
name|ds1
argument_list|,
literal|"/x"
argument_list|)
operator|.
name|getLastRev
argument_list|()
operator|.
name|get
argument_list|(
name|c2Id
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zlastRev2
argument_list|,
name|getDocument
argument_list|(
name|ds1
argument_list|,
literal|"/"
argument_list|)
operator|.
name|getLastRev
argument_list|()
operator|.
name|get
argument_list|(
name|c2Id
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//OAK-5337
annotation|@
name|Test
specifier|public
name|void
name|testSelfRecovery
parameter_list|()
throws|throws
name|Exception
block|{
comment|//1. Create base structure /x/y
name|NodeBuilder
name|b1
init|=
name|ds1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
operator|.
name|child
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ds1
argument_list|,
name|b1
argument_list|)
expr_stmt|;
name|ds1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|//2. Add a new node /x/y/z in C1
name|b1
operator|=
name|ds1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
operator|.
name|child
argument_list|(
literal|"y"
argument_list|)
operator|.
name|child
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ds1
argument_list|,
name|b1
argument_list|)
expr_stmt|;
name|long
name|leaseTime
init|=
name|ds1
operator|.
name|getClusterInfo
argument_list|()
operator|.
name|getLeaseTime
argument_list|()
decl_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|leaseTime
operator|+
literal|10
argument_list|)
expr_stmt|;
comment|//Renew the lease for C2
name|ds2
operator|.
name|getClusterInfo
argument_list|()
operator|.
name|renewLease
argument_list|()
expr_stmt|;
comment|//C1 needs recovery from lease timeout pov
name|assertTrue
argument_list|(
name|ds1
operator|.
name|getLastRevRecoveryAgent
argument_list|()
operator|.
name|isRecoveryNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|cids
init|=
name|ds1
operator|.
name|getLastRevRecoveryAgent
argument_list|()
operator|.
name|getRecoveryCandidateNodes
argument_list|()
decl_stmt|;
comment|//.. but, it won't be returned while we iterate candidate nodes from self
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|cids
argument_list|)
argument_list|)
expr_stmt|;
name|cids
operator|=
name|ds2
operator|.
name|getLastRevRecoveryAgent
argument_list|()
operator|.
name|getRecoveryCandidateNodes
argument_list|()
expr_stmt|;
comment|//... checking that from other node still reports
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|cids
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c1Id
argument_list|,
name|Iterables
operator|.
name|get
argument_list|(
name|cids
argument_list|,
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|ds2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|ds2
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"x"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"y"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
comment|// yet, calling recover with self-cluster-id still works (useful for startup LRRA)
name|ds1
operator|.
name|getLastRevRecoveryAgent
argument_list|()
operator|.
name|recover
argument_list|(
name|Iterables
operator|.
name|get
argument_list|(
name|cids
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ds2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ds2
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"x"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"y"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRepeatedRecovery
parameter_list|()
throws|throws
name|Exception
block|{
comment|//1. Create base structure /x/y
name|NodeBuilder
name|b1
init|=
name|ds1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
operator|.
name|child
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|ds1
operator|.
name|merge
argument_list|(
name|b1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|ds1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|ds2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|//2. Add a new node /x/y/z in C2
name|NodeBuilder
name|b2
init|=
name|ds2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b2
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
operator|.
name|child
argument_list|(
literal|"y"
argument_list|)
operator|.
name|child
argument_list|(
literal|"z"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|ds2
operator|.
name|merge
argument_list|(
name|b2
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|NodeDocument
name|z1
init|=
name|getDocument
argument_list|(
name|ds1
argument_list|,
literal|"/x/y/z"
argument_list|)
decl_stmt|;
name|Revision
name|zlastRev2
init|=
name|z1
operator|.
name|getLastRev
argument_list|()
operator|.
name|get
argument_list|(
name|c2Id
argument_list|)
decl_stmt|;
name|long
name|leaseTime
init|=
name|ds1
operator|.
name|getClusterInfo
argument_list|()
operator|.
name|getLeaseTime
argument_list|()
decl_stmt|;
name|ds1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|leaseTime
operator|+
literal|10
argument_list|)
expr_stmt|;
comment|//Renew the lease for C1
name|ds1
operator|.
name|getClusterInfo
argument_list|()
operator|.
name|renewLease
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ds1
operator|.
name|getLastRevRecoveryAgent
argument_list|()
operator|.
name|isRecoveryNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|ds1
operator|.
name|getLastRevRecoveryAgent
argument_list|()
operator|.
name|performRecoveryIfNeeded
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|ds1
operator|.
name|getLastRevRecoveryAgent
argument_list|()
operator|.
name|isRecoveryNeeded
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|recoveryOfModifiedDocument
parameter_list|()
throws|throws
name|Exception
block|{
comment|// do not retry merges
name|ds1
operator|.
name|setMaxBackOffMillis
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ds2
operator|.
name|setMaxBackOffMillis
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|NodeBuilder
name|b1
init|=
name|ds1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
operator|.
name|child
argument_list|(
literal|"y"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"v1"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ds1
argument_list|,
name|b1
argument_list|)
expr_stmt|;
name|ds1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|ds2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|NodeBuilder
name|b2
init|=
name|ds2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b2
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
operator|.
name|child
argument_list|(
literal|"y"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"v2"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ds2
argument_list|,
name|b2
argument_list|)
expr_stmt|;
comment|// simulate a crash of ds2
name|long
name|leaseTime
init|=
name|ds2
operator|.
name|getClusterInfo
argument_list|()
operator|.
name|getLeaseTime
argument_list|()
decl_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|leaseTime
operator|*
literal|2
argument_list|)
expr_stmt|;
comment|// this write will conflict because ds2 did not run
comment|// background ops after setting p=v2
name|b1
operator|=
name|ds1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
operator|.
name|child
argument_list|(
literal|"y"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"v11"
argument_list|)
expr_stmt|;
try|try
block|{
name|merge
argument_list|(
name|ds1
argument_list|,
name|b1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"CommitFailedException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|ds1
operator|.
name|getLastRevRecoveryAgent
argument_list|()
operator|.
name|recover
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ds1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// now the write must succeed
name|b1
operator|=
name|ds1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
operator|.
name|child
argument_list|(
literal|"y"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"v11"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ds1
argument_list|,
name|b1
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|NodeDocument
name|getDocument
parameter_list|(
name|DocumentNodeStore
name|nodeStore
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
name|nodeStore
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|getIdFromPath
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|merge
parameter_list|(
name|DocumentNodeStore
name|store
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

