begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|flatfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|AbstractIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|NodeStateEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|flatfile
operator|.
name|FlatFileBufferLinkedList
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
operator|.
name|concat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
operator|.
name|singletonIterator
import|;
end_import

begin_class
class|class
name|FlatFileStoreIterator
extends|extends
name|AbstractIterator
argument_list|<
name|NodeStateEntry
argument_list|>
implements|implements
name|Iterator
argument_list|<
name|NodeStateEntry
argument_list|>
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Iterator
argument_list|<
name|NodeStateEntry
argument_list|>
name|baseItr
decl_stmt|;
specifier|private
specifier|final
name|FlatFileBufferLinkedList
name|buffer
decl_stmt|;
specifier|private
name|NodeStateEntry
name|current
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|preferredPathElements
decl_stmt|;
specifier|private
name|int
name|maxBufferSize
decl_stmt|;
specifier|static
specifier|final
name|String
name|BUFFER_MEM_LIMIT_CONFIG_NAME
init|=
literal|"oak.indexer.memLimitInMB"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BUFFER_MEM_LIMIT_IN_MB
init|=
literal|100
decl_stmt|;
specifier|public
name|FlatFileStoreIterator
parameter_list|(
name|Iterator
argument_list|<
name|NodeStateEntry
argument_list|>
name|baseItr
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|preferredPathElements
parameter_list|)
block|{
name|this
operator|.
name|baseItr
operator|=
name|baseItr
expr_stmt|;
name|this
operator|.
name|preferredPathElements
operator|=
name|preferredPathElements
expr_stmt|;
name|int
name|memLimitConfig
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
name|BUFFER_MEM_LIMIT_CONFIG_NAME
argument_list|,
name|DEFAULT_BUFFER_MEM_LIMIT_IN_MB
argument_list|)
decl_stmt|;
if|if
condition|(
name|memLimitConfig
operator|<
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Setting buffer memory limit unbounded"
argument_list|,
name|memLimitConfig
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|new
name|FlatFileBufferLinkedList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Setting buffer memory limit to {} MBs"
argument_list|,
name|memLimitConfig
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|new
name|FlatFileBufferLinkedList
argument_list|(
name|memLimitConfig
operator|*
literal|1024L
operator|*
literal|1024L
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|getBufferSize
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|size
argument_list|()
return|;
block|}
name|long
name|getBufferMemoryUsage
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|estimatedMemoryUsage
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|NodeStateEntry
name|computeNext
parameter_list|()
block|{
comment|//TODO Add some checks on expected ordering
name|current
operator|=
name|computeNextEntry
argument_list|()
expr_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Max buffer size in complete traversal is [{}]"
argument_list|,
name|maxBufferSize
argument_list|)
expr_stmt|;
return|return
name|endOfData
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|current
return|;
block|}
block|}
specifier|private
name|NodeStateEntry
name|computeNextEntry
parameter_list|()
block|{
if|if
condition|(
name|buffer
operator|.
name|size
argument_list|()
operator|>
name|maxBufferSize
condition|)
block|{
name|maxBufferSize
operator|=
name|buffer
operator|.
name|size
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Max buffer size changed {} (estimated memory usage: {} bytes) for path {}"
argument_list|,
name|maxBufferSize
argument_list|,
name|buffer
operator|.
name|estimatedMemoryUsage
argument_list|()
argument_list|,
name|current
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|buffer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|buffer
operator|.
name|remove
argument_list|()
return|;
block|}
if|if
condition|(
name|baseItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|wrap
argument_list|(
name|baseItr
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|NodeStateEntry
name|wrap
parameter_list|(
name|NodeStateEntry
name|baseEntry
parameter_list|)
block|{
name|NodeState
name|state
init|=
operator|new
name|LazyChildrenNodeState
argument_list|(
name|baseEntry
operator|.
name|getNodeState
argument_list|()
argument_list|,
operator|new
name|ChildNodeStateProvider
argument_list|(
name|getEntries
argument_list|()
argument_list|,
name|baseEntry
operator|.
name|getPath
argument_list|()
argument_list|,
name|preferredPathElements
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|NodeStateEntry
argument_list|(
name|state
argument_list|,
name|baseEntry
operator|.
name|getPath
argument_list|()
argument_list|,
name|baseEntry
operator|.
name|estimatedMemUsage
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Iterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|getEntries
parameter_list|()
block|{
return|return
parameter_list|()
lambda|->
name|concat
argument_list|(
name|singletonIterator
argument_list|(
name|current
argument_list|)
argument_list|,
name|queueIterator
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Iterator
argument_list|<
name|NodeStateEntry
argument_list|>
name|queueIterator
parameter_list|()
block|{
name|NodeIterator
name|qitr
init|=
name|buffer
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|AbstractIterator
argument_list|<
name|NodeStateEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|NodeStateEntry
name|computeNext
parameter_list|()
block|{
comment|//If queue is empty try to append by getting entry from base
if|if
condition|(
operator|!
name|qitr
operator|.
name|hasNext
argument_list|()
operator|&&
name|baseItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|add
argument_list|(
name|wrap
argument_list|(
name|baseItr
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|qitr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|qitr
operator|.
name|next
argument_list|()
return|;
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

