begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|AuthInfoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|EmptyPermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|OpenPermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|AbstractAccessControlManagerTest
extends|extends
name|AbstractAccessControlTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|WSP_NAME
init|=
literal|"wspName"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEST_PREFIX
init|=
literal|"jr"
decl_stmt|;
specifier|private
specifier|final
name|String
name|testName
init|=
name|TEST_PREFIX
operator|+
literal|":testRoot"
decl_stmt|;
specifier|private
specifier|final
name|String
name|testPath
init|=
literal|'/'
operator|+
name|testName
decl_stmt|;
specifier|private
specifier|final
name|String
name|nonExistingPath
init|=
literal|"/not/existing"
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|Principal
argument_list|>
name|testPrincipals
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|testPrincipal
argument_list|)
decl_stmt|;
specifier|private
name|Privilege
index|[]
name|testPrivileges
decl_stmt|;
specifier|private
name|Privilege
index|[]
name|allPrivileges
decl_stmt|;
specifier|private
name|AbstractAccessControlManager
name|acMgr
decl_stmt|;
specifier|private
name|PrivilegeManager
name|privilegeManager
decl_stmt|;
specifier|private
name|AuthorizationConfiguration
name|authorizationConfiguration
decl_stmt|;
specifier|private
name|SecurityProvider
name|securityProvider
decl_stmt|;
specifier|private
name|ContentSession
name|cs
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|testPrivileges
operator|=
operator|new
name|Privilege
index|[]
block|{
name|mockPrivilege
argument_list|(
literal|"priv1"
argument_list|)
block|,
name|mockPrivilege
argument_list|(
literal|"priv2"
argument_list|)
block|}
expr_stmt|;
name|allPrivileges
operator|=
operator|new
name|Privilege
index|[]
block|{
name|mockPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
block|}
expr_stmt|;
name|cs
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ContentSession
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cs
operator|.
name|getWorkspaceName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|WSP_NAME
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cs
operator|.
name|getAuthInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|AuthInfoImpl
argument_list|(
literal|null
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|testPrincipals
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|root
operator|.
name|getContentSession
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|Tree
name|nonExistingTree
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nonExistingTree
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|nonExistingPath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nonExistingTree
argument_list|)
expr_stmt|;
name|Tree
name|existingTree
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|existingTree
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|existingTree
argument_list|)
expr_stmt|;
name|Tree
name|rootTree
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rootTree
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rootTree
argument_list|)
expr_stmt|;
name|privilegeManager
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PrivilegeManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|privilegeManager
operator|.
name|getRegisteredPrivileges
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|testPrivileges
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
literal|"priv1"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|testPrivileges
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
literal|"priv2"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|testPrivileges
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|allPrivileges
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|PrivilegeConfiguration
name|privilegeConfiguration
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PrivilegeConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|privilegeConfiguration
operator|.
name|getPrivilegeManager
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|privilegeManager
argument_list|)
expr_stmt|;
name|authorizationConfiguration
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|authorizationConfiguration
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|WSP_NAME
argument_list|,
name|getEveryonePrincipalSet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|EmptyPermissionProvider
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|authorizationConfiguration
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|WSP_NAME
argument_list|,
name|testPrincipals
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|OpenPermissionProvider
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|authorizationConfiguration
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|WSP_NAME
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|EmptyPermissionProvider
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|authorizationConfiguration
operator|.
name|getContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Context
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|securityProvider
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|PrivilegeConfiguration
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|privilegeConfiguration
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|authorizationConfiguration
argument_list|)
expr_stmt|;
name|acMgr
operator|=
name|createAccessControlManager
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|AbstractAccessControlManager
name|createAccessControlManager
parameter_list|(
annotation|@
name|NotNull
name|Root
name|root
parameter_list|,
annotation|@
name|NotNull
name|NamePathMapper
name|namePathMapper
parameter_list|)
block|{
return|return
operator|new
name|TestAcMgr
argument_list|(
name|root
argument_list|,
name|namePathMapper
argument_list|,
name|securityProvider
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getInvalidPaths
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|invalid
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"../../jcr:testRoot"
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"jcr:testRoot"
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"jcr:test/Root"
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"./jcr:testRoot"
argument_list|)
expr_stmt|;
return|return
name|invalid
return|;
block|}
specifier|private
specifier|static
name|Privilege
name|mockPrivilege
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|)
block|{
name|Privilege
name|p
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Privilege
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|Principal
argument_list|>
name|getEveryonePrincipalSet
parameter_list|()
block|{
return|return
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
return|;
block|}
comment|//--------------------------------------------------- protected methods>---
annotation|@
name|Test
specifier|public
name|void
name|testGetConfig
parameter_list|()
block|{
name|assertSame
argument_list|(
name|authorizationConfiguration
argument_list|,
name|acMgr
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRoot
parameter_list|()
block|{
name|assertSame
argument_list|(
name|root
argument_list|,
name|createAccessControlManager
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetLatestRoot
parameter_list|()
block|{
name|assertNotSame
argument_list|(
name|root
argument_list|,
name|createAccessControlManager
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
operator|.
name|getLatestRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNamePathMapper
parameter_list|()
block|{
name|assertSame
argument_list|(
name|getNamePathMapper
argument_list|()
argument_list|,
name|createAccessControlManager
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegeManager
parameter_list|()
block|{
name|assertSame
argument_list|(
name|privilegeManager
argument_list|,
name|acMgr
operator|.
name|getPrivilegeManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetOakPathNull
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|acMgr
operator|.
name|getOakPath
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetOakPathNotAbsolute
parameter_list|()
throws|throws
name|Exception
block|{
name|acMgr
operator|.
name|getOakPath
argument_list|(
literal|"a/rel/path"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetOakPathInvalid
parameter_list|()
throws|throws
name|Exception
block|{
name|NamePathMapper
name|np
init|=
operator|new
name|NamePathMapper
operator|.
name|Default
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getOakPath
parameter_list|(
name|String
name|jcrPath
parameter_list|)
block|{
comment|// mock failing conversion from jcr to oak path
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|createAccessControlManager
argument_list|(
name|root
argument_list|,
name|np
argument_list|)
operator|.
name|getOakPath
argument_list|(
literal|"/any/abs/path"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTreeTestPath
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|acMgr
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|acMgr
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PathNotFoundException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetTreeNonExstingPath
parameter_list|()
throws|throws
name|Exception
block|{
name|acMgr
operator|.
name|getTree
argument_list|(
name|nonExistingPath
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTreeNullPath
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|acMgr
operator|.
name|getTree
argument_list|(
literal|null
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTreeNullPathCheckPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|acMgr
operator|.
name|getTree
argument_list|(
literal|null
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetTreeDefinesAcContent
parameter_list|()
throws|throws
name|Exception
block|{
name|Context
name|ctx
init|=
operator|new
name|Context
operator|.
name|Default
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|definesTree
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|when
argument_list|(
name|authorizationConfiguration
operator|.
name|getContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetTreeDefinesNoAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|cs
operator|.
name|getAuthInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|AuthInfoImpl
argument_list|(
literal|null
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|getEveryonePrincipalSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|AbstractAccessControlManager
name|mgr
init|=
name|createAccessControlManager
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
decl_stmt|;
name|mgr
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------< getSupportedPrivileges>---
annotation|@
name|Test
specifier|public
name|void
name|testGetSupportedPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Privilege
argument_list|>
name|allPrivileges
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|privilegeManager
operator|.
name|getRegisteredPrivileges
argument_list|()
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|supported
init|=
name|acMgr
operator|.
name|getSupportedPrivileges
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|supported
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allPrivileges
operator|.
name|size
argument_list|()
argument_list|,
name|supported
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allPrivileges
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|supported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSupportedPrivilegesInvalidPath
parameter_list|()
block|{
for|for
control|(
name|String
name|path
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|getSupportedPrivileges
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expects valid node path, found: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSupportedPrivilegesNonExistingPath
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|acMgr
operator|.
name|getSupportedPrivileges
argument_list|(
name|nonExistingPath
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Nonexisting node -> PathNotFoundException expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
comment|//--------------------------------------------------< privilegeFromName>---
annotation|@
name|Test
specifier|public
name|void
name|testPrivilegeFromName
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Privilege
argument_list|>
name|allPrivileges
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|privilegeManager
operator|.
name|getRegisteredPrivileges
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Privilege
name|privilege
range|:
name|allPrivileges
control|)
block|{
name|Privilege
name|p
init|=
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|privilege
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|privilege
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
comment|//------------------------------------------------------< hasPrivileges>---
annotation|@
name|Test
specifier|public
name|void
name|testHasNullPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|testPath
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasEmptyPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|testPath
argument_list|,
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PathNotFoundException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testHasPrivilegesNonExistingNodePath
parameter_list|()
throws|throws
name|Exception
block|{
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|nonExistingPath
argument_list|,
name|testPrivileges
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PathNotFoundException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testHasPrivilegesNonExistingNodePathEveryoneSet
parameter_list|()
throws|throws
name|Exception
block|{
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|nonExistingPath
argument_list|,
name|getEveryonePrincipalSet
argument_list|()
argument_list|,
name|testPrivileges
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PathNotFoundException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testHasPrivilegesNonExistingNodePathEmptyPrincipalSet
parameter_list|()
throws|throws
name|Exception
block|{
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|nonExistingPath
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|()
argument_list|,
name|testPrivileges
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesInvalidPaths
parameter_list|()
block|{
for|for
control|(
name|String
name|path
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|testPrivileges
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|testPath
argument_list|,
name|allPrivileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesSessionSet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|testPath
argument_list|,
name|testPrincipals
argument_list|,
name|allPrivileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesInvalidPathsEveryoneSet
parameter_list|()
block|{
for|for
control|(
name|String
name|path
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|,
name|testPrivileges
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasRepoPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|testPrivileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasRepoPrivilegesEveryoneSet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|getEveryonePrincipalSet
argument_list|()
argument_list|,
name|testPrivileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasRepoPrivilegesEmptyPrincipalSet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|()
argument_list|,
name|testPrivileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------< getPrivileges>---
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PathNotFoundException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetPrivilegesNonExistingNodePath
parameter_list|()
throws|throws
name|Exception
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|nonExistingPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PathNotFoundException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetPrivilegesNonExistingNodePathEmptyPrincipalSet
parameter_list|()
throws|throws
name|Exception
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|nonExistingPath
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesInvalidPaths
parameter_list|()
block|{
for|for
control|(
name|String
name|path
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges  for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|testPrincipal
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges  for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges  for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|assertArrayEquals
argument_list|(
name|allPrivileges
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesEveronePrincipalSet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertArrayEquals
argument_list|(
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|testPath
argument_list|,
name|getEveryonePrincipalSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesEmptyPrincipalSet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertArrayEquals
argument_list|(
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|testPath
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRepoPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|assertArrayEquals
argument_list|(
name|allPrivileges
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRepoPrivilegesEveryonePrincipalSet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertArrayEquals
argument_list|(
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|,
name|getEveryonePrincipalSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRepoPrivilegesEmptyPrincipalSet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertArrayEquals
argument_list|(
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
class|class
name|TestAcMgr
extends|extends
name|AbstractAccessControlManager
block|{
specifier|protected
name|TestAcMgr
parameter_list|(
annotation|@
name|NotNull
name|Root
name|root
parameter_list|,
annotation|@
name|NotNull
name|NamePathMapper
name|namePathMapper
parameter_list|,
annotation|@
name|NotNull
name|SecurityProvider
name|securityProvider
parameter_list|)
block|{
name|super
argument_list|(
name|root
argument_list|,
name|namePathMapper
argument_list|,
name|securityProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|JackrabbitAccessControlPolicy
index|[]
name|getApplicablePolicies
parameter_list|(
name|Principal
name|principal
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|JackrabbitAccessControlPolicy
index|[]
name|getPolicies
parameter_list|(
name|Principal
name|principal
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|AccessControlPolicy
index|[]
name|getEffectivePolicies
parameter_list|(
name|Set
argument_list|<
name|Principal
argument_list|>
name|set
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|AccessControlPolicy
index|[]
name|getPolicies
parameter_list|(
name|String
name|absPath
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|AccessControlPolicy
index|[]
name|getEffectivePolicies
parameter_list|(
name|String
name|absPath
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|AccessControlPolicyIterator
name|getApplicablePolicies
parameter_list|(
name|String
name|absPath
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPolicy
parameter_list|(
name|String
name|absPath
parameter_list|,
name|AccessControlPolicy
name|policy
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removePolicy
parameter_list|(
name|String
name|absPath
parameter_list|,
name|AccessControlPolicy
name|policy
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

