begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|BurnOnCloseFileIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|union
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|append
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|copy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|lexComparator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|lineBreakAwareComparator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|merge
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|readStringsAsSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|sort
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|writeStrings
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|closeQuietly
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|sort
operator|.
name|EscapeUtils
operator|.
name|escapeLineBreak
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|sort
operator|.
name|EscapeUtils
operator|.
name|unescapeLineBreaks
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_comment
comment|/**  * Tests for {@link FileIOUtils}  */
end_comment

begin_class
specifier|public
class|class
name|FileIOUtilsTest
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"./target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|writeReadStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|added
init|=
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"z"
argument_list|,
literal|"e"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|File
name|f
init|=
name|assertWrite
argument_list|(
name|added
operator|.
name|iterator
argument_list|()
argument_list|,
literal|false
argument_list|,
name|added
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|retrieved
init|=
name|readStringsAsSet
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|added
argument_list|,
name|retrieved
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|writeCustomReadOrgStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|added
init|=
name|newHashSet
argument_list|(
literal|"a-"
argument_list|,
literal|"z-"
argument_list|,
literal|"e-"
argument_list|,
literal|"b-"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|actual
init|=
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"z"
argument_list|,
literal|"e"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|File
name|f
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|writeStrings
argument_list|(
name|added
operator|.
name|iterator
argument_list|()
argument_list|,
name|f
argument_list|,
literal|false
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|String
name|input
parameter_list|)
block|{
return|return
name|Splitter
operator|.
name|on
argument_list|(
literal|"-"
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|splitToList
argument_list|(
name|input
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|added
operator|.
name|size
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|retrieved
init|=
name|readStringsAsSet
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|actual
argument_list|,
name|retrieved
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|writeReadStringsWithLineBreaks
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|added
init|=
name|newHashSet
argument_list|(
name|getLineBreakStrings
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|f
init|=
name|assertWrite
argument_list|(
name|added
operator|.
name|iterator
argument_list|()
argument_list|,
literal|true
argument_list|,
name|added
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|retrieved
init|=
name|readStringsAsSet
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|added
argument_list|,
name|retrieved
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|writeReadRandomStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|added
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|added
operator|.
name|add
argument_list|(
name|getRandomTestString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|File
name|f
init|=
name|assertWrite
argument_list|(
name|added
operator|.
name|iterator
argument_list|()
argument_list|,
literal|true
argument_list|,
name|added
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|retrieved
init|=
name|readStringsAsSet
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|added
argument_list|,
name|retrieved
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compareWithLineBreaks
parameter_list|()
throws|throws
name|Exception
block|{
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
init|=
name|lineBreakAwareComparator
argument_list|(
name|lexComparator
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|strs
init|=
name|getLineBreakStrings
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|strs
argument_list|)
expr_stmt|;
comment|// Escape line breaks and then compare with string sorted
name|List
argument_list|<
name|String
argument_list|>
name|escapedStrs
init|=
name|escape
argument_list|(
name|getLineBreakStrings
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|escapedStrs
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|strs
argument_list|,
name|unescape
argument_list|(
name|escapedStrs
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortTest
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"z"
argument_list|,
literal|"e"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|File
name|f
init|=
name|assertWrite
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
literal|false
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|sort
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|retrieved
init|=
name|newArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|retrieved
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|closeQuietly
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|list
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
name|list
operator|.
name|toArray
argument_list|()
argument_list|,
name|retrieved
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortCustomComparatorTest
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|getLineBreakStrings
argument_list|()
decl_stmt|;
name|File
name|f
init|=
name|assertWrite
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
literal|true
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|sort
argument_list|(
name|f
argument_list|,
name|lineBreakAwareComparator
argument_list|(
name|lexComparator
argument_list|)
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|retrieved
init|=
name|newArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|retrieved
operator|.
name|add
argument_list|(
name|unescapeLineBreaks
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|closeQuietly
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|list
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
name|list
operator|.
name|toArray
argument_list|()
argument_list|,
name|retrieved
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortLargeFileWithCustomComparatorTest
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numEntries
init|=
literal|100000
decl_stmt|;
comment|// must be large enough to trigger split/merge functionality of the sort
name|long
index|[]
name|entries
init|=
operator|new
name|long
index|[
name|numEntries
index|]
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEntries
condition|;
name|i
operator|++
control|)
block|{
name|entries
index|[
name|i
index|]
operator|=
name|r
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Long
argument_list|>
name|boxedEntries
init|=
name|Longs
operator|.
name|asList
argument_list|(
name|entries
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|hexEntries
init|=
name|Iterators
operator|.
name|transform
argument_list|(
name|boxedEntries
argument_list|,
operator|new
name|Function
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|Long
name|input
parameter_list|)
block|{
return|return
name|Long
operator|.
name|toHexString
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|File
name|f
init|=
name|assertWrite
argument_list|(
name|hexEntries
argument_list|,
literal|false
argument_list|,
name|numEntries
argument_list|)
decl_stmt|;
name|Comparator
argument_list|<
name|String
argument_list|>
name|prefixComparator
init|=
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
return|return
name|s1
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|sort
argument_list|(
name|f
argument_list|,
name|prefixComparator
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|previous
init|=
name|reader
operator|.
name|readLine
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|current
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|current
operator|=
name|current
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Distinct sort didn't filter out duplicates properly."
argument_list|,
name|previous
operator|.
name|equals
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Sort didn't create increasing order"
argument_list|,
name|previous
operator|.
name|compareTo
argument_list|(
name|current
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|previous
operator|=
name|current
expr_stmt|;
block|}
name|closeQuietly
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCopy
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|f
init|=
name|copy
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|256
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"File does not exist"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"File length not equal to byte array from which copied"
argument_list|,
literal|256
argument_list|,
name|f
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Could not delete file"
argument_list|,
name|f
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|appendTest
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|added1
init|=
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"z"
argument_list|,
literal|"e"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|File
name|f1
init|=
name|assertWrite
argument_list|(
name|added1
operator|.
name|iterator
argument_list|()
argument_list|,
literal|false
argument_list|,
name|added1
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|added2
init|=
name|newHashSet
argument_list|(
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"5"
argument_list|,
literal|"6"
argument_list|)
decl_stmt|;
name|File
name|f2
init|=
name|assertWrite
argument_list|(
name|added2
operator|.
name|iterator
argument_list|()
argument_list|,
literal|false
argument_list|,
name|added2
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|added3
init|=
name|newHashSet
argument_list|(
literal|"t"
argument_list|,
literal|"y"
argument_list|,
literal|"8"
argument_list|,
literal|"9"
argument_list|)
decl_stmt|;
name|File
name|f3
init|=
name|assertWrite
argument_list|(
name|added3
operator|.
name|iterator
argument_list|()
argument_list|,
literal|false
argument_list|,
name|added3
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|append
argument_list|(
name|newArrayList
argument_list|(
name|f2
argument_list|,
name|f3
argument_list|)
argument_list|,
name|f1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|union
argument_list|(
name|union
argument_list|(
name|added1
argument_list|,
name|added2
argument_list|)
argument_list|,
name|added3
argument_list|)
argument_list|,
name|readStringsAsSet
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f1
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|f2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|f3
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|appendTestNoDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|added1
init|=
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"z"
argument_list|,
literal|"e"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|File
name|f1
init|=
name|assertWrite
argument_list|(
name|added1
operator|.
name|iterator
argument_list|()
argument_list|,
literal|false
argument_list|,
name|added1
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|added2
init|=
name|newHashSet
argument_list|(
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"5"
argument_list|,
literal|"6"
argument_list|)
decl_stmt|;
name|File
name|f2
init|=
name|assertWrite
argument_list|(
name|added2
operator|.
name|iterator
argument_list|()
argument_list|,
literal|false
argument_list|,
name|added2
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|added3
init|=
name|newHashSet
argument_list|(
literal|"t"
argument_list|,
literal|"y"
argument_list|,
literal|"8"
argument_list|,
literal|"9"
argument_list|)
decl_stmt|;
name|File
name|f3
init|=
name|assertWrite
argument_list|(
name|added3
operator|.
name|iterator
argument_list|()
argument_list|,
literal|false
argument_list|,
name|added3
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|append
argument_list|(
name|newArrayList
argument_list|(
name|f2
argument_list|,
name|f3
argument_list|)
argument_list|,
name|f1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|union
argument_list|(
name|union
argument_list|(
name|added1
argument_list|,
name|added2
argument_list|)
argument_list|,
name|added3
argument_list|)
argument_list|,
name|readStringsAsSet
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f1
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f3
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|appendTestFileDeleteOnError
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|added2
init|=
name|newHashSet
argument_list|(
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"5"
argument_list|,
literal|"6"
argument_list|)
decl_stmt|;
name|File
name|f2
init|=
name|assertWrite
argument_list|(
name|added2
operator|.
name|iterator
argument_list|()
argument_list|,
literal|false
argument_list|,
name|added2
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|added3
init|=
name|newHashSet
argument_list|(
literal|"t"
argument_list|,
literal|"y"
argument_list|,
literal|"8"
argument_list|,
literal|"9"
argument_list|)
decl_stmt|;
name|File
name|f3
init|=
name|assertWrite
argument_list|(
name|added3
operator|.
name|iterator
argument_list|()
argument_list|,
literal|false
argument_list|,
name|added3
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|append
argument_list|(
name|newArrayList
argument_list|(
name|f2
argument_list|,
name|f3
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
name|assertTrue
argument_list|(
operator|!
name|f2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|f3
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|appendRandomizedTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|added1
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|added1
operator|.
name|add
argument_list|(
name|getRandomTestString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|File
name|f1
init|=
name|assertWrite
argument_list|(
name|added1
operator|.
name|iterator
argument_list|()
argument_list|,
literal|true
argument_list|,
name|added1
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|added2
init|=
name|newHashSet
argument_list|(
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"5"
argument_list|,
literal|"6"
argument_list|)
decl_stmt|;
name|File
name|f2
init|=
name|assertWrite
argument_list|(
name|added2
operator|.
name|iterator
argument_list|()
argument_list|,
literal|true
argument_list|,
name|added2
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|append
argument_list|(
name|newArrayList
argument_list|(
name|f2
argument_list|)
argument_list|,
name|f1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|union
argument_list|(
name|added1
argument_list|,
name|added2
argument_list|)
argument_list|,
name|readStringsAsSet
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f1
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|appendWithLineBreaksTest
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|added1
init|=
name|newHashSet
argument_list|(
name|getLineBreakStrings
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|f1
init|=
name|assertWrite
argument_list|(
name|added1
operator|.
name|iterator
argument_list|()
argument_list|,
literal|true
argument_list|,
name|added1
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|added2
init|=
name|newHashSet
argument_list|(
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"5"
argument_list|,
literal|"6"
argument_list|)
decl_stmt|;
name|File
name|f2
init|=
name|assertWrite
argument_list|(
name|added2
operator|.
name|iterator
argument_list|()
argument_list|,
literal|true
argument_list|,
name|added2
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|append
argument_list|(
name|newArrayList
argument_list|(
name|f1
argument_list|)
argument_list|,
name|f2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|union
argument_list|(
name|added1
argument_list|,
name|added2
argument_list|)
argument_list|,
name|readStringsAsSet
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f2
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mergeWithErrorsTest
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|added2
init|=
name|newHashSet
argument_list|(
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"5"
argument_list|,
literal|"6"
argument_list|)
decl_stmt|;
name|File
name|f2
init|=
name|assertWrite
argument_list|(
name|added2
operator|.
name|iterator
argument_list|()
argument_list|,
literal|false
argument_list|,
name|added2
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|added3
init|=
name|newHashSet
argument_list|(
literal|"t"
argument_list|,
literal|"y"
argument_list|,
literal|"8"
argument_list|,
literal|"9"
argument_list|)
decl_stmt|;
name|File
name|f3
init|=
name|assertWrite
argument_list|(
name|added3
operator|.
name|iterator
argument_list|()
argument_list|,
literal|false
argument_list|,
name|added3
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|merge
argument_list|(
name|newArrayList
argument_list|(
name|f2
argument_list|,
name|f3
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
name|assertTrue
argument_list|(
operator|!
name|f2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|f3
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fileIteratorTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|added
init|=
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"z"
argument_list|,
literal|"e"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|File
name|f
init|=
name|assertWrite
argument_list|(
name|added
operator|.
name|iterator
argument_list|()
argument_list|,
literal|false
argument_list|,
name|added
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|io
operator|.
name|BurnOnCloseFileIterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|io
operator|.
name|BurnOnCloseFileIterator
operator|.
name|wrap
argument_list|(
name|FileUtils
operator|.
name|lineIterator
argument_list|(
name|f
argument_list|,
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|added
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|iterator
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deprecatedfileIteratorTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|added
init|=
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"z"
argument_list|,
literal|"e"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|File
name|f
init|=
name|assertWrite
argument_list|(
name|added
operator|.
name|iterator
argument_list|()
argument_list|,
literal|false
argument_list|,
name|added
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|BurnOnCloseFileIterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|BurnOnCloseFileIterator
operator|.
name|wrap
argument_list|(
name|FileUtils
operator|.
name|lineIterator
argument_list|(
name|f
argument_list|,
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|added
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|iterator
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fileIteratorBurnTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|added
init|=
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"z"
argument_list|,
literal|"e"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|File
name|f
init|=
name|assertWrite
argument_list|(
name|added
operator|.
name|iterator
argument_list|()
argument_list|,
literal|false
argument_list|,
name|added
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|io
operator|.
name|BurnOnCloseFileIterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|io
operator|.
name|BurnOnCloseFileIterator
operator|.
name|wrap
argument_list|(
name|FileUtils
operator|.
name|lineIterator
argument_list|(
name|f
argument_list|,
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|added
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|iterator
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deprecatedFileIteratorBurnTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|added
init|=
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"z"
argument_list|,
literal|"e"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|File
name|f
init|=
name|assertWrite
argument_list|(
name|added
operator|.
name|iterator
argument_list|()
argument_list|,
literal|false
argument_list|,
name|added
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|BurnOnCloseFileIterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|BurnOnCloseFileIterator
operator|.
name|wrap
argument_list|(
name|FileUtils
operator|.
name|lineIterator
argument_list|(
name|f
argument_list|,
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|added
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|iterator
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fileIteratorLineBreakTest
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|added
init|=
name|newHashSet
argument_list|(
name|getLineBreakStrings
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|f
init|=
name|assertWrite
argument_list|(
name|added
operator|.
name|iterator
argument_list|()
argument_list|,
literal|true
argument_list|,
name|added
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|io
operator|.
name|BurnOnCloseFileIterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|io
operator|.
name|BurnOnCloseFileIterator
argument_list|<
name|String
argument_list|>
argument_list|(
name|FileUtils
operator|.
name|lineIterator
argument_list|(
name|f
argument_list|,
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|f
argument_list|,
parameter_list|(
name|input
parameter_list|)
lambda|->
name|unescapeLineBreaks
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|added
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|iterator
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deprecatedFileIteratorLineBreakTest
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|added
init|=
name|newHashSet
argument_list|(
name|getLineBreakStrings
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|f
init|=
name|assertWrite
argument_list|(
name|added
operator|.
name|iterator
argument_list|()
argument_list|,
literal|true
argument_list|,
name|added
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|BurnOnCloseFileIterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
operator|new
name|BurnOnCloseFileIterator
argument_list|<
name|String
argument_list|>
argument_list|(
name|FileUtils
operator|.
name|lineIterator
argument_list|(
name|f
argument_list|,
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|f
argument_list|,
parameter_list|(
name|input
parameter_list|)
lambda|->
name|unescapeLineBreaks
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|added
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|iterator
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fileIteratorRandomizedTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|added
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|added
operator|.
name|add
argument_list|(
name|getRandomTestString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|File
name|f
init|=
name|assertWrite
argument_list|(
name|added
operator|.
name|iterator
argument_list|()
argument_list|,
literal|true
argument_list|,
name|added
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|io
operator|.
name|BurnOnCloseFileIterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|io
operator|.
name|BurnOnCloseFileIterator
argument_list|<
name|String
argument_list|>
argument_list|(
name|FileUtils
operator|.
name|lineIterator
argument_list|(
name|f
argument_list|,
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|f
argument_list|,
parameter_list|(
name|input
parameter_list|)
lambda|->
name|unescapeLineBreaks
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|added
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|iterator
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deprecatedFileIteratorRandomizedTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|added
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|added
operator|.
name|add
argument_list|(
name|getRandomTestString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|File
name|f
init|=
name|assertWrite
argument_list|(
name|added
operator|.
name|iterator
argument_list|()
argument_list|,
literal|true
argument_list|,
name|added
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|BurnOnCloseFileIterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
operator|new
name|BurnOnCloseFileIterator
argument_list|<
name|String
argument_list|>
argument_list|(
name|FileUtils
operator|.
name|lineIterator
argument_list|(
name|f
argument_list|,
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|f
argument_list|,
parameter_list|(
name|input
parameter_list|)
lambda|->
name|unescapeLineBreaks
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|added
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|iterator
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|copyStreamToFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|added
init|=
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"z"
argument_list|,
literal|"e"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|File
name|f
init|=
name|assertWrite
argument_list|(
name|added
operator|.
name|iterator
argument_list|()
argument_list|,
literal|false
argument_list|,
name|added
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|f2
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|FileIOUtils
operator|.
name|copyInputStreamToFile
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|,
name|f2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|added
argument_list|,
name|readStringsAsSet
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|copyStreamToFileNoPartialCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|f
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|FileIOUtils
operator|.
name|copyInputStreamToFile
argument_list|(
name|randomStream
argument_list|(
literal|12
argument_list|,
literal|8192
argument_list|)
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|File
name|f2
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
try|try
block|{
name|FileIOUtils
operator|.
name|copyInputStreamToFile
argument_list|(
operator|new
name|ErrorInputStream
argument_list|(
name|f
argument_list|,
literal|4096
argument_list|)
argument_list|,
name|f2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should have failed with IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
name|assertTrue
argument_list|(
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|f2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getLineBreakStrings
parameter_list|()
block|{
return|return
name|newArrayList
argument_list|(
literal|"ab\nc\r"
argument_list|,
literal|"ab\\z"
argument_list|,
literal|"a\\\\z\nc"
argument_list|,
literal|"/a"
argument_list|,
literal|"/a/b\nc"
argument_list|,
literal|"/a/b\rd"
argument_list|,
literal|"/a/b\r\ne"
argument_list|,
literal|"/a/c"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|escape
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|escaped
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|list
control|)
block|{
name|escaped
operator|.
name|add
argument_list|(
name|escapeLineBreak
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|escaped
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|unescape
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|unescaped
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|list
control|)
block|{
name|unescaped
operator|.
name|add
argument_list|(
name|unescapeLineBreaks
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|unescaped
return|;
block|}
specifier|private
name|File
name|assertWrite
parameter_list|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|,
name|boolean
name|escape
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|writeStrings
argument_list|(
name|iterator
argument_list|,
name|f
argument_list|,
name|escape
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|size
argument_list|,
name|count
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
specifier|private
specifier|static
name|String
name|getRandomTestString
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|valid
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|valid
condition|)
block|{
name|int
name|length
init|=
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|40
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|Character
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|s
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|CharsetEncoder
name|encoder
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|newEncoder
argument_list|()
decl_stmt|;
try|try
block|{
name|encoder
operator|.
name|encode
argument_list|(
name|CharBuffer
operator|.
name|wrap
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|valid
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|e
parameter_list|)
block|{
name|buffer
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|InputStream
name|randomStream
parameter_list|(
name|int
name|seed
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|/**      * Throws error after reading partially defined by max      */
specifier|private
specifier|static
class|class
name|ErrorInputStream
extends|extends
name|FileInputStream
block|{
specifier|private
name|long
name|bytesread
decl_stmt|;
specifier|private
name|long
name|max
decl_stmt|;
name|ErrorInputStream
parameter_list|(
name|File
name|file
parameter_list|,
name|long
name|max
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|super
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|bytesread
operator|+=
name|b
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|bytesread
operator|>
name|max
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Disconnected"
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|read
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

