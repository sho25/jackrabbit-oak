begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|AggregatedPermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|EmptyPermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|RepositoryPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test the effect of the 'AND' combination of  *  * - default permission provider, which always grants full access to an administrative session.  * - custom provider that prevents all access but supports all permissions and  *   thus is always called during composite evaluation.  *  * The tests are executed with the set of principals associated with the admin session,  * which in the default permission provider is granted full access.  *  * The expected outcome is that despite the default provider granting full access,  * the combination effectively prevents any access.  *<p>  * Test the effect of the 'OR' combination of  *  * - default permission provider, which always grants full access to an administrative session.  * - custom provider that prevents all access but supports all permissions and  *   thus is always called during composite evaluation.  *  * The tests are executed with the set of principals associated with the admin session,  * which in the default permission provider is granted full access.  *  * The expected outcome is that the combination effectively allows any access.  */
end_comment

begin_class
specifier|public
class|class
name|CompositeProviderEmptyTest
extends|extends
name|AbstractCompositeProviderTest
block|{
specifier|private
name|CompositePermissionProvider
name|cpp
decl_stmt|;
specifier|private
name|CompositePermissionProvider
name|cppO
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|cpp
operator|=
name|createPermissionProvider
argument_list|(
name|root
operator|.
name|getContentSession
argument_list|()
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getPrincipals
argument_list|()
argument_list|)
expr_stmt|;
name|cppO
operator|=
name|createPermissionProviderOR
argument_list|(
name|root
operator|.
name|getContentSession
argument_list|()
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getPrincipals
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|AggregatedPermissionProvider
name|getTestPermissionProvider
parameter_list|()
block|{
return|return
operator|new
name|EmptyAggregatedProvider
argument_list|(
name|root
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|p
range|:
name|NODE_PATHS
control|)
block|{
name|assertTrue
argument_list|(
name|cpp
operator|.
name|getPrivileges
argument_list|(
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_ALL
argument_list|)
argument_list|,
name|cppO
operator|.
name|getPrivileges
argument_list|(
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesOnRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|cpp
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_ALL
argument_list|)
argument_list|,
name|cppO
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|p
range|:
name|NODE_PATHS
control|)
block|{
name|Tree
name|tree
init|=
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|cpp
operator|.
name|hasPrivileges
argument_list|(
name|tree
argument_list|,
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cpp
operator|.
name|hasPrivileges
argument_list|(
name|tree
argument_list|,
name|JCR_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cpp
operator|.
name|hasPrivileges
argument_list|(
name|tree
argument_list|,
name|REP_READ_NODES
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesOnRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|cpp
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|JCR_NAMESPACE_MANAGEMENT
argument_list|,
name|JCR_NODE_TYPE_DEFINITION_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cppO
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|JCR_NAMESPACE_MANAGEMENT
argument_list|,
name|JCR_NODE_TYPE_DEFINITION_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGranted
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|p
range|:
name|NODE_PATHS
control|)
block|{
name|Tree
name|tree
init|=
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|cpp
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cpp
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
operator||
name|Permissions
operator|.
name|MODIFY_CHILD_NODE_COLLECTION
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cpp
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
operator||
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cppO
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cppO
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
operator||
name|Permissions
operator|.
name|MODIFY_CHILD_NODE_COLLECTION
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cppO
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
operator||
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedProperty
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|p
range|:
name|NODE_PATHS
control|)
block|{
name|Tree
name|tree
init|=
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|cpp
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
name|PROPERTY_STATE
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cpp
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
name|PROPERTY_STATE
argument_list|,
name|Permissions
operator|.
name|MODIFY_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cpp
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
name|PROPERTY_STATE
argument_list|,
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cpp
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
name|PROPERTY_STATE
argument_list|,
name|Permissions
operator|.
name|REMOVE_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cpp
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
name|PROPERTY_STATE
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
operator||
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cppO
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
name|PROPERTY_STATE
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cppO
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
name|PROPERTY_STATE
argument_list|,
name|Permissions
operator|.
name|MODIFY_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cppO
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
name|PROPERTY_STATE
argument_list|,
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cppO
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
name|PROPERTY_STATE
argument_list|,
name|Permissions
operator|.
name|REMOVE_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cppO
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
name|PROPERTY_STATE
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
operator||
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedAction
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|nodePath
range|:
name|NODE_PATHS
control|)
block|{
name|String
name|propPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|nodePath
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
name|String
name|nonExisting
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|nodePath
argument_list|,
literal|"nonExisting"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|cpp
operator|.
name|isGranted
argument_list|(
name|nodePath
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cpp
operator|.
name|isGranted
argument_list|(
name|propPath
argument_list|,
name|JackrabbitSession
operator|.
name|ACTION_MODIFY_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cpp
operator|.
name|isGranted
argument_list|(
name|nodePath
argument_list|,
name|getActionString
argument_list|(
name|JackrabbitSession
operator|.
name|ACTION_MODIFY_ACCESS_CONTROL
argument_list|,
name|JackrabbitSession
operator|.
name|ACTION_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cpp
operator|.
name|isGranted
argument_list|(
name|nonExisting
argument_list|,
name|JackrabbitSession
operator|.
name|ACTION_ADD_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cpp
operator|.
name|isGranted
argument_list|(
name|nonExisting
argument_list|,
name|Session
operator|.
name|ACTION_ADD_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cppO
operator|.
name|isGranted
argument_list|(
name|nodePath
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cppO
operator|.
name|isGranted
argument_list|(
name|propPath
argument_list|,
name|JackrabbitSession
operator|.
name|ACTION_MODIFY_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cppO
operator|.
name|isGranted
argument_list|(
name|nodePath
argument_list|,
name|getActionString
argument_list|(
name|JackrabbitSession
operator|.
name|ACTION_MODIFY_ACCESS_CONTROL
argument_list|,
name|JackrabbitSession
operator|.
name|ACTION_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cppO
operator|.
name|isGranted
argument_list|(
name|nonExisting
argument_list|,
name|JackrabbitSession
operator|.
name|ACTION_ADD_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cppO
operator|.
name|isGranted
argument_list|(
name|nonExisting
argument_list|,
name|Session
operator|.
name|ACTION_ADD_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRepositoryPermissionsIsGranted
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryPermission
name|rp
init|=
name|cpp
operator|.
name|getRepositoryPermission
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|rp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|NAMESPACE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|NODE_TYPE_DEFINITION_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|RepositoryPermission
name|rpO
init|=
name|cppO
operator|.
name|getRepositoryPermission
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rpO
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|NAMESPACE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rpO
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|NODE_TYPE_DEFINITION_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTreePermissionIsGranted
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|parentPermission
init|=
name|TreePermission
operator|.
name|EMPTY
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|TP_PATHS
control|)
block|{
name|TreePermission
name|tp
init|=
name|cpp
operator|.
name|getTreePermission
argument_list|(
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
argument_list|,
name|parentPermission
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|REMOVE_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|parentPermission
operator|=
name|tp
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTreePermissionIsGrantedOR
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|parentPermission
init|=
name|TreePermission
operator|.
name|EMPTY
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|TP_PATHS
control|)
block|{
name|TreePermission
name|tp
init|=
name|cppO
operator|.
name|getTreePermission
argument_list|(
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
argument_list|,
name|parentPermission
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|REMOVE_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|parentPermission
operator|=
name|tp
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTreePermissionIsGrantedProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|parentPermission
init|=
name|TreePermission
operator|.
name|EMPTY
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|TP_PATHS
control|)
block|{
name|TreePermission
name|tp
init|=
name|cpp
operator|.
name|getTreePermission
argument_list|(
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
argument_list|,
name|parentPermission
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|,
name|PROPERTY_STATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|REMOVE_PROPERTY
argument_list|,
name|PROPERTY_STATE
argument_list|)
argument_list|)
expr_stmt|;
name|parentPermission
operator|=
name|tp
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTreePermissionIsGrantedPropertyOR
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|parentPermission
init|=
name|TreePermission
operator|.
name|EMPTY
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|TP_PATHS
control|)
block|{
name|TreePermission
name|tp
init|=
name|cppO
operator|.
name|getTreePermission
argument_list|(
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
argument_list|,
name|parentPermission
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|,
name|PROPERTY_STATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|REMOVE_PROPERTY
argument_list|,
name|PROPERTY_STATE
argument_list|)
argument_list|)
expr_stmt|;
name|parentPermission
operator|=
name|tp
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTreePermissionCanRead
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|parentPermission
init|=
name|TreePermission
operator|.
name|EMPTY
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|TP_PATHS
control|)
block|{
name|Tree
name|t
init|=
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|TreePermission
name|tp
init|=
name|cpp
operator|.
name|getTreePermission
argument_list|(
name|t
argument_list|,
name|parentPermission
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|canRead
argument_list|()
argument_list|)
expr_stmt|;
name|parentPermission
operator|=
name|tp
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTreePermissionCanReadOR
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|parentPermission
init|=
name|TreePermission
operator|.
name|EMPTY
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|TP_PATHS
control|)
block|{
name|Tree
name|t
init|=
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|TreePermission
name|tp
init|=
name|cppO
operator|.
name|getTreePermission
argument_list|(
name|t
argument_list|,
name|parentPermission
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|canRead
argument_list|()
argument_list|)
expr_stmt|;
name|parentPermission
operator|=
name|tp
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTreePermissionCanReadProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|parentPermission
init|=
name|TreePermission
operator|.
name|EMPTY
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|TP_PATHS
control|)
block|{
name|Tree
name|t
init|=
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|TreePermission
name|tp
init|=
name|cpp
operator|.
name|getTreePermission
argument_list|(
name|t
argument_list|,
name|parentPermission
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|canRead
argument_list|(
name|PROPERTY_STATE
argument_list|)
argument_list|)
expr_stmt|;
name|parentPermission
operator|=
name|tp
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTreePermissionCanReadPropertyOR
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|parentPermission
init|=
name|TreePermission
operator|.
name|EMPTY
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|TP_PATHS
control|)
block|{
name|Tree
name|t
init|=
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|TreePermission
name|tp
init|=
name|cppO
operator|.
name|getTreePermission
argument_list|(
name|t
argument_list|,
name|parentPermission
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|canRead
argument_list|(
name|PROPERTY_STATE
argument_list|)
argument_list|)
expr_stmt|;
name|parentPermission
operator|=
name|tp
expr_stmt|;
block|}
block|}
comment|/**      * {@code AggregatedPermissionProvider} that doesn't grant any access.      */
specifier|static
class|class
name|EmptyAggregatedProvider
extends|extends
name|AbstractAggrProvider
block|{
specifier|private
specifier|static
specifier|final
name|PermissionProvider
name|BASE
init|=
name|EmptyPermissionProvider
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|public
name|EmptyAggregatedProvider
parameter_list|(
annotation|@
name|Nonnull
name|Root
name|root
parameter_list|)
block|{
name|super
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------< PermissionProvider>---
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPrivileges
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|BASE
operator|.
name|getPrivileges
argument_list|(
name|tree
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPrivileges
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nonnull
name|String
modifier|...
name|privilegeNames
parameter_list|)
block|{
return|return
name|BASE
operator|.
name|hasPrivileges
argument_list|(
name|tree
argument_list|,
name|privilegeNames
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|RepositoryPermission
name|getRepositoryPermission
parameter_list|()
block|{
return|return
name|BASE
operator|.
name|getRepositoryPermission
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|TreePermission
name|getTreePermission
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nonnull
name|TreePermission
name|parentPermission
parameter_list|)
block|{
return|return
name|BASE
operator|.
name|getTreePermission
argument_list|(
name|tree
argument_list|,
name|parentPermission
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
return|return
name|BASE
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
name|property
argument_list|,
name|permissions
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
annotation|@
name|Nonnull
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|String
name|jcrActions
parameter_list|)
block|{
return|return
name|BASE
operator|.
name|isGranted
argument_list|(
name|oakPath
argument_list|,
name|jcrActions
argument_list|)
return|;
block|}
comment|//-----------------------------------< AggregatedPermissionProvider>---
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
annotation|@
name|Nonnull
name|TreeLocation
name|location
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

