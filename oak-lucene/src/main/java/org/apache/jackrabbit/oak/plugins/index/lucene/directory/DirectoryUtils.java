begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|IndexRootDirectory
operator|.
name|INDEX_METADATA_FILE_NAME
import|;
end_import

begin_class
specifier|public
class|class
name|DirectoryUtils
block|{
comment|/**      * Get the file length in best effort basis.      * @return actual fileLength. -1 if cannot determine      */
specifier|public
specifier|static
name|long
name|getFileLength
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
try|try
block|{
comment|//Check for file presence otherwise internally it results in
comment|//an exception to be created
if|if
condition|(
name|dir
operator|.
name|fileExists
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
return|return
name|dir
operator|.
name|fileLength
argument_list|(
name|fileName
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{          }
return|return
operator|-
literal|1
return|;
block|}
specifier|public
specifier|static
name|long
name|dirSize
parameter_list|(
name|Directory
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|totalFileSize
init|=
literal|0L
decl_stmt|;
if|if
condition|(
name|directory
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|String
index|[]
name|files
init|=
name|directory
operator|.
name|listAll
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
return|return
name|totalFileSize
return|;
block|}
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|totalFileSize
operator|+=
name|directory
operator|.
name|fileLength
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
return|return
name|totalFileSize
return|;
block|}
specifier|static
name|File
name|createIndexDir
parameter_list|(
name|File
name|baseDir
parameter_list|,
name|String
name|indexPath
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|subDirPath
init|=
name|IndexRootDirectory
operator|.
name|getIndexFolderBaseName
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
name|File
name|indexDir
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|subDirPath
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|indexDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|indexDir
operator|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|subDirPath
operator|+
literal|"_"
operator|+
name|count
operator|++
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|indexDir
argument_list|)
expr_stmt|;
return|return
name|indexDir
return|;
block|}
specifier|static
name|File
name|createSubDir
parameter_list|(
name|File
name|indexDir
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fsSafeName
init|=
name|name
operator|.
name|replace
argument_list|(
literal|":"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|indexDir
argument_list|,
name|fsSafeName
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|dir
argument_list|)
expr_stmt|;
return|return
name|dir
return|;
block|}
specifier|static
name|void
name|writeMeta
parameter_list|(
name|File
name|indexDir
parameter_list|,
name|String
name|indexPath
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|readMe
init|=
operator|new
name|File
argument_list|(
name|indexDir
argument_list|,
name|INDEX_METADATA_FILE_NAME
argument_list|)
decl_stmt|;
name|IndexMeta
name|meta
init|=
operator|new
name|IndexMeta
argument_list|(
name|indexPath
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|meta
operator|.
name|writeTo
argument_list|(
name|readMe
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

