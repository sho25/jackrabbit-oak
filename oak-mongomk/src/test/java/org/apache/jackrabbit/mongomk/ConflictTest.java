begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  *<code>ConflictTest</code> checks  *<a href="http://wiki.apache.org/jackrabbit/Conflict%20handling%20through%20rebasing%20branches">conflict handling</a>.  */
end_comment

begin_class
specifier|public
class|class
name|ConflictTest
extends|extends
name|BaseMongoMKTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|addExistingProperty
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"value\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"value\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for addExistingProperty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addExistingPropertyBranchWins
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"value\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"value\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for addExistingProperty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addExistingPropertyBranchLoses1
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
comment|// branch commit happens before trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"value\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"value\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for addExistingProperty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addExistingPropertyBranchLoses2
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"value\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// branch commit happens after trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"value\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for addExistingProperty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeRemovedProperty
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":null"
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":null"
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for removeRemovedProperty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeRemovedPropertyBranchWins
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":null"
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":null"
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for removeRemovedProperty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeRemovedPropertyBranchLoses1
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
comment|// branch commit happens before trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":null"
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":null"
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for removeRemovedProperty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeRemovedPropertyBranchLoses2
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":null"
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// branch commit happens after trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":null"
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for removeRemovedProperty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeChangedProperty
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"bar\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":null"
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for removeChangedProperty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeChangedPropertyBranchWins
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"bar\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":null"
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for removeChangedProperty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeChangedPropertyBranchLoses1
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
comment|// branch commit happens before trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"bar\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":null"
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for removeChangedProperty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeChangedPropertyBranchLoses2
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":null"
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// branch commit happens after trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"bar\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for removeChangedProperty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeRemovedProperty
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":null"
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"bar\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for changeRemovedProperty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeRemovedPropertyBranchWins
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":null"
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"bar\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for changeRemovedProperty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeRemovedPropertyBranchLoses1
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
comment|// branch commit happens before trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":null"
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"bar\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for changeRemovedProperty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeRemovedPropertyBranchLoses2
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"bar\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// branch commit happens after trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":null"
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for changeRemovedProperty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeChangedProperty
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"bar\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"baz\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for changeChangedProperty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeChangedPropertyBranchWins
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"bar\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"baz\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for changeChangedProperty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeChangedPropertyBranchLoses1
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
comment|// branch commit happens before trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"bar\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"baz\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for changeChangedProperty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeChangedPropertyBranchLoses2
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"baz\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// branch commit happens after trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"bar\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for changeChangedProperty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Ignore
argument_list|(
literal|"OAK-846"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|changeChangedPropertyTwoBranches
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|b1
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|String
name|b2
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|b1
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"bar\""
argument_list|,
name|b1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|b1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|b2
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"baz\""
argument_list|,
name|b2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|b2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for changeChangedProperty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addExistingNode
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"+\"bar\":{}"
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"+\"bar\":{}"
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for addExistingNode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addExistingNodeBranchWins
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"+\"bar\":{}"
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"+\"bar\":{}"
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for addExistingNode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addExistingNodeBranchLoses1
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
comment|// branch commit happens before trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"+\"bar\":{}"
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"+\"bar\":{}"
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for addExistingNode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addExistingNodeBranchLoses2
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"+\"bar\":{}"
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// branch commit happens after trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"+\"bar\":{}"
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for addExistingNode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeRemovedNode
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"foo\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"foo\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for removeRemovedNode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeRemovedNodeBranchWins
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"foo\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"foo\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for removeRemovedNode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeRemovedNodeBranchLoses1
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
comment|// branch commit happens before trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"foo\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"foo\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for removeRemovedNode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeRemovedNodeBranchLoses2
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"foo\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// branch commit happens after trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"foo\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for removeRemovedNode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeChangedNode
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"value\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"foo\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for removeChangedNode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeChangedNodeBranchWins
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"value\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"foo\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for removeChangedNode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeChangedNodeBranchLoses1
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
comment|// branch commit happens before trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"value\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"foo\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for removeChangedNode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeChangedNodeBranchLoses2
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"foo\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// branch commit happens after trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"value\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for removeChangedNode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeRemovedNode
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"foo\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"value\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for changeRemovedNode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeRemovedNodeBranchWins
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"foo\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"value\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for changeRemovedNode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeRemovedNodeBranchLoses1
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
comment|// branch commit happens before trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"foo\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"value\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for changeRemovedNode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeRemovedNodeBranchLoses2
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop\":\"value\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// branch commit happens after trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"foo\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with conflict for changeRemovedNode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonConflictingChangeProperty
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop1\":\"value\", \"prop2\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop1\":\"bar\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop2\":\"baz\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonConflictingChangePropertyWithBranch1
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop1\":\"value\", \"prop2\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
comment|// branch commit happens before trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop1\":\"bar\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop2\":\"baz\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonConflictingChangePropertyWithBranch2
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop1\":\"value\", \"prop2\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop2\":\"baz\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// branch commit happens after trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop1\":\"bar\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonConflictingAddProperty
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop1\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop1\":\"bar\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop2\":\"baz\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonConflictingAddPropertyWithBranch1
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop1\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
comment|// branch commit happens before trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop1\":\"bar\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop2\":\"baz\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonConflictingAddPropertyWithBranch2
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop1\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop2\":\"baz\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// branch commit happens after trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop1\":\"bar\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonConflictingRemoveProperty
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop1\":\"value\", \"prop2\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop1\":\"bar\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop2\":null"
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonConflictingRemovePropertyWithBranch1
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop1\":\"value\", \"prop2\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
comment|// branch commit happens before trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop1\":\"bar\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop2\":null"
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonConflictingRemovePropertyWithBranch2
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{\"prop1\":\"value\", \"prop2\":\"value\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop2\":null"
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// branch commit happens after trunk commit
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/foo"
argument_list|,
literal|"^\"prop1\":\"bar\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

