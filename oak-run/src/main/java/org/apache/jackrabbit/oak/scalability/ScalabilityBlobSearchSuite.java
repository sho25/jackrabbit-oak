begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFormatException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|lock
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|NullOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|JcrUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
operator|.
name|TestInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
operator|.
name|util
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|JcrCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|OakRepositoryFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|RepositoryFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneInitializerHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * The suite test will incrementally increase the load and execute searches.  * Each test run thus adds blobs and executes different searches. This way we measure time taken for  * search(es) execution.  *   */
end_comment

begin_class
specifier|public
class|class
name|ScalabilityBlobSearchSuite
extends|extends
name|ScalabilityAbstractSuite
block|{
specifier|private
specifier|static
specifier|final
name|int
name|FILE_SIZE
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"fileSize"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|/**      * Controls the number of concurrent threads for loading blobs initially      */
specifier|private
specifier|static
specifier|final
name|int
name|LOADERS
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"loaders"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|/**      * Controls the number of concurrent threads for writing blobs      */
specifier|private
specifier|static
specifier|final
name|int
name|WRITERS
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"fileWriters"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|/**      * Controls the number of concurrent thread for reading blobs      */
specifier|private
specifier|static
specifier|final
name|int
name|READERS
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"fileReaders"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|/**      * Controls the number of concurrent thread for searching      */
specifier|private
specifier|static
specifier|final
name|int
name|SEARCHERS
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"fileSearchers"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|/**      * Controls the max child nodes created under a node.      */
specifier|private
specifier|static
specifier|final
name|int
name|MAX_ASSETS_PER_LEVEL
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"maxAssets"
argument_list|,
literal|500
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CTX_SEARCH_PATHS_PROP
init|=
literal|"searchPaths"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CTX_ROOT_NODE_NAME_PROP
init|=
literal|"rootNodeName"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CTX_FILE_NODE_TYPE_PROP
init|=
literal|"nodeType"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CUSTOM_PATH_PROP
init|=
literal|"contentPath"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CUSTOM_REF_PROP
init|=
literal|"references"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FORMAT_PROP
init|=
literal|"format"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|ROOT_NODE_NAME
init|=
literal|"LongevitySearchAssets"
operator|+
name|TEST_ID
decl_stmt|;
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|29
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|searchPaths
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|readPaths
decl_stmt|;
specifier|private
specifier|final
name|Boolean
name|storageEnabled
decl_stmt|;
specifier|public
name|ScalabilityBlobSearchSuite
parameter_list|(
name|Boolean
name|storageEnabled
parameter_list|)
block|{
name|this
operator|.
name|storageEnabled
operator|=
name|storageEnabled
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ScalabilitySuite
name|addBenchmarks
parameter_list|(
name|ScalabilityBenchmark
modifier|...
name|tests
parameter_list|)
block|{
for|for
control|(
name|ScalabilityBenchmark
name|test
range|:
name|tests
control|)
block|{
name|benchmarks
operator|.
name|put
argument_list|(
name|test
operator|.
name|toString
argument_list|()
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|beforeSuite
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|loginWriter
argument_list|()
decl_stmt|;
name|Node
name|root
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|root
operator|.
name|addNode
argument_list|(
name|ROOT_NODE_NAME
argument_list|)
expr_stmt|;
comment|// defining indexes
name|createIndexDefinition
argument_list|(
name|root
argument_list|,
name|FORMAT_PROP
argument_list|,
name|PropertyIndexEditorProvider
operator|.
name|TYPE
argument_list|,
operator|new
name|String
index|[]
block|{
name|FORMAT_PROP
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
comment|/**      * create a new index definition      *       * @param root the root node of the repository      * @param indexDefinitionName the name of the node for the index definition      * @param indexType the type of the index. Eg {@code property} or {@code ordered}      * @param propertyNames the list of properties to index      * @param unique if unique or not      * @return the node just created      * @throws RepositoryException      */
specifier|private
specifier|static
name|Node
name|createIndexDefinition
parameter_list|(
specifier|final
name|Node
name|root
parameter_list|,
specifier|final
name|String
name|indexDefinitionName
parameter_list|,
specifier|final
name|String
name|indexType
parameter_list|,
specifier|final
name|String
index|[]
name|propertyNames
parameter_list|,
specifier|final
name|boolean
name|unique
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|indexDefRoot
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|root
argument_list|,
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|Node
name|indexDef
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|indexDefRoot
argument_list|,
name|indexDefinitionName
argument_list|,
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|)
decl_stmt|;
name|indexDef
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
argument_list|,
name|indexType
argument_list|)
expr_stmt|;
name|indexDef
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|indexDef
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|PROPERTY_NAMES
argument_list|,
name|propertyNames
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|indexDef
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|UNIQUE_PROPERTY_NAME
argument_list|,
name|unique
argument_list|)
expr_stmt|;
comment|// TODO declaring nodeTypes
comment|// TODO any additional properties
return|return
name|indexDef
return|;
block|}
comment|/**      * Executes before each test run      */
annotation|@
name|Override
specifier|public
name|void
name|beforeIteration
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Started beforeIteration()"
argument_list|)
expr_stmt|;
block|}
comment|// recreate paths created in this run
name|searchPaths
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
name|readPaths
operator|=
name|newArrayListWithCapacity
argument_list|(
name|READERS
argument_list|)
expr_stmt|;
comment|// create the blob load for this iteration
name|createLoad
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// Add background jobs to simulate workload
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|WRITERS
condition|;
name|i
operator|++
control|)
block|{
comment|/* Each writer will write to a directory of the form load-b-i */
name|addBackgroundJob
argument_list|(
operator|new
name|Writer
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|context
operator|.
name|getIncrement
argument_list|()
operator|+
literal|"-b-"
operator|+
name|i
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|READERS
condition|;
name|i
operator|++
control|)
block|{
name|addBackgroundJob
argument_list|(
operator|new
name|Reader
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Finish beforeIteration()"
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|put
argument_list|(
name|CTX_ROOT_NODE_NAME_PROP
argument_list|,
name|ROOT_NODE_NAME
argument_list|)
expr_stmt|;
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|put
argument_list|(
name|CTX_SEARCH_PATHS_PROP
argument_list|,
name|searchPaths
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates the load for the search.      *      * @param context the context      * @throws RepositoryException the repository exception      */
specifier|private
name|void
name|createLoad
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// Creates assets for this run
name|List
argument_list|<
name|Thread
argument_list|>
name|loadThreads
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|LOADERS
condition|;
name|idx
operator|++
control|)
block|{
comment|/* Each loader will write to a directory of the form load-idx */
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Writer
argument_list|(
operator|(
name|context
operator|.
name|getIncrement
argument_list|()
operator|+
literal|"-"
operator|+
name|idx
operator|)
argument_list|,
name|context
operator|.
name|getIncrement
argument_list|()
operator|/
name|LOADERS
argument_list|)
argument_list|,
literal|"LoadThread-"
operator|+
name|idx
argument_list|)
decl_stmt|;
name|loadThreads
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// wait for the load threads to finish
for|for
control|(
name|Thread
name|t
range|:
name|loadThreads
control|)
block|{
try|try
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|executeBenchmark
parameter_list|(
specifier|final
name|ScalabilityBenchmark
name|benchmark
parameter_list|,
specifier|final
name|ExecutionContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
comment|//Execute the benchmark with the number threads configured
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
name|newArrayListWithCapacity
argument_list|(
name|SEARCHERS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|SEARCHERS
condition|;
name|idx
operator|++
control|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
literal|"Search-"
operator|+
name|idx
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|benchmark
operator|.
name|execute
argument_list|(
name|getRepository
argument_list|()
argument_list|,
name|CREDENTIALS
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
try|try
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Repository
index|[]
name|createRepository
parameter_list|(
name|RepositoryFixture
name|fixture
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|fixture
operator|instanceof
name|OakRepositoryFixture
condition|)
block|{
return|return
operator|(
operator|(
name|OakRepositoryFixture
operator|)
name|fixture
operator|)
operator|.
name|setUpCluster
argument_list|(
literal|1
argument_list|,
operator|new
name|JcrCustomizer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Jcr
name|customize
parameter_list|(
name|Jcr
name|jcr
parameter_list|)
block|{
name|LuceneIndexProvider
name|provider
init|=
operator|new
name|LuceneIndexProvider
argument_list|()
decl_stmt|;
name|jcr
operator|.
name|with
argument_list|(
operator|(
name|QueryIndexProvider
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|Observer
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|LuceneIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|LuceneInitializerHelper
argument_list|(
literal|"luceneGlobal"
argument_list|,
name|storageEnabled
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|jcr
return|;
block|}
block|}
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|createRepository
argument_list|(
name|fixture
argument_list|)
return|;
block|}
specifier|private
specifier|synchronized
name|String
name|getRandomReadPath
parameter_list|()
block|{
if|if
condition|(
name|readPaths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
else|else
block|{
return|return
name|readPaths
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|readPaths
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|synchronized
name|void
name|addReadPath
parameter_list|(
name|String
name|file
parameter_list|)
block|{
comment|// Limit the number of paths added to be no more than the number of readers to limit the
comment|// heap used.
name|int
name|limit
init|=
literal|1000
decl_stmt|;
if|if
condition|(
name|readPaths
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
block|{
name|readPaths
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.5
condition|)
block|{
name|readPaths
operator|.
name|set
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|limit
argument_list|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|synchronized
name|void
name|addSearchPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|searchPaths
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|searchPaths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|Reader
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|Session
name|session
init|=
name|loginWriter
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|String
name|path
init|=
name|getRandomReadPath
argument_list|()
decl_stmt|;
name|session
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|JcrUtils
operator|.
name|readFile
argument_list|(
name|session
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
argument_list|,
operator|new
name|NullOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|Writer
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|Node
name|parent
decl_stmt|;
specifier|private
specifier|final
name|Session
name|session
decl_stmt|;
specifier|private
name|long
name|counter
decl_stmt|;
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
comment|/** The maximum number of assets to be written by this thread. */
specifier|private
specifier|final
name|int
name|maxAssets
decl_stmt|;
name|Writer
parameter_list|(
name|String
name|id
parameter_list|,
name|int
name|maxAssets
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|maxAssets
operator|=
name|maxAssets
expr_stmt|;
name|this
operator|.
name|session
operator|=
name|loginWriter
argument_list|()
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
name|ROOT_NODE_NAME
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"writer-"
operator|+
name|id
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|count
operator|<
name|maxAssets
condition|)
block|{
name|session
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|levels
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|getParentLevels
argument_list|(
name|count
argument_list|,
name|maxAssets
argument_list|,
name|levels
argument_list|)
expr_stmt|;
name|String
name|fileNamePrefix
init|=
name|getFileNamePrefix
argument_list|(
name|levels
argument_list|)
decl_stmt|;
name|String
name|parentDir
init|=
name|getParentSuffix
argument_list|(
name|levels
argument_list|)
decl_stmt|;
name|Node
name|file
init|=
name|putFile
argument_list|(
name|fileNamePrefix
argument_list|,
name|parentDir
argument_list|)
decl_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// record for searching and reading
name|addReadPath
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|addSearchPath
argument_list|(
name|fileNamePrefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|DEBUG
operator|&&
operator|(
name|count
operator|+
literal|1
operator|)
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Thread "
operator|+
name|id
operator|+
literal|" - Added assets : "
operator|+
operator|(
name|count
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Node
name|putFile
parameter_list|(
name|String
name|fileNamePrefix
parameter_list|,
name|String
name|parentDir
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|UnsupportedRepositoryOperationException
throws|,
name|ValueFormatException
throws|,
name|VersionException
throws|,
name|LockException
throws|,
name|ConstraintViolationException
block|{
name|String
name|type
init|=
name|getType
argument_list|()
decl_stmt|;
name|Node
name|filepath
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|parent
argument_list|,
name|parentDir
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|Node
name|file
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|filepath
argument_list|,
operator|(
name|fileNamePrefix
operator|+
literal|"File"
operator|+
name|counter
operator|++
operator|)
argument_list|,
name|type
argument_list|)
decl_stmt|;
comment|// adding a custom format/mime-type for later querying.
name|file
operator|.
name|setProperty
argument_list|(
name|FORMAT_PROP
argument_list|,
name|MimeType
operator|.
name|randomMimeType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// adding a last modified for later querying
name|file
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_LAST_MODIFIED
argument_list|,
name|Date
operator|.
name|randomDate
argument_list|()
operator|.
name|getCalendar
argument_list|()
argument_list|)
expr_stmt|;
name|Binary
name|binary
init|=
name|parent
operator|.
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createBinary
argument_list|(
operator|new
name|TestInputStream
argument_list|(
name|FILE_SIZE
operator|*
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Node
name|content
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|file
argument_list|,
name|Node
operator|.
name|JCR_CONTENT
argument_list|,
name|NodeType
operator|.
name|NT_RESOURCE
argument_list|)
decl_stmt|;
name|content
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_MIMETYPE
argument_list|,
literal|"application/octet-stream"
argument_list|)
expr_stmt|;
name|content
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_LAST_MODIFIED
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|content
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_DATA
argument_list|,
name|binary
argument_list|)
expr_stmt|;
name|file
operator|.
name|setProperty
argument_list|(
name|CUSTOM_PATH_PROP
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|reference
init|=
name|getRandomReadPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|reference
argument_list|)
condition|)
block|{
name|file
operator|.
name|setProperty
argument_list|(
name|CUSTOM_REF_PROP
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|binary
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
specifier|private
name|String
name|getType
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|type
init|=
name|NodeTypeConstants
operator|.
name|NT_UNSTRUCTURED
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|CTX_FILE_NODE_TYPE_PROP
argument_list|)
condition|)
block|{
if|if
condition|(
name|parent
operator|.
name|getSession
argument_list|()
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNodeTypeManager
argument_list|()
operator|.
name|hasNodeType
argument_list|(
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
condition|)
block|{
name|type
operator|=
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
expr_stmt|;
block|}
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|put
argument_list|(
name|CTX_FILE_NODE_TYPE_PROP
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
operator|(
name|String
operator|)
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|CTX_FILE_NODE_TYPE_PROP
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
comment|/**          * Create a handy filename to search known files.          *           * @param levels          * @return          */
specifier|private
name|String
name|getFileNamePrefix
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|levels
parameter_list|)
block|{
name|String
name|name
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|level
range|:
name|levels
control|)
block|{
name|name
operator|=
name|name
operator|+
literal|"Level"
operator|+
name|level
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|private
name|String
name|getParentSuffix
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|levels
parameter_list|)
block|{
name|String
name|parentSuffix
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|level
range|:
name|levels
control|)
block|{
name|parentSuffix
operator|=
name|parentSuffix
operator|+
name|level
operator|+
literal|"/"
expr_stmt|;
block|}
return|return
name|parentSuffix
return|;
block|}
comment|/**          * Assigns the asset to it appropriate folder. The folder hierarchy is constructed such that          * each          * folder has only MAX_ASSETS_PER_LEVEL children.          *           * @param assetNum          * @param maxAssets          * @param levels          */
specifier|private
name|void
name|getParentLevels
parameter_list|(
name|long
name|assetNum
parameter_list|,
name|long
name|maxAssets
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|levels
parameter_list|)
block|{
name|int
name|maxAssetsNextLevel
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|maxAssets
operator|/
operator|(
name|double
operator|)
name|MAX_ASSETS_PER_LEVEL
argument_list|)
decl_stmt|;
name|long
name|nextAssetBucket
init|=
name|assetNum
operator|/
name|maxAssetsNextLevel
decl_stmt|;
name|levels
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|nextAssetBucket
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxAssetsNextLevel
operator|>
name|MAX_ASSETS_PER_LEVEL
condition|)
block|{
name|getParentLevels
argument_list|(
operator|(
name|assetNum
operator|-
name|nextAssetBucket
operator|*
name|maxAssetsNextLevel
operator|)
argument_list|,
name|maxAssetsNextLevel
argument_list|,
name|levels
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

