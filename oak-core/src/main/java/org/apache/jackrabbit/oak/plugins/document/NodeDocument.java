begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|AbstractIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Queues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|transform
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
operator|.
name|Key
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
operator|.
name|Operation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|isRevisionNewer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|resolveCommitRevision
import|;
end_import

begin_comment
comment|/**  * A document storing data about a node.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|NodeDocument
extends|extends
name|Document
implements|implements
name|CachedNodeDocument
block|{
comment|/**      * Marker document, which indicates the document does not exist.      */
specifier|public
specifier|static
specifier|final
name|NodeDocument
name|NULL
init|=
operator|new
name|NodeDocument
argument_list|(
operator|new
name|MemoryDocumentStore
argument_list|()
argument_list|)
decl_stmt|;
static|static
block|{
name|NULL
operator|.
name|seal
argument_list|()
expr_stmt|;
block|}
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NodeDocument
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * All NodeDocument ID value would be greater than this value      * It can be used as startKey in DocumentStore#query methods      */
specifier|public
specifier|static
specifier|final
name|String
name|MIN_ID_VALUE
init|=
literal|"0000000"
decl_stmt|;
comment|/**      * All NodeDocument ID value would be less than this value      * It can be used as endKey in DocumentStore#query methods      */
specifier|public
specifier|static
specifier|final
name|String
name|MAX_ID_VALUE
init|=
literal|";"
decl_stmt|;
comment|/**      * A size threshold after which to consider a document a split candidate.      * TODO: check which value is the best one      */
specifier|static
specifier|final
name|int
name|SPLIT_CANDIDATE_THRESHOLD
init|=
literal|8
operator|*
literal|1024
decl_stmt|;
comment|/**      * A document size threshold after which a split is forced even if      * {@link #NUM_REVS_THRESHOLD} is not reached.      */
specifier|static
specifier|final
name|int
name|DOC_SIZE_THRESHOLD
init|=
literal|256
operator|*
literal|1024
decl_stmt|;
comment|/**      * Only split off at least this number of revisions.      */
specifier|static
specifier|final
name|int
name|NUM_REVS_THRESHOLD
init|=
literal|100
decl_stmt|;
comment|/**      * The split ratio. Only split data to an old document when at least      * 30% of the data can be moved.      */
specifier|static
specifier|final
name|float
name|SPLIT_RATIO
init|=
literal|0.3f
decl_stmt|;
comment|/**      * Create an intermediate previous document when there are this many      * previous documents of equal height.      */
specifier|static
specifier|final
name|int
name|PREV_SPLIT_FACTOR
init|=
literal|10
decl_stmt|;
comment|/**      * Revision collision markers set by commits with modifications, which      * overlap with un-merged branch commits.      * Key: revision, value: always true      */
specifier|public
specifier|static
specifier|final
name|String
name|COLLISIONS
init|=
literal|"_collisions"
decl_stmt|;
comment|/**      * The modified time in seconds (5 second resolution).      */
specifier|public
specifier|static
specifier|final
name|String
name|MODIFIED_IN_SECS
init|=
literal|"_modified"
decl_stmt|;
comment|/**      * The resolution of the modified time.      */
specifier|static
specifier|final
name|int
name|MODIFIED_IN_SECS_RESOLUTION
init|=
literal|5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|NavigableMap
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
name|EMPTY_RANGE_MAP
init|=
name|Maps
operator|.
name|unmodifiableNavigableMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * The list of revision to root commit depth mappings to find out if a      * revision is actually committed. Depth 0 means the commit is in the root node,      * depth 1 means one node below the root, and so on.      */
specifier|static
specifier|final
name|String
name|COMMIT_ROOT
init|=
literal|"_commitRoot"
decl_stmt|;
comment|/**      * The number of previous documents (documents that contain old revisions of      * this node). This property is only set if multiple documents per node      * exist. This is the case when a node is updated very often in a short      * time, such that the document gets very big.      *<p>      * Key: high revision      *<p>      * Value: low revision / height (see {@link Range#getLowValue()}      */
specifier|private
specifier|static
specifier|final
name|String
name|PREVIOUS
init|=
literal|"_prev"
decl_stmt|;
comment|/**      * Whether this node is deleted. Key: revision, value: true/false.      */
specifier|private
specifier|static
specifier|final
name|String
name|DELETED
init|=
literal|"_deleted"
decl_stmt|;
comment|/**      * Flag indicating that whether this node was ever deleted.      * Its just used as a hint. If set to true then it indicates that      * node was once deleted.      *      *<p>Note that a true value does not mean that node should be considered      * deleted as it might have been resurrected in later revision</p>      */
specifier|public
specifier|static
specifier|final
name|String
name|DELETED_ONCE
init|=
literal|"_deletedOnce"
decl_stmt|;
comment|/**      * The list of recent revisions for this node, where this node is the      * root of the commit.      *<p>      * Key: revision.      *<p>      * Value: "c" for a regular (non-branch) commit,      * "c-" + base revision of the successfully merged branch commit,      * "b" + base revision of an un-merged branch commit      */
specifier|static
specifier|final
name|String
name|REVISIONS
init|=
literal|"_revisions"
decl_stmt|;
comment|/**      * The last revision.      *<p>      * Key: machine id, in the form "r0-0-1".      *<p>      * Value: the revision.      */
specifier|private
specifier|static
specifier|final
name|String
name|LAST_REV
init|=
literal|"_lastRev"
decl_stmt|;
comment|/**      * Flag indicating that there are child nodes present. Its just used as a hint.      * If false then that indicates that there are no child. However if its true its      * not necessary that there are child nodes. It just means at some moment this      * node had a child node      */
specifier|private
specifier|static
specifier|final
name|String
name|CHILDREN_FLAG
init|=
literal|"_children"
decl_stmt|;
comment|/**      * The node path, in case the id can not be converted to a path.      */
specifier|public
specifier|static
specifier|final
name|String
name|PATH
init|=
literal|"_path"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HAS_BINARY_FLAG
init|=
literal|"_bin"
decl_stmt|;
comment|/**      * Contains {@link #PREVIOUS} entries that are considered stale (pointing      * to a previous document that had been deleted) and should be removed      * during the next split run.      */
specifier|private
specifier|static
specifier|final
name|String
name|STALE_PREV
init|=
literal|"_stalePrev"
decl_stmt|;
comment|//~----------------------------< Split Document Types>
comment|/**      * Defines the type of split document. Its value is an integer whose value is      * defined as per      *      * @see org.apache.jackrabbit.oak.plugins.document.NodeDocument.SplitDocType      */
specifier|public
specifier|static
specifier|final
name|String
name|SD_TYPE
init|=
literal|"_sdType"
decl_stmt|;
comment|/**      * Property name which refers to timestamp (long) of the latest revision kept      * in the document      */
specifier|public
specifier|static
specifier|final
name|String
name|SD_MAX_REV_TIME_IN_SECS
init|=
literal|"_sdMaxRevTime"
decl_stmt|;
comment|/**      * Return time in seconds with 5 second resolution      *      * @param timestamp time in millis to convert      * @return the time in seconds with the given resolution.      */
specifier|public
specifier|static
name|long
name|getModifiedInSecs
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
comment|// 5 second resolution
name|long
name|timeInSec
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|timestamp
argument_list|)
decl_stmt|;
return|return
name|timeInSec
operator|-
name|timeInSec
operator|%
name|MODIFIED_IN_SECS_RESOLUTION
return|;
block|}
comment|/**      * A document which is created from splitting a main document can be classified      * into multiple types depending on the content i.e. weather it contains      * REVISIONS, COMMIT_ROOT, property history etc      */
specifier|public
specifier|static
enum|enum
name|SplitDocType
block|{
comment|/**          * Not a split document          */
name|NONE
argument_list|(
operator|-
literal|1
argument_list|)
block|,
comment|/**          * A split document which contains all types of data          */
name|DEFAULT
argument_list|(
literal|10
argument_list|)
block|,
comment|/**          * A split document which contains all types of data. In addition          * when the split document was created the main document did not had          * any child.          * This type is deprecated because these kind of documents cannot be          * garbage collected independently. The main document may still          * reference _commitRoot entries in the previous document. See OAK-1794          */
annotation|@
name|Deprecated
name|DEFAULT_NO_CHILD
argument_list|(
literal|20
argument_list|)
block|,
comment|/**          * A split document which does not contain REVISIONS history.          * This type is deprecated because these kind of documents cannot be          * garbage collected independently. The main document may still          * reference _commitRoot entries in the previous document. See OAK-1794          */
annotation|@
name|Deprecated
name|PROP_COMMIT_ONLY
argument_list|(
literal|30
argument_list|)
block|,
comment|/**          * Its an intermediate split document which only contains version ranges          * and does not contain any other attributes          */
name|INTERMEDIATE
argument_list|(
literal|40
argument_list|)
block|,
comment|/**          * A split document which contains all types of data. In addition          * when the split document was created the main document did not had          * any child.          */
name|DEFAULT_LEAF
argument_list|(
literal|50
argument_list|)
block|,
comment|/**          * A split document which does not contain REVISIONS history.          */
name|COMMIT_ROOT_ONLY
argument_list|(
literal|60
argument_list|)
block|,         ;
specifier|final
name|int
name|type
decl_stmt|;
specifier|private
name|SplitDocType
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|int
name|typeCode
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|static
name|SplitDocType
name|valueOf
parameter_list|(
name|Integer
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
name|NONE
return|;
block|}
for|for
control|(
name|SplitDocType
name|docType
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|docType
operator|.
name|type
operator|==
name|type
condition|)
block|{
return|return
name|docType
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a valid SplitDocType :"
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|long
name|HAS_BINARY_VAL
init|=
literal|1
decl_stmt|;
specifier|final
name|DocumentStore
name|store
decl_stmt|;
comment|/**      * Parsed and sorted set of previous revisions (without stale references      * to removed previous documents).      */
specifier|private
name|NavigableMap
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
name|previous
decl_stmt|;
comment|/**      * Time at which this object was check for cache consistency      */
specifier|private
specifier|final
name|AtomicLong
name|lastCheckTime
init|=
operator|new
name|AtomicLong
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|long
name|creationTime
decl_stmt|;
name|NodeDocument
parameter_list|(
annotation|@
name|Nonnull
name|DocumentStore
name|store
parameter_list|)
block|{
name|this
argument_list|(
name|store
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Required for serialization      *      * @param store the document store.      * @param creationTime time at which it was created. Would be different from current time      *                     in case of being resurrected from a serialized for      */
specifier|public
name|NodeDocument
parameter_list|(
annotation|@
name|Nonnull
name|DocumentStore
name|store
parameter_list|,
name|long
name|creationTime
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|checkNotNull
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|this
operator|.
name|creationTime
operator|=
name|creationTime
expr_stmt|;
block|}
comment|/**      * Gets the value map for the given key. This method is similar to {@link      * #get(String)} but will always return a value map. The returned value map      * may span multiple documents if the values of the given<code>key</code>      * were split off to {@link #PREVIOUS} documents.      *      * @param key a string key.      * @return the map associated with the key.      */
annotation|@
name|Nonnull
specifier|public
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|getValueMap
parameter_list|(
annotation|@
name|Nonnull
name|String
name|key
parameter_list|)
block|{
return|return
name|ValueMap
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|key
argument_list|)
return|;
block|}
comment|/**      * @return the system time this object was created.      */
annotation|@
name|Override
specifier|public
name|long
name|getCreated
parameter_list|()
block|{
return|return
name|creationTime
return|;
block|}
comment|/**      * See also {@link #MODIFIED_IN_SECS}.      *      * @return the time in seconds this document was last modified with five      *          seconds precision. Returns {@code null} if none is set.      */
annotation|@
name|CheckForNull
specifier|public
name|Long
name|getModified
parameter_list|()
block|{
return|return
operator|(
name|Long
operator|)
name|get
argument_list|(
name|MODIFIED_IN_SECS
argument_list|)
return|;
block|}
comment|/**      * Returns<tt>true</tt> if this node possibly has children.      * If false then that indicates that there are no child      *      * @return<tt>true</tt> if this node has children      */
specifier|public
name|boolean
name|hasChildren
parameter_list|()
block|{
name|Boolean
name|childrenFlag
init|=
operator|(
name|Boolean
operator|)
name|get
argument_list|(
name|CHILDREN_FLAG
argument_list|)
decl_stmt|;
return|return
name|childrenFlag
operator|!=
literal|null
operator|&&
name|childrenFlag
return|;
block|}
comment|/**      * Returns<tt>true</tt> if this document was ever deleted in past.      */
specifier|public
name|boolean
name|wasDeletedOnce
parameter_list|()
block|{
name|Boolean
name|deletedOnceFlag
init|=
operator|(
name|Boolean
operator|)
name|get
argument_list|(
name|DELETED_ONCE
argument_list|)
decl_stmt|;
return|return
name|deletedOnceFlag
operator|!=
literal|null
operator|&&
name|deletedOnceFlag
return|;
block|}
comment|/**      * Checks if this document has been modified after the given lastModifiedTime      *      * @param lastModifiedTime time to compare against in millis      * @return<tt>true</tt> if this document was modified after the given      *  lastModifiedTime      */
specifier|public
name|boolean
name|hasBeenModifiedSince
parameter_list|(
name|long
name|lastModifiedTime
parameter_list|)
block|{
name|Long
name|modified
init|=
operator|(
name|Long
operator|)
name|get
argument_list|(
name|MODIFIED_IN_SECS
argument_list|)
decl_stmt|;
return|return
name|modified
operator|!=
literal|null
operator|&&
name|modified
operator|>
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|lastModifiedTime
argument_list|)
return|;
block|}
comment|/**      * Checks if revision time of all entries in this document is less than the passed      * time      *      * @param maxRevisionTime timemstamp (in millis) of revision to check      * @return<tt>true</tt> if timestamp of maximum revision stored in this document      * is less than than the passed revision timestamp      */
specifier|public
name|boolean
name|hasAllRevisionLessThan
parameter_list|(
name|long
name|maxRevisionTime
parameter_list|)
block|{
name|Long
name|maxRevTimeStamp
init|=
operator|(
name|Long
operator|)
name|get
argument_list|(
name|SD_MAX_REV_TIME_IN_SECS
argument_list|)
decl_stmt|;
return|return
name|maxRevTimeStamp
operator|!=
literal|null
operator|&&
name|maxRevTimeStamp
operator|<
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|maxRevisionTime
argument_list|)
return|;
block|}
comment|/**      * Determines if this document is a split document      *      * @return<tt>true</tt> if this document is a split document      */
specifier|public
name|boolean
name|isSplitDocument
parameter_list|()
block|{
return|return
name|getSplitDocType
argument_list|()
operator|!=
name|SplitDocType
operator|.
name|NONE
return|;
block|}
comment|/**      * Determines the type of split document      *      * @return type of Split Document      */
specifier|public
name|SplitDocType
name|getSplitDocType
parameter_list|()
block|{
name|Object
name|t
init|=
name|get
argument_list|(
name|SD_TYPE
argument_list|)
decl_stmt|;
return|return
name|t
operator|==
literal|null
condition|?
name|SplitDocType
operator|.
name|valueOf
argument_list|(
operator|(
name|Integer
operator|)
literal|null
argument_list|)
else|:
name|SplitDocType
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|t
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Mark this instance as up-to-date (matches the state in persistence      * store).      *      * @param checkTime time at which the check was performed      */
annotation|@
name|Override
specifier|public
name|void
name|markUpToDate
parameter_list|(
name|long
name|checkTime
parameter_list|)
block|{
name|lastCheckTime
operator|.
name|set
argument_list|(
name|checkTime
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns true if the document has already been checked for consistency      * in current cycle.      *      * @param lastCheckTime time at which current cycle started      * @return if the document was checked      */
annotation|@
name|Override
specifier|public
name|boolean
name|isUpToDate
parameter_list|(
name|long
name|lastCheckTime
parameter_list|)
block|{
return|return
name|lastCheckTime
operator|<=
name|this
operator|.
name|lastCheckTime
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Returns the last time when this object was checked for consistency.      *      * @return the last check time      */
annotation|@
name|Override
specifier|public
name|long
name|getLastCheckTime
parameter_list|()
block|{
return|return
name|lastCheckTime
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasBinary
parameter_list|()
block|{
name|Number
name|flag
init|=
operator|(
name|Number
operator|)
name|get
argument_list|(
name|HAS_BINARY_FLAG
argument_list|)
decl_stmt|;
if|if
condition|(
name|flag
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|flag
operator|.
name|intValue
argument_list|()
operator|==
name|HAS_BINARY_VAL
return|;
block|}
comment|/**      * Returns the path of the main document if this document is part of a _prev      * history tree. Otherwise this method simply returns {@link #getPath()}.      *      * @return the path of the main document.      */
annotation|@
name|Nonnull
specifier|public
name|String
name|getMainPath
parameter_list|()
block|{
name|String
name|p
init|=
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
literal|"p"
argument_list|)
condition|)
block|{
name|p
operator|=
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|p
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
literal|"/"
return|;
block|}
else|else
block|{
return|return
name|p
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|p
return|;
block|}
block|}
comment|/**      * @return a map of the last known revision for each clusterId.      */
annotation|@
name|Nonnull
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Revision
argument_list|>
name|getLastRev
parameter_list|()
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Revision
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
name|getLocalMap
argument_list|(
name|LAST_REV
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|e
range|:
name|valueMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|clusterId
init|=
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getClusterId
argument_list|()
decl_stmt|;
name|Revision
name|rev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|clusterId
argument_list|,
name|rev
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
comment|/**      * Returns<code>true</code> if the given<code>revision</code> is marked      * committed.      *      * @param revision the revision.      * @return<code>true</code> if committed;<code>false</code> otherwise.      */
specifier|public
name|boolean
name|isCommitted
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
name|NodeDocument
name|commitRootDoc
init|=
name|getCommitRoot
argument_list|(
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|commitRootDoc
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|value
init|=
name|commitRootDoc
operator|.
name|getLocalRevisions
argument_list|()
operator|.
name|get
argument_list|(
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|Utils
operator|.
name|isCommitted
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|// check previous docs
for|for
control|(
name|NodeDocument
name|prev
range|:
name|commitRootDoc
operator|.
name|getPreviousDocs
argument_list|(
name|REVISIONS
argument_list|,
name|revision
argument_list|)
control|)
block|{
if|if
condition|(
name|prev
operator|.
name|containsRevision
argument_list|(
name|revision
argument_list|)
condition|)
block|{
return|return
name|prev
operator|.
name|isCommitted
argument_list|(
name|revision
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns the commit revision for the change with the given revision.      *      * @param revision the revision of a change.      * @return the commit revision of the change or {@code null} if the change      *          is not committed or unknown.      */
annotation|@
name|CheckForNull
specifier|public
name|Revision
name|getCommitRevision
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
name|NodeDocument
name|commitRoot
init|=
name|getCommitRoot
argument_list|(
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|commitRoot
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|value
init|=
name|commitRoot
operator|.
name|getCommitValue
argument_list|(
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|Utils
operator|.
name|isCommitted
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|Utils
operator|.
name|resolveCommitRevision
argument_list|(
name|revision
argument_list|,
name|value
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns<code>true</code> if this document contains an entry for the      * given<code>revision</code> in the {@link #REVISIONS} map. Please note      * that an entry in the {@link #REVISIONS} map does not necessarily mean      * the the revision is committed. Use {@link #isCommitted(Revision)} to get      * the commit state of a revision.      *      * @param revision the revision to check.      * @return<code>true</code> if this document contains the given revision.      */
specifier|public
name|boolean
name|containsRevision
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
if|if
condition|(
name|getLocalRevisions
argument_list|()
operator|.
name|containsKey
argument_list|(
name|revision
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|NodeDocument
name|prev
range|:
name|getPreviousDocs
argument_list|(
name|REVISIONS
argument_list|,
name|revision
argument_list|)
control|)
block|{
if|if
condition|(
name|prev
operator|.
name|containsRevision
argument_list|(
name|revision
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Purge the  uncommitted revisions of this document with the      * local cluster node id as returned by the {@link RevisionContext}. These      * are the {@link #REVISIONS} entries where {@link Utils#isCommitted(String)}      * returns false.      *      *<p>      *<bold>Note</bold> - This method should only be invoked upon startup      *     as then only we can safely assume that these revisions would not be      *     committed      *</p>      *      * @param context the revision context.      * @return count of the revision entries purged      */
name|int
name|purgeUncommittedRevisions
parameter_list|(
name|RevisionContext
name|context
parameter_list|)
block|{
comment|// only look at revisions in this document.
comment|// uncommitted revisions are not split off
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
name|getLocalRevisions
argument_list|()
decl_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|getId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|purgeCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|commit
range|:
name|valueMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Utils
operator|.
name|isCommitted
argument_list|(
name|commit
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|Revision
name|r
init|=
name|commit
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getClusterId
argument_list|()
operator|==
name|context
operator|.
name|getClusterId
argument_list|()
condition|)
block|{
name|purgeCount
operator|++
expr_stmt|;
name|op
operator|.
name|removeMapEntry
argument_list|(
name|REVISIONS
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|op
operator|.
name|hasChanges
argument_list|()
condition|)
block|{
name|store
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
return|return
name|purgeCount
return|;
block|}
comment|/**      * Purge collision markers with the local clusterId on this document. Use      * only on start when there are no ongoing or pending commits.      *      * @param context the revision context.      * @return the number of removed collision markers.      */
name|int
name|purgeCollisionMarkers
parameter_list|(
name|RevisionContext
name|context
parameter_list|)
block|{
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
name|getLocalMap
argument_list|(
name|COLLISIONS
argument_list|)
decl_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|getId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|purgeCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|commit
range|:
name|valueMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Revision
name|r
init|=
name|commit
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getClusterId
argument_list|()
operator|==
name|context
operator|.
name|getClusterId
argument_list|()
condition|)
block|{
name|purgeCount
operator|++
expr_stmt|;
name|removeCollision
argument_list|(
name|op
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|op
operator|.
name|hasChanges
argument_list|()
condition|)
block|{
name|store
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
return|return
name|purgeCount
return|;
block|}
comment|/**      * Returns the commit root path for the given<code>revision</code> or      *<code>null</code> if this document does not have a commit root entry for      * the given<code>revision</code>.      *      * @param revision a revision.      * @return the commit root path or<code>null</code>.      */
annotation|@
name|CheckForNull
specifier|public
name|String
name|getCommitRootPath
parameter_list|(
name|Revision
name|revision
parameter_list|)
block|{
name|String
name|depth
init|=
name|getCommitRootDepth
argument_list|(
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|depth
operator|!=
literal|null
condition|)
block|{
return|return
name|getPathAtDepth
argument_list|(
name|depth
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Get the revision of the latest change made to this node.      *      * @param context the revision context      * @param changeRev the revision of the current change      * @param handler the conflict handler, which is called for concurrent changes      *                preceding<code>changeRev</code>.      * @return the revision, or null if deleted      */
annotation|@
name|CheckForNull
specifier|public
name|Revision
name|getNewestRevision
parameter_list|(
specifier|final
name|RevisionContext
name|context
parameter_list|,
specifier|final
name|Revision
name|changeRev
parameter_list|,
specifier|final
name|CollisionHandler
name|handler
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|validRevisions
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Predicate
argument_list|<
name|Revision
argument_list|>
name|predicate
init|=
operator|new
name|Predicate
argument_list|<
name|Revision
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Revision
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|.
name|equals
argument_list|(
name|changeRev
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isValidRevision
argument_list|(
name|context
argument_list|,
name|input
argument_list|,
literal|null
argument_list|,
name|changeRev
argument_list|,
name|validRevisions
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|handler
operator|.
name|concurrentModification
argument_list|(
name|input
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|Revision
name|newestRev
init|=
literal|null
decl_stmt|;
comment|// check local commits first
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|revisions
init|=
name|getLocalRevisions
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|commitRoots
init|=
name|getLocalCommitRoot
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Revision
argument_list|>
name|it
init|=
name|filter
argument_list|(
name|Iterables
operator|.
name|mergeSorted
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|revisions
operator|.
name|keySet
argument_list|()
argument_list|,
name|commitRoots
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
name|revisions
operator|.
name|comparator
argument_list|()
argument_list|)
argument_list|,
name|predicate
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|newestRev
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// check full history (only needed in rare cases)
name|it
operator|=
name|filter
argument_list|(
name|Iterables
operator|.
name|mergeSorted
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|getValueMap
argument_list|(
name|REVISIONS
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|,
name|getValueMap
argument_list|(
name|COMMIT_ROOT
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
name|revisions
operator|.
name|comparator
argument_list|()
argument_list|)
argument_list|,
name|predicate
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|newestRev
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newestRev
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// the local deleted map contains the most recent revisions
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|deleted
init|=
name|getLocalDeleted
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|deleted
operator|.
name|get
argument_list|(
name|newestRev
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|&&
name|deleted
operator|.
name|headMap
argument_list|(
name|newestRev
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// newestRev is newer than most recent entry in local deleted
comment|// no need to check previous docs
return|return
name|newestRev
return|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// get from complete map
name|value
operator|=
name|getDeleted
argument_list|()
operator|.
name|get
argument_list|(
name|newestRev
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
comment|// deleted in the newest revision
return|return
literal|null
return|;
block|}
return|return
name|newestRev
return|;
block|}
comment|/**      * Checks if the revision is valid for the given document. A revision is      * considered valid if the given document is the root of the commit, or the      * commit root has the revision set. This method may read further documents      * to perform this check.      * This method also takes pending branches into consideration.      * The<code>readRevision</code> identifies the read revision used by the      * client, which may be a branch revision logged in {@link RevisionContext#getBranches()}.      * The revision<code>rev</code> is valid if it is part of the branch      * history of<code>readRevision</code>.      *      * @param rev     revision to check.      * @param commitValue the commit value of the revision to check or      *<code>null</code> if unknown.      * @param readRevision the read revision of the client.      * @param validRevisions map of revisions to commit value already checked      *                       against<code>readRevision</code> and considered      *                       valid.      * @return<code>true</code> if the revision is valid;<code>false</code>      *         otherwise.      */
name|boolean
name|isValidRevision
parameter_list|(
annotation|@
name|Nonnull
name|RevisionContext
name|context
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|rev
parameter_list|,
annotation|@
name|Nullable
name|String
name|commitValue
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|readRevision
parameter_list|,
annotation|@
name|Nonnull
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|validRevisions
parameter_list|)
block|{
if|if
condition|(
name|validRevisions
operator|.
name|containsKey
argument_list|(
name|rev
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|NodeDocument
name|doc
init|=
name|getCommitRoot
argument_list|(
name|rev
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|doc
operator|.
name|isCommitted
argument_list|(
name|context
argument_list|,
name|rev
argument_list|,
name|commitValue
argument_list|,
name|readRevision
argument_list|)
condition|)
block|{
name|validRevisions
operator|.
name|put
argument_list|(
name|rev
argument_list|,
name|commitValue
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns a {@link DocumentNodeState} as seen at the given      *<code>readRevision</code>.      *      * @param nodeStore    the node store.      * @param readRevision the read revision.      * @param lastModified the revision when this node was last modified, but      *                     the value is potentially not yet reflected in this      *                     document.      *                     See {@link RevisionContext#getPendingModifications()}.      * @return the node or<code>null</code> if the node doesn't exist at the      *         given read revision.      */
annotation|@
name|CheckForNull
specifier|public
name|DocumentNodeState
name|getNodeAtRevision
parameter_list|(
annotation|@
name|Nonnull
name|DocumentNodeStore
name|nodeStore
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|readRevision
parameter_list|,
annotation|@
name|Nullable
name|Revision
name|lastModified
parameter_list|)
block|{
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|validRevisions
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Branch
name|branch
init|=
name|nodeStore
operator|.
name|getBranches
argument_list|()
operator|.
name|getBranch
argument_list|(
name|readRevision
argument_list|)
decl_stmt|;
name|LastRevs
name|lastRevs
init|=
operator|new
name|LastRevs
argument_list|(
name|getLastRev
argument_list|()
argument_list|,
name|readRevision
argument_list|,
name|branch
argument_list|)
decl_stmt|;
comment|// overlay with unsaved last modified from this instance
name|lastRevs
operator|.
name|update
argument_list|(
name|lastModified
argument_list|)
expr_stmt|;
name|Revision
name|min
init|=
name|getLiveRevision
argument_list|(
name|nodeStore
argument_list|,
name|readRevision
argument_list|,
name|validRevisions
argument_list|,
name|lastRevs
argument_list|)
decl_stmt|;
if|if
condition|(
name|min
operator|==
literal|null
condition|)
block|{
comment|// deleted
return|return
literal|null
return|;
block|}
name|String
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
name|DocumentNodeState
name|n
init|=
operator|new
name|DocumentNodeState
argument_list|(
name|nodeStore
argument_list|,
name|path
argument_list|,
name|readRevision
argument_list|,
name|hasChildren
argument_list|()
argument_list|)
decl_stmt|;
name|Revision
name|lastRevision
init|=
name|min
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Utils
operator|.
name|isPropertyName
argument_list|(
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// ignore when local map is empty (OAK-2442)
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|local
init|=
name|getLocalMap
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|local
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// first check local map, which contains most recent values
name|Value
name|value
init|=
name|getLatestValue
argument_list|(
name|nodeStore
argument_list|,
name|local
argument_list|,
name|min
argument_list|,
name|readRevision
argument_list|,
name|validRevisions
argument_list|,
name|lastRevs
argument_list|)
decl_stmt|;
comment|// check if there may be more recent values in a previous document
if|if
condition|(
operator|!
name|getPreviousRanges
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Revision
name|newest
init|=
name|local
operator|.
name|firstKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|isRevisionNewer
argument_list|(
name|nodeStore
argument_list|,
name|newest
argument_list|,
name|value
operator|.
name|revision
argument_list|)
condition|)
block|{
comment|// not reading the most recent value, we may need to
comment|// consider previous documents as well
name|Revision
name|newestPrev
init|=
name|getPreviousRanges
argument_list|()
operator|.
name|firstKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|isRevisionNewer
argument_list|(
name|nodeStore
argument_list|,
name|newestPrev
argument_list|,
name|value
operator|.
name|revision
argument_list|)
condition|)
block|{
comment|// a previous document has more recent changes
comment|// than value.revision
name|value
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|value
operator|==
literal|null
operator|&&
operator|!
name|getPreviousRanges
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// check complete revision history
name|value
operator|=
name|getLatestValue
argument_list|(
name|nodeStore
argument_list|,
name|getValueMap
argument_list|(
name|key
argument_list|)
argument_list|,
name|min
argument_list|,
name|readRevision
argument_list|,
name|validRevisions
argument_list|,
name|lastRevs
argument_list|)
expr_stmt|;
block|}
name|String
name|propertyName
init|=
name|Utils
operator|.
name|unescapePropertyName
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|v
init|=
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|value
else|:
literal|null
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|v
argument_list|)
expr_stmt|;
comment|// keep track of when this node was last modified
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|isRevisionNewer
argument_list|(
name|nodeStore
argument_list|,
name|value
operator|.
name|revision
argument_list|,
name|lastRevision
argument_list|)
condition|)
block|{
name|lastRevision
operator|=
name|value
operator|.
name|revision
expr_stmt|;
block|}
block|}
comment|// lastRevision now points to the revision when this node was
comment|// last modified directly. but it may also have been 'modified'
comment|// by an operation on a descendant node, which is tracked in
comment|// _lastRev.
comment|// when was this node last modified?
name|Revision
name|branchBase
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|branch
operator|!=
literal|null
condition|)
block|{
name|branchBase
operator|=
name|branch
operator|.
name|getBase
argument_list|(
name|readRevision
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Revision
name|r
range|:
name|lastRevs
operator|.
name|get
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
comment|// ignore if newer than readRevision
if|if
condition|(
name|isRevisionNewer
argument_list|(
name|nodeStore
argument_list|,
name|r
argument_list|,
name|readRevision
argument_list|)
condition|)
block|{
comment|// the node has a _lastRev which is newer than readRevision
comment|// this means we don't know when this node was
comment|// modified by an operation on a descendant node between
comment|// current lastRevision and readRevision. therefore we have
comment|// to stay on the safe side and use readRevision
name|lastRevision
operator|=
name|readRevision
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|branchBase
operator|!=
literal|null
operator|&&
name|isRevisionNewer
argument_list|(
name|nodeStore
argument_list|,
name|r
argument_list|,
name|branchBase
argument_list|)
condition|)
block|{
comment|// readRevision is on a branch and the node has a
comment|// _lastRev which is newer than the base of the branch
comment|// we cannot use this _lastRev because it is not visible
comment|// from this branch. highest possible revision of visible
comment|// changes is the base of the branch
name|r
operator|=
name|branchBase
expr_stmt|;
block|}
if|if
condition|(
name|revisionAreAmbiguous
argument_list|(
name|nodeStore
argument_list|,
name|r
argument_list|,
name|lastRevision
argument_list|)
condition|)
block|{
comment|// _lastRev entries from multiple cluster nodes are ambiguous
comment|// use readRevision to make sure read is consistent
name|lastRevision
operator|=
name|readRevision
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isRevisionNewer
argument_list|(
name|nodeStore
argument_list|,
name|r
argument_list|,
name|lastRevision
argument_list|)
condition|)
block|{
name|lastRevision
operator|=
name|r
expr_stmt|;
block|}
block|}
if|if
condition|(
name|branch
operator|!=
literal|null
condition|)
block|{
comment|// read from a branch
comment|// -> possibly overlay with unsaved last revs from branch
name|lastRevs
operator|.
name|updateBranch
argument_list|(
name|branch
operator|.
name|getUnsavedLastRevision
argument_list|(
name|path
argument_list|,
name|readRevision
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|r
init|=
name|lastRevs
operator|.
name|getBranchRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|lastRevision
operator|=
name|r
expr_stmt|;
block|}
block|}
name|n
operator|.
name|setLastRevision
argument_list|(
name|lastRevision
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
comment|/**      * Get the earliest (oldest) revision where the node was alive at or before      * the provided revision, if the node was alive at the given revision.      *      * @param context the revision context      * @param maxRev the maximum revision to return      * @param validRevisions the map of revisions to commit value already      *                       checked against maxRev and considered valid.      * @param lastRevs to keep track of the last modification.      * @return the earliest revision, or null if the node is deleted at the      *         given revision      */
annotation|@
name|CheckForNull
specifier|public
name|Revision
name|getLiveRevision
parameter_list|(
name|RevisionContext
name|context
parameter_list|,
name|Revision
name|maxRev
parameter_list|,
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|validRevisions
parameter_list|,
name|LastRevs
name|lastRevs
parameter_list|)
block|{
comment|// check local deleted map first
name|Value
name|value
init|=
name|getLatestValue
argument_list|(
name|context
argument_list|,
name|getLocalDeleted
argument_list|()
argument_list|,
literal|null
argument_list|,
name|maxRev
argument_list|,
name|validRevisions
argument_list|,
name|lastRevs
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|value
operator|==
literal|null
operator|&&
operator|!
name|getPreviousRanges
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// need to check complete map
name|value
operator|=
name|getLatestValue
argument_list|(
name|context
argument_list|,
name|getDeleted
argument_list|()
argument_list|,
literal|null
argument_list|,
name|maxRev
argument_list|,
name|validRevisions
argument_list|,
name|lastRevs
argument_list|)
expr_stmt|;
block|}
return|return
literal|"false"
operator|.
name|equals
argument_list|(
name|value
operator|.
name|value
argument_list|)
condition|?
name|value
operator|.
name|revision
else|:
literal|null
return|;
block|}
comment|/**      * Returns<code>true</code> if the given operation is conflicting with this      * document.      *      * @param op the update operation.      * @param baseRevision the base revision for the update operation.      * @param commitRevision the commit revision of the update operation.      * @param context the revision context.      * @param enableConcurrentAddRemove feature flag for OAK-2673.      * @return<code>true</code> if conflicting,<code>false</code> otherwise.      */
name|boolean
name|isConflicting
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|baseRevision
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|commitRevision
parameter_list|,
annotation|@
name|Nonnull
name|RevisionContext
name|context
parameter_list|,
name|boolean
name|enableConcurrentAddRemove
parameter_list|)
block|{
comment|// did existence of node change after baseRevision?
comment|// only check local deleted map, which contains the most
comment|// recent values
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|deleted
init|=
name|getLocalDeleted
argument_list|()
decl_stmt|;
name|boolean
name|allowConflictingDeleteChange
init|=
name|enableConcurrentAddRemove
operator|&&
name|allowConflictingDeleteChange
argument_list|(
name|op
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|deleted
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|commitRevision
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|baseRevision
argument_list|)
condition|)
block|{
name|boolean
name|newerDeleted
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allowConflictingDeleteChange
operator|||
name|op
operator|.
name|isDelete
argument_list|()
operator|!=
name|newerDeleted
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Operation
argument_list|>
name|entry
range|:
name|op
operator|.
name|getChanges
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|type
operator|!=
name|Operation
operator|.
name|Type
operator|.
name|SET_MAP_ENTRY
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|DELETED
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
operator|!
name|allowConflictingDeleteChange
condition|)
block|{
comment|// existence of node changed, this always conflicts with
comment|// any other concurrent change
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|Utils
operator|.
name|isPropertyName
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// was this property touched after baseRevision?
for|for
control|(
name|Revision
name|rev
range|:
name|getValueMap
argument_list|(
name|name
argument_list|)
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|rev
operator|.
name|equals
argument_list|(
name|commitRevision
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|rev
argument_list|,
name|baseRevision
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Utility method to check if {@code op} can be allowed to change      * {@link #DELETED} property. Basic idea is that a change in      * {@link #DELETED} property should be consistent if final value is same      * and there are no observation semantic change. Thus, this method tries to      * be very conservative and allows delete iff:      *<ul>      *<li>{@code doc} represents and internal path</li>      *<li>{@code op} represents an add or delete operation</li>      *<li>{@code op} doesn't change add/delete any exposed property</li>      *<li>{@code doc} doesn't have any exposed property</li>      *</ul>      *<i>      * Note: This method is a broad level check if we can allow such conflict      * resolution. Actual cases, like allow-delete-delete, allow-add-add wrt to      * revision are not handled here.      *</i>      * @param op {@link UpdateOp} instance having changes to check {@code doc} against      * @return if conflicting change in {@link #DELETED} property is allowed      */
specifier|private
name|boolean
name|allowConflictingDeleteChange
parameter_list|(
name|UpdateOp
name|op
parameter_list|)
block|{
name|String
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Utils
operator|.
name|isHiddenPath
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|op
operator|.
name|isNew
argument_list|()
operator|&&
operator|!
name|op
operator|.
name|isDelete
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
comment|//only handle added/delete operations
block|}
for|for
control|(
name|Key
name|opKey
range|:
name|op
operator|.
name|getChanges
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|opKey
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|Utils
operator|.
name|isPropertyName
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
comment|//only handle changes to internal properties
block|}
block|}
comment|// Only look at local data ...
comment|// even remotely updated properties should have an entry (although invisible)
comment|// by the time we are looking for conflicts
for|for
control|(
name|String
name|dataKey
range|:
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|Utils
operator|.
name|isPropertyName
argument_list|(
name|dataKey
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
comment|//only handle changes to internal properties
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Returns update operations to split this document. The implementation may      * decide to not return any operations if no splitting is required.      *      * @param context the revision context.      * @return the split operations.      */
annotation|@
name|Nonnull
specifier|public
name|Iterable
argument_list|<
name|UpdateOp
argument_list|>
name|split
parameter_list|(
annotation|@
name|Nonnull
name|RevisionContext
name|context
parameter_list|)
block|{
return|return
name|SplitOperations
operator|.
name|forDocument
argument_list|(
name|this
argument_list|,
name|context
argument_list|)
return|;
block|}
comment|/**      * Returns previous revision ranges for this document. The revision keys are      * sorted descending, newest first! The returned map does not include stale      * entries.      * This method is equivalent to calling {@link #getPreviousRanges(boolean)}      * with {@code includeStale} set to false.      *      * @return the previous ranges for this document.      */
annotation|@
name|Nonnull
name|NavigableMap
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
name|getPreviousRanges
parameter_list|()
block|{
return|return
name|getPreviousRanges
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|/**      * Returns previous revision ranges for this document. The revision keys are      * sorted descending, newest first!      *      * @param includeStale whether stale revision ranges are included or not.      * @return the previous ranges for this document.      */
annotation|@
name|Nonnull
name|NavigableMap
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
name|getPreviousRanges
parameter_list|(
name|boolean
name|includeStale
parameter_list|)
block|{
if|if
condition|(
name|includeStale
condition|)
block|{
return|return
name|createPreviousRanges
argument_list|(
literal|true
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|previous
operator|=
name|createPreviousRanges
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|previous
return|;
block|}
block|}
comment|/**      * Creates a map with previous revision ranges for this document. The      * revision keys are sorted descending, newest first!      *      * @param includeStale whether stale revision ranges are included or not.      * @return the previous ranges for this document.      */
annotation|@
name|Nonnull
specifier|private
name|NavigableMap
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
name|createPreviousRanges
parameter_list|(
name|boolean
name|includeStale
parameter_list|)
block|{
name|NavigableMap
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
name|ranges
decl_stmt|;
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|map
init|=
name|getLocalMap
argument_list|(
name|PREVIOUS
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ranges
operator|=
name|EMPTY_RANGE_MAP
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|stale
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeStale
condition|)
block|{
name|stale
operator|=
name|getLocalMap
argument_list|(
name|STALE_PREV
argument_list|)
expr_stmt|;
block|}
name|NavigableMap
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
name|transformed
init|=
operator|new
name|TreeMap
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
argument_list|(
name|StableRevisionComparator
operator|.
name|REVERSE
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Range
name|r
init|=
name|Range
operator|.
name|fromEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|String
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|height
argument_list|)
operator|.
name|equals
argument_list|(
name|stale
operator|.
name|get
argument_list|(
name|r
operator|.
name|high
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|transformed
operator|.
name|put
argument_list|(
name|r
operator|.
name|high
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|ranges
operator|=
name|Maps
operator|.
name|unmodifiableNavigableMap
argument_list|(
name|transformed
argument_list|)
expr_stmt|;
block|}
return|return
name|ranges
return|;
block|}
comment|/**      * Returns previous {@link NodeDocument}, which include entries for the      * property in the given revision.      * If the<code>revision</code> is<code>null</code>, then all previous      * documents with changes for the given property are returned. The returned      * documents are returned in descending revision order (newest first).      *      * @param property the name of a property.      * @param revision the revision to match or<code>null</code>.      * @return previous documents.      */
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|getPreviousDocs
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|property
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Revision
name|revision
parameter_list|)
block|{
if|if
condition|(
name|getPreviousRanges
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
if|if
condition|(
name|revision
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|PropertyHistory
argument_list|(
name|this
argument_list|,
name|property
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|String
name|mainPath
init|=
name|getMainPath
argument_list|()
decl_stmt|;
comment|// first try to lookup revision directly
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
name|entry
init|=
name|getPreviousRanges
argument_list|()
operator|.
name|floorEntry
argument_list|(
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|Revision
name|r
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|height
decl_stmt|;
name|String
name|prevId
init|=
name|Utils
operator|.
name|getPreviousIdFor
argument_list|(
name|mainPath
argument_list|,
name|r
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|NodeDocument
name|prev
init|=
name|getPreviousDocument
argument_list|(
name|prevId
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|prev
operator|.
name|getValueMap
argument_list|(
name|property
argument_list|)
operator|.
name|containsKey
argument_list|(
name|revision
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|prev
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Document with previous revisions not found: "
operator|+
name|prevId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// didn't find entry -> scan through remaining head ranges
return|return
name|filter
argument_list|(
name|transform
argument_list|(
name|getPreviousRanges
argument_list|()
operator|.
name|headMap
argument_list|(
name|revision
argument_list|)
operator|.
name|entrySet
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
argument_list|,
name|NodeDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeDocument
name|apply
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|.
name|getValue
argument_list|()
operator|.
name|includes
argument_list|(
name|revision
argument_list|)
condition|)
block|{
return|return
name|getPreviousDoc
argument_list|(
name|input
operator|.
name|getKey
argument_list|()
argument_list|,
name|input
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|NodeDocument
name|input
parameter_list|)
block|{
return|return
name|input
operator|!=
literal|null
operator|&&
name|input
operator|.
name|getValueMap
argument_list|(
name|property
argument_list|)
operator|.
name|containsKey
argument_list|(
name|revision
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
name|NodeDocument
name|getPreviousDocument
parameter_list|(
name|String
name|prevId
parameter_list|)
block|{
comment|//Use the maxAge variant such that in case of Mongo call for
comment|//previous doc are directed towards replicas first
return|return
name|store
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|prevId
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
name|Iterator
argument_list|<
name|NodeDocument
argument_list|>
name|getAllPreviousDocs
parameter_list|()
block|{
if|if
condition|(
name|getPreviousRanges
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Iterators
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
comment|//Currently this method would fire one query per previous doc
comment|//If that poses a problem we can try to find all prev doc by relying
comment|//on property that all prevDoc id would starts<depth+2>:p/path/to/node
return|return
operator|new
name|AbstractIterator
argument_list|<
name|NodeDocument
argument_list|>
argument_list|()
block|{
specifier|private
name|Queue
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
argument_list|>
name|previousRanges
init|=
name|Queues
operator|.
name|newArrayDeque
argument_list|(
name|getPreviousRanges
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|NodeDocument
name|computeNext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|previousRanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
name|e
init|=
name|previousRanges
operator|.
name|remove
argument_list|()
decl_stmt|;
name|NodeDocument
name|prev
init|=
name|getPreviousDoc
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|previousRanges
operator|.
name|addAll
argument_list|(
name|prev
operator|.
name|getPreviousRanges
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|prev
return|;
block|}
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|private
name|NodeDocument
name|getPreviousDoc
parameter_list|(
name|Revision
name|rev
parameter_list|,
name|Range
name|range
parameter_list|)
block|{
name|int
name|h
init|=
name|range
operator|.
name|height
decl_stmt|;
name|String
name|prevId
init|=
name|Utils
operator|.
name|getPreviousIdFor
argument_list|(
name|getMainPath
argument_list|()
argument_list|,
name|rev
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|NodeDocument
name|prev
init|=
name|getPreviousDocument
argument_list|(
name|prevId
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
return|return
name|prev
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Document with previous revisions not found: "
operator|+
name|prevId
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns the document that contains a reference to the previous document      * identified by {@code revision} and {@code height}. This is either the      * current document or an intermediate split document. This method returns      * {@code null} if there is no such reference.      *      * @param revision the high revision of a range entry in {@link #PREVIOUS}.      * @param height the height of the entry in {@link #PREVIOUS}.      * @return the document with the entry or {@code null} if not found.      */
annotation|@
name|Nullable
name|NodeDocument
name|findPrevReferencingDoc
parameter_list|(
name|Revision
name|revision
parameter_list|,
name|int
name|height
parameter_list|)
block|{
for|for
control|(
name|Range
name|range
range|:
name|getPreviousRanges
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|range
operator|.
name|getHeight
argument_list|()
operator|==
name|height
operator|&&
name|range
operator|.
name|high
operator|.
name|equals
argument_list|(
name|revision
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
elseif|else
if|if
condition|(
name|range
operator|.
name|includes
argument_list|(
name|revision
argument_list|)
condition|)
block|{
name|String
name|prevId
init|=
name|Utils
operator|.
name|getPreviousIdFor
argument_list|(
name|getMainPath
argument_list|()
argument_list|,
name|range
operator|.
name|high
argument_list|,
name|range
operator|.
name|height
argument_list|)
decl_stmt|;
name|NodeDocument
name|prev
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|prevId
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Split document {} does not exist anymore. Main document is {}"
argument_list|,
name|prevId
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|getMainPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// recurse into the split hierarchy
name|NodeDocument
name|doc
init|=
name|prev
operator|.
name|findPrevReferencingDoc
argument_list|(
name|revision
argument_list|,
name|height
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
return|return
name|doc
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns the local value map for the given key.      *      * @param key the key.      * @return local value map.      */
annotation|@
name|Nonnull
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|getLocalMap
parameter_list|(
name|String
name|key
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|(
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
operator|)
name|data
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|map
operator|=
name|ValueMap
operator|.
name|EMPTY
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
comment|/**      * @return the {@link #REVISIONS} stored on this document.      */
annotation|@
name|Nonnull
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|getLocalRevisions
parameter_list|()
block|{
return|return
name|getLocalMap
argument_list|(
name|REVISIONS
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|getLocalCommitRoot
parameter_list|()
block|{
return|return
name|getLocalMap
argument_list|(
name|COMMIT_ROOT
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|getLocalDeleted
parameter_list|()
block|{
return|return
name|getLocalMap
argument_list|(
name|DELETED
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|getStalePrev
parameter_list|()
block|{
return|return
name|getLocalMap
argument_list|(
name|STALE_PREV
argument_list|)
return|;
block|}
comment|//-------------------------< UpdateOp modifiers>---------------------------
specifier|public
specifier|static
name|void
name|setChildrenFlag
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
name|boolean
name|hasChildNode
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|set
argument_list|(
name|CHILDREN_FLAG
argument_list|,
name|hasChildNode
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setModified
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|max
argument_list|(
name|MODIFIED_IN_SECS
argument_list|,
name|getModifiedInSecs
argument_list|(
name|checkNotNull
argument_list|(
name|revision
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setRevision
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|,
annotation|@
name|Nonnull
name|String
name|commitValue
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|setMapEntry
argument_list|(
name|REVISIONS
argument_list|,
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|,
name|checkNotNull
argument_list|(
name|commitValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|unsetRevision
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|unsetMapEntry
argument_list|(
name|REVISIONS
argument_list|,
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|isRevisionsEntry
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|REVISIONS
operator|.
name|equals
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isCommitRootEntry
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|COMMIT_ROOT
operator|.
name|equals
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isDeletedEntry
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|DELETED
operator|.
name|equals
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|removeRevision
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|removeMapEntry
argument_list|(
name|REVISIONS
argument_list|,
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|addCollision
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|setMapEntry
argument_list|(
name|COLLISIONS
argument_list|,
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|removeCollision
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|removeMapEntry
argument_list|(
name|COLLISIONS
argument_list|,
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setLastRev
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|setMapEntry
argument_list|(
name|LAST_REV
argument_list|,
operator|new
name|Revision
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|revision
operator|.
name|getClusterId
argument_list|()
argument_list|)
argument_list|,
name|revision
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setCommitRoot
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|,
name|int
name|commitRootDepth
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|setMapEntry
argument_list|(
name|COMMIT_ROOT
argument_list|,
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|commitRootDepth
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|removeCommitRoot
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|removeMapEntry
argument_list|(
name|COMMIT_ROOT
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setDeleted
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|,
name|boolean
name|deleted
parameter_list|)
block|{
if|if
condition|(
name|deleted
condition|)
block|{
comment|//DELETED_ONCE would be set upon every delete.
comment|//possibly we can avoid that
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|set
argument_list|(
name|DELETED_ONCE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|setMapEntry
argument_list|(
name|DELETED
argument_list|,
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|deleted
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|removeDeleted
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|removeMapEntry
argument_list|(
name|DELETED
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setPrevious
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Range
name|range
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|setMapEntry
argument_list|(
name|PREVIOUS
argument_list|,
name|checkNotNull
argument_list|(
name|range
argument_list|)
operator|.
name|high
argument_list|,
name|range
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|removePrevious
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Range
name|range
parameter_list|)
block|{
name|removePrevious
argument_list|(
name|op
argument_list|,
name|checkNotNull
argument_list|(
name|range
argument_list|)
operator|.
name|high
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|removePrevious
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|removeMapEntry
argument_list|(
name|PREVIOUS
argument_list|,
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setStalePrevious
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|setMapEntry
argument_list|(
name|STALE_PREV
argument_list|,
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|height
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|removeStalePrevious
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|removeMapEntry
argument_list|(
name|STALE_PREV
argument_list|,
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setHasBinary
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|set
argument_list|(
name|HAS_BINARY_FLAG
argument_list|,
name|HAS_BINARY_VAL
argument_list|)
expr_stmt|;
block|}
comment|//----------------------------< internal>----------------------------------
comment|/**      * Returns {@code true} if the two revisions are ambiguous. That is, they      * are from different cluster nodes and the comparison of the two revision      * depends on the seen at revision and is different when just comparing the      * timestamps of the revisions.      *      * @param context the revision context.      * @param r1 the first revision.      * @param r2 the second revision.      * @return {@code true} if ambiguous, {@code false} otherwise.      */
specifier|static
name|boolean
name|revisionAreAmbiguous
parameter_list|(
annotation|@
name|Nonnull
name|RevisionContext
name|context
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|r1
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|r2
parameter_list|)
block|{
if|if
condition|(
name|r1
operator|.
name|getClusterId
argument_list|()
operator|==
name|r2
operator|.
name|getClusterId
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|c1
init|=
name|context
operator|.
name|getRevisionComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
decl_stmt|;
name|int
name|c2
init|=
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|)
decl_stmt|;
if|if
condition|(
name|c1
operator|==
literal|0
condition|)
block|{
return|return
name|c2
operator|==
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|c1
operator|<
literal|0
condition|)
block|{
return|return
name|c2
operator|>=
literal|0
return|;
block|}
else|else
block|{
return|return
name|c2
operator|<=
literal|0
return|;
block|}
block|}
comment|/**      * Returns the commit root document for the given revision. This may either      * be this document or another one.      *      * @param rev a revision.      * @return the commit root or<code>null</code> if there is none.      */
annotation|@
name|CheckForNull
specifier|private
name|NodeDocument
name|getCommitRoot
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|rev
parameter_list|)
block|{
comment|// check local revisions and commitRoot first
if|if
condition|(
name|getLocalRevisions
argument_list|()
operator|.
name|containsKey
argument_list|(
name|rev
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
name|String
name|commitRootPath
decl_stmt|;
name|String
name|depth
init|=
name|getLocalCommitRoot
argument_list|()
operator|.
name|get
argument_list|(
name|rev
argument_list|)
decl_stmt|;
if|if
condition|(
name|depth
operator|!=
literal|null
condition|)
block|{
name|commitRootPath
operator|=
name|getPathAtDepth
argument_list|(
name|depth
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// fall back to complete check, including previous documents
if|if
condition|(
name|containsRevision
argument_list|(
name|rev
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
name|commitRootPath
operator|=
name|getCommitRootPath
argument_list|(
name|rev
argument_list|)
expr_stmt|;
if|if
condition|(
name|commitRootPath
operator|==
literal|null
condition|)
block|{
comment|// may happen for a commit root document, which hasn't been
comment|// updated with the commit revision yet
return|return
literal|null
return|;
block|}
block|}
comment|// get root of commit
return|return
name|store
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|commitRootPath
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns the path at the given {@code depth} based on the path of this      * document.      *      * @param depth the depth as a string.      * @return the path.      * @throws NumberFormatException if {@code depth} cannot be parsed as an      *              integer.      */
annotation|@
name|Nonnull
specifier|private
name|String
name|getPathAtDepth
parameter_list|(
annotation|@
name|Nonnull
name|String
name|depth
parameter_list|)
block|{
if|if
condition|(
name|checkNotNull
argument_list|(
name|depth
argument_list|)
operator|.
name|equals
argument_list|(
literal|"0"
argument_list|)
condition|)
block|{
return|return
literal|"/"
return|;
block|}
name|String
name|p
init|=
name|getPath
argument_list|()
decl_stmt|;
return|return
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|p
argument_list|,
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|p
argument_list|)
operator|-
name|Integer
operator|.
name|parseInt
argument_list|(
name|depth
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns the commit root depth for the given revision. This method also      * takes previous documents into account.      *      * @param revision get the commit root depth for this revision.      * @return the depth or<code>null</code> if there is no commit root entry      *         for the given revision on this document or previous documents.      */
annotation|@
name|CheckForNull
specifier|private
name|String
name|getCommitRootDepth
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
comment|// check local map first
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|local
init|=
name|getLocalCommitRoot
argument_list|()
decl_stmt|;
name|String
name|depth
init|=
name|local
operator|.
name|get
argument_list|(
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|depth
operator|==
literal|null
condition|)
block|{
comment|// check previous
for|for
control|(
name|NodeDocument
name|prev
range|:
name|getPreviousDocs
argument_list|(
name|COMMIT_ROOT
argument_list|,
name|revision
argument_list|)
control|)
block|{
name|depth
operator|=
name|prev
operator|.
name|getCommitRootDepth
argument_list|(
name|revision
argument_list|)
expr_stmt|;
if|if
condition|(
name|depth
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|depth
return|;
block|}
comment|/**      * Returns<code>true</code> if the given revision      * {@link Utils#isCommitted(String)} in the revisions map (including      * revisions split off to previous documents) and is visible from the      *<code>readRevision</code>.      *      * @param revision  the revision to check.      * @param commitValue the commit value of the revision to check or      *<code>null</code> if unknown.      * @param readRevision the read revision.      * @return<code>true</code> if the revision is committed, otherwise      *<code>false</code>.      */
specifier|private
name|boolean
name|isCommitted
parameter_list|(
annotation|@
name|Nonnull
name|RevisionContext
name|context
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|,
annotation|@
name|Nullable
name|String
name|commitValue
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|readRevision
parameter_list|)
block|{
if|if
condition|(
name|commitValue
operator|==
literal|null
condition|)
block|{
name|commitValue
operator|=
name|getCommitValue
argument_list|(
name|revision
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|commitValue
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|Utils
operator|.
name|isCommitted
argument_list|(
name|commitValue
argument_list|)
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|getBranches
argument_list|()
operator|.
name|getBranch
argument_list|(
name|readRevision
argument_list|)
operator|==
literal|null
operator|&&
operator|!
name|readRevision
operator|.
name|isBranch
argument_list|()
condition|)
block|{
comment|// resolve commit revision
name|revision
operator|=
name|resolveCommitRevision
argument_list|(
name|revision
argument_list|,
name|commitValue
argument_list|)
expr_stmt|;
comment|// readRevision is not from a branch
comment|// compare resolved revision as is
return|return
operator|!
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|revision
argument_list|,
name|readRevision
argument_list|)
return|;
block|}
else|else
block|{
comment|// on same merged branch?
if|if
condition|(
name|commitValue
operator|.
name|equals
argument_list|(
name|getCommitValue
argument_list|(
name|readRevision
operator|.
name|asTrunkRevision
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
comment|// compare unresolved revision
return|return
operator|!
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|revision
argument_list|,
name|readRevision
argument_list|)
return|;
block|}
block|}
block|}
else|else
block|{
comment|// branch commit (not merged)
if|if
condition|(
name|Revision
operator|.
name|fromString
argument_list|(
name|commitValue
argument_list|)
operator|.
name|getClusterId
argument_list|()
operator|!=
name|context
operator|.
name|getClusterId
argument_list|()
condition|)
block|{
comment|// this is an unmerged branch commit from another cluster node,
comment|// hence never visible to us
return|return
literal|false
return|;
block|}
block|}
return|return
name|includeRevision
argument_list|(
name|context
argument_list|,
name|resolveCommitRevision
argument_list|(
name|revision
argument_list|,
name|commitValue
argument_list|)
argument_list|,
name|readRevision
argument_list|)
return|;
block|}
comment|/**      * Returns the commit value for the given<code>revision</code>.      *      * @param revision a revision.      * @return the commit value or<code>null</code> if the revision is unknown.      */
annotation|@
name|CheckForNull
specifier|private
name|String
name|getCommitValue
parameter_list|(
name|Revision
name|revision
parameter_list|)
block|{
name|String
name|value
init|=
name|getLocalRevisions
argument_list|()
operator|.
name|get
argument_list|(
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// check previous
for|for
control|(
name|NodeDocument
name|prev
range|:
name|getPreviousDocs
argument_list|(
name|REVISIONS
argument_list|,
name|revision
argument_list|)
control|)
block|{
name|value
operator|=
name|prev
operator|.
name|getCommitValue
argument_list|(
name|revision
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|value
return|;
block|}
specifier|private
specifier|static
name|boolean
name|includeRevision
parameter_list|(
name|RevisionContext
name|context
parameter_list|,
name|Revision
name|x
parameter_list|,
name|Revision
name|requestRevision
parameter_list|)
block|{
name|Branch
name|b
init|=
name|context
operator|.
name|getBranches
argument_list|()
operator|.
name|getBranch
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
comment|// only include if requested revision is also a branch revision
comment|// with a history including x
if|if
condition|(
name|b
operator|.
name|containsCommit
argument_list|(
name|requestRevision
argument_list|)
condition|)
block|{
comment|// in same branch, include if the same revision or
comment|// requestRevision is newer
return|return
name|x
operator|.
name|equalsIgnoreBranch
argument_list|(
name|requestRevision
argument_list|)
operator|||
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|requestRevision
argument_list|,
name|x
argument_list|)
return|;
block|}
comment|// not part of branch identified by requestedRevision
return|return
literal|false
return|;
block|}
comment|// assert: x is not a branch commit
name|b
operator|=
name|context
operator|.
name|getBranches
argument_list|()
operator|.
name|getBranch
argument_list|(
name|requestRevision
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
comment|// reset requestRevision to branch base revision to make
comment|// sure we don't include revisions committed after branch
comment|// was created
name|requestRevision
operator|=
name|b
operator|.
name|getBase
argument_list|(
name|requestRevision
argument_list|)
expr_stmt|;
block|}
return|return
name|context
operator|.
name|getRevisionComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|requestRevision
argument_list|,
name|x
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/**      * Get the latest property value that is larger or equal the min revision,      * and smaller or equal the readRevision revision. The returned value will      * provide the revision when the value was set between the {@code min} and      * {@code readRevision}. The returned value will have a {@code null} value      * contained if there is no valid change within the given range. In this      * case the associated revision is {@code min} or {@code readRevision} if      * no {@code min} is provided.      *      * @param valueMap the sorted revision-value map      * @param min the minimum revision (null meaning unlimited)      * @param readRevision the maximum revision      * @param validRevisions map of revision to commit value considered valid      *                       against the given readRevision.      * @param lastRevs to keep track of the most recent modification.      * @return the latest value from the {@code readRevision} point of view.      */
annotation|@
name|Nonnull
specifier|private
name|Value
name|getLatestValue
parameter_list|(
annotation|@
name|Nonnull
name|RevisionContext
name|context
parameter_list|,
annotation|@
name|Nonnull
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|valueMap
parameter_list|,
annotation|@
name|Nullable
name|Revision
name|min
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|readRevision
parameter_list|,
annotation|@
name|Nonnull
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|validRevisions
parameter_list|,
annotation|@
name|Nonnull
name|LastRevs
name|lastRevs
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|valueMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Revision
name|propRev
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|commitValue
init|=
name|validRevisions
operator|.
name|get
argument_list|(
name|propRev
argument_list|)
decl_stmt|;
if|if
condition|(
name|commitValue
operator|==
literal|null
condition|)
block|{
comment|// resolve revision
name|NodeDocument
name|commitRoot
init|=
name|getCommitRoot
argument_list|(
name|propRev
argument_list|)
decl_stmt|;
if|if
condition|(
name|commitRoot
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|commitValue
operator|=
name|commitRoot
operator|.
name|getCommitValue
argument_list|(
name|propRev
argument_list|)
expr_stmt|;
if|if
condition|(
name|commitValue
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
block|}
name|Revision
name|commitRev
init|=
name|resolveCommitRevision
argument_list|(
name|propRev
argument_list|,
name|commitValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|Utils
operator|.
name|isCommitted
argument_list|(
name|commitValue
argument_list|)
condition|)
block|{
name|lastRevs
operator|.
name|update
argument_list|(
name|commitRev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// branch commit
name|lastRevs
operator|.
name|updateBranch
argument_list|(
name|commitRev
operator|.
name|asBranchRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|min
operator|!=
literal|null
operator|&&
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|min
argument_list|,
name|commitRev
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|isValidRevision
argument_list|(
name|context
argument_list|,
name|propRev
argument_list|,
name|commitValue
argument_list|,
name|readRevision
argument_list|,
name|validRevisions
argument_list|)
condition|)
block|{
comment|// TODO: need to check older revisions as well?
return|return
operator|new
name|Value
argument_list|(
name|commitRev
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
name|Revision
name|r
init|=
name|min
operator|!=
literal|null
condition|?
name|min
else|:
name|readRevision
decl_stmt|;
return|return
operator|new
name|Value
argument_list|(
name|r
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPath
parameter_list|()
block|{
name|String
name|p
init|=
operator|(
name|String
operator|)
name|get
argument_list|(
name|PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
return|return
name|p
return|;
block|}
return|return
name|Utils
operator|.
name|getPathFromId
argument_list|(
name|getId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|getDeleted
parameter_list|()
block|{
return|return
name|ValueMap
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|DELETED
argument_list|)
return|;
block|}
specifier|public
name|String
name|asString
parameter_list|()
block|{
name|JsopWriter
name|json
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|toJson
argument_list|(
name|json
argument_list|,
name|data
argument_list|)
expr_stmt|;
return|return
name|json
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
name|void
name|toJson
parameter_list|(
name|JsopWriter
name|json
parameter_list|,
name|Map
argument_list|<
name|?
extends|extends
name|Object
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|?
extends|extends
name|Object
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|json
operator|.
name|key
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|json
operator|.
name|value
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|json
operator|.
name|value
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Long
condition|)
block|{
name|json
operator|.
name|value
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|json
operator|.
name|value
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Map
condition|)
block|{
name|json
operator|.
name|object
argument_list|()
expr_stmt|;
name|toJson
argument_list|(
name|json
argument_list|,
operator|(
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Revision
condition|)
block|{
name|json
operator|.
name|value
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|json
operator|.
name|value
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|NodeDocument
name|fromString
parameter_list|(
name|DocumentStore
name|store
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|JsopTokenizer
name|json
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
operator|new
name|NodeDocument
argument_list|(
name|store
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|json
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|END
argument_list|)
condition|)
block|{
break|break;
block|}
name|String
name|k
init|=
name|json
operator|.
name|readString
argument_list|()
decl_stmt|;
name|json
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|json
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|END
argument_list|)
condition|)
block|{
break|break;
block|}
name|doc
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|fromJson
argument_list|(
name|json
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
specifier|private
specifier|static
name|Object
name|fromJson
parameter_list|(
name|JsopTokenizer
name|json
parameter_list|)
block|{
switch|switch
condition|(
name|json
operator|.
name|read
argument_list|()
condition|)
block|{
case|case
name|JsopReader
operator|.
name|NULL
case|:
return|return
literal|null
return|;
case|case
name|JsopReader
operator|.
name|TRUE
case|:
return|return
literal|true
return|;
case|case
name|JsopReader
operator|.
name|FALSE
case|:
return|return
literal|false
return|;
case|case
name|JsopReader
operator|.
name|NUMBER
case|:
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|json
operator|.
name|getToken
argument_list|()
argument_list|)
return|;
case|case
name|JsopReader
operator|.
name|STRING
case|:
return|return
name|json
operator|.
name|getToken
argument_list|()
return|;
case|case
literal|'{'
case|:
name|TreeMap
argument_list|<
name|Revision
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|Revision
argument_list|,
name|Object
argument_list|>
argument_list|(
name|StableRevisionComparator
operator|.
name|REVERSE
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|json
operator|.
name|matches
argument_list|(
literal|'}'
argument_list|)
condition|)
block|{
break|break;
block|}
name|String
name|k
init|=
name|json
operator|.
name|readString
argument_list|()
decl_stmt|;
name|json
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Revision
operator|.
name|fromString
argument_list|(
name|k
argument_list|)
argument_list|,
name|fromJson
argument_list|(
name|json
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|json
operator|.
name|readRawValue
argument_list|()
argument_list|)
throw|;
block|}
comment|/**      * The list of children for a node. The list might be complete or not, in      * which case it only represents a block of children.      */
specifier|public
specifier|static
specifier|final
class|class
name|Children
implements|implements
name|CacheValue
implements|,
name|Cloneable
block|{
comment|/**          * The child node names, ordered as stored in DocumentStore.          */
name|ArrayList
argument_list|<
name|String
argument_list|>
name|childNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**          * Whether the list is complete (in which case there are no other          * children) or not.          */
name|boolean
name|isComplete
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|getMemory
parameter_list|()
block|{
name|int
name|size
init|=
literal|114
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|childNames
control|)
block|{
name|size
operator|+=
name|name
operator|.
name|length
argument_list|()
operator|*
literal|2
operator|+
literal|56
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Children
name|clone
parameter_list|()
block|{
try|try
block|{
name|Children
name|clone
init|=
operator|(
name|Children
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
name|clone
operator|.
name|childNames
operator|=
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|childNames
operator|.
name|clone
argument_list|()
expr_stmt|;
return|return
name|clone
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
specifier|public
name|String
name|asString
parameter_list|()
block|{
name|JsopWriter
name|json
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|isComplete
condition|)
block|{
name|json
operator|.
name|key
argument_list|(
literal|"isComplete"
argument_list|)
operator|.
name|value
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|childNames
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|json
operator|.
name|key
argument_list|(
literal|"children"
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|c
range|:
name|childNames
control|)
block|{
name|json
operator|.
name|value
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
return|return
name|json
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Children
name|fromString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|JsopTokenizer
name|json
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|Children
name|children
init|=
operator|new
name|Children
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|json
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|END
argument_list|)
condition|)
block|{
break|break;
block|}
name|String
name|k
init|=
name|json
operator|.
name|readString
argument_list|()
decl_stmt|;
name|json
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"isComplete"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|children
operator|.
name|isComplete
operator|=
name|json
operator|.
name|read
argument_list|()
operator|==
name|JsopReader
operator|.
name|TRUE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"children"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|json
operator|.
name|read
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|json
operator|.
name|matches
argument_list|(
literal|']'
argument_list|)
condition|)
block|{
break|break;
block|}
name|String
name|value
init|=
name|json
operator|.
name|readString
argument_list|()
decl_stmt|;
name|children
operator|.
name|childNames
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|json
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|json
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|END
argument_list|)
condition|)
block|{
break|break;
block|}
name|json
operator|.
name|read
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
return|return
name|children
return|;
block|}
block|}
comment|/**      * A property value / revision combination.      */
specifier|private
specifier|static
specifier|final
class|class
name|Value
block|{
specifier|final
name|Revision
name|revision
decl_stmt|;
comment|/**          * The value of a property at the given revision. A {@code null} value          * indicates the property was removed.          */
specifier|final
name|String
name|value
decl_stmt|;
name|Value
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|,
annotation|@
name|Nullable
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|revision
operator|=
name|checkNotNull
argument_list|(
name|revision
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

