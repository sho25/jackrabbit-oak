begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ImportUUIDBehavior
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * @see<a href="https://issues.apache.org/jira/browse/OAK-3930">OAK-3930</a>  */
end_comment

begin_class
specifier|public
class|class
name|ImportMvPropertyTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
name|ValueFactory
name|vf
decl_stmt|;
specifier|private
name|String
name|path
decl_stmt|;
specifier|private
name|String
name|targetPath
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|vf
operator|=
name|superuser
operator|.
name|getValueFactory
argument_list|()
expr_stmt|;
name|Node
name|node
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName4
argument_list|)
decl_stmt|;
name|path
operator|=
name|node
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|Node
name|n1
init|=
name|node
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
literal|"test:setProperty"
argument_list|)
decl_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
literal|"test:multiProperty"
argument_list|,
literal|"v1"
argument_list|)
expr_stmt|;
name|Node
name|n2
init|=
name|node
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|,
literal|"test:setProperty"
argument_list|)
decl_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
literal|"test:multiProperty"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"v1"
block|,
literal|"v2"
block|}
argument_list|)
expr_stmt|;
name|Node
name|n3
init|=
name|node
operator|.
name|addNode
argument_list|(
name|nodeName3
argument_list|,
literal|"test:setProperty"
argument_list|)
decl_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
literal|"test:multiProperty"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|targetPath
operator|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"target"
argument_list|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|private
name|InputStream
name|getImportStream
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|OutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|superuser
operator|.
name|exportSystemView
argument_list|(
name|path
argument_list|,
name|out
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|testSingleValues
parameter_list|()
throws|throws
name|Exception
block|{
name|superuser
operator|.
name|importXML
argument_list|(
name|targetPath
argument_list|,
name|getImportStream
argument_list|()
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|n
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|targetPath
argument_list|)
operator|.
name|getNode
argument_list|(
name|nodeName4
argument_list|)
decl_stmt|;
name|Property
name|p
init|=
name|n
operator|.
name|getNode
argument_list|(
name|nodeName1
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"test:multiProperty"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getDefinition
argument_list|()
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|Value
index|[]
block|{
name|vf
operator|.
name|createValue
argument_list|(
literal|"v1"
argument_list|)
block|}
argument_list|,
name|p
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMultiValues
parameter_list|()
throws|throws
name|Exception
block|{
name|superuser
operator|.
name|importXML
argument_list|(
name|targetPath
argument_list|,
name|getImportStream
argument_list|()
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|n
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|targetPath
argument_list|)
operator|.
name|getNode
argument_list|(
name|nodeName4
argument_list|)
decl_stmt|;
name|Property
name|p
init|=
name|n
operator|.
name|getNode
argument_list|(
name|nodeName2
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"test:multiProperty"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getDefinition
argument_list|()
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|Value
index|[]
name|expected
init|=
operator|new
name|Value
index|[]
block|{
name|vf
operator|.
name|createValue
argument_list|(
literal|"v1"
argument_list|)
block|,
name|vf
operator|.
name|createValue
argument_list|(
literal|"v2"
argument_list|)
block|}
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|p
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEmptyValues
parameter_list|()
throws|throws
name|Exception
block|{
name|superuser
operator|.
name|importXML
argument_list|(
name|targetPath
argument_list|,
name|getImportStream
argument_list|()
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|n
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|targetPath
argument_list|)
operator|.
name|getNode
argument_list|(
name|nodeName4
argument_list|)
decl_stmt|;
name|Property
name|p
init|=
name|n
operator|.
name|getNode
argument_list|(
name|nodeName3
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"test:multiProperty"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getDefinition
argument_list|()
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
name|p
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

