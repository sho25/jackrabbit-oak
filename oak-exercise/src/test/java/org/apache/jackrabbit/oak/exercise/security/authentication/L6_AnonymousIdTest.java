begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|authentication
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|GuestCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Authentication | User Management  * =============================================================================  *  * Title: Anonymous Id  * -----------------------------------------------------------------------------  *  * Goal:  * Understand that the ID of the anonymous user in the system is configurable  * and thus must not be treated as constant (hardcoding) in an application (Sling|Granite|CQ).  *  * Exercises:  *  * - {@link #testAnonymousID()}  *   Login as anonymous again and test the resulting userID  *   Question: What is the expected value of {@link javax.jcr.Session#getUserID()}  *   upon guest login? Explain why.  *  * - {@link #testDifferentAnonymousID()}  *   Define the configuration settings that will create you an Oak repository instance  *   that has a different anonymous ID.  *  *  * Additional Exercise  * -----------------------------------------------------------------------------  *  * In Adobe Granite exists an Osgi service that allows you to retrive the ID  * of the 'anonymous' user without hardcoding.  *  * - Find the service and test how you can obtain the anonymous ID.  *  *</pre>  *  * @see javax.jcr.GuestCredentials  */
end_comment

begin_class
specifier|public
class|class
name|L6_AnonymousIdTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|ContentSession
name|testSession
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|testSession
operator|!=
literal|null
condition|)
block|{
name|testSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnonymousID
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|LoginException
block|{
name|testSession
operator|=
name|login
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|anonymousID
init|=
name|testSession
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
decl_stmt|;
comment|// EXERCISE: what value do you expect for 'anonymousID'? explain why. is there a solution without hardcoding?
name|String
name|expectedID
init|=
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedID
argument_list|,
name|anonymousID
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: chang this test-configuration for testDifferentAnonymousID()
annotation|@
name|Override
specifier|protected
name|ConfigurationParameters
name|getSecurityConfigParameters
parameter_list|()
block|{
comment|// EXERCISE: un-comment for 'testDifferentAnonymousID'
comment|//        ConfigurationParameters userConfig = ConfigurationParameters.of(UserConstants.PARAM_ANONYMOUS_ID, "differentAnonymousId");
comment|//        return ConfigurationParameters.of(UserConfiguration.NAME, userConfig);
return|return
name|ConfigurationParameters
operator|.
name|EMPTY
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDifferentAnonymousID
parameter_list|()
throws|throws
name|Exception
block|{
comment|// EXERCISE : use built-in oak configuration settings to have a different anonymous ID -> uncomment the configuration parameters in 'getSecurityConfigParameters' above
name|testSession
operator|=
name|login
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedId
init|=
literal|null
decl_stmt|;
comment|// EXERCISE: write the expected ID
name|assertEquals
argument_list|(
name|expectedId
argument_list|,
name|testSession
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

