begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|command
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|MongoNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_comment
comment|/**  * {@code Command} for {@code MongoMicroKernel#nodeExists(String, String)}  */
end_comment

begin_class
specifier|public
class|class
name|NodeExistsCommand
extends|extends
name|BaseCommand
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|private
specifier|final
name|Long
name|revisionId
decl_stmt|;
specifier|private
name|String
name|branchId
decl_stmt|;
specifier|private
name|Node
name|parentNode
decl_stmt|;
specifier|private
name|String
name|path
decl_stmt|;
comment|/**      * Constructs a new {@code NodeExistsCommandMongo}.      *      * @param nodeStore Node store.      * @param path The root path of the nodes to get.      * @param revisionId The revision id or null.      */
specifier|public
name|NodeExistsCommand
parameter_list|(
name|MongoNodeStore
name|nodeStore
parameter_list|,
name|String
name|path
parameter_list|,
name|Long
name|revisionId
parameter_list|)
block|{
name|super
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|revisionId
operator|=
name|revisionId
expr_stmt|;
block|}
comment|/**      * Sets the branchId for the command.      *      * @param branchId Branch id.      */
specifier|public
name|void
name|setBranchId
parameter_list|(
name|String
name|branchId
parameter_list|)
block|{
name|this
operator|.
name|branchId
operator|=
name|branchId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Check that all the paths up to the root actually exist.
return|return
name|pathExists
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|pathExists
parameter_list|()
throws|throws
name|Exception
block|{
while|while
condition|(
operator|!
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|readParentNode
argument_list|(
name|revisionId
argument_list|,
name|branchId
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentNode
operator|==
literal|null
operator|||
operator|!
name|childExists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|path
operator|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|readParentNode
parameter_list|(
name|Long
name|revisionId
parameter_list|,
name|String
name|branchId
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|parentPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|GetNodesCommand
name|command
init|=
operator|new
name|GetNodesCommand
argument_list|(
name|nodeStore
argument_list|,
name|parentPath
argument_list|,
name|revisionId
argument_list|)
decl_stmt|;
name|command
operator|.
name|setBranchId
argument_list|(
name|branchId
argument_list|)
expr_stmt|;
name|parentNode
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|childExists
parameter_list|()
block|{
name|String
name|childName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|parentNode
operator|.
name|getChildNodeEntry
argument_list|(
name|childName
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
end_class

end_unit

