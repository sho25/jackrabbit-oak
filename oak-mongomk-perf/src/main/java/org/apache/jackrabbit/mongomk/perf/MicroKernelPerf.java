begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|perf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_class
specifier|public
class|class
name|MicroKernelPerf
block|{
specifier|private
specifier|static
name|Config
name|config
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|masterMode
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|prepareEnvironment
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|configLog4J
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|readConfig
argument_list|()
expr_stmt|;
name|evalCommandLineOptions
argument_list|(
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|prepareEnvironment
condition|)
block|{
name|PrepareEnvironment
name|prepare
init|=
operator|new
name|PrepareEnvironment
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|prepare
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|masterMode
condition|)
block|{
name|MicroKernelPerfMaster
name|master
init|=
operator|new
name|MicroKernelPerfMaster
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|master
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MicroKernelPerfClient
name|client
init|=
operator|new
name|MicroKernelPerfClient
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|configLog4J
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|is
operator|=
name|MicroKernelPerfClient
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/log4j.cfg"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
specifier|static
name|void
name|evalCommandLineOptions
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Option
name|log4jOption
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"log4j-path"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"path"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"path to a log4j config file"
argument_list|)
operator|.
name|create
argument_list|(
literal|"log4j"
argument_list|)
decl_stmt|;
name|Option
name|masterOption
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"master-mode"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"starts this in master mode"
argument_list|)
operator|.
name|create
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|Option
name|prepareOption
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"prepare-environment"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"resets the environment before executing"
argument_list|)
operator|.
name|create
argument_list|(
literal|"prep"
argument_list|)
decl_stmt|;
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|log4jOption
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|masterOption
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|prepareOption
argument_list|)
expr_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
name|CommandLine
name|line
init|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
name|log4jOption
operator|.
name|getOpt
argument_list|()
argument_list|)
condition|)
block|{
name|configLog4J
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
name|log4jOption
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
name|masterOption
operator|.
name|getOpt
argument_list|()
argument_list|)
condition|)
block|{
name|masterMode
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
name|prepareOption
operator|.
name|getOpt
argument_list|()
argument_list|)
condition|)
block|{
name|prepareEnvironment
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|readConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|MicroKernelPerfClient
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/config.cfg"
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|config
operator|=
operator|new
name|Config
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

