begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * {@code NodeStore} implementations which supports batching changes  * to the content tree up until a certain limit is reached and write them  * down to the Microkernel in a single operation. The batch size is controlled  * through {@link #PURGE_LIMIT} which is the number of characters on a commit  * (i.e. jsop string).  */
end_comment

begin_class
specifier|public
class|class
name|KernelNodeStore
extends|extends
name|AbstractNodeStore
block|{
comment|/**      * Maximal size of size of a commit (number of characters of the corresponding      * jsop string). When the limit is reached, changes kept in memory are written      * back to the private branch in the Microkernel.      */
specifier|private
specifier|static
specifier|final
name|int
name|PURGE_LIMIT
init|=
literal|1024
decl_stmt|;
comment|// TODO make configurable?
comment|/**      * The {@link MicroKernel} instance used to store the content tree.      */
specifier|private
specifier|final
name|MicroKernel
name|kernel
decl_stmt|;
comment|/**      * Value factory backed by the {@link #kernel} instance.      */
specifier|private
specifier|final
name|CoreValueFactory
name|valueFactory
decl_stmt|;
comment|/**      * State of the current root node.      */
specifier|private
name|KernelNodeState
name|root
decl_stmt|;
specifier|public
name|KernelNodeStore
parameter_list|(
name|MicroKernel
name|kernel
parameter_list|)
block|{
name|this
operator|.
name|kernel
operator|=
name|kernel
expr_stmt|;
name|this
operator|.
name|valueFactory
operator|=
operator|new
name|CoreValueFactoryImpl
argument_list|(
name|kernel
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|=
operator|new
name|KernelNodeState
argument_list|(
name|kernel
argument_list|,
name|valueFactory
argument_list|,
literal|"/"
argument_list|,
name|kernel
operator|.
name|getHeadRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|NodeState
name|getRoot
parameter_list|()
block|{
name|String
name|revision
init|=
name|kernel
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|revision
operator|.
name|equals
argument_list|(
name|root
operator|.
name|getRevision
argument_list|()
argument_list|)
condition|)
block|{
name|root
operator|=
operator|new
name|KernelNodeState
argument_list|(
name|kernel
argument_list|,
name|valueFactory
argument_list|,
literal|"/"
argument_list|,
name|kernel
operator|.
name|getHeadRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|root
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeStateBuilder
name|getBuilder
parameter_list|(
name|NodeState
name|base
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|base
operator|instanceof
name|KernelNodeState
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Alien node state"
argument_list|)
throw|;
block|}
name|KernelNodeState
name|kernelNodeState
init|=
operator|(
name|KernelNodeState
operator|)
name|base
decl_stmt|;
name|String
name|branchRevision
init|=
name|kernel
operator|.
name|branch
argument_list|(
name|kernelNodeState
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|kernelNodeState
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|KernelNodeState
name|branchRoot
init|=
operator|new
name|KernelNodeState
argument_list|(
name|kernel
argument_list|,
name|valueFactory
argument_list|,
name|path
argument_list|,
name|branchRevision
argument_list|)
decl_stmt|;
return|return
name|KernelNodeStateBuilder
operator|.
name|create
argument_list|(
operator|new
name|NodeStateBuilderContext
argument_list|(
name|branchRoot
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|apply
parameter_list|(
name|NodeStateBuilder
name|builder
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
operator|!
operator|(
name|builder
operator|instanceof
name|KernelNodeStateBuilder
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Alien builder"
argument_list|)
throw|;
block|}
name|KernelNodeStateBuilder
name|kernelNodeStateBuilder
init|=
operator|(
name|KernelNodeStateBuilder
operator|)
name|builder
decl_stmt|;
name|kernelNodeStateBuilder
operator|.
name|getContext
argument_list|()
operator|.
name|applyPendingChanges
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CoreValueFactory
name|getValueFactory
parameter_list|()
block|{
return|return
name|valueFactory
return|;
block|}
comment|//------------------------------------------------------------< internal>---
comment|/**      * {@code NodeStateBuilderContext} keeps track of all changes to a      * {@code KernelNodeStateBuilder} which have not yet been written back to the      * Microkernel. It transforms the tree rooted at {@link #root} to reflect these      * changes and writes these changes back to the Microkernel when      * {@link KernelNodeStore#PURGE_LIMIT} is exceeded.      */
class|class
name|NodeStateBuilderContext
block|{
comment|/** Path of the root of the whole subtree */
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
comment|/** Root of the subtree */
specifier|private
name|NodeState
name|root
decl_stmt|;
comment|/** Current branch revision */
specifier|private
name|String
name|revision
decl_stmt|;
comment|/** Pending changes */
specifier|private
name|StringBuilder
name|jsop
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|NodeStateBuilderContext
parameter_list|(
name|KernelNodeState
name|root
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|root
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|revision
operator|=
name|root
operator|.
name|getRevision
argument_list|()
expr_stmt|;
block|}
comment|/**          * @return path of the root of the whole subtree          */
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
comment|/**          * Get the node state located at {@code path}          * @param path  path relative to {@link #root}          * @return  node state at {@code path} or {@code null} if none.          */
name|NodeState
name|getNodeState
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|NodeState
name|state
init|=
name|root
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|state
operator|=
name|state
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|state
return|;
block|}
comment|/**          * Add a new, empty node state at {@code path}. The changes to the subtree          * are reflected in {@link #root}.          * @param relPath  path relative to {@link #root}. All but the last element          *                 must resolve to existing node states.          */
name|void
name|addNode
parameter_list|(
name|String
name|relPath
parameter_list|)
block|{
name|jsop
operator|.
name|append
argument_list|(
literal|"+\""
argument_list|)
operator|.
name|append
argument_list|(
name|relPath
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":{}"
argument_list|)
expr_stmt|;
name|root
operator|=
name|addNode
argument_list|(
name|root
argument_list|,
name|EMPTY_STATE
argument_list|,
name|PathUtils
operator|.
name|elements
argument_list|(
name|relPath
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|purgeOnLimit
argument_list|()
expr_stmt|;
block|}
comment|/**          * Add a new node state at {@code path}. The changes to the subtree are reflected          * in {@link #root}.          * @param node     node state to add          * @param relPath  path relative to {@link #root}. All but the last element          *                 must resolve to existing node states.          */
name|void
name|addNode
parameter_list|(
name|NodeState
name|node
parameter_list|,
name|String
name|relPath
parameter_list|)
block|{
name|buildJsop
argument_list|(
name|relPath
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|root
operator|=
name|addNode
argument_list|(
name|root
argument_list|,
name|node
argument_list|,
name|PathUtils
operator|.
name|elements
argument_list|(
name|relPath
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|purgeOnLimit
argument_list|()
expr_stmt|;
block|}
comment|/**          * Remove the node state at {@code path}. The changes to the subtree are reflected          * in {@link #root}.          * @param relPath  path relative to {@link #root}. All elements must resolve to          *                 existing node states.          */
name|void
name|removeNode
parameter_list|(
name|String
name|relPath
parameter_list|)
block|{
name|jsop
operator|.
name|append
argument_list|(
literal|"-\""
argument_list|)
operator|.
name|append
argument_list|(
name|relPath
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|root
operator|=
name|removeNode
argument_list|(
name|root
argument_list|,
name|PathUtils
operator|.
name|elements
argument_list|(
name|relPath
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|purgeOnLimit
argument_list|()
expr_stmt|;
block|}
comment|/**          * Add a new property state. The changes to the subtree are reflected in {@link #root}.          * @param property     property state to add          * @param parentPath   path to the parent node state relative to {@link #root}.          *                     All elements must resolve to existing node states.          */
name|void
name|addProperty
parameter_list|(
name|PropertyState
name|property
parameter_list|,
name|String
name|parentPath
parameter_list|)
block|{
name|String
name|path
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|parentPath
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|property
operator|.
name|isArray
argument_list|()
condition|?
name|CoreValueMapper
operator|.
name|toJsonArray
argument_list|(
name|property
operator|.
name|getValues
argument_list|()
argument_list|)
else|:
name|CoreValueMapper
operator|.
name|toJsonValue
argument_list|(
name|property
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|jsop
operator|.
name|append
argument_list|(
literal|"^\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":"
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|root
operator|=
name|addProperty
argument_list|(
name|root
argument_list|,
name|property
argument_list|,
name|PathUtils
operator|.
name|elements
argument_list|(
name|parentPath
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|purgeOnLimit
argument_list|()
expr_stmt|;
block|}
comment|/**          * Set an existing property state. The changes to the subtree are reflected in          * {@link #root}.          * @param property     property state to set          * @param parentPath   path to the parent node state relative to {@link #root}.          *                     All elements must resolve to existing node states.          */
name|void
name|setProperty
parameter_list|(
name|PropertyState
name|property
parameter_list|,
name|String
name|parentPath
parameter_list|)
block|{
name|String
name|path
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|parentPath
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|property
operator|.
name|isArray
argument_list|()
condition|?
name|CoreValueMapper
operator|.
name|toJsonArray
argument_list|(
name|property
operator|.
name|getValues
argument_list|()
argument_list|)
else|:
name|CoreValueMapper
operator|.
name|toJsonValue
argument_list|(
name|property
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|jsop
operator|.
name|append
argument_list|(
literal|"^\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":"
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|root
operator|=
name|setProperty
argument_list|(
name|root
argument_list|,
name|property
argument_list|,
name|PathUtils
operator|.
name|elements
argument_list|(
name|parentPath
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|purgeOnLimit
argument_list|()
expr_stmt|;
block|}
comment|/**          * Remove an existing property state. The changes to the subtree are reflected in          * {@link #root}.          * @param relPath   path to the property state relative to {@link #root}. All          *                  elements must resolve to existing node states.          */
name|void
name|removeProperty
parameter_list|(
name|String
name|relPath
parameter_list|)
block|{
name|jsop
operator|.
name|append
argument_list|(
literal|"^\""
argument_list|)
operator|.
name|append
argument_list|(
name|relPath
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":null"
argument_list|)
expr_stmt|;
name|root
operator|=
name|removeProperty
argument_list|(
name|root
argument_list|,
name|PathUtils
operator|.
name|elements
argument_list|(
name|relPath
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|purgeOnLimit
argument_list|()
expr_stmt|;
block|}
comment|/**          * Move the node from {@code sourcePath} to {@code destPath}. The changes to          * the subtree are reflected in {@link #root}.          * @param sourcePath  path to the node to move. All elements must resolve to          *                    existing node states.          * @param destPath    path to the new node. All but the last element must resolve          *                    to existing node states.          */
name|void
name|moveNode
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|destPath
parameter_list|)
block|{
name|jsop
operator|.
name|append
argument_list|(
literal|">\""
argument_list|)
operator|.
name|append
argument_list|(
name|sourcePath
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":\""
argument_list|)
operator|.
name|append
argument_list|(
name|destPath
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|NodeState
name|moveNode
init|=
name|getChildNode
argument_list|(
name|sourcePath
argument_list|)
decl_stmt|;
name|root
operator|=
name|removeNode
argument_list|(
name|root
argument_list|,
name|PathUtils
operator|.
name|elements
argument_list|(
name|sourcePath
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|=
name|addNode
argument_list|(
name|root
argument_list|,
name|moveNode
argument_list|,
name|PathUtils
operator|.
name|elements
argument_list|(
name|destPath
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|purgeOnLimit
argument_list|()
expr_stmt|;
block|}
comment|/**          * Copy the node from {@code sourcePath} to {@code destPath}. The changes to          * the subtree are reflected in {@link #root}.          * @param sourcePath  path to the node to copy. All elements must resolve to          *                    existing node states.          * @param destPath    path to the new node. All but the last element must resolve          *                    to existing node states.          */
name|void
name|copyNode
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|destPath
parameter_list|)
block|{
name|jsop
operator|.
name|append
argument_list|(
literal|"*\""
argument_list|)
operator|.
name|append
argument_list|(
name|sourcePath
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":\""
argument_list|)
operator|.
name|append
argument_list|(
name|destPath
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|NodeState
name|copyNode
init|=
name|getChildNode
argument_list|(
name|sourcePath
argument_list|)
decl_stmt|;
name|root
operator|=
name|addNode
argument_list|(
name|root
argument_list|,
name|copyNode
argument_list|,
name|PathUtils
operator|.
name|elements
argument_list|(
name|destPath
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|purgeOnLimit
argument_list|()
expr_stmt|;
block|}
comment|/**          * Merge back into trunk          * @throws CommitFailedException  if merging fails          */
name|void
name|applyPendingChanges
parameter_list|()
throws|throws
name|CommitFailedException
block|{
try|try
block|{
name|purgePendingChanges
argument_list|()
expr_stmt|;
name|kernel
operator|.
name|merge
argument_list|(
name|revision
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|revision
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|//------------------------------------------------------------< private>---
comment|/**          * Purge all changes kept in memory to the private branch if          * {@link KernelNodeStore#PURGE_LIMIT} is exceeded.          * @see #purgePendingChanges()          */
specifier|private
name|void
name|purgeOnLimit
parameter_list|()
block|{
if|if
condition|(
name|jsop
operator|.
name|length
argument_list|()
operator|>
name|PURGE_LIMIT
condition|)
block|{
name|purgePendingChanges
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          * Purge all changes kept in memory to the private branch.          */
specifier|private
name|void
name|purgePendingChanges
parameter_list|()
block|{
if|if
condition|(
name|revision
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Branch has been merged already"
argument_list|)
throw|;
block|}
if|if
condition|(
name|jsop
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|revision
operator|=
name|kernel
operator|.
name|commit
argument_list|(
name|path
argument_list|,
name|jsop
operator|.
name|toString
argument_list|()
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|root
operator|=
operator|new
name|KernelNodeState
argument_list|(
name|kernel
argument_list|,
name|valueFactory
argument_list|,
name|path
argument_list|,
name|revision
argument_list|)
expr_stmt|;
name|jsop
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          * Build a jsop statement for adding a node state at a given path.          * @param path        path where {@code nodeState} should be added.          * @param nodeState   node state to add.          */
specifier|private
name|void
name|buildJsop
parameter_list|(
name|String
name|path
parameter_list|,
name|NodeState
name|nodeState
parameter_list|)
block|{
name|jsop
operator|.
name|append
argument_list|(
literal|"+\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":{}"
argument_list|)
expr_stmt|;
for|for
control|(
name|PropertyState
name|property
range|:
name|nodeState
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|targetPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|property
operator|.
name|isArray
argument_list|()
condition|?
name|CoreValueMapper
operator|.
name|toJsonArray
argument_list|(
name|property
operator|.
name|getValues
argument_list|()
argument_list|)
else|:
name|CoreValueMapper
operator|.
name|toJsonValue
argument_list|(
name|property
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|jsop
operator|.
name|append
argument_list|(
literal|"^\""
argument_list|)
operator|.
name|append
argument_list|(
name|targetPath
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":"
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ChildNodeEntry
name|child
range|:
name|nodeState
operator|.
name|getChildNodeEntries
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
control|)
block|{
name|String
name|targetPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|child
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|buildJsop
argument_list|(
name|targetPath
argument_list|,
name|child
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Construct a new {@code NodeState} where {@code node} is added to          * {@code parent} at {@code path}.          * @param parent  parent where {@code node} should be added          * @param node    node state to add          * @param path    path from {@code parent} where {@code node} should be added          * @return  a new {@code NodeState} instance with the added node state.          */
specifier|private
name|NodeState
name|addNode
parameter_list|(
name|NodeState
name|parent
parameter_list|,
name|NodeState
name|node
parameter_list|,
name|Iterator
argument_list|<
name|String
argument_list|>
name|path
parameter_list|)
block|{
name|String
name|name
init|=
name|path
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|setChildNode
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|addNode
argument_list|(
name|parent
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|,
name|node
argument_list|,
name|path
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|addChildNode
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|node
argument_list|)
return|;
block|}
block|}
comment|/**          * Construct a new {@code NodeState} where the node state at {@code path} is          * removed from {@code parent}.          * @param parent  parent from which the node state should be removed          * @param path    path from {@code parent} for the node state to remove          * @return  a new {@code NodeState} instance with the remove node state.          */
specifier|private
name|NodeState
name|removeNode
parameter_list|(
name|NodeState
name|parent
parameter_list|,
name|Iterator
argument_list|<
name|String
argument_list|>
name|path
parameter_list|)
block|{
name|String
name|name
init|=
name|path
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|setChildNode
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|removeNode
argument_list|(
name|parent
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|,
name|path
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|removeChildNode
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
comment|/**          * Construct a new {@code NodeState} where {@code property} is added to          * {@code parent} at {@code parentPath}.          * @param parent      parent where {@code node} should be added          * @param property    property state to add          * @param parentPath  path from {@code parent} where {@code property} should be          *                    added          * @return  a new {@code NodeState} instance with the added property state.          */
specifier|private
name|NodeState
name|addProperty
parameter_list|(
name|NodeState
name|parent
parameter_list|,
name|PropertyState
name|property
parameter_list|,
name|Iterator
argument_list|<
name|String
argument_list|>
name|parentPath
parameter_list|)
block|{
if|if
condition|(
name|parentPath
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|parentPath
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|setChildNode
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|addProperty
argument_list|(
name|parent
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|,
name|property
argument_list|,
name|parentPath
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|addChildProperty
argument_list|(
name|parent
argument_list|,
name|property
argument_list|)
return|;
block|}
block|}
comment|/**          * Construct a new {@code NodeState} where {@code property} is set to          * {@code parent} at {@code parentPath}.          * @param parent      parent where {@code node} should be set          * @param property    property state to set          * @param parentPath  path from {@code parent} where {@code property} should be          *                    set          * @return  a new {@code NodeState} instance with the new property state.          */
specifier|private
name|NodeState
name|setProperty
parameter_list|(
name|NodeState
name|parent
parameter_list|,
name|PropertyState
name|property
parameter_list|,
name|Iterator
argument_list|<
name|String
argument_list|>
name|parentPath
parameter_list|)
block|{
if|if
condition|(
name|parentPath
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|parentPath
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|setChildNode
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|setProperty
argument_list|(
name|parent
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|,
name|property
argument_list|,
name|parentPath
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|setChildProperty
argument_list|(
name|parent
argument_list|,
name|property
argument_list|)
return|;
block|}
block|}
comment|/**          * Construct a new {@code NodeState} where the property state at {@code path} is          * removed from {@code parent}.          * @param parent  parent from which the property state should be removed          * @param path    path from {@code parent} for the property state to remove          * @return  a new {@code NodeState} instance with the remove property state.          */
specifier|private
name|NodeState
name|removeProperty
parameter_list|(
name|NodeState
name|parent
parameter_list|,
name|Iterator
argument_list|<
name|String
argument_list|>
name|path
parameter_list|)
block|{
name|String
name|name
init|=
name|path
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|setChildNode
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|removeProperty
argument_list|(
name|parent
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|,
name|path
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|removeChildProperty
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
comment|/**          * Get the node state located at {@code relPath} from {@link #root}.          * @param relPath  relative path          * @return  child node at {@code relPath} or {@code null} if none.          */
specifier|private
name|NodeState
name|getChildNode
parameter_list|(
name|String
name|relPath
parameter_list|)
block|{
name|NodeState
name|state
init|=
name|root
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|relPath
argument_list|)
control|)
block|{
name|state
operator|=
name|state
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|state
return|;
block|}
specifier|private
specifier|final
name|NodeState
name|EMPTY_STATE
init|=
operator|new
name|AbstractNodeState
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPropertyCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|PropertyState
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
comment|/**          * Construct a new {@code NodeState} from {@code parent} with {@code node} added          * as new child with name {@code childName}.          * @param parent          * @param childName          * @param node          * @return          */
specifier|private
name|NodeState
name|addChildNode
parameter_list|(
specifier|final
name|NodeState
name|parent
parameter_list|,
specifier|final
name|String
name|childName
parameter_list|,
specifier|final
name|NodeState
name|node
parameter_list|)
block|{
return|return
operator|new
name|AbstractNodeState
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPropertyCount
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getPropertyCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getProperties
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|childName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
name|node
else|:
name|parent
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|()
block|{
return|return
literal|1
operator|+
name|parent
operator|.
name|getChildNodeCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|(
specifier|final
name|long
name|offset
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|>=
name|getChildNodeCount
argument_list|()
condition|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|count
operator|==
operator|-
literal|1
operator|||
name|offset
operator|+
name|count
operator|>
name|getChildNodeCount
argument_list|()
condition|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|chain
argument_list|(
name|parent
operator|.
name|getChildNodeEntries
argument_list|(
name|offset
argument_list|,
name|count
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|,
name|Iterators
operator|.
name|singleton
argument_list|(
operator|new
name|KernelChildNodeEntry
argument_list|(
name|childName
argument_list|,
name|node
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
name|parent
operator|.
name|getChildNodeEntries
argument_list|(
name|offset
argument_list|,
name|count
argument_list|)
return|;
block|}
block|}
block|}
return|;
block|}
comment|/**          * Construct a new {@code NodeState} from {@code parent} with child node state          * {@code childName} replaced with {@code node}.          * @param parent          * @param childName          * @param node          * @return          */
specifier|private
name|NodeState
name|setChildNode
parameter_list|(
specifier|final
name|NodeState
name|parent
parameter_list|,
specifier|final
name|String
name|childName
parameter_list|,
specifier|final
name|NodeState
name|node
parameter_list|)
block|{
return|return
operator|new
name|AbstractNodeState
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPropertyCount
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getPropertyCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getProperties
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|childName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
name|node
else|:
name|parent
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getChildNodeCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|(
specifier|final
name|long
name|offset
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|map
argument_list|(
name|parent
operator|.
name|getChildNodeEntries
argument_list|(
name|offset
argument_list|,
name|count
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Function1
argument_list|<
name|ChildNodeEntry
argument_list|,
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ChildNodeEntry
name|apply
parameter_list|(
name|ChildNodeEntry
name|cne
parameter_list|)
block|{
return|return
name|childName
operator|.
name|equals
argument_list|(
name|cne
operator|.
name|getName
argument_list|()
argument_list|)
condition|?
operator|new
name|KernelChildNodeEntry
argument_list|(
name|childName
argument_list|,
name|node
argument_list|)
else|:
name|cne
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/**          * Construct a new {@code NodeState} from {@code parent} with child node state          * {@code childName} removed.          * @param parent          * @param childName          * @return          */
specifier|private
name|NodeState
name|removeChildNode
parameter_list|(
specifier|final
name|NodeState
name|parent
parameter_list|,
specifier|final
name|String
name|childName
parameter_list|)
block|{
return|return
operator|new
name|AbstractNodeState
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPropertyCount
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getPropertyCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getProperties
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|childName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|null
else|:
name|parent
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getChildNodeCount
argument_list|()
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|(
specifier|final
name|long
name|offset
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|filter
argument_list|(
name|parent
operator|.
name|getChildNodeEntries
argument_list|(
name|offset
argument_list|,
name|count
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|,
comment|// FIXME offsetting doesn't compose with filtering
operator|new
name|Predicate
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|ChildNodeEntry
name|cne
parameter_list|)
block|{
return|return
operator|!
name|childName
operator|.
name|equals
argument_list|(
name|cne
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/**          * Construct a new {@code NodeState} from {@code parent} with {@code property}          * added.          * @param parent          * @param property          * @return          */
specifier|private
name|NodeState
name|addChildProperty
parameter_list|(
specifier|final
name|NodeState
name|parent
parameter_list|,
specifier|final
name|PropertyState
name|property
parameter_list|)
block|{
return|return
operator|new
name|AbstractNodeState
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|property
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
name|property
else|:
name|parent
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPropertyCount
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getPropertyCount
argument_list|()
operator|+
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|PropertyState
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|chain
argument_list|(
name|parent
operator|.
name|getProperties
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|Iterators
operator|.
name|singleton
argument_list|(
name|property
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getChildNodeCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getChildNodeEntries
argument_list|(
name|offset
argument_list|,
name|count
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**          * Construct a new {@code NodeState} from {@code parent} with {@code property}          * replaced.          * @param parent          * @param property          * @return          */
specifier|private
name|NodeState
name|setChildProperty
parameter_list|(
specifier|final
name|NodeState
name|parent
parameter_list|,
specifier|final
name|PropertyState
name|property
parameter_list|)
block|{
return|return
operator|new
name|AbstractNodeState
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|property
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
name|property
else|:
name|parent
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPropertyCount
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getPropertyCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|PropertyState
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|map
argument_list|(
name|parent
operator|.
name|getProperties
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Function1
argument_list|<
name|PropertyState
argument_list|,
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PropertyState
name|apply
parameter_list|(
name|PropertyState
name|state
parameter_list|)
block|{
return|return
name|property
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|state
operator|.
name|getName
argument_list|()
argument_list|)
condition|?
name|property
else|:
name|state
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getChildNodeCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getChildNodeEntries
argument_list|(
name|offset
argument_list|,
name|count
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**          * Construct a new {@code NodeState} from {@code parent} with {@code propertyName}          * removed.          * @param parent          * @param propertyName          * @return          */
specifier|private
name|NodeState
name|removeChildProperty
parameter_list|(
specifier|final
name|NodeState
name|parent
parameter_list|,
specifier|final
name|String
name|propertyName
parameter_list|)
block|{
return|return
operator|new
name|AbstractNodeState
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|propertyName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|null
else|:
name|parent
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPropertyCount
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getPropertyCount
argument_list|()
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|PropertyState
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|filter
argument_list|(
name|parent
operator|.
name|getProperties
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|PropertyState
name|prop
parameter_list|)
block|{
return|return
operator|!
name|propertyName
operator|.
name|equals
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getChildNodeCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getChildNodeEntries
argument_list|(
name|offset
argument_list|,
name|count
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

