begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexCommitCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdateCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdateProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|IndexDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|writer
operator|.
name|LuceneIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|writer
operator|.
name|LuceneIndexWriterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContent
operator|.
name|INITIAL_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsInAnyOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
specifier|public
class|class
name|LuceneIndexEditor2Test
block|{
specifier|private
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
specifier|private
name|NodeState
name|before
init|=
name|root
decl_stmt|;
specifier|private
name|IndexUpdateCallback
name|updateCallback
init|=
name|mock
argument_list|(
name|IndexUpdateCallback
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ExtractedTextCache
name|extractedTextCache
init|=
operator|new
name|ExtractedTextCache
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|TestIndexingContext
name|indexingContext
init|=
operator|new
name|TestIndexingContext
argument_list|()
decl_stmt|;
specifier|private
name|TestWriterFactory
name|writerFactory
init|=
operator|new
name|TestWriterFactory
argument_list|()
decl_stmt|;
specifier|private
name|TestPropertyUpdateCallback
name|propCallback
init|=
operator|new
name|TestPropertyUpdateCallback
argument_list|()
decl_stmt|;
specifier|private
name|TestWriter
name|writer
init|=
operator|new
name|TestWriter
argument_list|()
decl_stmt|;
specifier|private
name|String
name|indexPath
init|=
literal|"/oak:index/fooIndex"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|basics
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinitionBuilder
name|defnb
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|NodeState
name|defnState
init|=
name|defnb
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnState
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|LuceneIndexEditorContext
name|ctx
init|=
name|newContext
argument_list|(
name|defnState
operator|.
name|builder
argument_list|()
argument_list|,
name|defn
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|EditorHook
name|hook
init|=
name|createHook
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|updateBefore
argument_list|(
name|defnb
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|before
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|hook
operator|.
name|processCommit
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|writer
operator|.
name|docs
operator|.
name|keySet
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|simplePropertyUpdateCallback
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinitionBuilder
name|defnb
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|NodeState
name|defnState
init|=
name|defnb
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnState
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|LuceneIndexEditorContext
name|ctx
init|=
name|newContext
argument_list|(
name|defnState
operator|.
name|builder
argument_list|()
argument_list|,
name|defn
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setPropertyUpdateCallback
argument_list|(
name|propCallback
argument_list|)
expr_stmt|;
name|EditorHook
name|hook
init|=
name|createHook
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|updateBefore
argument_list|(
name|defnb
argument_list|)
expr_stmt|;
comment|//Property added
name|NodeBuilder
name|builder
init|=
name|before
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo2"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|before
operator|=
name|hook
operator|.
name|processCommit
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|propCallback
operator|.
name|state
operator|.
name|assertState
argument_list|(
literal|"/a"
argument_list|,
literal|"foo"
argument_list|,
name|UpdateState
operator|.
name|ADDED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|propCallback
operator|.
name|invocationCount
argument_list|)
expr_stmt|;
name|propCallback
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//Property updated
name|builder
operator|=
name|before
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar2"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo2"
argument_list|,
literal|"bar2"
argument_list|)
expr_stmt|;
name|before
operator|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|propCallback
operator|.
name|state
operator|.
name|assertState
argument_list|(
literal|"/a"
argument_list|,
literal|"foo"
argument_list|,
name|UpdateState
operator|.
name|UPDATED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|propCallback
operator|.
name|invocationCount
argument_list|)
expr_stmt|;
name|propCallback
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//Property deleted
name|builder
operator|=
name|before
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|removeProperty
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|removeProperty
argument_list|(
literal|"foo2"
argument_list|)
expr_stmt|;
name|before
operator|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|propCallback
operator|.
name|state
operator|.
name|assertState
argument_list|(
literal|"/a"
argument_list|,
literal|"foo"
argument_list|,
name|UpdateState
operator|.
name|DELETED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|propCallback
operator|.
name|invocationCount
argument_list|)
expr_stmt|;
name|propCallback
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|relativeProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinitionBuilder
name|defnb
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|defnb
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"jcr:content/metadata/foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|defnb
operator|.
name|aggregateRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|include
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|NodeState
name|defnState
init|=
name|defnb
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|defnState
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|LuceneIndexEditorContext
name|ctx
init|=
name|newContext
argument_list|(
name|defnState
operator|.
name|builder
argument_list|()
argument_list|,
name|defn
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setPropertyUpdateCallback
argument_list|(
name|propCallback
argument_list|)
expr_stmt|;
name|EditorHook
name|hook
init|=
name|createHook
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|updateBefore
argument_list|(
name|defnb
argument_list|)
expr_stmt|;
comment|//Property added
name|NodeBuilder
name|builder
init|=
name|before
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"jcr:content"
argument_list|)
operator|.
name|child
argument_list|(
literal|"metadata"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo2"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|before
operator|=
name|hook
operator|.
name|processCommit
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|propCallback
operator|.
name|state
operator|.
name|assertState
argument_list|(
literal|"/a"
argument_list|,
literal|"jcr:content/metadata/foo"
argument_list|,
name|UpdateState
operator|.
name|ADDED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|propCallback
operator|.
name|invocationCount
argument_list|)
expr_stmt|;
name|propCallback
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//Property updated
name|builder
operator|=
name|before
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"jcr:content"
argument_list|)
operator|.
name|child
argument_list|(
literal|"metadata"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar2"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo2"
argument_list|,
literal|"bar2"
argument_list|)
expr_stmt|;
name|before
operator|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|propCallback
operator|.
name|state
operator|.
name|assertState
argument_list|(
literal|"/a"
argument_list|,
literal|"jcr:content/metadata/foo"
argument_list|,
name|UpdateState
operator|.
name|UPDATED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|propCallback
operator|.
name|invocationCount
argument_list|)
expr_stmt|;
name|propCallback
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//Property deleted
name|builder
operator|=
name|before
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"jcr:content"
argument_list|)
operator|.
name|child
argument_list|(
literal|"metadata"
argument_list|)
operator|.
name|removeProperty
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|removeProperty
argument_list|(
literal|"foo2"
argument_list|)
expr_stmt|;
name|before
operator|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|propCallback
operator|.
name|state
operator|.
name|assertState
argument_list|(
literal|"/a"
argument_list|,
literal|"jcr:content/metadata/foo"
argument_list|,
name|UpdateState
operator|.
name|DELETED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|propCallback
operator|.
name|invocationCount
argument_list|)
expr_stmt|;
name|propCallback
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|updateBefore
parameter_list|(
name|IndexDefinitionBuilder
name|defnb
parameter_list|)
block|{
name|NodeBuilder
name|builder
init|=
name|before
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|cb
init|=
name|TestUtil
operator|.
name|child
argument_list|(
name|builder
argument_list|,
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|indexPath
argument_list|)
argument_list|)
decl_stmt|;
name|cb
operator|.
name|setChildNode
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|indexPath
argument_list|)
argument_list|,
name|defnb
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
block|}
specifier|private
name|EditorHook
name|createHook
parameter_list|(
name|LuceneIndexEditorContext
name|context
parameter_list|)
block|{
name|IndexEditorProvider
name|provider
init|=
operator|new
name|IndexEditorProvider
argument_list|()
block|{
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|Editor
name|getIndexEditor
parameter_list|(
annotation|@
name|Nonnull
name|String
name|type
parameter_list|,
annotation|@
name|Nonnull
name|NodeBuilder
name|definition
parameter_list|,
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|,
annotation|@
name|Nonnull
name|IndexUpdateCallback
name|callback
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
literal|"lucene"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
operator|new
name|LuceneIndexEditor
argument_list|(
name|context
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|String
name|async
init|=
name|context
operator|.
name|isAsyncIndexing
argument_list|()
condition|?
literal|"async"
else|:
literal|null
decl_stmt|;
name|IndexUpdateProvider
name|updateProvider
init|=
operator|new
name|IndexUpdateProvider
argument_list|(
name|provider
argument_list|,
name|async
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|new
name|EditorHook
argument_list|(
name|updateProvider
argument_list|)
return|;
block|}
specifier|private
name|LuceneIndexEditorContext
name|newContext
parameter_list|(
name|NodeBuilder
name|defnBuilder
parameter_list|,
name|IndexDefinition
name|defn
parameter_list|,
name|boolean
name|asyncIndex
parameter_list|)
block|{
return|return
operator|new
name|LuceneIndexEditorContext
argument_list|(
name|root
argument_list|,
name|defnBuilder
argument_list|,
name|defn
argument_list|,
name|updateCallback
argument_list|,
name|writerFactory
argument_list|,
name|extractedTextCache
argument_list|,
literal|null
argument_list|,
name|indexingContext
argument_list|,
name|asyncIndex
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|TestPropertyUpdateCallback
implements|implements
name|PropertyUpdateCallback
block|{
name|int
name|invocationCount
decl_stmt|;
name|CallbackState
name|state
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|propertyUpdated
parameter_list|(
name|String
name|nodePath
parameter_list|,
name|String
name|propertyRelativePath
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|,
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|nodePath
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|propertyRelativePath
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|pd
argument_list|)
expr_stmt|;
if|if
condition|(
name|before
operator|==
literal|null
operator|&&
name|after
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Both states cannot be null at same time"
argument_list|)
expr_stmt|;
block|}
name|state
operator|=
operator|new
name|CallbackState
argument_list|(
name|nodePath
argument_list|,
name|propertyRelativePath
argument_list|,
name|pd
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|invocationCount
operator|++
expr_stmt|;
block|}
name|void
name|reset
parameter_list|()
block|{
name|state
operator|=
literal|null
expr_stmt|;
name|invocationCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
enum|enum
name|UpdateState
block|{
name|ADDED
block|,
name|UPDATED
block|,
name|DELETED
block|}
specifier|private
specifier|static
class|class
name|CallbackState
block|{
specifier|final
name|String
name|nodePath
decl_stmt|;
specifier|final
name|String
name|propertyPath
decl_stmt|;
specifier|final
name|PropertyDefinition
name|pd
decl_stmt|;
specifier|final
name|PropertyState
name|before
decl_stmt|;
specifier|final
name|PropertyState
name|after
decl_stmt|;
specifier|public
name|CallbackState
parameter_list|(
name|String
name|nodePath
parameter_list|,
name|String
name|propertyPath
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|,
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|this
operator|.
name|nodePath
operator|=
name|nodePath
expr_stmt|;
name|this
operator|.
name|propertyPath
operator|=
name|propertyPath
expr_stmt|;
name|this
operator|.
name|pd
operator|=
name|pd
expr_stmt|;
name|this
operator|.
name|before
operator|=
name|before
expr_stmt|;
name|this
operator|.
name|after
operator|=
name|after
expr_stmt|;
block|}
specifier|public
name|void
name|assertState
parameter_list|(
name|String
name|expectedPath
parameter_list|,
name|String
name|expectedName
parameter_list|,
name|UpdateState
name|us
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|nodePath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedName
argument_list|,
name|propertyPath
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|us
condition|)
block|{
case|case
name|ADDED
case|:
name|assertNotNull
argument_list|(
name|after
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|before
argument_list|)
expr_stmt|;
break|break;
case|case
name|UPDATED
case|:
name|assertNotNull
argument_list|(
name|after
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|before
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETED
case|:
name|assertNull
argument_list|(
name|after
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|before
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|private
class|class
name|TestWriterFactory
implements|implements
name|LuceneIndexWriterFactory
block|{
annotation|@
name|Override
specifier|public
name|LuceneIndexWriter
name|newInstance
parameter_list|(
name|IndexDefinition
name|definition
parameter_list|,
name|NodeBuilder
name|definitionBuilder
parameter_list|,
name|boolean
name|reindex
parameter_list|)
block|{
return|return
name|writer
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TestWriter
implements|implements
name|LuceneIndexWriter
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|deletedPaths
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
argument_list|>
name|docs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|closed
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|updateDocument
parameter_list|(
name|String
name|path
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|docs
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteDocuments
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|deletedPaths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|close
parameter_list|(
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|closed
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
specifier|private
class|class
name|TestIndexingContext
implements|implements
name|IndexingContext
block|{
name|CommitInfo
name|info
init|=
name|CommitInfo
operator|.
name|EMPTY
decl_stmt|;
name|boolean
name|reindexing
decl_stmt|;
name|boolean
name|async
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|getIndexPath
parameter_list|()
block|{
return|return
name|indexPath
return|;
block|}
annotation|@
name|Override
specifier|public
name|CommitInfo
name|getCommitInfo
parameter_list|()
block|{
return|return
name|info
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReindexing
parameter_list|()
block|{
return|return
name|reindexing
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAsync
parameter_list|()
block|{
return|return
name|async
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|indexUpdateFailed
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{          }
annotation|@
name|Override
specifier|public
name|void
name|registerIndexCommitCallback
parameter_list|(
name|IndexCommitCallback
name|callback
parameter_list|)
block|{          }
block|}
block|}
end_class

end_unit

