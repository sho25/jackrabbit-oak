begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ComparisonChain
import|;
end_import

begin_class
class|class
name|MapLeaf
extends|extends
name|MapRecord
block|{
name|MapLeaf
parameter_list|(
name|Segment
name|segment
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|super
argument_list|(
name|segment
argument_list|,
name|offset
argument_list|,
name|size
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|size
operator|!=
literal|0
operator|||
name|level
operator|==
literal|0
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|size
operator|<=
name|BUCKETS_PER_LEVEL
operator|||
name|level
operator|==
name|MAX_NUMBER_OF_LEVELS
argument_list|)
expr_stmt|;
block|}
name|MapLeaf
parameter_list|(
name|Segment
name|segment
parameter_list|,
name|RecordId
name|id
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|super
argument_list|(
name|segment
argument_list|,
name|id
argument_list|,
name|size
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|size
operator|!=
literal|0
operator|||
name|level
operator|==
literal|0
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|size
operator|<=
name|BUCKETS_PER_LEVEL
operator|||
name|level
operator|==
name|MAX_NUMBER_OF_LEVELS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|MapEntry
name|getEntry
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|checkNotNull
argument_list|(
name|key
argument_list|)
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|int
name|d
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
operator|&&
name|d
operator|<
literal|0
condition|;
name|i
operator|++
control|)
block|{
name|d
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|segment
operator|.
name|readInt
argument_list|(
name|getOffset
argument_list|(
literal|4
operator|+
name|i
operator|*
literal|4
argument_list|)
argument_list|)
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|hash
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|==
literal|0
condition|)
block|{
name|RecordId
name|keyId
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|4
operator|+
name|size
operator|*
literal|4
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|=
name|segment
operator|.
name|readString
argument_list|(
name|keyId
argument_list|)
operator|.
name|compareTo
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|==
literal|0
condition|)
block|{
name|RecordId
name|valueId
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|4
operator|+
name|size
operator|*
literal|4
argument_list|,
name|size
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|MapEntry
argument_list|(
name|segment
argument_list|,
name|key
argument_list|,
name|keyId
argument_list|,
name|valueId
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
name|Iterable
argument_list|<
name|String
argument_list|>
name|getKeys
parameter_list|()
block|{
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|RecordId
index|[]
name|ids
init|=
operator|new
name|RecordId
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|ids
index|[
name|i
index|]
operator|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|4
operator|+
name|size
operator|*
literal|4
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|keys
init|=
operator|new
name|String
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|keys
index|[
name|i
index|]
operator|=
name|segment
operator|.
name|readString
argument_list|(
name|ids
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|keys
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Iterable
argument_list|<
name|MapEntry
argument_list|>
name|getEntries
parameter_list|()
block|{
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|RecordId
index|[]
name|keys
init|=
operator|new
name|RecordId
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|keys
index|[
name|i
index|]
operator|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|4
operator|+
name|size
operator|*
literal|4
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RecordId
index|[]
name|values
init|=
operator|new
name|RecordId
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|4
operator|+
name|size
operator|*
literal|4
argument_list|,
name|size
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MapEntry
index|[]
name|entries
init|=
operator|new
name|MapEntry
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|segment
operator|.
name|readString
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|entries
index|[
name|i
index|]
operator|=
operator|new
name|MapEntry
argument_list|(
name|segment
argument_list|,
name|name
argument_list|,
name|keys
index|[
name|i
index|]
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|entries
argument_list|)
return|;
block|}
annotation|@
name|Override
name|boolean
name|compare
parameter_list|(
name|MapRecord
name|base
parameter_list|,
name|MapDiff
name|diff
parameter_list|)
block|{
if|if
condition|(
name|base
operator|instanceof
name|MapLeaf
condition|)
block|{
return|return
name|compare
argument_list|(
operator|(
name|MapLeaf
operator|)
name|base
argument_list|,
name|this
argument_list|,
name|diff
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|compare
argument_list|(
name|base
argument_list|,
name|diff
argument_list|)
return|;
block|}
block|}
comment|//-----------------------------------------------------------< private>--
specifier|private
specifier|static
name|boolean
name|compare
parameter_list|(
name|MapLeaf
name|before
parameter_list|,
name|MapLeaf
name|after
parameter_list|,
name|MapDiff
name|diff
parameter_list|)
block|{
name|Iterator
argument_list|<
name|MapEntry
argument_list|>
name|beforeEntries
init|=
name|before
operator|.
name|getEntries
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|MapEntry
argument_list|>
name|afterEntries
init|=
name|after
operator|.
name|getEntries
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|MapEntry
name|beforeEntry
init|=
name|nextOrNull
argument_list|(
name|beforeEntries
argument_list|)
decl_stmt|;
name|MapEntry
name|afterEntry
init|=
name|nextOrNull
argument_list|(
name|afterEntries
argument_list|)
decl_stmt|;
while|while
condition|(
name|beforeEntry
operator|!=
literal|null
operator|||
name|afterEntry
operator|!=
literal|null
condition|)
block|{
name|int
name|d
init|=
name|compare
argument_list|(
name|beforeEntry
argument_list|,
name|afterEntry
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|<
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|diff
operator|.
name|entryDeleted
argument_list|(
name|beforeEntry
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|beforeEntry
operator|=
name|nextOrNull
argument_list|(
name|beforeEntries
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|diff
operator|.
name|entryChanged
argument_list|(
name|beforeEntry
argument_list|,
name|afterEntry
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|beforeEntry
operator|=
name|nextOrNull
argument_list|(
name|beforeEntries
argument_list|)
expr_stmt|;
name|afterEntry
operator|=
name|nextOrNull
argument_list|(
name|afterEntries
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|diff
operator|.
name|entryAdded
argument_list|(
name|afterEntry
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|afterEntry
operator|=
name|nextOrNull
argument_list|(
name|afterEntries
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|int
name|compare
parameter_list|(
name|MapEntry
name|before
parameter_list|,
name|MapEntry
name|after
parameter_list|)
block|{
if|if
condition|(
name|before
operator|==
literal|null
condition|)
block|{
comment|// A null value signifies the end of the list of entries,
comment|// which is why the return value here is a bit counter-intuitive
comment|// (null> non-null). The idea is to make a virtual end-of-list
comment|// sentinel value appear greater than any normal value.
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|after
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
comment|// see above
block|}
else|else
block|{
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compare
argument_list|(
name|before
operator|.
name|getHash
argument_list|()
argument_list|,
name|after
operator|.
name|getHash
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|,
name|after
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
name|MapEntry
name|nextOrNull
parameter_list|(
name|Iterator
argument_list|<
name|MapEntry
argument_list|>
name|iterator
parameter_list|)
block|{
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

