begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|AbstractBlobTest
block|{
specifier|private
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|blobComparisonBasedOnContentIdentity
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|data
init|=
name|bytes
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|Blob
name|a
init|=
operator|new
name|TestBlob
argument_list|(
name|data
argument_list|,
literal|"id1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Blob
name|b
init|=
operator|new
name|TestBlob
argument_list|(
name|data
argument_list|,
literal|"id1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|AbstractBlob
operator|.
name|equal
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Blob
name|a2
init|=
operator|new
name|TestBlob
argument_list|(
name|data
argument_list|,
literal|"id1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Blob
name|b2
init|=
operator|new
name|TestBlob
argument_list|(
name|data
argument_list|,
literal|"id2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Blobs with different id but same content should match"
argument_list|,
name|AbstractBlob
operator|.
name|equal
argument_list|(
name|a2
argument_list|,
name|b2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|a2
operator|.
name|isInlined
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|b2
operator|.
name|isInlined
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|blobComparisonBasedOnLength
parameter_list|()
throws|throws
name|Exception
block|{
name|Blob
name|a
init|=
operator|new
name|TestBlob
argument_list|(
name|bytes
argument_list|(
literal|100
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Blob
name|b
init|=
operator|new
name|TestBlob
argument_list|(
name|bytes
argument_list|(
literal|50
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Blob comparison should not fallback on content if lengths not same"
argument_list|,
name|AbstractBlob
operator|.
name|equal
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|bytes
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|rnd
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|private
specifier|static
class|class
name|TestBlob
extends|extends
name|ArrayBasedBlob
block|{
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|allowAccessToContent
decl_stmt|;
specifier|public
name|TestBlob
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|String
name|id
parameter_list|,
name|boolean
name|allowAccessToContent
parameter_list|)
block|{
name|super
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|allowAccessToContent
operator|=
name|allowAccessToContent
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentIdentity
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|InputStream
name|getNewStream
parameter_list|()
block|{
name|checkState
argument_list|(
name|allowAccessToContent
argument_list|,
literal|"Cannot access the stream"
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getNewStream
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

