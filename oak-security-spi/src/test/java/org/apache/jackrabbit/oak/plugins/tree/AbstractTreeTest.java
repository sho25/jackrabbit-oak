begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|withSettings
import|;
end_import

begin_class
specifier|public
class|class
name|AbstractTreeTest
block|{
specifier|static
specifier|final
name|String
name|CHILD_PATH
init|=
literal|"/z/child"
decl_stmt|;
specifier|static
specifier|final
name|String
name|STRING_VALUE
init|=
literal|"value"
decl_stmt|;
specifier|static
specifier|final
name|long
name|LONG_VALUE
init|=
literal|1
decl_stmt|;
name|Tree
name|rootTree
decl_stmt|;
name|Tree
name|nonExisting
decl_stmt|;
name|Tree
name|z
decl_stmt|;
name|Tree
name|child
decl_stmt|;
name|Root
name|root
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|rootTree
operator|=
name|mockTree
argument_list|(
literal|"/"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_REP_ROOT
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rootTree
operator|.
name|hasProperty
argument_list|(
literal|"p"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rootTree
operator|.
name|getProperty
argument_list|(
literal|"p"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"p"
argument_list|,
name|LONG_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|nonExisting
operator|=
name|mockTree
argument_list|(
literal|"/nonExisting"
argument_list|,
name|rootTree
argument_list|,
literal|false
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|Tree
name|x
init|=
name|mockTree
argument_list|(
literal|"/x"
argument_list|,
name|rootTree
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|z
operator|=
name|mockTree
argument_list|(
literal|"/z"
argument_list|,
name|rootTree
argument_list|,
literal|true
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|child
operator|=
name|mockTree
argument_list|(
literal|"/z/child"
argument_list|,
name|z
argument_list|,
literal|true
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|child
operator|.
name|hasProperty
argument_list|(
literal|"p"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|child
operator|.
name|getProperty
argument_list|(
literal|"p"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"p"
argument_list|,
name|STRING_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|child
operator|.
name|hasProperty
argument_list|(
literal|"pp"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PropertyState
name|pp
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"pp"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"v1"
argument_list|,
literal|"v2"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|child
operator|.
name|getProperty
argument_list|(
literal|"pp"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pp
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|child
operator|.
name|hasProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|child
operator|.
name|hasProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PropertyState
name|mixinNames
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|JcrConstants
operator|.
name|MIX_LOCKABLE
argument_list|,
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|child
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mixinNames
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|z
operator|.
name|getChild
argument_list|(
literal|"child"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rootTree
operator|.
name|getChild
argument_list|(
literal|"z"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|z
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rootTree
operator|.
name|getChild
argument_list|(
literal|"x"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rootTree
operator|.
name|getChild
argument_list|(
literal|"nonExisting"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nonExisting
argument_list|)
expr_stmt|;
name|root
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rootTree
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Tree
name|mockTree
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|exists
parameter_list|)
block|{
name|Tree
name|parent
init|=
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|?
literal|null
else|:
name|mockTree
argument_list|(
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|path
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|mockTree
argument_list|(
name|path
argument_list|,
name|parent
argument_list|,
name|exists
argument_list|)
return|;
block|}
specifier|public
name|Tree
name|mockTree
parameter_list|(
name|String
name|path
parameter_list|,
name|Tree
name|parent
parameter_list|,
name|boolean
name|exists
parameter_list|)
block|{
return|return
name|mockTree
argument_list|(
name|path
argument_list|,
name|parent
argument_list|,
name|exists
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|public
name|Tree
name|mockTree
parameter_list|(
name|String
name|path
parameter_list|,
name|Tree
name|parent
parameter_list|,
name|boolean
name|exists
parameter_list|,
name|String
name|primaryType
parameter_list|)
block|{
name|Tree
name|t
init|=
name|mockTree
argument_list|(
name|path
argument_list|,
name|parent
argument_list|,
name|exists
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|t
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|primaryType
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
specifier|public
name|Tree
name|mockTree
parameter_list|(
name|String
name|path
parameter_list|,
name|Tree
name|parent
parameter_list|,
name|boolean
name|exists
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|interfaces
parameter_list|)
block|{
name|Tree
name|t
decl_stmt|;
if|if
condition|(
name|interfaces
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|t
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|,
name|withSettings
argument_list|()
operator|.
name|extraInterfaces
argument_list|(
name|interfaces
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|t
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|when
argument_list|(
name|t
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|t
operator|.
name|isRoot
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|when
argument_list|(
name|t
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|t
operator|.
name|isRoot
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|t
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|exists
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|t
operator|.
name|hasProperty
argument_list|(
literal|"nonExisting"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|t
operator|.
name|hasChild
argument_list|(
literal|"nonExisting"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|t
operator|.
name|getChild
argument_list|(
literal|"nonExisting"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nonExisting
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|t
operator|.
name|remove
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|UnsupportedOperationException
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
end_class

end_unit

