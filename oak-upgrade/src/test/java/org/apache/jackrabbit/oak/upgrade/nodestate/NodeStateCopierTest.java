begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|nodestate
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
operator|.
name|createProperty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|util
operator|.
name|NodeStateTestUtils
operator|.
name|commit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|util
operator|.
name|NodeStateTestUtils
operator|.
name|create
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|util
operator|.
name|NodeStateTestUtils
operator|.
name|createNodeStoreWithContent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|util
operator|.
name|NodeStateTestUtils
operator|.
name|expectDifference
import|;
end_import

begin_class
specifier|public
class|class
name|NodeStateCopierTest
block|{
specifier|private
specifier|final
name|PropertyState
name|primaryType
init|=
name|createProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|shouldMergeIdenticalContent
parameter_list|()
throws|throws
name|CommitFailedException
block|{
specifier|final
name|NodeStore
name|source
init|=
name|createPrefilledNodeStore
argument_list|()
decl_stmt|;
specifier|final
name|NodeStore
name|target
init|=
name|createPrefilledNodeStore
argument_list|()
decl_stmt|;
specifier|final
name|NodeState
name|before
init|=
name|target
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|NodeStateCopier
operator|.
name|copyNodeStore
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
expr_stmt|;
specifier|final
name|NodeState
name|after
init|=
name|target
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|expectDifference
argument_list|()
operator|.
name|strict
argument_list|()
operator|.
name|verify
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|expectDifference
argument_list|()
operator|.
name|strict
argument_list|()
operator|.
name|verify
argument_list|(
name|source
operator|.
name|getRoot
argument_list|()
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
specifier|private
name|NodeStore
name|createPrefilledNodeStore
parameter_list|()
throws|throws
name|CommitFailedException
block|{
specifier|final
name|NodeStore
name|store
init|=
name|createNodeStoreWithContent
argument_list|()
decl_stmt|;
specifier|final
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|create
argument_list|(
name|builder
argument_list|,
literal|"/excluded"
argument_list|)
expr_stmt|;
name|create
argument_list|(
name|builder
argument_list|,
literal|"/a"
argument_list|,
name|primaryType
argument_list|,
name|createProperty
argument_list|(
literal|"name"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|create
argument_list|(
name|builder
argument_list|,
literal|"/a/b"
argument_list|,
name|primaryType
argument_list|,
name|createProperty
argument_list|(
literal|"name"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|create
argument_list|(
name|builder
argument_list|,
literal|"/a/b/excluded"
argument_list|)
expr_stmt|;
name|create
argument_list|(
name|builder
argument_list|,
literal|"/a/b/c"
argument_list|,
name|primaryType
argument_list|,
name|createProperty
argument_list|(
literal|"name"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|create
argument_list|(
name|builder
argument_list|,
literal|"/a/b/c/d"
argument_list|,
name|primaryType
argument_list|)
expr_stmt|;
name|create
argument_list|(
name|builder
argument_list|,
literal|"/a/b/c/e"
argument_list|,
name|primaryType
argument_list|)
expr_stmt|;
name|create
argument_list|(
name|builder
argument_list|,
literal|"/a/b/c/f"
argument_list|,
name|primaryType
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
return|return
name|store
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldRespectMergePaths
parameter_list|()
throws|throws
name|CommitFailedException
block|{
specifier|final
name|NodeStore
name|source
init|=
name|createNodeStoreWithContent
argument_list|(
literal|"/content/foo/en"
argument_list|,
literal|"/content/bar/en"
argument_list|)
decl_stmt|;
specifier|final
name|NodeStore
name|target
init|=
name|createNodeStoreWithContent
argument_list|(
literal|"/content/foo/de"
argument_list|)
decl_stmt|;
specifier|final
name|NodeBuilder
name|builder
init|=
name|target
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeStateCopier
operator|.
name|copyNodeState
argument_list|(
name|source
operator|.
name|getRoot
argument_list|()
argument_list|,
name|builder
argument_list|,
literal|"/"
argument_list|,
name|of
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|target
argument_list|,
name|builder
argument_list|)
expr_stmt|;
specifier|final
name|NodeState
name|after
init|=
name|target
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|expectDifference
argument_list|()
operator|.
name|strict
argument_list|()
operator|.
name|childNodeAdded
argument_list|(
literal|"/content/foo/de"
argument_list|)
operator|.
name|childNodeChanged
argument_list|(
literal|"/content"
argument_list|,
literal|"/content/foo"
argument_list|)
operator|.
name|verify
argument_list|(
name|source
operator|.
name|getRoot
argument_list|()
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldDeleteExistingNodes
parameter_list|()
throws|throws
name|CommitFailedException
block|{
specifier|final
name|NodeStore
name|source
init|=
name|createNodeStoreWithContent
argument_list|(
literal|"/content/foo"
argument_list|)
decl_stmt|;
specifier|final
name|NodeStore
name|target
init|=
name|createNodeStoreWithContent
argument_list|(
literal|"/content/bar"
argument_list|)
decl_stmt|;
specifier|final
name|NodeState
name|before
init|=
name|target
operator|.
name|getRoot
argument_list|()
decl_stmt|;
specifier|final
name|NodeBuilder
name|builder
init|=
name|before
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeStateCopier
operator|.
name|copyNodeState
argument_list|(
name|source
operator|.
name|getRoot
argument_list|()
argument_list|,
name|builder
argument_list|,
literal|"/"
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|target
argument_list|,
name|builder
argument_list|)
expr_stmt|;
specifier|final
name|NodeState
name|after
init|=
name|target
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|expectDifference
argument_list|()
operator|.
name|strict
argument_list|()
operator|.
name|childNodeAdded
argument_list|(
literal|"/content/foo"
argument_list|)
operator|.
name|childNodeChanged
argument_list|(
literal|"/content"
argument_list|)
operator|.
name|childNodeDeleted
argument_list|(
literal|"/content/bar"
argument_list|)
operator|.
name|verify
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldDeleteExistingPropertyIfMissingInSource
parameter_list|()
throws|throws
name|CommitFailedException
block|{
specifier|final
name|NodeStore
name|source
init|=
name|createNodeStoreWithContent
argument_list|(
literal|"/a"
argument_list|)
decl_stmt|;
specifier|final
name|NodeStore
name|target
init|=
name|createNodeStoreWithContent
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|target
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|create
argument_list|(
name|builder
argument_list|,
literal|"/a"
argument_list|,
name|primaryType
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|target
argument_list|,
name|builder
argument_list|)
expr_stmt|;
specifier|final
name|NodeState
name|before
init|=
name|target
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|builder
operator|=
name|before
operator|.
name|builder
argument_list|()
expr_stmt|;
name|NodeStateCopier
operator|.
name|copyNodeState
argument_list|(
name|source
operator|.
name|getRoot
argument_list|()
argument_list|,
name|builder
argument_list|,
literal|"/"
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|target
argument_list|,
name|builder
argument_list|)
expr_stmt|;
specifier|final
name|NodeState
name|after
init|=
name|target
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|expectDifference
argument_list|()
operator|.
name|strict
argument_list|()
operator|.
name|propertyDeleted
argument_list|(
literal|"/a/jcr:primaryType"
argument_list|)
operator|.
name|childNodeChanged
argument_list|(
literal|"/a"
argument_list|)
operator|.
name|verify
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldNotDeleteExistingNodesIfMerged
parameter_list|()
throws|throws
name|CommitFailedException
block|{
specifier|final
name|NodeStore
name|source
init|=
name|createNodeStoreWithContent
argument_list|(
literal|"/content/foo"
argument_list|)
decl_stmt|;
specifier|final
name|NodeStore
name|target
init|=
name|createNodeStoreWithContent
argument_list|(
literal|"/content/bar"
argument_list|)
decl_stmt|;
specifier|final
name|NodeState
name|before
init|=
name|target
operator|.
name|getRoot
argument_list|()
decl_stmt|;
specifier|final
name|NodeBuilder
name|builder
init|=
name|before
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeStateCopier
operator|.
name|copyNodeState
argument_list|(
name|source
operator|.
name|getRoot
argument_list|()
argument_list|,
name|builder
argument_list|,
literal|"/"
argument_list|,
name|of
argument_list|(
literal|"/content/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|target
argument_list|,
name|builder
argument_list|)
expr_stmt|;
specifier|final
name|NodeState
name|after
init|=
name|target
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|expectDifference
argument_list|()
operator|.
name|strict
argument_list|()
operator|.
name|childNodeAdded
argument_list|(
literal|"/content/foo"
argument_list|)
operator|.
name|childNodeChanged
argument_list|(
literal|"/content"
argument_list|)
operator|.
name|verify
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldNotDeleteExistingNodesIfDescendantsOfMerged
parameter_list|()
throws|throws
name|CommitFailedException
block|{
specifier|final
name|NodeStore
name|source
init|=
name|createNodeStoreWithContent
argument_list|(
literal|"/content/foo"
argument_list|)
decl_stmt|;
specifier|final
name|NodeStore
name|target
init|=
name|createNodeStoreWithContent
argument_list|(
literal|"/content/bar"
argument_list|)
decl_stmt|;
specifier|final
name|NodeState
name|before
init|=
name|target
operator|.
name|getRoot
argument_list|()
decl_stmt|;
specifier|final
name|NodeBuilder
name|builder
init|=
name|before
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeStateCopier
operator|.
name|copyNodeState
argument_list|(
name|source
operator|.
name|getRoot
argument_list|()
argument_list|,
name|builder
argument_list|,
literal|"/"
argument_list|,
name|of
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|target
argument_list|,
name|builder
argument_list|)
expr_stmt|;
specifier|final
name|NodeState
name|after
init|=
name|target
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|expectDifference
argument_list|()
operator|.
name|strict
argument_list|()
operator|.
name|childNodeAdded
argument_list|(
literal|"/content/foo"
argument_list|)
operator|.
name|childNodeChanged
argument_list|(
literal|"/content"
argument_list|)
operator|.
name|verify
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldIgnoreNonMatchingMergePaths
parameter_list|()
throws|throws
name|CommitFailedException
block|{
specifier|final
name|NodeStore
name|source
init|=
name|createNodeStoreWithContent
argument_list|(
literal|"/content/foo"
argument_list|)
decl_stmt|;
specifier|final
name|NodeStore
name|target
init|=
name|createNodeStoreWithContent
argument_list|(
literal|"/content/bar"
argument_list|)
decl_stmt|;
specifier|final
name|NodeState
name|before
init|=
name|target
operator|.
name|getRoot
argument_list|()
decl_stmt|;
specifier|final
name|NodeBuilder
name|builder
init|=
name|before
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeStateCopier
operator|.
name|copyNodeState
argument_list|(
name|source
operator|.
name|getRoot
argument_list|()
argument_list|,
name|builder
argument_list|,
literal|"/"
argument_list|,
name|of
argument_list|(
literal|"/con"
argument_list|)
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|target
argument_list|,
name|builder
argument_list|)
expr_stmt|;
specifier|final
name|NodeState
name|after
init|=
name|target
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|expectDifference
argument_list|()
operator|.
name|strict
argument_list|()
operator|.
name|childNodeAdded
argument_list|(
literal|"/content/foo"
argument_list|)
operator|.
name|childNodeChanged
argument_list|(
literal|"/content"
argument_list|)
operator|.
name|childNodeDeleted
argument_list|(
literal|"/content/bar"
argument_list|)
operator|.
name|verify
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

