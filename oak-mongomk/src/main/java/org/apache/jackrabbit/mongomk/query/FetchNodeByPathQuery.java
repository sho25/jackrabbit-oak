begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|MongoConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|model
operator|.
name|NodeMongo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|QueryBuilder
import|;
end_import

begin_comment
comment|/**  * An query for fetching a node by a given path.  *  * @author<a href="mailto:pmarx@adobe.com>Philipp Marx</a>  */
end_comment

begin_class
specifier|public
class|class
name|FetchNodeByPathQuery
extends|extends
name|AbstractQuery
argument_list|<
name|NodeMongo
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
name|long
name|revisionId
decl_stmt|;
specifier|private
name|boolean
name|fetchAll
decl_stmt|;
comment|/**      * Constructs a new {@code FetchNodeByPathQuery}.      *      * @param mongoConnection The {@link MongoConnection}.      * @param path The path.      */
specifier|public
name|FetchNodeByPathQuery
parameter_list|(
name|MongoConnection
name|mongoConnection
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
argument_list|(
name|mongoConnection
argument_list|,
name|path
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a new {@code FetchNodeByPathQuery}.      *      * @param mongoConnection      *            The {@link MongoConnection}.      * @param path      *            The path.      * @param revisionId      *            The revision id.      */
specifier|public
name|FetchNodeByPathQuery
parameter_list|(
name|MongoConnection
name|mongoConnection
parameter_list|,
name|String
name|path
parameter_list|,
name|long
name|revisionId
parameter_list|)
block|{
name|super
argument_list|(
name|mongoConnection
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|revisionId
operator|=
name|revisionId
expr_stmt|;
block|}
specifier|public
name|void
name|setFetchAll
parameter_list|(
name|boolean
name|fetchAll
parameter_list|)
block|{
name|this
operator|.
name|fetchAll
operator|=
name|fetchAll
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NodeMongo
name|execute
parameter_list|()
block|{
if|if
condition|(
operator|!
name|revisionIdExists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Revision id '"
operator|+
name|revisionId
operator|+
literal|"' is not valid."
argument_list|)
throw|;
block|}
name|DBCollection
name|nodeCollection
init|=
name|mongoConnection
operator|.
name|getNodeCollection
argument_list|()
decl_stmt|;
name|QueryBuilder
name|queryBuilder
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
name|NodeMongo
operator|.
name|KEY_PATH
argument_list|)
operator|.
name|is
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|revisionId
operator|>
literal|0
condition|)
block|{
name|queryBuilder
operator|=
name|queryBuilder
operator|.
name|and
argument_list|(
name|NodeMongo
operator|.
name|KEY_REVISION_ID
argument_list|)
operator|.
name|is
argument_list|(
name|revisionId
argument_list|)
expr_stmt|;
block|}
name|DBObject
name|query
init|=
name|queryBuilder
operator|.
name|get
argument_list|()
decl_stmt|;
name|DBObject
name|filter
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|fetchAll
condition|)
block|{
name|QueryBuilder
name|filterBuilder
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
name|NodeMongo
operator|.
name|KEY_REVISION_ID
argument_list|)
operator|.
name|is
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|filterBuilder
operator|.
name|and
argument_list|(
name|NodeMongo
operator|.
name|KEY_CHILDREN
argument_list|)
operator|.
name|is
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|filter
operator|=
name|filterBuilder
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|NodeMongo
name|nodeMongo
init|=
operator|(
name|NodeMongo
operator|)
name|nodeCollection
operator|.
name|findOne
argument_list|(
name|query
argument_list|,
name|filter
argument_list|)
decl_stmt|;
return|return
name|nodeMongo
return|;
block|}
specifier|private
name|boolean
name|revisionIdExists
parameter_list|()
block|{
if|if
condition|(
name|revisionId
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|FetchValidRevisionsQuery
name|query
init|=
operator|new
name|FetchValidRevisionsQuery
argument_list|(
name|mongoConnection
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|revisionIds
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
return|return
name|revisionIds
operator|.
name|contains
argument_list|(
name|revisionId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

