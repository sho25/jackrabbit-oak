begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ApplyDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractNodeState
operator|.
name|checkValidName
import|;
end_import

begin_comment
comment|/**  * A node builder implementation for DocumentMK.  */
end_comment

begin_class
class|class
name|DocumentNodeBuilder
extends|extends
name|AbstractDocumentNodeBuilder
block|{
specifier|private
specifier|final
name|DocumentRootBuilder
name|root
decl_stmt|;
specifier|private
name|NodeState
name|base
decl_stmt|;
specifier|private
name|NodeState
name|rootBase
decl_stmt|;
name|DocumentNodeBuilder
parameter_list|(
name|MemoryNodeBuilder
name|base
parameter_list|,
name|String
name|name
parameter_list|,
name|DocumentRootBuilder
name|root
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|checkNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|NotNull
specifier|public
name|NodeState
name|getBaseState
parameter_list|()
block|{
if|if
condition|(
name|base
operator|==
literal|null
operator|||
name|rootBase
operator|!=
name|root
operator|.
name|getBaseState
argument_list|()
condition|)
block|{
name|base
operator|=
name|getParent
argument_list|()
operator|.
name|getBaseState
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rootBase
operator|=
name|root
operator|.
name|getBaseState
argument_list|()
expr_stmt|;
block|}
return|return
name|base
return|;
block|}
annotation|@
name|Override
specifier|protected
name|DocumentNodeBuilder
name|createChildBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|DocumentNodeBuilder
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|root
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|moveTo
parameter_list|(
annotation|@
name|NotNull
name|NodeBuilder
name|newParent
parameter_list|,
annotation|@
name|NotNull
name|String
name|newName
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|newParent
argument_list|)
expr_stmt|;
name|checkValidName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRoot
argument_list|()
operator|||
operator|!
name|exists
argument_list|()
operator|||
name|newParent
operator|.
name|hasChildNode
argument_list|(
name|newName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|newParent
operator|instanceof
name|DocumentNodeBuilder
condition|)
block|{
comment|// check if this builder is an ancestor of newParent or newParent
name|DocumentNodeBuilder
name|parent
init|=
operator|(
name|DocumentNodeBuilder
operator|)
name|newParent
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parent
operator|==
name|this
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|parent
operator|.
name|getParent
argument_list|()
operator|!=
name|root
condition|)
block|{
name|parent
operator|=
operator|(
name|DocumentNodeBuilder
operator|)
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// reached root builder
break|break;
block|}
block|}
block|}
if|if
condition|(
name|newParent
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// remember current root state and reset root in case
comment|// something goes wrong
name|NodeState
name|rootState
init|=
name|root
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|annotateSourcePath
argument_list|()
expr_stmt|;
name|NodeState
name|nodeState
init|=
name|getNodeState
argument_list|()
decl_stmt|;
operator|new
name|ApplyDiff
argument_list|(
name|newParent
operator|.
name|child
argument_list|(
name|newName
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|nodeState
argument_list|)
expr_stmt|;
name|removeRecursive
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|root
operator|.
name|reset
argument_list|(
name|rootState
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Blob
name|createBlob
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|root
operator|.
name|createBlob
argument_list|(
name|stream
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|()
block|{
return|return
name|removeRecursive
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|//---------------------< internal>-----------------------------------------
specifier|private
name|boolean
name|removeInternal
parameter_list|()
block|{
return|return
name|super
operator|.
name|remove
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|removeRecursive
parameter_list|(
name|DocumentNodeBuilder
name|builder
parameter_list|)
block|{
for|for
control|(
name|String
name|name
range|:
name|builder
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
name|removeRecursive
argument_list|(
name|builder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|removeInternal
argument_list|()
return|;
block|}
block|}
end_class

end_unit

