begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|annotation
operator|.
name|versioning
operator|.
name|ProviderType
import|;
end_import

begin_comment
comment|/**  * Download options to be provided to a call to {@link  * BlobAccessProvider#getDownloadURI(Blob, BlobDownloadOptions)}.  *<p>  * This object is an internal corollary to {@code  * org.apache.jackrabbit.api.binary.BinaryDownloadOptions}.  */
end_comment

begin_class
annotation|@
name|ProviderType
specifier|public
class|class
name|BlobDownloadOptions
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DISPOSITION_TYPE_INLINE
init|=
literal|"inline"
decl_stmt|;
specifier|private
specifier|final
name|String
name|mediaType
decl_stmt|;
specifier|private
specifier|final
name|String
name|characterEncoding
decl_stmt|;
specifier|private
specifier|final
name|String
name|fileName
decl_stmt|;
specifier|private
specifier|final
name|String
name|dispositionType
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|BlobDownloadOptions
name|DEFAULT
init|=
operator|new
name|BlobDownloadOptions
argument_list|()
decl_stmt|;
specifier|private
name|BlobDownloadOptions
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|DISPOSITION_TYPE_INLINE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates new download options.      *      * @param mediaType the internet media type for the blob.      * @param characterEncoding the character encoding for the blob.      * @param fileName the file name for the blob.      * @param dispositionType the disposition type.      */
specifier|public
name|BlobDownloadOptions
parameter_list|(
annotation|@
name|Nullable
name|String
name|mediaType
parameter_list|,
annotation|@
name|Nullable
name|String
name|characterEncoding
parameter_list|,
annotation|@
name|Nullable
name|String
name|fileName
parameter_list|,
annotation|@
name|NotNull
name|String
name|dispositionType
parameter_list|)
block|{
if|if
condition|(
name|dispositionType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"dispositionType must not be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|mediaType
operator|=
name|mediaType
expr_stmt|;
name|this
operator|.
name|characterEncoding
operator|=
name|characterEncoding
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
name|this
operator|.
name|dispositionType
operator|=
name|dispositionType
expr_stmt|;
block|}
comment|/**      * Returns the internet media type that should be assumed for the blob      * that is to be downloaded. This value should be a valid {@code      * jcr:mimeType}.      *      * @return The internet media type, or {@code null} if no type has been      *         specified.      */
annotation|@
name|Nullable
specifier|public
name|String
name|getMediaType
parameter_list|()
block|{
return|return
name|mediaType
return|;
block|}
comment|/**      * Returns the character encoding that should be assumed for the blob that      * is to be downloaded. This value should be a valid {@code jcr:encoding}.      *      * @return The character encoding, or {@code null} if no encoding has been      *         specified.      */
annotation|@
name|Nullable
specifier|public
name|String
name|getCharacterEncoding
parameter_list|()
block|{
return|return
name|characterEncoding
return|;
block|}
comment|/**      * Returns the filename that should be assumed for the blob that is to be      * downloaded.      *      * @return The file name, or {@code null} if no file name has been      *         specified.      */
annotation|@
name|Nullable
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
return|return
name|fileName
return|;
block|}
comment|/**      * Returns the disposition type that should be assumed for the binary that      * is to be downloaded. The default value of this setting is "inline".      *      * @return The disposition type.      * @see<a href="https://tools.ietf.org/html/rfc6266#section-4.2">RFC      *         6266, Section 4.2</a>      */
annotation|@
name|NotNull
specifier|public
name|String
name|getDispositionType
parameter_list|()
block|{
return|return
name|dispositionType
return|;
block|}
block|}
end_class

end_unit

