begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|bundlor
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|ROOT_PATH
import|;
end_import

begin_class
class|class
name|BundlingRoot
block|{
specifier|private
specifier|final
name|String
name|rootPath
decl_stmt|;
specifier|private
specifier|final
name|DocumentBundlor
name|documentBundlor
decl_stmt|;
specifier|public
name|BundlingRoot
parameter_list|()
block|{
name|this
argument_list|(
name|ROOT_PATH
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BundlingRoot
parameter_list|(
name|String
name|rootPath
parameter_list|,
annotation|@
name|Nullable
name|DocumentBundlor
name|documentBundlor
parameter_list|)
block|{
name|this
operator|.
name|rootPath
operator|=
name|rootPath
expr_stmt|;
name|this
operator|.
name|documentBundlor
operator|=
name|documentBundlor
expr_stmt|;
block|}
specifier|public
name|boolean
name|bundlingEnabled
parameter_list|()
block|{
return|return
name|documentBundlor
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|getPropertyPath
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
if|if
condition|(
name|isBundled
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|PathUtils
operator|.
name|concat
argument_list|(
name|relativePath
argument_list|(
name|path
argument_list|)
argument_list|,
name|propertyName
argument_list|)
return|;
block|}
comment|//TODO Assert that in non bundling case path is of depth 1
return|return
name|propertyName
return|;
block|}
specifier|public
name|boolean
name|isBundled
parameter_list|(
name|String
name|childPath
parameter_list|)
block|{
return|return
name|bundlingEnabled
argument_list|()
operator|&&
name|documentBundlor
operator|.
name|isBundled
argument_list|(
name|relativePath
argument_list|(
name|childPath
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|rootPath
return|;
block|}
specifier|private
name|String
name|relativePath
parameter_list|(
name|String
name|nodePath
parameter_list|)
block|{
return|return
name|PathUtils
operator|.
name|relativize
argument_list|(
name|rootPath
argument_list|,
name|nodePath
argument_list|)
return|;
block|}
block|}
end_class

end_unit

