begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeDefinitionTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinitionTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NameMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|final
class|class
name|NodeTypeTemplateImpl
extends|extends
name|AbstractNamedTemplate
implements|implements
name|NodeTypeTemplate
block|{
specifier|private
specifier|static
specifier|final
name|PropertyDefinition
index|[]
name|EMPTY_PROPERTY_DEFINITION_ARRAY
init|=
operator|new
name|PropertyDefinition
index|[
literal|0
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|NodeDefinition
index|[]
name|EMPTY_NODE_DEFINITION_ARRAY
init|=
operator|new
name|NodeDefinition
index|[
literal|0
index|]
decl_stmt|;
specifier|protected
name|boolean
name|isMixin
decl_stmt|;
specifier|protected
name|boolean
name|isOrderable
decl_stmt|;
specifier|protected
name|boolean
name|isAbstract
decl_stmt|;
specifier|protected
name|boolean
name|queryable
decl_stmt|;
specifier|private
name|String
name|primaryItemOakName
init|=
literal|null
decl_stmt|;
comment|// not defined by default
annotation|@
name|Nonnull
specifier|private
name|String
index|[]
name|superTypeOakNames
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
specifier|private
name|List
argument_list|<
name|PropertyDefinitionTemplate
argument_list|>
name|propertyDefinitionTemplates
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|NodeDefinitionTemplate
argument_list|>
name|nodeDefinitionTemplates
init|=
literal|null
decl_stmt|;
specifier|public
name|NodeTypeTemplateImpl
parameter_list|(
name|NameMapper
name|mapper
parameter_list|)
block|{
name|super
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
block|}
name|NodeTypeTemplateImpl
parameter_list|(
name|NameMapper
name|mapper
parameter_list|,
name|NodeTypeDefinition
name|definition
parameter_list|)
throws|throws
name|ConstraintViolationException
block|{
name|super
argument_list|(
name|mapper
argument_list|,
name|definition
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setMixin
argument_list|(
name|definition
operator|.
name|isMixin
argument_list|()
argument_list|)
expr_stmt|;
name|setOrderableChildNodes
argument_list|(
name|definition
operator|.
name|hasOrderableChildNodes
argument_list|()
argument_list|)
expr_stmt|;
name|setAbstract
argument_list|(
name|definition
operator|.
name|isAbstract
argument_list|()
argument_list|)
expr_stmt|;
name|setQueryable
argument_list|(
name|definition
operator|.
name|isQueryable
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|primaryItemName
init|=
name|definition
operator|.
name|getPrimaryItemName
argument_list|()
decl_stmt|;
if|if
condition|(
name|primaryItemName
operator|!=
literal|null
condition|)
block|{
name|setPrimaryItemName
argument_list|(
name|primaryItemName
argument_list|)
expr_stmt|;
block|}
name|setDeclaredSuperTypeNames
argument_list|(
name|definition
operator|.
name|getDeclaredSupertypeNames
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyDefinition
index|[]
name|pds
init|=
name|definition
operator|.
name|getDeclaredPropertyDefinitions
argument_list|()
decl_stmt|;
if|if
condition|(
name|pds
operator|!=
literal|null
condition|)
block|{
name|propertyDefinitionTemplates
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|pds
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|pds
operator|!=
literal|null
operator|&&
name|i
operator|<
name|pds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|propertyDefinitionTemplates
operator|.
name|add
argument_list|(
operator|new
name|PropertyDefinitionTemplateImpl
argument_list|(
name|mapper
argument_list|,
name|pds
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|NodeDefinition
index|[]
name|nds
init|=
name|definition
operator|.
name|getDeclaredChildNodeDefinitions
argument_list|()
decl_stmt|;
if|if
condition|(
name|nds
operator|!=
literal|null
condition|)
block|{
name|nodeDefinitionTemplates
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|nds
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|nodeDefinitionTemplates
operator|.
name|add
argument_list|(
operator|new
name|NodeDefinitionTemplateImpl
argument_list|(
name|mapper
argument_list|,
name|nds
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMixin
parameter_list|()
block|{
return|return
name|isMixin
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMixin
parameter_list|(
name|boolean
name|mixin
parameter_list|)
block|{
name|this
operator|.
name|isMixin
operator|=
name|mixin
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasOrderableChildNodes
parameter_list|()
block|{
return|return
name|isOrderable
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setOrderableChildNodes
parameter_list|(
name|boolean
name|orderable
parameter_list|)
block|{
name|this
operator|.
name|isOrderable
operator|=
name|orderable
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAbstract
parameter_list|()
block|{
return|return
name|isAbstract
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAbstract
parameter_list|(
name|boolean
name|abstractStatus
parameter_list|)
block|{
name|this
operator|.
name|isAbstract
operator|=
name|abstractStatus
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isQueryable
parameter_list|()
block|{
return|return
name|queryable
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setQueryable
parameter_list|(
name|boolean
name|queryable
parameter_list|)
block|{
name|this
operator|.
name|queryable
operator|=
name|queryable
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPrimaryItemName
parameter_list|()
block|{
return|return
name|getJcrNameAllowNull
argument_list|(
name|primaryItemOakName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPrimaryItemName
parameter_list|(
name|String
name|jcrName
parameter_list|)
throws|throws
name|ConstraintViolationException
block|{
name|this
operator|.
name|primaryItemOakName
operator|=
name|getOakNameAllowNullOrThrowConstraintViolation
argument_list|(
name|jcrName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getDeclaredSupertypeNames
parameter_list|()
block|{
return|return
name|getJcrNamesAllowNull
argument_list|(
name|superTypeOakNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDeclaredSuperTypeNames
parameter_list|(
name|String
index|[]
name|jcrNames
parameter_list|)
throws|throws
name|ConstraintViolationException
block|{
name|this
operator|.
name|superTypeOakNames
operator|=
name|getOakNamesOrThrowConstraintViolation
argument_list|(
name|jcrNames
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyDefinition
index|[]
name|getDeclaredPropertyDefinitions
parameter_list|()
block|{
if|if
condition|(
name|propertyDefinitionTemplates
operator|!=
literal|null
condition|)
block|{
return|return
name|propertyDefinitionTemplates
operator|.
name|toArray
argument_list|(
name|EMPTY_PROPERTY_DEFINITION_ARRAY
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|PropertyDefinitionTemplate
argument_list|>
name|getPropertyDefinitionTemplates
parameter_list|()
block|{
if|if
condition|(
name|propertyDefinitionTemplates
operator|==
literal|null
condition|)
block|{
name|propertyDefinitionTemplates
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
return|return
name|propertyDefinitionTemplates
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeDefinition
index|[]
name|getDeclaredChildNodeDefinitions
parameter_list|()
block|{
if|if
condition|(
name|nodeDefinitionTemplates
operator|!=
literal|null
condition|)
block|{
return|return
name|nodeDefinitionTemplates
operator|.
name|toArray
argument_list|(
name|EMPTY_NODE_DEFINITION_ARRAY
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|NodeDefinitionTemplate
argument_list|>
name|getNodeDefinitionTemplates
parameter_list|()
block|{
if|if
condition|(
name|nodeDefinitionTemplates
operator|==
literal|null
condition|)
block|{
name|nodeDefinitionTemplates
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
return|return
name|nodeDefinitionTemplates
return|;
block|}
block|}
end_class

end_unit

