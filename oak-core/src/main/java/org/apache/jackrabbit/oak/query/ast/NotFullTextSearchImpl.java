begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|FilterImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_class
specifier|public
class|class
name|NotFullTextSearchImpl
extends|extends
name|FullTextSearchImpl
block|{
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|KEYWORDS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"or"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Splitter
name|SPACE_SPLITTER
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|' '
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|trimResults
argument_list|()
decl_stmt|;
specifier|public
name|NotFullTextSearchImpl
parameter_list|(
name|String
name|selectorName
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|StaticOperandImpl
name|fullTextSearchExpression
parameter_list|)
block|{
name|super
argument_list|(
name|selectorName
argument_list|,
name|propertyName
argument_list|,
name|fullTextSearchExpression
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NotFullTextSearchImpl
parameter_list|(
name|FullTextSearchImpl
name|ft
parameter_list|)
block|{
name|this
argument_list|(
name|ft
operator|.
name|selectorName
argument_list|,
name|ft
operator|.
name|propertyName
argument_list|,
name|ft
operator|.
name|fullTextSearchExpression
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|ConstraintImpl
name|not
parameter_list|()
block|{
return|return
operator|new
name|FullTextSearchImpl
argument_list|(
name|this
operator|.
name|selectorName
argument_list|,
name|this
operator|.
name|propertyName
argument_list|,
name|this
operator|.
name|fullTextSearchExpression
argument_list|)
return|;
block|}
annotation|@
name|Override
name|String
name|getRawText
parameter_list|(
name|PropertyValue
name|v
parameter_list|)
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|terms
init|=
name|SPACE_SPLITTER
operator|.
name|split
argument_list|(
name|super
operator|.
name|getRawText
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuffer
name|raw
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|term
range|:
name|terms
control|)
block|{
if|if
condition|(
name|isKeyword
argument_list|(
name|term
argument_list|)
condition|)
block|{
name|raw
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s "
argument_list|,
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|raw
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"-%s "
argument_list|,
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|raw
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isKeyword
parameter_list|(
annotation|@
name|Nonnull
name|String
name|term
parameter_list|)
block|{
return|return
name|KEYWORDS
operator|.
name|contains
argument_list|(
name|checkNotNull
argument_list|(
name|term
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|restrictPropertyOnFilter
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|FilterImpl
name|f
parameter_list|)
block|{
comment|// Intentionally left empty. A NOT CONTAINS() can be valid if the property is actually not
comment|// there.
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"not "
operator|+
name|super
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
name|boolean
name|enforcePropertyExistence
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|SelectorImpl
name|selector
parameter_list|)
block|{
comment|// in case of NOT CONTAINS we want to match nodes without the property as well. In this way
comment|// we don't care whether the property is there or not.
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

