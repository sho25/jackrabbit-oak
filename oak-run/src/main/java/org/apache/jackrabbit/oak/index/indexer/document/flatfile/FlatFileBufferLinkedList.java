begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|flatfile
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|NodeStateEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|flatfile
operator|.
name|FlatFileBufferLinkedList
operator|.
name|NodeIterator
operator|.
name|iteratorFor
import|;
end_import

begin_comment
comment|/**  * Linked list implementation which supports multiple iterators. The iterator's state  * is backed by an actual node in the list. So, modification in the list show up in  * iterator (assuming thread safely/volatility) getting handled outside of the class.  */
end_comment

begin_class
specifier|public
class|class
name|FlatFileBufferLinkedList
block|{
specifier|private
name|ListNode
name|head
init|=
operator|new
name|ListNode
argument_list|()
decl_stmt|;
specifier|private
name|ListNode
name|tail
init|=
name|head
decl_stmt|;
specifier|private
name|int
name|size
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|memUsage
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|long
name|memLimit
decl_stmt|;
name|FlatFileBufferLinkedList
parameter_list|()
block|{
name|this
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
name|FlatFileBufferLinkedList
parameter_list|(
name|long
name|memLimit
parameter_list|)
block|{
name|this
operator|.
name|memLimit
operator|=
name|memLimit
expr_stmt|;
block|}
comment|/**      * Add {@code item} at the tail of the list      */
specifier|public
name|void
name|add
parameter_list|(
annotation|@
name|NotNull
name|NodeStateEntry
name|item
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|item
operator|!=
literal|null
argument_list|,
literal|"Can't add null to the list"
argument_list|)
expr_stmt|;
name|long
name|incomingSize
init|=
name|item
operator|.
name|estimatedMemUsage
argument_list|()
decl_stmt|;
name|long
name|memUsage
init|=
name|estimatedMemoryUsage
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|memUsage
operator|+
name|incomingSize
operator|<=
name|memLimit
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Adding item (%s) estimated with %s bytes would increase mem usage beyond upper limit (%s)."
operator|+
literal|" Current estimated mem usage is %s bytes"
argument_list|,
name|item
operator|.
name|getPath
argument_list|()
argument_list|,
name|incomingSize
argument_list|,
name|memLimit
argument_list|,
name|memUsage
argument_list|)
argument_list|)
expr_stmt|;
name|tail
operator|.
name|next
operator|=
operator|new
name|ListNode
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|tail
operator|=
name|tail
operator|.
name|next
expr_stmt|;
name|size
operator|++
expr_stmt|;
name|this
operator|.
name|memUsage
operator|+=
name|incomingSize
expr_stmt|;
block|}
comment|/**      * Remove the first item from the list      * @return {@code NodeStateEntry} data in the removed item      */
specifier|public
name|NodeStateEntry
name|remove
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|,
literal|"Cannot remove item from empty list"
argument_list|)
expr_stmt|;
name|NodeStateEntry
name|ret
init|=
name|head
operator|.
name|next
operator|.
name|data
decl_stmt|;
name|head
operator|.
name|next
operator|.
name|isValid
operator|=
literal|false
expr_stmt|;
name|head
operator|.
name|next
operator|=
name|head
operator|.
name|next
operator|.
name|next
expr_stmt|;
name|size
operator|--
expr_stmt|;
name|memUsage
operator|-=
name|ret
operator|.
name|estimatedMemUsage
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
name|tail
operator|=
name|head
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * @return {@link NodeIterator} object which would iterate the whole list      */
specifier|public
name|NodeIterator
name|iterator
parameter_list|()
block|{
return|return
name|iteratorFor
argument_list|(
name|head
argument_list|)
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|size
operator|==
literal|0
return|;
block|}
specifier|public
name|long
name|estimatedMemoryUsage
parameter_list|()
block|{
return|return
name|memUsage
return|;
block|}
comment|/**      * Represents an item in the list.      */
specifier|static
class|class
name|ListNode
block|{
specifier|private
name|ListNode
name|next
decl_stmt|;
specifier|private
specifier|final
name|NodeStateEntry
name|data
decl_stmt|;
specifier|private
name|boolean
name|isValid
init|=
literal|true
decl_stmt|;
specifier|private
name|ListNode
parameter_list|()
block|{
name|this
operator|.
name|data
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|next
operator|=
literal|null
expr_stmt|;
block|}
name|ListNode
parameter_list|(
annotation|@
name|NotNull
name|NodeStateEntry
name|data
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|next
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|NodeIterator
implements|implements
name|Iterator
argument_list|<
name|NodeStateEntry
argument_list|>
block|{
specifier|private
name|ListNode
name|current
decl_stmt|;
specifier|static
name|NodeIterator
name|iteratorFor
parameter_list|(
annotation|@
name|NotNull
name|ListNode
name|node
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
operator|new
name|NodeIterator
argument_list|(
name|node
argument_list|)
return|;
block|}
name|NodeIterator
parameter_list|(
annotation|@
name|NotNull
name|ListNode
name|start
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|this
operator|.
name|current
operator|=
name|start
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|current
operator|.
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeStateEntry
name|next
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|current
operator|.
name|isValid
argument_list|,
literal|"Can't call next from a removed node"
argument_list|)
expr_stmt|;
name|current
operator|=
name|current
operator|.
name|next
expr_stmt|;
return|return
name|current
operator|.
name|data
return|;
block|}
block|}
block|}
end_class

end_unit

