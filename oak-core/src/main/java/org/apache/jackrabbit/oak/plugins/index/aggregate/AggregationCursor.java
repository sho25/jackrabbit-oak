begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|aggregate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|IndexRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Cursors
operator|.
name|AbstractCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_comment
comment|/**  * An aggregation aware cursor.  */
end_comment

begin_class
class|class
name|AggregationCursor
extends|extends
name|AbstractCursor
block|{
specifier|private
specifier|final
name|Cursor
name|cursor
decl_stmt|;
specifier|private
specifier|final
name|NodeAggregator
name|aggregator
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|rootState
decl_stmt|;
specifier|private
name|boolean
name|init
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
comment|/**      * the current row      */
specifier|private
name|IndexRow
name|currentRow
decl_stmt|;
comment|/**      * the path of the current item of the cursor      */
specifier|private
name|String
name|currentPath
decl_stmt|;
comment|/**      * all of the item's known aggregates      */
specifier|private
name|Iterator
argument_list|<
name|String
argument_list|>
name|aggregates
decl_stmt|;
comment|/**      * should enforce uniqueness of the aggregated paths      */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|seenPaths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|AggregationCursor
parameter_list|(
name|Cursor
name|cursor
parameter_list|,
name|NodeAggregator
name|aggregator
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
name|this
operator|.
name|cursor
operator|=
name|cursor
expr_stmt|;
name|this
operator|.
name|aggregator
operator|=
name|aggregator
expr_stmt|;
name|this
operator|.
name|rootState
operator|=
name|rootState
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|closed
operator|&&
operator|!
name|init
condition|)
block|{
name|fetchNext
argument_list|()
expr_stmt|;
name|init
operator|=
literal|true
expr_stmt|;
block|}
return|return
operator|!
name|closed
return|;
block|}
specifier|private
name|void
name|fetchNext
parameter_list|()
block|{
if|if
condition|(
name|aggregates
operator|!=
literal|null
operator|&&
name|aggregates
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|currentPath
operator|=
name|aggregates
operator|.
name|next
argument_list|()
expr_stmt|;
name|init
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|aggregates
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|cursor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|currentRow
operator|=
name|cursor
operator|.
name|next
argument_list|()
expr_stmt|;
name|String
name|path
init|=
name|currentRow
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|aggregates
operator|=
name|Iterators
operator|.
name|filter
argument_list|(
name|Iterators
operator|.
name|concat
argument_list|(
name|Iterators
operator|.
name|singletonIterator
argument_list|(
name|path
argument_list|)
argument_list|,
name|aggregator
operator|.
name|getParents
argument_list|(
name|rootState
argument_list|,
name|path
argument_list|)
argument_list|)
argument_list|,
name|Predicates
operator|.
name|not
argument_list|(
name|Predicates
operator|.
name|in
argument_list|(
name|seenPaths
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fetchNext
argument_list|()
expr_stmt|;
return|return;
block|}
name|closed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|IndexRow
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|seenPaths
operator|.
name|add
argument_list|(
name|currentPath
argument_list|)
expr_stmt|;
name|init
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|currentRow
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|currentPath
argument_list|)
condition|)
block|{
return|return
name|currentRow
return|;
block|}
comment|// create a new overlayed index row,
comment|// where the path is different but all other
comment|// properties are kept
return|return
operator|new
name|IndexRow
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|currentPath
return|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyValue
name|getValue
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
return|return
name|currentRow
operator|.
name|getValue
argument_list|(
name|columnName
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

