begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|AbstractBlobGCRegistrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|testing
operator|.
name|mock
operator|.
name|osgi
operator|.
name|MockOsgi
operator|.
name|deactivate
import|;
end_import

begin_class
specifier|public
class|class
name|SegmentBlobGCRegistrationTest
extends|extends
name|AbstractBlobGCRegistrationTest
block|{
specifier|private
name|SegmentNodeStoreService
name|service
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|registerNodeStoreService
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|SegmentNodeStoreService
operator|.
name|CUSTOM_BLOB_STORE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|SegmentNodeStoreService
operator|.
name|REPOSITORY_HOME_DIRECTORY
argument_list|,
name|repoHome
argument_list|)
expr_stmt|;
name|service
operator|=
name|context
operator|.
name|registerInjectActivateService
argument_list|(
operator|new
name|SegmentNodeStoreService
argument_list|()
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|unregisterNodeStoreService
parameter_list|()
block|{
name|ServiceReference
index|[]
name|serviceReferences
decl_stmt|;
try|try
block|{
name|serviceReferences
operator|=
name|context
operator|.
name|bundleContext
argument_list|()
operator|.
name|getServiceReferences
argument_list|(
name|SegmentNodeStoreService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to read references to SegmentNodeStoreService"
argument_list|,
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|ServiceReference
name|serviceReference
range|:
name|serviceReferences
control|)
block|{
name|Object
name|service
init|=
name|context
operator|.
name|bundleContext
argument_list|()
operator|.
name|getService
argument_list|(
name|serviceReference
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|deactivate
argument_list|(
name|service
argument_list|,
name|serviceReference
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

