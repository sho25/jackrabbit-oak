begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|prototype
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests for {@code MicroKernel#branch}  */
end_comment

begin_class
specifier|public
class|class
name|MongoMKBranchMergeTest
extends|extends
name|BaseMongoMKTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|oneBranchAddedChildren1
parameter_list|()
block|{
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|addNodes
argument_list|(
name|branchRev
argument_list|,
literal|"/branch1"
argument_list|,
literal|"/branch1/child1"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
name|branchRev
argument_list|,
literal|"/branch1"
argument_list|,
literal|"/branch1/child1"
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
literal|null
argument_list|,
literal|"/branch1"
argument_list|,
literal|"/branch1/child1"
argument_list|)
expr_stmt|;
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child2"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child2"
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk/child2"
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"/trunk/child2"
argument_list|,
literal|"/branch1"
argument_list|,
literal|"/branch1/child1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|oneBranchAddedChildren2
parameter_list|()
block|{
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|addNodes
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk/child1/child2"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk/child1/child2"
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1/child2"
argument_list|)
expr_stmt|;
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child3"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child3"
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk/child3"
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"/trunk/child1/child2"
argument_list|,
literal|"/trunk/child3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|oneBranchAddedChildren3
parameter_list|()
block|{
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/root"
argument_list|,
literal|"/root/child1"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/root"
argument_list|,
literal|"/root/child1"
argument_list|)
expr_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"branchRev: "
operator|+
name|branchRev
argument_list|)
expr_stmt|;
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/root/child2"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/root"
argument_list|,
literal|"/root/child1"
argument_list|,
literal|"/root/child2"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
name|branchRev
argument_list|,
literal|"/root"
argument_list|,
literal|"/root/child1"
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
name|branchRev
argument_list|,
literal|"/root/child2"
argument_list|)
expr_stmt|;
name|branchRev
operator|=
name|addNodes
argument_list|(
name|branchRev
argument_list|,
literal|"/root/child1/child3"
argument_list|,
literal|"/root/child4"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
name|branchRev
argument_list|,
literal|"/root"
argument_list|,
literal|"/root/child1"
argument_list|,
literal|"/root/child1/child3"
argument_list|,
literal|"/root/child4"
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
name|branchRev
argument_list|,
literal|"/root/child2"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/root"
argument_list|,
literal|"/root/child1"
argument_list|,
literal|"/root/child2"
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
literal|null
argument_list|,
literal|"/root/child1/child3"
argument_list|,
literal|"/root/child4"
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/root"
argument_list|,
literal|"/root/child1"
argument_list|,
literal|"/root/child2"
argument_list|,
literal|"/root/child1/child3"
argument_list|,
literal|"/root/child4"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|oneBranchRemovedChildren
parameter_list|()
block|{
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|removeNodes
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk"
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|oneBranchRemovedRoot
parameter_list|()
block|{
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|removeNodes
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk"
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is a test to make sure properties are properly escaped in merge.      */
annotation|@
name|Test
specifier|public
name|void
name|oneBranchAddPropertyRoot
parameter_list|()
block|{
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|setProp
argument_list|(
name|branchRev
argument_list|,
literal|"/jcr:primaryType"
argument_list|,
literal|"nam:rep:root"
argument_list|)
expr_stmt|;
name|assertPropExists
argument_list|(
name|branchRev
argument_list|,
literal|"/"
argument_list|,
literal|"jcr:primaryType"
argument_list|)
expr_stmt|;
name|branchRev
operator|=
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertPropExists
argument_list|(
name|branchRev
argument_list|,
literal|"/"
argument_list|,
literal|"jcr:primaryType"
argument_list|)
expr_stmt|;
name|String
name|mergedNode
init|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|branchRev
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|expectedNode
init|=
literal|"{\"jcr:primaryType\":\"nam:rep:root\",\":childNodeCount\":0}"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong property value after merge"
argument_list|,
name|expectedNode
argument_list|,
name|mergedNode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|oneBranchChangedProperties
parameter_list|()
block|{
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|setProp
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1/prop1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|setProp
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1/prop2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|assertPropExists
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"prop1"
argument_list|)
expr_stmt|;
name|assertPropExists
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"prop2"
argument_list|)
expr_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|setProp
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk/child1/prop1"
argument_list|,
literal|"value1a"
argument_list|)
expr_stmt|;
name|branchRev
operator|=
name|setProp
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk/child1/prop2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|branchRev
operator|=
name|setProp
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk/child1/prop3"
argument_list|,
literal|"value3"
argument_list|)
expr_stmt|;
name|assertPropValue
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"prop1"
argument_list|,
literal|"value1a"
argument_list|)
expr_stmt|;
name|assertPropNotExists
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"prop2"
argument_list|)
expr_stmt|;
name|assertPropValue
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"prop3"
argument_list|,
literal|"value3"
argument_list|)
expr_stmt|;
name|assertPropValue
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"prop1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|assertPropExists
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"prop2"
argument_list|)
expr_stmt|;
name|assertPropNotExists
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"prop3"
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertPropValue
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"prop1"
argument_list|,
literal|"value1a"
argument_list|)
expr_stmt|;
name|assertPropNotExists
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"prop2"
argument_list|)
expr_stmt|;
name|assertPropValue
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"prop3"
argument_list|,
literal|"value3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|oneBranchAddedSubChildren
parameter_list|()
block|{
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"/trunk/child1/child2"
argument_list|,
literal|"/trunk/child1/child2/child3"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"/trunk/child1/child2"
argument_list|,
literal|"/trunk/child1/child2/child3"
argument_list|)
expr_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|addNodes
argument_list|(
name|branchRev
argument_list|,
literal|"/branch1"
argument_list|,
literal|"/branch1/child1"
argument_list|,
literal|"/branch1/child1/child2"
argument_list|,
literal|"/branch1/child1/child2/child3"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"/trunk/child1/child2"
argument_list|,
literal|"/trunk/child1/child2/child3"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
name|branchRev
argument_list|,
literal|"/branch1"
argument_list|,
literal|"/branch1/child1"
argument_list|,
literal|"/branch1/child1/child2"
argument_list|,
literal|"/branch1/child1/child2/child3"
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
literal|null
argument_list|,
literal|"/branch1"
argument_list|,
literal|"/branch1/child1"
argument_list|,
literal|"/branch1/child1/child2"
argument_list|,
literal|"/branch1/child1/child2/child3"
argument_list|)
expr_stmt|;
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1/child2/child3/child4"
argument_list|,
literal|"/trunk/child5"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1/child2/child3/child4"
argument_list|,
literal|"/trunk/child5"
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk/child1/child2/child3/child4"
argument_list|,
literal|"/trunk/child5"
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"/trunk/child1/child2"
argument_list|,
literal|"/trunk/child1/child2/child3"
argument_list|,
literal|"/trunk/child1/child2/child3/child4"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/branch1"
argument_list|,
literal|"/branch1/child1"
argument_list|,
literal|"/branch1/child1/child2"
argument_list|,
literal|"/branch1/child1/child2/child3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|oneBranchAddedChildrenAndAddedProperties
parameter_list|()
block|{
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|setProp
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1/prop1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|setProp
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1/prop2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|assertPropExists
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"prop1"
argument_list|)
expr_stmt|;
name|assertPropExists
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"prop2"
argument_list|)
expr_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|addNodes
argument_list|(
name|branchRev
argument_list|,
literal|"/branch1"
argument_list|,
literal|"/branch1/child1"
argument_list|)
expr_stmt|;
name|branchRev
operator|=
name|setProp
argument_list|(
name|branchRev
argument_list|,
literal|"/branch1/child1/prop1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|branchRev
operator|=
name|setProp
argument_list|(
name|branchRev
argument_list|,
literal|"/branch1/child1/prop2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|assertPropExists
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"prop1"
argument_list|)
expr_stmt|;
name|assertPropExists
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"prop2"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
name|branchRev
argument_list|,
literal|"/branch1"
argument_list|,
literal|"/branch1/child1"
argument_list|)
expr_stmt|;
name|assertPropExists
argument_list|(
name|branchRev
argument_list|,
literal|"/branch1/child1"
argument_list|,
literal|"prop1"
argument_list|)
expr_stmt|;
name|assertPropExists
argument_list|(
name|branchRev
argument_list|,
literal|"/branch1/child1"
argument_list|,
literal|"prop2"
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
literal|null
argument_list|,
literal|"/branch1"
argument_list|,
literal|"/branch1/child1"
argument_list|)
expr_stmt|;
name|assertPropNotExists
argument_list|(
literal|null
argument_list|,
literal|"/branch1/child1"
argument_list|,
literal|"prop1"
argument_list|)
expr_stmt|;
name|assertPropNotExists
argument_list|(
literal|null
argument_list|,
literal|"/branch1/child1"
argument_list|,
literal|"prop2"
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|assertPropExists
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"prop1"
argument_list|)
expr_stmt|;
name|assertPropExists
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"prop2"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/branch1"
argument_list|,
literal|"/branch1/child1"
argument_list|)
expr_stmt|;
name|assertPropExists
argument_list|(
literal|null
argument_list|,
literal|"/branch1/child1"
argument_list|,
literal|"prop1"
argument_list|)
expr_stmt|;
name|assertPropExists
argument_list|(
literal|null
argument_list|,
literal|"/branch1/child1"
argument_list|,
literal|"prop2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|twoBranchesAddedChildren1
parameter_list|()
block|{
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|String
name|branchRev1
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev2
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|branchRev1
operator|=
name|addNodes
argument_list|(
name|branchRev1
argument_list|,
literal|"/branch1"
argument_list|,
literal|"/branch1/child1"
argument_list|)
expr_stmt|;
name|branchRev2
operator|=
name|addNodes
argument_list|(
name|branchRev2
argument_list|,
literal|"/branch2"
argument_list|,
literal|"/branch2/child2"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
name|branchRev1
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
name|branchRev2
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
name|branchRev1
argument_list|,
literal|"/branch1/child1"
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
name|branchRev1
argument_list|,
literal|"/branch2/child2"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
name|branchRev2
argument_list|,
literal|"/branch2/child2"
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
name|branchRev2
argument_list|,
literal|"/branch1/child1"
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
literal|null
argument_list|,
literal|"/branch1/child1"
argument_list|,
literal|"/branch2/child2"
argument_list|)
expr_stmt|;
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child2"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child2"
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
name|branchRev1
argument_list|,
literal|"/trunk/child2"
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
name|branchRev2
argument_list|,
literal|"/trunk/child2"
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev1
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/branch1"
argument_list|,
literal|"/branch1/child1"
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
literal|null
argument_list|,
literal|"/branch2"
argument_list|,
literal|"/branch2/child2"
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev2
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/branch1"
argument_list|,
literal|"/branch1/child1"
argument_list|,
literal|"/branch2"
argument_list|,
literal|"/branch2/child2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|oneBranchAddedChildrenWithConflict
parameter_list|()
block|{
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|removeNodes
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk"
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk/child1"
argument_list|)
expr_stmt|;
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1/child2"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"/trunk/child1/child2"
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
literal|null
argument_list|,
literal|"/trunk/child1"
argument_list|,
literal|"/trunk/child1/child2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|oneBranchChangedPropertiesWithConflict
parameter_list|()
block|{
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|)
expr_stmt|;
name|setProp
argument_list|(
literal|null
argument_list|,
literal|"/trunk/prop1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|assertPropExists
argument_list|(
literal|null
argument_list|,
literal|"/trunk"
argument_list|,
literal|"prop1"
argument_list|)
expr_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|setProp
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk/prop1"
argument_list|,
literal|"value1a"
argument_list|)
expr_stmt|;
name|assertPropValue
argument_list|(
name|branchRev
argument_list|,
literal|"/trunk"
argument_list|,
literal|"prop1"
argument_list|,
literal|"value1a"
argument_list|)
expr_stmt|;
name|setProp
argument_list|(
literal|null
argument_list|,
literal|"/trunk/prop1"
argument_list|,
literal|"value1b"
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected: Concurrent modification exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{}
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|addExistingRootInBranch
parameter_list|()
block|{
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/root"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/root"
argument_list|)
expr_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|branchRev
operator|=
name|addNodes
argument_list|(
name|branchRev
argument_list|,
literal|"/root"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to add the same root node twice"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{}
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|addExistingChildInBranch
parameter_list|()
block|{
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/root"
argument_list|,
literal|"/root/child1"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
literal|null
argument_list|,
literal|"/root"
argument_list|,
literal|"/root/child1"
argument_list|)
expr_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|addNodes
argument_list|(
name|branchRev
argument_list|,
literal|"/root/child2"
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
name|branchRev
argument_list|,
literal|"/root/child1"
argument_list|,
literal|"/root/child2"
argument_list|)
expr_stmt|;
try|try
block|{
name|branchRev
operator|=
name|addNodes
argument_list|(
name|branchRev
argument_list|,
literal|"/root/child1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to add the same root node twice"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{}
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Implementation specific behavior"
argument_list|)
specifier|public
name|void
name|emptyMergeCausesNoChange
parameter_list|()
block|{
name|String
name|rev1
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"+\"/child1\":{}"
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"+\"/child2\":{}"
argument_list|,
name|branchRev
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"-\"/child2\""
argument_list|,
name|branchRev
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|String
name|rev2
init|=
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/child1"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/child2"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rev1
argument_list|,
name|rev2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|trunkMergeNotAllowed
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"+\"/child1\":{}"
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|)
decl_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|rev
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{}
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|movesInBranch
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\":{\"b\":{}}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|">\"a\":\"x\"^\"x/b/p\":1>\"x\":\"a\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|rev
operator|=
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNodesExist
argument_list|(
name|rev
argument_list|,
literal|"/a"
argument_list|,
literal|"/a/b"
argument_list|)
expr_stmt|;
name|assertPropExists
argument_list|(
name|rev
argument_list|,
literal|"/a/b"
argument_list|,
literal|"p"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|concurrentNonConflictingMerges
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numThreads
init|=
literal|10
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"test\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|workers
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Exception
argument_list|>
name|exceptions
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Exception
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|path
init|=
literal|"/test/t"
operator|+
name|i
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"+\""
operator|+
name|path
operator|+
literal|"\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|workers
operator|.
name|add
argument_list|(
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
name|path
argument_list|,
literal|"+\"node"
operator|+
name|i
operator|+
literal|"\":{}"
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|workers
control|)
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|workers
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|exceptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|addNodes
parameter_list|(
name|String
name|rev
parameter_list|,
name|String
modifier|...
name|nodes
parameter_list|)
block|{
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|rev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"+\""
operator|+
name|node
operator|+
literal|"\":{}"
argument_list|,
name|rev
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|rev
return|;
block|}
specifier|private
name|String
name|removeNodes
parameter_list|(
name|String
name|rev
parameter_list|,
name|String
modifier|...
name|nodes
parameter_list|)
block|{
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|rev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"-\""
operator|+
name|node
operator|+
literal|"\""
argument_list|,
name|rev
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|rev
return|;
block|}
specifier|private
name|String
name|setProp
parameter_list|(
name|String
name|rev
parameter_list|,
name|String
name|prop
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|value
operator|=
name|value
operator|==
literal|null
condition|?
literal|null
else|:
literal|"\""
operator|+
name|value
operator|+
literal|"\""
expr_stmt|;
return|return
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"^\""
operator|+
name|prop
operator|+
literal|"\" : "
operator|+
name|value
argument_list|,
name|rev
argument_list|,
literal|""
argument_list|)
return|;
block|}
block|}
end_class

end_unit

