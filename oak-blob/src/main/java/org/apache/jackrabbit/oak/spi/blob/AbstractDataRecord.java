begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_comment
comment|/**  * Implements {@link DataRecord}  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractDataRecord
implements|implements
name|DataRecord
block|{
comment|/**      * The data store that contains this record.      */
specifier|protected
specifier|final
name|AbstractSharedBackend
name|backend
decl_stmt|;
comment|/**      * The binary identifier;      */
specifier|private
specifier|final
name|DataIdentifier
name|identifier
decl_stmt|;
comment|/**      * Creates a data record with the given identifier.      *      * @param identifier data identifier      */
specifier|public
name|AbstractDataRecord
parameter_list|(
name|AbstractSharedBackend
name|backend
parameter_list|,
name|DataIdentifier
name|identifier
parameter_list|)
block|{
name|this
operator|.
name|backend
operator|=
name|backend
expr_stmt|;
name|this
operator|.
name|identifier
operator|=
name|identifier
expr_stmt|;
block|}
comment|/**      * Returns the data identifier.      *      * @return data identifier      */
specifier|public
name|DataIdentifier
name|getIdentifier
parameter_list|()
block|{
return|return
name|identifier
return|;
block|}
comment|/**      * Delegates the call to the backend to retrieve reference.      *      * @return      */
specifier|public
name|String
name|getReference
parameter_list|()
block|{
return|return
name|backend
operator|.
name|getReferenceFromIdentifier
argument_list|(
name|identifier
argument_list|)
return|;
block|}
comment|/**      * Returns the string representation of the data identifier.      *      * @return string representation      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|identifier
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Checks if the given object is a data record with the same identifier      * as this one.      *      * @param object other object      * @return<code>true</code> if the other object is a data record and has      *         the same identifier as this one,<code>false</code> otherwise      */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
return|return
operator|(
name|object
operator|instanceof
name|DataRecord
operator|)
operator|&&
name|identifier
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|DataRecord
operator|)
name|object
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns the hash code of the data identifier.      *      * @return hash code      */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|identifier
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

