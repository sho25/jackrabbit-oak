begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|principal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ThreeWayConflictHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO8601
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|ExternalIdentityConstants
operator|.
name|REP_LAST_SYNCED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_class
specifier|public
class|class
name|ExternalIdentityConflictHandlerTest
block|{
specifier|private
name|ExternalIdentityConflictHandler
name|handler
init|=
operator|new
name|ExternalIdentityConflictHandler
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testAddExistingProperty
parameter_list|()
block|{
name|assertSame
argument_list|(
name|ThreeWayConflictHandler
operator|.
name|Resolution
operator|.
name|IGNORED
argument_list|,
name|handler
operator|.
name|addExistingProperty
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddExistingPropertyRepLastSynced
parameter_list|()
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|calStr
init|=
name|ISO8601
operator|.
name|format
argument_list|(
name|cal
argument_list|)
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|String
name|calStr2
init|=
name|ISO8601
operator|.
name|format
argument_list|(
name|cal
argument_list|)
decl_stmt|;
name|PropertyState
name|ours
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|REP_LAST_SYNCED
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|ours
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|calStr
argument_list|)
expr_stmt|;
name|PropertyState
name|theirs
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|calStr2
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|ThreeWayConflictHandler
operator|.
name|Resolution
operator|.
name|MERGED
argument_list|,
name|handler
operator|.
name|addExistingProperty
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
argument_list|,
name|ours
argument_list|,
name|theirs
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeChangedProperty
parameter_list|()
block|{
name|assertSame
argument_list|(
name|ThreeWayConflictHandler
operator|.
name|Resolution
operator|.
name|IGNORED
argument_list|,
name|handler
operator|.
name|changeChangedProperty
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeChangedPropertyRepLastSynced
parameter_list|()
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|calStr
init|=
name|ISO8601
operator|.
name|format
argument_list|(
name|cal
argument_list|)
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|String
name|calStr2
init|=
name|ISO8601
operator|.
name|format
argument_list|(
name|cal
argument_list|)
decl_stmt|;
name|PropertyState
name|ours
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|REP_LAST_SYNCED
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|ours
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|calStr2
argument_list|)
expr_stmt|;
name|PropertyState
name|theirs
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|calStr
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|ThreeWayConflictHandler
operator|.
name|Resolution
operator|.
name|MERGED
argument_list|,
name|handler
operator|.
name|changeChangedProperty
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
argument_list|,
name|ours
argument_list|,
name|theirs
argument_list|,
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeDeletedProperty
parameter_list|()
block|{
name|assertSame
argument_list|(
name|ThreeWayConflictHandler
operator|.
name|Resolution
operator|.
name|IGNORED
argument_list|,
name|handler
operator|.
name|changeDeletedProperty
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteDeletedProperty
parameter_list|()
block|{
name|assertSame
argument_list|(
name|ThreeWayConflictHandler
operator|.
name|Resolution
operator|.
name|IGNORED
argument_list|,
name|handler
operator|.
name|deleteDeletedProperty
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteChangedProperty
parameter_list|()
block|{
name|assertSame
argument_list|(
name|ThreeWayConflictHandler
operator|.
name|Resolution
operator|.
name|IGNORED
argument_list|,
name|handler
operator|.
name|deleteChangedProperty
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddExistingNode
parameter_list|()
block|{
name|assertSame
argument_list|(
name|ThreeWayConflictHandler
operator|.
name|Resolution
operator|.
name|IGNORED
argument_list|,
name|handler
operator|.
name|addExistingNode
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
argument_list|,
literal|"name"
argument_list|,
name|mock
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeDeletedNode
parameter_list|()
block|{
name|assertSame
argument_list|(
name|ThreeWayConflictHandler
operator|.
name|Resolution
operator|.
name|IGNORED
argument_list|,
name|handler
operator|.
name|changeDeletedNode
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
argument_list|,
literal|"name"
argument_list|,
name|mock
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteChangedNode
parameter_list|()
block|{
name|assertSame
argument_list|(
name|ThreeWayConflictHandler
operator|.
name|Resolution
operator|.
name|IGNORED
argument_list|,
name|handler
operator|.
name|deleteChangedNode
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
argument_list|,
literal|"name"
argument_list|,
name|mock
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteDeletedNode
parameter_list|()
block|{
name|assertSame
argument_list|(
name|ThreeWayConflictHandler
operator|.
name|Resolution
operator|.
name|IGNORED
argument_list|,
name|handler
operator|.
name|deleteDeletedNode
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
argument_list|,
literal|"name"
argument_list|,
name|mock
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeOursCannotBeParsed
parameter_list|()
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|calStr
init|=
name|ISO8601
operator|.
name|format
argument_list|(
name|cal
argument_list|)
decl_stmt|;
name|PropertyState
name|ours
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|REP_LAST_SYNCED
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|ours
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"notParseable"
argument_list|)
expr_stmt|;
name|PropertyState
name|theirs
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|calStr
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|NodeBuilder
name|parent
init|=
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|ThreeWayConflictHandler
operator|.
name|Resolution
operator|.
name|MERGED
argument_list|,
name|handler
operator|.
name|changeChangedProperty
argument_list|(
name|parent
argument_list|,
name|ours
argument_list|,
name|theirs
argument_list|,
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|parent
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setProperty
argument_list|(
name|REP_LAST_SYNCED
argument_list|,
name|ISO8601
operator|.
name|parse
argument_list|(
name|theirs
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeTheirsCannotBeParsed
parameter_list|()
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|calStr
init|=
name|ISO8601
operator|.
name|format
argument_list|(
name|cal
argument_list|)
decl_stmt|;
name|PropertyState
name|ours
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|REP_LAST_SYNCED
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|ours
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|calStr
argument_list|)
expr_stmt|;
name|PropertyState
name|theirs
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"notParseable"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|NodeBuilder
name|parent
init|=
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|ThreeWayConflictHandler
operator|.
name|Resolution
operator|.
name|MERGED
argument_list|,
name|handler
operator|.
name|changeChangedProperty
argument_list|(
name|parent
argument_list|,
name|ours
argument_list|,
name|theirs
argument_list|,
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|parent
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setProperty
argument_list|(
name|REP_LAST_SYNCED
argument_list|,
name|ISO8601
operator|.
name|parse
argument_list|(
name|ours
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeNoneCannotBeParsed
parameter_list|()
block|{
name|PropertyState
name|ours
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|REP_LAST_SYNCED
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|ours
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"notParseable1"
argument_list|)
expr_stmt|;
name|PropertyState
name|theirs
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"notParseable2"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|NodeBuilder
name|parent
init|=
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|ThreeWayConflictHandler
operator|.
name|Resolution
operator|.
name|IGNORED
argument_list|,
name|handler
operator|.
name|changeChangedProperty
argument_list|(
name|parent
argument_list|,
name|ours
argument_list|,
name|theirs
argument_list|,
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ThreeWayConflictHandler
operator|.
name|Resolution
operator|.
name|IGNORED
argument_list|,
name|handler
operator|.
name|addExistingProperty
argument_list|(
name|parent
argument_list|,
name|ours
argument_list|,
name|theirs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

