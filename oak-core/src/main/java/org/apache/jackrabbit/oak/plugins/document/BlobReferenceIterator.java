begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|ReferencedBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|AbstractIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Queues
import|;
end_import

begin_comment
comment|/**  * An iterator over all referenced binaries.  *<p>  * Only top-level referenced are returned (indirection, if any, is not  * resolved). The items are returned in no particular order. An item might be  * returned multiple times.  */
end_comment

begin_class
specifier|public
class|class
name|BlobReferenceIterator
extends|extends
name|AbstractIterator
argument_list|<
name|ReferencedBlob
argument_list|>
implements|implements
name|Closeable
block|{
specifier|private
specifier|final
name|DocumentStore
name|documentStore
decl_stmt|;
specifier|private
specifier|final
name|BlobCollector
name|blobCollector
decl_stmt|;
specifier|private
specifier|final
name|Queue
argument_list|<
name|ReferencedBlob
argument_list|>
name|blobs
init|=
name|Queues
operator|.
name|newArrayDeque
argument_list|()
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|NodeDocument
argument_list|>
name|iterator
decl_stmt|;
specifier|public
name|BlobReferenceIterator
parameter_list|(
name|DocumentNodeStore
name|nodeStore
parameter_list|)
block|{
name|this
operator|.
name|documentStore
operator|=
name|nodeStore
operator|.
name|getDocumentStore
argument_list|()
expr_stmt|;
name|this
operator|.
name|blobCollector
operator|=
operator|new
name|BlobCollector
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ReferencedBlob
name|computeNext
parameter_list|()
block|{
if|if
condition|(
name|blobs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|loadBatch
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|blobs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|blobs
operator|.
name|remove
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
specifier|private
name|void
name|loadBatch
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|iterator
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|iterator
operator|=
name|getIteratorOverDocsWithBinaries
argument_list|()
expr_stmt|;
block|}
comment|// Some node which have the '_bin' flag set might not have any binaries
comment|// in it so move forward if blobs is still empty and cursor has more
comment|// elements
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
operator|&&
name|blobs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|collectBinaries
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|collectBinaries
parameter_list|(
name|NodeDocument
name|nodeDocument
parameter_list|)
block|{
name|blobCollector
operator|.
name|collect
argument_list|(
name|nodeDocument
argument_list|,
name|blobs
argument_list|)
expr_stmt|;
block|}
comment|/**      * Override this document to use a document store specific iterator.      */
specifier|public
name|Iterator
argument_list|<
name|NodeDocument
argument_list|>
name|getIteratorOverDocsWithBinaries
parameter_list|()
block|{
name|int
name|batchSize
init|=
literal|1000
decl_stmt|;
return|return
name|Utils
operator|.
name|getSelectedDocuments
argument_list|(
name|documentStore
argument_list|,
name|NodeDocument
operator|.
name|HAS_BINARY_FLAG
argument_list|,
name|NodeDocument
operator|.
name|HAS_BINARY_VAL
argument_list|,
name|batchSize
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|Utils
operator|.
name|closeIfCloseable
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

