begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tika
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|TextWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|TextExtractorTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|basicWorking
parameter_list|()
throws|throws
name|Exception
block|{
name|MapTextWriter
name|writer
init|=
operator|new
name|MapTextWriter
argument_list|()
decl_stmt|;
name|TextExtractor
name|extractor
init|=
operator|new
name|TextExtractor
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BinaryResource
argument_list|>
name|binaries
init|=
name|asList
argument_list|(
name|bin
argument_list|(
literal|"hello"
argument_list|,
literal|"text/plain"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|bin
argument_list|(
literal|"foo"
argument_list|,
literal|"text/plain"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|extractor
operator|.
name|extract
argument_list|(
name|binaries
argument_list|)
expr_stmt|;
name|extractor
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|writer
operator|.
name|data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|writer
operator|.
name|data
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|BinaryResource
name|bin
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|mime
parameter_list|,
name|String
name|id
parameter_list|)
block|{
return|return
operator|new
name|BinaryResource
argument_list|(
name|ByteSource
operator|.
name|wrap
argument_list|(
name|text
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|mime
argument_list|,
literal|null
argument_list|,
name|id
argument_list|,
name|id
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|MapTextWriter
implements|implements
name|TextWriter
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
init|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|String
name|blobId
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|data
operator|.
name|put
argument_list|(
name|blobId
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|markEmpty
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{          }
annotation|@
name|Override
specifier|public
name|void
name|markError
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{          }
annotation|@
name|Override
specifier|public
name|boolean
name|isProcessed
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{
return|return
name|data
operator|.
name|containsKey
argument_list|(
name|blobId
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

