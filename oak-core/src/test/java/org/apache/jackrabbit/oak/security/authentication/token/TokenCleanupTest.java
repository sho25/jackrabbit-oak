begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TokenCleanupTest
extends|extends
name|AbstractTokenTest
block|{
specifier|private
name|String
name|userId
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|userId
operator|=
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
expr_stmt|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
name|ConfigurationParameters
name|getTokenConfig
parameter_list|()
block|{
return|return
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|TokenProviderImpl
operator|.
name|PARAM_TOKEN_CLEANUP_THRESHOLD
argument_list|,
literal|5
argument_list|)
return|;
block|}
specifier|private
name|void
name|assertTokenNodes
parameter_list|(
name|int
name|expectedNumber
parameter_list|)
throws|throws
name|Exception
block|{
name|Tree
name|tokenParent
init|=
name|root
operator|.
name|getTree
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|'/'
operator|+
name|TokenConstants
operator|.
name|TOKENS_NODE_NAME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedNumber
argument_list|,
name|tokenParent
operator|.
name|getChildrenCount
argument_list|(
name|expectedNumber
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createExpiredTokens
parameter_list|(
name|int
name|numberOfTokens
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfTokens
condition|;
name|i
operator|++
control|)
block|{
name|TokenInfo
name|tokenInfo
init|=
name|tokenProvider
operator|.
name|createToken
argument_list|(
name|userId
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|TokenProvider
operator|.
name|PARAM_TOKEN_EXPIRATION
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
comment|// wait until the info created has expired
if|if
condition|(
name|tokenInfo
operator|!=
literal|null
condition|)
block|{
name|waitUntilExpired
argument_list|(
name|tokenInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|int
name|createTokensUntilCleanup
parameter_list|()
block|{
name|int
name|tkn
init|=
literal|0
decl_stmt|;
name|boolean
name|clean
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|clean
operator|&&
name|tkn
operator|<
literal|50
condition|)
block|{
name|TokenInfo
name|tokenInfo
init|=
name|createTokenInfo
argument_list|(
name|tokenProvider
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|clean
operator|=
name|TokenProviderImpl
operator|.
name|shouldRunCleanup
argument_list|(
name|tokenInfo
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
name|tkn
operator|++
expr_stmt|;
block|}
return|return
name|tkn
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpiredBelowThreshold
parameter_list|()
throws|throws
name|Exception
block|{
name|createExpiredTokens
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertTokenNodes
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpiredReachingThreshold
parameter_list|()
throws|throws
name|Exception
block|{
comment|// one under the cleanup limit so cleanup doesn't get triggered
name|createExpiredTokens
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|int
name|extras
init|=
name|createTokensUntilCleanup
argument_list|()
decl_stmt|;
name|assertTokenNodes
argument_list|(
name|extras
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotExpiredReachingThreshold
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|tokenProvider
operator|.
name|createToken
argument_list|(
name|userId
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTokenNodes
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

