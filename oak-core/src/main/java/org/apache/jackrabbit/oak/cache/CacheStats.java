begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Weigher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CacheStatsMBean
import|;
end_import

begin_class
specifier|public
class|class
name|CacheStats
implements|implements
name|CacheStatsMBean
block|{
specifier|private
specifier|final
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
decl_stmt|;
specifier|private
specifier|final
name|Weigher
name|weigher
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxWeight
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheStats
name|statsSnapShot
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheStats
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|CacheStats
parameter_list|(
name|Cache
name|cache
parameter_list|,
name|String
name|name
parameter_list|,
name|Weigher
name|weigher
parameter_list|,
name|long
name|maxWeight
parameter_list|)
block|{
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|weigher
operator|=
name|weigher
expr_stmt|;
name|this
operator|.
name|maxWeight
operator|=
name|maxWeight
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getRequestCount
parameter_list|()
block|{
return|return
name|stats
argument_list|()
operator|.
name|requestCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getHitCount
parameter_list|()
block|{
return|return
name|stats
argument_list|()
operator|.
name|hitCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getHitRate
parameter_list|()
block|{
return|return
name|stats
argument_list|()
operator|.
name|hitRate
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMissCount
parameter_list|()
block|{
return|return
name|stats
argument_list|()
operator|.
name|missCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getMissRate
parameter_list|()
block|{
return|return
name|stats
argument_list|()
operator|.
name|missRate
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLoadCount
parameter_list|()
block|{
return|return
name|stats
argument_list|()
operator|.
name|loadCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLoadSuccessCount
parameter_list|()
block|{
return|return
name|stats
argument_list|()
operator|.
name|loadSuccessCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLoadExceptionCount
parameter_list|()
block|{
return|return
name|stats
argument_list|()
operator|.
name|loadExceptionCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getLoadExceptionRate
parameter_list|()
block|{
return|return
name|stats
argument_list|()
operator|.
name|loadExceptionRate
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTotalLoadTime
parameter_list|()
block|{
return|return
name|stats
argument_list|()
operator|.
name|totalLoadTime
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getAverageLoadPenalty
parameter_list|()
block|{
return|return
name|stats
argument_list|()
operator|.
name|averageLoadPenalty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getEvictionCount
parameter_list|()
block|{
return|return
name|stats
argument_list|()
operator|.
name|evictionCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getElementCount
parameter_list|()
block|{
return|return
name|cache
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|estimateCurrentWeight
parameter_list|()
block|{
if|if
condition|(
name|weigher
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|long
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|e
range|:
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|size
operator|+=
name|weigher
operator|.
name|weigh
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMaxTotalWeight
parameter_list|()
block|{
return|return
name|maxWeight
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|resetCache
parameter_list|()
block|{
comment|//Cache stats cannot be rest at Guava level. Instead we
comment|//take a snapshot and then subtract it from future stats calls
name|statsSnapShot
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|cacheInfoAsString
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|toStringHelper
argument_list|(
literal|"CacheStats"
argument_list|)
operator|.
name|add
argument_list|(
literal|"hitCount"
argument_list|,
name|getHitCount
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"hitRate"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%1.2f"
argument_list|,
name|getHitRate
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"missCount"
argument_list|,
name|getMissCount
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"missRate"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%1.2f"
argument_list|,
name|getMissRate
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"requestCount"
argument_list|,
name|getRequestCount
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"loadCount"
argument_list|,
name|getLoadCount
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"loadSuccessCount"
argument_list|,
name|getLoadSuccessCount
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"loadExceptionCount"
argument_list|,
name|getLoadExceptionCount
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"totalLoadTime"
argument_list|,
name|getTotalLoadTime
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"averageLoadPenalty"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%1.2f"
argument_list|,
name|getAverageLoadPenalty
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"evictionCount"
argument_list|,
name|getEvictionCount
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"elementCount"
argument_list|,
name|getElementCount
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"totalWeight"
argument_list|,
name|humanReadableByteCount
argument_list|(
name|estimateCurrentWeight
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"maxWeight"
argument_list|,
name|humanReadableByteCount
argument_list|(
name|getMaxTotalWeight
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|private
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheStats
name|stats
parameter_list|()
block|{
return|return
name|cache
operator|.
name|stats
argument_list|()
operator|.
name|minus
argument_list|(
name|statsSnapShot
argument_list|)
return|;
block|}
comment|/**      * Based on http://stackoverflow.com/a/3758880/1035417      */
specifier|private
specifier|static
name|String
name|humanReadableByteCount
parameter_list|(
name|long
name|bytes
parameter_list|,
name|boolean
name|si
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|<
literal|0
condition|)
block|{
return|return
literal|"0"
return|;
block|}
name|int
name|unit
init|=
name|si
condition|?
literal|1000
else|:
literal|1024
decl_stmt|;
if|if
condition|(
name|bytes
operator|<
name|unit
condition|)
return|return
name|bytes
operator|+
literal|" B"
return|;
name|int
name|exp
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|log
argument_list|(
name|bytes
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
name|unit
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|pre
init|=
operator|(
name|si
condition|?
literal|"kMGTPE"
else|:
literal|"KMGTPE"
operator|)
operator|.
name|charAt
argument_list|(
name|exp
operator|-
literal|1
argument_list|)
operator|+
operator|(
name|si
condition|?
literal|""
else|:
literal|"i"
operator|)
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%.1f %sB"
argument_list|,
name|bytes
operator|/
name|Math
operator|.
name|pow
argument_list|(
name|unit
argument_list|,
name|exp
argument_list|)
argument_list|,
name|pre
argument_list|)
return|;
block|}
block|}
end_class

end_unit

