begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * AccessControlValidator... TODO  */
end_comment

begin_class
class|class
name|AccessControlValidator
implements|implements
name|Validator
implements|,
name|AccessControlConstants
block|{
specifier|private
specifier|final
name|NodeUtil
name|parentBefore
decl_stmt|;
specifier|private
specifier|final
name|NodeUtil
name|parentAfter
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PrivilegeDefinition
argument_list|>
name|privilegeDefinitions
decl_stmt|;
specifier|private
specifier|final
name|RestrictionProvider
name|restrictionProvider
decl_stmt|;
name|AccessControlValidator
parameter_list|(
name|NodeUtil
name|parentBefore
parameter_list|,
name|NodeUtil
name|parentAfter
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|PrivilegeDefinition
argument_list|>
name|privilegeDefinitions
parameter_list|,
name|RestrictionProvider
name|restrictionProvider
parameter_list|)
block|{
name|this
operator|.
name|parentBefore
operator|=
name|parentBefore
expr_stmt|;
name|this
operator|.
name|parentAfter
operator|=
name|parentAfter
expr_stmt|;
name|this
operator|.
name|privilegeDefinitions
operator|=
name|privilegeDefinitions
expr_stmt|;
name|this
operator|.
name|restrictionProvider
operator|=
name|restrictionProvider
expr_stmt|;
block|}
comment|//----------------------------------------------------------< Validator>---
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|isAccessControlEntry
argument_list|(
name|parentAfter
argument_list|)
condition|)
block|{
name|checkValidAccessControlEntry
argument_list|(
name|parentAfter
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|isAccessControlEntry
argument_list|(
name|parentAfter
argument_list|)
condition|)
block|{
name|checkValidAccessControlEntry
argument_list|(
name|parentAfter
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
comment|// nothing to do: mandatory properties will be enforced by node type validator
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeUtil
name|node
init|=
name|parentAfter
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|checkNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAccessControlEntry
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|checkValidAccessControlEntry
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|AccessControlValidator
argument_list|(
literal|null
argument_list|,
name|node
argument_list|,
name|privilegeDefinitions
argument_list|,
name|restrictionProvider
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeUtil
name|nodeBefore
init|=
name|parentBefore
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|NodeUtil
name|nodeAfter
init|=
name|parentAfter
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|checkNotNull
argument_list|(
name|nodeBefore
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|nodeAfter
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAccessControlEntry
argument_list|(
name|nodeAfter
argument_list|)
condition|)
block|{
name|checkValidAccessControlEntry
argument_list|(
name|nodeAfter
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|AccessControlValidator
argument_list|(
name|nodeBefore
argument_list|,
name|nodeAfter
argument_list|,
name|privilegeDefinitions
argument_list|,
name|restrictionProvider
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
comment|// TODO validate acl / ace / restriction removal
return|return
literal|null
return|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
name|boolean
name|isAccessControlEntry
parameter_list|(
name|NodeUtil
name|node
parameter_list|)
block|{
name|String
name|ntName
init|=
name|node
operator|.
name|getPrimaryNodeTypeName
argument_list|()
decl_stmt|;
return|return
name|NT_REP_DENY_ACE
operator|.
name|equals
argument_list|(
name|ntName
argument_list|)
operator|||
name|NT_REP_GRANT_ACE
operator|.
name|equals
argument_list|(
name|ntName
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkValidAccessControlEntry
parameter_list|(
name|NodeUtil
name|aceNode
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|checkValidPrincipal
argument_list|(
name|aceNode
operator|.
name|getString
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|checkValidPrivileges
argument_list|(
name|aceNode
operator|.
name|getNames
argument_list|(
name|REP_PRIVILEGES
argument_list|)
argument_list|)
expr_stmt|;
name|checkValidRestrictions
argument_list|(
name|aceNode
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkValidPrincipal
parameter_list|(
name|String
name|principalName
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|principalName
operator|==
literal|null
operator|||
name|principalName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Missing principal name."
argument_list|)
expr_stmt|;
block|}
comment|// TODO
comment|// if (!principalMgr.hasPrincipal(principal.getName())) {
comment|//     throw new AccessControlException("Principal " + principal.getName() + " does not exist.");
comment|// }
block|}
specifier|private
name|void
name|checkValidPrivileges
parameter_list|(
name|String
index|[]
name|privilegeNames
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|privilegeNames
operator|==
literal|null
operator|||
name|privilegeNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"Missing privileges."
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|privilegeName
range|:
name|privilegeNames
control|)
block|{
if|if
condition|(
name|privilegeName
operator|==
literal|null
operator|||
operator|!
name|privilegeDefinitions
operator|.
name|containsKey
argument_list|(
name|privilegeName
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Invalid privilege "
operator|+
name|privilegeName
argument_list|)
expr_stmt|;
block|}
name|PrivilegeDefinition
name|def
init|=
name|privilegeDefinitions
operator|.
name|get
argument_list|(
name|privilegeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|def
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Abstract privilege "
operator|+
name|privilegeName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkValidRestrictions
parameter_list|(
name|NodeUtil
name|aceNode
parameter_list|)
throws|throws
name|CommitFailedException
block|{
try|try
block|{
name|String
name|path
init|=
literal|null
decl_stmt|;
comment|// TODO
name|restrictionProvider
operator|.
name|validateRestrictions
argument_list|(
name|path
argument_list|,
name|aceNode
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|fail
parameter_list|(
name|String
name|msg
parameter_list|)
throws|throws
name|CommitFailedException
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
operator|new
name|AccessControlException
argument_list|(
name|msg
argument_list|)
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

