begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_class
specifier|public
class|class
name|ConcurrentIndexUpdateIT
extends|extends
name|AbstractRepositoryTest
block|{
specifier|private
specifier|static
specifier|final
name|boolean
name|ENABLED
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|ConcurrentIndexUpdateIT
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_WRITERS
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_PATH
init|=
literal|"/test/folder"
decl_stmt|;
specifier|public
name|ConcurrentIndexUpdateIT
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|)
block|{
name|super
argument_list|(
name|fixture
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|before
parameter_list|()
block|{
name|assumeTrue
argument_list|(
name|ENABLED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|updates
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|getAdminSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|TEST_PATH
argument_list|)
control|)
block|{
name|n
operator|=
name|n
operator|.
name|addNode
argument_list|(
name|name
argument_list|,
literal|"oak:Unstructured"
argument_list|)
expr_stmt|;
block|}
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Exception
argument_list|>
name|exceptions
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Exception
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AtomicLong
argument_list|>
name|counters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|writers
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_WRITERS
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|id
init|=
name|i
decl_stmt|;
specifier|final
name|AtomicLong
name|counter
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|counters
operator|.
name|add
argument_list|(
name|counter
argument_list|)
expr_stmt|;
name|writers
operator|.
name|add
argument_list|(
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Session
name|s
init|=
name|createAdminSession
argument_list|()
decl_stmt|;
try|try
block|{
name|runTest
argument_list|(
name|s
operator|.
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|,
name|id
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|writers
control|)
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|anyRunning
argument_list|(
name|writers
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|before
init|=
name|currentValues
argument_list|(
name|counters
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|after
init|=
name|currentValues
argument_list|(
name|counters
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|diff
argument_list|(
name|after
argument_list|,
name|before
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Exception
name|e
range|:
name|exceptions
control|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|Long
argument_list|>
name|diff
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|after
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|before
parameter_list|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|diff
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|after
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|after
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|diff
operator|.
name|add
argument_list|(
name|after
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|-
name|before
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|diff
return|;
block|}
specifier|private
name|List
argument_list|<
name|Long
argument_list|>
name|currentValues
parameter_list|(
name|List
argument_list|<
name|AtomicLong
argument_list|>
name|counters
parameter_list|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|values
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|counters
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AtomicLong
name|v
range|:
name|counters
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|v
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
specifier|private
specifier|static
name|void
name|runTest
parameter_list|(
name|Node
name|n
parameter_list|,
name|int
name|id
parameter_list|,
name|AtomicLong
name|counter
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|n
operator|.
name|addNode
argument_list|(
literal|"node-"
operator|+
name|id
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|n
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|child
operator|.
name|remove
argument_list|()
expr_stmt|;
name|n
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|anyRunning
parameter_list|(
name|Iterable
argument_list|<
name|Thread
argument_list|>
name|threads
parameter_list|)
block|{
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
if|if
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

