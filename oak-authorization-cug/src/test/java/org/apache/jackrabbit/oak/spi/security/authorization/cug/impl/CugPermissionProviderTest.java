begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|cug
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|ControlFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_class
specifier|public
class|class
name|CugPermissionProviderTest
extends|extends
name|AbstractCugTest
block|{
specifier|private
name|CugPermissionProvider
name|ppSufficient
decl_stmt|;
specifier|private
name|CugPermissionProvider
name|ppRequisite
decl_stmt|;
annotation|@
name|Before
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
comment|// TODO
name|String
index|[]
name|supportedPaths
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
comment|// TODO
name|ppSufficient
operator|=
operator|new
name|CugPermissionProvider
argument_list|(
name|root
argument_list|,
name|principals
argument_list|,
name|supportedPaths
argument_list|,
name|ControlFlag
operator|.
name|SUFFICIENT
argument_list|,
name|CugContext
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|ppRequisite
operator|=
operator|new
name|CugPermissionProvider
argument_list|(
name|root
argument_list|,
name|principals
argument_list|,
name|supportedPaths
argument_list|,
name|ControlFlag
operator|.
name|REQUISITE
argument_list|,
name|CugContext
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFlag
parameter_list|()
block|{
name|assertSame
argument_list|(
name|ControlFlag
operator|.
name|SUFFICIENT
argument_list|,
name|ppSufficient
operator|.
name|getFlag
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ControlFlag
operator|.
name|REQUISITE
argument_list|,
name|ppRequisite
operator|.
name|getFlag
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlesPath
parameter_list|()
block|{
comment|// TODO
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlesTree
parameter_list|()
block|{
comment|// TODO
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlesRepositoryPermissions
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|ppSufficient
operator|.
name|handlesRepositoryPermissions
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ppRequisite
operator|.
name|handlesRepositoryPermissions
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPrivileges
parameter_list|()
block|{
comment|// TODO
block|}
annotation|@
name|Test
specifier|public
name|void
name|hasPrivileges
parameter_list|()
block|{
comment|// TODO
block|}
block|}
end_class

end_unit

