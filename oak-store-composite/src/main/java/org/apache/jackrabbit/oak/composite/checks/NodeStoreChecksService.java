begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
operator|.
name|checks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
operator|.
name|MountedNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|factories
operator|.
name|TreeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|NodeStoreChecks
operator|.
name|class
argument_list|)
specifier|public
class|class
name|NodeStoreChecksService
implements|implements
name|NodeStoreChecks
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_MULTIPLE
argument_list|,
name|bind
operator|=
literal|"bindChecker"
argument_list|,
name|unbind
operator|=
literal|"unbindChecker"
argument_list|,
name|referenceInterface
operator|=
name|MountedNodeStoreChecker
operator|.
name|class
argument_list|)
specifier|private
name|List
argument_list|<
name|MountedNodeStoreChecker
argument_list|<
name|?
argument_list|>
argument_list|>
name|checkers
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|MountInfoProvider
name|mip
decl_stmt|;
comment|// used by SCR
specifier|public
name|NodeStoreChecksService
parameter_list|()
block|{              }
comment|// visible for testing
specifier|public
name|NodeStoreChecksService
parameter_list|(
name|MountInfoProvider
name|mip
parameter_list|,
name|List
argument_list|<
name|MountedNodeStoreChecker
argument_list|<
name|?
argument_list|>
argument_list|>
name|checkers
parameter_list|)
block|{
name|this
operator|.
name|checkers
operator|=
name|checkers
expr_stmt|;
name|this
operator|.
name|mip
operator|=
name|mip
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|check
parameter_list|(
name|NodeStore
name|globalStore
parameter_list|,
name|MountedNodeStore
name|mountedStore
parameter_list|)
block|{
name|ErrorHolder
name|errorHolder
init|=
operator|new
name|ErrorHolder
argument_list|()
decl_stmt|;
name|checkers
operator|.
name|forEach
argument_list|(
name|c
lambda|->
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Checking NodeStore from mount {} with {}"
argument_list|,
name|mountedStore
operator|.
name|getMount
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|check
argument_list|(
name|mountedStore
argument_list|,
name|errorHolder
argument_list|,
name|globalStore
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Check complete"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|errorHolder
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|check
parameter_list|(
name|MountedNodeStore
name|mountedStore
parameter_list|,
name|ErrorHolder
name|errorHolder
parameter_list|,
name|NodeStore
name|globalStore
parameter_list|,
name|MountedNodeStoreChecker
argument_list|<
name|T
argument_list|>
name|c
parameter_list|)
block|{
name|T
name|context
init|=
name|c
operator|.
name|createContext
argument_list|(
name|globalStore
argument_list|,
name|mip
argument_list|)
decl_stmt|;
name|Tree
name|mountRoot
init|=
name|TreeFactory
operator|.
name|createReadOnlyTree
argument_list|(
name|mountedStore
operator|.
name|getNodeStore
argument_list|()
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|visit
argument_list|(
name|mountRoot
argument_list|,
name|mountedStore
argument_list|,
name|errorHolder
argument_list|,
name|context
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|visit
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|MountedNodeStore
name|mountedStore
parameter_list|,
name|ErrorHolder
name|errorHolder
parameter_list|,
name|T
name|context
parameter_list|,
name|MountedNodeStoreChecker
argument_list|<
name|T
argument_list|>
name|c
parameter_list|)
block|{
comment|// a mounted NodeStore may contain more paths than what it owns, but since these are not accessible
comment|// through the CompositeNodeStore skip them
name|Mount
name|mount
init|=
name|mountedStore
operator|.
name|getMount
argument_list|()
decl_stmt|;
name|boolean
name|under
init|=
name|mount
operator|.
name|isUnder
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|mounted
init|=
name|mount
operator|.
name|isMounted
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|keepGoing
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|mounted
condition|)
block|{
name|keepGoing
operator|=
name|c
operator|.
name|check
argument_list|(
name|mountedStore
argument_list|,
name|tree
argument_list|,
name|errorHolder
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|mounted
operator|||
name|under
operator|)
operator|&&
name|keepGoing
condition|)
block|{
name|tree
operator|.
name|getChildren
argument_list|()
operator|.
name|forEach
argument_list|(
name|child
lambda|->
name|visit
argument_list|(
name|child
argument_list|,
name|mountedStore
argument_list|,
name|errorHolder
argument_list|,
name|context
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|bindChecker
parameter_list|(
name|MountedNodeStoreChecker
argument_list|<
name|?
argument_list|>
name|checker
parameter_list|)
block|{
name|checkers
operator|.
name|add
argument_list|(
name|checker
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|unbindChecker
parameter_list|(
name|MountedNodeStoreChecker
argument_list|<
name|?
argument_list|>
name|checker
parameter_list|)
block|{
name|checkers
operator|.
name|remove
argument_list|(
name|checker
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

