begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * Utility BlobStore implementation to be used in tooling that can work with a  * FileStore without the need of the DataStore being present locally.  *  * Additionally instead of failing it tries to mimic and return blob reference  * passed in by<b>caller</b> by passing it back as a binary.  *  * Example: requesting<code>blobId = e7c22b994c59d9</code> it will return the  *<code>e7c22b994c59d9</code> text as a UTF-8 encoded binary file.  */
end_comment

begin_class
specifier|public
class|class
name|LoopbackBlobStore
implements|implements
name|BlobStore
block|{
annotation|@
name|Override
specifier|public
name|String
name|writeBlob
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|writeBlob
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|BlobOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|writeBlob
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|readBlob
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
block|{
comment|// Only a part of binary can be requested!
specifier|final
name|int
name|binaryLength
init|=
name|blobId
operator|.
name|length
argument_list|()
decl_stmt|;
name|checkBinaryOffsetInRange
argument_list|(
name|pos
argument_list|,
name|binaryLength
argument_list|)
expr_stmt|;
specifier|final
name|int
name|effectiveSrcPos
init|=
name|Math
operator|.
name|toIntExact
argument_list|(
name|pos
argument_list|)
decl_stmt|;
specifier|final
name|int
name|effectiveBlobLengthToBeRead
init|=
name|Math
operator|.
name|min
argument_list|(
name|binaryLength
operator|-
name|effectiveSrcPos
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|checkForBufferOverflow
argument_list|(
name|buff
argument_list|,
name|off
argument_list|,
name|effectiveBlobLengthToBeRead
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|blobIdBytes
init|=
name|getBlobIdStringAsByteArray
argument_list|(
name|blobId
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|blobIdBytes
argument_list|,
name|effectiveSrcPos
argument_list|,
name|buff
argument_list|,
name|off
argument_list|,
name|effectiveBlobLengthToBeRead
argument_list|)
expr_stmt|;
return|return
name|effectiveBlobLengthToBeRead
return|;
block|}
specifier|private
name|void
name|checkForBufferOverflow
parameter_list|(
specifier|final
name|byte
index|[]
name|buff
parameter_list|,
specifier|final
name|int
name|off
parameter_list|,
specifier|final
name|int
name|effectiveBlobLengthToBeRead
parameter_list|)
block|{
if|if
condition|(
name|buff
operator|.
name|length
operator|<
name|effectiveBlobLengthToBeRead
operator|+
name|off
condition|)
block|{
comment|// We cannot recover if buffer used to write is too small
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Edge case: cannot fit "
operator|+
literal|"blobId in a buffer (buffer too small)"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|checkBinaryOffsetInRange
parameter_list|(
specifier|final
name|long
name|pos
parameter_list|,
specifier|final
name|int
name|binaryLength
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|>
name|binaryLength
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Offset %d out of range of %d"
argument_list|,
name|pos
argument_list|,
name|binaryLength
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
name|byte
index|[]
name|getBlobIdStringAsByteArray
parameter_list|(
specifier|final
name|String
name|blobId
parameter_list|)
block|{
return|return
name|blobId
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getBlobLength
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|blobId
operator|.
name|length
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|getBlobIdStringAsByteArray
argument_list|(
name|blobId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getBlobId
parameter_list|(
annotation|@
name|NotNull
name|String
name|reference
parameter_list|)
block|{
return|return
name|checkNotNull
argument_list|(
name|reference
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReference
parameter_list|(
annotation|@
name|NotNull
name|String
name|blobId
parameter_list|)
block|{
return|return
name|checkNotNull
argument_list|(
name|blobId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{     }
block|}
end_class

end_unit

