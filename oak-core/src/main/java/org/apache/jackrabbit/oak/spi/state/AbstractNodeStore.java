begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|PostCommitHook
import|;
end_import

begin_comment
comment|/**  * Abstract base class for {@link NodeStore} implementations.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractNodeStore
implements|implements
name|NodeStore
block|{
comment|/**      * This default implementation is equal to first rebasing the builder      * and then applying it to a new branch and immediately merging it back.      *<p>      *<em>Note:</em> it is the caller's responsibility to ensure atomicity.      *      * @param builder  the builder whose changes to apply      * @param commitHook the commit hook to apply while merging changes      * @param committed  the pos commit hook      * @return the node state resulting from the merge.      * @throws CommitFailedException      */
annotation|@
name|Override
specifier|public
name|NodeState
name|merge
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|builder
parameter_list|,
annotation|@
name|Nonnull
name|CommitHook
name|commitHook
parameter_list|,
name|PostCommitHook
name|committed
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|checkNotNull
argument_list|(
name|commitHook
argument_list|)
expr_stmt|;
name|rebase
argument_list|(
name|checkNotNull
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
name|NodeStoreBranch
name|branch
init|=
name|branch
argument_list|()
decl_stmt|;
name|branch
operator|.
name|setRoot
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|NodeState
name|merged
init|=
name|branch
operator|.
name|merge
argument_list|(
name|commitHook
argument_list|,
name|committed
argument_list|)
decl_stmt|;
name|builder
operator|.
name|reset
argument_list|(
name|merged
argument_list|)
expr_stmt|;
return|return
name|merged
return|;
block|}
comment|/**      * This default implementation is equal to applying the differences between      * the builders base state and its head state to a fresh builder on the      * stores root state using {@link ConflictAnnotatingRebaseDiff} for resolving      * conflicts.      * @param builder  the builder to rebase      * @return the node state resulting from the rebase.      */
annotation|@
name|Override
specifier|public
name|NodeState
name|rebase
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|NodeState
name|head
init|=
name|checkNotNull
argument_list|(
name|builder
argument_list|)
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|base
init|=
name|builder
operator|.
name|getBaseState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|reset
argument_list|(
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|head
operator|.
name|compareAgainstBaseState
argument_list|(
name|base
argument_list|,
operator|new
name|ConflictAnnotatingRebaseDiff
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getNodeState
argument_list|()
return|;
block|}
comment|/**      * This default implementation is equal resetting the builder to the root of      * the store and returning the resulting node state from the builder.      * @param builder the builder to reset      * @return the node state resulting from the reset.      */
annotation|@
name|Override
specifier|public
name|NodeState
name|reset
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|reset
argument_list|(
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getNodeState
argument_list|()
return|;
block|}
comment|//------------------------------------------------------------< Object>--
comment|/**      * Returns a string representation the head state of this node store.      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getRoot
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

