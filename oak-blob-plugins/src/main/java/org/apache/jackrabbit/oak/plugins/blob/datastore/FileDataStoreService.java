begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|AbstractSharedCachingDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
name|name
operator|=
name|FileDataStoreService
operator|.
name|NAME
argument_list|)
specifier|public
class|class
name|FileDataStoreService
extends|extends
name|AbstractDataStoreService
block|{
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"oak.datastore.description"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_PATH
init|=
literal|"cachePath"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_SIZE
init|=
literal|"cacheSize"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FS_BACKEND_PATH
init|=
literal|"fsBackendPath"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PATH
init|=
literal|"path"
decl_stmt|;
specifier|private
name|ServiceRegistration
name|delegateReg
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|DataStore
name|createDataStore
parameter_list|(
name|ComponentContext
name|context
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
name|long
name|cacheSize
init|=
name|PropertiesUtil
operator|.
name|toLong
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|CACHE_SIZE
argument_list|)
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
comment|// return CachingFDS when cacheSize> 0
if|if
condition|(
name|cacheSize
operator|>
literal|0
condition|)
block|{
name|String
name|fsBackendPath
init|=
name|PropertiesUtil
operator|.
name|toString
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|PATH
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|fsBackendPath
argument_list|,
literal|"Cannot create "
operator|+
literal|"FileDataStoreService with caching. [{path}] property not configured."
argument_list|)
expr_stmt|;
name|config
operator|.
name|remove
argument_list|(
name|PATH
argument_list|)
expr_stmt|;
name|config
operator|.
name|remove
argument_list|(
name|CACHE_SIZE
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|FS_BACKEND_PATH
argument_list|,
name|fsBackendPath
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"cacheSize"
argument_list|,
name|cacheSize
argument_list|)
expr_stmt|;
name|String
name|cachePath
init|=
name|PropertiesUtil
operator|.
name|toString
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|CACHE_PATH
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachePath
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|remove
argument_list|(
name|CACHE_PATH
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|PATH
argument_list|,
name|cachePath
argument_list|)
expr_stmt|;
block|}
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|putAll
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Initializing with properties "
operator|+
name|properties
argument_list|)
expr_stmt|;
return|return
name|getCachingDataStore
argument_list|(
name|properties
argument_list|,
name|context
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"OakFileDataStore initialized"
argument_list|)
expr_stmt|;
return|return
operator|new
name|OakFileDataStore
argument_list|()
return|;
block|}
block|}
specifier|private
name|DataStore
name|getCachingDataStore
parameter_list|(
name|Properties
name|props
parameter_list|,
name|ComponentContext
name|context
parameter_list|)
block|{
name|CachingFileDataStore
name|dataStore
init|=
operator|new
name|CachingFileDataStore
argument_list|()
decl_stmt|;
name|dataStore
operator|.
name|setStagingSplitPercentage
argument_list|(
name|PropertiesUtil
operator|.
name|toInteger
argument_list|(
name|props
operator|.
name|get
argument_list|(
literal|"stagingSplitPercentage"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|dataStore
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
name|dataStore
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|DESCRIPTION
argument_list|,
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|delegateReg
operator|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|registerService
argument_list|(
operator|new
name|String
index|[]
block|{
name|AbstractSharedCachingDataStore
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|AbstractSharedCachingDataStore
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|,
name|dataStore
argument_list|,
name|config
argument_list|)
expr_stmt|;
return|return
name|dataStore
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
index|[]
name|getDescription
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"type=filesystem"
block|}
return|;
block|}
block|}
end_class

end_unit

