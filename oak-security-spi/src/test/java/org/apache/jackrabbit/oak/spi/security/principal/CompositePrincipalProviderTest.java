begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|GroupPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|CompositePrincipalProviderTest
block|{
specifier|private
specifier|final
name|TestPrincipalProvider
name|pp1
init|=
operator|new
name|TestPrincipalProvider
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|TestPrincipalProvider
name|pp2
init|=
operator|new
name|TestPrincipalProvider
argument_list|(
literal|"p1"
argument_list|,
literal|"p2"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|PrincipalProvider
name|cpp
init|=
name|CompositePrincipalProvider
operator|.
name|of
argument_list|(
name|ImmutableList
operator|.
expr|<
name|PrincipalProvider
operator|>
name|of
argument_list|(
name|pp1
argument_list|,
name|pp2
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|Iterable
argument_list|<
name|Principal
argument_list|>
name|testPrincipals
parameter_list|()
block|{
return|return
name|Iterables
operator|.
name|concat
argument_list|(
name|pp1
operator|.
name|getTestPrincipals
argument_list|()
argument_list|,
name|pp2
operator|.
name|getTestPrincipals
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|assertIterator
parameter_list|(
annotation|@
name|NotNull
name|Iterable
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|expected
parameter_list|,
annotation|@
name|NotNull
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|result
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|expected
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOfEmptyList
parameter_list|()
block|{
name|assertSame
argument_list|(
name|EmptyPrincipalProvider
operator|.
name|INSTANCE
argument_list|,
name|CompositePrincipalProvider
operator|.
name|of
argument_list|(
name|ImmutableList
operator|.
expr|<
name|PrincipalProvider
operator|>
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOfSingletonList
parameter_list|()
block|{
name|PrincipalProvider
name|pp
init|=
operator|new
name|TestPrincipalProvider
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|pp
argument_list|,
name|CompositePrincipalProvider
operator|.
name|of
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|pp
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOfList
parameter_list|()
block|{
name|assertNotSame
argument_list|(
name|pp1
argument_list|,
name|cpp
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|pp2
argument_list|,
name|cpp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cpp
operator|instanceof
name|CompositePrincipalProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPrincipalUnknown
parameter_list|()
block|{
name|assertNull
argument_list|(
name|cpp
operator|.
name|getPrincipal
argument_list|(
name|TestPrincipalProvider
operator|.
name|UNKNOWN
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPrincipal
parameter_list|()
block|{
for|for
control|(
name|Principal
name|principal
range|:
name|testPrincipals
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|principal
argument_list|,
name|cpp
operator|.
name|getPrincipal
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|getGroupMembership
parameter_list|()
block|{
for|for
control|(
name|Principal
name|principal
range|:
name|testPrincipals
argument_list|()
control|)
block|{
name|boolean
name|atleastEveryone
init|=
name|cpp
operator|.
name|getMembershipPrincipals
argument_list|(
name|principal
argument_list|)
operator|.
name|contains
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"All principals (except everyone) must be member of the everyone group. Violation: "
operator|+
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|atleastEveryone
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|getGroupMembershipUnknown
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|cpp
operator|.
name|getMembershipPrincipals
argument_list|(
name|TestPrincipalProvider
operator|.
name|UNKNOWN
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalsByUnknownId
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|cpp
operator|.
name|getPrincipals
argument_list|(
name|TestPrincipalProvider
operator|.
name|getIDFromPrincipal
argument_list|(
name|TestPrincipalProvider
operator|.
name|UNKNOWN
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|findPrincipalsUnknown
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|cpp
operator|.
name|findPrincipals
argument_list|(
name|TestPrincipalProvider
operator|.
name|UNKNOWN
operator|.
name|getName
argument_list|()
argument_list|,
name|PrincipalManager
operator|.
name|SEARCH_TYPE_ALL
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cpp
operator|.
name|findPrincipals
argument_list|(
name|TestPrincipalProvider
operator|.
name|UNKNOWN
operator|.
name|getName
argument_list|()
argument_list|,
name|PrincipalManager
operator|.
name|SEARCH_TYPE_NOT_GROUP
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cpp
operator|.
name|findPrincipals
argument_list|(
name|TestPrincipalProvider
operator|.
name|UNKNOWN
operator|.
name|getName
argument_list|()
argument_list|,
name|PrincipalManager
operator|.
name|SEARCH_TYPE_GROUP
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|findPrincipalsByTypeGroup
parameter_list|()
block|{
name|Iterable
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|expected
init|=
name|Iterables
operator|.
name|concat
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|,
name|Iterables
operator|.
name|filter
argument_list|(
name|testPrincipals
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Principal
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Principal
name|input
parameter_list|)
block|{
return|return
name|input
operator|instanceof
name|GroupPrincipal
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|result
init|=
name|cpp
operator|.
name|findPrincipals
argument_list|(
name|PrincipalManager
operator|.
name|SEARCH_TYPE_GROUP
argument_list|)
decl_stmt|;
name|assertIterator
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|findPrincipalsByTypeNotGroup
parameter_list|()
block|{
name|Iterable
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|expected
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|testPrincipals
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Principal
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Principal
name|input
parameter_list|)
block|{
return|return
operator|!
operator|(
name|input
operator|instanceof
name|GroupPrincipal
operator|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|result
init|=
name|cpp
operator|.
name|findPrincipals
argument_list|(
name|PrincipalManager
operator|.
name|SEARCH_TYPE_NOT_GROUP
argument_list|)
decl_stmt|;
name|assertIterator
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|findPrincipalsByTypeAll
parameter_list|()
block|{
name|Iterator
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|result
init|=
name|cpp
operator|.
name|findPrincipals
argument_list|(
name|PrincipalManager
operator|.
name|SEARCH_TYPE_ALL
argument_list|)
decl_stmt|;
name|assertIterator
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|,
name|testPrincipals
argument_list|()
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

