begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|value
operator|.
name|jcr
operator|.
name|ValueFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|SystemSubject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalUser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncedIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|basic
operator|.
name|DefaultSyncResultImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|basic
operator|.
name|DefaultSyncedIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_class
specifier|final
class|class
name|Delegatee
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Delegatee
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_CREATE_DELEGATEE
init|=
literal|"Unable to create delegatee"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_SYNC_USER
init|=
literal|"Error while syncing user {}"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NO_BATCH_SIZE
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BATCH_SIZE
init|=
literal|100
decl_stmt|;
specifier|private
specifier|final
name|SyncHandler
name|handler
decl_stmt|;
specifier|private
specifier|final
name|ExternalIdentityProvider
name|idp
decl_stmt|;
specifier|private
specifier|final
name|UserManager
name|userMgr
decl_stmt|;
specifier|private
specifier|final
name|ContentSession
name|systemSession
decl_stmt|;
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
specifier|private
specifier|final
name|int
name|batchSize
decl_stmt|;
specifier|private
name|SyncContext
name|context
decl_stmt|;
specifier|private
name|Delegatee
parameter_list|(
annotation|@
name|NotNull
name|SyncHandler
name|handler
parameter_list|,
annotation|@
name|NotNull
name|ExternalIdentityProvider
name|idp
parameter_list|,
annotation|@
name|NotNull
name|ContentSession
name|systemSession
parameter_list|,
annotation|@
name|NotNull
name|SecurityProvider
name|securityProvider
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
name|this
operator|.
name|idp
operator|=
name|idp
expr_stmt|;
name|this
operator|.
name|systemSession
operator|=
name|systemSession
expr_stmt|;
name|this
operator|.
name|batchSize
operator|=
name|batchSize
expr_stmt|;
name|root
operator|=
name|systemSession
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
name|userMgr
operator|=
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getUserManager
argument_list|(
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|context
operator|=
name|handler
operator|.
name|createContext
argument_list|(
name|idp
argument_list|,
name|userMgr
argument_list|,
operator|new
name|ValueFactoryImpl
argument_list|(
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Created delegatee for SyncMBean with session: {} {}"
argument_list|,
name|systemSession
argument_list|,
name|systemSession
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|NotNull
specifier|static
name|Delegatee
name|createInstance
parameter_list|(
annotation|@
name|NotNull
name|ContentRepository
name|repository
parameter_list|,
annotation|@
name|NotNull
name|SecurityProvider
name|securityProvider
parameter_list|,
annotation|@
name|NotNull
name|SyncHandler
name|handler
parameter_list|,
annotation|@
name|NotNull
name|ExternalIdentityProvider
name|idp
parameter_list|)
block|{
return|return
name|createInstance
argument_list|(
name|repository
argument_list|,
name|securityProvider
argument_list|,
name|handler
argument_list|,
name|idp
argument_list|,
name|DEFAULT_BATCH_SIZE
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|static
name|Delegatee
name|createInstance
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|ContentRepository
name|repository
parameter_list|,
annotation|@
name|NotNull
name|SecurityProvider
name|securityProvider
parameter_list|,
annotation|@
name|NotNull
name|SyncHandler
name|handler
parameter_list|,
annotation|@
name|NotNull
name|ExternalIdentityProvider
name|idp
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
name|ContentSession
name|systemSession
decl_stmt|;
try|try
block|{
name|systemSession
operator|=
name|Subject
operator|.
name|doAs
argument_list|(
name|SystemSubject
operator|.
name|INSTANCE
argument_list|,
call|(
name|PrivilegedExceptionAction
argument_list|<
name|ContentSession
argument_list|>
call|)
argument_list|()
operator|->
name|repository
operator|.
name|login
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SyncRuntimeException
argument_list|(
name|ERROR_CREATE_DELEGATEE
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|Delegatee
argument_list|(
name|handler
argument_list|,
name|idp
argument_list|,
name|systemSession
argument_list|,
name|securityProvider
argument_list|,
name|batchSize
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|close
parameter_list|(
annotation|@
name|NotNull
name|ContentSession
name|systemSession
parameter_list|)
block|{
try|try
block|{
name|systemSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while closing ContentSession {}"
argument_list|,
name|systemSession
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
name|context
operator|=
literal|null
expr_stmt|;
block|}
name|close
argument_list|(
name|systemSession
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see SynchronizationMBean#syncUsers(String[], boolean)      */
annotation|@
name|NotNull
name|String
index|[]
name|syncUsers
parameter_list|(
annotation|@
name|NotNull
name|String
index|[]
name|userIds
parameter_list|,
name|boolean
name|purge
parameter_list|)
block|{
name|context
operator|.
name|setKeepMissing
argument_list|(
operator|!
name|purge
argument_list|)
operator|.
name|setForceGroupSync
argument_list|(
literal|true
argument_list|)
operator|.
name|setForceUserSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ResultMessages
name|messages
init|=
operator|new
name|ResultMessages
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SyncResult
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|batchSize
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|userId
range|:
name|userIds
control|)
block|{
name|results
operator|=
name|syncUser
argument_list|(
name|userId
argument_list|,
literal|false
argument_list|,
name|results
argument_list|,
name|messages
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|(
name|messages
argument_list|,
name|results
argument_list|,
name|NO_BATCH_SIZE
argument_list|)
expr_stmt|;
return|return
name|messages
operator|.
name|getMessages
argument_list|()
return|;
block|}
comment|/**      * @see SynchronizationMBean#syncAllUsers(boolean)      */
annotation|@
name|NotNull
name|String
index|[]
name|syncAllUsers
parameter_list|(
name|boolean
name|purge
parameter_list|)
block|{
try|try
block|{
name|ResultMessages
name|messages
init|=
operator|new
name|ResultMessages
argument_list|()
decl_stmt|;
name|context
operator|.
name|setKeepMissing
argument_list|(
operator|!
name|purge
argument_list|)
operator|.
name|setForceGroupSync
argument_list|(
literal|true
argument_list|)
operator|.
name|setForceUserSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|SyncedIdentity
argument_list|>
name|it
init|=
name|handler
operator|.
name|listIdentities
argument_list|(
name|userMgr
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SyncResult
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|batchSize
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SyncedIdentity
name|id
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|isMyIDP
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|results
operator|=
name|syncUser
argument_list|(
name|id
operator|.
name|getId
argument_list|()
argument_list|,
literal|false
argument_list|,
name|results
argument_list|,
name|messages
argument_list|)
expr_stmt|;
block|}
block|}
name|commit
argument_list|(
name|messages
argument_list|,
name|results
argument_list|,
name|NO_BATCH_SIZE
argument_list|)
expr_stmt|;
return|return
name|messages
operator|.
name|getMessages
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error retrieving users for syncing"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * @see SynchronizationMBean#syncExternalUsers(String[])      */
annotation|@
name|NotNull
name|String
index|[]
name|syncExternalUsers
parameter_list|(
annotation|@
name|NotNull
name|String
index|[]
name|externalIds
parameter_list|)
block|{
name|ResultMessages
name|messages
init|=
operator|new
name|ResultMessages
argument_list|()
decl_stmt|;
name|context
operator|.
name|setForceGroupSync
argument_list|(
literal|true
argument_list|)
operator|.
name|setForceUserSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SyncResult
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|batchSize
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|externalId
range|:
name|externalIds
control|)
block|{
name|ExternalIdentityRef
name|ref
init|=
name|ExternalIdentityRef
operator|.
name|fromString
argument_list|(
name|externalId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|idp
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ref
operator|.
name|getProviderName
argument_list|()
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
operator|new
name|DefaultSyncResultImpl
argument_list|(
operator|new
name|DefaultSyncedIdentity
argument_list|(
name|ref
operator|.
name|getId
argument_list|()
argument_list|,
name|ref
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|FOREIGN
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|ExternalIdentity
name|id
init|=
name|idp
operator|.
name|getIdentity
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|results
operator|=
name|syncUser
argument_list|(
name|id
argument_list|,
name|results
argument_list|,
name|messages
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|results
operator|.
name|add
argument_list|(
operator|new
name|DefaultSyncResultImpl
argument_list|(
operator|new
name|DefaultSyncedIdentity
argument_list|(
literal|""
argument_list|,
name|ref
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|NO_SUCH_IDENTITY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ExternalIdentityException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"error while fetching the external identity {}"
argument_list|,
name|externalId
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
operator|new
name|ErrorSyncResult
argument_list|(
name|ref
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|commit
argument_list|(
name|messages
argument_list|,
name|results
argument_list|,
name|NO_BATCH_SIZE
argument_list|)
expr_stmt|;
return|return
name|messages
operator|.
name|getMessages
argument_list|()
return|;
block|}
comment|/**      * @see SynchronizationMBean#syncAllExternalUsers()      */
annotation|@
name|NotNull
name|String
index|[]
name|syncAllExternalUsers
parameter_list|()
block|{
name|ResultMessages
name|messages
init|=
operator|new
name|ResultMessages
argument_list|()
decl_stmt|;
name|context
operator|.
name|setForceGroupSync
argument_list|(
literal|true
argument_list|)
operator|.
name|setForceUserSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|SyncResult
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|batchSize
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|ExternalUser
argument_list|>
name|it
init|=
name|idp
operator|.
name|listUsers
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExternalUser
name|user
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|results
operator|=
name|syncUser
argument_list|(
name|user
argument_list|,
name|results
argument_list|,
name|messages
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|(
name|messages
argument_list|,
name|results
argument_list|,
name|NO_BATCH_SIZE
argument_list|)
expr_stmt|;
return|return
name|messages
operator|.
name|getMessages
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ExternalIdentityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SyncRuntimeException
argument_list|(
literal|"Unable to retrieve external users"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * @see SynchronizationMBean#listOrphanedUsers()      */
annotation|@
name|NotNull
name|String
index|[]
name|listOrphanedUsers
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|toArray
argument_list|(
name|internalListOrphanedIdentities
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * @see SynchronizationMBean#purgeOrphanedUsers()      */
annotation|@
name|NotNull
name|String
index|[]
name|purgeOrphanedUsers
parameter_list|()
block|{
name|context
operator|.
name|setKeepMissing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ResultMessages
name|messages
init|=
operator|new
name|ResultMessages
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|orphanedIdentities
init|=
name|internalListOrphanedIdentities
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SyncResult
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|batchSize
argument_list|)
decl_stmt|;
while|while
condition|(
name|orphanedIdentities
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|userId
init|=
name|orphanedIdentities
operator|.
name|next
argument_list|()
decl_stmt|;
name|results
operator|=
name|syncUser
argument_list|(
name|userId
argument_list|,
literal|true
argument_list|,
name|results
argument_list|,
name|messages
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|(
name|messages
argument_list|,
name|results
argument_list|,
name|NO_BATCH_SIZE
argument_list|)
expr_stmt|;
return|return
name|messages
operator|.
name|getMessages
argument_list|()
return|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
name|boolean
name|isMyIDP
parameter_list|(
annotation|@
name|NotNull
name|SyncedIdentity
name|id
parameter_list|)
block|{
name|ExternalIdentityRef
name|ref
init|=
name|id
operator|.
name|getExternalIdRef
argument_list|()
decl_stmt|;
name|String
name|providerName
init|=
operator|(
name|ref
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|ref
operator|.
name|getProviderName
argument_list|()
decl_stmt|;
return|return
name|providerName
operator|!=
literal|null
operator|&&
name|providerName
operator|.
name|equals
argument_list|(
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|List
argument_list|<
name|SyncResult
argument_list|>
name|syncUser
parameter_list|(
annotation|@
name|NotNull
name|ExternalIdentity
name|id
parameter_list|,
annotation|@
name|NotNull
name|List
argument_list|<
name|SyncResult
argument_list|>
name|results
parameter_list|,
annotation|@
name|NotNull
name|ResultMessages
name|messages
parameter_list|)
block|{
try|try
block|{
name|SyncResult
name|r
init|=
name|context
operator|.
name|sync
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getIdentity
argument_list|()
operator|==
literal|null
condition|)
block|{
name|r
operator|=
operator|new
name|DefaultSyncResultImpl
argument_list|(
operator|new
name|DefaultSyncedIdentity
argument_list|(
name|id
operator|.
name|getId
argument_list|()
argument_list|,
name|id
operator|.
name|getExternalId
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|NO_SUCH_IDENTITY
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"sync failed. {}"
argument_list|,
name|r
operator|.
name|getIdentity
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"synced {}"
argument_list|,
name|r
operator|.
name|getIdentity
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SyncException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|ERROR_SYNC_USER
argument_list|,
name|id
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
operator|new
name|ErrorSyncResult
argument_list|(
name|id
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|commit
argument_list|(
name|messages
argument_list|,
name|results
argument_list|,
name|batchSize
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|List
argument_list|<
name|SyncResult
argument_list|>
name|syncUser
parameter_list|(
annotation|@
name|NotNull
name|String
name|userId
parameter_list|,
name|boolean
name|includeIdpName
parameter_list|,
annotation|@
name|NotNull
name|List
argument_list|<
name|SyncResult
argument_list|>
name|results
parameter_list|,
annotation|@
name|NotNull
name|ResultMessages
name|messages
parameter_list|)
block|{
try|try
block|{
name|results
operator|.
name|add
argument_list|(
name|context
operator|.
name|sync
argument_list|(
name|userId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SyncException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|ERROR_SYNC_USER
argument_list|,
name|userId
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
operator|new
name|ErrorSyncResult
argument_list|(
name|userId
argument_list|,
operator|(
operator|(
name|includeIdpName
operator|)
condition|?
name|idp
operator|.
name|getName
argument_list|()
else|:
literal|null
operator|)
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|commit
argument_list|(
name|messages
argument_list|,
name|results
argument_list|,
name|batchSize
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|List
argument_list|<
name|SyncResult
argument_list|>
name|commit
parameter_list|(
annotation|@
name|NotNull
name|ResultMessages
name|messages
parameter_list|,
annotation|@
name|NotNull
name|List
argument_list|<
name|SyncResult
argument_list|>
name|resultList
parameter_list|,
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|resultList
operator|.
name|isEmpty
argument_list|()
operator|||
name|resultList
operator|.
name|size
argument_list|()
operator|<
name|size
condition|)
block|{
return|return
name|resultList
return|;
block|}
else|else
block|{
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|messages
operator|.
name|append
argument_list|(
name|resultList
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|messages
operator|.
name|append
argument_list|(
name|resultList
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// make sure there are not pending changes that would fail the next batches
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
return|;
block|}
block|}
annotation|@
name|NotNull
specifier|private
name|Iterator
argument_list|<
name|String
argument_list|>
name|internalListOrphanedIdentities
parameter_list|()
block|{
try|try
block|{
name|Iterator
argument_list|<
name|SyncedIdentity
argument_list|>
name|it
init|=
name|handler
operator|.
name|listIdentities
argument_list|(
name|userMgr
argument_list|)
decl_stmt|;
return|return
name|Iterators
operator|.
name|filter
argument_list|(
name|Iterators
operator|.
name|transform
argument_list|(
name|it
argument_list|,
name|syncedIdentity
lambda|->
block|{
if|if
condition|(
name|syncedIdentity
operator|!=
literal|null
operator|&&
name|isMyIDP
argument_list|(
name|syncedIdentity
argument_list|)
condition|)
block|{
try|try
block|{
comment|// nonNull-ExternalIdRef has already been asserted by 'isMyIDP'
name|ExternalIdentity
name|extId
init|=
name|idp
operator|.
name|getIdentity
argument_list|(
name|checkNotNull
argument_list|(
name|syncedIdentity
operator|.
name|getExternalIdRef
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|extId
operator|==
literal|null
condition|)
block|{
return|return
name|syncedIdentity
operator|.
name|getId
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ExternalIdentityException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while fetching external identity {}"
argument_list|,
name|syncedIdentity
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
argument_list|)
argument_list|,
name|Predicates
operator|.
name|notNull
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while listing orphaned users"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

