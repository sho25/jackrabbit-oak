begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|UserImporterImpersonationIgnoreTest
extends|extends
name|UserImporterBaseTest
block|{
name|Tree
name|userTree
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
name|userTree
operator|=
name|createUserTree
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnknownImpersonators
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_IMPERSONATORS
argument_list|,
literal|"impersonator1"
argument_list|,
literal|"impersonator2"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_USER
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|processReferences
argument_list|()
expr_stmt|;
comment|// default importbehavior == IGNORE
name|PropertyState
name|impersonators
init|=
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_IMPERSONATORS
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|impersonators
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testKnownImpersonators
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_IMPERSONATORS
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_USER
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|processReferences
argument_list|()
expr_stmt|;
name|PropertyState
name|impersonators
init|=
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_IMPERSONATORS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|impersonators
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|testUser
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|impersonators
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMixedImpersonators
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_IMPERSONATORS
argument_list|,
literal|"impersonator1"
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_USER
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|processReferences
argument_list|()
expr_stmt|;
name|PropertyState
name|impersonators
init|=
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_IMPERSONATORS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|impersonators
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|testUser
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|impersonators
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testUserRemovedBeforeProcessing
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_IMPERSONATORS
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_USER
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|userTree
operator|.
name|remove
argument_list|()
expr_stmt|;
name|importer
operator|.
name|processReferences
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testUserConvertedGroupBeforeProcessing
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_IMPERSONATORS
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_USER
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|userTree
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_GROUP
argument_list|)
expr_stmt|;
name|importer
operator|.
name|processReferences
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceExistingProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|userTree
operator|.
name|setProperty
argument_list|(
name|REP_IMPERSONATORS
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"impersonator1"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_IMPERSONATORS
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_USER
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|processReferences
argument_list|()
expr_stmt|;
name|PropertyState
name|impersonators
init|=
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_IMPERSONATORS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|impersonators
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|testUser
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|impersonators
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNewImpersonator
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|folder
init|=
name|root
operator|.
name|getTree
argument_list|(
name|getUserConfiguration
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|getConfigValue
argument_list|(
name|PARAM_USER_PATH
argument_list|,
name|DEFAULT_USER_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|impersonatorTree
init|=
name|folder
operator|.
name|addChild
argument_list|(
literal|"impersonatorTree"
argument_list|)
decl_stmt|;
name|impersonatorTree
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_USER
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|impersonatorTree
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_UUID
argument_list|,
operator|new
name|UserProvider
argument_list|(
name|root
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
operator|.
name|getContentID
argument_list|(
literal|"impersonator1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_IMPERSONATORS
argument_list|,
literal|"impersonator1"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_USER
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|impersonatorTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
literal|"impersonator1"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_AUTHORIZABLE
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|processReferences
argument_list|()
expr_stmt|;
name|PropertyState
name|impersonators
init|=
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_IMPERSONATORS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|impersonators
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"impersonator1"
argument_list|)
argument_list|,
name|impersonators
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNewImpersonator2
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|folder
init|=
name|root
operator|.
name|getTree
argument_list|(
name|getUserConfiguration
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|getConfigValue
argument_list|(
name|PARAM_USER_PATH
argument_list|,
name|DEFAULT_USER_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|impersonatorTree
init|=
name|folder
operator|.
name|addChild
argument_list|(
literal|"impersonatorTree"
argument_list|)
decl_stmt|;
name|impersonatorTree
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_USER
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|impersonatorTree
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_UUID
argument_list|,
operator|new
name|UserProvider
argument_list|(
name|root
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
operator|.
name|getContentID
argument_list|(
literal|"impersonator1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// NOTE: reversed over of import compared to 'testNewImpersonator'
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|impersonatorTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
literal|"impersonator1"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_AUTHORIZABLE
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|userTree
argument_list|,
name|createPropInfo
argument_list|(
name|REP_IMPERSONATORS
argument_list|,
literal|"impersonator1"
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|NT_REP_USER
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|processReferences
argument_list|()
expr_stmt|;
name|PropertyState
name|impersonators
init|=
name|userTree
operator|.
name|getProperty
argument_list|(
name|REP_IMPERSONATORS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|impersonators
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"impersonator1"
argument_list|)
argument_list|,
name|impersonators
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

