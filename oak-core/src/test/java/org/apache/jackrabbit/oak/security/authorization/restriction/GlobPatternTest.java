begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|GlobPatternTest
block|{
specifier|private
specifier|static
name|void
name|assertMatch
parameter_list|(
name|GlobPattern
name|gp
parameter_list|,
name|String
name|testPath
parameter_list|,
name|Boolean
name|expectedResult
parameter_list|)
block|{
name|Boolean
name|match
init|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|gp
operator|.
name|matches
argument_list|(
name|testPath
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Pattern : "
operator|+
name|gp
operator|+
literal|"; TestPath : "
operator|+
name|testPath
argument_list|,
name|expectedResult
argument_list|,
name|match
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatchesWildcardAll
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tests
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
comment|// restriction "*" matches /foo, all siblings of foo and foo's and the siblings' descendants
name|GlobPattern
name|gp
init|=
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
comment|// matching
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// foo itself
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// child of foo
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// child of foo
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// child of foo
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cde"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// sibling
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cde/e/f"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// child of the sibling
comment|// not-matching
name|tests
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/b/c"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|gp
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// restriction "*cat" matches all siblings and descendants of /foo that have a name ending with cat
name|gp
operator|=
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"*e"
argument_list|)
expr_stmt|;
name|tests
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
expr_stmt|;
comment|// matching
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/e"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// descendant with name segment 'e'
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// descendant with name segment 'e'
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/gge"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// descendant with name segment ending with 'e'
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/gge"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// descendant with name segment ending with 'e'
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// sibling whose name ends with 'e'
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/chee"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// sibling whose name ends with 'e'
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/e"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// descendant of sibling named 'e'
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/f/e"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// descendant of sibling named 'e'
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/e"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// descendant of sibling with name ending with 'e'
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/f/e"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// descendant of sibling with name ending with 'e'
comment|// not-matching
name|tests
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/b/c"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/efg"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ceg"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|gp
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// restriction "*/cat" matches all descendants of /foo and foo's siblings that have a name segment "cat"
name|gp
operator|=
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"*/e"
argument_list|)
expr_stmt|;
name|tests
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
expr_stmt|;
comment|// matching
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/e"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// descendant with name segment 'e'
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// descendant with name segment 'e'
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/e"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// descendant of sibling named 'e'
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/f/e"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// descendant of sibling named 'e'
comment|// not-matching
name|tests
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/b/c"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/efg"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|gp
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// matches target path '/a/b/c/e', all siblings whose name starts with e
comment|// and child nodes of either.
name|gp
operator|=
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/a/b/c/e"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|tests
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
expr_stmt|;
comment|// matching
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/e/f/g/h"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/e/d/e/f"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/e/d/e/f"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/e"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/e/"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/ef"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/ef/g"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// not-matching
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/f/g/h"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/d/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cee/d/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|gp
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// all descendants of '/a/b/c/e'
name|gp
operator|=
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/a/b/c/e"
argument_list|,
literal|"/*"
argument_list|)
expr_stmt|;
name|tests
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
expr_stmt|;
comment|// matching
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/e/f/g/h"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/e/d/e/f"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// not-matching
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/e"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// not matching node path
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/e/"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// not matching node path + /
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/ef"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// not matching siblings of node path
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/f/g/h"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/d/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cee/d/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|gp
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// all descendants of '/a/b/ce'
name|gp
operator|=
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"e/*"
argument_list|)
expr_stmt|;
name|tests
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
expr_stmt|;
comment|// not-matching
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/f/g/h"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/d/e/f"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// not-matching
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cee/d/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// missing * after ce/
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|gp
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// all descendants of '/'
name|gp
operator|=
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|tests
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
expr_stmt|;
comment|// matching
name|tests
operator|.
name|put
argument_list|(
literal|"/a"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/b/"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/c/d"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/f/g/h"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/d/e/f"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// not-matching
name|tests
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|gp
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// restriction "*cat/*" matches all siblings and descendants of /foo that have an intermediate segment ending with 'cat'
name|gp
operator|=
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"*e/*"
argument_list|)
expr_stmt|;
name|tests
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
expr_stmt|;
comment|// matching
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ceeeeeee/f/g/h"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cde/d/e/f"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ced/d/e/f"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// not-matching
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cde"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// sibling ending with e
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// ignore trailing / in test path
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// ignore trailing / in test path
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// missing *e/*
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// missing /*
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// missing *e
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/ed/f/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// missing e/
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|gp
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//  restriction /*cat/*  matches all descendants of /foo that have an intermediate segment ending with 'cat'
name|gp
operator|=
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"/*e/*"
argument_list|)
expr_stmt|;
name|tests
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
expr_stmt|;
comment|// matching
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/de/f"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// not-matching
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cde"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// sibling ending with e
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ced/d/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// sibling containing intermediate segment
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cde/d/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// sibling containing intermediate segment
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ce/"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// ignore trailing / in test path
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// ignore trailing / in test path
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// no intermediate segment
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// missing *e/*
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// missing /*
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/f/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// missing *e
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/ed/f/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// missing e/
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|gp
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//  restriction /*cat  matches all children of /a/b/c whose path ends with "cat"
name|gp
operator|=
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"/*cat"
argument_list|)
expr_stmt|;
name|tests
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
expr_stmt|;
comment|// matching
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/cat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/acat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/f/cat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/f/acat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// not-matching
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/cat/e"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// cat only intermediate segment
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/acat/e"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// cat only intermediate segment
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/cata/e"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// cat only intermediate segment
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/cate"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cat"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// siblings do no match
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cat/ed/f/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// ... nor do siblings' children
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ced/cat"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// ... nor do siblings' children
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|gp
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//  restriction /*/cat  matches all non-direct descendants of /foo named "cat"
name|gp
operator|=
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"/*/cat"
argument_list|)
expr_stmt|;
name|tests
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
expr_stmt|;
comment|// matching
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/a/cat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f/cat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// not-matching
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/cat"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/cate"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/acat"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/cat/d"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/acat"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/cate"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/cat/e"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// cat only intermediate segment
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/acat/e"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// cat only intermediate segment
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/cata/e"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// cat only intermediate segment
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cat"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// siblings do no match
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cat/ed/f/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// ... nor do siblings' children
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ced/cat"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// ... nor do siblings' children
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ced/f/cat"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// ... nor do siblings' children
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|gp
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//  restriction /cat* matches all descendant paths of /foo that have the
comment|//  direct foo-descendant segment starting with "cat"
name|gp
operator|=
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"/cat*"
argument_list|)
expr_stmt|;
name|tests
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
expr_stmt|;
comment|// matching
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/cat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/cats"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/cat/s"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/cats/d/e/f"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// not-matching
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/cat"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/cats"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/cat"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/cats"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/acat"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/acat"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/cat/e"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/acat/e"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/cata/e"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cat"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// siblings do no match
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cat/ed/f/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// ... nor do siblings' children
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ced/cat"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// ... nor do siblings' children
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/ced/f/cat"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// ... nor do siblings' children
for|for
control|(
name|String
name|testPath
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertMatch
argument_list|(
name|gp
argument_list|,
name|testPath
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyRestriction
parameter_list|()
block|{
name|GlobPattern
name|gp
init|=
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tests
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cde"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|toTest
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|gp
operator|+
literal|" : "
operator|+
name|toTest
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|toTest
argument_list|)
operator|==
name|gp
operator|.
name|matches
argument_list|(
name|toTest
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|gp
operator|=
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|tests
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cde"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|toTest
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|gp
operator|+
literal|" : "
operator|+
name|toTest
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|toTest
argument_list|)
operator|==
name|gp
operator|.
name|matches
argument_list|(
name|toTest
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathRestriction
parameter_list|()
block|{
name|GlobPattern
name|gp
init|=
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tests
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/e"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/e/f"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cde"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|toTest
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|gp
operator|+
literal|" : "
operator|+
name|toTest
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|toTest
argument_list|)
operator|==
name|gp
operator|.
name|matches
argument_list|(
name|toTest
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|gp
operator|=
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"/d"
argument_list|)
expr_stmt|;
name|tests
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/e"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cd/e/f"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"/a/b/cde"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|toTest
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|gp
operator|+
literal|" : "
operator|+
name|toTest
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|toTest
argument_list|)
operator|==
name|gp
operator|.
name|matches
argument_list|(
name|toTest
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxOccurrences
parameter_list|()
block|{
name|GlobPattern
name|gp
init|=
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/"
argument_list|,
literal|"1*/2*/3*/4*/5*/6*/7*/8*/9*/10*/11*/12*/13*/14*/15*/16*/17*/18*/19*/20*/21*"
argument_list|)
decl_stmt|;
try|try
block|{
name|gp
operator|.
name|matches
argument_list|(
literal|"/1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// success
block|}
empty_stmt|;
try|try
block|{
name|gp
operator|.
name|matches
argument_list|(
literal|"/11/22/33/44/55/66/77/88/99/100/111/122/133/144/155/166/177/188/199/200/211"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// success
block|}
empty_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatches
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|"/*"
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCode
parameter_list|()
block|{
name|GlobPattern
name|pattern
init|=
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|"/*"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Objects
operator|.
name|hashCode
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|"/*"
argument_list|)
argument_list|,
name|pattern
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|GlobPattern
name|pattern
init|=
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|"/*"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pattern
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pattern
argument_list|,
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|"/*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotEquals
parameter_list|()
block|{
name|GlobPattern
name|pattern
init|=
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|"/*"
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|pattern
argument_list|,
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"/*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|pattern
argument_list|,
name|GlobPattern
operator|.
name|create
argument_list|(
literal|"/a/b/c/d"
argument_list|,
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|pattern
argument_list|,
operator|new
name|PrefixPattern
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"/*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

