begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|denotesRoot
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getAncestorPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getDepth
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getParentPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|FieldNames
operator|.
name|PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|FieldNames
operator|.
name|PATH_SELECTOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|INDEX_DATA_CHILD_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|PERSISTENCE_FILE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|PERSISTENCE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|PERSISTENCE_OAK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|PERSISTENCE_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|VERSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TermFactory
operator|.
name|newFulltextTerm
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TermFactory
operator|.
name|newPathTerm
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneIndexHelper
operator|.
name|skipTokenization
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryImpl
operator|.
name|JCR_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Cursors
operator|.
name|newPathCursor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|aggregate
operator|.
name|NodeAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|MoreLikeThisHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextOr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextTerm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
operator|.
name|PropertyRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|FulltextQueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ReadOnlyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|mlt
operator|.
name|MoreLikeThis
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|QueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiPhraseQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PrefixQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermRangeQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|WildcardQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CompiledAutomaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Provides a QueryIndex that does lookups against a Lucene-based index  *  *<p>  * To define a lucene index on a subtree you have to add an  *<code>oak:index<code> node.  *  * Under it follows the index definition node that:  *<ul>  *<li>must be of type<code>oak:QueryIndexDefinition</code></li>  *<li>must have the<code>type</code> property set to<b><code>lucene</code></b></li>  *<li>must have the<code>async</code> property set to<b><code>async</code></b></li>  *</b></li>  *</ul>  *</p>  *<p>  * Optionally you can add  *<ul>  *<li>what subset of property types to be included in the index via the<code>includePropertyTypes<code> property</li>  *<li>a blacklist of property names: what property to be excluded from the index via the<code>excludePropertyNames<code> property</li>  *<li>the<code>reindex<code> flag which when set to<code>true<code>, triggers a full content re-index.</li>  *</ul>  *</p>  *<pre>  *<code>  * {  *     NodeBuilder index = root.child("oak:index");  *     index.child("lucene")  *         .setProperty("jcr:primaryType", "oak:QueryIndexDefinition", Type.NAME)  *         .setProperty("type", "lucene")  *         .setProperty("async", "async")  *         .setProperty("reindex", "true");  * }  *</code>  *</pre>  *  * @see QueryIndex  *  */
end_comment

begin_class
specifier|public
class|class
name|LuceneIndex
implements|implements
name|FulltextQueryIndex
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LuceneIndex
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NATIVE_QUERY_FUNCTION
init|=
literal|"native*lucene"
decl_stmt|;
specifier|private
specifier|final
name|Analyzer
name|analyzer
decl_stmt|;
specifier|private
specifier|final
name|NodeAggregator
name|aggregator
decl_stmt|;
specifier|public
name|LuceneIndex
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|NodeAggregator
name|aggregator
parameter_list|)
block|{
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
name|this
operator|.
name|aggregator
operator|=
name|aggregator
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
literal|"lucene"
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getCost
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|NodeState
name|root
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isLive
argument_list|(
name|root
argument_list|)
condition|)
block|{
comment|// unusable index
return|return
name|Double
operator|.
name|POSITIVE_INFINITY
return|;
block|}
name|FullTextExpression
name|ft
init|=
name|filter
operator|.
name|getFullTextConstraint
argument_list|()
decl_stmt|;
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
comment|// no full-text condition: don't use this index,
comment|// as there might be a better one
return|return
name|Double
operator|.
name|POSITIVE_INFINITY
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|relPaths
init|=
name|getRelativePaths
argument_list|(
name|ft
argument_list|)
decl_stmt|;
if|if
condition|(
name|relPaths
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"More than one relative parent for query "
operator|+
name|filter
operator|.
name|getQueryStatement
argument_list|()
argument_list|)
expr_stmt|;
comment|// there are multiple "parents", as in
comment|// "contains(a/x, 'hello') and contains(b/x, 'world')"
return|return
operator|new
name|MultiLuceneIndex
argument_list|(
name|filter
argument_list|,
name|root
argument_list|,
name|relPaths
argument_list|)
operator|.
name|getCost
argument_list|()
return|;
block|}
name|String
name|parent
init|=
name|relPaths
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no relative properties
return|return
literal|10
return|;
block|}
comment|// all relative properties have the same "parent", as in
comment|// "contains(a/x, 'hello') and contains(a/y, 'world')" or
comment|// "contains(a/x, 'hello') or contains(a/*, 'world')"
comment|// TODO: proper cost calculation
comment|// we assume this will cause more read operations,
comment|// as we need to read the node and then the parent
return|return
literal|15
return|;
block|}
comment|/**      * Get the set of relative paths of a full-text condition. For example, for      * the condition "contains(a/b, 'hello') and contains(c/d, 'world'), the set      * { "a", "c" } is returned. If there are no relative properties, then one      * entry is returned (the empty string). If there is no expression, then an      * empty set is returned.      *      * @param ft the full-text expression      * @return the set of relative paths (possibly empty)      */
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getRelativePaths
parameter_list|(
name|FullTextExpression
name|ft
parameter_list|)
block|{
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
comment|// there might be no full-text constraint when using the
comment|// LowCostLuceneIndexProvider which is used for testing
comment|// TODO if the LowCostLuceneIndexProvider is removed, we should do
comment|// the following instead:
comment|// throw new
comment|// IllegalStateException("Lucene index is used even when no full-text conditions are used for filter "
comment|// + filter);
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|relPaths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ft
operator|.
name|accept
argument_list|(
operator|new
name|FullTextVisitor
operator|.
name|FullTextVisitorBase
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|FullTextTerm
name|term
parameter_list|)
block|{
name|String
name|p
init|=
name|term
operator|.
name|getPropertyName
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|relPaths
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
literal|"../"
argument_list|)
operator|||
name|p
operator|.
name|startsWith
argument_list|(
literal|"./"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Relative parent is not supported:"
operator|+
name|p
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|getDepth
argument_list|(
name|p
argument_list|)
operator|>
literal|1
condition|)
block|{
name|String
name|parent
init|=
name|getParentPath
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|relPaths
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|relPaths
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|relPaths
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isLive
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
name|NodeState
name|def
init|=
name|getIndexDef
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|def
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|type
init|=
name|def
operator|.
name|getString
argument_list|(
name|PERSISTENCE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|||
name|PERSISTENCE_OAK
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|getIndexDataNode
argument_list|(
name|def
argument_list|)
operator|!=
literal|null
return|;
block|}
if|if
condition|(
name|PERSISTENCE_FILE
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|def
operator|.
name|getString
argument_list|(
name|PERSISTENCE_PATH
argument_list|)
operator|!=
literal|null
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|Directory
name|newDirectory
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
name|NodeState
name|def
init|=
name|getIndexDef
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|def
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|type
init|=
name|def
operator|.
name|getString
argument_list|(
name|PERSISTENCE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|||
name|PERSISTENCE_OAK
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|NodeState
name|index
init|=
name|getIndexDataNode
argument_list|(
name|def
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|OakDirectory
argument_list|(
operator|new
name|ReadOnlyBuilder
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|PERSISTENCE_FILE
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|String
name|fs
init|=
name|def
operator|.
name|getString
argument_list|(
name|PERSISTENCE_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|fs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
comment|// TODO lock factory
return|return
name|FSDirectory
operator|.
name|open
argument_list|(
name|f
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to open directory {}"
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|NodeState
name|getIndexDef
parameter_list|(
name|NodeState
name|node
parameter_list|)
block|{
name|NodeState
name|state
init|=
name|node
operator|.
name|getChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|state
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|NodeState
name|ns
init|=
name|entry
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
if|if
condition|(
name|TYPE_LUCENE
operator|.
name|equals
argument_list|(
name|ns
operator|.
name|getString
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|ns
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|NodeState
name|getIndexDataNode
parameter_list|(
name|NodeState
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|hasChildNode
argument_list|(
name|INDEX_DATA_CHILD_NAME
argument_list|)
condition|)
block|{
return|return
name|node
operator|.
name|getChildNode
argument_list|(
name|INDEX_DATA_CHILD_NAME
argument_list|)
return|;
block|}
comment|// unusable index (not initialized yet)
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPlan
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|NodeState
name|root
parameter_list|)
block|{
name|FullTextExpression
name|ft
init|=
name|filter
operator|.
name|getFullTextConstraint
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|relPaths
init|=
name|getRelativePaths
argument_list|(
name|ft
argument_list|)
decl_stmt|;
if|if
condition|(
name|relPaths
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
operator|new
name|MultiLuceneIndex
argument_list|(
name|filter
argument_list|,
name|root
argument_list|,
name|relPaths
argument_list|)
operator|.
name|getPlan
argument_list|()
return|;
block|}
name|String
name|parent
init|=
name|relPaths
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
name|relPaths
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// we only restrict non-full-text conditions if there is
comment|// no relative property in the full-text constraint
name|boolean
name|nonFullTextConstraints
init|=
name|parent
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|String
name|plan
init|=
name|getQuery
argument_list|(
name|filter
argument_list|,
literal|null
argument_list|,
name|nonFullTextConstraints
argument_list|,
name|analyzer
argument_list|)
operator|+
literal|" ft:("
operator|+
name|ft
operator|+
literal|")"
decl_stmt|;
if|if
condition|(
operator|!
name|parent
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|plan
operator|+=
literal|" parent:"
operator|+
name|parent
expr_stmt|;
block|}
return|return
name|plan
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cursor
name|query
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|NodeState
name|root
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isLive
argument_list|(
name|root
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Lucene index is not live"
argument_list|)
throw|;
block|}
name|FullTextExpression
name|ft
init|=
name|filter
operator|.
name|getFullTextConstraint
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|relPaths
init|=
name|getRelativePaths
argument_list|(
name|ft
argument_list|)
decl_stmt|;
if|if
condition|(
name|relPaths
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
operator|new
name|MultiLuceneIndex
argument_list|(
name|filter
argument_list|,
name|root
argument_list|,
name|relPaths
argument_list|)
operator|.
name|query
argument_list|()
return|;
block|}
name|String
name|parent
init|=
name|relPaths
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
name|relPaths
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// we only restrict non-full-text conditions if there is
comment|// no relative property in the full-text constraint
name|boolean
name|nonFullTextConstraints
init|=
name|parent
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|Directory
name|directory
init|=
name|newDirectory
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|directory
operator|==
literal|null
condition|)
block|{
return|return
name|newPathCursor
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
return|;
block|}
name|long
name|s
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
try|try
block|{
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|directory
argument_list|)
decl_stmt|;
try|try
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
name|getQuery
argument_list|(
name|filter
argument_list|,
name|reader
argument_list|,
name|nonFullTextConstraints
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
comment|// TODO OAK-828
name|HashSet
argument_list|<
name|String
argument_list|>
name|seenPaths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|parentDepth
init|=
name|getDepth
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
comment|// OAK-925
comment|// TODO how to best avoid loading all entries in memory?
comment|// (memory problem and performance problem)
name|TopDocs
name|docs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|ScoreDoc
name|doc
range|:
name|docs
operator|.
name|scoreDocs
control|)
block|{
name|String
name|path
init|=
name|reader
operator|.
name|document
argument_list|(
name|doc
operator|.
name|doc
argument_list|,
name|PATH_SELECTOR
argument_list|)
operator|.
name|get
argument_list|(
name|PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|parent
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// TODO OAK-828 this breaks node aggregation
comment|// get the base path
comment|// ensure the path ends with the given
comment|// relative path
comment|// if (!path.endsWith("/" + parent)) {
comment|// continue;
comment|// }
name|path
operator|=
name|getAncestorPath
argument_list|(
name|path
argument_list|,
name|parentDepth
argument_list|)
expr_stmt|;
comment|// avoid duplicate entries
if|if
condition|(
name|seenPaths
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|seenPaths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|paths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"query via {} took {} ms."
argument_list|,
name|this
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s
argument_list|)
expr_stmt|;
return|return
name|newPathCursor
argument_list|(
name|paths
argument_list|)
return|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"query via {} failed."
argument_list|,
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|newPathCursor
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * Get the Lucene query for the given filter.      *      * @param filter the filter, including full-text constraint      * @param reader the Lucene reader      * @param nonFullTextConstraints whether non-full-text constraints (such a      *            path, node type, and so on) should be added to the Lucene      *            query      * @param analyzer the Lucene analyzer used for building the fulltext query      * @return the Lucene query      */
specifier|private
specifier|static
name|Query
name|getQuery
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|boolean
name|nonFullTextConstraints
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|List
argument_list|<
name|Query
argument_list|>
name|qs
init|=
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|()
decl_stmt|;
name|FullTextExpression
name|ft
init|=
name|filter
operator|.
name|getFullTextConstraint
argument_list|()
decl_stmt|;
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
comment|// there might be no full-text constraint
comment|// when using the LowCostLuceneIndexProvider
comment|// which is used for testing
block|}
else|else
block|{
name|qs
operator|.
name|add
argument_list|(
name|getFullTextQuery
argument_list|(
name|ft
argument_list|,
name|analyzer
argument_list|,
name|reader
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PropertyRestriction
name|pr
init|=
name|filter
operator|.
name|getPropertyRestriction
argument_list|(
name|NATIVE_QUERY_FUNCTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|!=
literal|null
condition|)
block|{
name|String
name|query
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|pr
operator|.
name|first
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QueryParser
name|queryParser
init|=
operator|new
name|QueryParser
argument_list|(
name|VERSION
argument_list|,
literal|""
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|startsWith
argument_list|(
literal|"mlt?"
argument_list|)
condition|)
block|{
name|String
name|mltQueryString
init|=
name|query
operator|.
name|replace
argument_list|(
literal|"mlt?"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|Query
name|moreLikeThis
init|=
name|MoreLikeThisHelper
operator|.
name|getMoreLikeThis
argument_list|(
name|reader
argument_list|,
name|analyzer
argument_list|,
name|mltQueryString
argument_list|)
decl_stmt|;
if|if
condition|(
name|moreLikeThis
operator|!=
literal|null
condition|)
block|{
name|qs
operator|.
name|add
argument_list|(
name|moreLikeThis
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
try|try
block|{
name|qs
operator|.
name|add
argument_list|(
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|nonFullTextConstraints
condition|)
block|{
name|addNonFullTextConstraints
argument_list|(
name|qs
argument_list|,
name|filter
argument_list|,
name|reader
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|qs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|MatchAllDocsQuery
argument_list|()
return|;
block|}
if|if
condition|(
name|qs
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|qs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|Query
name|q
range|:
name|qs
control|)
block|{
name|bq
operator|.
name|add
argument_list|(
name|q
argument_list|,
name|MUST
argument_list|)
expr_stmt|;
block|}
return|return
name|bq
return|;
block|}
specifier|private
specifier|static
name|void
name|addNonFullTextConstraints
parameter_list|(
name|List
argument_list|<
name|Query
argument_list|>
name|qs
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|filter
operator|.
name|matchesAllTypes
argument_list|()
condition|)
block|{
name|addNodeTypeConstraints
argument_list|(
name|qs
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
name|String
name|path
init|=
name|filter
operator|.
name|getPath
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|filter
operator|.
name|getPathRestriction
argument_list|()
condition|)
block|{
case|case
name|ALL_CHILDREN
case|:
if|if
condition|(
literal|"/"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|+=
literal|"/"
expr_stmt|;
block|}
name|qs
operator|.
name|add
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
name|newPathTerm
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIRECT_CHILDREN
case|:
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|+=
literal|"/"
expr_stmt|;
block|}
name|qs
operator|.
name|add
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
name|newPathTerm
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXACT
case|:
name|qs
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|newPathTerm
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PARENT
case|:
if|if
condition|(
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// there's no parent of the root node
comment|// we add a path that can not possibly occur because there
comment|// is no way to say "match no documents" in Lucene
name|qs
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FieldNames
operator|.
name|PATH
argument_list|,
literal|"///"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qs
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|newPathTerm
argument_list|(
name|getParentPath
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NO_RESTRICTION
case|:
break|break;
block|}
for|for
control|(
name|PropertyRestriction
name|pr
range|:
name|filter
operator|.
name|getPropertyRestrictions
argument_list|()
control|)
block|{
if|if
condition|(
name|pr
operator|.
name|first
operator|==
literal|null
operator|&&
name|pr
operator|.
name|last
operator|==
literal|null
condition|)
block|{
comment|// ignore property existence checks, Lucene can't to 'property
comment|// is not null' queries (OAK-1208)
continue|continue;
block|}
name|String
name|name
init|=
name|pr
operator|.
name|propertyName
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// lucene cannot handle child-level property restrictions
continue|continue;
block|}
if|if
condition|(
literal|"rep:excerpt"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|JCR_PRIMARYTYPE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|skipTokenization
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|qs
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|name
argument_list|,
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|first
init|=
literal|null
decl_stmt|;
name|String
name|last
init|=
literal|null
decl_stmt|;
name|boolean
name|isLike
init|=
name|pr
operator|.
name|isLike
decl_stmt|;
comment|// TODO what to do with escaped tokens?
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
condition|)
block|{
name|first
operator|=
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
name|first
operator|=
name|first
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pr
operator|.
name|last
operator|!=
literal|null
condition|)
block|{
name|last
operator|=
name|pr
operator|.
name|last
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
name|last
operator|=
name|last
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isLike
condition|)
block|{
name|first
operator|=
name|first
operator|.
name|replace
argument_list|(
literal|'%'
argument_list|,
name|WildcardQuery
operator|.
name|WILDCARD_STRING
argument_list|)
expr_stmt|;
name|first
operator|=
name|first
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
name|WildcardQuery
operator|.
name|WILDCARD_CHAR
argument_list|)
expr_stmt|;
name|int
name|indexOfWS
init|=
name|first
operator|.
name|indexOf
argument_list|(
name|WildcardQuery
operator|.
name|WILDCARD_STRING
argument_list|)
decl_stmt|;
name|int
name|indexOfWC
init|=
name|first
operator|.
name|indexOf
argument_list|(
name|WildcardQuery
operator|.
name|WILDCARD_CHAR
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|first
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexOfWS
operator|==
name|len
operator|||
name|indexOfWC
operator|==
name|len
condition|)
block|{
comment|// remove trailing "*" for prefixquery
name|first
operator|=
name|first
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|first
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|JCR_PATH
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|qs
operator|.
name|add
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
name|newPathTerm
argument_list|(
name|first
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qs
operator|.
name|add
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|name
argument_list|,
name|first
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|JCR_PATH
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|qs
operator|.
name|add
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
name|newPathTerm
argument_list|(
name|first
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qs
operator|.
name|add
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|name
argument_list|,
name|first
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
continue|continue;
block|}
if|if
condition|(
name|first
operator|!=
literal|null
operator|&&
name|first
operator|.
name|equals
argument_list|(
name|last
argument_list|)
operator|&&
name|pr
operator|.
name|firstIncluding
operator|&&
name|pr
operator|.
name|lastIncluding
condition|)
block|{
if|if
condition|(
name|JCR_PATH
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|qs
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|newPathTerm
argument_list|(
name|first
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|addReferenceConstraint
argument_list|(
name|first
argument_list|,
name|qs
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|t
range|:
name|tokenize
argument_list|(
name|first
argument_list|,
name|analyzer
argument_list|)
control|)
block|{
name|qs
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|name
argument_list|,
name|t
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
continue|continue;
block|}
name|first
operator|=
name|tokenizeAndPoll
argument_list|(
name|first
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|last
operator|=
name|tokenizeAndPoll
argument_list|(
name|last
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|qs
operator|.
name|add
argument_list|(
name|TermRangeQuery
operator|.
name|newStringRange
argument_list|(
name|name
argument_list|,
name|first
argument_list|,
name|last
argument_list|,
name|pr
operator|.
name|firstIncluding
argument_list|,
name|pr
operator|.
name|lastIncluding
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|tokenizeAndPoll
parameter_list|(
name|String
name|token
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
block|{
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|tokenize
argument_list|(
name|token
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tokens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|token
operator|=
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|token
return|;
block|}
specifier|private
specifier|static
name|void
name|addReferenceConstraint
parameter_list|(
name|String
name|uuid
parameter_list|,
name|List
argument_list|<
name|Query
argument_list|>
name|qs
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
comment|// getPlan call
name|qs
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"*"
argument_list|,
name|uuid
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// reference query
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|MultiFields
operator|.
name|getIndexedFields
argument_list|(
name|reader
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|fields
control|)
block|{
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|f
argument_list|,
name|uuid
argument_list|)
argument_list|)
argument_list|,
name|SHOULD
argument_list|)
expr_stmt|;
block|}
name|qs
operator|.
name|add
argument_list|(
name|bq
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|addNodeTypeConstraints
parameter_list|(
name|List
argument_list|<
name|Query
argument_list|>
name|qs
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|filter
operator|.
name|getPrimaryTypes
argument_list|()
control|)
block|{
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|type
argument_list|)
argument_list|)
argument_list|,
name|SHOULD
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|type
range|:
name|filter
operator|.
name|getMixinTypes
argument_list|()
control|)
block|{
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|type
argument_list|)
argument_list|)
argument_list|,
name|SHOULD
argument_list|)
expr_stmt|;
block|}
name|qs
operator|.
name|add
argument_list|(
name|bq
argument_list|)
expr_stmt|;
block|}
specifier|static
name|Query
name|getFullTextQuery
parameter_list|(
name|FullTextExpression
name|ft
parameter_list|,
specifier|final
name|Analyzer
name|analyzer
parameter_list|,
specifier|final
name|IndexReader
name|reader
parameter_list|)
block|{
comment|// a reference to the query, so it can be set in the visitor
comment|// (a "non-local return")
specifier|final
name|AtomicReference
argument_list|<
name|Query
argument_list|>
name|result
init|=
operator|new
name|AtomicReference
argument_list|<
name|Query
argument_list|>
argument_list|()
decl_stmt|;
name|ft
operator|.
name|accept
argument_list|(
operator|new
name|FullTextVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|FullTextOr
name|or
parameter_list|)
block|{
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|FullTextExpression
name|e
range|:
name|or
operator|.
name|list
control|)
block|{
name|Query
name|x
init|=
name|getFullTextQuery
argument_list|(
name|e
argument_list|,
name|analyzer
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|x
argument_list|,
name|SHOULD
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|q
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|FullTextAnd
name|and
parameter_list|)
block|{
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|FullTextExpression
name|e
range|:
name|and
operator|.
name|list
control|)
block|{
name|Query
name|x
init|=
name|getFullTextQuery
argument_list|(
name|e
argument_list|,
name|analyzer
argument_list|,
name|reader
argument_list|)
decl_stmt|;
comment|// Lucene can't deal with "must(must_not(x))"
if|if
condition|(
name|x
operator|instanceof
name|BooleanQuery
condition|)
block|{
name|BooleanQuery
name|bq
init|=
operator|(
name|BooleanQuery
operator|)
name|x
decl_stmt|;
for|for
control|(
name|BooleanClause
name|c
range|:
name|bq
operator|.
name|clauses
argument_list|()
control|)
block|{
name|q
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|q
operator|.
name|add
argument_list|(
name|x
argument_list|,
name|MUST
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|set
argument_list|(
name|q
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|FullTextTerm
name|term
parameter_list|)
block|{
name|String
name|p
init|=
name|term
operator|.
name|getPropertyName
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|p
operator|=
name|getName
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|Query
name|q
init|=
name|tokenToQuery
argument_list|(
name|term
operator|.
name|getText
argument_list|()
argument_list|,
name|p
argument_list|,
name|analyzer
argument_list|,
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|boost
init|=
name|term
operator|.
name|getBoost
argument_list|()
decl_stmt|;
if|if
condition|(
name|boost
operator|!=
literal|null
condition|)
block|{
name|q
operator|.
name|setBoost
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|boost
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|term
operator|.
name|isNot
argument_list|()
condition|)
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|q
argument_list|,
name|MUST_NOT
argument_list|)
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
name|bq
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|set
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|get
argument_list|()
return|;
block|}
specifier|static
name|Query
name|tokenToQuery
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|tokenize
argument_list|(
name|text
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// TODO what should be returned in the case there are no tokens?
return|return
operator|new
name|BooleanQuery
argument_list|()
return|;
block|}
if|if
condition|(
name|tokens
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|String
name|token
init|=
name|tokens
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasFulltextToken
argument_list|(
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|WildcardQuery
argument_list|(
name|newFulltextTerm
argument_list|(
name|token
argument_list|,
name|fieldName
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|TermQuery
argument_list|(
name|newFulltextTerm
argument_list|(
name|token
argument_list|,
name|fieldName
argument_list|)
argument_list|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|hasFulltextToken
argument_list|(
name|tokens
argument_list|)
condition|)
block|{
name|MultiPhraseQuery
name|mpq
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|hasFulltextToken
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|Term
index|[]
name|terms
init|=
name|extractMatchingTokens
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|,
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
operator|&&
name|terms
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|mpq
operator|.
name|add
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|mpq
operator|.
name|add
argument_list|(
name|newFulltextTerm
argument_list|(
name|token
argument_list|,
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mpq
return|;
block|}
else|else
block|{
name|PhraseQuery
name|pq
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|tokens
control|)
block|{
name|pq
operator|.
name|add
argument_list|(
name|newFulltextTerm
argument_list|(
name|t
argument_list|,
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|pq
return|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Term
index|[]
name|extractMatchingTokens
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
comment|// getPlan call
return|return
literal|null
return|;
block|}
try|try
block|{
name|List
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<
name|Term
argument_list|>
argument_list|()
decl_stmt|;
name|Term
name|onTerm
init|=
name|newFulltextTerm
argument_list|(
name|token
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
name|Terms
name|t
init|=
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|reader
argument_list|,
name|onTerm
operator|.
name|field
argument_list|()
argument_list|)
decl_stmt|;
name|Automaton
name|a
init|=
name|WildcardQuery
operator|.
name|toAutomaton
argument_list|(
name|onTerm
argument_list|)
decl_stmt|;
name|CompiledAutomaton
name|ca
init|=
operator|new
name|CompiledAutomaton
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|TermsEnum
name|te
init|=
name|ca
operator|.
name|getTermsEnum
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|BytesRef
name|text
decl_stmt|;
while|while
condition|(
operator|(
name|text
operator|=
name|te
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|newFulltextTerm
argument_list|(
name|text
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|terms
operator|.
name|toArray
argument_list|(
operator|new
name|Term
index|[
name|terms
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Building fulltext query failed"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|hasFulltextToken
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|tokens
parameter_list|)
block|{
for|for
control|(
name|String
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|hasFulltextToken
argument_list|(
name|token
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|hasFulltextToken
parameter_list|(
name|String
name|token
parameter_list|)
block|{
for|for
control|(
name|char
name|c
range|:
name|fulltextTokens
control|)
block|{
if|if
condition|(
name|token
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|char
index|[]
name|fulltextTokens
init|=
operator|new
name|char
index|[]
block|{
literal|'*'
block|,
literal|'?'
block|}
decl_stmt|;
comment|/**      * Tries to merge back tokens that are split on relevant fulltext query      * wildcards ('*' or '?')      *      *      * @param text      * @param analyzer      * @return      */
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|tokenize
parameter_list|(
name|String
name|text
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|TokenStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stream
operator|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|FieldNames
operator|.
name|FULLTEXT
argument_list|,
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|CharTermAttribute
name|termAtt
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|OffsetAttribute
name|offsetAtt
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// TypeAttribute type = stream.addAttribute(TypeAttribute.class);
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|int
name|poz
init|=
literal|0
decl_stmt|;
name|boolean
name|hasFulltextToken
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|token
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|stream
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|String
name|term
init|=
name|termAtt
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|start
init|=
name|offsetAtt
operator|.
name|startOffset
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|offsetAtt
operator|.
name|endOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|>
name|poz
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|poz
init|;
name|i
operator|<
name|start
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|char
name|c
range|:
name|fulltextTokens
control|)
block|{
if|if
condition|(
name|c
operator|==
name|text
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|token
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|hasFulltextToken
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
name|poz
operator|=
name|end
expr_stmt|;
if|if
condition|(
name|hasFulltextToken
condition|)
block|{
name|token
operator|.
name|append
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|hasFulltextToken
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|token
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|token
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|token
operator|.
name|append
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
block|}
comment|// consume to the end of the string
if|if
condition|(
name|poz
operator|<
name|text
operator|.
name|length
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|poz
init|;
name|i
operator|<
name|text
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|char
name|c
range|:
name|fulltextTokens
control|)
block|{
if|if
condition|(
name|c
operator|==
name|text
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|token
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|token
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Building fulltext query failed"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
name|tokens
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeAggregator
name|getNodeAggregator
parameter_list|()
block|{
return|return
name|aggregator
return|;
block|}
block|}
end_class

end_unit

