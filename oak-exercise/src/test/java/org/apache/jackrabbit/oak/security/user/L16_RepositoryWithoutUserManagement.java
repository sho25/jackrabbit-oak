begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NoSuchWorkspaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|AuthInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: User Management& Authentication  * =============================================================================  *  * Title: Repository without User Management  * -----------------------------------------------------------------------------  *  * Goal:  * This advanced exercise aims to help you understand that user management  * is in fact an optional part of the Oak repository implementation.  * While existing application may rely on the user management to be present  * by default it isn't too hard to come up with a setup that omits this  * module altogether (e.g. if user/group information is being held outside  * of the repository content).  *  * - Define an repository setup that doesn't require a user management implementation.  *  *   Question: Which parts need to be modified?  *   Question: What are the consequences for Jcr/Jackrabbit API consumers?  *  * This exercise mainly consists of defined a  * - SecurityProvider implementation  * - JAAS configuration  * that provides the desired repository setup without user management.  *  * It comes with the following test cases:  *  * - {@link #testUserManagementDescriptor()}  *   Verifies that the repository descriptiors don't list {@link org.apache.jackrabbit.api.JackrabbitRepository#OPTION_USER_MANAGEMENT_SUPPORTED}  *   This test passes if your setup is correct.  *  * - {@link #testNoUserManagementSupported()}  *   This test verifies that no {@link org.apache.jackrabbit.oak.spi.security.user.UserConfiguration}  *   can be obtained from the specified SecurityProvider.  *  * - {@link #testLogin()}  *   Finally, a test should prove that a user with the some Credentials (valid  *   for your custom setup) can actually login to the repository and is associated  *   with a valid {@link org.apache.jackrabbit.oak.api.AuthInfo}.  *  *  * Additional Exercises:  * -----------------------------------------------------------------------------  *  * You may want to write additional test-cases that verify that the  * {@link org.apache.jackrabbit.api.security.principal.PrincipalManager} allows  * you to retrieve valid principals, which can be used to setup access control  * content for your repository (which for simplicity might use the built-in  * authorization functionality).  *  *</pre>  *  * @see org.apache.jackrabbit.oak.spi.security.SecurityProvider  * @see org.apache.jackrabbit.oak.spi.security.user.UserConfiguration  */
end_comment

begin_class
specifier|public
class|class
name|L16_RepositoryWithoutUserManagement
extends|extends
name|AbstractSecurityTest
block|{
annotation|@
name|Override
specifier|protected
name|SecurityProvider
name|getSecurityProvider
parameter_list|()
block|{
comment|// EXERCISE: define a security provider that doesn't support user management
comment|// EXERCISE: and therefore doesn't expose a UserConfiguration implementation.
comment|// hint: you need a custom way to look up principals
comment|// hint: make use of CustomPrincipalConfiguration and CustomPrincipalProvider
comment|// and adjust it according to your needs!
return|return
name|super
operator|.
name|getSecurityProvider
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Configuration
name|getConfiguration
parameter_list|()
block|{
comment|// EXERCISE: define a suitable jaas configuration that doesn't tries to
comment|// EXERCISE: validate credentials against the user information stored in the repository
comment|// hint: define a configuration with CustomLoginModule (and adjust the latter for your needs)
return|return
name|super
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserManagementDescriptor
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Oak
name|oak
init|=
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
name|getSecurityProvider
argument_list|()
argument_list|)
decl_stmt|;
name|ContentRepository
name|contentRepository
init|=
name|oak
operator|.
name|createContentRepository
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|contentRepository
operator|.
name|getDescriptors
argument_list|()
operator|.
name|getValue
argument_list|(
name|JackrabbitRepository
operator|.
name|OPTION_USER_MANAGEMENT_SUPPORTED
argument_list|)
operator|.
name|getBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNoUserManagementSupported
parameter_list|()
block|{
name|getSecurityProvider
argument_list|()
operator|.
name|getConfiguration
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogin
parameter_list|()
throws|throws
name|LoginException
throws|,
name|NoSuchWorkspaceException
block|{
name|String
name|expectedId
init|=
literal|null
decl_stmt|;
comment|// EXERCISE define the userID for the login
name|Credentials
name|creds
init|=
literal|null
decl_stmt|;
comment|// EXERCISE define credentials that work in your setup.
name|ContentSession
name|s
init|=
name|login
argument_list|(
name|creds
argument_list|)
decl_stmt|;
name|AuthInfo
name|authInfo
init|=
name|s
operator|.
name|getAuthInfo
argument_list|()
decl_stmt|;
name|assertNotSame
argument_list|(
name|AuthInfo
operator|.
name|EMPTY
argument_list|,
name|authInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedId
argument_list|,
name|authInfo
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

