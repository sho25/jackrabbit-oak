begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|model
operator|.
name|NodeMongo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCursor
import|;
end_import

begin_comment
comment|/**  * Utility class for queries.  *  * @author<a href="mailto:pmarx@adobe.com>Philipp Marx</a>  */
end_comment

begin_class
specifier|public
class|class
name|QueryUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueryUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Reads nodes from the given {@link DBCursor} and add them to the returned list if their revision id is contained      * in the list of given valid revisions. If multiple nodes with the same path are read by the cursor the one with      * the highest revision id will win.      *      * @param dbCursor      *            The {@code DBCursor} to read from.      * @param validRevisions      *            The list of valid revisions.      * @return The list containing the valid nodes.      */
specifier|static
name|List
argument_list|<
name|NodeMongo
argument_list|>
name|convertToNodes
parameter_list|(
name|DBCursor
name|dbCursor
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|validRevisions
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|NodeMongo
argument_list|>
name|nodeMongos
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeMongo
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|dbCursor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeMongo
name|nodeMongo
init|=
operator|(
name|NodeMongo
operator|)
name|dbCursor
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|nodeMongo
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|long
name|revId
init|=
name|nodeMongo
operator|.
name|getRevisionId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Converting node %s (%d)"
argument_list|,
name|path
argument_list|,
name|revId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validRevisions
operator|.
name|contains
argument_list|(
name|revId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Node will not be converted b/c it is not a valid commit %s (%d)"
argument_list|,
name|path
argument_list|,
name|revId
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|NodeMongo
name|existingNodeMongo
init|=
name|nodeMongos
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingNodeMongo
operator|!=
literal|null
condition|)
block|{
name|long
name|existingRevId
init|=
name|existingNodeMongo
operator|.
name|getRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|revId
operator|>
name|existingRevId
condition|)
block|{
name|nodeMongos
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|nodeMongo
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Converted nodes was put into map and replaced %s (%d)"
argument_list|,
name|path
argument_list|,
name|revId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Converted nodes was not put into map because a newer version is available %s (%d)"
argument_list|,
name|path
argument_list|,
name|revId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|nodeMongos
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|nodeMongo
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Converted node was put into map"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|NodeMongo
argument_list|>
argument_list|(
name|nodeMongos
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|QueryUtils
parameter_list|()
block|{
comment|// no initialization
block|}
block|}
end_class

end_unit

