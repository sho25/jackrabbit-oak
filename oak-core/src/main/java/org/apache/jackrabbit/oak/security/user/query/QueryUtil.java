begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|query
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|QueryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|util
operator|.
name|UserUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_comment
comment|/**  * Common utilities used for user/group queries.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|QueryUtil
block|{
specifier|private
name|QueryUtil
parameter_list|()
block|{}
comment|/**      * Determine the search root for the given authorizable type based on the      * configured root path.      *      * @param type The authorizable type.      * @param config The configuration parameters.      * @return The path of search root for the specified authorizable type.      */
annotation|@
name|NotNull
specifier|public
specifier|static
name|String
name|getSearchRoot
parameter_list|(
name|AuthorizableType
name|type
parameter_list|,
name|ConfigurationParameters
name|config
parameter_list|)
block|{
name|String
name|path
init|=
name|UserUtil
operator|.
name|getAuthorizableRootPath
argument_list|(
name|config
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|QueryConstants
operator|.
name|SEARCH_ROOT_PATH
return|;
block|}
else|else
block|{
return|return
name|QueryConstants
operator|.
name|SEARCH_ROOT_PATH
operator|+
name|path
return|;
block|}
block|}
comment|/**      * Retrieve the node type name for the specified authorizable type.      *      * @param type The authorizable type.      * @return The corresponding node type name.      */
annotation|@
name|NotNull
specifier|public
specifier|static
name|String
name|getNodeTypeName
parameter_list|(
annotation|@
name|NotNull
name|AuthorizableType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|AuthorizableType
operator|.
name|USER
condition|)
block|{
return|return
name|UserConstants
operator|.
name|NT_REP_USER
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|AuthorizableType
operator|.
name|GROUP
condition|)
block|{
return|return
name|UserConstants
operator|.
name|NT_REP_GROUP
return|;
block|}
else|else
block|{
return|return
name|UserConstants
operator|.
name|NT_REP_AUTHORIZABLE
return|;
block|}
block|}
comment|/**      * Escape {@code string} for matching in jcr escaped node names      *      * @param string string to escape      * @return escaped string      */
annotation|@
name|NotNull
specifier|public
specifier|static
name|String
name|escapeNodeName
parameter_list|(
annotation|@
name|NotNull
name|String
name|string
parameter_list|)
block|{
return|return
name|QueryUtils
operator|.
name|escapeNodeName
argument_list|(
name|string
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|public
specifier|static
name|String
name|format
parameter_list|(
annotation|@
name|NotNull
name|Value
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
switch|switch
condition|(
name|value
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|PropertyType
operator|.
name|STRING
case|:
case|case
name|PropertyType
operator|.
name|BOOLEAN
case|:
return|return
literal|'\''
operator|+
name|QueryUtil
operator|.
name|escapeForQuery
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
operator|+
literal|'\''
return|;
case|case
name|PropertyType
operator|.
name|LONG
case|:
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
return|return
name|value
operator|.
name|getString
argument_list|()
return|;
case|case
name|PropertyType
operator|.
name|DATE
case|:
return|return
literal|"xs:dateTime('"
operator|+
name|value
operator|.
name|getString
argument_list|()
operator|+
literal|"')"
return|;
default|default:
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Property of type "
operator|+
name|PropertyType
operator|.
name|nameFromValue
argument_list|(
name|value
operator|.
name|getType
argument_list|()
argument_list|)
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|NotNull
specifier|public
specifier|static
name|String
name|escapeForQuery
parameter_list|(
annotation|@
name|NotNull
name|String
name|oakName
parameter_list|,
annotation|@
name|NotNull
name|NamePathMapper
name|namePathMapper
parameter_list|)
block|{
return|return
name|escapeForQuery
argument_list|(
name|namePathMapper
operator|.
name|getJcrName
argument_list|(
name|oakName
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|public
specifier|static
name|String
name|escapeForQuery
parameter_list|(
annotation|@
name|NotNull
name|String
name|value
parameter_list|)
block|{
return|return
name|QueryUtils
operator|.
name|escapeForQuery
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|public
specifier|static
name|RelationOp
name|getCollation
parameter_list|(
annotation|@
name|NotNull
name|QueryBuilder
operator|.
name|Direction
name|direction
parameter_list|)
throws|throws
name|RepositoryException
block|{
switch|switch
condition|(
name|direction
condition|)
block|{
case|case
name|ASCENDING
case|:
return|return
name|RelationOp
operator|.
name|GT
return|;
case|case
name|DESCENDING
case|:
return|return
name|RelationOp
operator|.
name|LT
return|;
default|default:
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Unknown sort order "
operator|+
name|direction
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

