begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|denotesRoot
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getAncestorPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getDepth
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getParentPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|FieldNames
operator|.
name|PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|VERSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TermFactory
operator|.
name|newFulltextTerm
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TermFactory
operator|.
name|newPathTerm
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneIndexHelper
operator|.
name|skipTokenization
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryImpl
operator|.
name|JCR_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
operator|.
name|SizePrecision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|aggregate
operator|.
name|NodeAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexDefinition
operator|.
name|IndexingRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|MoreLikeThisHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|SpellcheckHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|SuggestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryEngineSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextContains
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextOr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextTerm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Cursors
operator|.
name|PathCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
operator|.
name|PropertyRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|IndexRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|PropertyValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|AdvanceFulltextQueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|StoredFieldVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|QueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PrefixQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermRangeQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TotalHitCountCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|WildcardQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|SuggestWord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|Lookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|AbstractIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Queues
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Provides a QueryIndex that does lookups against a Lucene-based index  *  *<p>  * To define a lucene index on a subtree you have to add an  *<code>oak:index<code> node.  *  * Under it follows the index definition node that:  *<ul>  *<li>must be of type<code>oak:QueryIndexDefinition</code></li>  *<li>must have the<code>type</code> property set to<b><code>lucene</code></b></li>  *<li>must have the<code>async</code> property set to<b><code>async</code></b></li>  *</b></li>  *</ul>  *</p>  *<p>  * Optionally you can add  *<ul>  *<li>what subset of property types to be included in the index via the<code>includePropertyTypes<code> property</li>  *<li>a blacklist of property names: what property to be excluded from the index via the<code>excludePropertyNames<code> property</li>  *<li>the<code>reindex<code> flag which when set to<code>true<code>, triggers a full content re-index.</li>  *</ul>  *</p>  *<pre>  *<code>  * {  *     NodeBuilder index = root.child("oak:index");  *     index.child("lucene")  *         .setProperty("jcr:primaryType", "oak:QueryIndexDefinition", Type.NAME)  *         .setProperty("type", "lucene")  *         .setProperty("async", "async")  *         .setProperty("reindex", "true");  * }  *</code>  *</pre>  *  * @see QueryIndex  *  */
end_comment

begin_class
specifier|public
class|class
name|LuceneIndex
implements|implements
name|AdvanceFulltextQueryIndex
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LuceneIndex
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NATIVE_QUERY_FUNCTION
init|=
literal|"native*lucene"
decl_stmt|;
specifier|private
specifier|static
name|double
name|MIN_COST
init|=
literal|2.2
decl_stmt|;
comment|/**      * IndexPaln Attribute name which refers to the path of Lucene index to be used      * to perform query      */
specifier|static
specifier|final
name|String
name|ATTR_INDEX_PATH
init|=
literal|"oak.lucene.indexPath"
decl_stmt|;
comment|/**      * Batch size for fetching results from Lucene queries.      */
specifier|static
specifier|final
name|int
name|LUCENE_QUERY_BATCH_SIZE
init|=
literal|50
decl_stmt|;
specifier|static
specifier|final
name|boolean
name|USE_PATH_RESTRICTION
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"oak.luceneUsePath"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|IndexTracker
name|tracker
decl_stmt|;
specifier|private
specifier|final
name|NodeAggregator
name|aggregator
decl_stmt|;
specifier|public
name|LuceneIndex
parameter_list|(
name|IndexTracker
name|tracker
parameter_list|,
name|NodeAggregator
name|aggregator
parameter_list|)
block|{
name|this
operator|.
name|tracker
operator|=
name|tracker
expr_stmt|;
name|this
operator|.
name|aggregator
operator|=
name|aggregator
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getMinimumCost
parameter_list|()
block|{
return|return
name|MIN_COST
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
literal|"lucene"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|IndexPlan
argument_list|>
name|getPlans
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|sortOrder
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
name|FullTextExpression
name|ft
init|=
name|filter
operator|.
name|getFullTextConstraint
argument_list|()
decl_stmt|;
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
comment|// no full-text condition: don't use this index,
comment|// as there might be a better one
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|String
name|indexPath
init|=
operator|new
name|LuceneIndexLookup
argument_list|(
name|rootState
argument_list|)
operator|.
name|getOldFullTextIndexPath
argument_list|(
name|filter
argument_list|,
name|tracker
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexPath
operator|==
literal|null
condition|)
block|{
comment|// unusable index
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|relPaths
init|=
name|getRelativePaths
argument_list|(
name|ft
argument_list|)
decl_stmt|;
if|if
condition|(
name|relPaths
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"More than one relative parent for query "
operator|+
name|filter
operator|.
name|getQueryStatement
argument_list|()
argument_list|)
expr_stmt|;
comment|// there are multiple "parents", as in
comment|// "contains(a/x, 'hello') and contains(b/x, 'world')"
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|IndexNode
name|node
init|=
name|tracker
operator|.
name|acquireIndexNode
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|IndexDefinition
name|defn
init|=
name|node
operator|.
name|getDefinition
argument_list|()
decl_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|planBuilder
argument_list|(
name|filter
argument_list|)
operator|.
name|setEstimatedEntryCount
argument_list|(
name|defn
operator|.
name|getFulltextEntryCount
argument_list|(
name|node
operator|.
name|getSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|numDocs
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCostPerExecution
argument_list|(
name|defn
operator|.
name|getCostPerExecution
argument_list|()
argument_list|)
operator|.
name|setCostPerEntry
argument_list|(
name|defn
operator|.
name|getCostPerEntry
argument_list|()
argument_list|)
operator|.
name|setAttribute
argument_list|(
name|ATTR_INDEX_PATH
argument_list|,
name|indexPath
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|//No index node then no plan possible
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|double
name|getCost
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|NodeState
name|root
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported as implementing AdvancedQueryIndex"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPlan
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|NodeState
name|root
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported as implementing AdvancedQueryIndex"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPlanDescription
parameter_list|(
name|IndexPlan
name|plan
parameter_list|,
name|NodeState
name|root
parameter_list|)
block|{
name|Filter
name|filter
init|=
name|plan
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|IndexNode
name|index
init|=
name|tracker
operator|.
name|acquireIndexNode
argument_list|(
operator|(
name|String
operator|)
name|plan
operator|.
name|getAttribute
argument_list|(
name|ATTR_INDEX_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|index
operator|!=
literal|null
argument_list|,
literal|"The Lucene index is not available"
argument_list|)
expr_stmt|;
try|try
block|{
name|FullTextExpression
name|ft
init|=
name|filter
operator|.
name|getFullTextConstraint
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|relPaths
init|=
name|getRelativePaths
argument_list|(
name|ft
argument_list|)
decl_stmt|;
if|if
condition|(
name|relPaths
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
operator|new
name|MultiLuceneIndex
argument_list|(
name|filter
argument_list|,
name|root
argument_list|,
name|relPaths
argument_list|)
operator|.
name|getPlan
argument_list|()
return|;
block|}
name|String
name|parent
init|=
name|relPaths
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
name|relPaths
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// we only restrict non-full-text conditions if there is
comment|// no relative property in the full-text constraint
name|boolean
name|nonFullTextConstraints
init|=
name|parent
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|String
name|planDesc
init|=
name|getLuceneRequest
argument_list|(
name|filter
argument_list|,
literal|null
argument_list|,
name|nonFullTextConstraints
argument_list|,
name|index
operator|.
name|getDefinition
argument_list|()
argument_list|)
operator|+
literal|" ft:("
operator|+
name|ft
operator|+
literal|")"
decl_stmt|;
if|if
condition|(
operator|!
name|parent
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|planDesc
operator|+=
literal|" parent:"
operator|+
name|parent
expr_stmt|;
block|}
return|return
name|planDesc
return|;
block|}
finally|finally
block|{
name|index
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Cursor
name|query
parameter_list|(
specifier|final
name|Filter
name|filter
parameter_list|,
specifier|final
name|NodeState
name|root
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported as implementing AdvancedQueryIndex"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Cursor
name|query
parameter_list|(
specifier|final
name|IndexPlan
name|plan
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
specifier|final
name|Filter
name|filter
init|=
name|plan
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|FullTextExpression
name|ft
init|=
name|filter
operator|.
name|getFullTextConstraint
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|relPaths
init|=
name|getRelativePaths
argument_list|(
name|ft
argument_list|)
decl_stmt|;
if|if
condition|(
name|relPaths
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
operator|new
name|MultiLuceneIndex
argument_list|(
name|filter
argument_list|,
name|rootState
argument_list|,
name|relPaths
argument_list|)
operator|.
name|query
argument_list|()
return|;
block|}
specifier|final
name|String
name|parent
init|=
name|relPaths
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
name|relPaths
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// we only restrict non-full-text conditions if there is
comment|// no relative property in the full-text constraint
specifier|final
name|boolean
name|nonFullTextConstraints
init|=
name|parent
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
specifier|final
name|int
name|parentDepth
init|=
name|getDepth
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|QueryEngineSettings
name|settings
init|=
name|filter
operator|.
name|getQueryEngineSettings
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|LuceneResultRow
argument_list|>
name|itr
init|=
operator|new
name|AbstractIterator
argument_list|<
name|LuceneResultRow
argument_list|>
argument_list|()
block|{
specifier|private
specifier|final
name|Deque
argument_list|<
name|LuceneResultRow
argument_list|>
name|queue
init|=
name|Queues
operator|.
name|newArrayDeque
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|seenPaths
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
specifier|private
name|ScoreDoc
name|lastDoc
decl_stmt|;
specifier|private
name|int
name|nextBatchSize
init|=
name|LUCENE_QUERY_BATCH_SIZE
decl_stmt|;
specifier|private
name|boolean
name|noDocs
init|=
literal|false
decl_stmt|;
specifier|private
name|long
name|lastSearchIndexerVersion
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|LuceneResultRow
name|computeNext
parameter_list|()
block|{
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
operator|||
name|loadDocs
argument_list|()
condition|)
block|{
return|return
name|queue
operator|.
name|remove
argument_list|()
return|;
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
specifier|private
name|LuceneResultRow
name|convertToRow
parameter_list|(
name|ScoreDoc
name|doc
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexReader
name|reader
init|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|PathStoredFieldVisitor
name|visitor
init|=
operator|new
name|PathStoredFieldVisitor
argument_list|()
decl_stmt|;
name|reader
operator|.
name|document
argument_list|(
name|doc
operator|.
name|doc
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|visitor
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|parent
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// TODO OAK-828 this breaks node aggregation
comment|// get the base path
comment|// ensure the path ends with the given
comment|// relative path
comment|// if (!path.endsWith("/" + parent)) {
comment|// continue;
comment|// }
name|path
operator|=
name|getAncestorPath
argument_list|(
name|path
argument_list|,
name|parentDepth
argument_list|)
expr_stmt|;
comment|// avoid duplicate entries
if|if
condition|(
name|seenPaths
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|seenPaths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|LuceneResultRow
argument_list|(
name|path
argument_list|,
name|doc
operator|.
name|score
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**              * Loads the lucene documents in batches              * @return true if any document is loaded              */
specifier|private
name|boolean
name|loadDocs
parameter_list|()
block|{
if|if
condition|(
name|noDocs
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ScoreDoc
name|lastDocToRecord
init|=
literal|null
decl_stmt|;
name|IndexNode
name|indexNode
init|=
name|tracker
operator|.
name|acquireIndexNode
argument_list|(
operator|(
name|String
operator|)
name|plan
operator|.
name|getAttribute
argument_list|(
name|ATTR_INDEX_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|indexNode
operator|!=
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|IndexSearcher
name|searcher
init|=
name|indexNode
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
name|LuceneRequestFacade
name|luceneRequestFacade
init|=
name|getLuceneRequest
argument_list|(
name|filter
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|nonFullTextConstraints
argument_list|,
name|indexNode
operator|.
name|getDefinition
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|luceneRequestFacade
operator|.
name|getLuceneRequest
argument_list|()
operator|instanceof
name|Query
condition|)
block|{
name|Query
name|query
init|=
operator|(
name|Query
operator|)
name|luceneRequestFacade
operator|.
name|getLuceneRequest
argument_list|()
decl_stmt|;
name|TopDocs
name|docs
decl_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|checkForIndexVersionChange
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|lastDoc
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"loading the next {} entries for query {}"
argument_list|,
name|nextBatchSize
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|docs
operator|=
name|searcher
operator|.
name|searchAfter
argument_list|(
name|lastDoc
argument_list|,
name|query
argument_list|,
name|nextBatchSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"loading the first {} entries for query {}"
argument_list|,
name|nextBatchSize
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|docs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|nextBatchSize
argument_list|)
expr_stmt|;
block|}
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"... took {} ms"
argument_list|,
name|time
argument_list|)
expr_stmt|;
name|nextBatchSize
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|nextBatchSize
operator|*
literal|2L
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
for|for
control|(
name|ScoreDoc
name|doc
range|:
name|docs
operator|.
name|scoreDocs
control|)
block|{
name|LuceneResultRow
name|row
init|=
name|convertToRow
argument_list|(
name|doc
argument_list|,
name|searcher
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|!=
literal|null
condition|)
block|{
name|queue
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|lastDocToRecord
operator|=
name|doc
expr_stmt|;
block|}
if|if
condition|(
name|queue
operator|.
name|isEmpty
argument_list|()
operator|&&
name|docs
operator|.
name|scoreDocs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|lastDoc
operator|=
name|lastDocToRecord
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|luceneRequestFacade
operator|.
name|getLuceneRequest
argument_list|()
operator|instanceof
name|SpellcheckHelper
operator|.
name|SpellcheckQuery
condition|)
block|{
name|SpellcheckHelper
operator|.
name|SpellcheckQuery
name|spellcheckQuery
init|=
operator|(
name|SpellcheckHelper
operator|.
name|SpellcheckQuery
operator|)
name|luceneRequestFacade
operator|.
name|getLuceneRequest
argument_list|()
decl_stmt|;
name|SuggestWord
index|[]
name|suggestWords
init|=
name|SpellcheckHelper
operator|.
name|getSpellcheck
argument_list|(
name|spellcheckQuery
argument_list|)
decl_stmt|;
comment|// ACL filter spellchecks
name|Collection
argument_list|<
name|String
argument_list|>
name|suggestedWords
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|suggestWords
operator|.
name|length
argument_list|)
decl_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
name|Version
operator|.
name|LUCENE_47
argument_list|,
name|FieldNames
operator|.
name|SUGGEST
argument_list|,
name|indexNode
operator|.
name|getDefinition
argument_list|()
operator|.
name|getAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SuggestWord
name|suggestion
range|:
name|suggestWords
control|)
block|{
name|Query
name|query
init|=
name|qp
operator|.
name|createPhraseQuery
argument_list|(
name|FieldNames
operator|.
name|SUGGEST
argument_list|,
name|suggestion
operator|.
name|string
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|topDocs
operator|.
name|totalHits
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ScoreDoc
name|doc
range|:
name|topDocs
operator|.
name|scoreDocs
control|)
block|{
name|Document
name|retrievedDoc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|doc
operator|.
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|isAccessible
argument_list|(
name|retrievedDoc
operator|.
name|get
argument_list|(
name|FieldNames
operator|.
name|PATH
argument_list|)
argument_list|)
condition|)
block|{
name|suggestedWords
operator|.
name|add
argument_list|(
name|suggestion
operator|.
name|string
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|queue
operator|.
name|add
argument_list|(
operator|new
name|LuceneResultRow
argument_list|(
name|suggestedWords
argument_list|)
argument_list|)
expr_stmt|;
name|noDocs
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|luceneRequestFacade
operator|.
name|getLuceneRequest
argument_list|()
operator|instanceof
name|SuggestHelper
operator|.
name|SuggestQuery
condition|)
block|{
name|SuggestHelper
operator|.
name|SuggestQuery
name|suggestQuery
init|=
operator|(
name|SuggestHelper
operator|.
name|SuggestQuery
operator|)
name|luceneRequestFacade
operator|.
name|getLuceneRequest
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Lookup
operator|.
name|LookupResult
argument_list|>
name|lookupResults
init|=
name|SuggestHelper
operator|.
name|getSuggestions
argument_list|(
name|suggestQuery
argument_list|)
decl_stmt|;
comment|// ACL filter suggestions
name|Collection
argument_list|<
name|String
argument_list|>
name|suggestedWords
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|lookupResults
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
name|Version
operator|.
name|LUCENE_47
argument_list|,
name|FieldNames
operator|.
name|FULLTEXT
argument_list|,
name|indexNode
operator|.
name|getDefinition
argument_list|()
operator|.
name|getAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Lookup
operator|.
name|LookupResult
name|suggestion
range|:
name|lookupResults
control|)
block|{
name|Query
name|query
init|=
name|qp
operator|.
name|createPhraseQuery
argument_list|(
name|FieldNames
operator|.
name|FULLTEXT
argument_list|,
name|suggestion
operator|.
name|key
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|topDocs
operator|.
name|totalHits
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ScoreDoc
name|doc
range|:
name|topDocs
operator|.
name|scoreDocs
control|)
block|{
name|Document
name|retrievedDoc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|doc
operator|.
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|isAccessible
argument_list|(
name|retrievedDoc
operator|.
name|get
argument_list|(
name|FieldNames
operator|.
name|PATH
argument_list|)
argument_list|)
condition|)
block|{
name|suggestedWords
operator|.
name|add
argument_list|(
literal|"{term="
operator|+
name|suggestion
operator|.
name|key
operator|+
literal|",weight="
operator|+
name|suggestion
operator|.
name|value
operator|+
literal|"}"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|queue
operator|.
name|add
argument_list|(
operator|new
name|LuceneResultRow
argument_list|(
name|suggestedWords
argument_list|)
argument_list|)
expr_stmt|;
name|noDocs
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"query via {} failed."
argument_list|,
name|LuceneIndex
operator|.
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexNode
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lastDocToRecord
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|lastDoc
operator|=
name|lastDocToRecord
expr_stmt|;
block|}
return|return
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|private
name|void
name|checkForIndexVersionChange
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|)
block|{
name|long
name|currentVersion
init|=
name|LucenePropertyIndex
operator|.
name|getVersion
argument_list|(
name|searcher
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentVersion
operator|!=
name|lastSearchIndexerVersion
operator|&&
name|lastDoc
operator|!=
literal|null
condition|)
block|{
name|lastDoc
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Change in index version detected {} => {}. Query would be performed without "
operator|+
literal|"offset"
argument_list|,
name|currentVersion
argument_list|,
name|lastSearchIndexerVersion
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|lastSearchIndexerVersion
operator|=
name|currentVersion
expr_stmt|;
block|}
block|}
decl_stmt|;
name|SizeEstimator
name|sizeEstimator
init|=
operator|new
name|SizeEstimator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|()
block|{
name|IndexNode
name|indexNode
init|=
name|tracker
operator|.
name|acquireIndexNode
argument_list|(
operator|(
name|String
operator|)
name|plan
operator|.
name|getAttribute
argument_list|(
name|ATTR_INDEX_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|indexNode
operator|!=
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|IndexSearcher
name|searcher
init|=
name|indexNode
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
name|LuceneRequestFacade
name|luceneRequestFacade
init|=
name|getLuceneRequest
argument_list|(
name|filter
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|nonFullTextConstraints
argument_list|,
name|indexNode
operator|.
name|getDefinition
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|luceneRequestFacade
operator|.
name|getLuceneRequest
argument_list|()
operator|instanceof
name|Query
condition|)
block|{
name|Query
name|query
init|=
operator|(
name|Query
operator|)
name|luceneRequestFacade
operator|.
name|getLuceneRequest
argument_list|()
decl_stmt|;
name|TotalHitCountCollector
name|collector
init|=
operator|new
name|TotalHitCountCollector
argument_list|()
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|collector
argument_list|)
expr_stmt|;
name|int
name|totalHits
init|=
name|collector
operator|.
name|getTotalHits
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Estimated size for query {} is {}"
argument_list|,
name|query
argument_list|,
name|totalHits
argument_list|)
expr_stmt|;
return|return
name|totalHits
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Estimated size: not a Query: {}"
argument_list|,
name|luceneRequestFacade
operator|.
name|getLuceneRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"query via {} failed."
argument_list|,
name|LuceneIndex
operator|.
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexNode
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|LucenePathCursor
argument_list|(
name|itr
argument_list|,
name|settings
argument_list|,
name|sizeEstimator
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|IndexPlan
operator|.
name|Builder
name|planBuilder
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
return|return
operator|new
name|IndexPlan
operator|.
name|Builder
argument_list|()
operator|.
name|setCostPerExecution
argument_list|(
literal|0
argument_list|)
comment|// we're local. Low-cost
operator|.
name|setCostPerEntry
argument_list|(
literal|1
argument_list|)
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
operator|.
name|setFulltextIndex
argument_list|(
literal|true
argument_list|)
operator|.
name|setEstimatedEntryCount
argument_list|(
literal|0
argument_list|)
comment|//TODO Fake it to provide constant cost for now
operator|.
name|setIncludesNodeData
argument_list|(
literal|false
argument_list|)
comment|// we should not include node data
operator|.
name|setDelayed
argument_list|(
literal|true
argument_list|)
return|;
comment|//Lucene is always async
block|}
comment|/**      * Get the set of relative paths of a full-text condition. For example, for      * the condition "contains(a/b, 'hello') and contains(c/d, 'world'), the set      * { "a", "c" } is returned. If there are no relative properties, then one      * entry is returned (the empty string). If there is no expression, then an      * empty set is returned.      *      * @param ft the full-text expression      * @return the set of relative paths (possibly empty)      */
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getRelativePaths
parameter_list|(
name|FullTextExpression
name|ft
parameter_list|)
block|{
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
comment|// there might be no full-text constraint when using the
comment|// LowCostLuceneIndexProvider which is used for testing
comment|// TODO if the LowCostLuceneIndexProvider is removed, we should do
comment|// the following instead:
comment|// throw new
comment|// IllegalStateException("Lucene index is used even when no full-text conditions are used for filter "
comment|// + filter);
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|relPaths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ft
operator|.
name|accept
argument_list|(
operator|new
name|FullTextVisitor
operator|.
name|FullTextVisitorBase
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|FullTextTerm
name|term
parameter_list|)
block|{
name|String
name|p
init|=
name|term
operator|.
name|getPropertyName
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|relPaths
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
literal|"../"
argument_list|)
operator|||
name|p
operator|.
name|startsWith
argument_list|(
literal|"./"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Relative parent is not supported:"
operator|+
name|p
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|getDepth
argument_list|(
name|p
argument_list|)
operator|>
literal|1
condition|)
block|{
name|String
name|parent
init|=
name|getParentPath
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|relPaths
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|relPaths
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|relPaths
return|;
block|}
comment|/**      * Get the Lucene query for the given filter.      *      * @param filter the filter, including full-text constraint      * @param reader the Lucene reader      * @param nonFullTextConstraints whether non-full-text constraints (such a      *            path, node type, and so on) should be added to the Lucene      *            query      * @param indexDefinition nodestate that contains the index definition      * @return the Lucene query      */
specifier|private
specifier|static
name|LuceneRequestFacade
name|getLuceneRequest
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|boolean
name|nonFullTextConstraints
parameter_list|,
name|IndexDefinition
name|indexDefinition
parameter_list|)
block|{
name|List
argument_list|<
name|Query
argument_list|>
name|qs
init|=
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|()
decl_stmt|;
name|Analyzer
name|analyzer
init|=
name|indexDefinition
operator|.
name|getAnalyzer
argument_list|()
decl_stmt|;
name|FullTextExpression
name|ft
init|=
name|filter
operator|.
name|getFullTextConstraint
argument_list|()
decl_stmt|;
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
comment|// there might be no full-text constraint
comment|// when using the LowCostLuceneIndexProvider
comment|// which is used for testing
block|}
else|else
block|{
name|qs
operator|.
name|add
argument_list|(
name|getFullTextQuery
argument_list|(
name|ft
argument_list|,
name|analyzer
argument_list|,
name|reader
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PropertyRestriction
name|pr
init|=
name|filter
operator|.
name|getPropertyRestriction
argument_list|(
name|NATIVE_QUERY_FUNCTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|!=
literal|null
condition|)
block|{
name|String
name|query
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|pr
operator|.
name|first
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QueryParser
name|queryParser
init|=
operator|new
name|QueryParser
argument_list|(
name|VERSION
argument_list|,
literal|""
argument_list|,
name|indexDefinition
operator|.
name|getAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|startsWith
argument_list|(
literal|"mlt?"
argument_list|)
condition|)
block|{
name|String
name|mltQueryString
init|=
name|query
operator|.
name|replace
argument_list|(
literal|"mlt?"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|Query
name|moreLikeThis
init|=
name|MoreLikeThisHelper
operator|.
name|getMoreLikeThis
argument_list|(
name|reader
argument_list|,
name|analyzer
argument_list|,
name|mltQueryString
argument_list|)
decl_stmt|;
if|if
condition|(
name|moreLikeThis
operator|!=
literal|null
condition|)
block|{
name|qs
operator|.
name|add
argument_list|(
name|moreLikeThis
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|query
operator|.
name|startsWith
argument_list|(
literal|"spellcheck?"
argument_list|)
condition|)
block|{
name|String
name|spellcheckQueryString
init|=
name|query
operator|.
name|replace
argument_list|(
literal|"spellcheck?"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|LuceneRequestFacade
argument_list|<
name|SpellcheckHelper
operator|.
name|SpellcheckQuery
argument_list|>
argument_list|(
name|SpellcheckHelper
operator|.
name|getSpellcheckQuery
argument_list|(
name|spellcheckQueryString
argument_list|,
name|reader
argument_list|)
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|query
operator|.
name|startsWith
argument_list|(
literal|"suggest?"
argument_list|)
condition|)
block|{
name|String
name|suggestQueryString
init|=
name|query
operator|.
name|replace
argument_list|(
literal|"suggest?"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|LuceneRequestFacade
argument_list|<
name|SuggestHelper
operator|.
name|SuggestQuery
argument_list|>
argument_list|(
name|SuggestHelper
operator|.
name|getSuggestQuery
argument_list|(
name|suggestQueryString
argument_list|)
argument_list|)
return|;
block|}
block|}
else|else
block|{
try|try
block|{
name|qs
operator|.
name|add
argument_list|(
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|nonFullTextConstraints
condition|)
block|{
name|addNonFullTextConstraints
argument_list|(
name|qs
argument_list|,
name|filter
argument_list|,
name|reader
argument_list|,
name|analyzer
argument_list|,
name|indexDefinition
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|qs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|LuceneRequestFacade
argument_list|<
name|Query
argument_list|>
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|)
return|;
block|}
return|return
name|LucenePropertyIndex
operator|.
name|performAdditionalWraps
argument_list|(
name|qs
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|addNonFullTextConstraints
parameter_list|(
name|List
argument_list|<
name|Query
argument_list|>
name|qs
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|IndexDefinition
name|indexDefinition
parameter_list|)
block|{
if|if
condition|(
operator|!
name|filter
operator|.
name|matchesAllTypes
argument_list|()
condition|)
block|{
name|addNodeTypeConstraints
argument_list|(
name|qs
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
name|String
name|path
init|=
name|filter
operator|.
name|getPath
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|filter
operator|.
name|getPathRestriction
argument_list|()
condition|)
block|{
case|case
name|ALL_CHILDREN
case|:
if|if
condition|(
name|USE_PATH_RESTRICTION
condition|)
block|{
if|if
condition|(
literal|"/"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|+=
literal|"/"
expr_stmt|;
block|}
name|qs
operator|.
name|add
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
name|newPathTerm
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DIRECT_CHILDREN
case|:
if|if
condition|(
name|USE_PATH_RESTRICTION
condition|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|+=
literal|"/"
expr_stmt|;
block|}
name|qs
operator|.
name|add
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
name|newPathTerm
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|EXACT
case|:
name|qs
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|newPathTerm
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PARENT
case|:
if|if
condition|(
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// there's no parent of the root node
comment|// we add a path that can not possibly occur because there
comment|// is no way to say "match no documents" in Lucene
name|qs
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FieldNames
operator|.
name|PATH
argument_list|,
literal|"///"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qs
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|newPathTerm
argument_list|(
name|getParentPath
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NO_RESTRICTION
case|:
break|break;
block|}
comment|//Fulltext index definition used by LuceneIndex only works with old format
comment|//which is not nodeType based. So just use the nt:base index
name|IndexingRule
name|rule
init|=
name|indexDefinition
operator|.
name|getApplicableIndexingRule
argument_list|(
name|JcrConstants
operator|.
name|NT_BASE
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyRestriction
name|pr
range|:
name|filter
operator|.
name|getPropertyRestrictions
argument_list|()
control|)
block|{
if|if
condition|(
name|pr
operator|.
name|first
operator|==
literal|null
operator|&&
name|pr
operator|.
name|last
operator|==
literal|null
condition|)
block|{
comment|// we only support equality or range queries,
comment|// but not "in", "is null", "is not null"
comment|// queries (OAK-1208)
continue|continue;
block|}
comment|// check excluded properties and types
if|if
condition|(
name|isExcludedProperty
argument_list|(
name|pr
argument_list|,
name|rule
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|pr
operator|.
name|propertyName
decl_stmt|;
if|if
condition|(
literal|"rep:excerpt"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|JCR_PRIMARYTYPE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|QueryConstants
operator|.
name|RESTRICTION_LOCAL_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|skipTokenization
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|qs
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|name
argument_list|,
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|first
init|=
literal|null
decl_stmt|;
name|String
name|last
init|=
literal|null
decl_stmt|;
name|boolean
name|isLike
init|=
name|pr
operator|.
name|isLike
decl_stmt|;
comment|// TODO what to do with escaped tokens?
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
condition|)
block|{
name|first
operator|=
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
name|first
operator|=
name|first
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pr
operator|.
name|last
operator|!=
literal|null
condition|)
block|{
name|last
operator|=
name|pr
operator|.
name|last
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
name|last
operator|=
name|last
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isLike
condition|)
block|{
name|first
operator|=
name|first
operator|.
name|replace
argument_list|(
literal|'%'
argument_list|,
name|WildcardQuery
operator|.
name|WILDCARD_STRING
argument_list|)
expr_stmt|;
name|first
operator|=
name|first
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
name|WildcardQuery
operator|.
name|WILDCARD_CHAR
argument_list|)
expr_stmt|;
name|int
name|indexOfWS
init|=
name|first
operator|.
name|indexOf
argument_list|(
name|WildcardQuery
operator|.
name|WILDCARD_STRING
argument_list|)
decl_stmt|;
name|int
name|indexOfWC
init|=
name|first
operator|.
name|indexOf
argument_list|(
name|WildcardQuery
operator|.
name|WILDCARD_CHAR
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|first
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexOfWS
operator|==
name|len
operator|||
name|indexOfWC
operator|==
name|len
condition|)
block|{
comment|// remove trailing "*" for prefixquery
name|first
operator|=
name|first
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|first
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|JCR_PATH
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|qs
operator|.
name|add
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
name|newPathTerm
argument_list|(
name|first
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qs
operator|.
name|add
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|name
argument_list|,
name|first
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|JCR_PATH
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|qs
operator|.
name|add
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
name|newPathTerm
argument_list|(
name|first
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qs
operator|.
name|add
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|name
argument_list|,
name|first
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
continue|continue;
block|}
if|if
condition|(
name|first
operator|!=
literal|null
operator|&&
name|first
operator|.
name|equals
argument_list|(
name|last
argument_list|)
operator|&&
name|pr
operator|.
name|firstIncluding
operator|&&
name|pr
operator|.
name|lastIncluding
condition|)
block|{
if|if
condition|(
name|JCR_PATH
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|qs
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|newPathTerm
argument_list|(
name|first
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|addReferenceConstraint
argument_list|(
name|first
argument_list|,
name|qs
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|t
range|:
name|tokenize
argument_list|(
name|first
argument_list|,
name|analyzer
argument_list|)
control|)
block|{
name|qs
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|name
argument_list|,
name|t
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
continue|continue;
block|}
name|first
operator|=
name|tokenizeAndPoll
argument_list|(
name|first
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|last
operator|=
name|tokenizeAndPoll
argument_list|(
name|last
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|qs
operator|.
name|add
argument_list|(
name|TermRangeQuery
operator|.
name|newStringRange
argument_list|(
name|name
argument_list|,
name|first
argument_list|,
name|last
argument_list|,
name|pr
operator|.
name|firstIncluding
argument_list|,
name|pr
operator|.
name|lastIncluding
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|tokenizeAndPoll
parameter_list|(
name|String
name|token
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
block|{
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|tokenize
argument_list|(
name|token
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tokens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|token
operator|=
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|token
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isExcludedProperty
parameter_list|(
name|PropertyRestriction
name|pr
parameter_list|,
name|IndexingRule
name|rule
parameter_list|)
block|{
name|String
name|name
init|=
name|pr
operator|.
name|propertyName
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// lucene cannot handle child-level property restrictions
return|return
literal|true
return|;
block|}
name|PropertyDefinition
name|pd
init|=
name|rule
operator|.
name|getConfig
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// check name
if|if
condition|(
name|pd
operator|==
literal|null
operator|||
operator|!
name|pd
operator|.
name|index
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// check type
name|Integer
name|type
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|pr
operator|.
name|first
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|last
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|pr
operator|.
name|last
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|list
operator|!=
literal|null
operator|&&
operator|!
name|pr
operator|.
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|type
operator|=
name|pr
operator|.
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|includePropertyType
argument_list|(
name|type
argument_list|,
name|rule
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|includePropertyType
parameter_list|(
name|int
name|type
parameter_list|,
name|IndexingRule
name|rule
parameter_list|)
block|{
if|if
condition|(
name|rule
operator|.
name|propertyTypes
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
name|rule
operator|.
name|propertyTypes
operator|&
operator|(
literal|1
operator|<<
name|type
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
specifier|private
specifier|static
name|void
name|addReferenceConstraint
parameter_list|(
name|String
name|uuid
parameter_list|,
name|List
argument_list|<
name|Query
argument_list|>
name|qs
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
comment|// getPlan call
name|qs
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"*"
argument_list|,
name|uuid
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// reference query
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|MultiFields
operator|.
name|getIndexedFields
argument_list|(
name|reader
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|fields
control|)
block|{
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|f
argument_list|,
name|uuid
argument_list|)
argument_list|)
argument_list|,
name|SHOULD
argument_list|)
expr_stmt|;
block|}
name|qs
operator|.
name|add
argument_list|(
name|bq
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|addNodeTypeConstraints
parameter_list|(
name|List
argument_list|<
name|Query
argument_list|>
name|qs
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|filter
operator|.
name|getPrimaryTypes
argument_list|()
control|)
block|{
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|type
argument_list|)
argument_list|)
argument_list|,
name|SHOULD
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|type
range|:
name|filter
operator|.
name|getMixinTypes
argument_list|()
control|)
block|{
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|type
argument_list|)
argument_list|)
argument_list|,
name|SHOULD
argument_list|)
expr_stmt|;
block|}
name|qs
operator|.
name|add
argument_list|(
name|bq
argument_list|)
expr_stmt|;
block|}
specifier|static
name|Query
name|getFullTextQuery
parameter_list|(
name|FullTextExpression
name|ft
parameter_list|,
specifier|final
name|Analyzer
name|analyzer
parameter_list|,
specifier|final
name|IndexReader
name|reader
parameter_list|)
block|{
comment|// a reference to the query, so it can be set in the visitor
comment|// (a "non-local return")
specifier|final
name|AtomicReference
argument_list|<
name|Query
argument_list|>
name|result
init|=
operator|new
name|AtomicReference
argument_list|<
name|Query
argument_list|>
argument_list|()
decl_stmt|;
name|ft
operator|.
name|accept
argument_list|(
operator|new
name|FullTextVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|FullTextContains
name|contains
parameter_list|)
block|{
return|return
name|contains
operator|.
name|getBase
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|FullTextOr
name|or
parameter_list|)
block|{
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|FullTextExpression
name|e
range|:
name|or
operator|.
name|list
control|)
block|{
name|Query
name|x
init|=
name|getFullTextQuery
argument_list|(
name|e
argument_list|,
name|analyzer
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|x
argument_list|,
name|SHOULD
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|q
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|FullTextAnd
name|and
parameter_list|)
block|{
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|FullTextExpression
name|e
range|:
name|and
operator|.
name|list
control|)
block|{
name|Query
name|x
init|=
name|getFullTextQuery
argument_list|(
name|e
argument_list|,
name|analyzer
argument_list|,
name|reader
argument_list|)
decl_stmt|;
comment|/* Only unwrap the clause if MUST_NOT(x) */
name|boolean
name|hasMustNot
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|x
operator|instanceof
name|BooleanQuery
condition|)
block|{
name|BooleanQuery
name|bq
init|=
operator|(
name|BooleanQuery
operator|)
name|x
decl_stmt|;
if|if
condition|(
operator|(
name|bq
operator|.
name|getClauses
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|)
operator|&&
operator|(
name|bq
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|.
name|getOccur
argument_list|()
operator|==
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
operator|)
condition|)
block|{
name|hasMustNot
operator|=
literal|true
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|bq
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|hasMustNot
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|x
argument_list|,
name|MUST
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|set
argument_list|(
name|q
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|FullTextTerm
name|term
parameter_list|)
block|{
return|return
name|visitTerm
argument_list|(
name|term
operator|.
name|getPropertyName
argument_list|()
argument_list|,
name|term
operator|.
name|getText
argument_list|()
argument_list|,
name|term
operator|.
name|getBoost
argument_list|()
argument_list|,
name|term
operator|.
name|isNot
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|visitTerm
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|boost
parameter_list|,
name|boolean
name|not
parameter_list|)
block|{
name|String
name|p
init|=
name|propertyName
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|p
operator|=
name|getName
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|Query
name|q
init|=
name|tokenToQuery
argument_list|(
name|text
argument_list|,
name|p
argument_list|,
name|analyzer
argument_list|,
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|boost
operator|!=
literal|null
condition|)
block|{
name|q
operator|.
name|setBoost
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|boost
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|not
condition|)
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|q
argument_list|,
name|MUST_NOT
argument_list|)
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
name|bq
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|set
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|get
argument_list|()
return|;
block|}
specifier|static
name|Query
name|tokenToQuery
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|tokenize
argument_list|(
name|text
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// TODO what should be returned in the case there are no tokens?
return|return
operator|new
name|BooleanQuery
argument_list|()
return|;
block|}
if|if
condition|(
name|tokens
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|String
name|token
init|=
name|tokens
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasFulltextToken
argument_list|(
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|WildcardQuery
argument_list|(
name|newFulltextTerm
argument_list|(
name|token
argument_list|,
name|fieldName
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|TermQuery
argument_list|(
name|newFulltextTerm
argument_list|(
name|token
argument_list|,
name|fieldName
argument_list|)
argument_list|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|hasFulltextToken
argument_list|(
name|tokens
argument_list|)
condition|)
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|hasFulltextToken
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|bq
operator|.
name|add
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
name|newFulltextTerm
argument_list|(
name|token
argument_list|,
name|fieldName
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|newFulltextTerm
argument_list|(
name|token
argument_list|,
name|fieldName
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bq
return|;
block|}
else|else
block|{
name|PhraseQuery
name|pq
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|tokens
control|)
block|{
name|pq
operator|.
name|add
argument_list|(
name|newFulltextTerm
argument_list|(
name|t
argument_list|,
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|pq
return|;
block|}
block|}
block|}
specifier|private
specifier|static
name|boolean
name|hasFulltextToken
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|tokens
parameter_list|)
block|{
for|for
control|(
name|String
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|hasFulltextToken
argument_list|(
name|token
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|hasFulltextToken
parameter_list|(
name|String
name|token
parameter_list|)
block|{
for|for
control|(
name|char
name|c
range|:
name|fulltextTokens
control|)
block|{
if|if
condition|(
name|token
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|char
index|[]
name|fulltextTokens
init|=
operator|new
name|char
index|[]
block|{
literal|'*'
block|,
literal|'?'
block|}
decl_stmt|;
comment|/**      * Tries to merge back tokens that are split on relevant fulltext query      * wildcards ('*' or '?')      *      *      * @param text      * @param analyzer      * @return      */
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|tokenize
parameter_list|(
name|String
name|text
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|TokenStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stream
operator|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|FieldNames
operator|.
name|FULLTEXT
argument_list|,
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|CharTermAttribute
name|termAtt
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|OffsetAttribute
name|offsetAtt
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// TypeAttribute type = stream.addAttribute(TypeAttribute.class);
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|int
name|poz
init|=
literal|0
decl_stmt|;
name|boolean
name|hasFulltextToken
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|token
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|stream
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|String
name|term
init|=
name|termAtt
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|start
init|=
name|offsetAtt
operator|.
name|startOffset
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|offsetAtt
operator|.
name|endOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|>
name|poz
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|poz
init|;
name|i
operator|<
name|start
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|char
name|c
range|:
name|fulltextTokens
control|)
block|{
if|if
condition|(
name|c
operator|==
name|text
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|token
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|hasFulltextToken
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
name|poz
operator|=
name|end
expr_stmt|;
if|if
condition|(
name|hasFulltextToken
condition|)
block|{
name|token
operator|.
name|append
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|hasFulltextToken
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|token
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|token
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|token
operator|.
name|append
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
block|}
comment|// consume to the end of the string
if|if
condition|(
name|poz
operator|<
name|text
operator|.
name|length
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|poz
init|;
name|i
operator|<
name|text
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|char
name|c
range|:
name|fulltextTokens
control|)
block|{
if|if
condition|(
name|c
operator|==
name|text
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|token
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|token
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Building fulltext query failed"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
name|tokens
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeAggregator
name|getNodeAggregator
parameter_list|()
block|{
return|return
name|aggregator
return|;
block|}
specifier|static
class|class
name|LuceneResultRow
block|{
specifier|final
name|String
name|path
decl_stmt|;
specifier|final
name|double
name|score
decl_stmt|;
specifier|final
name|Iterable
argument_list|<
name|String
argument_list|>
name|suggestWords
decl_stmt|;
name|LuceneResultRow
parameter_list|(
name|String
name|path
parameter_list|,
name|double
name|score
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|score
operator|=
name|score
expr_stmt|;
name|this
operator|.
name|suggestWords
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
name|LuceneResultRow
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|suggestWords
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
literal|"/"
expr_stmt|;
name|this
operator|.
name|score
operator|=
literal|1.0d
expr_stmt|;
name|this
operator|.
name|suggestWords
operator|=
name|suggestWords
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s (%1.2f)"
argument_list|,
name|path
argument_list|,
name|score
argument_list|)
return|;
block|}
block|}
comment|/**      * A cursor over Lucene results. The result includes the path,      * and the jcr:score pseudo-property as returned by Lucene.      */
specifier|static
class|class
name|LucenePathCursor
implements|implements
name|Cursor
block|{
specifier|private
specifier|final
name|Cursor
name|pathCursor
decl_stmt|;
name|LuceneResultRow
name|currentRow
decl_stmt|;
specifier|private
specifier|final
name|SizeEstimator
name|sizeEstimator
decl_stmt|;
specifier|private
name|long
name|estimatedSize
decl_stmt|;
name|LucenePathCursor
parameter_list|(
specifier|final
name|Iterator
argument_list|<
name|LuceneResultRow
argument_list|>
name|it
parameter_list|,
name|QueryEngineSettings
name|settings
parameter_list|,
name|SizeEstimator
name|sizeEstimator
parameter_list|)
block|{
name|this
operator|.
name|sizeEstimator
operator|=
name|sizeEstimator
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|pathIterator
init|=
operator|new
name|Iterator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|it
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
name|currentRow
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|currentRow
operator|.
name|path
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|pathCursor
operator|=
operator|new
name|PathCursor
argument_list|(
name|pathIterator
argument_list|,
literal|true
argument_list|,
name|settings
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|pathCursor
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|pathCursor
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|IndexRow
name|next
parameter_list|()
block|{
specifier|final
name|IndexRow
name|pathRow
init|=
name|pathCursor
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
operator|new
name|IndexRow
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isVirtualRow
parameter_list|()
block|{
return|return
name|getPath
argument_list|()
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|pathRow
operator|.
name|getPath
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyValue
name|getValue
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
comment|// overlay the score
if|if
condition|(
name|QueryImpl
operator|.
name|JCR_SCORE
operator|.
name|equals
argument_list|(
name|columnName
argument_list|)
condition|)
block|{
return|return
name|PropertyValues
operator|.
name|newDouble
argument_list|(
name|currentRow
operator|.
name|score
argument_list|)
return|;
block|}
if|if
condition|(
name|QueryImpl
operator|.
name|REP_SPELLCHECK
operator|.
name|equals
argument_list|(
name|columnName
argument_list|)
operator|||
name|QueryImpl
operator|.
name|REP_SUGGEST
operator|.
name|equals
argument_list|(
name|columnName
argument_list|)
condition|)
block|{
return|return
name|PropertyValues
operator|.
name|newString
argument_list|(
name|Iterables
operator|.
name|toString
argument_list|(
name|currentRow
operator|.
name|suggestWords
argument_list|)
argument_list|)
return|;
block|}
return|return
name|pathRow
operator|.
name|getValue
argument_list|(
name|columnName
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|(
name|SizePrecision
name|precision
parameter_list|,
name|long
name|max
parameter_list|)
block|{
if|if
condition|(
name|estimatedSize
operator|!=
literal|0
condition|)
block|{
return|return
name|estimatedSize
return|;
block|}
return|return
name|estimatedSize
operator|=
name|sizeEstimator
operator|.
name|getSize
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|PathStoredFieldVisitor
extends|extends
name|StoredFieldVisitor
block|{
specifier|private
name|String
name|path
decl_stmt|;
specifier|private
name|boolean
name|pathVisited
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Status
name|needsField
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|PATH
operator|.
name|equals
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
condition|)
block|{
return|return
name|Status
operator|.
name|YES
return|;
block|}
return|return
name|pathVisited
condition|?
name|Status
operator|.
name|STOP
else|:
name|Status
operator|.
name|NO
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stringField
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|PATH
operator|.
name|equals
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
condition|)
block|{
name|path
operator|=
name|value
expr_stmt|;
name|pathVisited
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
block|}
block|}
end_class

end_unit

