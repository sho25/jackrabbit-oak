begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Weigher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheLIRS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|EmpiricalWeigher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeState
operator|.
name|Children
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoVersionGCSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
operator|.
name|CacheType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
operator|.
name|PersistentCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|RevisionsKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A JSON-based wrapper around the NodeStore implementation that stores the  * data in a {@link DocumentStore}. It is used for testing purpose only.  */
end_comment

begin_class
specifier|public
class|class
name|DocumentMK
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DocumentMK
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The path where the persistent cache is stored.      */
specifier|static
specifier|final
name|String
name|DEFAULT_PERSISTENT_CACHE_URI
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.documentMK.persCache"
argument_list|)
decl_stmt|;
comment|/**      * The threshold where special handling for many child node starts.      */
specifier|static
specifier|final
name|int
name|MANY_CHILDREN_THRESHOLD
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.documentMK.manyChildren"
argument_list|,
literal|50
argument_list|)
decl_stmt|;
comment|/**      * Enable or disable the LIRS cache (null to use the default setting for this configuration).      */
specifier|static
specifier|final
name|Boolean
name|LIRS_CACHE
decl_stmt|;
static|static
block|{
name|String
name|s
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.documentMK.lirsCache"
argument_list|)
decl_stmt|;
name|LIRS_CACHE
operator|=
name|s
operator|==
literal|null
condition|?
literal|null
else|:
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * Enable fast diff operations.      */
specifier|static
specifier|final
name|boolean
name|FAST_DIFF
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.documentMK.fastDiff"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * The guava cache concurrency level.      */
specifier|static
specifier|final
name|int
name|CACHE_CONCURRENCY
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.documentMK.cacheConcurrency"
argument_list|,
literal|16
argument_list|)
decl_stmt|;
comment|/**      * The node store.      */
specifier|protected
specifier|final
name|DocumentNodeStore
name|nodeStore
decl_stmt|;
comment|/**      * The document store (might be used by multiple DocumentMKs).      */
specifier|protected
specifier|final
name|DocumentStore
name|store
decl_stmt|;
name|DocumentMK
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|nodeStore
operator|=
name|builder
operator|.
name|getNodeStore
argument_list|()
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|nodeStore
operator|.
name|getDocumentStore
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|nodeStore
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
name|void
name|backgroundRead
parameter_list|()
block|{
name|nodeStore
operator|.
name|backgroundRead
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|void
name|backgroundWrite
parameter_list|()
block|{
name|nodeStore
operator|.
name|backgroundWrite
argument_list|()
expr_stmt|;
block|}
name|void
name|runBackgroundOperations
parameter_list|()
block|{
name|nodeStore
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DocumentNodeStore
name|getNodeStore
parameter_list|()
block|{
return|return
name|nodeStore
return|;
block|}
name|ClusterNodeInfo
name|getClusterInfo
parameter_list|()
block|{
return|return
name|nodeStore
operator|.
name|getClusterInfo
argument_list|()
return|;
block|}
name|int
name|getPendingWriteCount
parameter_list|()
block|{
return|return
name|nodeStore
operator|.
name|getPendingWriteCount
argument_list|()
return|;
block|}
specifier|public
name|String
name|getHeadRevision
parameter_list|()
throws|throws
name|DocumentStoreException
block|{
return|return
name|nodeStore
operator|.
name|getHeadRevision
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|checkpoint
parameter_list|(
name|long
name|lifetime
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
try|try
block|{
return|return
name|nodeStore
operator|.
name|checkpoint
argument_list|(
name|lifetime
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DocumentStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|diff
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
if|if
condition|(
name|depth
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"Only depth 0 is supported, depth is "
operator|+
name|depth
argument_list|)
throw|;
block|}
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
try|try
block|{
return|return
name|nodeStore
operator|.
name|diff
argument_list|(
name|fromRevisionId
argument_list|,
name|toRevisionId
argument_list|,
name|path
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DocumentStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|nodeExists
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"Path is not absolute: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|revisionId
operator|=
name|revisionId
operator|!=
literal|null
condition|?
name|revisionId
else|:
name|nodeStore
operator|.
name|getHeadRevision
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|Revision
name|rev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
name|DocumentNodeState
name|n
decl_stmt|;
try|try
block|{
name|n
operator|=
name|nodeStore
operator|.
name|getNode
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|n
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|getNodes
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|int
name|depth
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|maxChildNodes
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
if|if
condition|(
name|depth
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"Only depth 0 is supported, depth is "
operator|+
name|depth
argument_list|)
throw|;
block|}
name|revisionId
operator|=
name|revisionId
operator|!=
literal|null
condition|?
name|revisionId
else|:
name|nodeStore
operator|.
name|getHeadRevision
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|Revision
name|rev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
try|try
block|{
name|DocumentNodeState
name|n
init|=
name|nodeStore
operator|.
name|getNode
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|JsopStream
name|json
init|=
operator|new
name|JsopStream
argument_list|()
decl_stmt|;
name|boolean
name|includeId
init|=
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|contains
argument_list|(
literal|":id"
argument_list|)
decl_stmt|;
name|includeId
operator||=
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|contains
argument_list|(
literal|":hash"
argument_list|)
expr_stmt|;
name|json
operator|.
name|object
argument_list|()
expr_stmt|;
name|n
operator|.
name|append
argument_list|(
name|json
argument_list|,
name|includeId
argument_list|)
expr_stmt|;
name|int
name|max
decl_stmt|;
if|if
condition|(
name|maxChildNodes
operator|==
operator|-
literal|1
condition|)
block|{
name|max
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
name|maxChildNodes
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
else|else
block|{
comment|// use long to avoid overflows
name|long
name|m
init|=
operator|(
operator|(
name|long
operator|)
name|maxChildNodes
operator|)
operator|+
name|offset
decl_stmt|;
name|max
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|m
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
name|Children
name|c
init|=
name|nodeStore
operator|.
name|getChildren
argument_list|(
name|n
argument_list|,
literal|null
argument_list|,
name|max
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
name|offset
init|;
name|i
operator|<
name|c
operator|.
name|children
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|maxChildNodes
operator|--
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
name|String
name|name
init|=
name|c
operator|.
name|children
operator|.
name|get
argument_list|(
operator|(
name|int
operator|)
name|i
argument_list|)
decl_stmt|;
name|json
operator|.
name|key
argument_list|(
name|name
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|.
name|hasMore
condition|)
block|{
comment|// TODO use a better way to notify there are more children
name|json
operator|.
name|key
argument_list|(
literal|":childNodeCount"
argument_list|)
operator|.
name|value
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|json
operator|.
name|key
argument_list|(
literal|":childNodeCount"
argument_list|)
operator|.
name|value
argument_list|(
name|c
operator|.
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|json
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|DocumentStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|commit
parameter_list|(
name|String
name|rootPath
parameter_list|,
name|String
name|jsonDiff
parameter_list|,
name|String
name|baseRevId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|isBranch
init|=
literal|false
decl_stmt|;
name|Revision
name|rev
decl_stmt|;
name|Commit
name|commit
init|=
name|nodeStore
operator|.
name|newCommit
argument_list|(
name|baseRevId
operator|!=
literal|null
condition|?
name|Revision
operator|.
name|fromString
argument_list|(
name|baseRevId
argument_list|)
else|:
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|Revision
name|baseRev
init|=
name|commit
operator|.
name|getBaseRevision
argument_list|()
decl_stmt|;
name|isBranch
operator|=
name|baseRev
operator|!=
literal|null
operator|&&
name|baseRev
operator|.
name|isBranch
argument_list|()
expr_stmt|;
name|parseJsonDiff
argument_list|(
name|commit
argument_list|,
name|jsonDiff
argument_list|,
name|rootPath
argument_list|)
expr_stmt|;
name|rev
operator|=
name|commit
operator|.
name|apply
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|nodeStore
operator|.
name|canceled
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nodeStore
operator|.
name|done
argument_list|(
name|commit
argument_list|,
name|isBranch
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rev
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|branch
parameter_list|(
annotation|@
name|Nullable
name|String
name|trunkRevisionId
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
comment|// nothing is written when the branch is created, the returned
comment|// revision simply acts as a reference to the branch base revision
name|Revision
name|revision
init|=
name|trunkRevisionId
operator|!=
literal|null
condition|?
name|Revision
operator|.
name|fromString
argument_list|(
name|trunkRevisionId
argument_list|)
else|:
name|nodeStore
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
return|return
name|revision
operator|.
name|asBranchRevision
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|merge
parameter_list|(
name|String
name|branchRevisionId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
comment|// TODO improve implementation if needed
name|Revision
name|revision
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|branchRevisionId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|revision
operator|.
name|isBranch
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"Not a branch: "
operator|+
name|branchRevisionId
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|nodeStore
operator|.
name|merge
argument_list|(
name|revision
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|DocumentStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Nonnull
specifier|public
name|String
name|rebase
parameter_list|(
annotation|@
name|Nonnull
name|String
name|branchRevisionId
parameter_list|,
annotation|@
name|Nullable
name|String
name|newBaseRevisionId
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
name|Revision
name|r
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|branchRevisionId
argument_list|)
decl_stmt|;
name|Revision
name|base
init|=
name|newBaseRevisionId
operator|!=
literal|null
condition|?
name|Revision
operator|.
name|fromString
argument_list|(
name|newBaseRevisionId
argument_list|)
else|:
name|nodeStore
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
return|return
name|nodeStore
operator|.
name|rebase
argument_list|(
name|r
argument_list|,
name|base
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|String
name|reset
parameter_list|(
annotation|@
name|Nonnull
name|String
name|branchRevisionId
parameter_list|,
annotation|@
name|Nonnull
name|String
name|ancestorRevisionId
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
name|Revision
name|branch
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|branchRevisionId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|branch
operator|.
name|isBranch
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"Not a branch revision: "
operator|+
name|branchRevisionId
argument_list|)
throw|;
block|}
name|Revision
name|ancestor
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|ancestorRevisionId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ancestor
operator|.
name|isBranch
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"Not a branch revision: "
operator|+
name|ancestorRevisionId
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|nodeStore
operator|.
name|reset
argument_list|(
name|branch
argument_list|,
name|ancestor
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|DocumentStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|long
name|getLength
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
try|try
block|{
return|return
name|nodeStore
operator|.
name|getBlobStore
argument_list|()
operator|.
name|getBlobLength
argument_list|(
name|blobId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|read
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
try|try
block|{
name|int
name|read
init|=
name|nodeStore
operator|.
name|getBlobStore
argument_list|()
operator|.
name|readBlob
argument_list|(
name|blobId
argument_list|,
name|pos
argument_list|,
name|buff
argument_list|,
name|off
argument_list|,
name|length
argument_list|)
decl_stmt|;
return|return
name|read
operator|<
literal|0
condition|?
literal|0
else|:
name|read
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|write
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
try|try
block|{
return|return
name|nodeStore
operator|.
name|getBlobStore
argument_list|()
operator|.
name|writeBlob
argument_list|(
name|in
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|//-------------------------< accessors>------------------------------------
specifier|public
name|DocumentStore
name|getDocumentStore
parameter_list|()
block|{
return|return
name|store
return|;
block|}
comment|//------------------------------< internal>--------------------------------
specifier|private
name|void
name|parseJsonDiff
parameter_list|(
name|Commit
name|commit
parameter_list|,
name|String
name|json
parameter_list|,
name|String
name|rootPath
parameter_list|)
block|{
name|Revision
name|baseRev
init|=
name|commit
operator|.
name|getBaseRevision
argument_list|()
decl_stmt|;
name|String
name|baseRevId
init|=
name|baseRev
operator|!=
literal|null
condition|?
name|baseRev
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|added
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|JsopReader
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|json
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|r
init|=
name|t
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|JsopReader
operator|.
name|END
condition|)
block|{
break|break;
block|}
name|String
name|path
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|rootPath
argument_list|,
name|t
operator|.
name|readString
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|r
condition|)
block|{
case|case
literal|'+'
case|:
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|parseAddNode
argument_list|(
name|commit
argument_list|,
name|t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|added
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'-'
case|:
name|DocumentNodeState
name|toRemove
init|=
name|nodeStore
operator|.
name|getNode
argument_list|(
name|path
argument_list|,
name|commit
operator|.
name|getBaseRevision
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toRemove
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"Node not found: "
operator|+
name|path
operator|+
literal|" in revision "
operator|+
name|baseRevId
argument_list|)
throw|;
block|}
name|commit
operator|.
name|removeNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|markAsDeleted
argument_list|(
name|toRemove
argument_list|,
name|commit
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|commit
operator|.
name|removeNodeDiff
argument_list|(
name|path
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'^'
case|:
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|value
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|NULL
argument_list|)
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|t
operator|.
name|readRawValue
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|String
name|p
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|added
operator|.
name|contains
argument_list|(
name|p
argument_list|)
operator|&&
name|nodeStore
operator|.
name|getNode
argument_list|(
name|p
argument_list|,
name|commit
operator|.
name|getBaseRevision
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"Node not found: "
operator|+
name|path
operator|+
literal|" in revision "
operator|+
name|baseRevId
argument_list|)
throw|;
block|}
name|String
name|propertyName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|commit
operator|.
name|updateProperty
argument_list|(
name|p
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|commit
operator|.
name|updatePropertyDiff
argument_list|(
name|p
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'>'
case|:
block|{
comment|// TODO support moving nodes that were modified within this commit
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|targetPath
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
name|targetPath
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|rootPath
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
block|}
name|DocumentNodeState
name|source
init|=
name|nodeStore
operator|.
name|getNode
argument_list|(
name|path
argument_list|,
name|baseRev
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"Node not found: "
operator|+
name|path
operator|+
literal|" in revision "
operator|+
name|baseRevId
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|nodeExists
argument_list|(
name|targetPath
argument_list|,
name|baseRevId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"Node already exists: "
operator|+
name|targetPath
operator|+
literal|" in revision "
operator|+
name|baseRevId
argument_list|)
throw|;
block|}
name|commit
operator|.
name|moveNode
argument_list|(
name|path
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|moveNode
argument_list|(
name|source
argument_list|,
name|targetPath
argument_list|,
name|commit
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'*'
case|:
block|{
comment|// TODO support copying nodes that were modified within this commit
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|targetPath
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
name|targetPath
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|rootPath
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
block|}
name|DocumentNodeState
name|source
init|=
name|nodeStore
operator|.
name|getNode
argument_list|(
name|path
argument_list|,
name|baseRev
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"Node not found: "
operator|+
name|path
operator|+
literal|" in revision "
operator|+
name|baseRevId
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|nodeExists
argument_list|(
name|targetPath
argument_list|,
name|baseRevId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"Node already exists: "
operator|+
name|targetPath
operator|+
literal|" in revision "
operator|+
name|baseRevId
argument_list|)
throw|;
block|}
name|commit
operator|.
name|copyNode
argument_list|(
name|path
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|copyNode
argument_list|(
name|source
argument_list|,
name|targetPath
argument_list|,
name|commit
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"token: "
operator|+
operator|(
name|char
operator|)
name|t
operator|.
name|getTokenType
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|parseAddNode
parameter_list|(
name|Commit
name|commit
parameter_list|,
name|JsopReader
name|t
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|DocumentNodeState
name|n
init|=
operator|new
name|DocumentNodeState
argument_list|(
name|nodeStore
argument_list|,
name|path
argument_list|,
name|commit
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|.
name|matches
argument_list|(
literal|'}'
argument_list|)
condition|)
block|{
do|do
block|{
name|String
name|key
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|'{'
argument_list|)
condition|)
block|{
name|String
name|childPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|parseAddNode
argument_list|(
name|commit
argument_list|,
name|t
argument_list|,
name|childPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|value
init|=
name|t
operator|.
name|readRawValue
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
condition|)
do|;
name|t
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
name|commit
operator|.
name|addNode
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|commit
operator|.
name|addNodeDiff
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
comment|//----------------------------< Builder>-----------------------------------
comment|/**      * A builder for a DocumentMK instance.      */
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_MEMORY_CACHE_SIZE
init|=
literal|256
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NODE_CACHE_PERCENTAGE
init|=
literal|25
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_CHILDREN_CACHE_PERCENTAGE
init|=
literal|10
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_DIFF_CACHE_PERCENTAGE
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_DOC_CHILDREN_CACHE_PERCENTAGE
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_CACHE_SEGMENT_COUNT
init|=
literal|16
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_CACHE_STACK_MOVE_DISTANCE
init|=
literal|16
decl_stmt|;
specifier|private
name|DocumentNodeStore
name|nodeStore
decl_stmt|;
specifier|private
name|DocumentStore
name|documentStore
decl_stmt|;
specifier|private
name|DiffCache
name|diffCache
decl_stmt|;
specifier|private
name|BlobStore
name|blobStore
decl_stmt|;
specifier|private
name|int
name|clusterId
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.documentMK.clusterId"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|int
name|asyncDelay
init|=
literal|1000
decl_stmt|;
specifier|private
name|boolean
name|timing
decl_stmt|;
specifier|private
name|boolean
name|logging
decl_stmt|;
specifier|private
name|Weigher
argument_list|<
name|CacheValue
argument_list|,
name|CacheValue
argument_list|>
name|weigher
init|=
operator|new
name|EmpiricalWeigher
argument_list|()
decl_stmt|;
specifier|private
name|long
name|memoryCacheSize
init|=
name|DEFAULT_MEMORY_CACHE_SIZE
decl_stmt|;
specifier|private
name|int
name|nodeCachePercentage
init|=
name|DEFAULT_NODE_CACHE_PERCENTAGE
decl_stmt|;
specifier|private
name|int
name|childrenCachePercentage
init|=
name|DEFAULT_CHILDREN_CACHE_PERCENTAGE
decl_stmt|;
specifier|private
name|int
name|diffCachePercentage
init|=
name|DEFAULT_DIFF_CACHE_PERCENTAGE
decl_stmt|;
specifier|private
name|int
name|docChildrenCachePercentage
init|=
name|DEFAULT_DOC_CHILDREN_CACHE_PERCENTAGE
decl_stmt|;
specifier|private
name|int
name|cacheSegmentCount
init|=
name|DEFAULT_CACHE_SEGMENT_COUNT
decl_stmt|;
specifier|private
name|int
name|cacheStackMoveDistance
init|=
name|DEFAULT_CACHE_STACK_MOVE_DISTANCE
decl_stmt|;
specifier|private
name|boolean
name|useSimpleRevision
decl_stmt|;
specifier|private
name|long
name|offHeapCacheSize
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|long
name|maxReplicationLagMillis
init|=
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMillis
argument_list|(
literal|6
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|disableBranches
decl_stmt|;
specifier|private
name|Clock
name|clock
init|=
name|Clock
operator|.
name|SIMPLE
decl_stmt|;
specifier|private
name|Executor
name|executor
decl_stmt|;
specifier|private
name|String
name|persistentCacheURI
init|=
name|DEFAULT_PERSISTENT_CACHE_URI
decl_stmt|;
specifier|private
name|PersistentCache
name|persistentCache
decl_stmt|;
specifier|public
name|Builder
parameter_list|()
block|{         }
comment|/**          * Use the given MongoDB as backend storage for the DocumentNodeStore.          *          * @param db the MongoDB connection          * @return this          */
specifier|public
name|Builder
name|setMongoDB
parameter_list|(
name|DB
name|db
parameter_list|,
name|int
name|blobCacheSizeMB
parameter_list|)
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|documentStore
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|documentStore
operator|=
operator|new
name|MongoDocumentStore
argument_list|(
name|db
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|blobStore
operator|==
literal|null
condition|)
block|{
name|GarbageCollectableBlobStore
name|s
init|=
operator|new
name|MongoBlobStore
argument_list|(
name|db
argument_list|,
name|blobCacheSizeMB
operator|*
literal|1024
operator|*
literal|1024L
argument_list|)
decl_stmt|;
name|PersistentCache
name|p
init|=
name|getPersistentCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|s
operator|=
name|p
operator|.
name|wrapBlobStore
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|blobStore
operator|=
name|s
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**          * Set the MongoDB connection to use. By default an in-memory store is used.          *          * @param db the MongoDB connection          * @return this          */
specifier|public
name|Builder
name|setMongoDB
parameter_list|(
name|DB
name|db
parameter_list|)
block|{
return|return
name|setMongoDB
argument_list|(
name|db
argument_list|,
literal|16
argument_list|)
return|;
block|}
comment|/**          * Sets a {@link DataSource} to use for the RDB document and blob          * stores.          *          * @return this          */
specifier|public
name|Builder
name|setRDBConnection
parameter_list|(
name|DataSource
name|ds
parameter_list|)
block|{
name|this
operator|.
name|documentStore
operator|=
operator|new
name|RDBDocumentStore
argument_list|(
name|ds
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|blobStore
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|blobStore
operator|=
operator|new
name|RDBBlobStore
argument_list|(
name|ds
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**          * Sets a {@link DataSource} to use for the RDB document and blob          * stores, including {@link RDBOptions}.          *          * @return this          */
specifier|public
name|Builder
name|setRDBConnection
parameter_list|(
name|DataSource
name|ds
parameter_list|,
name|RDBOptions
name|options
parameter_list|)
block|{
name|this
operator|.
name|documentStore
operator|=
operator|new
name|RDBDocumentStore
argument_list|(
name|ds
argument_list|,
name|this
argument_list|,
name|options
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|blobStore
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|blobStore
operator|=
operator|new
name|RDBBlobStore
argument_list|(
name|ds
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**          * Sets the persistent cache option.          *          * @return this          */
specifier|public
name|Builder
name|setPersistentCache
parameter_list|(
name|String
name|persistentCache
parameter_list|)
block|{
name|this
operator|.
name|persistentCacheURI
operator|=
name|persistentCache
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a {@link DataSource}s to use for the RDB document and blob          * stores.          *          * @return this          */
specifier|public
name|Builder
name|setRDBConnection
parameter_list|(
name|DataSource
name|documentStoreDataSource
parameter_list|,
name|DataSource
name|blobStoreDataSource
parameter_list|)
block|{
name|this
operator|.
name|documentStore
operator|=
operator|new
name|RDBDocumentStore
argument_list|(
name|documentStoreDataSource
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
operator|new
name|RDBBlobStore
argument_list|(
name|blobStoreDataSource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use the timing document store wrapper.          *          * @param timing whether to use the timing wrapper.          * @return this          */
specifier|public
name|Builder
name|setTiming
parameter_list|(
name|boolean
name|timing
parameter_list|)
block|{
name|this
operator|.
name|timing
operator|=
name|timing
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|getTiming
parameter_list|()
block|{
return|return
name|timing
return|;
block|}
specifier|public
name|Builder
name|setLogging
parameter_list|(
name|boolean
name|logging
parameter_list|)
block|{
name|this
operator|.
name|logging
operator|=
name|logging
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|getLogging
parameter_list|()
block|{
return|return
name|logging
return|;
block|}
comment|/**          * Set the document store to use. By default an in-memory store is used.          *          * @param documentStore the document store          * @return this          */
specifier|public
name|Builder
name|setDocumentStore
parameter_list|(
name|DocumentStore
name|documentStore
parameter_list|)
block|{
name|this
operator|.
name|documentStore
operator|=
name|documentStore
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|DocumentStore
name|getDocumentStore
parameter_list|()
block|{
if|if
condition|(
name|documentStore
operator|==
literal|null
condition|)
block|{
name|documentStore
operator|=
operator|new
name|MemoryDocumentStore
argument_list|()
expr_stmt|;
block|}
return|return
name|documentStore
return|;
block|}
specifier|public
name|DocumentNodeStore
name|getNodeStore
parameter_list|()
block|{
if|if
condition|(
name|nodeStore
operator|==
literal|null
condition|)
block|{
name|nodeStore
operator|=
operator|new
name|DocumentNodeStore
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeStore
return|;
block|}
specifier|public
name|DiffCache
name|getDiffCache
parameter_list|()
block|{
if|if
condition|(
name|diffCache
operator|==
literal|null
condition|)
block|{
name|diffCache
operator|=
operator|new
name|TieredDiffCache
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|diffCache
return|;
block|}
specifier|public
name|Builder
name|setDiffCache
parameter_list|(
name|DiffCache
name|diffCache
parameter_list|)
block|{
name|this
operator|.
name|diffCache
operator|=
name|diffCache
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the blob store to use. By default an in-memory store is used.          *          * @param blobStore the blob store          * @return this          */
specifier|public
name|Builder
name|setBlobStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|BlobStore
name|getBlobStore
parameter_list|()
block|{
if|if
condition|(
name|blobStore
operator|==
literal|null
condition|)
block|{
name|blobStore
operator|=
operator|new
name|MemoryBlobStore
argument_list|()
expr_stmt|;
block|}
return|return
name|blobStore
return|;
block|}
comment|/**          * Set the cluster id to use. By default, 0 is used, meaning the cluster          * id is automatically generated.          *          * @param clusterId the cluster id          * @return this          */
specifier|public
name|Builder
name|setClusterId
parameter_list|(
name|int
name|clusterId
parameter_list|)
block|{
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setCacheSegmentCount
parameter_list|(
name|int
name|cacheSegmentCount
parameter_list|)
block|{
name|this
operator|.
name|cacheSegmentCount
operator|=
name|cacheSegmentCount
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setCacheStackMoveDistance
parameter_list|(
name|int
name|cacheSegmentCount
parameter_list|)
block|{
name|this
operator|.
name|cacheStackMoveDistance
operator|=
name|cacheSegmentCount
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|int
name|getClusterId
parameter_list|()
block|{
return|return
name|clusterId
return|;
block|}
comment|/**          * Set the maximum delay to write the last revision to the root node. By          * default 1000 (meaning 1 second) is used.          *          * @param asyncDelay in milliseconds          * @return this          */
specifier|public
name|Builder
name|setAsyncDelay
parameter_list|(
name|int
name|asyncDelay
parameter_list|)
block|{
name|this
operator|.
name|asyncDelay
operator|=
name|asyncDelay
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|int
name|getAsyncDelay
parameter_list|()
block|{
return|return
name|asyncDelay
return|;
block|}
specifier|public
name|Weigher
argument_list|<
name|CacheValue
argument_list|,
name|CacheValue
argument_list|>
name|getWeigher
parameter_list|()
block|{
return|return
name|weigher
return|;
block|}
specifier|public
name|Builder
name|withWeigher
parameter_list|(
name|Weigher
argument_list|<
name|CacheValue
argument_list|,
name|CacheValue
argument_list|>
name|weigher
parameter_list|)
block|{
name|this
operator|.
name|weigher
operator|=
name|weigher
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|memoryCacheSize
parameter_list|(
name|long
name|memoryCacheSize
parameter_list|)
block|{
name|this
operator|.
name|memoryCacheSize
operator|=
name|memoryCacheSize
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|memoryCacheDistribution
parameter_list|(
name|int
name|nodeCachePercentage
parameter_list|,
name|int
name|childrenCachePercentage
parameter_list|,
name|int
name|docChildrenCachePercentage
parameter_list|,
name|int
name|diffCachePercentage
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|nodeCachePercentage
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|childrenCachePercentage
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|docChildrenCachePercentage
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|diffCachePercentage
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|nodeCachePercentage
operator|+
name|childrenCachePercentage
operator|+
name|docChildrenCachePercentage
operator|+
name|diffCachePercentage
operator|<
literal|100
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeCachePercentage
operator|=
name|nodeCachePercentage
expr_stmt|;
name|this
operator|.
name|childrenCachePercentage
operator|=
name|childrenCachePercentage
expr_stmt|;
name|this
operator|.
name|docChildrenCachePercentage
operator|=
name|docChildrenCachePercentage
expr_stmt|;
name|this
operator|.
name|diffCachePercentage
operator|=
name|diffCachePercentage
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|long
name|getNodeCacheSize
parameter_list|()
block|{
return|return
name|memoryCacheSize
operator|*
name|nodeCachePercentage
operator|/
literal|100
return|;
block|}
specifier|public
name|long
name|getChildrenCacheSize
parameter_list|()
block|{
return|return
name|memoryCacheSize
operator|*
name|childrenCachePercentage
operator|/
literal|100
return|;
block|}
specifier|public
name|long
name|getDocumentCacheSize
parameter_list|()
block|{
return|return
name|memoryCacheSize
operator|-
name|getNodeCacheSize
argument_list|()
operator|-
name|getChildrenCacheSize
argument_list|()
operator|-
name|getDiffCacheSize
argument_list|()
operator|-
name|getDocChildrenCacheSize
argument_list|()
return|;
block|}
specifier|public
name|long
name|getDocChildrenCacheSize
parameter_list|()
block|{
return|return
name|memoryCacheSize
operator|*
name|docChildrenCachePercentage
operator|/
literal|100
return|;
block|}
specifier|public
name|long
name|getDiffCacheSize
parameter_list|()
block|{
return|return
name|memoryCacheSize
operator|*
name|diffCachePercentage
operator|/
literal|100
return|;
block|}
specifier|public
name|long
name|getMemoryDiffCacheSize
parameter_list|()
block|{
return|return
name|getDiffCacheSize
argument_list|()
operator|/
literal|2
return|;
block|}
specifier|public
name|long
name|getLocalDiffCacheSize
parameter_list|()
block|{
return|return
name|getDiffCacheSize
argument_list|()
operator|/
literal|2
return|;
block|}
specifier|public
name|Builder
name|setUseSimpleRevision
parameter_list|(
name|boolean
name|useSimpleRevision
parameter_list|)
block|{
name|this
operator|.
name|useSimpleRevision
operator|=
name|useSimpleRevision
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|isUseSimpleRevision
parameter_list|()
block|{
return|return
name|useSimpleRevision
return|;
block|}
specifier|public
name|boolean
name|useOffHeapCache
parameter_list|()
block|{
return|return
name|this
operator|.
name|offHeapCacheSize
operator|>
literal|0
return|;
block|}
specifier|public
name|long
name|getOffHeapCacheSize
parameter_list|()
block|{
return|return
name|offHeapCacheSize
return|;
block|}
specifier|public
name|Builder
name|offHeapCacheSize
parameter_list|(
name|long
name|offHeapCacheSize
parameter_list|)
block|{
name|this
operator|.
name|offHeapCacheSize
operator|=
name|offHeapCacheSize
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Executor
name|getExecutor
parameter_list|()
block|{
if|if
condition|(
name|executor
operator|==
literal|null
condition|)
block|{
return|return
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
return|;
block|}
return|return
name|executor
return|;
block|}
specifier|public
name|Builder
name|setExecutor
parameter_list|(
name|Executor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|clock
parameter_list|(
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Clock
name|getClock
parameter_list|()
block|{
return|return
name|clock
return|;
block|}
specifier|public
name|Builder
name|setMaxReplicationLag
parameter_list|(
name|long
name|duration
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|maxReplicationLagMillis
operator|=
name|unit
operator|.
name|toMillis
argument_list|(
name|duration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|long
name|getMaxReplicationLagMillis
parameter_list|()
block|{
return|return
name|maxReplicationLagMillis
return|;
block|}
specifier|public
name|Builder
name|disableBranches
parameter_list|()
block|{
name|disableBranches
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|isDisableBranches
parameter_list|()
block|{
return|return
name|disableBranches
return|;
block|}
name|VersionGCSupport
name|createVersionGCSupport
parameter_list|()
block|{
name|DocumentStore
name|store
init|=
name|getDocumentStore
argument_list|()
decl_stmt|;
if|if
condition|(
name|store
operator|instanceof
name|MongoDocumentStore
condition|)
block|{
return|return
operator|new
name|MongoVersionGCSupport
argument_list|(
operator|(
name|MongoDocumentStore
operator|)
name|store
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|VersionGCSupport
argument_list|(
name|store
argument_list|)
return|;
block|}
block|}
comment|/**          * Open the DocumentMK instance using the configured options.          *          * @return the DocumentMK instance          */
specifier|public
name|DocumentMK
name|open
parameter_list|()
block|{
return|return
operator|new
name|DocumentMK
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|Cache
argument_list|<
name|PathRev
argument_list|,
name|DocumentNodeState
argument_list|>
name|buildNodeCache
parameter_list|(
name|DocumentNodeStore
name|store
parameter_list|)
block|{
return|return
name|buildCache
argument_list|(
name|CacheType
operator|.
name|NODE
argument_list|,
name|getNodeCacheSize
argument_list|()
argument_list|,
name|store
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Cache
argument_list|<
name|PathRev
argument_list|,
name|DocumentNodeState
operator|.
name|Children
argument_list|>
name|buildChildrenCache
parameter_list|()
block|{
return|return
name|buildCache
argument_list|(
name|CacheType
operator|.
name|CHILDREN
argument_list|,
name|getChildrenCacheSize
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Cache
argument_list|<
name|StringValue
argument_list|,
name|NodeDocument
operator|.
name|Children
argument_list|>
name|buildDocChildrenCache
parameter_list|()
block|{
return|return
name|buildCache
argument_list|(
name|CacheType
operator|.
name|DOC_CHILDREN
argument_list|,
name|getDocChildrenCacheSize
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Cache
argument_list|<
name|PathRev
argument_list|,
name|StringValue
argument_list|>
name|buildMemoryDiffCache
parameter_list|()
block|{
return|return
name|buildCache
argument_list|(
name|CacheType
operator|.
name|DIFF
argument_list|,
name|getMemoryDiffCacheSize
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Cache
argument_list|<
name|RevisionsKey
argument_list|,
name|LocalDiffCache
operator|.
name|Diff
argument_list|>
name|buildLocalDiffCache
parameter_list|()
block|{
return|return
name|buildCache
argument_list|(
name|CacheType
operator|.
name|LOCAL_DIFF
argument_list|,
name|getLocalDiffCacheSize
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Cache
argument_list|<
name|CacheValue
argument_list|,
name|NodeDocument
argument_list|>
name|buildDocumentCache
parameter_list|(
name|DocumentStore
name|docStore
parameter_list|)
block|{
return|return
name|buildCache
argument_list|(
name|CacheType
operator|.
name|DOCUMENT
argument_list|,
name|getDocumentCacheSize
argument_list|()
argument_list|,
literal|null
argument_list|,
name|docStore
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|K
extends|extends
name|CacheValue
parameter_list|,
name|V
extends|extends
name|CacheValue
parameter_list|>
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|buildCache
parameter_list|(
name|CacheType
name|cacheType
parameter_list|,
name|long
name|maxWeight
parameter_list|,
name|DocumentNodeStore
name|docNodeStore
parameter_list|,
name|DocumentStore
name|docStore
parameter_list|)
block|{
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cache
init|=
name|buildCache
argument_list|(
name|cacheType
operator|.
name|name
argument_list|()
argument_list|,
name|maxWeight
argument_list|)
decl_stmt|;
name|PersistentCache
name|p
init|=
name|getPersistentCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|docNodeStore
operator|!=
literal|null
condition|)
block|{
name|docNodeStore
operator|.
name|setPersistentCache
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|cache
operator|=
name|p
operator|.
name|wrap
argument_list|(
name|docNodeStore
argument_list|,
name|docStore
argument_list|,
name|cache
argument_list|,
name|cacheType
argument_list|)
expr_stmt|;
block|}
return|return
name|cache
return|;
block|}
specifier|private
name|PersistentCache
name|getPersistentCache
parameter_list|()
block|{
if|if
condition|(
name|persistentCacheURI
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|persistentCache
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|persistentCache
operator|=
operator|new
name|PersistentCache
argument_list|(
name|persistentCacheURI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Persistent cache not available; please disable the configuration"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|persistentCache
return|;
block|}
specifier|private
parameter_list|<
name|K
extends|extends
name|CacheValue
parameter_list|,
name|V
extends|extends
name|CacheValue
parameter_list|>
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|buildCache
parameter_list|(
name|String
name|module
parameter_list|,
name|long
name|maxWeight
parameter_list|)
block|{
comment|// by default, use the LIRS cache when using the persistent cache,
comment|// but don't use it otherwise
name|boolean
name|useLirs
init|=
name|persistentCacheURI
operator|!=
literal|null
decl_stmt|;
comment|// allow to override this by using the system property
if|if
condition|(
name|LIRS_CACHE
operator|!=
literal|null
condition|)
block|{
name|useLirs
operator|=
name|LIRS_CACHE
expr_stmt|;
block|}
if|if
condition|(
name|useLirs
condition|)
block|{
return|return
name|CacheLIRS
operator|.
expr|<
name|K
operator|,
name|V
operator|>
name|newBuilder
argument_list|()
operator|.
name|module
argument_list|(
name|module
argument_list|)
operator|.
name|weigher
argument_list|(
operator|new
name|Weigher
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|weigh
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
return|return
name|weigher
operator|.
name|weigh
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|averageWeight
argument_list|(
literal|2000
argument_list|)
operator|.
name|maximumWeight
argument_list|(
name|maxWeight
argument_list|)
operator|.
name|segmentCount
argument_list|(
name|cacheSegmentCount
argument_list|)
operator|.
name|stackMoveDistance
argument_list|(
name|cacheStackMoveDistance
argument_list|)
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
name|CACHE_CONCURRENCY
argument_list|)
operator|.
name|weigher
argument_list|(
name|weigher
argument_list|)
operator|.
name|maximumWeight
argument_list|(
name|maxWeight
argument_list|)
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

