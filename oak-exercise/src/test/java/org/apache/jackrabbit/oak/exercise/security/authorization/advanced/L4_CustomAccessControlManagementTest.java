begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|authorization
operator|.
name|advanced
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ImportUUIDBehavior
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|NamedAccessControlPolicy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|authorization
operator|.
name|models
operator|.
name|simplifiedroles
operator|.
name|ThreeRolesAuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|authorization
operator|.
name|models
operator|.
name|simplifiedroles
operator|.
name|ThreeRolesConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|principal
operator|.
name|CustomPrincipalConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|repository
operator|.
name|RepositoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|ReadOnlyNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|composite
operator|.
name|CompositeAuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|internal
operator|.
name|SecurityProviderHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|PolicyOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|DefaultWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedNodeImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Advanced Authorization Topics  * =============================================================================  *  * Title: Writing Custom Authorization : Access Control Management  * -----------------------------------------------------------------------------  *  * Goal:  * Learn how to write your own access control management and how to properly  * secure access control content.  * The exercises is this lesson will make use of a authorization model stub that  * already has the permission evaluation implemented. The entry point of that model  * is {@link ThreeRolesAuthorizationConfiguration}.  *  * Exercises:  *  * - {@link #testGetPolicies()}  *   Complete the implementation of {@link AccessControlManager#getPolicies(String)}  *   such that the test passes.  *   Adjust the number of expected policies and the type of policies according  *   to your implementation.  *  *   Questions:  *   - what type of policy do you want to expose?  *   - does any of the existing types of access control policies fit your needs?  *     existing types include  *> {@link NamedAccessControlPolicy},  *> {@link javax.jcr.security.AccessControlList},  *> {@link org.apache.jackrabbit.api.security.JackrabbitAccessControlList},  *> {@link org.apache.jackrabbit.api.security.authorization.PrincipalSetPolicy}  *   - if you choose to define your own policy type: what does it look like?  *   - should {@link AccessControlManager#getPolicies(String)} return one or many policies?  *  * - {@link #testGetEffectivePolicies()}  *   Complete the implementation of {@link AccessControlManager#getEffectivePolicies(String)}  *   such that the test passes.  *   NOTE: computation of effective policies is specified to be a best-effort operation.  *  *   Questions:  *   - what type of policy do you want to expose?  *   - what are the effective policies for those nodes that don't have the custom  *     policy set? or in other words: which nodes are affected by the policy set  *     at /test/a in the test setup?  *   - does the set of effective policies include any default policies that have  *     not been explicit set?  *   - what's the maximal number of effective policies your implementation may return?  *  * - {@link #testGetApplicablePolicies()}  *   Complete the implementation of {@link AccessControlManager#testGetApplicablePolicies(String)}  *   such that the test passes.  *  *   Questions:  *   - what type of policies do you expose here?  *   - are they they same as with {@link #testGetPolicies()} and/or {@link #testGetEffectivePolicies()}?  *   - does /test/a still have applicable policies?  *   - what about the path outside of the tree defined by 'supportedPath' configuration option?  *   - as you learned in the previous section and can see in {@link org.apache.jackrabbit.oak.exercise.security.authorization.models.simplifiedroles.ThreeRolesPermissionProvider}  *     this simplified authorization model doesn't respect nesting of policies in a  *     given tree. what does that mean for the applicable policies?  *   - what's the maximal number of applicable policies your implementation may return at a given path?  *  * - {@link #testSetPolicy()}  *   Implement {@link AccessControlManager#setPolicy(String, AccessControlPolicy)} and  *   {@link PolicyOwner#defines(String, AccessControlPolicy)} such that policies  *   can be written to the repository in a composite authorization setup.  *   The {@link PolicyOwner} is also required for the subsequent tests.  *  * - {@link #testSetModifiedPolicy()}  *   Modify the custom access control setup at /test/a such that the principal  *   associated with the test-user get moved from the editor to the owner set.  *  * - {@link #testRemovePolicy()}  *   Implement {@link AccessControlManager#removePolicy(String, AccessControlPolicy)} such  *   that the test passes.  *  * - {@link #testAccessControlContentIsProtected()}  *   Your authorization setup should come with some validation of the access control  *   content written to the repository.  *   Write a {@link org.apache.jackrabbit.oak.spi.commit.ValidatorProvider} and  *   plug it into the authorization configuration such that the test-case passes  *   and discuss each of the assertions made.  *  *   Questions:  *   - Can you identify possible shortcomings with the 4 validation steps proposed?  *   - Under which circumstances could any of them might not be desirable?  *  * - {@link #testAccessControlItemsAreProtectedByNodeTypeDefinition()}  *   Identify the code in the simplifiedroles authorization model that makes sure  *   the simple policy node and it's properties have JCR item definitions that are  *   protected.  *  *   Discuss why this is needed and what the effect of this measure is.  *   Complete the test case by  *   - testing the protected status of access control content using JCR API calls.  *   - verifying the protected status using JCR write API  *  *   Question:  *   - Can you identify which parts of Oak are responsible for enforcing the protected status?  *  * - {@link #testImportNodeWithPolicy}  *   This is a follow-up on {@link #testAccessControlItemsAreProtectedByNodeTypeDefinition()} as  *   the protected item definitions are not only enforced upon regular write  *   operations but also when calling {@link javax.jcr.Session#importXML(String, InputStream, int)},  *   {@link javax.jcr.Workspace#importXML(String, InputStream, int)} and related calls.  *  *   Fix the simplifiedroles authorization model such that the test passes.  *   Hint: you need to implement a custom implementation of {@link ProtectedNodeImporter}  *   and ensure the {@link AuthorizationConfiguration#getProtectedItemImporters()}  *   exposes it to the security setup.  *  * - {@link #testImportNodeWithPolicyAndUnknownPrincipal}  *   Variant of {@link #testImportNodeWithPolicy} that attempts to import a policy  *   referring to an {@code Principal} that is not known to any of the providers.  *  *   Questions:  *   - What do you need to do to the setup and possibly your importer code such  *     that importing unknown principals is allowed?  *   - In case your importer didn't check the validity of the principals:  *     Discuss the adjustments you would need to make to your importer in order  *     to enforce the different levels of validation check.  *  *  * Advanced Exercise  * -----------------------------------------------------------------------------  *  * The AccessControlManager stub doesn't implement {@link org.apache.jackrabbit.api.security.JackrabbitAccessControlManager}.  * Take a look at the additional methods defined by the extension in Jackrabbit API.  *  * As you can see the extra methods all related to access control management by  * {@link Principal}.  *  * Questions:  * - Would it be possible/sensible to have your implementation additionally implement  *   the methods {@link org.apache.jackrabbit.api.security.JackrabbitAccessControlManager}?  *  * - If you think it's possible, what would the implementation look like?  *  * - Can you spot any obstacles with that approach?  *  *  * Related Exercises:  * -----------------------------------------------------------------------------  *  * - {@link L5_CustomPermissionEvaluationTest}  *  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|L4_CustomAccessControlManagementTest
extends|extends
name|AbstractSecurityTest
block|{
annotation|@
name|Override
specifier|protected
name|SecurityProvider
name|initSecurityProvider
parameter_list|()
block|{
name|ThreeRolesAuthorizationConfiguration
name|threeRolesAuthorizationConfiguration
init|=
operator|new
name|ThreeRolesAuthorizationConfiguration
argument_list|()
decl_stmt|;
name|threeRolesAuthorizationConfiguration
operator|.
name|setParameters
argument_list|(
name|ConfigurationParameters
operator|.
name|of
argument_list|(
literal|"supportedPath"
argument_list|,
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|CustomPrincipalConfiguration
name|pc
init|=
operator|new
name|CustomPrincipalConfiguration
argument_list|()
decl_stmt|;
name|pc
operator|.
name|setParameters
argument_list|(
name|ConfigurationParameters
operator|.
name|of
argument_list|(
literal|"knownPrincipals"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"principalR"
block|,
literal|"principalE"
block|,
literal|"principalO"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|SecurityProvider
name|sp
init|=
name|super
operator|.
name|initSecurityProvider
argument_list|()
decl_stmt|;
name|SecurityProviderHelper
operator|.
name|updateConfig
argument_list|(
name|sp
argument_list|,
name|threeRolesAuthorizationConfiguration
argument_list|,
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|SecurityProviderHelper
operator|.
name|updateConfig
argument_list|(
name|sp
argument_list|,
name|pc
argument_list|,
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|sp
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ConfigurationParameters
name|getSecurityConfigParameters
parameter_list|()
block|{
return|return
name|ConfigurationParameters
operator|.
name|of
argument_list|(
literal|"authorizationCompositionType"
argument_list|,
name|CompositeAuthorizationConfiguration
operator|.
name|CompositionType
operator|.
name|OR
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|Tree
name|testTree
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|Tree
name|aTree
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|testTree
argument_list|,
literal|"a"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|aTree
operator|.
name|setProperty
argument_list|(
literal|"aProp"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|Tree
name|abTree
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|aTree
argument_list|,
literal|"b"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|abTree
operator|.
name|setProperty
argument_list|(
literal|"abProp"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|aTree
argument_list|,
name|ThreeRolesConstants
operator|.
name|MIX_REP_THREE_ROLES_POLICY
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Tree
name|rolePolicy
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|aTree
argument_list|,
name|ThreeRolesConstants
operator|.
name|REP_3_ROLES_POLICY
argument_list|,
name|ThreeRolesConstants
operator|.
name|NT_REP_THREE_ROLES_POLICY
argument_list|)
decl_stmt|;
name|rolePolicy
operator|.
name|setProperty
argument_list|(
name|ThreeRolesConstants
operator|.
name|REP_READERS
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"principalR"
argument_list|,
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|rolePolicy
operator|.
name|setProperty
argument_list|(
name|ThreeRolesConstants
operator|.
name|REP_EDITORS
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"principalE"
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|rolePolicy
operator|.
name|setProperty
argument_list|(
name|ThreeRolesConstants
operator|.
name|REP_OWNERS
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"principalO"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
comment|// add one node outside the scope of the supported path
name|Tree
name|outside
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"outside"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// to verify that setup with CompositeAuthorizationConfiguration.CompositionType.OR
comment|// uncomment the lines below
comment|/*         try (ContentSession cs = createTestSession()) {             Root r = createTestSession().getLatestRoot();             assertTrue(r.getTree("/test/a").exists());         }         */
block|}
specifier|private
name|AccessControlManager
name|getAcManager
parameter_list|(
annotation|@
name|Nonnull
name|Root
name|root
parameter_list|)
block|{
return|return
name|getConfig
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getAccessControlManager
argument_list|(
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
return|;
block|}
specifier|private
name|Repository
name|buildJcrRepository
parameter_list|()
block|{
return|return
operator|new
name|RepositoryImpl
argument_list|(
name|getContentRepository
argument_list|()
argument_list|,
operator|new
name|DefaultWhiteboard
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|,
name|Jcr
operator|.
name|DEFAULT_OBSERVATION_QUEUE_LENGTH
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * EXERCISE: complete {@link AccessControlManager#getPolicies(String)} such that      * the policy that has been 'manually' created in the setup is properly exposed      * by the access control management API.      */
annotation|@
name|Test
specifier|public
name|void
name|testGetPolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|getAcManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPolicies
argument_list|(
literal|"/test/a"
argument_list|)
decl_stmt|;
name|int
name|len
init|=
operator|-
literal|1
decl_stmt|;
comment|// EXERCISE: set expected length. 1 is the minimum but there might be more.
name|assertEquals
argument_list|(
name|len
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// EXERCISE: additionally assert that the policies is of the type you defined
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|policies
index|[
name|i
index|]
operator|instanceof
name|AccessControlPolicy
argument_list|)
expr_stmt|;
comment|// EXERCISE: replace by type chosen!
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePolicies
parameter_list|()
throws|throws
name|Exception
block|{
comment|// EXERCISE: set expected number of effective policies for all paths in the map.
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|m
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"/"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"/test"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"/test/a/b"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"/outside"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|m
operator|.
name|keySet
argument_list|()
control|)
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|getAcManager
argument_list|(
name|root
argument_list|)
operator|.
name|getEffectivePolicies
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|m
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// EXERCISE: set expected length. 1 is the minimum but there might be more.
name|assertEquals
argument_list|(
name|len
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// EXERCISE: additionally assert that the policies is of the type you defined
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|policies
index|[
name|i
index|]
operator|instanceof
name|AccessControlPolicy
argument_list|)
expr_stmt|;
comment|// EXERCISE: replace by type chosen!
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicablePolicies
parameter_list|()
throws|throws
name|Exception
block|{
comment|// EXERCISE: set expected number of applicable policies for all paths in the map.
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|m
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"/test/a"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"/test/a/b"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"/outside"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|m
operator|.
name|keySet
argument_list|()
control|)
block|{
name|AccessControlPolicyIterator
name|it
init|=
name|getAcManager
argument_list|(
name|root
argument_list|)
operator|.
name|getApplicablePolicies
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|m
operator|.
name|get
argument_list|(
name|path
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|it
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// EXERCISE: additionally assert that the policies is of the type you defined
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|it
operator|.
name|nextAccessControlPolicy
argument_list|()
operator|instanceof
name|AccessControlPolicy
argument_list|)
expr_stmt|;
comment|// EXERCISE: replace by type chosen!
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|t
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
argument_list|,
literal|"another"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|getAcManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
comment|// EXERCISE: set your custom policy/policies at /test/another such that
comment|//           the following assertions pass.
comment|// ... write your code here
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|PrincipalManager
name|pm
init|=
name|getPrincipalManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Principal
argument_list|,
name|Long
argument_list|>
name|m
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|pm
operator|.
name|getEveryone
argument_list|()
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|pm
operator|.
name|getPrincipal
argument_list|(
literal|"principalR"
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|,
name|pm
operator|.
name|getPrincipal
argument_list|(
literal|"principalE"
argument_list|)
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|pm
operator|.
name|getPrincipal
argument_list|(
literal|"principalO"
argument_list|)
argument_list|,
name|ThreeRolesConstants
operator|.
name|SUPPORTED_PERMISSIONS
argument_list|)
decl_stmt|;
for|for
control|(
name|Principal
name|principal
range|:
name|m
operator|.
name|keySet
argument_list|()
control|)
block|{
name|PermissionProvider
name|pp
init|=
name|getConfig
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|adminSession
operator|.
name|getWorkspaceName
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|principal
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|principal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetModifiedPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlManager
name|acMgr
init|=
name|getAcManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
literal|"/test/a"
argument_list|)
decl_stmt|;
comment|// EXERCISE: modify policies such that the testuser principal becomes owner instead of editor
comment|// ... write your code here
for|for
control|(
name|AccessControlPolicy
name|policy
range|:
name|policies
control|)
block|{
name|acMgr
operator|.
name|setPolicy
argument_list|(
literal|"/test/a"
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|createTestSession
argument_list|()
init|)
block|{
name|Root
name|r
init|=
name|createTestSession
argument_list|()
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|PermissionProvider
name|pp
init|=
name|getConfig
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getPermissionProvider
argument_list|(
name|r
argument_list|,
name|cs
operator|.
name|getWorkspaceName
argument_list|()
argument_list|,
name|cs
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getPrincipals
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|isGranted
argument_list|(
literal|"/test/a"
argument_list|,
name|Permissions
operator|.
name|getString
argument_list|(
name|ThreeRolesConstants
operator|.
name|SUPPORTED_PERMISSIONS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlManager
name|acMgr
init|=
name|getAcManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
for|for
control|(
name|AccessControlPolicy
name|policy
range|:
name|acMgr
operator|.
name|getPolicies
argument_list|(
literal|"/test/a"
argument_list|)
control|)
block|{
name|acMgr
operator|.
name|removePolicy
argument_list|(
literal|"/test/a"
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getPolicies
argument_list|(
literal|"/test/a"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAccessControlContentIsProtected
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
try|try
block|{
name|Tree
name|missingMixin
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|test
argument_list|,
name|ThreeRolesConstants
operator|.
name|REP_3_ROLES_POLICY
argument_list|,
name|ThreeRolesConstants
operator|.
name|NT_REP_THREE_ROLES_POLICY
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Adding policy without mixin must fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|test
operator|.
name|setProperty
argument_list|(
name|ThreeRolesConstants
operator|.
name|REP_OWNERS
argument_list|,
literal|437
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Using name of protected policy property outside of the context of a policy must fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|Tree
name|b
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test/a/b"
argument_list|)
decl_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|b
argument_list|,
name|ThreeRolesConstants
operator|.
name|MIX_REP_THREE_ROLES_POLICY
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Tree
name|nestedPolicy
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|b
argument_list|,
name|ThreeRolesConstants
operator|.
name|REP_3_ROLES_POLICY
argument_list|,
name|ThreeRolesConstants
operator|.
name|NT_REP_THREE_ROLES_POLICY
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Creation of nested three-roles-policy must fail (NOTE: this is an arbitrary limitation for the sake of simplifying permission evaluation)."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|Tree
name|outside
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/outside"
argument_list|)
decl_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|outside
argument_list|,
name|ThreeRolesConstants
operator|.
name|MIX_REP_THREE_ROLES_POLICY
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Tree
name|nestedPolicy
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|outside
argument_list|,
name|ThreeRolesConstants
operator|.
name|REP_3_ROLES_POLICY
argument_list|,
name|ThreeRolesConstants
operator|.
name|NT_REP_THREE_ROLES_POLICY
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Creation of nested three-roles-policy outside of the configured supported path must fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAccessControlItemsAreProtectedByNodeTypeDefinition
parameter_list|()
throws|throws
name|Exception
block|{
name|ReadOnlyNodeTypeManager
name|ntMgr
init|=
name|ReadOnlyNodeTypeManager
operator|.
name|getInstance
argument_list|(
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|Tree
name|aTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test/a"
argument_list|)
decl_stmt|;
name|Tree
name|policyTree
init|=
name|aTree
operator|.
name|getChild
argument_list|(
name|ThreeRolesConstants
operator|.
name|REP_3_ROLES_POLICY
argument_list|)
decl_stmt|;
name|NodeDefinition
name|policyDef
init|=
name|ntMgr
operator|.
name|getDefinition
argument_list|(
name|aTree
argument_list|,
name|policyTree
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|policyDef
operator|.
name|isProtected
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|propName
range|:
operator|new
name|String
index|[]
block|{
name|ThreeRolesConstants
operator|.
name|REP_READERS
block|,
name|ThreeRolesConstants
operator|.
name|REP_EDITORS
block|,
name|ThreeRolesConstants
operator|.
name|REP_OWNERS
block|}
control|)
block|{
name|PropertyDefinition
name|propDef
init|=
name|ntMgr
operator|.
name|getDefinition
argument_list|(
name|policyTree
argument_list|,
name|policyTree
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|propDef
operator|.
name|isProtected
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Repository
name|jcrRepository
init|=
name|buildJcrRepository
argument_list|()
decl_stmt|;
comment|// EXERCISE: test protected status of items using JCR API calls
comment|// EXERCISE: verify that the protected status of the access control content is enforced
comment|// ... write your code here
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImportNodeWithPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|Repository
name|jcrRepository
init|=
operator|new
name|RepositoryImpl
argument_list|(
name|getContentRepository
argument_list|()
argument_list|,
operator|new
name|DefaultWhiteboard
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|,
name|Jcr
operator|.
name|DEFAULT_OBSERVATION_QUEUE_LENGTH
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Session
name|adminSession
init|=
name|jcrRepository
operator|.
name|login
argument_list|(
name|getAdminCredentials
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|xml
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
operator|+
literal|"<sv:node sv:name=\"another2\" xmlns:mix=\"http://www.jcp.org/jcr/mix/1.0\" xmlns:nt=\"http://www.jcp.org/jcr/nt/1.0\" xmlns:fn_old=\"http://www.w3.org/2004/10/xpath-functions\" xmlns:fn=\"http://www.w3.org/2005/xpath-functions\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:sv=\"http://www.jcp.org/jcr/sv/1.0\" xmlns:rep=\"internal\" xmlns:jcr=\"http://www.jcp.org/jcr/1.0\">"
operator|+
literal|"<sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\"><sv:value>oak:Unstructured</sv:value></sv:property>"
operator|+
literal|"<sv:property sv:name=\"jcr:mixinTypes\" sv:type=\"Name\"><sv:value>rep:ThreeRolesMixin</sv:value></sv:property>"
operator|+
literal|"<sv:node sv:name=\"rep:threeRolesPolicy\" "
operator|+
literal|"<sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\"><sv:value>rep:ThreeRolesPolicy</sv:value></sv:property>"
operator|+
literal|"<sv:property sv:name=\"rep:readers\" sv:type=\"String\"><sv:value>principalR</sv:value></sv:property>"
operator|+
literal|"</sv:node>"
operator|+
literal|"</sv:node>"
decl_stmt|;
name|adminSession
operator|.
name|importXML
argument_list|(
literal|"/test"
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|adminSession
operator|.
name|getNode
argument_list|(
literal|"/test/another"
argument_list|)
decl_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|adminSession
operator|.
name|getAccessControlManager
argument_list|()
operator|.
name|getPolicies
argument_list|(
literal|"/test/another"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|policies
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|adminSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|adminSession
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImportNodeWithPolicyAndUnknownPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|Repository
name|jcrRepository
init|=
name|buildJcrRepository
argument_list|()
decl_stmt|;
name|Session
name|adminSession
init|=
name|jcrRepository
operator|.
name|login
argument_list|(
name|getAdminCredentials
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|xml
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
operator|+
literal|"<sv:node sv:name=\"another2\" xmlns:mix=\"http://www.jcp.org/jcr/mix/1.0\" xmlns:nt=\"http://www.jcp.org/jcr/nt/1.0\" xmlns:fn_old=\"http://www.w3.org/2004/10/xpath-functions\" xmlns:fn=\"http://www.w3.org/2005/xpath-functions\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:sv=\"http://www.jcp.org/jcr/sv/1.0\" xmlns:rep=\"internal\" xmlns:jcr=\"http://www.jcp.org/jcr/1.0\">"
operator|+
literal|"<sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\"><sv:value>oak:Unstructured</sv:value></sv:property>"
operator|+
literal|"<sv:property sv:name=\"jcr:mixinTypes\" sv:type=\"Name\"><sv:value>rep:ThreeRolesMixin</sv:value></sv:property>"
operator|+
literal|"<sv:node sv:name=\"rep:threeRolesPolicy\" "
operator|+
literal|"<sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\"><sv:value>rep:ThreeRolesPolicy</sv:value></sv:property>"
operator|+
literal|"<sv:property sv:name=\"rep:readers\" sv:type=\"String\"><sv:value>unknownPrincipal</sv:value></sv:property>"
operator|+
literal|"</sv:node>"
operator|+
literal|"</sv:node>"
decl_stmt|;
name|adminSession
operator|.
name|importXML
argument_list|(
literal|"/test"
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|adminSession
operator|.
name|getNode
argument_list|(
literal|"/test/another"
argument_list|)
decl_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|adminSession
operator|.
name|getAccessControlManager
argument_list|()
operator|.
name|getPolicies
argument_list|(
literal|"/test/another"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|policies
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|adminSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|adminSession
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

