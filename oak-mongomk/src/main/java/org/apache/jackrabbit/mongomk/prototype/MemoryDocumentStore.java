begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|prototype
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentNavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|prototype
operator|.
name|UpdateOp
operator|.
name|Operation
import|;
end_import

begin_comment
comment|/**  * Emulates a MongoDB store (possibly consisting of multiple shards and  * replicas).  */
end_comment

begin_class
specifier|public
class|class
name|MemoryDocumentStore
implements|implements
name|DocumentStore
block|{
comment|/**      * The 'nodes' collection. It contains all the node data, with one document      * per node, and the path as the primary key. Each document possibly      * contains multiple revisions.      *<p>      * Key: the path, value: the node data (possibly multiple revisions)      *<p>      * Old revisions are removed after some time, either by the process that      * removed or updated the node, lazily when reading, or in a background      * process.      */
specifier|private
name|ConcurrentSkipListMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|nodes
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Get a document. The returned map is a clone (the caller      * can modify it without affecting the stored version).      *      * @param collection the collection      * @param path the path      * @return the map, or null if not found      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|find
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|ConcurrentSkipListMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|map
init|=
name|getMap
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|n
init|=
name|map
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|copy
init|=
name|Utils
operator|.
name|newMap
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|n
init|)
block|{
name|copy
operator|.
name|putAll
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|query
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|String
name|fromKey
parameter_list|,
name|String
name|toKey
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|ConcurrentSkipListMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|map
init|=
name|getMap
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|ConcurrentNavigableMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|sub
init|=
name|map
operator|.
name|subMap
argument_list|(
name|fromKey
argument_list|,
name|toKey
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|n
range|:
name|sub
operator|.
name|values
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|copy
init|=
name|Utils
operator|.
name|newMap
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|n
init|)
block|{
name|copy
operator|.
name|putAll
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|copy
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>
name|limit
condition|)
block|{
break|break;
block|}
block|}
return|return
name|list
return|;
block|}
comment|/**      * Remove a document.      *      * @param collection the collection      * @param path the path      */
specifier|public
name|void
name|remove
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|getMap
argument_list|(
name|collection
argument_list|)
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the in-memory map for this collection.      *      * @param collection the collection      * @return the map      */
specifier|private
name|ConcurrentSkipListMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getMap
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
switch|switch
condition|(
name|collection
condition|)
block|{
case|case
name|NODES
case|:
return|return
name|nodes
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|collection
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Create or update a document. For MongoDb, this is using "findAndModify" with      * the "upsert" flag (insert or update).      *      * @param collection the collection      * @param update the update operation      * @return the old document, or null if there was no      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|createOrUpdate
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|UpdateOp
name|update
parameter_list|)
block|{
name|ConcurrentSkipListMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|map
init|=
name|getMap
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|n
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|oldNode
decl_stmt|;
comment|// get the node if it's there
name|oldNode
operator|=
name|n
operator|=
name|map
operator|.
name|get
argument_list|(
name|update
operator|.
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
comment|// for a new node, add it (without synchronization)
name|n
operator|=
name|Utils
operator|.
name|newMap
argument_list|()
expr_stmt|;
name|oldNode
operator|=
name|map
operator|.
name|putIfAbsent
argument_list|(
name|update
operator|.
name|key
argument_list|,
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldNode
operator|!=
literal|null
condition|)
block|{
comment|// somebody else added it at the same time
name|n
operator|=
name|oldNode
expr_stmt|;
block|}
block|}
if|if
condition|(
name|oldNode
operator|!=
literal|null
condition|)
block|{
comment|// clone the old node
comment|// (document level operations are synchronized)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|old
init|=
name|Utils
operator|.
name|newMap
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|oldNode
init|)
block|{
name|old
operator|.
name|putAll
argument_list|(
name|oldNode
argument_list|)
expr_stmt|;
block|}
name|oldNode
operator|=
name|old
expr_stmt|;
block|}
comment|// update the document
comment|// (document level operations are synchronized)
synchronized|synchronized
init|(
name|n
init|)
block|{
name|applyChanges
argument_list|(
name|n
argument_list|,
name|update
argument_list|)
expr_stmt|;
block|}
return|return
name|oldNode
return|;
block|}
specifier|public
specifier|static
name|void
name|applyChanges
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|target
parameter_list|,
name|UpdateOp
name|update
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Operation
argument_list|>
name|e
range|:
name|update
operator|.
name|changes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|k
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|old
init|=
name|target
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|Operation
name|op
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|op
operator|.
name|type
condition|)
block|{
case|case
name|SET
case|:
block|{
name|target
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|op
operator|.
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|INCREMENT
case|:
block|{
name|Long
name|x
init|=
operator|(
name|Long
operator|)
name|op
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|old
operator|==
literal|null
condition|)
block|{
name|old
operator|=
literal|0L
expr_stmt|;
block|}
name|target
operator|.
name|put
argument_list|(
name|k
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|old
operator|)
operator|+
name|x
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ADD_MAP_ENTRY
case|:
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|old
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|m
operator|=
name|Utils
operator|.
name|newMap
argument_list|()
expr_stmt|;
name|target
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|put
argument_list|(
name|op
operator|.
name|subKey
operator|.
name|toString
argument_list|()
argument_list|,
name|op
operator|.
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|REMOVE_MAP_ENTRY
case|:
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|old
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|remove
argument_list|(
name|op
operator|.
name|subKey
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|create
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|updateOps
parameter_list|)
block|{
for|for
control|(
name|UpdateOp
name|op
range|:
name|updateOps
control|)
block|{
name|createOrUpdate
argument_list|(
name|collection
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"Nodes:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|p
range|:
name|nodes
operator|.
name|keySet
argument_list|()
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"Path: "
argument_list|)
operator|.
name|append
argument_list|(
name|p
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
init|=
name|nodes
operator|.
name|get
argument_list|(
name|p
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|prop
range|:
name|e
operator|.
name|keySet
argument_list|()
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
name|prop
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|get
argument_list|(
name|prop
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
comment|// ignore
block|}
block|}
end_class

end_unit

