begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|cache
operator|.
name|CacheChangesTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|cache
operator|.
name|NodeDocumentCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|CloseableIterable
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_class
specifier|public
class|class
name|MongoDocumentTraverser
block|{
specifier|private
specifier|final
name|MongoDocumentStore
name|mongoStore
decl_stmt|;
specifier|public
name|MongoDocumentTraverser
parameter_list|(
name|MongoDocumentStore
name|mongoStore
parameter_list|)
block|{
name|this
operator|.
name|mongoStore
operator|=
name|mongoStore
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|CloseableIterable
argument_list|<
name|T
argument_list|>
name|getAllDocuments
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|Predicate
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
block|{
comment|//TODO Handle readOnly
name|boolean
name|readOnly
init|=
literal|true
decl_stmt|;
name|DBCollection
name|dbCollection
init|=
name|mongoStore
operator|.
name|getDBCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
name|CacheChangesTracker
name|cacheChangesTracker
decl_stmt|;
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
operator|&&
operator|!
name|readOnly
condition|)
block|{
name|cacheChangesTracker
operator|=
name|getNodeDocCache
argument_list|()
operator|.
name|registerTracker
argument_list|(
name|NodeDocument
operator|.
name|MIN_ID_VALUE
argument_list|,
name|NodeDocument
operator|.
name|MAX_ID_VALUE
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|cacheChangesTracker
operator|::
name|close
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cacheChangesTracker
operator|=
literal|null
expr_stmt|;
block|}
name|DBCursor
name|cursor
init|=
name|dbCollection
operator|.
name|find
argument_list|()
decl_stmt|;
comment|//TODO This may lead to reads being routed to secondary depending on MongoURI
comment|//So caller must ensure that its safe to read from secondary
name|cursor
operator|.
name|setReadPreference
argument_list|(
name|mongoStore
operator|.
name|getConfiguredReadPreference
argument_list|(
name|collection
argument_list|)
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"Guava"
argument_list|)
name|Iterable
argument_list|<
name|T
argument_list|>
name|result
init|=
name|FluentIterable
operator|.
name|from
argument_list|(
name|cursor
argument_list|)
operator|.
name|filter
argument_list|(
name|o
lambda|->
name|filter
operator|.
name|test
argument_list|(
operator|(
name|String
operator|)
name|o
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|transform
argument_list|(
name|o
lambda|->
block|{
name|T
name|doc
operator|=
name|mongoStore
operator|.
name|convertFromDBObject
argument_list|(
name|collection
argument_list|,
name|o
argument_list|)
argument_list|;
comment|//TODO Review the cache update approach where tracker has to track *all* docs
argument_list|if
operator|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
operator|)
block|{
name|NodeDocument
name|nodeDoc
operator|=
operator|(
name|NodeDocument
operator|)
name|doc
block|;
if|if
condition|(
name|readOnly
condition|)
block|{
name|getNodeDocCache
argument_list|()
operator|.
name|put
argument_list|(
name|nodeDoc
argument_list|)
expr_stmt|;
block|}
name|getNodeDocCache
argument_list|()
operator|.
name|putNonConflictingDocs
argument_list|(
name|cacheChangesTracker
argument_list|,
name|singletonList
argument_list|(
name|nodeDoc
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
block|)
class|;
end_class

begin_return
return|return
name|CloseableIterable
operator|.
name|wrap
argument_list|(
name|result
argument_list|,
name|closer
argument_list|)
return|;
end_return

begin_function
unit|}      private
name|NodeDocumentCache
name|getNodeDocCache
parameter_list|()
block|{
return|return
name|mongoStore
operator|.
name|getNodeDocumentCache
argument_list|()
return|;
block|}
end_function

unit|}
end_unit

