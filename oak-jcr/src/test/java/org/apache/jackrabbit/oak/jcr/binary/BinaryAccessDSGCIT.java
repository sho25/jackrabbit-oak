begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|util
operator|.
name|BinaryAccessTestUtils
operator|.
name|getBinary
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|util
operator|.
name|BinaryAccessTestUtils
operator|.
name|httpGet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|util
operator|.
name|BinaryAccessTestUtils
operator|.
name|isSuccessfulHttpPut
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|util
operator|.
name|BinaryAccessTestUtils
operator|.
name|putBinary
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|util
operator|.
name|BinaryAccessTestUtils
operator|.
name|storeBinaryAndRetrieve
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreUtils
operator|.
name|SharedStoreRecordType
operator|.
name|REPOSITORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|binary
operator|.
name|BinaryDownload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|binary
operator|.
name|BinaryDownloadOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|binary
operator|.
name|BinaryUpload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|fixtures
operator|.
name|datastore
operator|.
name|AzureDataStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|fixtures
operator|.
name|datastore
operator|.
name|S3DataStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|fixtures
operator|.
name|nodestore
operator|.
name|DocumentMongoNodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|fixtures
operator|.
name|nodestore
operator|.
name|SegmentMemoryNodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|util
operator|.
name|BinaryAccessDSGCFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|util
operator|.
name|Content
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobReferenceRetriever
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|MarkSweepGarbageCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|cluster
operator|.
name|ClusterRepositoryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|BinaryAccessDSGCIT
extends|extends
name|AbstractBinaryAccessIT
block|{
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BinaryAccessDSGCIT
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_ROOT
init|=
literal|"testroot"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|BINARY_SIZE
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TRADITIONAL_UPLOAD_1
init|=
literal|"tu1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TRADITIONAL_UPLOAD_2
init|=
literal|"tu2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DIRECT_UPLOAD_1
init|=
literal|"du1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DIRECT_UPLOAD_2
init|=
literal|"du2"
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Iterable
argument_list|<
name|?
argument_list|>
name|dataStoreFixtures
parameter_list|()
block|{
name|Collection
argument_list|<
name|NodeStoreFixture
argument_list|>
name|fixtures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|SegmentMemoryNodeStoreFixture
argument_list|(
operator|new
name|S3DataStoreFixture
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|DocumentMongoNodeStoreFixture
argument_list|(
operator|new
name|S3DataStoreFixture
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|SegmentMemoryNodeStoreFixture
argument_list|(
operator|new
name|AzureDataStoreFixture
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|DocumentMongoNodeStoreFixture
argument_list|(
operator|new
name|AzureDataStoreFixture
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fixtures
return|;
block|}
specifier|public
name|BinaryAccessDSGCIT
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|)
block|{
comment|// reuse NodeStore (and DataStore) across all tests in this class
name|super
argument_list|(
name|fixture
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|JackrabbitValueFactory
name|directUploader
decl_stmt|;
specifier|private
name|MarkSweepGarbageCollector
name|garbageCollector
init|=
literal|null
decl_stmt|;
specifier|private
name|ThreadPoolExecutor
name|executor
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|session
operator|=
name|getAdminSession
argument_list|()
expr_stmt|;
name|directUploader
operator|=
operator|(
name|JackrabbitValueFactory
operator|)
name|session
operator|.
name|getValueFactory
argument_list|()
expr_stmt|;
if|if
condition|(
name|session
operator|.
name|getNode
argument_list|(
literal|"/"
argument_list|)
operator|.
name|hasNode
argument_list|(
name|TEST_ROOT
argument_list|)
condition|)
block|{
name|session
operator|.
name|getNode
argument_list|(
literal|"/"
operator|+
name|TEST_ROOT
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|session
operator|.
name|getNode
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addNode
argument_list|(
name|TEST_ROOT
argument_list|)
expr_stmt|;
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
literal|60
operator|*
literal|5
argument_list|)
expr_stmt|;
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectDownloadURIExpirySeconds
argument_list|(
literal|60
operator|*
literal|5
argument_list|)
expr_stmt|;
block|}
comment|// For debugging.
specifier|private
name|void
name|printTree
parameter_list|(
name|Node
name|root
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|printTree
argument_list|(
name|root
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// For debugging.
specifier|private
name|void
name|printTree
parameter_list|(
name|Node
name|root
parameter_list|,
name|int
name|level
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|level
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|root
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|NodeIterator
name|iter
init|=
name|root
operator|.
name|getNodes
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|printTree
argument_list|(
name|iter
operator|.
name|nextNode
argument_list|()
argument_list|,
name|level
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|toAbsolutePath
parameter_list|(
name|String
name|leaf
parameter_list|)
block|{
return|return
literal|"/"
operator|+
name|TEST_ROOT
operator|+
literal|"/"
operator|+
name|leaf
return|;
block|}
specifier|private
name|Binary
name|createDirectBinary
parameter_list|(
name|String
name|path
parameter_list|,
name|Content
name|content
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|BinaryUpload
name|upload
init|=
name|directUploader
operator|.
name|initiateBinaryUpload
argument_list|(
name|content
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// multi-part not needed for this
name|assertNotNull
argument_list|(
name|upload
argument_list|)
expr_stmt|;
name|int
name|code
init|=
name|content
operator|.
name|httpPUT
argument_list|(
name|upload
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isSuccessfulHttpPut
argument_list|(
name|code
argument_list|,
name|getConfigurableHttpDataRecordProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Binary
name|binary
init|=
name|directUploader
operator|.
name|completeBinaryUpload
argument_list|(
name|upload
operator|.
name|getUploadToken
argument_list|()
argument_list|)
decl_stmt|;
name|putBinary
argument_list|(
name|session
argument_list|,
name|path
argument_list|,
name|binary
argument_list|)
expr_stmt|;
return|return
name|getBinary
argument_list|(
name|session
argument_list|,
name|path
argument_list|)
return|;
block|}
specifier|private
name|void
name|verifyBinariesExistViaSession
parameter_list|(
name|Session
name|session
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Binary
argument_list|>
name|binaries
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Content
argument_list|>
name|binaryContent
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Binary
argument_list|>
name|entry
range|:
name|binaries
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Binary
name|b
init|=
name|getBinary
argument_list|(
name|session
argument_list|,
name|toAbsolutePath
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|b
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|binaryContent
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|assertEqualsWith
argument_list|(
name|b
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyBinariesExistDirectly
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Binary
argument_list|>
name|binaries
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Content
argument_list|>
name|binaryContent
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Binary
argument_list|>
name|entry
range|:
name|binaries
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|BinaryDownload
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
operator|(
operator|(
name|BinaryDownload
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getURI
argument_list|(
name|BinaryDownloadOptions
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|binaryContent
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|assertEqualsWith
argument_list|(
name|httpGet
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyBinariesDoNotExistDirectly
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Binary
argument_list|>
name|deletedBinaries
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Binary
argument_list|>
name|entry
range|:
name|deletedBinaries
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|BinaryDownload
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
operator|(
operator|(
name|BinaryDownload
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getURI
argument_list|(
name|BinaryDownloadOptions
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|compactFileStore
parameter_list|()
block|{
name|FileStore
name|fileStore
init|=
name|getNodeStoreComponent
argument_list|(
name|FileStore
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SegmentGCOptions
operator|.
name|defaultGCOptions
argument_list|()
operator|.
name|getRetainedGenerations
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|fileStore
operator|.
name|compactFull
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|MarkSweepGarbageCollector
name|getGarbageCollector
parameter_list|()
throws|throws
name|DataStoreException
throws|,
name|IOException
block|{
name|DataStoreBlobStore
name|blobStore
init|=
operator|(
name|DataStoreBlobStore
operator|)
name|getNodeStoreComponent
argument_list|(
name|BlobStore
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|garbageCollector
condition|)
block|{
name|String
name|repoId
init|=
name|ClusterRepositoryInfo
operator|.
name|getOrCreateId
argument_list|(
name|getNodeStore
argument_list|()
argument_list|)
decl_stmt|;
name|blobStore
operator|.
name|addMetadataRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|REPOSITORY
operator|.
name|getNameFromId
argument_list|(
name|repoId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|executor
condition|)
block|{
name|executor
operator|=
operator|(
name|ThreadPoolExecutor
operator|)
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|BlobReferenceRetriever
name|referenceRetriever
init|=
operator|(
operator|(
name|BinaryAccessDSGCFixture
operator|)
name|fixture
operator|)
operator|.
name|getBlobReferenceRetriever
argument_list|(
name|getNodeStore
argument_list|()
argument_list|)
decl_stmt|;
name|garbageCollector
operator|=
operator|new
name|MarkSweepGarbageCollector
argument_list|(
name|referenceRetriever
argument_list|,
name|blobStore
argument_list|,
name|executor
argument_list|,
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|2048
argument_list|,
literal|0
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
block|}
return|return
name|garbageCollector
return|;
block|}
specifier|private
name|int
name|getBlobCount
parameter_list|()
throws|throws
name|Exception
block|{
name|GarbageCollectableBlobStore
name|ds
init|=
operator|(
name|GarbageCollectableBlobStore
operator|)
name|getNodeStoreComponent
argument_list|(
name|BlobStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|chunks
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|chunkIds
init|=
name|ds
operator|.
name|getAllChunkIds
argument_list|(
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
name|chunkIds
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|chunks
operator|.
name|add
argument_list|(
name|chunkIds
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|chunks
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGC
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testGC [{}]"
argument_list|,
name|fixture
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Content
argument_list|>
name|binaryContent
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Binary
argument_list|>
name|binaries
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|TRADITIONAL_UPLOAD_1
argument_list|,
name|TRADITIONAL_UPLOAD_2
argument_list|)
control|)
block|{
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
name|BINARY_SIZE
argument_list|)
decl_stmt|;
name|binaryContent
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|binaries
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|storeBinaryAndRetrieve
argument_list|(
name|session
argument_list|,
name|toAbsolutePath
argument_list|(
name|key
argument_list|)
argument_list|,
name|content
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|key
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DIRECT_UPLOAD_1
argument_list|,
name|DIRECT_UPLOAD_2
argument_list|)
control|)
block|{
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
name|BINARY_SIZE
argument_list|)
decl_stmt|;
name|binaryContent
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|binaries
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|createDirectBinary
argument_list|(
name|toAbsolutePath
argument_list|(
name|key
argument_list|)
argument_list|,
name|content
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// Test that all four binaries can be accessed
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|getBlobCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//  - Download all four via repo
name|verifyBinariesExistViaSession
argument_list|(
name|session
argument_list|,
name|binaries
argument_list|,
name|binaryContent
argument_list|)
expr_stmt|;
comment|//  - Download directly
name|verifyBinariesExistDirectly
argument_list|(
name|binaries
argument_list|,
name|binaryContent
argument_list|)
expr_stmt|;
comment|// Delete one of the binaries uploaded via repo and one uploaded directly
name|Node
name|testRoot
init|=
name|session
operator|.
name|getNode
argument_list|(
literal|"/"
operator|+
name|TEST_ROOT
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|deletedBinaryPaths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|TRADITIONAL_UPLOAD_2
argument_list|,
name|DIRECT_UPLOAD_2
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|deletedBinaryPaths
control|)
block|{
name|Node
name|toRemove
init|=
name|testRoot
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|toRemove
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// Verify that they are deleted from repo
for|for
control|(
name|String
name|path
range|:
name|deletedBinaryPaths
control|)
block|{
name|assertFalse
argument_list|(
name|session
operator|.
name|nodeExists
argument_list|(
name|toAbsolutePath
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Verify that all four binaries are still in data store
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|getBlobCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Run DSGC
operator|(
operator|(
name|BinaryAccessDSGCFixture
operator|)
name|fixture
operator|)
operator|.
name|compactStore
argument_list|(
name|getNodeStore
argument_list|()
argument_list|)
expr_stmt|;
name|MarkSweepGarbageCollector
name|garbageCollector
init|=
name|getGarbageCollector
argument_list|()
decl_stmt|;
name|garbageCollector
operator|.
name|collectGarbage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Verify that only two binaries remain in data store
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getBlobCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that the two binaries remaining can still be accessed
name|Map
argument_list|<
name|String
argument_list|,
name|Binary
argument_list|>
name|deletedBinaries
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|deletedPath
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|TRADITIONAL_UPLOAD_2
argument_list|,
name|DIRECT_UPLOAD_2
argument_list|)
control|)
block|{
name|deletedBinaries
operator|.
name|put
argument_list|(
name|deletedPath
argument_list|,
name|binaries
operator|.
name|get
argument_list|(
name|deletedPath
argument_list|)
argument_list|)
expr_stmt|;
name|binaries
operator|.
name|remove
argument_list|(
name|deletedPath
argument_list|)
expr_stmt|;
name|binaryContent
operator|.
name|remove
argument_list|(
name|deletedPath
argument_list|)
expr_stmt|;
block|}
name|verifyBinariesExistViaSession
argument_list|(
name|session
argument_list|,
name|binaries
argument_list|,
name|binaryContent
argument_list|)
expr_stmt|;
name|verifyBinariesExistDirectly
argument_list|(
name|binaries
argument_list|,
name|binaryContent
argument_list|)
expr_stmt|;
name|verifyBinariesDoNotExistDirectly
argument_list|(
name|deletedBinaries
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

