begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tika
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|csv
operator|.
name|CSVFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|csv
operator|.
name|CSVParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|csv
operator|.
name|CSVRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
operator|.
name|notNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_ENCODING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIMETYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PATH
import|;
end_import

begin_class
class|class
name|CSVFileBinaryResourceProvider
implements|implements
name|BinaryResourceProvider
implements|,
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|String
name|BLOB_ID
init|=
literal|"blobId"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LENGTH
init|=
literal|"length"
decl_stmt|;
specifier|static
specifier|final
name|CSVFormat
name|FORMAT
init|=
name|CSVFormat
operator|.
name|DEFAULT
operator|.
name|withCommentMarker
argument_list|(
literal|'#'
argument_list|)
operator|.
name|withHeader
argument_list|(
name|BLOB_ID
argument_list|,
name|LENGTH
argument_list|,
name|JCR_MIMETYPE
argument_list|,
name|JCR_ENCODING
argument_list|,
name|JCR_PATH
argument_list|)
operator|.
name|withNullString
argument_list|(
literal|""
argument_list|)
comment|//Empty string are considered as null
operator|.
name|withIgnoreSurroundingSpaces
argument_list|()
operator|.
name|withSkipHeaderRecord
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|File
name|dataFile
decl_stmt|;
specifier|private
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
specifier|private
specifier|final
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|public
name|CSVFileBinaryResourceProvider
parameter_list|(
name|File
name|dataFile
parameter_list|,
annotation|@
name|Nullable
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|dataFile
operator|.
name|exists
argument_list|()
argument_list|,
literal|"Data file %s does not exist"
argument_list|,
name|dataFile
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataFile
operator|=
name|dataFile
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FluentIterable
argument_list|<
name|BinaryResource
argument_list|>
name|getBinaries
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|CSVParser
name|parser
init|=
name|CSVParser
operator|.
name|parse
argument_list|(
name|dataFile
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|,
name|FORMAT
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|parser
argument_list|)
expr_stmt|;
return|return
name|FluentIterable
operator|.
name|from
argument_list|(
name|parser
argument_list|)
operator|.
name|transform
argument_list|(
operator|new
name|RecordTransformer
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|notNull
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
operator|new
name|Predicate
argument_list|<
name|BinaryResource
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|BinaryResource
name|input
parameter_list|)
block|{
return|return
name|PathUtils
operator|.
name|isAncestor
argument_list|(
name|path
argument_list|,
name|input
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
class|class
name|RecordTransformer
implements|implements
name|Function
argument_list|<
name|CSVRecord
argument_list|,
name|BinaryResource
argument_list|>
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|BinaryResource
name|apply
parameter_list|(
name|CSVRecord
name|input
parameter_list|)
block|{
name|String
name|path
init|=
name|input
operator|.
name|get
argument_list|(
name|JCR_PATH
argument_list|)
decl_stmt|;
name|String
name|mimeType
init|=
name|input
operator|.
name|get
argument_list|(
name|JCR_MIMETYPE
argument_list|)
decl_stmt|;
name|String
name|encoding
init|=
name|input
operator|.
name|get
argument_list|(
name|JCR_ENCODING
argument_list|)
decl_stmt|;
name|String
name|blobId
init|=
name|input
operator|.
name|get
argument_list|(
name|BLOB_ID
argument_list|)
decl_stmt|;
name|String
name|length
init|=
name|input
operator|.
name|get
argument_list|(
name|LENGTH
argument_list|)
decl_stmt|;
name|Long
name|len
init|=
name|length
operator|!=
literal|null
condition|?
name|Longs
operator|.
name|tryParse
argument_list|(
name|length
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|blobId
operator|==
literal|null
operator|||
name|mimeType
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Ignoring invalid record {}. Either of mimeType, blobId or path is null"
argument_list|,
name|input
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
operator|new
name|BinaryResource
argument_list|(
operator|new
name|BlobStoreByteSource
argument_list|(
name|blobStore
argument_list|,
name|blobId
argument_list|,
name|len
argument_list|)
argument_list|,
name|mimeType
argument_list|,
name|encoding
argument_list|,
name|path
argument_list|,
name|blobId
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

