begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|QueryEngine
operator|.
name|NO_BINDINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|QueryEngine
operator|.
name|NO_MAPPINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|QueryEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ResultRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDataSourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDocumentNodeStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|counter
operator|.
name|NodeCounterEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexCopier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|reader
operator|.
name|DefaultIndexReaderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|nodetype
operator|.
name|NodeTypeIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|reference
operator|.
name|ReferenceEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|reference
operator|.
name|ReferenceIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|FileBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Base class for testing indexing and queries when using the composite node  * store.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|CompositeNodeStoreQueryTestBase
block|{
specifier|private
specifier|final
name|NodeStoreKind
name|nodeStoreRoot
decl_stmt|;
specifier|private
specifier|final
name|NodeStoreKind
name|mounts
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|NodeStoreRegistration
argument_list|>
name|registrations
init|=
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
name|NodeStore
name|mountedStore
decl_stmt|;
specifier|private
name|NodeStore
name|deepMountedStore
decl_stmt|;
specifier|protected
name|NodeStore
name|readOnlyStore
decl_stmt|;
comment|// the composite store (containing read-write and read-only stores)
specifier|protected
name|CompositeNodeStore
name|store
decl_stmt|;
comment|// the global store (read-write)
specifier|protected
name|NodeStore
name|globalStore
decl_stmt|;
specifier|protected
name|NodeStore
name|emptyStore
decl_stmt|;
specifier|protected
name|MountInfoProvider
name|mip
decl_stmt|;
specifier|protected
name|QueryEngine
name|qe
decl_stmt|;
specifier|protected
name|ContentSession
name|session
decl_stmt|;
specifier|protected
name|Root
name|root
decl_stmt|;
specifier|protected
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|protected
name|IndexTracker
name|indexTracker
decl_stmt|;
specifier|protected
name|IndexCopier
name|indexCopier
decl_stmt|;
specifier|protected
name|Oak
name|oak
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"Root: {0}, Mounts: {1}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|NodeStoreKind
operator|.
name|MEMORY
block|,
name|NodeStoreKind
operator|.
name|MEMORY
block|}
block|,
block|{
name|NodeStoreKind
operator|.
name|SEGMENT
block|,
name|NodeStoreKind
operator|.
name|SEGMENT
block|}
block|,
comment|//            { NodeStoreKind.DOCUMENT_H2, NodeStoreKind.DOCUMENT_H2},
comment|//            { NodeStoreKind.DOCUMENT_H2, NodeStoreKind.SEGMENT}
block|}
argument_list|)
return|;
block|}
specifier|public
name|CompositeNodeStoreQueryTestBase
parameter_list|(
name|NodeStoreKind
name|root
parameter_list|,
name|NodeStoreKind
name|mounts
parameter_list|)
block|{
name|this
operator|.
name|nodeStoreRoot
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|mounts
operator|=
name|mounts
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|initStore
parameter_list|()
throws|throws
name|Exception
block|{
name|globalStore
operator|=
name|register
argument_list|(
name|nodeStoreRoot
operator|.
name|create
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|mountedStore
operator|=
name|register
argument_list|(
name|mounts
operator|.
name|create
argument_list|(
literal|"temp"
argument_list|)
argument_list|)
expr_stmt|;
name|deepMountedStore
operator|=
name|register
argument_list|(
name|mounts
operator|.
name|create
argument_list|(
literal|"deep"
argument_list|)
argument_list|)
expr_stmt|;
name|readOnlyStore
operator|=
name|register
argument_list|(
name|mounts
operator|.
name|create
argument_list|(
literal|"readOnly"
argument_list|)
argument_list|)
expr_stmt|;
name|emptyStore
operator|=
name|register
argument_list|(
name|mounts
operator|.
name|create
argument_list|(
literal|"empty"
argument_list|)
argument_list|)
expr_stmt|;
comment|// this NodeStore will always be empty
comment|// create a property on the root node
name|NodeBuilder
name|builder
init|=
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|globalStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|hasProperty
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a different sub-tree on the root store
name|builder
operator|=
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|NodeBuilder
name|libsBuilder
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"libs"
argument_list|)
decl_stmt|;
name|libsBuilder
operator|.
name|child
argument_list|(
literal|"first"
argument_list|)
expr_stmt|;
name|libsBuilder
operator|.
name|child
argument_list|(
literal|"second"
argument_list|)
expr_stmt|;
comment|// create an empty /apps node with a property
name|builder
operator|.
name|child
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|globalStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNodeCount
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a /tmp child on the mounted store and set a property
name|builder
operator|=
name|mountedStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|NodeBuilder
name|tmpBuilder
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"tmp"
argument_list|)
decl_stmt|;
name|tmpBuilder
operator|.
name|setProperty
argument_list|(
literal|"prop1"
argument_list|,
literal|"val1"
argument_list|)
expr_stmt|;
name|tmpBuilder
operator|.
name|child
argument_list|(
literal|"child1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop1"
argument_list|,
literal|"val1"
argument_list|)
expr_stmt|;
name|tmpBuilder
operator|.
name|child
argument_list|(
literal|"child2"
argument_list|)
expr_stmt|;
name|mountedStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mountedStore
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mountedStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|getChildNodeCount
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
comment|// populate /libs/mount/third in the deep mount, and include a property
name|builder
operator|=
name|deepMountedStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"libs"
argument_list|)
operator|.
name|child
argument_list|(
literal|"mount"
argument_list|)
operator|.
name|child
argument_list|(
literal|"third"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"mounted"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|deepMountedStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|deepMountedStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"libs"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"mount"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"third"
argument_list|)
operator|.
name|hasProperty
argument_list|(
literal|"mounted"
argument_list|)
argument_list|)
expr_stmt|;
comment|// populate /readonly with a single node
name|builder
operator|=
name|readOnlyStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
operator|new
name|InitialContent
argument_list|()
operator|.
name|initialize
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"readOnly"
argument_list|)
expr_stmt|;
name|readOnlyStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|initMounts
argument_list|()
expr_stmt|;
block|}
name|void
name|initMounts
parameter_list|()
throws|throws
name|Exception
block|{
name|mip
operator|=
name|Mounts
operator|.
name|newBuilder
argument_list|()
operator|.
name|readOnlyMount
argument_list|(
literal|"temp"
argument_list|,
literal|"/tmp"
argument_list|)
operator|.
name|readOnlyMount
argument_list|(
literal|"deep"
argument_list|,
literal|"/libs/mount"
argument_list|)
operator|.
name|readOnlyMount
argument_list|(
literal|"empty"
argument_list|,
literal|"/nowhere"
argument_list|)
operator|.
name|readOnlyMount
argument_list|(
literal|"readOnly"
argument_list|,
literal|"/readOnly"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// don't use the builder since it would fail due to too many read-write stores
comment|// but for the purposes of testing the general correctness it's fine
name|List
argument_list|<
name|MountedNodeStore
argument_list|>
name|nonDefaultStores
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|nonDefaultStores
operator|.
name|add
argument_list|(
operator|new
name|MountedNodeStore
argument_list|(
name|mip
operator|.
name|getMountByName
argument_list|(
literal|"temp"
argument_list|)
argument_list|,
name|mountedStore
argument_list|)
argument_list|)
expr_stmt|;
name|nonDefaultStores
operator|.
name|add
argument_list|(
operator|new
name|MountedNodeStore
argument_list|(
name|mip
operator|.
name|getMountByName
argument_list|(
literal|"deep"
argument_list|)
argument_list|,
name|deepMountedStore
argument_list|)
argument_list|)
expr_stmt|;
name|nonDefaultStores
operator|.
name|add
argument_list|(
operator|new
name|MountedNodeStore
argument_list|(
name|mip
operator|.
name|getMountByName
argument_list|(
literal|"empty"
argument_list|)
argument_list|,
name|emptyStore
argument_list|)
argument_list|)
expr_stmt|;
name|nonDefaultStores
operator|.
name|add
argument_list|(
operator|new
name|MountedNodeStore
argument_list|(
name|mip
operator|.
name|getMountByName
argument_list|(
literal|"readOnly"
argument_list|)
argument_list|,
name|readOnlyStore
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|CompositeNodeStore
argument_list|(
name|mip
argument_list|,
name|globalStore
argument_list|,
name|nonDefaultStores
argument_list|)
expr_stmt|;
name|session
operator|=
name|createRepository
argument_list|(
name|store
argument_list|)
operator|.
name|login
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|root
operator|=
name|session
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
name|qe
operator|=
name|root
operator|.
name|getQueryEngine
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|(
name|NodeStore
name|store
parameter_list|)
block|{
return|return
name|getOakRepo
argument_list|(
name|store
argument_list|)
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
name|Oak
name|getOakRepo
parameter_list|(
name|NodeStore
name|store
parameter_list|)
block|{
if|if
condition|(
name|oak
operator|!=
literal|null
condition|)
block|{
return|return
name|oak
return|;
block|}
try|try
block|{
name|indexCopier
operator|=
operator|new
name|IndexCopier
argument_list|(
name|executorService
argument_list|,
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
name|DefaultIndexReaderFactory
name|indexReaderFactory
init|=
operator|new
name|DefaultIndexReaderFactory
argument_list|(
name|mip
argument_list|,
name|indexCopier
argument_list|)
decl_stmt|;
name|indexTracker
operator|=
operator|new
name|IndexTracker
argument_list|(
name|indexReaderFactory
argument_list|)
expr_stmt|;
name|LuceneIndexProvider
name|luceneIndexProvider
init|=
operator|new
name|LuceneIndexProvider
argument_list|(
name|indexTracker
argument_list|)
decl_stmt|;
name|LuceneIndexEditorProvider
name|luceneIndexEditor
init|=
operator|new
name|LuceneIndexEditorProvider
argument_list|(
name|indexCopier
argument_list|,
name|indexTracker
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|mip
argument_list|)
decl_stmt|;
name|oak
operator|=
operator|new
name|Oak
argument_list|(
name|store
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
operator|.
name|with
argument_list|(
name|mip
argument_list|)
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|NodeCounterEditorProvider
argument_list|()
operator|.
name|with
argument_list|(
name|mip
argument_list|)
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexProvider
argument_list|()
operator|.
name|with
argument_list|(
name|mip
argument_list|)
argument_list|)
operator|.
name|with
argument_list|(
name|luceneIndexEditor
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|QueryIndexProvider
operator|)
name|luceneIndexProvider
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|Observer
operator|)
name|luceneIndexProvider
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|NodeTypeIndexProvider
argument_list|()
operator|.
name|with
argument_list|(
name|mip
argument_list|)
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|ReferenceEditorProvider
argument_list|()
operator|.
name|with
argument_list|(
name|mip
argument_list|)
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|ReferenceIndexProvider
argument_list|()
operator|.
name|with
argument_list|(
name|mip
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|oak
return|;
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|executeQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|language
parameter_list|)
block|{
name|boolean
name|pathsOnly
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|language
operator|.
name|equals
argument_list|(
literal|"xpath"
argument_list|)
condition|)
block|{
name|pathsOnly
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|executeQuery
argument_list|(
name|query
argument_list|,
name|language
argument_list|,
name|pathsOnly
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|executeQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|language
parameter_list|,
name|boolean
name|pathsOnly
parameter_list|)
block|{
return|return
name|executeQuery
argument_list|(
name|query
argument_list|,
name|language
argument_list|,
name|pathsOnly
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|executeQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|language
parameter_list|,
name|boolean
name|pathsOnly
parameter_list|,
name|boolean
name|skipSort
parameter_list|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|Result
name|result
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
name|language
argument_list|,
name|NO_BINDINGS
argument_list|)
decl_stmt|;
for|for
control|(
name|ResultRow
name|row
range|:
name|result
operator|.
name|getRows
argument_list|()
control|)
block|{
name|String
name|r
init|=
name|readRow
argument_list|(
name|row
argument_list|,
name|pathsOnly
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|startsWith
argument_list|(
literal|"explain "
argument_list|)
condition|)
block|{
name|r
operator|=
name|formatPlan
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|lines
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|query
operator|.
name|contains
argument_list|(
literal|"order by"
argument_list|)
operator|&&
operator|!
name|skipSort
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|lines
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|lines
operator|.
name|add
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|lines
operator|.
name|add
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
if|if
condition|(
name|time
operator|>
literal|5
operator|*
literal|60
operator|*
literal|1000
operator|&&
operator|!
name|isDebugModeEnabled
argument_list|()
condition|)
block|{
comment|// more than 5 minutes
name|fail
argument_list|(
literal|"Query took too long: "
operator|+
name|query
operator|+
literal|" took "
operator|+
name|time
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
block|}
return|return
name|lines
return|;
block|}
comment|/**      * Check whether the test is running in debug mode.      *      * @return true if debug most is (most likely) enabled      */
specifier|protected
specifier|static
name|boolean
name|isDebugModeEnabled
parameter_list|()
block|{
return|return
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
operator|.
name|getInputArguments
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"-agentlib:jdwp"
argument_list|)
operator|>
literal|0
return|;
block|}
specifier|static
name|String
name|formatPlan
parameter_list|(
name|String
name|plan
parameter_list|)
block|{
name|plan
operator|=
name|plan
operator|.
name|replaceAll
argument_list|(
literal|" where "
argument_list|,
literal|"\n  where "
argument_list|)
expr_stmt|;
name|plan
operator|=
name|plan
operator|.
name|replaceAll
argument_list|(
literal|" inner join "
argument_list|,
literal|"\n  inner join "
argument_list|)
expr_stmt|;
name|plan
operator|=
name|plan
operator|.
name|replaceAll
argument_list|(
literal|" on "
argument_list|,
literal|"\n  on "
argument_list|)
expr_stmt|;
name|plan
operator|=
name|plan
operator|.
name|replaceAll
argument_list|(
literal|" and "
argument_list|,
literal|"\n  and "
argument_list|)
expr_stmt|;
return|return
name|plan
return|;
block|}
specifier|protected
specifier|static
name|String
name|readRow
parameter_list|(
name|ResultRow
name|row
parameter_list|,
name|boolean
name|pathOnly
parameter_list|)
block|{
if|if
condition|(
name|pathOnly
condition|)
block|{
return|return
name|row
operator|.
name|getValue
argument_list|(
name|QueryConstants
operator|.
name|JCR_PATH
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
return|;
block|}
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|PropertyValue
index|[]
name|values
init|=
name|row
operator|.
name|getValues
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|PropertyValue
name|v
init|=
name|values
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|v
operator|.
name|count
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
name|v
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|buff
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buff
operator|.
name|append
argument_list|(
name|v
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|Result
name|executeQuery
parameter_list|(
name|String
name|statement
parameter_list|,
name|String
name|language
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyValue
argument_list|>
name|sv
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
name|qe
operator|.
name|executeQuery
argument_list|(
name|statement
argument_list|,
name|language
argument_list|,
name|sv
argument_list|,
name|NO_MAPPINGS
argument_list|)
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|closeRepositories
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|NodeStoreRegistration
name|reg
range|:
name|registrations
control|)
block|{
name|reg
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
enum|enum
name|NodeStoreKind
block|{
name|MEMORY
block|{
annotation|@
name|Override
specifier|public
name|NodeStoreRegistration
name|create
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|NodeStoreRegistration
argument_list|()
block|{
specifier|private
name|MemoryNodeStore
name|instance
decl_stmt|;
annotation|@
name|Override
specifier|public
name|NodeStore
name|get
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"instance already created"
argument_list|)
throw|;
block|}
name|instance
operator|=
operator|new
name|MemoryNodeStore
argument_list|()
expr_stmt|;
return|return
name|instance
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
comment|// does nothing
block|}
block|}
return|;
block|}
specifier|public
name|boolean
name|supportsBlobCreation
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
block|,
name|SEGMENT
block|{
annotation|@
name|Override
specifier|public
name|NodeStoreRegistration
name|create
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|NodeStoreRegistration
argument_list|()
block|{
specifier|private
name|SegmentNodeStore
name|instance
decl_stmt|;
specifier|private
name|FileStore
name|store
decl_stmt|;
specifier|private
name|File
name|storePath
decl_stmt|;
specifier|private
name|String
name|blobStorePath
decl_stmt|;
annotation|@
name|Override
specifier|public
name|NodeStore
name|get
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"instance already created"
argument_list|)
throw|;
block|}
comment|// TODO - don't use Unix directory separators
name|String
name|directoryName
init|=
name|name
operator|!=
literal|null
condition|?
literal|"segment-"
operator|+
name|name
else|:
literal|"segment"
decl_stmt|;
name|storePath
operator|=
operator|new
name|File
argument_list|(
literal|"target/classes/"
operator|+
name|directoryName
argument_list|)
expr_stmt|;
name|String
name|blobStoreDirectoryName
init|=
name|name
operator|!=
literal|null
condition|?
literal|"blob-"
operator|+
name|name
else|:
literal|"blob"
decl_stmt|;
name|blobStorePath
operator|=
literal|"target/classes/"
operator|+
name|blobStoreDirectoryName
expr_stmt|;
name|BlobStore
name|blobStore
init|=
operator|new
name|FileBlobStore
argument_list|(
name|blobStorePath
argument_list|)
decl_stmt|;
name|store
operator|=
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
argument_list|(
name|storePath
argument_list|)
operator|.
name|withBlobStore
argument_list|(
name|blobStore
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|instance
operator|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|store
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|instance
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|storePath
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
operator|new
name|File
argument_list|(
name|blobStorePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
block|,
name|DOCUMENT_H2
block|{
comment|// TODO - copied from DocumentRdbFixture
specifier|private
name|DataSource
name|ds
decl_stmt|;
annotation|@
name|Override
specifier|public
name|NodeStoreRegistration
name|create
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|NodeStoreRegistration
argument_list|()
block|{
specifier|private
name|DocumentNodeStore
name|instance
decl_stmt|;
annotation|@
name|Override
specifier|public
name|NodeStore
name|get
parameter_list|()
throws|throws
name|Exception
block|{
name|RDBOptions
name|options
init|=
operator|new
name|RDBOptions
argument_list|()
operator|.
name|dropTablesOnClose
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|String
name|jdbcUrl
init|=
literal|"jdbc:h2:file:./target/classes/document"
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|jdbcUrl
operator|+=
literal|"-"
operator|+
name|name
expr_stmt|;
block|}
name|ds
operator|=
name|RDBDataSourceFactory
operator|.
name|forJdbcUrl
argument_list|(
name|jdbcUrl
argument_list|,
literal|"sa"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|instance
operator|=
operator|new
name|RDBDocumentNodeStoreBuilder
argument_list|()
operator|.
name|setRDBConnection
argument_list|(
name|ds
argument_list|,
name|options
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|instance
operator|.
name|setMaxBackOffMillis
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|instance
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
name|instance
operator|.
name|dispose
argument_list|()
expr_stmt|;
if|if
condition|(
name|ds
operator|instanceof
name|Closeable
condition|)
block|{
operator|(
operator|(
name|Closeable
operator|)
name|ds
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
block|;
specifier|public
specifier|abstract
name|NodeStoreRegistration
name|create
parameter_list|(
annotation|@
name|Nullable
name|String
name|name
parameter_list|)
function_decl|;
specifier|public
name|boolean
name|supportsBlobCreation
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|private
interface|interface
name|NodeStoreRegistration
block|{
name|NodeStore
name|get
parameter_list|()
throws|throws
name|Exception
function_decl|;
name|void
name|close
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
specifier|private
name|NodeStore
name|register
parameter_list|(
name|NodeStoreRegistration
name|reg
parameter_list|)
throws|throws
name|Exception
block|{
name|registrations
operator|.
name|add
argument_list|(
name|reg
argument_list|)
expr_stmt|;
return|return
name|reg
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class

end_unit

