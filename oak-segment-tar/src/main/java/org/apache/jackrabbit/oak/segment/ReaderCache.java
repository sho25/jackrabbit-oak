begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|CacheWeights
operator|.
name|OBJECT_HEADER_SIZE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheLIRS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheStats
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Weigher
import|;
end_import

begin_comment
comment|/**  * A cache consisting of a fast and slow component. The fast cache for small items is based  * on an array, and a slow one uses a LIRS cache.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ReaderCache
parameter_list|<
name|T
parameter_list|>
block|{
annotation|@
name|Nonnull
specifier|private
specifier|final
name|Weigher
argument_list|<
name|CacheKey
argument_list|,
name|T
argument_list|>
name|weigher
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|/**      * The fast (array based) cache.      */
annotation|@
name|CheckForNull
specifier|private
specifier|final
name|FastCache
argument_list|<
name|T
argument_list|>
name|fastCache
decl_stmt|;
comment|/**      * The slower (LIRS) cache.      */
annotation|@
name|Nonnull
specifier|private
specifier|final
name|CacheLIRS
argument_list|<
name|CacheKey
argument_list|,
name|T
argument_list|>
name|cache
decl_stmt|;
comment|/**      * Create a new string cache.      *      * @param maxWeight the maximum memory in bytes.      * @param averageWeight  an estimate for the average weight of the elements in the      *                       cache. See {@link CacheLIRS#setAverageMemory(int)}.      * @param weigher   Needed to provide an estimation of the cache weight in memory      */
specifier|protected
name|ReaderCache
parameter_list|(
name|long
name|maxWeight
parameter_list|,
name|int
name|averageWeight
parameter_list|,
annotation|@
name|Nonnull
name|String
name|name
parameter_list|,
annotation|@
name|Nonnull
name|Weigher
argument_list|<
name|CacheKey
argument_list|,
name|T
argument_list|>
name|weigher
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|weigher
operator|=
name|checkNotNull
argument_list|(
name|weigher
argument_list|)
expr_stmt|;
name|fastCache
operator|=
operator|new
name|FastCache
argument_list|<>
argument_list|()
expr_stmt|;
name|cache
operator|=
name|CacheLIRS
operator|.
expr|<
name|CacheKey
operator|,
name|T
operator|>
name|newBuilder
argument_list|()
operator|.
name|module
argument_list|(
name|name
argument_list|)
operator|.
name|maximumWeight
argument_list|(
name|maxWeight
argument_list|)
operator|.
name|averageWeight
argument_list|(
name|averageWeight
argument_list|)
operator|.
name|weigher
argument_list|(
name|weigher
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Nonnull
specifier|public
name|CacheStats
name|getStats
parameter_list|()
block|{
return|return
operator|new
name|CacheStats
argument_list|(
name|cache
argument_list|,
name|name
argument_list|,
name|weigher
argument_list|,
name|cache
operator|.
name|getMaxMemory
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|getEntryHash
parameter_list|(
name|long
name|lsb
parameter_list|,
name|long
name|msb
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|int
name|hash
init|=
call|(
name|int
call|)
argument_list|(
name|msb
operator|^
name|lsb
argument_list|)
operator|+
name|offset
decl_stmt|;
name|hash
operator|=
operator|(
operator|(
name|hash
operator|>>>
literal|16
operator|)
operator|^
name|hash
operator|)
operator|*
literal|0x45d9f3b
expr_stmt|;
return|return
operator|(
name|hash
operator|>>>
literal|16
operator|)
operator|^
name|hash
return|;
block|}
comment|/**      * Get the value, loading it if necessary.      *      * @param msb the msb of the segment      * @param lsb the lsb of the segment      * @param offset the offset      * @param loader the loader function      * @return the value      */
annotation|@
name|Nonnull
specifier|public
name|T
name|get
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|,
name|int
name|offset
parameter_list|,
name|Function
argument_list|<
name|Integer
argument_list|,
name|T
argument_list|>
name|loader
parameter_list|)
block|{
name|int
name|hash
init|=
name|getEntryHash
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|,
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|fastCache
operator|==
literal|null
condition|)
block|{
comment|// disabled cache
name|T
name|value
init|=
name|loader
operator|.
name|apply
argument_list|(
name|offset
argument_list|)
decl_stmt|;
assert|assert
name|value
operator|!=
literal|null
assert|;
return|return
name|value
return|;
block|}
name|T
name|value
init|=
name|fastCache
operator|.
name|get
argument_list|(
name|hash
argument_list|,
name|msb
argument_list|,
name|lsb
argument_list|,
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
name|CacheKey
name|key
init|=
operator|new
name|CacheKey
argument_list|(
name|hash
argument_list|,
name|msb
argument_list|,
name|lsb
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|value
operator|=
name|cache
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|loader
operator|.
name|apply
argument_list|(
name|offset
argument_list|)
expr_stmt|;
assert|assert
name|value
operator|!=
literal|null
assert|;
name|cache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isSmall
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|fastCache
operator|.
name|put
argument_list|(
name|hash
argument_list|,
operator|new
name|FastCacheEntry
argument_list|<>
argument_list|(
name|hash
argument_list|,
name|msb
argument_list|,
name|lsb
argument_list|,
name|offset
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
comment|/**      * Clear the cache.      */
specifier|public
name|void
name|clear
parameter_list|()
block|{
if|if
condition|(
name|fastCache
operator|!=
literal|null
condition|)
block|{
name|cache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
name|fastCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Determine whether the entry is small, in which case it can be kept in the fast cache.      */
specifier|protected
specifier|abstract
name|boolean
name|isSmall
parameter_list|(
name|T
name|value
parameter_list|)
function_decl|;
comment|/**      * A fast cache based on an array.      */
specifier|private
specifier|static
class|class
name|FastCache
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**          * The number of entries in the cache. Must be a power of 2.          */
specifier|private
specifier|static
specifier|final
name|int
name|CACHE_SIZE
init|=
literal|16
operator|*
literal|1024
decl_stmt|;
comment|/**          * The cache array.          */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|final
name|FastCacheEntry
argument_list|<
name|T
argument_list|>
index|[]
name|elements
init|=
operator|new
name|FastCacheEntry
index|[
name|CACHE_SIZE
index|]
decl_stmt|;
comment|/**          * Get the string if it is stored.          *          * @param hash the hash          * @param msb          * @param lsb          * @param offset the offset          * @return the string, or null          */
name|T
name|get
parameter_list|(
name|int
name|hash
parameter_list|,
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|int
name|index
init|=
name|hash
operator|&
operator|(
name|CACHE_SIZE
operator|-
literal|1
operator|)
decl_stmt|;
name|FastCacheEntry
argument_list|<
name|T
argument_list|>
name|e
init|=
name|elements
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|e
operator|.
name|matches
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|,
name|offset
argument_list|)
condition|)
block|{
return|return
name|e
operator|.
name|value
return|;
block|}
return|return
literal|null
return|;
block|}
name|void
name|clear
parameter_list|()
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|elements
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|void
name|put
parameter_list|(
name|int
name|hash
parameter_list|,
name|FastCacheEntry
argument_list|<
name|T
argument_list|>
name|entry
parameter_list|)
block|{
name|int
name|index
init|=
name|hash
operator|&
operator|(
name|CACHE_SIZE
operator|-
literal|1
operator|)
decl_stmt|;
name|elements
index|[
name|index
index|]
operator|=
name|entry
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|CacheKey
block|{
specifier|private
specifier|final
name|int
name|hash
decl_stmt|;
specifier|private
specifier|final
name|long
name|msb
decl_stmt|,
name|lsb
decl_stmt|;
specifier|private
specifier|final
name|int
name|offset
decl_stmt|;
name|CacheKey
parameter_list|(
name|int
name|hash
parameter_list|,
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|hash
operator|=
name|hash
expr_stmt|;
name|this
operator|.
name|msb
operator|=
name|msb
expr_stmt|;
name|this
operator|.
name|lsb
operator|=
name|lsb
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hash
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|ReaderCache
operator|.
name|CacheKey
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|CacheKey
name|o
init|=
operator|(
name|CacheKey
operator|)
name|other
decl_stmt|;
return|return
name|o
operator|.
name|hash
operator|==
name|hash
operator|&&
name|o
operator|.
name|msb
operator|==
name|msb
operator|&&
name|o
operator|.
name|lsb
operator|==
name|lsb
operator|&&
name|o
operator|.
name|offset
operator|==
name|offset
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Long
operator|.
name|toHexString
argument_list|(
name|msb
argument_list|)
operator|+
literal|':'
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|lsb
argument_list|)
operator|+
literal|'+'
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|offset
argument_list|)
return|;
block|}
specifier|public
name|int
name|estimateMemoryUsage
parameter_list|()
block|{
return|return
name|OBJECT_HEADER_SIZE
operator|+
literal|32
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FastCacheEntry
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
specifier|final
name|int
name|hash
decl_stmt|;
specifier|private
specifier|final
name|long
name|msb
decl_stmt|,
name|lsb
decl_stmt|;
specifier|private
specifier|final
name|int
name|offset
decl_stmt|;
specifier|private
specifier|final
name|T
name|value
decl_stmt|;
name|FastCacheEntry
parameter_list|(
name|int
name|hash
parameter_list|,
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|,
name|int
name|offset
parameter_list|,
name|T
name|value
parameter_list|)
block|{
name|this
operator|.
name|hash
operator|=
name|hash
expr_stmt|;
name|this
operator|.
name|msb
operator|=
name|msb
expr_stmt|;
name|this
operator|.
name|lsb
operator|=
name|lsb
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
name|boolean
name|matches
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
name|this
operator|.
name|offset
operator|==
name|offset
operator|&&
name|this
operator|.
name|msb
operator|==
name|msb
operator|&&
name|this
operator|.
name|lsb
operator|==
name|lsb
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hash
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|FastCacheEntry
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FastCacheEntry
argument_list|<
name|?
argument_list|>
name|o
init|=
operator|(
name|FastCacheEntry
argument_list|<
name|?
argument_list|>
operator|)
name|other
decl_stmt|;
return|return
name|o
operator|.
name|hash
operator|==
name|hash
operator|&&
name|o
operator|.
name|msb
operator|==
name|msb
operator|&&
name|o
operator|.
name|lsb
operator|==
name|lsb
operator|&&
name|o
operator|.
name|offset
operator|==
name|offset
return|;
block|}
block|}
block|}
end_class

end_unit

