begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2004-2011 H2 Group. Multiple-Licensed under the H2 License,  * Version 1.0, and under the Eclipse Public License, Version 1.0  * (http://h2database.com/html/license.html).  * Initial Developer: H2 Group  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|message
operator|.
name|DbException
import|;
end_import

begin_comment
comment|/**  * The base class for wrapping / delegating file systems such as  * the split file system.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|FilePathWrapper
extends|extends
name|FilePath
block|{
specifier|private
name|FilePath
name|base
decl_stmt|;
specifier|public
name|FilePathWrapper
name|getPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|path
argument_list|,
name|unwrap
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Create a wrapped path instance for the given base path.      *      * @param base the base path      * @return the wrapped path      */
specifier|public
name|FilePathWrapper
name|wrap
parameter_list|(
name|FilePath
name|base
parameter_list|)
block|{
return|return
name|base
operator|==
literal|null
condition|?
literal|null
else|:
name|create
argument_list|(
name|getPrefix
argument_list|()
operator|+
name|base
operator|.
name|name
argument_list|,
name|base
argument_list|)
return|;
block|}
specifier|public
name|FilePath
name|unwrap
parameter_list|()
block|{
return|return
name|unwrap
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
name|FilePathWrapper
name|create
parameter_list|(
name|String
name|path
parameter_list|,
name|FilePath
name|base
parameter_list|)
block|{
try|try
block|{
name|FilePathWrapper
name|p
init|=
name|getClass
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|p
operator|.
name|name
operator|=
name|path
expr_stmt|;
name|p
operator|.
name|base
operator|=
name|base
expr_stmt|;
return|return
name|p
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|DbException
operator|.
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|getScheme
argument_list|()
operator|+
literal|":"
return|;
block|}
comment|/**      * Get the base path for the given wrapped path.      *      * @param path the path including the scheme prefix      * @return the base file path      */
specifier|protected
name|FilePath
name|unwrap
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|FilePath
operator|.
name|get
argument_list|(
name|path
operator|.
name|substring
argument_list|(
name|getScheme
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|FilePath
name|getBase
parameter_list|()
block|{
return|return
name|base
return|;
block|}
specifier|public
name|boolean
name|canWrite
parameter_list|()
block|{
return|return
name|base
operator|.
name|canWrite
argument_list|()
return|;
block|}
specifier|public
name|void
name|createDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|base
operator|.
name|createDirectory
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|createFile
parameter_list|()
block|{
return|return
name|base
operator|.
name|createFile
argument_list|()
return|;
block|}
specifier|public
name|void
name|delete
parameter_list|()
throws|throws
name|IOException
block|{
name|base
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
name|base
operator|.
name|exists
argument_list|()
return|;
block|}
specifier|public
name|FilePath
name|getParent
parameter_list|()
block|{
return|return
name|wrap
argument_list|(
name|base
operator|.
name|getParent
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isAbsolute
parameter_list|()
block|{
return|return
name|base
operator|.
name|isAbsolute
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isDirectory
parameter_list|()
block|{
return|return
name|base
operator|.
name|isDirectory
argument_list|()
return|;
block|}
specifier|public
name|long
name|lastModified
parameter_list|()
block|{
return|return
name|base
operator|.
name|lastModified
argument_list|()
return|;
block|}
specifier|public
name|FilePath
name|toRealPath
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|wrap
argument_list|(
name|base
operator|.
name|toRealPath
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|FilePath
argument_list|>
name|newDirectoryStream
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|FilePath
argument_list|>
name|list
init|=
name|base
operator|.
name|newDirectoryStream
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|len
init|=
name|list
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|wrap
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|public
name|void
name|moveTo
parameter_list|(
name|FilePath
name|newName
parameter_list|)
throws|throws
name|IOException
block|{
name|base
operator|.
name|moveTo
argument_list|(
operator|(
operator|(
name|FilePathWrapper
operator|)
name|newName
operator|)
operator|.
name|base
argument_list|)
expr_stmt|;
block|}
specifier|public
name|InputStream
name|newInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|base
operator|.
name|newInputStream
argument_list|()
return|;
block|}
specifier|public
name|OutputStream
name|newOutputStream
parameter_list|(
name|boolean
name|append
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|base
operator|.
name|newOutputStream
argument_list|(
name|append
argument_list|)
return|;
block|}
specifier|public
name|FileChannel
name|open
parameter_list|(
name|String
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|base
operator|.
name|open
argument_list|(
name|mode
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|setReadOnly
parameter_list|()
block|{
return|return
name|base
operator|.
name|setReadOnly
argument_list|()
return|;
block|}
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|base
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|FilePath
name|createTempFile
parameter_list|(
name|String
name|suffix
parameter_list|,
name|boolean
name|deleteOnExit
parameter_list|,
name|boolean
name|inTempDir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|wrap
argument_list|(
name|base
operator|.
name|createTempFile
argument_list|(
name|suffix
argument_list|,
name|deleteOnExit
argument_list|,
name|inTempDir
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|FilePath
name|resolve
parameter_list|(
name|String
name|other
parameter_list|)
block|{
return|return
name|other
operator|==
literal|null
condition|?
name|this
else|:
name|wrap
argument_list|(
name|base
operator|.
name|resolve
argument_list|(
name|other
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

