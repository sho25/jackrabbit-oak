begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TrackingCorruptIndexHandlerTest
block|{
specifier|private
name|TrackingCorruptIndexHandler
name|handler
init|=
operator|new
name|TrackingCorruptIndexHandler
argument_list|()
decl_stmt|;
specifier|private
name|Clock
name|clock
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|basics
parameter_list|()
throws|throws
name|Exception
block|{
name|handler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|handler
operator|.
name|indexUpdateFailed
argument_list|(
literal|"async"
argument_list|,
literal|"/oak:index/foo"
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
comment|//Index would not be considered corrupt until timeout
name|assertFalse
argument_list|(
name|handler
operator|.
name|getCorruptIndexData
argument_list|(
literal|"async"
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"/oak:index/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|handler
operator|.
name|getCorruptIntervalMillis
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler
operator|.
name|getCorruptIndexData
argument_list|(
literal|"async"
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"/oak:index/foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Should only be visible for "async"
name|assertFalse
argument_list|(
name|handler
operator|.
name|getCorruptIndexData
argument_list|(
literal|"async-fulltext"
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"/oak:index/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|markWorkingIndexes
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"/oak:index/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|handler
operator|.
name|getCorruptIndexData
argument_list|(
literal|"async"
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"/oak:index/foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|disbaled
parameter_list|()
throws|throws
name|Exception
block|{
name|handler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|handler
operator|.
name|indexUpdateFailed
argument_list|(
literal|"async"
argument_list|,
literal|"/oak:index/foo"
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|handler
operator|.
name|getCorruptIntervalMillis
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler
operator|.
name|getCorruptIndexData
argument_list|(
literal|"async"
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"/oak:index/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|setCorruptInterval
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|//With timeout set to zero no corrupt index should be reported
name|assertFalse
argument_list|(
name|handler
operator|.
name|getCorruptIndexData
argument_list|(
literal|"async"
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"/oak:index/foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|warningLoggedAfterSomeTime
parameter_list|()
throws|throws
name|Exception
block|{
name|handler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|handler
operator|.
name|indexUpdateFailed
argument_list|(
literal|"async"
argument_list|,
literal|"/oak:index/foo"
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|handler
operator|.
name|skippingCorruptIndex
argument_list|(
literal|"async"
argument_list|,
literal|"/oak:index/foo"
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|handler
operator|.
name|getErrorWarnIntervalMillis
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler
operator|.
name|skippingCorruptIndex
argument_list|(
literal|"async"
argument_list|,
literal|"/oak:index/foo"
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|handler
operator|.
name|skippingCorruptIndex
argument_list|(
literal|"async"
argument_list|,
literal|"/oak:index/foo"
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

