begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeTypeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|AuthorizationContextTest
extends|extends
name|AbstractSecurityTest
block|{
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createAcl
parameter_list|(
annotation|@
name|Nullable
name|String
name|path
parameter_list|,
name|String
modifier|...
name|privilegeNames
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|AccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|acl
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|privilegesFromNames
argument_list|(
name|privilegeNames
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|path
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/OAK-2740">OAK-2740</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testItemDefinitionsDefinesContextRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"/jcr:system/jcr:nodeTypes/rep:AccessControllable/rep:namedChildNodeDefinitions/rep:policy"
argument_list|,
literal|"/jcr:system/jcr:nodeTypes/rep:RepoAccessControllable/rep:namedChildNodeDefinitions/rep:repoPolicy"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|defPath
range|:
name|paths
control|)
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|defPath
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|AuthorizationContext
operator|.
name|getInstance
argument_list|()
operator|.
name|definesContextRoot
argument_list|(
name|tree
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPolicyDefinesContextRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|createAcl
argument_list|(
literal|"/"
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
name|Tree
name|aclTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getChild
argument_list|(
name|AccessControlConstants
operator|.
name|REP_POLICY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|aclTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|AuthorizationContext
operator|.
name|getInstance
argument_list|()
operator|.
name|definesContextRoot
argument_list|(
name|aclTree
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRepoPolicyDefinesContextRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|createAcl
argument_list|(
literal|null
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
expr_stmt|;
name|Tree
name|aclTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getChild
argument_list|(
name|AccessControlConstants
operator|.
name|REP_REPO_POLICY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|aclTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|AuthorizationContext
operator|.
name|getInstance
argument_list|()
operator|.
name|definesContextRoot
argument_list|(
name|aclTree
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAceDefinesContextRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|createAcl
argument_list|(
literal|"/"
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
name|Tree
name|aclTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getChild
argument_list|(
name|AccessControlConstants
operator|.
name|REP_POLICY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|aclTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|aclTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
name|AuthorizationContext
operator|.
name|getInstance
argument_list|()
operator|.
name|definesContextRoot
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|createAcl
argument_list|(
literal|"/"
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
name|Context
name|ctx
init|=
name|AuthorizationContext
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|policyPath
init|=
literal|"/rep:policy"
decl_stmt|;
name|assertTrue
argument_list|(
name|ctx
operator|.
name|definesLocation
argument_list|(
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
name|policyPath
operator|+
literal|"/allow"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ctx
operator|.
name|definesLocation
argument_list|(
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
name|policyPath
operator|+
literal|"/allow/"
operator|+
name|AccessControlConstants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ctx
operator|.
name|definesLocation
argument_list|(
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
name|policyPath
operator|+
literal|"/allow/"
operator|+
name|AccessControlConstants
operator|.
name|REP_PRIVILEGES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|existingRegular
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/"
argument_list|,
literal|"/jcr:system"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|existingRegular
control|)
block|{
name|assertFalse
argument_list|(
name|path
argument_list|,
name|ctx
operator|.
name|definesLocation
argument_list|(
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|path
argument_list|,
name|ctx
operator|.
name|definesLocation
argument_list|(
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|nonExistingItem
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|'/'
operator|+
name|AccessControlConstants
operator|.
name|REP_REPO_POLICY
argument_list|,
literal|"/content/"
operator|+
name|AccessControlConstants
operator|.
name|REP_POLICY
argument_list|,
literal|"/content/"
operator|+
name|AccessControlConstants
operator|.
name|REP_PRIVILEGES
argument_list|,
literal|"/content/"
operator|+
name|AccessControlConstants
operator|.
name|REP_REPO_POLICY
argument_list|,
literal|"/jcr:system/"
operator|+
name|AccessControlConstants
operator|.
name|REP_POLICY
argument_list|,
name|PermissionConstants
operator|.
name|PERMISSIONS_STORE_PATH
operator|+
literal|"/nonexisting"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|nonExistingItem
control|)
block|{
name|assertTrue
argument_list|(
name|path
argument_list|,
name|ctx
operator|.
name|definesLocation
argument_list|(
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|path
argument_list|,
name|ctx
operator|.
name|definesLocation
argument_list|(
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|AccessControlConstants
operator|.
name|REP_PRIVILEGES
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetType
parameter_list|()
throws|throws
name|Exception
block|{
name|TreeTypeProvider
name|ttp
init|=
operator|new
name|TreeTypeProvider
argument_list|(
name|AuthorizationContext
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TypeTest
name|test
range|:
name|TypeTest
operator|.
name|createTests
argument_list|(
name|root
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
name|test
operator|.
name|path
argument_list|,
name|test
operator|.
name|type
argument_list|,
name|ttp
operator|.
name|getType
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|test
operator|.
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTypeWithParentType
parameter_list|()
throws|throws
name|Exception
block|{
name|TreeTypeProvider
name|ttp
init|=
operator|new
name|TreeTypeProvider
argument_list|(
name|AuthorizationContext
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TypeTest
name|test
range|:
name|TypeTest
operator|.
name|createTests
argument_list|(
name|root
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
name|test
operator|.
name|path
argument_list|,
name|test
operator|.
name|type
argument_list|,
name|ttp
operator|.
name|getType
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|test
operator|.
name|path
argument_list|)
argument_list|,
name|test
operator|.
name|parentType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTypeWithDefaultParentType
parameter_list|()
throws|throws
name|Exception
block|{
name|TreeTypeProvider
name|ttp
init|=
operator|new
name|TreeTypeProvider
argument_list|(
name|AuthorizationContext
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TypeTest
name|test
range|:
name|TypeTest
operator|.
name|createTests
argument_list|(
name|root
argument_list|)
control|)
block|{
name|TreeType
name|typeIfParentDefault
init|=
name|ttp
operator|.
name|getType
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|test
operator|.
name|path
argument_list|)
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|TreeType
operator|.
name|DEFAULT
operator|==
name|test
operator|.
name|parentType
condition|)
block|{
name|assertEquals
argument_list|(
name|test
operator|.
name|path
argument_list|,
name|test
operator|.
name|type
argument_list|,
name|typeIfParentDefault
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotEquals
argument_list|(
name|test
operator|.
name|path
argument_list|,
name|test
operator|.
name|type
argument_list|,
name|typeIfParentDefault
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|TypeTest
block|{
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|TreeType
name|type
decl_stmt|;
specifier|private
specifier|final
name|TreeType
name|parentType
decl_stmt|;
specifier|private
name|TypeTest
parameter_list|(
annotation|@
name|NotNull
name|String
name|path
parameter_list|,
name|TreeType
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|path
argument_list|,
name|type
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TypeTest
parameter_list|(
annotation|@
name|NotNull
name|String
name|path
parameter_list|,
name|TreeType
name|type
parameter_list|,
name|TreeType
name|parentType
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|parentType
operator|=
name|parentType
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|TypeTest
argument_list|>
name|createTests
parameter_list|(
annotation|@
name|NotNull
name|Root
name|root
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TypeTest
argument_list|>
name|tests
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
operator|+
literal|"/rep:AccessControllable/rep:namedChildNodeDefinitions/rep:policy"
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
operator|+
literal|"/rep:AccessControllable/rep:namedChildNodeDefinitions/rep:policy/rep:Policy"
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
operator|+
literal|"/rep:ACL/rep:residualChildNodeDefinitions/rep:ACE"
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
operator|+
literal|"/rep:GrantACE/rep:namedChildNodeDefinitions/rep:restrictions"
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
operator|+
literal|"/rep:RepoAccessControllable/rep:namedChildNodeDefinitions/rep:repoPolicy"
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
operator|+
literal|"/rep:PermissionStore"
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
name|PermissionConstants
operator|.
name|PERMISSIONS_STORE_PATH
argument_list|,
name|TreeType
operator|.
name|INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
name|PermissionConstants
operator|.
name|PERMISSIONS_STORE_PATH
operator|+
literal|"/a/b/child"
argument_list|,
name|TreeType
operator|.
name|INTERNAL
argument_list|,
name|TreeType
operator|.
name|INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|NodeUtil
name|testTree
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|AccessControlConstants
operator|.
name|POLICY_NODE_NAMES
control|)
block|{
name|NodeUtil
name|acl
init|=
name|testTree
operator|.
name|addChild
argument_list|(
name|name
argument_list|,
name|AccessControlConstants
operator|.
name|NT_REP_ACL
argument_list|)
decl_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
name|acl
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|TreeType
operator|.
name|ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|NodeUtil
name|ace
init|=
name|acl
operator|.
name|addChild
argument_list|(
literal|"ace"
argument_list|,
name|AccessControlConstants
operator|.
name|NT_REP_DENY_ACE
argument_list|)
decl_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
name|ace
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|TreeType
operator|.
name|ACCESS_CONTROL
argument_list|,
name|TreeType
operator|.
name|ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|NodeUtil
name|ace2
init|=
name|acl
operator|.
name|addChild
argument_list|(
literal|"ace2"
argument_list|,
name|AccessControlConstants
operator|.
name|NT_REP_GRANT_ACE
argument_list|)
decl_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
name|ace2
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|TreeType
operator|.
name|ACCESS_CONTROL
argument_list|,
name|TreeType
operator|.
name|ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|NodeUtil
name|rest
init|=
name|ace2
operator|.
name|addChild
argument_list|(
name|AccessControlConstants
operator|.
name|REP_RESTRICTIONS
argument_list|,
name|AccessControlConstants
operator|.
name|NT_REP_RESTRICTIONS
argument_list|)
decl_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
name|rest
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|TreeType
operator|.
name|ACCESS_CONTROL
argument_list|,
name|TreeType
operator|.
name|ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|NodeUtil
name|invalid
init|=
name|rest
operator|.
name|addChild
argument_list|(
literal|"invalid"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
name|invalid
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|TreeType
operator|.
name|ACCESS_CONTROL
argument_list|,
name|TreeType
operator|.
name|ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tests
return|;
block|}
block|}
block|}
end_class

end_unit

