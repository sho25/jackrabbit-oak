begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
operator|.
name|broadcast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * A mechanism that broadcasts to all registered consumers. It is mainly used for testing.  */
end_comment

begin_class
specifier|public
class|class
name|InMemoryBroadcaster
implements|implements
name|Broadcaster
block|{
specifier|public
specifier|static
specifier|final
name|InMemoryBroadcaster
name|INSTANCE
init|=
operator|new
name|InMemoryBroadcaster
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|Listener
argument_list|>
name|listeners
init|=
operator|new
name|ArrayList
argument_list|<
name|Listener
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|send
parameter_list|(
name|ByteBuffer
name|buff
parameter_list|)
block|{
name|int
name|start
init|=
name|buff
operator|.
name|position
argument_list|()
decl_stmt|;
for|for
control|(
name|Listener
name|l
range|:
name|listeners
control|)
block|{
name|buff
operator|.
name|position
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|l
operator|.
name|receive
argument_list|(
name|buff
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// ignore
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBroadcastConfig
parameter_list|(
name|DynamicBroadcastConfig
name|broadcastConfig
parameter_list|)
block|{
comment|// not yet implemented
block|}
block|}
end_class

end_unit

