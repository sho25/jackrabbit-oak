begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|LineNumberReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|RowIterator
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionParser
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsonObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|commons
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|console
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|console
operator|.
name|NodeStoreOpener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_class
specifier|public
class|class
name|IndexCommand
implements|implements
name|Command
block|{
specifier|public
specifier|static
specifier|final
name|String
name|INDEX
init|=
literal|"index"
decl_stmt|;
name|PrintStream
name|output
init|=
name|System
operator|.
name|out
decl_stmt|;
name|Session
name|session
decl_stmt|;
specifier|private
name|boolean
name|interactive
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|OptionParser
name|parser
init|=
operator|new
name|OptionParser
argument_list|()
decl_stmt|;
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|scriptOption
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"script"
argument_list|,
literal|"Path to Script"
argument_list|)
operator|.
name|withOptionalArg
argument_list|()
operator|.
name|defaultsTo
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|?
argument_list|>
name|helpSpec
init|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|asList
argument_list|(
literal|"h"
argument_list|,
literal|"?"
argument_list|,
literal|"help"
argument_list|)
argument_list|,
literal|"show help"
argument_list|)
operator|.
name|forHelp
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Opening nodestore..."
argument_list|)
expr_stmt|;
name|NodeStoreFixture
name|nodeStoreFixture
init|=
name|NodeStoreOpener
operator|.
name|open
argument_list|(
name|parser
argument_list|,
literal|true
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|OptionSet
name|options
init|=
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|helpSpec
argument_list|)
operator|||
name|options
operator|.
name|nonOptionArguments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Mode: "
operator|+
name|INDEX
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
return|return;
block|}
name|NodeStore
name|nodeStore
init|=
name|nodeStoreFixture
operator|.
name|getStore
argument_list|()
decl_stmt|;
name|String
name|script
init|=
name|scriptOption
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|LineNumberReader
name|reader
init|=
name|openScriptReader
argument_list|(
name|script
argument_list|)
decl_stmt|;
try|try
block|{
name|process
argument_list|(
name|nodeStore
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|nodeStoreFixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|LineNumberReader
name|openScriptReader
parameter_list|(
name|String
name|script
parameter_list|)
throws|throws
name|IOException
block|{
name|Reader
name|reader
decl_stmt|;
if|if
condition|(
literal|"-"
operator|.
name|equals
argument_list|(
name|script
argument_list|)
condition|)
block|{
name|reader
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
expr_stmt|;
name|interactive
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|reader
operator|=
operator|new
name|FileReader
argument_list|(
name|script
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|LineNumberReader
argument_list|(
operator|new
name|BufferedReader
argument_list|(
name|reader
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|process
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|,
name|LineNumberReader
name|reader
parameter_list|)
throws|throws
name|Exception
block|{
name|session
operator|=
name|NodeStoreOpener
operator|.
name|openSession
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Nodestore is open"
argument_list|)
expr_stmt|;
if|if
condition|(
name|interactive
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Type \"exit\" to quit"
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|String
name|json
init|=
name|readJson
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|==
literal|null
operator|||
name|json
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"exit"
argument_list|)
condition|)
block|{
break|break;
block|}
name|execute
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|readJson
parameter_list|(
name|LineNumberReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|level
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"//"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|buff
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|line
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|line
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\"'
condition|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|c
operator|=
name|line
operator|.
name|charAt
argument_list|(
operator|++
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\"'
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
operator|++
name|i
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'{'
condition|)
block|{
name|level
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'}'
condition|)
block|{
name|level
operator|--
expr_stmt|;
block|}
block|}
if|if
condition|(
name|level
operator|==
literal|0
operator|&&
operator|!
name|buff
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
name|void
name|execute
parameter_list|(
name|String
name|command
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|JsopTokenizer
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|JsonObject
name|json
init|=
name|JsonObject
operator|.
name|create
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|json
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"if"
argument_list|)
condition|)
block|{
name|Object
name|value
init|=
name|getValueOrVariable
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"if"
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|equals
init|=
name|getValueOrVariable
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"="
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|equals
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|equals
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|k
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|getValueOrVariable
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"addNode"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|String
name|nodePath
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|parent
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|nodePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|nodeExists
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|Node
name|p
init|=
name|session
operator|.
name|getNode
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|String
name|nodeName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|nodePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|hasNode
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
name|JsonObject
name|node
init|=
name|json
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
name|addNode
argument_list|(
name|p
argument_list|,
name|nodeName
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
literal|"removeNode"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|String
name|path
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|session
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"setProperty"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|String
name|itemPath
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|nodePath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|itemPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|nodeExists
argument_list|(
name|nodePath
argument_list|)
condition|)
block|{
name|String
name|propertyName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|itemPath
argument_list|)
decl_stmt|;
name|Object
name|propertyValue
init|=
name|getValueOrVariable
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|setProperty
argument_list|(
name|session
operator|.
name|getNode
argument_list|(
name|nodePath
argument_list|)
argument_list|,
name|propertyName
argument_list|,
name|propertyValue
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"session"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"save"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"xpath"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
operator|||
literal|"sql"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|String
name|language
init|=
literal|"xpath"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|?
name|k
else|:
name|Query
operator|.
name|JCR_SQL2
decl_stmt|;
name|String
name|columnName
init|=
literal|"xpath"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|?
literal|"jcr:path"
else|:
literal|null
decl_stmt|;
name|boolean
name|quiet
init|=
name|properties
operator|.
name|containsKey
argument_list|(
literal|"quiet"
argument_list|)
decl_stmt|;
name|int
name|depth
init|=
name|properties
operator|.
name|containsKey
argument_list|(
literal|"depth"
argument_list|)
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"depth"
argument_list|)
argument_list|)
else|:
literal|0
decl_stmt|;
name|runQuery
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|language
argument_list|,
name|columnName
argument_list|,
name|quiet
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"print"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|output
operator|.
name|println
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"for"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|JsopTokenizer
operator|.
name|decodeQuoted
argument_list|(
name|properties
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|old
init|=
name|data
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
index|[]
name|commands
init|=
operator|(
name|String
index|[]
operator|)
name|getValueOrVariable
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"do"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|x
range|:
operator|(
name|String
index|[]
operator|)
name|value
control|)
block|{
name|data
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|x
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|c
range|:
name|commands
control|)
block|{
name|execute
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|data
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|old
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"loop"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
for|for
control|(
name|String
name|c
range|:
operator|(
name|String
index|[]
operator|)
name|value
control|)
block|{
name|execute
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|remove
argument_list|(
literal|"$break"
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
name|setVariable
argument_list|(
name|properties
argument_list|,
name|k
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|setVariable
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|,
name|String
name|k
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"$$"
argument_list|)
condition|)
block|{
name|k
operator|=
literal|"$"
operator|+
name|getValueOrVariable
argument_list|(
literal|"\""
operator|+
name|k
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
name|Object
name|v2
init|=
name|getValueOrVariable
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"+"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|v2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v2
operator|==
literal|null
condition|)
block|{
comment|// keep value
block|}
elseif|else
if|if
condition|(
name|v2
operator|instanceof
name|Long
operator|&&
name|value
operator|instanceof
name|Long
condition|)
block|{
name|value
operator|=
operator|(
name|Long
operator|)
name|value
operator|+
operator|(
name|Long
operator|)
name|v2
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|value
operator|.
name|toString
argument_list|()
operator|+
name|v2
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
name|data
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Object
name|getValueOrVariable
parameter_list|(
name|String
name|jsonValue
parameter_list|)
block|{
name|Object
name|v
init|=
name|getValue
argument_list|(
name|jsonValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
operator|||
operator|!
name|v
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
return|return
name|v
return|;
block|}
name|String
name|value
init|=
name|v
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"$$"
argument_list|)
condition|)
block|{
name|value
operator|=
literal|"$"
operator|+
name|getValueOrVariable
argument_list|(
literal|"\""
operator|+
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
return|return
name|data
operator|.
name|get
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|addNode
parameter_list|(
name|Node
name|p
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|JsonObject
name|json
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|json
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|JsonObject
argument_list|>
name|children
init|=
name|json
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|String
name|primaryType
init|=
name|properties
operator|.
name|get
argument_list|(
literal|"jcr:primaryType"
argument_list|)
decl_stmt|;
name|Node
name|n
decl_stmt|;
if|if
condition|(
name|primaryType
operator|==
literal|null
condition|)
block|{
name|n
operator|=
name|p
operator|.
name|addNode
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|n
operator|=
name|p
operator|.
name|addNode
argument_list|(
name|nodeName
argument_list|,
name|getValueOrVariable
argument_list|(
name|primaryType
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|propertyName
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"jcr:primaryType"
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|Object
name|value
init|=
name|getValueOrVariable
argument_list|(
name|properties
operator|.
name|get
argument_list|(
name|propertyName
argument_list|)
argument_list|)
decl_stmt|;
name|setProperty
argument_list|(
name|n
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonObject
argument_list|>
name|e
range|:
name|children
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|k
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonObject
name|v
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|addNode
argument_list|(
name|n
argument_list|,
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Object
name|getValue
parameter_list|(
name|String
name|jsonValue
parameter_list|)
block|{
if|if
condition|(
name|jsonValue
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|JsopTokenizer
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|jsonValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|NULL
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|NUMBER
argument_list|)
condition|)
block|{
name|String
name|n
init|=
name|t
operator|.
name|getToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|n
argument_list|)
return|;
block|}
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|n
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|TRUE
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|FALSE
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|STRING
argument_list|)
condition|)
block|{
return|return
name|t
operator|.
name|getToken
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|'['
argument_list|)
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|.
name|matches
argument_list|(
literal|']'
argument_list|)
condition|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|t
operator|.
name|readRawValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|']'
argument_list|)
condition|)
block|{
break|break;
block|}
name|t
operator|.
name|read
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|jsonValue
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|void
name|setProperty
parameter_list|(
name|Node
name|n
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|int
name|type
init|=
name|PropertyType
operator|.
name|UNDEFINED
decl_stmt|;
if|if
condition|(
name|propertyName
operator|.
name|startsWith
argument_list|(
literal|"{"
argument_list|)
condition|)
block|{
name|String
name|t
init|=
name|propertyName
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|propertyName
operator|.
name|indexOf
argument_list|(
literal|'}'
argument_list|)
argument_list|)
decl_stmt|;
name|propertyName
operator|=
name|propertyName
operator|.
name|substring
argument_list|(
name|t
operator|.
name|length
argument_list|()
operator|+
literal|2
argument_list|)
expr_stmt|;
name|type
operator|=
name|PropertyType
operator|.
name|valueFromName
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|n
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|type
operator|==
name|PropertyType
operator|.
name|UNDEFINED
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|type
operator|=
name|PropertyType
operator|.
name|BOOLEAN
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Long
condition|)
block|{
name|type
operator|=
name|PropertyType
operator|.
name|LONG
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Double
condition|)
block|{
name|type
operator|=
name|PropertyType
operator|.
name|DOUBLE
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|PropertyType
operator|.
name|STRING
expr_stmt|;
block|}
block|}
if|if
condition|(
name|value
operator|instanceof
name|String
index|[]
condition|)
block|{
name|String
index|[]
name|list
init|=
operator|(
name|String
index|[]
operator|)
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|list
index|[
name|i
index|]
operator|=
name|getValue
argument_list|(
name|list
index|[
name|i
index|]
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|n
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|list
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|n
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|runQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|language
parameter_list|,
name|String
name|columnName
parameter_list|,
name|boolean
name|quiet
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columnName
operator|=
name|query
operator|.
name|startsWith
argument_list|(
literal|"explain"
argument_list|)
condition|?
literal|"plan"
else|:
name|columnName
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|query
argument_list|,
name|language
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|b
range|:
name|q
operator|.
name|getBindVariableNames
argument_list|()
control|)
block|{
name|ValueFactory
name|vf
init|=
name|session
operator|.
name|getValueFactory
argument_list|()
decl_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
name|b
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
name|data
operator|.
name|get
argument_list|(
literal|"$"
operator|+
name|b
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|depth
operator|!=
literal|0
condition|)
block|{
name|NodeIterator
name|ni
init|=
name|result
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|JsopBuilder
name|builder
init|=
operator|new
name|JsopBuilder
argument_list|()
operator|.
name|array
argument_list|()
decl_stmt|;
while|while
condition|(
name|ni
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|n
init|=
name|ni
operator|.
name|nextNode
argument_list|()
decl_stmt|;
name|builder
operator|.
name|key
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|appendNode
argument_list|(
name|builder
argument_list|,
name|n
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|println
argument_list|(
name|JsopBuilder
operator|.
name|prettyPrint
argument_list|(
name|builder
operator|.
name|endArray
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|RowIterator
name|ri
init|=
name|result
operator|.
name|getRows
argument_list|()
decl_stmt|;
while|while
condition|(
name|ri
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Row
name|r
init|=
name|ri
operator|.
name|nextRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|columnName
operator|!=
literal|null
condition|)
block|{
name|String
name|x
init|=
name|r
operator|.
name|getValue
argument_list|(
name|columnName
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|quiet
condition|)
block|{
name|output
operator|.
name|println
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
index|[]
name|columnNames
init|=
name|result
operator|.
name|getColumnNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|cn
range|:
name|columnNames
control|)
block|{
name|Value
name|v
init|=
name|r
operator|.
name|getValue
argument_list|(
name|cn
argument_list|)
decl_stmt|;
name|String
name|x
init|=
name|v
operator|==
literal|null
condition|?
literal|null
else|:
name|v
operator|.
name|getString
argument_list|()
decl_stmt|;
if|if
condition|(
name|columnNames
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|quiet
condition|)
block|{
name|output
operator|.
name|println
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|quiet
condition|)
block|{
name|output
operator|.
name|println
argument_list|(
name|cn
operator|+
literal|": "
operator|+
name|x
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|data
operator|.
name|put
argument_list|(
literal|"$resultSize"
argument_list|,
operator|(
name|long
operator|)
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"$result"
argument_list|,
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendNode
parameter_list|(
name|JsopBuilder
name|builder
parameter_list|,
name|Node
name|n
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|builder
operator|.
name|object
argument_list|()
expr_stmt|;
for|for
control|(
name|PropertyIterator
name|it
init|=
name|n
operator|.
name|getProperties
argument_list|()
init|;
name|depth
operator|!=
literal|0
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Property
name|p
init|=
name|it
operator|.
name|nextProperty
argument_list|()
decl_stmt|;
name|String
name|name
init|=
operator|(
name|p
operator|.
name|getType
argument_list|()
operator|==
name|PropertyType
operator|.
name|STRING
operator|||
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"jcr:primaryType"
argument_list|)
condition|?
literal|""
else|:
literal|"{"
operator|+
name|PropertyType
operator|.
name|nameFromValue
argument_list|(
name|p
operator|.
name|getType
argument_list|()
argument_list|)
operator|+
literal|"}"
operator|)
operator|+
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
name|builder
operator|.
name|key
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|isMultiple
argument_list|()
condition|)
block|{
name|builder
operator|.
name|array
argument_list|()
expr_stmt|;
for|for
control|(
name|Value
name|v
range|:
name|p
operator|.
name|getValues
argument_list|()
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|v
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|value
argument_list|(
name|p
operator|.
name|getValue
argument_list|()
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|NodeIterator
name|it
init|=
name|n
operator|.
name|getNodes
argument_list|()
init|;
name|depth
operator|!=
literal|0
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Node
name|n2
init|=
name|it
operator|.
name|nextNode
argument_list|()
decl_stmt|;
name|builder
operator|.
name|key
argument_list|(
name|n2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|appendNode
argument_list|(
name|builder
argument_list|,
name|n2
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

