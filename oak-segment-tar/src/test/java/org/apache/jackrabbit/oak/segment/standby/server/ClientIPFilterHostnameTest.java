begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ClientIPFilterHostnameTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testInvalidHostname
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|filters
init|=
operator|new
name|String
index|[]
block|{
literal|"foobar"
block|}
decl_stmt|;
name|AddressResolver
name|dummyAddressResolver
init|=
operator|new
name|AddressResolver
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InetAddress
name|resolve
parameter_list|(
name|String
name|host
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|ClientFilter
name|clientFilter
init|=
operator|new
name|ClientIpFilter
argument_list|(
name|filters
argument_list|,
name|dummyAddressResolver
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|address
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|8080
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|clientFilter
operator|.
name|isAllowed
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHostnameWithDash
parameter_list|()
block|{
name|String
index|[]
name|filters
init|=
operator|new
name|String
index|[]
block|{
literal|"foo-bar"
block|}
decl_stmt|;
name|AddressResolver
name|anythingToLocalhostResolver
init|=
operator|new
name|AddressResolver
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InetAddress
name|resolve
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|InetAddress
name|address
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|host
operator|.
name|equals
argument_list|(
literal|"foo-bar"
argument_list|)
condition|)
block|{
name|address
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
name|address
return|;
block|}
block|}
decl_stmt|;
name|ClientFilter
name|clientFilter
init|=
operator|new
name|ClientIpFilter
argument_list|(
name|filters
argument_list|,
name|anythingToLocalhostResolver
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|address
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|8080
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|clientFilter
operator|.
name|isAllowed
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHostnameWithMultipleDashes
parameter_list|()
block|{
name|String
index|[]
name|filters
init|=
operator|new
name|String
index|[]
block|{
literal|"foo-bar-baz"
block|}
decl_stmt|;
name|AddressResolver
name|anythingToLocalhostResolver
init|=
operator|new
name|AddressResolver
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InetAddress
name|resolve
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|InetAddress
name|address
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|host
operator|.
name|equals
argument_list|(
literal|"foo-bar-baz"
argument_list|)
condition|)
block|{
name|address
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
name|address
return|;
block|}
block|}
decl_stmt|;
name|ClientFilter
name|clientFilter
init|=
operator|new
name|ClientIpFilter
argument_list|(
name|filters
argument_list|,
name|anythingToLocalhostResolver
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|address
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|8080
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|clientFilter
operator|.
name|isAllowed
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

