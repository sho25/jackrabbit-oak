begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|fixtures
operator|.
name|datastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|azure
operator|.
name|blobstorage
operator|.
name|AzureConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|azure
operator|.
name|blobstorage
operator|.
name|AzureDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|azure
operator|.
name|blobstorage
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|fixtures
operator|.
name|nodestore
operator|.
name|FixtureUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobContainer
import|;
end_import

begin_comment
comment|/**  * Fixture for AzureDataStore based on an azure.properties config file. It creates  * a new temporary Azure Blob Container for each DataStore created.  *  * Note: when using this, it's highly recommended to reuse the NodeStores across multiple tests (using  * {@link org.apache.jackrabbit.oak.jcr.AbstractRepositoryTest#AbstractRepositoryTest(NodeStoreFixture, boolean) AbstractRepositoryTest(fixture, true)})  * otherwise it will be slower and can lead to out of memory issues if there are many tests.  *  *<p>  * Test buckets are named "direct-binary-test-...". If some did not get cleaned up, you can  * list them using the aws cli with this command:  *<pre>  *     az storage container list --output table | grep direct-binary-test-  *</pre>  *  * And after checking, delete them all in one go with this command:  *<pre>  *     az storage container list --output table | grep direct-binary-test- | cut -d " " -f 1 | xargs -n 1 -I {} sh -c 'az storage container delete -n {}'  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|AzureDataStoreFixture
implements|implements
name|DataStoreFixture
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Nullable
specifier|private
specifier|final
name|Properties
name|azProps
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|DataStore
argument_list|,
name|CloudBlobContainer
argument_list|>
name|containers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|AzureDataStoreFixture
parameter_list|()
block|{
name|azProps
operator|=
name|FixtureUtils
operator|.
name|loadDataStoreProperties
argument_list|(
literal|"azure.config"
argument_list|,
literal|"azure.properties"
argument_list|,
literal|".azure"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
if|if
condition|(
name|azProps
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Skipping Azure DataStore fixture because no AZ properties file was found given by "
operator|+
literal|"'azure.config' system property or named 'azure.properties' or '~/.azure/azure.properties'."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|DataStore
name|createDataStore
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isAvailable
argument_list|()
operator|||
name|azProps
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"createDataStore() called but this fixture is not available"
argument_list|)
throw|;
block|}
comment|// Create a temporary container that will be removed at test completion
name|String
name|containerName
init|=
literal|"direct-binary-test-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Creating Azure test blob container {}"
argument_list|,
name|containerName
argument_list|)
expr_stmt|;
name|String
name|connectionString
init|=
name|Utils
operator|.
name|getConnectionStringFromProperties
argument_list|(
name|azProps
argument_list|)
decl_stmt|;
try|try
block|{
name|CloudBlobContainer
name|container
init|=
name|Utils
operator|.
name|getBlobContainer
argument_list|(
name|connectionString
argument_list|,
name|containerName
argument_list|)
decl_stmt|;
name|container
operator|.
name|createIfNotExists
argument_list|()
expr_stmt|;
comment|// create new properties since azProps is shared for all created DataStores
name|Properties
name|clonedAzProps
init|=
operator|new
name|Properties
argument_list|(
name|azProps
argument_list|)
decl_stmt|;
name|clonedAzProps
operator|.
name|setProperty
argument_list|(
name|AzureConstants
operator|.
name|AZURE_BLOB_CONTAINER_NAME
argument_list|,
name|container
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// setup Oak DS
name|AzureDataStore
name|dataStore
init|=
operator|new
name|AzureDataStore
argument_list|()
decl_stmt|;
name|dataStore
operator|.
name|setProperties
argument_list|(
name|clonedAzProps
argument_list|)
expr_stmt|;
name|dataStore
operator|.
name|setStagingSplitPercentage
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|containers
operator|.
name|put
argument_list|(
name|dataStore
argument_list|,
name|container
argument_list|)
expr_stmt|;
return|return
name|dataStore
return|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
decl||
name|StorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Azure DataStore fixture fails because of issue with Azure config or connection"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|(
name|DataStore
name|dataStore
parameter_list|)
block|{
if|if
condition|(
name|dataStore
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|dataStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Issue while disposing DataStore"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|CloudBlobContainer
name|container
init|=
name|containers
operator|.
name|get
argument_list|(
name|dataStore
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Removing Azure test blob container {}"
argument_list|,
name|container
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// For Azure, you can just delete the container and all
comment|// blobs it in will also be deleted
name|container
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to delete Azure Blob container {}"
argument_list|,
name|container
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|containers
operator|.
name|remove
argument_list|(
name|dataStore
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

