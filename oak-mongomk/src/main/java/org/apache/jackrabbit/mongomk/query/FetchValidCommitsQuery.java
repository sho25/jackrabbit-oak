begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|MongoConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|model
operator|.
name|CommitMongo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|util
operator|.
name|MongoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|QueryBuilder
import|;
end_import

begin_comment
comment|/**  * An query for fetching valid commits.  *  * @author<a href="mailto:pmarx@adobe.com>Philipp Marx</a>  */
end_comment

begin_class
specifier|public
class|class
name|FetchValidCommitsQuery
extends|extends
name|AbstractQuery
argument_list|<
name|List
argument_list|<
name|CommitMongo
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|int
name|LIMITLESS
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FetchValidCommitsQuery
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|fromRevisionId
decl_stmt|;
specifier|private
name|String
name|toRevisionId
decl_stmt|;
specifier|private
name|int
name|maxEntries
init|=
name|LIMITLESS
decl_stmt|;
comment|/**      * Constructs a new {link FetchValidCommitsQuery}.      *      * @param mongoConnection Mongo connection.      * @param fromRevisionId From revision id.      */
specifier|public
name|FetchValidCommitsQuery
parameter_list|(
name|MongoConnection
name|mongoConnection
parameter_list|,
name|String
name|toRevisionId
parameter_list|)
block|{
name|this
argument_list|(
name|mongoConnection
argument_list|,
literal|null
argument_list|,
name|toRevisionId
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a new {@link FetchValidCommitsQuery}      *      * @param mongoConnection Mongo connection.      * @param fromRevisionId From revision id.      * @param toRevisionId To revision id.      */
specifier|public
name|FetchValidCommitsQuery
parameter_list|(
name|MongoConnection
name|mongoConnection
parameter_list|,
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|)
block|{
name|super
argument_list|(
name|mongoConnection
argument_list|)
expr_stmt|;
name|this
operator|.
name|fromRevisionId
operator|=
name|fromRevisionId
expr_stmt|;
name|this
operator|.
name|toRevisionId
operator|=
name|toRevisionId
expr_stmt|;
block|}
comment|/**      * FIXME - Maybe this should be removed.      *      * Constructs a new {@link FetchValidCommitsQuery}.      *      * @param mongoConnection The {@link MongoConnection}.      * @param maxEntries Max number of entries that should be fetched.      */
specifier|public
name|FetchValidCommitsQuery
parameter_list|(
name|MongoConnection
name|mongoConnection
parameter_list|,
name|int
name|maxEntries
parameter_list|)
block|{
name|super
argument_list|(
name|mongoConnection
argument_list|)
expr_stmt|;
name|fromRevisionId
operator|=
literal|null
expr_stmt|;
name|toRevisionId
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxEntries
operator|=
name|maxEntries
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CommitMongo
argument_list|>
name|execute
parameter_list|()
block|{
name|DBCursor
name|dbCursor
init|=
name|fetchListOfValidCommits
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CommitMongo
argument_list|>
name|commits
init|=
name|convertToCommits
argument_list|(
name|dbCursor
argument_list|)
decl_stmt|;
return|return
name|commits
return|;
block|}
specifier|private
name|List
argument_list|<
name|CommitMongo
argument_list|>
name|convertToCommits
parameter_list|(
name|DBCursor
name|dbCursor
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|CommitMongo
argument_list|>
name|revisions
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|CommitMongo
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|dbCursor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CommitMongo
name|commitMongo
init|=
operator|(
name|CommitMongo
operator|)
name|dbCursor
operator|.
name|next
argument_list|()
decl_stmt|;
name|revisions
operator|.
name|put
argument_list|(
name|commitMongo
operator|.
name|getRevisionId
argument_list|()
argument_list|,
name|commitMongo
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|CommitMongo
argument_list|>
name|validCommits
init|=
operator|new
name|LinkedList
argument_list|<
name|CommitMongo
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|revisions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|validCommits
return|;
block|}
name|Long
name|currentRevision
init|=
name|MongoUtil
operator|.
name|toMongoRepresentation
argument_list|(
name|toRevisionId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|revisions
operator|.
name|containsKey
argument_list|(
name|currentRevision
argument_list|)
condition|)
block|{
name|currentRevision
operator|=
name|Collections
operator|.
name|max
argument_list|(
name|revisions
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|CommitMongo
name|commitMongo
init|=
name|revisions
operator|.
name|get
argument_list|(
name|currentRevision
argument_list|)
decl_stmt|;
name|validCommits
operator|.
name|add
argument_list|(
name|commitMongo
argument_list|)
expr_stmt|;
name|Long
name|baseRevision
init|=
name|commitMongo
operator|.
name|getBaseRevisionId
argument_list|()
decl_stmt|;
name|Long
name|fromRevision
init|=
name|MongoUtil
operator|.
name|toMongoRepresentation
argument_list|(
name|fromRevisionId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|currentRevision
operator|==
literal|0L
operator|)
operator|||
operator|(
name|baseRevision
operator|==
literal|null
operator|||
name|baseRevision
operator|<
name|fromRevision
operator|)
condition|)
block|{
break|break;
block|}
name|currentRevision
operator|=
name|baseRevision
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Found list of valid revisions for max revision %s: %s"
argument_list|,
name|toRevisionId
argument_list|,
name|validCommits
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|validCommits
return|;
block|}
specifier|private
name|DBCursor
name|fetchListOfValidCommits
parameter_list|()
block|{
name|DBCollection
name|commitCollection
init|=
name|mongoConnection
operator|.
name|getCommitCollection
argument_list|()
decl_stmt|;
name|DBObject
name|query
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
name|CommitMongo
operator|.
name|KEY_FAILED
argument_list|)
operator|.
name|notEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
operator|.
name|and
argument_list|(
name|CommitMongo
operator|.
name|KEY_REVISION_ID
argument_list|)
operator|.
name|lessThanEquals
argument_list|(
name|MongoUtil
operator|.
name|toMongoRepresentation
argument_list|(
name|toRevisionId
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Executing query: %s"
argument_list|,
name|query
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|commitCollection
operator|.
name|find
argument_list|(
name|query
argument_list|)
operator|.
name|limit
argument_list|(
name|maxEntries
argument_list|)
return|;
block|}
block|}
end_class

end_unit

