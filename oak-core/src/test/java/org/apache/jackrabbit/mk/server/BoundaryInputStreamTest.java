begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|server
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_class
specifier|public
class|class
name|BoundaryInputStreamTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|BOUNDARY
init|=
literal|"------ClientFormBoundaryHB5WJrSAPZjfwtqt--"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
comment|/**      * Create a very small boundary input stream, where the boundary will be      * split between two reads.      */
specifier|public
name|void
name|testSmallReads
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|content
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|RANDOM
operator|.
name|nextBytes
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"\r\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|BOUNDARY
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|noise
init|=
operator|new
name|byte
index|[
name|content
operator|.
name|length
index|]
decl_stmt|;
name|RANDOM
operator|.
name|nextBytes
argument_list|(
name|noise
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|noise
argument_list|)
expr_stmt|;
name|BoundaryInputStream
name|in
init|=
operator|new
name|BoundaryInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
name|BOUNDARY
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|8192
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|byte
index|[]
name|result
init|=
name|out
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|content
operator|.
name|length
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|content
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

