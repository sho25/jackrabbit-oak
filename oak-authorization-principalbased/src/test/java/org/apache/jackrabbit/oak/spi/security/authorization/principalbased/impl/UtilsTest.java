begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ImportBehavior
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|UtilsTest
implements|implements
name|Constants
block|{
specifier|private
specifier|static
specifier|final
name|Principal
name|PRINCIPAL
init|=
operator|new
name|PrincipalImpl
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INVALID_PRIVILEGE_NAME
init|=
literal|"invalid"
decl_stmt|;
specifier|private
specifier|static
name|Tree
name|mockTree
parameter_list|(
name|boolean
name|exists
parameter_list|,
annotation|@
name|NotNull
name|String
name|name
parameter_list|,
annotation|@
name|Nullable
name|String
name|type
parameter_list|)
block|{
return|return
name|MockUtility
operator|.
name|mockTree
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|exists
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Filter
name|mockFilter
parameter_list|(
name|boolean
name|canHandle
parameter_list|)
block|{
name|Filter
name|filter
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Filter
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|filter
operator|.
name|canHandle
argument_list|(
name|any
argument_list|(
name|Set
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|canHandle
argument_list|)
expr_stmt|;
return|return
name|filter
return|;
block|}
specifier|private
specifier|static
name|PrivilegeManager
name|mockPrivilegeManager
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PrivilegeManager
name|privilegeManager
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PrivilegeManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
operator|(
name|Answer
argument_list|<
name|Privilege
argument_list|>
operator|)
name|invocationOnMock
lambda|->
block|{
name|Privilege
name|p
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Privilege
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|invocationOnMock
operator|.
name|getArgument
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|INVALID_PRIVILEGE_NAME
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|AccessControlException
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|privilegeManager
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsPrincipalPolicyTreeNotExists
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|Utils
operator|.
name|isPrincipalPolicyTree
argument_list|(
name|mockTree
argument_list|(
literal|false
argument_list|,
name|NT_REP_PRINCIPAL_POLICY
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsPrincipalPolicyTreeWrongName
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|Utils
operator|.
name|isPrincipalPolicyTree
argument_list|(
name|mockTree
argument_list|(
literal|true
argument_list|,
name|REP_RESTRICTIONS
argument_list|,
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsPrincipalPolicyTreeWrongType
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|Utils
operator|.
name|isPrincipalPolicyTree
argument_list|(
name|mockTree
argument_list|(
literal|true
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|,
name|NT_REP_RESTRICTIONS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsPrincipalPolicyTreeMissingType
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|Utils
operator|.
name|isPrincipalPolicyTree
argument_list|(
name|mockTree
argument_list|(
literal|true
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsPrincipalPolicyTreeWrongNameType
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|Utils
operator|.
name|isPrincipalPolicyTree
argument_list|(
name|mockTree
argument_list|(
literal|true
argument_list|,
name|REP_RESTRICTIONS
argument_list|,
name|NT_REP_RESTRICTIONS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsPrincipalPolicyTree
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Utils
operator|.
name|isPrincipalPolicyTree
argument_list|(
name|mockTree
argument_list|(
literal|true
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|,
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCanHandleNullName
parameter_list|()
throws|throws
name|Exception
block|{
name|Utils
operator|.
name|canHandle
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|Principal
operator|.
name|class
argument_list|)
argument_list|,
name|mockFilter
argument_list|(
literal|true
argument_list|)
argument_list|,
name|ImportBehavior
operator|.
name|ABORT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCanHandleEmptyName
parameter_list|()
throws|throws
name|Exception
block|{
name|Utils
operator|.
name|canHandle
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|""
argument_list|)
argument_list|,
name|mockFilter
argument_list|(
literal|true
argument_list|)
argument_list|,
name|ImportBehavior
operator|.
name|ABORT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCanHandleUnsupportedPrincipalAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|Utils
operator|.
name|canHandle
argument_list|(
name|PRINCIPAL
argument_list|,
name|mockFilter
argument_list|(
literal|false
argument_list|)
argument_list|,
name|ImportBehavior
operator|.
name|ABORT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanHandleUnsupportedPrincipalIgnore
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|Utils
operator|.
name|canHandle
argument_list|(
name|PRINCIPAL
argument_list|,
name|mockFilter
argument_list|(
literal|false
argument_list|)
argument_list|,
name|ImportBehavior
operator|.
name|IGNORE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanHandleUnsupportedPrincipalBestEffort
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|Utils
operator|.
name|canHandle
argument_list|(
name|PRINCIPAL
argument_list|,
name|mockFilter
argument_list|(
literal|false
argument_list|)
argument_list|,
name|ImportBehavior
operator|.
name|BESTEFFORT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCanHandleIllegalImportBehavior
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|Utils
operator|.
name|canHandle
argument_list|(
name|PRINCIPAL
argument_list|,
name|mockFilter
argument_list|(
literal|true
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanHandle
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|behavior
range|:
operator|new
name|int
index|[]
block|{
name|ImportBehavior
operator|.
name|ABORT
block|,
name|ImportBehavior
operator|.
name|BESTEFFORT
block|,
name|ImportBehavior
operator|.
name|IGNORE
block|}
control|)
block|{
name|assertTrue
argument_list|(
name|Utils
operator|.
name|canHandle
argument_list|(
name|PRINCIPAL
argument_list|,
name|mockFilter
argument_list|(
literal|true
argument_list|)
argument_list|,
name|behavior
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrivilegesFromNamesEmptyNames
parameter_list|()
block|{
name|assertArrayEquals
argument_list|(
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|,
name|Utils
operator|.
name|privilegesFromOakNames
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
name|Mockito
operator|.
name|mock
argument_list|(
name|PrivilegeManager
operator|.
name|class
argument_list|)
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrivilegesFromNamesInvalidName
parameter_list|()
throws|throws
name|Exception
block|{
name|assertArrayEquals
argument_list|(
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|,
name|Utils
operator|.
name|privilegesFromOakNames
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|INVALID_PRIVILEGE_NAME
argument_list|)
argument_list|,
name|mockPrivilegeManager
argument_list|()
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrivilegesFromNamesRemapped
parameter_list|()
throws|throws
name|Exception
block|{
name|NamePathMapper
name|mapper
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NamePathMapper
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mapper
operator|.
name|getJcrName
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|Utils
operator|.
name|privilegesFromOakNames
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|mockPrivilegeManager
argument_list|()
argument_list|,
name|mapper
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|privs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Privilege
name|p
range|:
name|privs
control|)
block|{
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

