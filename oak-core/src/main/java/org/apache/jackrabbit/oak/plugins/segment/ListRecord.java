begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkElementIndex
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
class|class
name|ListRecord
extends|extends
name|Record
block|{
specifier|static
specifier|final
name|int
name|LEVEL_SIZE
init|=
name|Segment
operator|.
name|SEGMENT_REFERENCE_LIMIT
decl_stmt|;
specifier|private
specifier|final
name|int
name|size
decl_stmt|;
specifier|private
specifier|final
name|int
name|bucketSize
decl_stmt|;
name|ListRecord
parameter_list|(
name|Segment
name|segment
parameter_list|,
name|RecordId
name|id
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|segment
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|size
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|int
name|bs
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|bs
operator|*
name|LEVEL_SIZE
operator|<
name|size
condition|)
block|{
name|bs
operator|*=
name|LEVEL_SIZE
expr_stmt|;
block|}
name|this
operator|.
name|bucketSize
operator|=
name|bs
expr_stmt|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
specifier|public
name|RecordId
name|getEntry
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|checkElementIndex
argument_list|(
name|index
argument_list|,
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|getRecordId
argument_list|()
return|;
block|}
else|else
block|{
name|int
name|bucketIndex
init|=
name|index
operator|/
name|bucketSize
decl_stmt|;
name|int
name|bucketOffset
init|=
name|index
operator|%
name|bucketSize
decl_stmt|;
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|RecordId
name|bucketId
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|0
argument_list|,
name|bucketIndex
argument_list|)
argument_list|)
decl_stmt|;
name|ListRecord
name|bucket
init|=
operator|new
name|ListRecord
argument_list|(
name|segment
argument_list|,
name|bucketId
argument_list|,
name|bucketSize
argument_list|)
decl_stmt|;
return|return
name|bucket
operator|.
name|getEntry
argument_list|(
name|bucketOffset
argument_list|)
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|RecordId
argument_list|>
name|getEntries
parameter_list|()
block|{
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
name|emptyList
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|singletonList
argument_list|(
name|getRecordId
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|RecordId
argument_list|>
name|list
init|=
name|newArrayListWithCapacity
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|getOffset
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|+=
name|bucketSize
control|)
block|{
name|RecordId
name|id
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucketSize
operator|==
literal|1
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ListRecord
name|bucket
init|=
operator|new
name|ListRecord
argument_list|(
name|segment
argument_list|,
name|id
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|bucketSize
argument_list|,
name|size
operator|-
name|offset
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|bucket
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|offset
operator|+=
name|Segment
operator|.
name|RECORD_ID_BYTES
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
block|}
end_class

end_unit

