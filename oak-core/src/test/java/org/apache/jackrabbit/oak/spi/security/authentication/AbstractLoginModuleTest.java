begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|callback
operator|.
name|CredentialsCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * AbstractLoginModuleTest...  */
end_comment

begin_class
specifier|public
class|class
name|AbstractLoginModuleTest
block|{
specifier|private
name|AbstractLoginModule
name|initLoginModule
parameter_list|(
name|Class
name|supportedCredentials
parameter_list|,
name|Map
name|sharedState
parameter_list|)
block|{
name|AbstractLoginModule
name|lm
init|=
operator|new
name|TestLoginModule
argument_list|(
name|supportedCredentials
argument_list|)
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
literal|null
argument_list|,
name|sharedState
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|lm
return|;
block|}
specifier|private
name|AbstractLoginModule
name|initLoginModule
parameter_list|(
name|Class
name|supportedCredentials
parameter_list|,
name|CallbackHandler
name|cbh
parameter_list|)
block|{
name|AbstractLoginModule
name|lm
init|=
operator|new
name|TestLoginModule
argument_list|(
name|supportedCredentials
argument_list|)
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
name|cbh
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|lm
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSharedLoginName
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sharedState
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|sharedState
operator|.
name|put
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_LOGIN_NAME
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|AbstractLoginModule
name|lm
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|lm
operator|.
name|getSharedLoginName
argument_list|()
argument_list|)
expr_stmt|;
name|sharedState
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lm
operator|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getSharedLoginName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSharedCredentials
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sharedState
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|sharedState
operator|.
name|put
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
operator|new
name|TestCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractLoginModule
name|lm
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|getSharedCredentials
argument_list|()
operator|instanceof
name|TestCredentials
argument_list|)
expr_stmt|;
name|sharedState
operator|.
name|put
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
operator|new
name|SimpleCredentials
argument_list|(
literal|"test"
argument_list|,
literal|"test"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|lm
operator|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|getSharedCredentials
argument_list|()
operator|instanceof
name|SimpleCredentials
argument_list|)
expr_stmt|;
name|lm
operator|=
name|initLoginModule
argument_list|(
name|SimpleCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|getSharedCredentials
argument_list|()
operator|instanceof
name|SimpleCredentials
argument_list|)
expr_stmt|;
name|sharedState
operator|.
name|put
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
literal|"no credentials object"
argument_list|)
expr_stmt|;
name|lm
operator|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getSharedCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|sharedState
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lm
operator|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getSharedCredentials
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetCredentialsFromSharedState
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Credentials
argument_list|>
name|sharedState
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Credentials
argument_list|>
argument_list|()
decl_stmt|;
name|sharedState
operator|.
name|put
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
operator|new
name|TestCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractLoginModule
name|lm
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|getCredentials
argument_list|()
operator|instanceof
name|TestCredentials
argument_list|)
expr_stmt|;
name|SimpleCredentials
name|sc
init|=
operator|new
name|SimpleCredentials
argument_list|(
literal|"test"
argument_list|,
literal|"test"
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|sharedState
operator|.
name|put
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
name|sc
argument_list|)
expr_stmt|;
name|lm
operator|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|sharedState
operator|.
name|put
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
name|sc
argument_list|)
expr_stmt|;
name|lm
operator|=
name|initLoginModule
argument_list|(
name|SimpleCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|getCredentials
argument_list|()
operator|instanceof
name|SimpleCredentials
argument_list|)
expr_stmt|;
name|sharedState
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lm
operator|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetCredentialsFromCallbackHandler
parameter_list|()
block|{
name|CallbackHandler
name|cbh
init|=
operator|new
name|CallbackHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
block|{
for|for
control|(
name|Callback
name|cb
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|cb
operator|instanceof
name|CredentialsCallback
condition|)
block|{
operator|(
operator|(
name|CredentialsCallback
operator|)
name|cb
operator|)
operator|.
name|setCredentials
argument_list|(
operator|new
name|TestCredentials
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|AbstractLoginModule
name|lm
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|cbh
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|getCredentials
argument_list|()
operator|instanceof
name|TestCredentials
argument_list|)
expr_stmt|;
name|lm
operator|=
name|initLoginModule
argument_list|(
name|SimpleCredentials
operator|.
name|class
argument_list|,
name|cbh
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//--------------------------------------------------------------------------
specifier|private
specifier|final
class|class
name|TestCredentials
implements|implements
name|Credentials
block|{}
specifier|private
specifier|final
class|class
name|TestLoginModule
extends|extends
name|AbstractLoginModule
block|{
specifier|private
name|Class
name|supportedCredentialsClass
decl_stmt|;
specifier|private
name|TestLoginModule
parameter_list|(
name|Class
name|supportedCredentialsClass
parameter_list|)
block|{
name|this
operator|.
name|supportedCredentialsClass
operator|=
name|supportedCredentialsClass
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|Class
argument_list|>
name|getSupportedCredentials
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|supportedCredentialsClass
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|login
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|commit
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

