begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
operator|.
name|JsonValue
operator|.
name|JsonArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
operator|.
name|JsonValue
operator|.
name|JsonAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
operator|.
name|JsonValue
operator|.
name|JsonObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_comment
comment|/**  * Utility class for parsing JSON objects and arrays into  * {@link JsonObject}s and {@link JsonArray}s, respectively.  *  * @see LevelOrderJsonParser  */
end_comment

begin_class
specifier|public
class|class
name|FullJsonParser
block|{
specifier|private
name|FullJsonParser
parameter_list|()
block|{ }
comment|/**      * Parse a JSON object from {@code tokenizer}      * @param tokenizer      * @return a {@code JsonObject}      * @throws ParseException      */
specifier|public
specifier|static
name|JsonObject
name|parseObject
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|ObjectHandler
name|objectHandler
init|=
operator|new
name|ObjectHandler
argument_list|()
decl_stmt|;
operator|new
name|JsonParser
argument_list|(
name|objectHandler
argument_list|)
operator|.
name|parseObject
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
return|return
name|objectHandler
operator|.
name|getObject
argument_list|()
return|;
block|}
comment|/**      * Parse a JSON array from {@code tokenizer}      * @param tokenizer      * @return a {@code JsonArray}      * @throws ParseException      */
specifier|public
specifier|static
name|JsonArray
name|parseArray
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|ArrayHandler
name|arrayHandler
init|=
operator|new
name|ArrayHandler
argument_list|()
decl_stmt|;
operator|new
name|JsonParser
argument_list|(
name|arrayHandler
argument_list|)
operator|.
name|parseArray
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
return|return
name|arrayHandler
operator|.
name|getArray
argument_list|()
return|;
block|}
comment|/**      * This implementation of a {@code JsonHandler} builds up a {@code JsonObject}      * by recursively descending into its constituents.        */
specifier|public
specifier|static
class|class
name|ObjectHandler
extends|extends
name|JsonHandler
block|{
specifier|private
specifier|final
name|JsonObject
name|object
init|=
operator|new
name|JsonObject
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|JsonValue
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|atom
parameter_list|(
name|Token
name|key
parameter_list|,
name|Token
name|value
parameter_list|)
block|{
name|object
operator|.
name|put
argument_list|(
name|key
operator|.
name|text
argument_list|()
argument_list|,
operator|new
name|JsonAtom
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|object
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|Token
name|key
parameter_list|,
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|object
operator|.
name|put
argument_list|(
name|key
operator|.
name|text
argument_list|()
argument_list|,
name|parseObject
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|array
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|Token
name|key
parameter_list|,
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|object
operator|.
name|put
argument_list|(
name|key
operator|.
name|text
argument_list|()
argument_list|,
name|parseArray
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JsonObject
name|getObject
parameter_list|()
block|{
return|return
name|object
return|;
block|}
block|}
comment|/**      * This implementation of a {@code JsonHandler} builds up a {@code JsonArray}      * by recursively descending into its constituents.      */
specifier|public
specifier|static
class|class
name|ArrayHandler
extends|extends
name|JsonHandler
block|{
specifier|private
specifier|final
name|JsonArray
name|array
init|=
operator|new
name|JsonArray
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|JsonValue
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|atom
parameter_list|(
name|Token
name|key
parameter_list|,
name|Token
name|value
parameter_list|)
block|{
name|array
operator|.
name|add
argument_list|(
operator|new
name|JsonAtom
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|object
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|Token
name|key
parameter_list|,
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|array
operator|.
name|add
argument_list|(
name|parseObject
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|array
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|Token
name|key
parameter_list|,
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|array
operator|.
name|add
argument_list|(
name|parseArray
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JsonArray
name|getArray
parameter_list|()
block|{
return|return
name|array
return|;
block|}
block|}
block|}
end_class

end_unit

