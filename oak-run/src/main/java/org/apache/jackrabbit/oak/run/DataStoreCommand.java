begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closeables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|LineIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|filefilter
operator|.
name|FileFilterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
operator|.
name|ExecutorCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|io
operator|.
name|BurnOnCloseFileIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|sort
operator|.
name|EscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobReferenceRetriever
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|MarkSweepGarbageCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|ReferenceCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentBlobReferenceRetriever
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|BlobStoreOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|CommonOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|NodeStoreFixtureProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|commons
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|commons
operator|.
name|LoggingInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentBlobReferenceRetriever
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|ReadOnlyFileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|cluster
operator|.
name|ClusterRepositoryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StandardSystemProperty
operator|.
name|FILE_SEPARATOR
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
operator|.
name|createStarted
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|sort
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|writeAsLine
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|writeStrings
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|sort
operator|.
name|EscapeUtils
operator|.
name|escapeLineBreak
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|BlobStoreOptions
operator|.
name|Type
operator|.
name|AZURE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|BlobStoreOptions
operator|.
name|Type
operator|.
name|FAKE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|BlobStoreOptions
operator|.
name|Type
operator|.
name|FDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|BlobStoreOptions
operator|.
name|Type
operator|.
name|S3
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|getService
import|;
end_import

begin_comment
comment|/**  * Command to check data store consistency and also optionally retrieve ids  * and references.  */
end_comment

begin_class
specifier|public
class|class
name|DataStoreCommand
implements|implements
name|Command
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DataStoreCommand
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"datastore"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|summary
init|=
literal|"Provides DataStore management operations"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELIM
init|=
literal|","
decl_stmt|;
specifier|private
name|Options
name|opts
decl_stmt|;
specifier|private
name|DataStoreOptions
name|dataStoreOpts
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|String
argument_list|>
name|idComparator
init|=
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
return|return
name|s1
operator|.
name|split
argument_list|(
name|DELIM
argument_list|)
index|[
literal|0
index|]
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|split
argument_list|(
name|DELIM
argument_list|)
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|OptionParser
name|parser
init|=
operator|new
name|OptionParser
argument_list|()
decl_stmt|;
name|opts
operator|=
operator|new
name|Options
argument_list|()
expr_stmt|;
name|opts
operator|.
name|setCommandName
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|opts
operator|.
name|setSummary
argument_list|(
name|summary
argument_list|)
expr_stmt|;
name|opts
operator|.
name|setConnectionString
argument_list|(
name|CommonOptions
operator|.
name|DEFAULT_CONNECTION_STRING
argument_list|)
expr_stmt|;
name|opts
operator|.
name|registerOptionsFactory
argument_list|(
name|DataStoreOptions
operator|.
name|FACTORY
argument_list|)
expr_stmt|;
name|opts
operator|.
name|parseAndConfigure
argument_list|(
name|parser
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|dataStoreOpts
operator|=
name|opts
operator|.
name|getOptionBean
argument_list|(
name|DataStoreOptions
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//Clean up before setting up NodeStore as the temp
comment|//directory might be used by NodeStore for cache stuff like persistentCache
name|setupDirectories
argument_list|(
name|dataStoreOpts
argument_list|)
expr_stmt|;
name|setupLogging
argument_list|(
name|dataStoreOpts
argument_list|)
expr_stmt|;
name|logCliArgs
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
init|(
name|Closer
name|closer
init|=
name|Utils
operator|.
name|createCloserWithShutdownHook
argument_list|()
init|)
block|{
name|opts
operator|.
name|setTempDirectory
argument_list|(
name|dataStoreOpts
operator|.
name|getWorkDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|NodeStoreFixture
name|fixture
init|=
name|NodeStoreFixtureProvider
operator|.
name|create
argument_list|(
name|opts
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|fixture
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|checkParameters
argument_list|(
name|dataStoreOpts
argument_list|,
name|opts
argument_list|,
name|fixture
argument_list|,
name|parser
argument_list|)
condition|)
block|{
return|return;
block|}
name|execute
argument_list|(
name|fixture
argument_list|,
name|dataStoreOpts
argument_list|,
name|opts
argument_list|,
name|closer
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error occurred while performing datastore operation"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownLogging
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|checkParameters
parameter_list|(
name|DataStoreOptions
name|dataStoreOpts
parameter_list|,
name|Options
name|opts
parameter_list|,
name|NodeStoreFixture
name|fixture
parameter_list|,
name|OptionParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|dataStoreOpts
operator|.
name|anyActionSelected
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No actions specified"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|fixture
operator|.
name|getStore
argument_list|()
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No NodeStore specified"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|opts
operator|.
name|getCommonOpts
argument_list|()
operator|.
name|isDocument
argument_list|()
operator|&&
name|fixture
operator|.
name|getBlobStore
argument_list|()
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No BlobStore specified"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|execute
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|,
name|DataStoreOptions
name|dataStoreOpts
parameter_list|,
name|Options
name|opts
parameter_list|,
name|Closer
name|closer
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|BlobStoreOptions
name|optionBean
init|=
name|opts
operator|.
name|getOptionBean
argument_list|(
name|BlobStoreOptions
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
init|(
name|Closer
name|metricsCloser
init|=
name|Utils
operator|.
name|createCloserWithShutdownHook
argument_list|()
init|)
block|{
name|MetricsExporterFixture
name|metricsExporterFixture
init|=
name|MetricsExporterFixtureProvider
operator|.
name|create
argument_list|(
name|dataStoreOpts
argument_list|,
name|fixture
operator|.
name|getWhiteboard
argument_list|()
argument_list|)
decl_stmt|;
name|metricsCloser
operator|.
name|register
argument_list|(
name|metricsExporterFixture
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataStoreOpts
operator|.
name|dumpRefs
argument_list|()
condition|)
block|{
specifier|final
name|File
name|referencesTemp
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"traverseref"
argument_list|,
literal|null
argument_list|,
operator|new
name|File
argument_list|(
name|opts
operator|.
name|getTempDirectory
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|BufferedWriter
name|writer
init|=
name|Files
operator|.
name|newWriter
argument_list|(
name|referencesTemp
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|boolean
name|threw
init|=
literal|true
decl_stmt|;
try|try
block|{
name|BlobReferenceRetriever
name|retriever
init|=
name|getRetriever
argument_list|(
name|fixture
argument_list|,
name|dataStoreOpts
argument_list|,
name|opts
argument_list|)
decl_stmt|;
name|retriever
operator|.
name|collectReferences
argument_list|(
operator|new
name|ReferenceCollector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addReference
parameter_list|(
name|String
name|blobId
parameter_list|,
name|String
name|nodeId
parameter_list|)
block|{
try|try
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|idIter
init|=
operator|(
operator|(
name|GarbageCollectableBlobStore
operator|)
name|fixture
operator|.
name|getBlobStore
argument_list|()
operator|)
operator|.
name|resolveChunks
argument_list|(
name|blobId
argument_list|)
decl_stmt|;
while|while
condition|(
name|idIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|id
init|=
name|idIter
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|Joiner
name|delimJoiner
init|=
name|Joiner
operator|.
name|on
argument_list|(
name|DELIM
argument_list|)
operator|.
name|skipNulls
argument_list|()
decl_stmt|;
comment|// If --verbose is present, convert blob ID to a backend friendly format and
comment|// concat the path that has the ref. Otherwise simply add the ID to the o/p file
comment|// as it is.
name|String
name|line
init|=
name|dataStoreOpts
operator|.
name|isVerbose
argument_list|()
condition|?
name|VerboseIdLogger
operator|.
name|encodeId
argument_list|(
name|delimJoiner
operator|.
name|join
argument_list|(
name|id
argument_list|,
name|escapeLineBreak
argument_list|(
name|nodeId
argument_list|)
argument_list|)
argument_list|,
name|optionBean
operator|.
name|getBlobStoreType
argument_list|()
argument_list|)
else|:
name|id
decl_stmt|;
name|writeAsLine
argument_list|(
name|writer
argument_list|,
name|line
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error in retrieving references"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|threw
operator|=
literal|false
expr_stmt|;
name|sort
argument_list|(
name|referencesTemp
argument_list|,
name|idComparator
argument_list|)
expr_stmt|;
name|File
name|parent
init|=
operator|new
name|File
argument_list|(
name|dataStoreOpts
operator|.
name|getOutDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"dump"
argument_list|)
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|File
name|references
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
literal|"dump-ref-"
operator|+
name|startTime
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|referencesTemp
argument_list|,
name|references
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Closeables
operator|.
name|close
argument_list|(
name|writer
argument_list|,
name|threw
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|dataStoreOpts
operator|.
name|dumpIds
argument_list|()
condition|)
block|{
specifier|final
name|File
name|blobidsTemp
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"blobidstemp"
argument_list|,
literal|null
argument_list|,
operator|new
name|File
argument_list|(
name|opts
operator|.
name|getTempDirectory
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|retrieveBlobIds
argument_list|(
operator|(
name|GarbageCollectableBlobStore
operator|)
name|fixture
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|blobidsTemp
argument_list|)
expr_stmt|;
name|File
name|parent
init|=
operator|new
name|File
argument_list|(
name|dataStoreOpts
operator|.
name|getOutDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"dump"
argument_list|)
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|File
name|ids
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
literal|"dump-id-"
operator|+
name|startTime
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataStoreOpts
operator|.
name|isVerbose
argument_list|()
condition|)
block|{
name|verboseIds
argument_list|(
name|optionBean
argument_list|,
name|blobidsTemp
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|blobidsTemp
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|MarkSweepGarbageCollector
name|collector
init|=
name|getCollector
argument_list|(
name|fixture
argument_list|,
name|dataStoreOpts
argument_list|,
name|opts
argument_list|,
name|closer
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataStoreOpts
operator|.
name|checkConsistency
argument_list|()
condition|)
block|{
name|long
name|missing
init|=
name|collector
operator|.
name|checkConsistency
argument_list|()
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Found {} missing blobs"
argument_list|,
name|missing
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataStoreOpts
operator|.
name|isVerbose
argument_list|()
condition|)
block|{
operator|new
name|VerboseIdLogger
argument_list|(
name|opts
argument_list|)
operator|.
name|log
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|dataStoreOpts
operator|.
name|collectGarbage
argument_list|()
condition|)
block|{
name|collector
operator|.
name|collectGarbage
argument_list|(
name|dataStoreOpts
operator|.
name|markOnly
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|setupDirectories
parameter_list|(
name|DataStoreOptions
name|opts
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|opts
operator|.
name|getOutDir
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|cleanDirectory
argument_list|(
name|opts
operator|.
name|getOutDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FileUtils
operator|.
name|cleanDirectory
argument_list|(
name|opts
operator|.
name|getWorkDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|MarkSweepGarbageCollector
name|getCollector
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|,
name|DataStoreOptions
name|dataStoreOpts
parameter_list|,
name|Options
name|opts
parameter_list|,
name|Closer
name|closer
parameter_list|)
throws|throws
name|IOException
block|{
name|BlobReferenceRetriever
name|retriever
init|=
name|getRetriever
argument_list|(
name|fixture
argument_list|,
name|dataStoreOpts
argument_list|,
name|opts
argument_list|)
decl_stmt|;
name|ExecutorService
name|service
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|ExecutorCloser
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|repositoryId
init|=
name|ClusterRepositoryInfo
operator|.
name|getId
argument_list|(
name|fixture
operator|.
name|getStore
argument_list|()
argument_list|)
decl_stmt|;
name|checkNotNull
argument_list|(
name|repositoryId
argument_list|)
expr_stmt|;
name|MarkSweepGarbageCollector
name|collector
init|=
operator|new
name|MarkSweepGarbageCollector
argument_list|(
name|retriever
argument_list|,
operator|(
name|GarbageCollectableBlobStore
operator|)
name|fixture
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|service
argument_list|,
name|dataStoreOpts
operator|.
name|getOutDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|dataStoreOpts
operator|.
name|getBatchCount
argument_list|()
argument_list|,
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|dataStoreOpts
operator|.
name|getBlobGcMaxAgeInSecs
argument_list|()
argument_list|)
argument_list|,
name|dataStoreOpts
operator|.
name|checkConsistencyAfterGC
argument_list|()
argument_list|,
name|repositoryId
argument_list|,
name|fixture
operator|.
name|getWhiteboard
argument_list|()
argument_list|,
name|getService
argument_list|(
name|fixture
operator|.
name|getWhiteboard
argument_list|()
argument_list|,
name|StatisticsProvider
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|collector
operator|.
name|setTraceOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|collector
return|;
block|}
specifier|private
specifier|static
name|BlobReferenceRetriever
name|getRetriever
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|,
name|DataStoreOptions
name|dataStoreOpts
parameter_list|,
name|Options
name|opts
parameter_list|)
block|{
name|BlobReferenceRetriever
name|retriever
decl_stmt|;
if|if
condition|(
name|opts
operator|.
name|getCommonOpts
argument_list|()
operator|.
name|isDocument
argument_list|()
operator|&&
operator|!
name|dataStoreOpts
operator|.
name|hasVerboseRootPaths
argument_list|()
condition|)
block|{
name|retriever
operator|=
operator|new
name|DocumentBlobReferenceRetriever
argument_list|(
operator|(
name|DocumentNodeStore
operator|)
name|fixture
operator|.
name|getStore
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|dataStoreOpts
operator|.
name|isVerbose
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|rootPathList
init|=
name|dataStoreOpts
operator|.
name|getVerboseRootPaths
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|roothPathInclusionRegex
init|=
name|dataStoreOpts
operator|.
name|getVerboseInclusionRegex
argument_list|()
decl_stmt|;
name|retriever
operator|=
operator|new
name|NodeTraverserReferenceRetriever
argument_list|(
name|fixture
operator|.
name|getStore
argument_list|()
argument_list|,
name|rootPathList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|rootPathList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|roothPathInclusionRegex
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|roothPathInclusionRegex
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ReadOnlyFileStore
name|fileStore
init|=
name|getService
argument_list|(
name|fixture
operator|.
name|getWhiteboard
argument_list|()
argument_list|,
name|ReadOnlyFileStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|retriever
operator|=
operator|new
name|SegmentBlobReferenceRetriever
argument_list|(
name|fileStore
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|retriever
return|;
block|}
specifier|private
specifier|static
name|void
name|retrieveBlobIds
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|File
name|blob
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting dump of blob ids"
argument_list|)
expr_stmt|;
name|Stopwatch
name|watch
init|=
name|createStarted
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|blobIter
init|=
name|blobStore
operator|.
name|getAllChunkIds
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|writeStrings
argument_list|(
name|blobIter
argument_list|,
name|blob
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|sort
argument_list|(
name|blob
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|count
operator|+
literal|" blob ids found"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Finished in "
operator|+
name|watch
operator|.
name|elapsed
argument_list|(
name|SECONDS
argument_list|)
operator|+
literal|" seconds"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|verboseIds
parameter_list|(
name|BlobStoreOptions
name|blobOpts
parameter_list|,
name|File
name|readFile
parameter_list|,
name|File
name|writeFile
parameter_list|)
throws|throws
name|IOException
block|{
name|LineIterator
name|idIterator
init|=
name|FileUtils
operator|.
name|lineIterator
argument_list|(
name|readFile
argument_list|,
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|BurnOnCloseFileIterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
operator|new
name|BurnOnCloseFileIterator
argument_list|<
name|String
argument_list|>
argument_list|(
name|idIterator
argument_list|,
name|readFile
argument_list|,
operator|(
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|input
lambda|->
name|VerboseIdLogger
operator|.
name|encodeId
argument_list|(
name|input
argument_list|,
name|blobOpts
operator|.
name|getBlobStoreType
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|writeStrings
argument_list|(
name|iterator
argument_list|,
name|writeFile
argument_list|,
literal|true
argument_list|,
name|log
argument_list|,
literal|"Transformed to verbose ids - "
argument_list|)
block|;         }
block|}
specifier|protected
specifier|static
name|void
name|setupLogging
parameter_list|(
name|DataStoreOptions
name|dataStoreOpts
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|LoggingInitializer
argument_list|(
name|dataStoreOpts
operator|.
name|getWorkDir
argument_list|()
argument_list|,
name|NAME
argument_list|,
name|dataStoreOpts
operator|.
name|isResetLoggingConfig
argument_list|()
argument_list|)
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|shutdownLogging
parameter_list|()
block|{
name|LoggingInitializer
operator|.
name|shutdownLogging
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|logCliArgs
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|String
index|[]
name|filteredArgs
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|args
argument_list|)
operator|.
name|filter
argument_list|(
name|str
lambda|->
operator|!
name|str
operator|.
name|startsWith
argument_list|(
literal|"az:"
argument_list|)
operator|&&
operator|!
name|str
operator|.
name|startsWith
argument_list|(
literal|"mongodb:"
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
name|String
index|[]
operator|::
operator|new
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Command line arguments used for datastore command [{}]"
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|' '
argument_list|)
operator|.
name|join
argument_list|(
name|filteredArgs
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|inputArgs
init|=
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
operator|.
name|getInputArguments
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|inputArgs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"System properties and vm options passed {}"
argument_list|,
name|inputArgs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * {@link BlobReferenceRetriever} instance which iterates over the whole node store to find      * blobs being referred. Useful when path of those blobs needed and the underlying {@link NodeStore}      * native implementation does not provide that.      */
specifier|static
class|class
name|NodeTraverserReferenceRetriever
implements|implements
name|BlobReferenceRetriever
block|{
specifier|private
specifier|final
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|paths
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|inclusionRegex
decl_stmt|;
specifier|public
name|NodeTraverserReferenceRetriever
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|)
block|{
name|this
argument_list|(
name|nodeStore
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NodeTraverserReferenceRetriever
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|,
name|String
index|[]
name|paths
parameter_list|,
name|String
index|[]
name|inclusionRegex
parameter_list|)
block|{
name|this
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|this
operator|.
name|paths
operator|=
name|paths
expr_stmt|;
name|this
operator|.
name|inclusionRegex
operator|=
name|inclusionRegex
expr_stmt|;
block|}
specifier|private
name|void
name|binaryProperties
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|String
name|path
parameter_list|,
name|ReferenceCollector
name|collector
parameter_list|)
block|{
for|for
control|(
name|PropertyState
name|p
range|:
name|state
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|propPath
init|=
name|path
decl_stmt|;
comment|//PathUtils.concat(path, p.getName());
if|if
condition|(
name|p
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BINARY
condition|)
block|{
name|String
name|blobId
init|=
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
operator|.
name|getContentIdentity
argument_list|()
decl_stmt|;
if|if
condition|(
name|blobId
operator|!=
literal|null
operator|&&
operator|!
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
operator|.
name|isInlined
argument_list|()
condition|)
block|{
name|collector
operator|.
name|addReference
argument_list|(
name|blobId
argument_list|,
name|propPath
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BINARIES
operator|&&
name|p
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|Blob
argument_list|>
name|iterator
init|=
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARIES
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Blob
name|blob
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|blobId
init|=
name|blob
operator|.
name|getContentIdentity
argument_list|()
decl_stmt|;
if|if
condition|(
name|blobId
operator|!=
literal|null
operator|&&
operator|!
name|blob
operator|.
name|isInlined
argument_list|()
condition|)
block|{
name|collector
operator|.
name|addReference
argument_list|(
name|blobId
argument_list|,
name|propPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|traverseChildren
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|String
name|path
parameter_list|,
name|ReferenceCollector
name|collector
parameter_list|)
block|{
name|binaryProperties
argument_list|(
name|state
argument_list|,
name|path
argument_list|,
name|collector
argument_list|)
expr_stmt|;
for|for
control|(
name|ChildNodeEntry
name|c
range|:
name|state
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|traverseChildren
argument_list|(
name|c
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|c
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|collectReferences
parameter_list|(
name|ReferenceCollector
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting dump of blob references by traversing"
argument_list|)
expr_stmt|;
if|if
condition|(
name|paths
operator|==
literal|null
operator|||
name|paths
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|traverseChildren
argument_list|(
name|nodeStore
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"/"
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|nodeList
init|=
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|NodeState
name|state
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodeList
control|)
block|{
name|state
operator|=
name|state
operator|.
name|getChildNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inclusionRegex
operator|==
literal|null
operator|||
name|inclusionRegex
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|traverseChildren
argument_list|(
name|state
argument_list|,
name|path
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|regex
range|:
name|inclusionRegex
control|)
block|{
name|Map
argument_list|<
name|NodeState
argument_list|,
name|String
argument_list|>
name|inclusionMap
init|=
operator|new
name|HashMap
argument_list|<
name|NodeState
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|getInclusionListFromRegex
argument_list|(
name|state
argument_list|,
name|path
argument_list|,
name|regex
argument_list|,
name|inclusionMap
argument_list|)
expr_stmt|;
if|if
condition|(
name|inclusionMap
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No valid paths found for traversal, "
operator|+
literal|"for the inclusion Regex "
operator|+
name|regex
operator|+
literal|" under the path "
operator|+
name|path
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|NodeState
name|s
range|:
name|inclusionMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|traverseChildren
argument_list|(
name|s
argument_list|,
name|inclusionMap
operator|.
name|get
argument_list|(
name|s
argument_list|)
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|getInclusionListFromRegex
parameter_list|(
name|NodeState
name|rootState
parameter_list|,
name|String
name|rootPath
parameter_list|,
name|String
name|inclusionRegex
parameter_list|,
name|Map
argument_list|<
name|NodeState
argument_list|,
name|String
argument_list|>
name|inclusionNodeStates
parameter_list|)
block|{
name|Splitter
name|delimSplitter
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|"/"
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|omitEmptyStrings
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|pathElementList
init|=
name|delimSplitter
operator|.
name|splitToList
argument_list|(
name|inclusionRegex
argument_list|)
decl_stmt|;
name|Joiner
name|delimJoiner
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|"/"
argument_list|)
operator|.
name|skipNulls
argument_list|()
decl_stmt|;
comment|// Get the first pathElement from the regexPath
name|String
name|pathElement
init|=
name|pathElementList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// If the pathElement == *, get all child nodes and scan under them for the rest of the regex
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|pathElement
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|nodeName
range|:
name|rootState
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
name|String
name|rootPathTemp
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|rootPath
argument_list|,
name|nodeName
argument_list|)
decl_stmt|;
comment|// Remove the current Path Element from the regexPath
comment|// and recurse on getInclusionListFromRegex with this childNodeState and the regexPath
comment|// under the current pahtElement
name|String
name|sub
init|=
name|delimJoiner
operator|.
name|join
argument_list|(
name|pathElementList
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|pathElementList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|getInclusionListFromRegex
argument_list|(
name|rootState
operator|.
name|getChildNode
argument_list|(
name|nodeName
argument_list|)
argument_list|,
name|rootPathTemp
argument_list|,
name|sub
argument_list|,
name|inclusionNodeStates
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|NodeState
name|rootStateToInclude
init|=
name|rootState
operator|.
name|getChildNode
argument_list|(
name|pathElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootStateToInclude
operator|.
name|exists
argument_list|()
condition|)
block|{
name|inclusionNodeStates
operator|.
name|put
argument_list|(
name|rootStateToInclude
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|rootPath
argument_list|,
name|pathElement
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|static
class|class
name|VerboseIdLogger
block|{
specifier|static
specifier|final
name|String
name|DELIM
init|=
literal|","
decl_stmt|;
specifier|static
specifier|final
name|String
name|DASH
init|=
literal|"-"
decl_stmt|;
specifier|static
specifier|final
name|String
name|HASH
init|=
literal|"#"
decl_stmt|;
specifier|static
specifier|final
name|Comparator
argument_list|<
name|String
argument_list|>
name|idComparator
init|=
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
return|return
name|s1
operator|.
name|split
argument_list|(
name|DELIM
argument_list|)
index|[
literal|0
index|]
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|split
argument_list|(
name|DELIM
argument_list|)
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Joiner
name|delimJoiner
init|=
name|Joiner
operator|.
name|on
argument_list|(
name|DELIM
argument_list|)
operator|.
name|skipNulls
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Splitter
name|delimSplitter
init|=
name|Splitter
operator|.
name|on
argument_list|(
name|DELIM
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|omitEmptyStrings
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|BlobStoreOptions
name|optionBean
decl_stmt|;
specifier|private
specifier|final
name|BlobStoreOptions
operator|.
name|Type
name|blobStoreType
decl_stmt|;
specifier|private
specifier|final
name|File
name|outDir
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|File
argument_list|>
name|outFileList
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|VerboseIdLogger
parameter_list|(
name|Options
name|options
parameter_list|)
block|{
name|this
operator|.
name|optionBean
operator|=
name|options
operator|.
name|getOptionBean
argument_list|(
name|BlobStoreOptions
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|blobStoreType
operator|=
name|optionBean
operator|.
name|getBlobStoreType
argument_list|()
expr_stmt|;
name|outDir
operator|=
name|options
operator|.
name|getOptionBean
argument_list|(
name|DataStoreOptions
operator|.
name|class
argument_list|)
operator|.
name|getOutDir
argument_list|()
expr_stmt|;
name|outFileList
operator|.
name|add
argument_list|(
name|filterFiles
argument_list|(
name|outDir
argument_list|,
literal|"marked-"
argument_list|)
argument_list|)
expr_stmt|;
name|outFileList
operator|.
name|add
argument_list|(
name|filterFiles
argument_list|(
name|outDir
argument_list|,
literal|"gccand-"
argument_list|)
argument_list|)
expr_stmt|;
name|outFileList
operator|.
name|removeAll
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|outFileList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No candidate file found"
argument_list|)
throw|;
block|}
block|}
specifier|static
name|File
name|filterFiles
parameter_list|(
name|File
name|outDir
parameter_list|,
name|String
name|filePrefix
parameter_list|)
block|{
return|return
name|filterFiles
argument_list|(
name|outDir
argument_list|,
literal|"gcworkdir-"
argument_list|,
name|filePrefix
argument_list|)
return|;
block|}
annotation|@
name|Nullable
specifier|static
name|File
name|filterFiles
parameter_list|(
name|File
name|outDir
parameter_list|,
name|String
name|dirPrefix
parameter_list|,
name|String
name|filePrefix
parameter_list|)
block|{
name|List
argument_list|<
name|File
argument_list|>
name|subDirs
init|=
name|FileFilterUtils
operator|.
name|filterList
argument_list|(
name|FileFilterUtils
operator|.
name|and
argument_list|(
name|FileFilterUtils
operator|.
name|prefixFileFilter
argument_list|(
name|dirPrefix
argument_list|)
argument_list|,
name|FileFilterUtils
operator|.
name|directoryFileFilter
argument_list|()
argument_list|)
argument_list|,
name|outDir
operator|.
name|listFiles
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|subDirs
operator|!=
literal|null
operator|&&
operator|!
name|subDirs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|File
name|workDir
init|=
name|subDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|outFiles
init|=
name|FileFilterUtils
operator|.
name|filterList
argument_list|(
name|FileFilterUtils
operator|.
name|prefixFileFilter
argument_list|(
name|filePrefix
argument_list|)
argument_list|,
name|workDir
operator|.
name|listFiles
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|outFiles
operator|!=
literal|null
operator|&&
operator|!
name|outFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|outFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**          * Encode the blob id/blob ref in a format understood by the backing datastore          *          * Example:          * b47b58169f121822cd4a...#123311,/a/b/c => b47b-58169f121822cd4a...,/a/b/c (dsType = S3 or Azure)          * b47b58169f121822cd4a...#123311 => b47b-58169f121822cd4a... (dsType = S3 or Azure)          *          * @param line   can be either of the format b47b...#12311,/a/b/c or          *               b47b...#12311          * @param dsType          * @return In case of ref dump, concatanated encoded blob ref in a          * format understood by backing datastore impl and the path          * on which ref is present separated by delimJoiner          * In case of id dump, just the encoded blob ids.          */
specifier|static
name|String
name|encodeId
parameter_list|(
name|String
name|line
parameter_list|,
name|BlobStoreOptions
operator|.
name|Type
name|dsType
parameter_list|)
block|{
comment|// Split the input line on ",". This would be the case while dumping refs along with paths
comment|// Line would be like b47b58169f121822cd4a0a0a153ba5910e581ad2bc450b6af7e51e6214c2b173#123311,/a/b/c
comment|// In case of dumping ids, there would not be any paths associated and there the line would simply be
comment|// b47b58169f121822cd4a0a0a153ba5910e581ad2bc450b6af7e51e6214c2b173#123311
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|delimSplitter
operator|.
name|splitToList
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Split b47b58169f121822cd4a0a0a153ba5910e581ad2bc450b6af7e51e6214c2b173#123311 on # to get the id
name|List
argument_list|<
name|String
argument_list|>
name|idLengthSepList
init|=
name|Splitter
operator|.
name|on
argument_list|(
name|HASH
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|splitToList
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|blobId
init|=
name|idLengthSepList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|dsType
operator|==
name|FAKE
operator|||
name|dsType
operator|==
name|FDS
condition|)
block|{
comment|// 0102030405... => 01/02/03/0102030405...
name|blobId
operator|=
operator|(
name|blobId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|+
name|FILE_SEPARATOR
operator|.
name|value
argument_list|()
operator|+
name|blobId
operator|.
name|substring
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
operator|+
name|FILE_SEPARATOR
operator|.
name|value
argument_list|()
operator|+
name|blobId
operator|.
name|substring
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
operator|+
name|FILE_SEPARATOR
operator|.
name|value
argument_list|()
operator|+
name|blobId
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dsType
operator|==
name|S3
operator|||
name|dsType
operator|==
name|AZURE
condition|)
block|{
comment|//b47b58169f121822cd4a0... => b47b-58169f121822cd4a0...
name|blobId
operator|=
operator|(
name|blobId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
operator|+
name|DASH
operator|+
name|blobId
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
operator|)
expr_stmt|;
block|}
comment|// Check if the line provided as input was a line dumped from blob refs or blob ids
comment|// In case of blob refs dump, the list size would be 2 (Consisting of blob ref and the path on which ref is present)
comment|// In case of blob ids dump, the list size would be 1 (Consisting of just the id)
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// Join back the encoded blob ref and the path on which the ref is present
return|return
name|delimJoiner
operator|.
name|join
argument_list|(
name|blobId
argument_list|,
name|EscapeUtils
operator|.
name|unescapeLineBreaks
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|// return the encoded blob id
return|return
name|blobId
return|;
block|}
block|}
specifier|public
name|void
name|log
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|File
name|outFile
range|:
name|outFileList
control|)
block|{
name|File
name|tempFile
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|outFile
operator|.
name|getName
argument_list|()
operator|+
literal|"-temp"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|moveFile
argument_list|(
name|outFile
argument_list|,
name|tempFile
argument_list|)
expr_stmt|;
try|try
init|(
name|BurnOnCloseFileIterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
operator|new
name|BurnOnCloseFileIterator
argument_list|<
name|String
argument_list|>
argument_list|(
name|FileUtils
operator|.
name|lineIterator
argument_list|(
name|tempFile
argument_list|,
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|tempFile
argument_list|,
operator|(
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|input
lambda|->
name|encodeId
argument_list|(
name|input
argument_list|,
name|blobStoreType
argument_list|)
argument_list|)
init|)
block|{
name|writeStrings
argument_list|(
name|iterator
argument_list|,
name|outFile
argument_list|,
literal|true
argument_list|,
name|log
argument_list|,
literal|"Transformed to verbose ids - "
argument_list|)
block|;             }
block|}
block|}
block|}
block|}
end_class

end_unit

