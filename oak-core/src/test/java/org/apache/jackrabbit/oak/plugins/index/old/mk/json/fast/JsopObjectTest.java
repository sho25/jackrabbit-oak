begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|old
operator|.
name|mk
operator|.
name|json
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Test the Jsop class.  */
end_comment

begin_class
specifier|public
class|class
name|JsopObjectTest
extends|extends
name|TestCase
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
block|{
comment|// 1000 times 'x'
name|String
name|data
init|=
operator|new
name|String
argument_list|(
operator|new
name|char
index|[
literal|1000
index|]
argument_list|)
operator|.
name|replace
argument_list|(
operator|(
name|char
operator|)
literal|0
argument_list|,
literal|'x'
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|lengthIndex
init|=
name|i
operator|%
literal|2
operator|==
literal|0
decl_stmt|;
name|JsopObject
name|w
init|=
operator|new
name|JsopObject
argument_list|()
decl_stmt|;
name|w
operator|.
name|setLengthIndex
argument_list|(
name|lengthIndex
argument_list|)
expr_stmt|;
comment|// 100 children with the dummy data: 100'000 characters
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|w
operator|.
name|put
argument_list|(
literal|"child"
operator|+
name|j
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
name|String
name|jsop
init|=
name|w
operator|.
name|toString
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10000
condition|;
name|j
operator|++
control|)
block|{
name|JsopObject
name|o
init|=
operator|(
name|JsopObject
operator|)
name|Jsop
operator|.
name|parse
argument_list|(
name|jsop
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|data
argument_list|,
name|o
operator|.
name|get
argument_list|(
literal|"child99"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|double
name|seconds
init|=
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
operator|)
operator|/
literal|1.0e9
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%.2f seconds lengthIndex=%d%n"
argument_list|,
name|seconds
argument_list|,
name|lengthIndex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testDataType
parameter_list|()
block|{
name|String
name|s
init|=
operator|(
name|String
operator|)
name|Jsop
operator|.
name|parse
argument_list|(
literal|"\"Hello\""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
operator|(
name|String
operator|)
name|Jsop
operator|.
name|parse
argument_list|(
literal|"\"Line 1\\nLine 2\""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Line 1\nLine 2"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|BigDecimal
name|db
init|=
operator|(
name|BigDecimal
operator|)
name|Jsop
operator|.
name|parse
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|db
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|=
operator|(
name|BigDecimal
operator|)
name|Jsop
operator|.
name|parse
argument_list|(
literal|"1.3e-1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0.13"
argument_list|,
name|db
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|=
operator|(
name|BigDecimal
operator|)
name|Jsop
operator|.
name|parse
argument_list|(
literal|"-1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-1"
argument_list|,
name|db
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|=
operator|(
name|BigDecimal
operator|)
name|Jsop
operator|.
name|parse
argument_list|(
literal|"10.3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10.3"
argument_list|,
name|db
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Jsop
operator|.
name|parse
argument_list|(
literal|"null"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|Jsop
operator|.
name|parse
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|Jsop
operator|.
name|parse
argument_list|(
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|JsopObject
name|o
init|=
operator|(
name|JsopObject
operator|)
name|Jsop
operator|.
name|parse
argument_list|(
literal|"{}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|o
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|o
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{}"
argument_list|,
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JsopArray
name|a
init|=
operator|(
name|JsopArray
operator|)
name|Jsop
operator|.
name|parse
argument_list|(
literal|"[]"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|a
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[]"
argument_list|,
name|a
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testArray
parameter_list|()
block|{
name|JsopArray
name|a
init|=
operator|(
name|JsopArray
operator|)
name|Jsop
operator|.
name|parse
argument_list|(
literal|"[1, null, \"Hello\", [], {}]"
argument_list|)
decl_stmt|;
comment|// this will force everything is parsed
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|a
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|a
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|a
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|a
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|JsopArray
name|a1
init|=
operator|(
name|JsopArray
operator|)
name|a
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|a1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|JsopObject
name|o1
init|=
operator|(
name|JsopObject
operator|)
name|a
operator|.
name|get
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|o1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|a
operator|.
name|get
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|String
name|s
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|a
control|)
block|{
name|s
operator|+=
name|o
operator|+
literal|";"
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"1;null;Hello;[];{};"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testArrayLazyInit
parameter_list|()
block|{
name|JsopArray
name|a
init|=
operator|(
name|JsopArray
operator|)
name|Jsop
operator|.
name|parse
argument_list|(
literal|"[1, null, \"Hello\", [], {}]"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|a
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|a
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|a
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|JsopArray
name|a1
init|=
operator|(
name|JsopArray
operator|)
name|a
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|a1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|JsopObject
name|o1
init|=
operator|(
name|JsopObject
operator|)
name|a
operator|.
name|get
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|o1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|a
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testArrayCreate
parameter_list|()
block|{
name|JsopArray
name|array
init|=
operator|new
name|JsopArray
argument_list|()
decl_stmt|;
name|array
operator|.
name|add
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[\"test\",1]"
argument_list|,
name|array
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|array
operator|.
name|clear
argument_list|()
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[null,true,false]"
argument_list|,
name|array
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testObject
parameter_list|()
block|{
name|JsopObject
name|o
init|=
operator|(
name|JsopObject
operator|)
name|Jsop
operator|.
name|parse
argument_list|(
literal|"{\"a\": 1, \"b\": null, \"c\": true, \"d\": {}, \"e\": []}"
argument_list|)
decl_stmt|;
comment|// this will force everything is parsed
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|o
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|o
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|o
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|o
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|o
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|JsopObject
name|o1
init|=
operator|(
name|JsopObject
operator|)
name|o
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|o1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|JsopArray
name|a1
init|=
operator|(
name|JsopArray
operator|)
name|o
operator|.
name|get
argument_list|(
literal|"e"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|a1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|o
operator|.
name|containsKey
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|o
operator|.
name|containsKey
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|o
operator|.
name|containsKey
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testObjectLazyInit
parameter_list|()
block|{
name|JsopObject
name|a
init|=
operator|(
name|JsopObject
operator|)
name|Jsop
operator|.
name|parse
argument_list|(
literal|"{\"a\": 1, \"b\": null, \"c\": true, \"d\": {}, \"e\": []}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|a
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|a
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|a
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|JsopObject
name|a1
init|=
operator|(
name|JsopObject
operator|)
name|a
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|a1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|JsopArray
name|o1
init|=
operator|(
name|JsopArray
operator|)
name|a
operator|.
name|get
argument_list|(
literal|"e"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|o1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testObjectCreate
parameter_list|()
block|{
name|JsopObject
name|o
init|=
operator|new
name|JsopObject
argument_list|()
decl_stmt|;
name|o
operator|.
name|setLengthIndex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|o
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|o
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|o
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|o
operator|.
name|put
argument_list|(
literal|"d"
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|o
operator|.
name|put
argument_list|(
literal|"e"
argument_list|,
operator|new
name|JsopObject
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|.
name|put
argument_list|(
literal|"f"
argument_list|,
operator|new
name|JsopArray
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|o
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\":lengths:\":\"4,5,4,7,2,2\",\"a\":true,\"b\":false,\"c\":null,\"d\":\"Hello\",\"e\":{},\"f\":[]}"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|o
operator|=
operator|(
name|JsopObject
operator|)
name|Jsop
operator|.
name|parse
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|o
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|o
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|o
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|o
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{}"
argument_list|,
name|o
operator|.
name|get
argument_list|(
literal|"e"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[]"
argument_list|,
name|o
operator|.
name|get
argument_list|(
literal|"f"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testObjectCreateClear
parameter_list|()
block|{
name|JsopObject
name|o
init|=
operator|new
name|JsopObject
argument_list|()
decl_stmt|;
name|o
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|o
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|o
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|o
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|o
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|o
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

