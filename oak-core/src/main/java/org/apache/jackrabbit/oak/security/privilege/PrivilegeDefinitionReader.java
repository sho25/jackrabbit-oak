begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Reads privilege definitions from the repository content without applying  * any validation.  */
end_comment

begin_class
class|class
name|PrivilegeDefinitionReader
implements|implements
name|PrivilegeConstants
block|{
specifier|private
specifier|final
name|Tree
name|privilegesTree
decl_stmt|;
name|PrivilegeDefinitionReader
parameter_list|(
annotation|@
name|NotNull
name|Root
name|root
parameter_list|)
block|{
name|this
operator|.
name|privilegesTree
operator|=
name|root
operator|.
name|getTree
argument_list|(
name|PRIVILEGES_PATH
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read all registered privilege definitions from the content.      *      * @return All privilege definitions stored in the content.      */
annotation|@
name|NotNull
name|Map
argument_list|<
name|String
argument_list|,
name|PrivilegeDefinition
argument_list|>
name|readDefinitions
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PrivilegeDefinition
argument_list|>
name|definitions
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|privilegesTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|isPrivilegeDefinition
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|PrivilegeDefinition
name|def
init|=
name|PrivilegeUtil
operator|.
name|readDefinition
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|definitions
operator|.
name|put
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|definitions
return|;
block|}
comment|/**      * Retrieve the privilege definition with the specified {@code privilegeName}.      *      * @param privilegeName The name of a registered privilege definition.      * @return The privilege definition with the specified name or {@code null}      *         if the name doesn't refer to a registered privilege.      */
annotation|@
name|Nullable
name|PrivilegeDefinition
name|readDefinition
parameter_list|(
annotation|@
name|NotNull
name|String
name|privilegeName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|privilegesTree
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|privilegesTree
operator|.
name|hasChild
argument_list|(
name|privilegeName
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|Tree
name|definitionTree
init|=
name|privilegesTree
operator|.
name|getChild
argument_list|(
name|privilegeName
argument_list|)
decl_stmt|;
return|return
operator|(
name|isPrivilegeDefinition
argument_list|(
name|definitionTree
argument_list|)
operator|)
condition|?
name|PrivilegeUtil
operator|.
name|readDefinition
argument_list|(
name|definitionTree
argument_list|)
else|:
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isPrivilegeDefinition
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|NT_REP_PRIVILEGE
operator|.
name|equals
argument_list|(
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|tree
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

