begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|RootFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|impl
operator|.
name|ImmutableTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|AggregatedPermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|RepositoryPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractCompositeProviderTest
extends|extends
name|AbstractSecurityTest
implements|implements
name|NodeTypeConstants
implements|,
name|PrivilegeConstants
block|{
specifier|static
specifier|final
name|String
name|ROOT_PATH
init|=
literal|"/"
decl_stmt|;
specifier|static
specifier|final
name|String
name|TEST_PATH
init|=
literal|"/test"
decl_stmt|;
specifier|static
specifier|final
name|String
name|TEST_CHILD_PATH
init|=
literal|"/test/child"
decl_stmt|;
specifier|static
specifier|final
name|String
name|TEST_A_PATH
init|=
literal|"/test/a"
decl_stmt|;
specifier|static
specifier|final
name|String
name|TEST_A_B_PATH
init|=
literal|"/test/a/b"
decl_stmt|;
specifier|static
specifier|final
name|String
name|TEST_A_B_C_PATH
init|=
literal|"/test/a/b/c"
decl_stmt|;
specifier|static
specifier|final
name|String
name|TEST_A_B2_PATH
init|=
literal|"/test/a/b2"
decl_stmt|;
specifier|static
specifier|final
name|String
name|TEST_PATH_2
init|=
literal|"/test2"
decl_stmt|;
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|NODE_PATHS
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|ROOT_PATH
argument_list|,
name|TEST_PATH
argument_list|,
name|TEST_PATH_2
argument_list|,
name|TEST_CHILD_PATH
argument_list|,
name|TEST_A_PATH
argument_list|,
name|TEST_A_B_PATH
argument_list|,
name|TEST_A_B_C_PATH
argument_list|,
name|TEST_A_B2_PATH
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|TP_PATHS
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|ROOT_PATH
argument_list|,
name|TEST_PATH
argument_list|,
name|TEST_A_PATH
argument_list|,
name|TEST_A_B_PATH
argument_list|,
name|TEST_A_B_C_PATH
argument_list|,
name|TEST_A_B_C_PATH
operator|+
literal|"/nonexisting"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|PropertyState
name|PROPERTY_STATE
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"propName"
argument_list|,
literal|"val"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
index|[]
name|ALL_ACTIONS
init|=
operator|new
name|String
index|[]
block|{
name|Session
operator|.
name|ACTION_READ
block|,
name|Session
operator|.
name|ACTION_ADD_NODE
block|,
name|JackrabbitSession
operator|.
name|ACTION_REMOVE_NODE
block|,
name|Session
operator|.
name|ACTION_SET_PROPERTY
block|,
name|JackrabbitSession
operator|.
name|ACTION_ADD_PROPERTY
block|,
name|JackrabbitSession
operator|.
name|ACTION_MODIFY_PROPERTY
block|,
name|JackrabbitSession
operator|.
name|ACTION_REMOVE_PROPERTY
block|,
name|Session
operator|.
name|ACTION_REMOVE
block|,
name|JackrabbitSession
operator|.
name|ACTION_READ_ACCESS_CONTROL
block|,
name|JackrabbitSession
operator|.
name|ACTION_MODIFY_ACCESS_CONTROL
block|,
name|JackrabbitSession
operator|.
name|ACTION_LOCKING
block|,
name|JackrabbitSession
operator|.
name|ACTION_NODE_TYPE_MANAGEMENT
block|,
name|JackrabbitSession
operator|.
name|ACTION_VERSIONING
block|,
name|JackrabbitSession
operator|.
name|ACTION_USER_MANAGEMENT
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|defPermissions
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|defPrivileges
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|defActionsGranted
decl_stmt|;
name|Root
name|readOnlyRoot
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|NodeUtil
name|rootNode
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|NodeUtil
name|test
init|=
name|rootNode
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|NodeUtil
name|a
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|a
operator|.
name|addChild
argument_list|(
literal|"b2"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|a
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|rootNode
operator|.
name|addChild
argument_list|(
literal|"test2"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|Principal
name|everyone
init|=
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|allow
argument_list|(
name|acMgr
argument_list|,
name|everyone
argument_list|,
literal|null
argument_list|,
name|JCR_NAMESPACE_MANAGEMENT
argument_list|,
name|JCR_NODE_TYPE_DEFINITION_MANAGEMENT
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|acMgr
argument_list|,
name|everyone
argument_list|,
name|TEST_PATH
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|acMgr
argument_list|,
name|everyone
argument_list|,
name|TEST_CHILD_PATH
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|acMgr
argument_list|,
name|everyone
argument_list|,
name|TEST_A_PATH
argument_list|,
name|JCR_WRITE
argument_list|,
name|JCR_VERSION_MANAGEMENT
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|acMgr
argument_list|,
name|everyone
argument_list|,
name|TEST_A_B_PATH
argument_list|,
name|REP_REMOVE_PROPERTIES
argument_list|,
name|JCR_REMOVE_NODE
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|acMgr
argument_list|,
name|everyone
argument_list|,
name|TEST_A_B_C_PATH
argument_list|,
name|REP_READ_NODES
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|defPermissions
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|Long
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|TEST_PATH
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_CHILD_PATH
argument_list|,
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_A_PATH
argument_list|,
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|SET_PROPERTY
operator||
name|Permissions
operator|.
name|MODIFY_CHILD_NODE_COLLECTION
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_A_B2_PATH
argument_list|,
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|WRITE
operator||
name|Permissions
operator|.
name|MODIFY_CHILD_NODE_COLLECTION
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_A_B_PATH
argument_list|,
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|ADD_NODE
operator||
name|Permissions
operator|.
name|ADD_PROPERTY
operator||
name|Permissions
operator|.
name|MODIFY_PROPERTY
operator||
name|Permissions
operator|.
name|MODIFY_CHILD_NODE_COLLECTION
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_A_B_C_PATH
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
operator||
name|Permissions
operator|.
name|ADD_NODE
operator||
name|Permissions
operator|.
name|ADD_PROPERTY
operator||
name|Permissions
operator|.
name|MODIFY_PROPERTY
operator||
name|Permissions
operator|.
name|MODIFY_CHILD_NODE_COLLECTION
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|defPrivileges
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|Set
argument_list|<
name|String
argument_list|>
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|ROOT_PATH
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_PATH_2
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_PATH
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_CHILD_PATH
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_A_PATH
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_WRITE
argument_list|,
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_A_B2_PATH
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_WRITE
argument_list|,
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_A_B_PATH
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_ADD_CHILD_NODES
argument_list|,
name|JCR_REMOVE_CHILD_NODES
argument_list|,
name|REP_ADD_PROPERTIES
argument_list|,
name|REP_ALTER_PROPERTIES
argument_list|,
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_A_B_C_PATH
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|REP_READ_PROPERTIES
argument_list|,
name|JCR_ADD_CHILD_NODES
argument_list|,
name|JCR_REMOVE_CHILD_NODES
argument_list|,
name|REP_ADD_PROPERTIES
argument_list|,
name|REP_ALTER_PROPERTIES
argument_list|,
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|defActionsGranted
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|String
index|[]
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|TEST_PATH
argument_list|,
operator|new
name|String
index|[]
block|{
name|Session
operator|.
name|ACTION_READ
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_CHILD_PATH
argument_list|,
operator|new
name|String
index|[]
block|{
name|Session
operator|.
name|ACTION_READ
block|,
name|JackrabbitSession
operator|.
name|ACTION_READ_ACCESS_CONTROL
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_A_PATH
argument_list|,
operator|new
name|String
index|[]
block|{
name|Session
operator|.
name|ACTION_READ
block|,
name|Session
operator|.
name|ACTION_SET_PROPERTY
block|,
name|JackrabbitSession
operator|.
name|ACTION_VERSIONING
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_A_PATH
operator|+
literal|"/jcr:primaryType"
argument_list|,
operator|new
name|String
index|[]
block|{
name|Session
operator|.
name|ACTION_SET_PROPERTY
block|,
name|JackrabbitSession
operator|.
name|ACTION_VERSIONING
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_A_PATH
operator|+
literal|"/propName"
argument_list|,
operator|new
name|String
index|[]
block|{
name|JackrabbitSession
operator|.
name|ACTION_ADD_PROPERTY
block|,
name|JackrabbitSession
operator|.
name|ACTION_MODIFY_PROPERTY
block|,
name|JackrabbitSession
operator|.
name|ACTION_REMOVE_PROPERTY
block|,
name|JackrabbitSession
operator|.
name|ACTION_VERSIONING
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_A_PATH
operator|+
literal|"/nodeName"
argument_list|,
operator|new
name|String
index|[]
block|{
name|Session
operator|.
name|ACTION_ADD_NODE
block|,
name|JackrabbitSession
operator|.
name|ACTION_VERSIONING
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_A_B2_PATH
argument_list|,
operator|new
name|String
index|[]
block|{
name|Session
operator|.
name|ACTION_READ
block|,
name|Session
operator|.
name|ACTION_ADD_NODE
block|,
name|JackrabbitSession
operator|.
name|ACTION_REMOVE_NODE
block|,
name|Session
operator|.
name|ACTION_REMOVE
block|,
name|Session
operator|.
name|ACTION_SET_PROPERTY
block|,
name|JackrabbitSession
operator|.
name|ACTION_VERSIONING
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_A_B_PATH
argument_list|,
operator|new
name|String
index|[]
block|{
name|Session
operator|.
name|ACTION_READ
block|,
name|Session
operator|.
name|ACTION_ADD_NODE
block|,
name|JackrabbitSession
operator|.
name|ACTION_ADD_PROPERTY
block|,
name|JackrabbitSession
operator|.
name|ACTION_MODIFY_PROPERTY
block|,
name|JackrabbitSession
operator|.
name|ACTION_VERSIONING
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_A_B_PATH
operator|+
literal|"/nonExisting"
argument_list|,
operator|new
name|String
index|[]
block|{
name|Session
operator|.
name|ACTION_READ
block|,
name|Session
operator|.
name|ACTION_ADD_NODE
block|,
name|JackrabbitSession
operator|.
name|ACTION_ADD_PROPERTY
block|,
name|JackrabbitSession
operator|.
name|ACTION_MODIFY_PROPERTY
block|,
name|JackrabbitSession
operator|.
name|ACTION_VERSIONING
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_A_B_C_PATH
operator|+
literal|"/jcr:primaryType"
argument_list|,
operator|new
name|String
index|[]
block|{
name|Session
operator|.
name|ACTION_READ
block|,
name|JackrabbitSession
operator|.
name|ACTION_VERSIONING
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|TEST_A_B_C_PATH
argument_list|,
operator|new
name|String
index|[]
block|{
name|Session
operator|.
name|ACTION_ADD_NODE
block|,
name|JackrabbitSession
operator|.
name|ACTION_ADD_PROPERTY
block|,
name|JackrabbitSession
operator|.
name|ACTION_VERSIONING
block|}
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|readOnlyRoot
operator|=
name|RootFactory
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|root
operator|.
name|getTree
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|allow
parameter_list|(
annotation|@
name|Nonnull
name|AccessControlManager
name|acMgr
parameter_list|,
annotation|@
name|Nonnull
name|Principal
name|principal
parameter_list|,
annotation|@
name|Nullable
name|String
name|path
parameter_list|,
annotation|@
name|Nonnull
name|String
modifier|...
name|privilegeNames
parameter_list|)
throws|throws
name|Exception
block|{
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|principal
argument_list|,
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|privilegeNames
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|deny
parameter_list|(
annotation|@
name|Nonnull
name|AccessControlManager
name|acMgr
parameter_list|,
annotation|@
name|Nonnull
name|Principal
name|principal
parameter_list|,
annotation|@
name|Nullable
name|String
name|path
parameter_list|,
annotation|@
name|Nonnull
name|String
modifier|...
name|privilegeNames
parameter_list|)
throws|throws
name|Exception
block|{
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|principal
argument_list|,
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|privilegeNames
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
specifier|static
name|String
name|getActionString
parameter_list|(
annotation|@
name|Nonnull
name|String
modifier|...
name|actions
parameter_list|)
block|{
return|return
name|Text
operator|.
name|implode
argument_list|(
name|actions
argument_list|,
literal|","
argument_list|)
return|;
block|}
specifier|abstract
name|AggregatedPermissionProvider
name|getTestPermissionProvider
parameter_list|()
function_decl|;
name|boolean
name|reverseOrder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|AggregatedPermissionProvider
argument_list|>
name|getAggregatedProviders
parameter_list|(
annotation|@
name|Nonnull
name|String
name|workspaceName
parameter_list|,
annotation|@
name|Nonnull
name|AuthorizationConfiguration
name|config
parameter_list|,
annotation|@
name|Nonnull
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|)
block|{
if|if
condition|(
name|reverseOrder
argument_list|()
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
operator|(
name|AggregatedPermissionProvider
operator|)
name|config
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|workspaceName
argument_list|,
name|principals
argument_list|)
argument_list|,
name|getTestPermissionProvider
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
operator|(
name|AggregatedPermissionProvider
operator|)
name|config
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|workspaceName
argument_list|,
name|principals
argument_list|)
argument_list|,
name|getTestPermissionProvider
argument_list|()
argument_list|)
return|;
block|}
block|}
name|CompositePermissionProvider
name|createPermissionProvider
parameter_list|(
name|Principal
modifier|...
name|principals
parameter_list|)
block|{
return|return
name|createPermissionProvider
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|principals
argument_list|)
argument_list|)
return|;
block|}
name|CompositePermissionProvider
name|createPermissionProvider
parameter_list|(
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|)
block|{
name|String
name|workspaceName
init|=
name|root
operator|.
name|getContentSession
argument_list|()
operator|.
name|getWorkspaceName
argument_list|()
decl_stmt|;
name|AuthorizationConfiguration
name|config
init|=
name|getConfig
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|CompositePermissionProvider
argument_list|(
name|root
argument_list|,
name|getAggregatedProviders
argument_list|(
name|workspaceName
argument_list|,
name|config
argument_list|,
name|principals
argument_list|)
argument_list|,
name|config
operator|.
name|getContext
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|CompositePermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|()
decl_stmt|;
name|pp
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesJcrAll
parameter_list|()
throws|throws
name|Exception
block|{
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|NODE_PATHS
control|)
block|{
name|Tree
name|tree
init|=
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|p
argument_list|,
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|tree
argument_list|,
name|JCR_ALL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesNone
parameter_list|()
throws|throws
name|Exception
block|{
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|NODE_PATHS
control|)
block|{
name|Tree
name|tree
init|=
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|p
argument_list|,
name|pp
operator|.
name|hasPrivileges
argument_list|(
name|tree
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesOnRepoJcrAll
parameter_list|()
throws|throws
name|Exception
block|{
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|JCR_ALL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesOnRepoNone
parameter_list|()
throws|throws
name|Exception
block|{
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedAll
parameter_list|()
throws|throws
name|Exception
block|{
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|NODE_PATHS
control|)
block|{
name|Tree
name|tree
init|=
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|PropertyState
name|ps
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|p
argument_list|,
name|pp
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|p
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|,
name|pp
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
name|ps
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedNone
parameter_list|()
throws|throws
name|Exception
block|{
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|NODE_PATHS
control|)
block|{
name|Tree
name|tree
init|=
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|PropertyState
name|ps
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|p
argument_list|,
name|pp
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|p
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|,
name|pp
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
name|ps
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsNotGranted
parameter_list|()
throws|throws
name|Exception
block|{
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|NODE_PATHS
control|)
block|{
name|Tree
name|tree
init|=
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|PropertyState
name|ps
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|p
argument_list|,
name|pp
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|p
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|,
name|pp
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
name|ps
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedActionNone
parameter_list|()
throws|throws
name|Exception
block|{
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|()
decl_stmt|;
name|String
name|actions
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|nodePath
range|:
name|NODE_PATHS
control|)
block|{
name|assertFalse
argument_list|(
name|nodePath
argument_list|,
name|pp
operator|.
name|isGranted
argument_list|(
name|nodePath
argument_list|,
name|actions
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|propPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|nodePath
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|propPath
argument_list|,
name|pp
operator|.
name|isGranted
argument_list|(
name|propPath
argument_list|,
name|actions
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|nonExPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|nodePath
argument_list|,
literal|"nonExisting"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|nonExPath
argument_list|,
name|pp
operator|.
name|isGranted
argument_list|(
name|nonExPath
argument_list|,
name|actions
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsNotGrantedAction
parameter_list|()
throws|throws
name|Exception
block|{
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|()
decl_stmt|;
name|String
index|[]
name|actions
init|=
operator|new
name|String
index|[]
block|{
name|JackrabbitSession
operator|.
name|ACTION_LOCKING
block|,
name|JackrabbitSession
operator|.
name|ACTION_MODIFY_ACCESS_CONTROL
block|}
decl_stmt|;
for|for
control|(
name|String
name|nodePath
range|:
name|NODE_PATHS
control|)
block|{
name|String
name|actionStr
init|=
name|getActionString
argument_list|(
name|actions
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|nodePath
argument_list|,
name|pp
operator|.
name|isGranted
argument_list|(
name|nodePath
argument_list|,
name|actionStr
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|propPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|nodePath
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|propPath
argument_list|,
name|pp
operator|.
name|isGranted
argument_list|(
name|propPath
argument_list|,
name|actionStr
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|nonExPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|nodePath
argument_list|,
literal|"nonExisting"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|nonExPath
argument_list|,
name|pp
operator|.
name|isGranted
argument_list|(
name|nonExPath
argument_list|,
name|actionStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTreePermissionAllParent
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|tp
init|=
name|createPermissionProvider
argument_list|()
operator|.
name|getTreePermission
argument_list|(
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|,
name|TreePermission
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|TreePermission
operator|.
name|ALL
argument_list|,
name|tp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTreePermissionEmptyParent
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|tp
init|=
name|createPermissionProvider
argument_list|()
operator|.
name|getTreePermission
argument_list|(
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|,
name|TreePermission
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|TreePermission
operator|.
name|EMPTY
argument_list|,
name|tp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTreePermissionIsGrantedAll
parameter_list|()
throws|throws
name|Exception
block|{
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|()
decl_stmt|;
name|TreePermission
name|parentPermission
init|=
name|TreePermission
operator|.
name|EMPTY
decl_stmt|;
name|PropertyState
name|ps
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"propName"
argument_list|,
literal|"val"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|TP_PATHS
control|)
block|{
name|Tree
name|t
init|=
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|TreePermission
name|tp
init|=
name|pp
operator|.
name|getTreePermission
argument_list|(
name|t
argument_list|,
name|parentPermission
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|ALL
argument_list|,
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|parentPermission
operator|=
name|tp
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTreePermissionIsNotGranted
parameter_list|()
throws|throws
name|Exception
block|{
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|()
decl_stmt|;
name|TreePermission
name|parentPermission
init|=
name|TreePermission
operator|.
name|EMPTY
decl_stmt|;
name|PropertyState
name|ps
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"propName"
argument_list|,
literal|"val"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|TP_PATHS
control|)
block|{
name|Tree
name|t
init|=
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|TreePermission
name|tp
init|=
name|pp
operator|.
name|getTreePermission
argument_list|(
name|t
argument_list|,
name|parentPermission
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|,
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|parentPermission
operator|=
name|tp
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTreePermissionCanReadAll
parameter_list|()
throws|throws
name|Exception
block|{
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|()
decl_stmt|;
name|TreePermission
name|parentPermission
init|=
name|TreePermission
operator|.
name|EMPTY
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|TP_PATHS
control|)
block|{
name|TreePermission
name|tp
init|=
name|pp
operator|.
name|getTreePermission
argument_list|(
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
argument_list|,
name|parentPermission
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|canReadAll
argument_list|()
argument_list|)
expr_stmt|;
name|parentPermission
operator|=
name|tp
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTreePermissionCanReadProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|()
decl_stmt|;
name|TreePermission
name|parentPermission
init|=
name|TreePermission
operator|.
name|EMPTY
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|TP_PATHS
control|)
block|{
name|TreePermission
name|tp
init|=
name|pp
operator|.
name|getTreePermission
argument_list|(
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
argument_list|,
name|parentPermission
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|canReadProperties
argument_list|()
argument_list|)
expr_stmt|;
name|parentPermission
operator|=
name|tp
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTreePermissionInstance
parameter_list|()
throws|throws
name|Exception
block|{
name|PermissionProvider
name|pp
init|=
name|createPermissionProvider
argument_list|()
decl_stmt|;
name|TreePermission
name|parentPermission
init|=
name|TreePermission
operator|.
name|EMPTY
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|TP_PATHS
control|)
block|{
name|TreePermission
name|tp
init|=
name|pp
operator|.
name|getTreePermission
argument_list|(
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
argument_list|,
name|parentPermission
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|instanceof
name|CompositeTreePermission
argument_list|)
expr_stmt|;
name|parentPermission
operator|=
name|tp
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTreePermissionGetChild
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|childNames
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"test"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"nonexisting"
argument_list|)
decl_stmt|;
name|Tree
name|rootTree
init|=
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|NodeState
name|ns
init|=
operator|(
operator|(
name|ImmutableTree
operator|)
name|rootTree
operator|)
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|TreePermission
name|tp
init|=
name|createPermissionProvider
argument_list|()
operator|.
name|getTreePermission
argument_list|(
name|rootTree
argument_list|,
name|TreePermission
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|cName
range|:
name|childNames
control|)
block|{
name|ns
operator|=
name|ns
operator|.
name|getChildNode
argument_list|(
name|cName
argument_list|)
expr_stmt|;
name|tp
operator|=
name|tp
operator|.
name|getChildPermission
argument_list|(
name|cName
argument_list|,
name|ns
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|instanceof
name|CompositeTreePermission
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRepositoryPermissionInstance
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryPermission
name|rp
init|=
name|createPermissionProvider
argument_list|()
operator|.
name|getRepositoryPermission
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rp
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"CompositeRepositoryPermission"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRepositoryPermissionIsNotGranted
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryPermission
name|rp
init|=
name|createPermissionProvider
argument_list|()
operator|.
name|getRepositoryPermission
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|rp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|PRIVILEGE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|NAMESPACE_MANAGEMENT
operator||
name|Permissions
operator|.
name|PRIVILEGE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|WORKSPACE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

