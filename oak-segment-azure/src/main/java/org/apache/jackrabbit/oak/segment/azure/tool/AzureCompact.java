begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|tool
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentCache
operator|.
name|DEFAULT_SEGMENT_CACHE_MB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|tool
operator|.
name|ToolUtils
operator|.
name|createArchiveManager
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|tool
operator|.
name|ToolUtils
operator|.
name|newFileStore
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|tool
operator|.
name|ToolUtils
operator|.
name|newSegmentNodeStorePersistence
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|tool
operator|.
name|ToolUtils
operator|.
name|printableStopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|tool
operator|.
name|ToolUtils
operator|.
name|SegmentStoreType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|JournalReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|JournalFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|JournalFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentArchiveManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentNodeStorePersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|Compact
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Perform an offline compaction of an existing Azure Segment Store.  */
end_comment

begin_class
specifier|public
class|class
name|AzureCompact
block|{
comment|/**      * Create a builder for the {@link Compact} command.      *      * @return an instance of {@link Builder}.      */
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**      * Collect options for the {@link Compact} command.      */
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
name|String
name|path
decl_stmt|;
specifier|private
name|boolean
name|force
decl_stmt|;
specifier|private
name|long
name|gcLogInterval
init|=
literal|150000
decl_stmt|;
specifier|private
name|int
name|segmentCacheSize
init|=
name|DEFAULT_SEGMENT_CACHE_MB
decl_stmt|;
specifier|private
name|Builder
parameter_list|()
block|{
comment|// Prevent external instantiation.
block|}
comment|/**          * The path (URI) to an existing segment store. This parameter is required.          *          * @param path          *            the path to an existing segment store.          * @return this builder.          */
specifier|public
name|Builder
name|withPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to fail if run on an older version of the store of force upgrading          * its format.          *          * @param force          *            upgrade iff {@code true}          * @return this builder.          */
specifier|public
name|Builder
name|withForce
parameter_list|(
name|boolean
name|force
parameter_list|)
block|{
name|this
operator|.
name|force
operator|=
name|force
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The size of the segment cache in MB. The default of          * {@link SegmentCache#DEFAULT_SEGMENT_CACHE_MB} when this method is not          * invoked.          *          * @param segmentCacheSize          *            cache size in MB          * @return this builder          * @throws IllegalArgumentException          *             if {@code segmentCacheSize} is not a positive integer.          */
specifier|public
name|Builder
name|withSegmentCacheSize
parameter_list|(
name|int
name|segmentCacheSize
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|segmentCacheSize
operator|>
literal|0
argument_list|,
literal|"segmentCacheSize must be strictly positive"
argument_list|)
expr_stmt|;
name|this
operator|.
name|segmentCacheSize
operator|=
name|segmentCacheSize
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of nodes after which an update about the compaction process is          * logged. Set to a negative number to disable progress logging. If not          * specified, it defaults to 150,000 nodes.          *          * @param gcLogInterval          *            The log interval.          * @return this builder.          */
specifier|public
name|Builder
name|withGCLogInterval
parameter_list|(
name|long
name|gcLogInterval
parameter_list|)
block|{
name|this
operator|.
name|gcLogInterval
operator|=
name|gcLogInterval
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Create an executable version of the {@link Compact} command.          *          * @return an instance of {@link Runnable}.          */
specifier|public
name|AzureCompact
name|build
parameter_list|()
block|{
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
operator|new
name|AzureCompact
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|int
name|segmentCacheSize
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|strictVersionCheck
decl_stmt|;
specifier|private
specifier|final
name|long
name|gcLogInterval
decl_stmt|;
specifier|private
name|AzureCompact
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|builder
operator|.
name|path
expr_stmt|;
name|this
operator|.
name|segmentCacheSize
operator|=
name|builder
operator|.
name|segmentCacheSize
expr_stmt|;
name|this
operator|.
name|strictVersionCheck
operator|=
operator|!
name|builder
operator|.
name|force
expr_stmt|;
name|this
operator|.
name|gcLogInterval
operator|=
name|builder
operator|.
name|gcLogInterval
expr_stmt|;
block|}
specifier|public
name|int
name|run
parameter_list|()
block|{
name|Stopwatch
name|watch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|SegmentNodeStorePersistence
name|persistence
init|=
name|newSegmentNodeStorePersistence
argument_list|(
name|SegmentStoreType
operator|.
name|AZURE
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SegmentArchiveManager
name|archiveManager
init|=
name|createArchiveManager
argument_list|(
name|persistence
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Compacting %s\n"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"    before\n"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|beforeArchives
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
try|try
block|{
name|beforeArchives
operator|=
name|archiveManager
operator|.
name|listArchives
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|printArchives
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|beforeArchives
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"    -> compacting\n"
argument_list|)
expr_stmt|;
try|try
init|(
name|FileStore
name|store
init|=
name|newFileStore
argument_list|(
name|persistence
argument_list|,
name|Files
operator|.
name|createTempDir
argument_list|()
argument_list|,
name|strictVersionCheck
argument_list|,
name|segmentCacheSize
argument_list|,
name|gcLogInterval
argument_list|)
init|)
block|{
if|if
condition|(
operator|!
name|store
operator|.
name|compactFull
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Compaction cancelled after %s.\n"
argument_list|,
name|printableStopwatch
argument_list|(
name|watch
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"    -> cleaning up\n"
argument_list|)
expr_stmt|;
name|store
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|JournalFile
name|journal
init|=
name|persistence
operator|.
name|getJournalFile
argument_list|()
decl_stmt|;
name|String
name|head
decl_stmt|;
try|try
init|(
name|JournalReader
name|journalReader
init|=
operator|new
name|JournalReader
argument_list|(
name|journal
argument_list|)
init|)
block|{
name|head
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"%s root %s\n"
argument_list|,
name|journalReader
operator|.
name|next
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|JournalFileWriter
name|journalWriter
init|=
name|journal
operator|.
name|openJournalWriter
argument_list|()
init|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"    -> writing new %s: %s\n"
argument_list|,
name|journal
operator|.
name|getName
argument_list|()
argument_list|,
name|head
argument_list|)
expr_stmt|;
name|journalWriter
operator|.
name|truncate
argument_list|()
expr_stmt|;
name|journalWriter
operator|.
name|writeLine
argument_list|(
name|head
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|watch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Compaction failed after %s.\n"
argument_list|,
name|printableStopwatch
argument_list|(
name|watch
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|watch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"    after\n"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|afterArchives
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
try|try
block|{
name|afterArchives
operator|=
name|archiveManager
operator|.
name|listArchives
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|printArchives
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|afterArchives
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Compaction succeeded in %s.\n"
argument_list|,
name|printableStopwatch
argument_list|(
name|watch
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|private
specifier|static
name|void
name|printArchives
parameter_list|(
name|PrintStream
name|s
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|archives
parameter_list|)
block|{
for|for
control|(
name|String
name|a
range|:
name|archives
control|)
block|{
name|s
operator|.
name|printf
argument_list|(
literal|"        %s\n"
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

