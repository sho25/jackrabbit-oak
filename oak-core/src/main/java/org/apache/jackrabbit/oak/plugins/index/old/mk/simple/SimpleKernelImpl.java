begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|old
operator|.
name|mk
operator|.
name|simple
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|AbstractBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|FileBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|CommitGate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|old
operator|.
name|mk
operator|.
name|ExceptionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|old
operator|.
name|mk
operator|.
name|wrapper
operator|.
name|MicroKernelWrapperBase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_comment
comment|/*  Node structure:  /head/rev = 100 /head/nanos = nanos /head/commit/diff = [+ "/test"{}] /head/commit/msg = "hello ..." /head/config/ (optional) /head/data/ /99/head/nanos = nanos /99/98/head /99/98/97/head /99/90/head /99/90/89/head  */
end_comment

begin_comment
comment|/**  * A simple MicroKernel implementation.  */
end_comment

begin_class
specifier|public
class|class
name|SimpleKernelImpl
extends|extends
name|MicroKernelWrapperBase
implements|implements
name|MicroKernel
block|{
specifier|private
specifier|static
specifier|final
name|int
name|REV_SKIP_OFFSET
init|=
literal|20
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|AbstractBlobStore
name|ds
decl_stmt|;
specifier|private
specifier|final
name|AscendingClock
name|clock
init|=
operator|new
name|AscendingClock
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CommitGate
name|gate
init|=
operator|new
name|CommitGate
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Cache
argument_list|<
name|Long
argument_list|,
name|Revision
argument_list|>
name|revisionCache
init|=
name|Cache
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|headRevId
decl_stmt|;
specifier|private
specifier|volatile
name|String
name|headRevision
decl_stmt|;
specifier|private
name|NodeMap
name|nodeMap
decl_stmt|;
specifier|private
name|Server
name|server
decl_stmt|;
specifier|private
name|boolean
name|disposed
decl_stmt|;
specifier|public
name|SimpleKernelImpl
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|boolean
name|startServer
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"server:"
argument_list|)
condition|)
block|{
name|startServer
operator|=
literal|true
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|"server:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|nodeMap
operator|=
operator|new
name|NodeMap
argument_list|()
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"fs:"
argument_list|)
condition|)
block|{
name|String
name|dir
init|=
name|name
operator|.
name|substring
argument_list|(
literal|"fs:"
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ds
operator|=
operator|new
name|FileBlobStore
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|nodeMap
operator|=
operator|new
name|NodeMapInDb
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ds
operator|=
operator|new
name|MemoryBlobStore
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|nodeMap
operator|.
name|getRootId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|NodeImpl
name|head
init|=
operator|new
name|NodeImpl
argument_list|(
name|nodeMap
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Revision
name|revNode
init|=
operator|new
name|Revision
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|head
operator|=
name|revNode
operator|.
name|store
argument_list|(
name|head
argument_list|,
operator|new
name|NodeImpl
argument_list|(
name|nodeMap
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|head
operator|.
name|addChildNode
argument_list|(
literal|"data"
argument_list|,
operator|new
name|NodeImpl
argument_list|(
name|nodeMap
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|NodeImpl
name|root
init|=
operator|new
name|NodeImpl
argument_list|(
name|nodeMap
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|root
operator|.
name|addChildNode
argument_list|(
literal|"head"
argument_list|,
name|head
argument_list|)
expr_stmt|;
name|nodeMap
operator|.
name|commit
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NodeImpl
name|head
init|=
name|getRoot
argument_list|()
operator|.
name|getNode
argument_list|(
literal|"head"
argument_list|)
decl_stmt|;
name|String
name|rev
init|=
name|head
operator|.
name|getProperty
argument_list|(
literal|"rev"
argument_list|)
decl_stmt|;
name|headRevId
operator|=
name|Revision
operator|.
name|parseId
argument_list|(
name|JsopTokenizer
operator|.
name|decodeQuoted
argument_list|(
name|rev
argument_list|)
argument_list|)
expr_stmt|;
name|applyConfig
argument_list|(
name|head
argument_list|)
expr_stmt|;
block|}
name|headRevision
operator|=
name|Revision
operator|.
name|formatId
argument_list|(
name|headRevId
argument_list|)
expr_stmt|;
if|if
condition|(
name|startServer
condition|)
block|{
name|server
operator|=
operator|new
name|Server
argument_list|(
name|this
argument_list|)
expr_stmt|;
try|try
block|{
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|applyConfig
parameter_list|(
name|NodeImpl
name|head
parameter_list|)
block|{
comment|// /head/config doesn't always exist
if|if
condition|(
name|head
operator|.
name|exists
argument_list|(
literal|"config"
argument_list|)
condition|)
block|{
name|NodeImpl
name|config
init|=
name|head
operator|.
name|getNode
argument_list|(
literal|"config"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|size
init|=
name|config
operator|.
name|getPropertyCount
argument_list|()
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|nodeMap
operator|.
name|setSetting
argument_list|(
name|config
operator|.
name|getProperty
argument_list|(
name|i
argument_list|)
argument_list|,
name|config
operator|.
name|getPropertyValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
name|commitStream
parameter_list|(
name|String
name|rootPath
parameter_list|,
name|JsopReader
name|jsonDiff
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|revisionId
operator|=
name|revisionId
operator|==
literal|null
condition|?
name|headRevision
else|:
name|revisionId
expr_stmt|;
comment|// TODO message should be json
comment|// TODO read / write version
comment|// TODO getJournal and getRevision don't have a path,
comment|// which means we can't implement access rights using path prefixes
try|try
block|{
return|return
name|doCommit
argument_list|(
name|rootPath
argument_list|,
name|jsonDiff
argument_list|,
name|revisionId
argument_list|,
name|message
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|doCommit
parameter_list|(
name|String
name|rootPath
parameter_list|,
name|JsopReader
name|t
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|long
name|oldRevision
init|=
name|headRevId
decl_stmt|,
name|rev
init|=
name|headRevId
operator|+
literal|1
decl_stmt|;
name|NodeImpl
name|root
init|=
name|nodeMap
operator|.
name|getRootId
argument_list|()
operator|.
name|getNode
argument_list|(
name|nodeMap
argument_list|)
decl_stmt|;
name|NodeImpl
name|head
init|=
name|root
operator|.
name|getNode
argument_list|(
literal|"head"
argument_list|)
decl_stmt|,
name|oldHead
init|=
name|head
decl_stmt|;
name|NodeImpl
name|data
init|=
name|head
operator|.
name|getNode
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
name|JsopWriter
name|diff
init|=
operator|new
name|JsopStream
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|r
init|=
name|t
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|JsopReader
operator|.
name|END
condition|)
block|{
break|break;
block|}
name|String
name|path
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|rootPath
argument_list|,
name|t
operator|.
name|readString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|from
init|=
name|PathUtils
operator|.
name|relativize
argument_list|(
literal|"/"
argument_list|,
name|path
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|r
condition|)
block|{
case|case
literal|'+'
case|:
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|diff
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|'{'
argument_list|)
condition|)
block|{
name|NodeImpl
name|n
init|=
name|NodeImpl
operator|.
name|parse
argument_list|(
name|nodeMap
argument_list|,
name|t
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|data
operator|=
name|data
operator|.
name|cloneAndAddChildNode
argument_list|(
name|from
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|n
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|n
operator|.
name|append
argument_list|(
name|diff
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|value
init|=
name|t
operator|.
name|readRawValue
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|nodeName
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|String
name|propertyName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|from
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|getNode
argument_list|(
name|nodeName
argument_list|)
operator|.
name|hasProperty
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|get
argument_list|(
literal|"Property already exists: "
operator|+
name|propertyName
argument_list|)
throw|;
block|}
name|data
operator|=
name|data
operator|.
name|cloneAndSetProperty
argument_list|(
name|from
argument_list|,
name|value
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|diff
operator|.
name|encodedValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|diff
operator|.
name|newline
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'-'
case|:
name|diff
operator|.
name|tag
argument_list|(
literal|'-'
argument_list|)
operator|.
name|value
argument_list|(
name|path
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|exists
argument_list|(
name|from
argument_list|)
operator|||
operator|!
name|getRevisionDataRoot
argument_list|(
name|revisionId
argument_list|)
operator|.
name|exists
argument_list|(
name|from
argument_list|)
condition|)
block|{
comment|// this will fail if the node didn't exist
name|data
operator|=
name|data
operator|.
name|cloneAndRemoveChildNode
argument_list|(
name|from
argument_list|,
name|rev
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'^'
case|:
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|boolean
name|isConfigChange
init|=
name|from
operator|.
name|startsWith
argument_list|(
literal|":root/head/config/"
argument_list|)
decl_stmt|;
name|String
name|value
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|NULL
argument_list|)
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
name|diff
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|path
argument_list|)
operator|.
name|value
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|t
operator|.
name|readRawValue
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|String
name|nodeName
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|String
name|propertyName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|from
argument_list|)
decl_stmt|;
if|if
condition|(
name|isConfigChange
operator|||
name|data
operator|.
name|getNode
argument_list|(
name|nodeName
argument_list|)
operator|.
name|hasProperty
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|diff
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|diff
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
block|}
name|diff
operator|.
name|key
argument_list|(
name|path
argument_list|)
operator|.
name|encodedValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isConfigChange
condition|)
block|{
name|String
name|p
init|=
name|PathUtils
operator|.
name|relativize
argument_list|(
literal|":root/head"
argument_list|,
name|from
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|head
operator|.
name|exists
argument_list|(
literal|"config"
argument_list|)
condition|)
block|{
name|head
operator|=
name|head
operator|.
name|setChild
argument_list|(
literal|"config"
argument_list|,
operator|new
name|NodeImpl
argument_list|(
name|nodeMap
argument_list|,
name|rev
argument_list|)
argument_list|,
name|rev
argument_list|)
expr_stmt|;
block|}
name|head
operator|=
name|head
operator|.
name|cloneAndSetProperty
argument_list|(
name|p
argument_list|,
name|value
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|applyConfig
argument_list|(
name|head
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|data
operator|=
name|data
operator|.
name|cloneAndSetProperty
argument_list|(
name|from
argument_list|,
name|value
argument_list|,
name|rev
argument_list|)
expr_stmt|;
block|}
name|diff
operator|.
name|newline
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'>'
case|:
block|{
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|diff
operator|.
name|tag
argument_list|(
literal|'>'
argument_list|)
operator|.
name|key
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|String
name|position
decl_stmt|,
name|target
decl_stmt|,
name|to
decl_stmt|;
name|boolean
name|rename
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|'{'
argument_list|)
condition|)
block|{
name|rename
operator|=
literal|false
expr_stmt|;
name|position
operator|=
name|t
operator|.
name|readString
argument_list|()
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|target
operator|=
name|t
operator|.
name|readString
argument_list|()
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
name|diff
operator|.
name|object
argument_list|()
operator|.
name|key
argument_list|(
name|position
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|target
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|rootPath
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
name|diff
operator|.
name|value
argument_list|(
name|target
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rename
operator|=
literal|true
expr_stmt|;
name|position
operator|=
literal|null
expr_stmt|;
name|target
operator|=
name|t
operator|.
name|readString
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|target
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|rootPath
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
name|diff
operator|.
name|value
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
name|diff
operator|.
name|newline
argument_list|()
expr_stmt|;
name|boolean
name|before
init|=
literal|false
decl_stmt|;
if|if
condition|(
literal|"last"
operator|.
name|equals
argument_list|(
name|position
argument_list|)
condition|)
block|{
name|target
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|target
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|position
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"first"
operator|.
name|equals
argument_list|(
name|position
argument_list|)
condition|)
block|{
name|target
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|target
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|position
operator|=
literal|null
expr_stmt|;
name|before
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"before"
operator|.
name|equals
argument_list|(
name|position
argument_list|)
condition|)
block|{
name|position
operator|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|target
operator|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|target
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|target
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|before
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"after"
operator|.
name|equals
argument_list|(
name|position
argument_list|)
condition|)
block|{
name|position
operator|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|target
operator|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|target
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|target
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|position
operator|==
literal|null
condition|)
block|{
comment|// move
block|}
else|else
block|{
throw|throw
name|ExceptionFactory
operator|.
name|get
argument_list|(
literal|"position: "
operator|+
name|position
argument_list|)
throw|;
block|}
name|to
operator|=
name|PathUtils
operator|.
name|relativize
argument_list|(
literal|"/"
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|boolean
name|inPlaceRename
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|rename
condition|)
block|{
if|if
condition|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|from
argument_list|)
operator|.
name|equals
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|to
argument_list|)
argument_list|)
condition|)
block|{
name|inPlaceRename
operator|=
literal|true
expr_stmt|;
name|position
operator|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|from
argument_list|)
expr_stmt|;
block|}
block|}
name|NodeImpl
name|node
init|=
name|data
operator|.
name|getNode
argument_list|(
name|from
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|inPlaceRename
condition|)
block|{
name|data
operator|=
name|data
operator|.
name|cloneAndRemoveChildNode
argument_list|(
name|from
argument_list|,
name|rev
argument_list|)
expr_stmt|;
block|}
name|data
operator|=
name|data
operator|.
name|cloneAndAddChildNode
argument_list|(
name|to
argument_list|,
name|before
argument_list|,
name|position
argument_list|,
name|node
argument_list|,
name|rev
argument_list|)
expr_stmt|;
if|if
condition|(
name|inPlaceRename
condition|)
block|{
name|data
operator|=
name|data
operator|.
name|cloneAndRemoveChildNode
argument_list|(
name|from
argument_list|,
name|rev
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|'*'
case|:
block|{
comment|// TODO possibly support target position notation
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|target
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|target
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|rootPath
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
name|diff
operator|.
name|tag
argument_list|(
literal|'*'
argument_list|)
operator|.
name|key
argument_list|(
name|path
argument_list|)
operator|.
name|value
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|String
name|to
init|=
name|PathUtils
operator|.
name|relativize
argument_list|(
literal|"/"
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|NodeImpl
name|node
init|=
name|data
operator|.
name|getNode
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|JsopStream
name|json
init|=
operator|new
name|JsopStream
argument_list|()
decl_stmt|;
name|node
operator|.
name|append
argument_list|(
name|json
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|json
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|NodeImpl
name|n2
init|=
name|NodeImpl
operator|.
name|parse
argument_list|(
name|nodeMap
argument_list|,
name|json
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|data
operator|=
name|data
operator|.
name|cloneAndAddChildNode
argument_list|(
name|to
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|n2
argument_list|,
name|rev
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
name|ExceptionFactory
operator|.
name|get
argument_list|(
literal|"token: "
operator|+
operator|(
name|char
operator|)
name|t
operator|.
name|getTokenType
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|head
operator|=
name|head
operator|.
name|setChild
argument_list|(
literal|"data"
argument_list|,
name|data
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|Revision
name|revNode
init|=
operator|new
name|Revision
argument_list|(
name|rev
argument_list|,
name|clock
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|diff
operator|.
name|toString
argument_list|()
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|revisionCache
operator|.
name|put
argument_list|(
name|rev
argument_list|,
name|revNode
argument_list|)
expr_stmt|;
name|head
operator|=
name|revNode
operator|.
name|store
argument_list|(
name|head
argument_list|,
operator|new
name|NodeImpl
argument_list|(
name|nodeMap
argument_list|,
name|rev
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|=
name|root
operator|.
name|setChild
argument_list|(
literal|"head"
argument_list|,
name|head
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|String
name|old
init|=
name|Revision
operator|.
name|formatId
argument_list|(
name|oldRevision
argument_list|)
decl_stmt|;
name|NodeImpl
name|oldRev
init|=
operator|new
name|NodeImpl
argument_list|(
name|nodeMap
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|oldRev
operator|.
name|addChildNode
argument_list|(
literal|"head"
argument_list|,
name|oldHead
argument_list|)
expr_stmt|;
name|String
name|lastRev
init|=
name|Revision
operator|.
name|formatId
argument_list|(
name|oldRevision
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|exists
argument_list|(
name|lastRev
argument_list|)
condition|)
block|{
name|NodeImpl
name|lastRevNode
init|=
name|root
operator|.
name|getNode
argument_list|(
name|lastRev
argument_list|)
decl_stmt|;
name|root
operator|=
name|root
operator|.
name|cloneAndRemoveChildNode
argument_list|(
name|lastRev
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|oldRev
operator|.
name|setChild
argument_list|(
name|lastRev
argument_list|,
name|lastRevNode
argument_list|,
name|rev
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldRevision
operator|%
name|REV_SKIP_OFFSET
operator|==
literal|0
condition|)
block|{
name|long
name|skip
init|=
name|oldRevision
operator|-
name|REV_SKIP_OFFSET
decl_stmt|;
name|NodeImpl
name|n
init|=
name|getRevisionNode
argument_list|(
name|getRoot
argument_list|()
argument_list|,
name|skip
argument_list|,
name|skip
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
name|oldRev
operator|.
name|setChild
argument_list|(
name|Revision
operator|.
name|formatId
argument_list|(
name|skip
argument_list|)
argument_list|,
name|n
argument_list|,
name|rev
argument_list|)
expr_stmt|;
comment|// TODO remove old link to reduce descendant count
block|}
block|}
block|}
name|root
operator|=
name|root
operator|.
name|setChild
argument_list|(
name|old
argument_list|,
name|oldRev
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|nodeMap
operator|.
name|commit
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|headRevId
operator|=
name|rev
expr_stmt|;
name|headRevision
operator|=
name|Revision
operator|.
name|formatId
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|gate
operator|.
name|commit
argument_list|(
name|headRevision
argument_list|)
expr_stmt|;
return|return
name|headRevision
return|;
block|}
specifier|private
name|NodeImpl
name|getRoot
parameter_list|()
block|{
return|return
name|nodeMap
operator|.
name|getRootId
argument_list|()
operator|.
name|getNode
argument_list|(
name|nodeMap
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHeadRevision
parameter_list|()
block|{
return|return
name|headRevision
return|;
block|}
annotation|@
name|Override
specifier|public
name|JsopReader
name|getRevisionsStream
parameter_list|(
name|long
name|since
parameter_list|,
name|int
name|maxEntries
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|NodeImpl
name|node
init|=
name|getRoot
argument_list|()
decl_stmt|;
name|long
name|sinceNanos
init|=
name|since
operator|*
literal|1000000
decl_stmt|;
name|ArrayList
argument_list|<
name|Revision
argument_list|>
name|revisions
init|=
operator|new
name|ArrayList
argument_list|<
name|Revision
argument_list|>
argument_list|()
decl_stmt|;
name|Revision
name|r
init|=
name|Revision
operator|.
name|get
argument_list|(
name|node
operator|.
name|getNode
argument_list|(
literal|"head"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sinceNanos
argument_list|<
name|r
operator|.
name|getNanos
operator|(
operator|)
operator|&&
name|maxEntries
argument_list|>
literal|0
condition|)
block|{
name|revisions
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
while|while
condition|(
name|revisions
operator|.
name|size
argument_list|()
operator|<
name|maxEntries
condition|)
block|{
name|String
name|newest
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
condition|;
name|i
operator|++
control|)
block|{
name|String
name|next
init|=
name|node
operator|.
name|getChildNodeName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
operator|!
name|next
operator|.
name|equals
argument_list|(
literal|"head"
argument_list|)
operator|&&
operator|!
name|next
operator|.
name|equals
argument_list|(
literal|"config"
argument_list|)
condition|)
block|{
if|if
condition|(
name|newest
operator|==
literal|null
operator|||
name|next
operator|.
name|compareTo
argument_list|(
name|newest
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|newest
operator|=
name|next
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|newest
operator|!=
literal|null
condition|)
block|{
name|r
operator|=
name|Revision
operator|.
name|get
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|revisions
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|JsopStream
name|buff
init|=
operator|new
name|JsopStream
argument_list|()
operator|.
name|array
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|revisions
argument_list|)
expr_stmt|;
for|for
control|(
name|Revision
name|rev
range|:
name|revisions
control|)
block|{
if|if
condition|(
name|rev
operator|.
name|getNanos
argument_list|()
operator|>
name|sinceNanos
condition|)
block|{
name|buff
operator|.
name|encodedValue
argument_list|(
name|rev
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buff
operator|.
name|endArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|waitForCommit
parameter_list|(
name|String
name|oldHeadRevisionId
parameter_list|,
name|long
name|maxWaitMillis
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|gate
operator|.
name|waitForCommit
argument_list|(
name|oldHeadRevisionId
argument_list|,
name|maxWaitMillis
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|JsopReader
name|getJournalStream
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|fromRevisionId
operator|=
name|fromRevisionId
operator|==
literal|null
condition|?
name|headRevision
else|:
name|fromRevisionId
expr_stmt|;
name|toRevisionId
operator|=
name|toRevisionId
operator|==
literal|null
condition|?
name|headRevision
else|:
name|toRevisionId
expr_stmt|;
name|long
name|fromRev
init|=
name|Revision
operator|.
name|parseId
argument_list|(
name|fromRevisionId
argument_list|)
decl_stmt|;
name|long
name|toRev
init|=
name|Revision
operator|.
name|parseId
argument_list|(
name|toRevisionId
argument_list|)
decl_stmt|;
name|NodeImpl
name|node
init|=
name|getRoot
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Revision
argument_list|>
name|revisions
init|=
operator|new
name|ArrayList
argument_list|<
name|Revision
argument_list|>
argument_list|()
decl_stmt|;
name|Revision
name|r
init|=
name|Revision
operator|.
name|get
argument_list|(
name|node
operator|.
name|getNode
argument_list|(
literal|"head"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getId
argument_list|()
operator|>=
name|fromRev
operator|&&
name|r
operator|.
name|getId
argument_list|()
operator|<=
name|toRev
condition|)
block|{
name|revisions
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|getId
argument_list|()
operator|>
name|fromRev
condition|)
block|{
name|node
operator|=
name|getRevisionNode
argument_list|(
name|node
argument_list|,
name|fromRev
argument_list|,
name|toRev
argument_list|)
expr_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|r
operator|=
name|Revision
operator|.
name|get
argument_list|(
name|node
operator|.
name|getNode
argument_list|(
literal|"head"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getId
argument_list|()
operator|>=
name|fromRev
operator|&&
name|r
operator|.
name|getId
argument_list|()
operator|<=
name|toRev
condition|)
block|{
name|r
operator|=
name|revisionCache
operator|.
name|replace
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|revisions
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|String
name|next
init|=
name|Revision
operator|.
name|formatId
argument_list|(
name|r
operator|.
name|getId
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|exists
argument_list|(
name|next
argument_list|)
condition|)
block|{
break|break;
block|}
name|node
operator|=
name|node
operator|.
name|getNode
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
name|JsopStream
name|buff
init|=
operator|new
name|JsopStream
argument_list|()
operator|.
name|array
argument_list|()
operator|.
name|newline
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|revisions
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Revision
name|rev
init|=
name|revisions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|rev
operator|.
name|getId
argument_list|()
operator|>=
name|fromRev
operator|&&
name|rev
operator|.
name|getId
argument_list|()
operator|<=
name|toRev
condition|)
block|{
name|rev
operator|.
name|appendJournal
argument_list|(
name|buff
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buff
operator|.
name|endArray
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|NodeImpl
name|getRevisionNode
parameter_list|(
name|NodeImpl
name|node
parameter_list|,
name|long
name|fromRev
parameter_list|,
name|long
name|toRev
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|next
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|nextRev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
condition|;
name|i
operator|++
control|)
block|{
name|String
name|n
init|=
name|node
operator|.
name|getChildNodeName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
literal|"head"
operator|.
name|equals
argument_list|(
name|n
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|long
name|rev
init|=
name|Revision
operator|.
name|parseId
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
operator|-
literal|1
operator|||
operator|(
name|rev
operator|>=
name|toRev
operator|&&
operator|(
name|rev
operator|<
name|next
operator|||
name|next
operator|<
name|toRev
operator|)
operator|)
condition|)
block|{
name|next
operator|=
name|rev
expr_stmt|;
name|nextRev
operator|=
name|n
expr_stmt|;
block|}
block|}
if|if
condition|(
name|next
operator|==
operator|-
literal|1
operator|||
name|fromRev
operator|>
name|next
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|node
operator|=
name|node
operator|.
name|getNode
argument_list|(
name|nextRev
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|<=
name|toRev
condition|)
block|{
return|return
name|node
return|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|JsopReader
name|diffStream
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|fromRevisionId
operator|=
name|fromRevisionId
operator|==
literal|null
condition|?
name|headRevision
else|:
name|fromRevisionId
expr_stmt|;
name|toRevisionId
operator|=
name|toRevisionId
operator|==
literal|null
condition|?
name|headRevision
else|:
name|toRevisionId
expr_stmt|;
comment|// TODO implement if required
return|return
operator|new
name|JsopStream
argument_list|()
return|;
block|}
comment|/**      * Get the nodes. The following prefixes are supported:      *<ul><li>:root - get the root node (including all old revisions)      *</li><li>:info - get internal info such as the node count      *</li></ul>      *      * @param path the path      * @param revisionId the revision      * @return the json string      */
annotation|@
name|Override
specifier|public
name|JsopReader
name|getNodesStream
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|int
name|depth
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|count
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
name|revisionId
operator|=
name|revisionId
operator|==
literal|null
condition|?
name|headRevision
else|:
name|revisionId
expr_stmt|;
comment|// TODO offset> 0 should mean the properties are not included
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
name|count
operator|=
name|nodeMap
operator|.
name|getMaxMemoryChildren
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|get
argument_list|(
literal|"Not an absolute path: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|NodeImpl
name|n
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/:"
argument_list|)
condition|)
block|{
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/:root"
argument_list|)
condition|)
block|{
name|n
operator|=
name|getRoot
argument_list|()
operator|.
name|getNode
argument_list|(
name|PathUtils
operator|.
name|relativize
argument_list|(
literal|"/:root"
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/:info"
argument_list|)
condition|)
block|{
name|n
operator|=
name|nodeMap
operator|.
name|getInfo
argument_list|(
name|PathUtils
operator|.
name|relativize
argument_list|(
literal|"/:info"
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|n
operator|=
name|getRevisionDataRoot
argument_list|(
name|revisionId
argument_list|)
operator|.
name|getNode
argument_list|(
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|n
operator|=
name|getRevisionDataRoot
argument_list|(
name|revisionId
argument_list|)
operator|.
name|getNode
argument_list|(
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|JsopStream
name|json
init|=
operator|new
name|JsopStream
argument_list|()
decl_stmt|;
name|n
operator|.
name|append
argument_list|(
name|json
argument_list|,
name|depth
argument_list|,
name|offset
argument_list|,
name|count
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|json
return|;
block|}
specifier|private
name|NodeImpl
name|getRevisionDataRoot
parameter_list|(
name|String
name|revisionId
parameter_list|)
block|{
name|NodeImpl
name|rev
init|=
name|getRevisionIfExists
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rev
operator|==
literal|null
condition|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|get
argument_list|(
literal|"Revision not found: "
operator|+
name|revisionId
argument_list|)
throw|;
block|}
name|rev
operator|=
name|rev
operator|.
name|getNode
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
return|return
name|rev
return|;
block|}
specifier|private
name|NodeImpl
name|getRevisionIfExists
parameter_list|(
name|String
name|revisionId
parameter_list|)
block|{
name|NodeImpl
name|node
init|=
name|getRoot
argument_list|()
decl_stmt|;
name|NodeImpl
name|head
init|=
name|node
operator|.
name|getNode
argument_list|(
literal|"head"
argument_list|)
decl_stmt|;
name|String
name|headRev
decl_stmt|;
name|headRev
operator|=
name|head
operator|.
name|getProperty
argument_list|(
literal|"rev"
argument_list|)
expr_stmt|;
name|headRev
operator|=
name|headRev
operator|==
literal|null
condition|?
literal|null
else|:
name|JsopTokenizer
operator|.
name|decodeQuoted
argument_list|(
name|headRev
argument_list|)
expr_stmt|;
comment|// we can't rely on headRevId, as it's a volatile field
if|if
condition|(
name|revisionId
operator|.
name|equals
argument_list|(
name|headRev
argument_list|)
condition|)
block|{
return|return
name|head
return|;
block|}
else|else
block|{
name|long
name|rev
init|=
name|Revision
operator|.
name|parseId
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
name|NodeImpl
name|rnode
init|=
name|getRevisionNode
argument_list|(
name|node
argument_list|,
name|rev
argument_list|,
name|rev
argument_list|)
decl_stmt|;
if|if
condition|(
name|rnode
operator|!=
literal|null
condition|)
block|{
return|return
name|rnode
operator|.
name|getNode
argument_list|(
literal|"head"
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|nodeExists
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
name|revisionId
operator|=
name|revisionId
operator|==
literal|null
condition|?
name|headRevision
else|:
name|revisionId
expr_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|get
argument_list|(
literal|"Not an absolute path: "
operator|+
name|path
argument_list|)
throw|;
block|}
if|if
condition|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
literal|"/:info"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|getRevisionDataRoot
argument_list|(
name|revisionId
argument_list|)
operator|.
name|exists
argument_list|(
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
name|revisionId
operator|=
name|revisionId
operator|==
literal|null
condition|?
name|headRevision
else|:
name|revisionId
expr_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|get
argument_list|(
literal|"Not an absolute path: "
operator|+
name|path
argument_list|)
throw|;
block|}
return|return
name|getRevisionDataRoot
argument_list|(
name|revisionId
argument_list|)
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
operator|.
name|getChildNodeCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{
try|try
block|{
return|return
name|ds
operator|.
name|getBlobLength
argument_list|(
name|blobId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
block|{
try|try
block|{
return|return
name|ds
operator|.
name|readBlob
argument_list|(
name|blobId
argument_list|,
name|pos
argument_list|,
name|buff
argument_list|,
name|off
argument_list|,
name|length
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|write
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
try|try
block|{
return|return
name|ds
operator|.
name|writeBlob
argument_list|(
name|in
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|dispose
parameter_list|()
block|{
if|if
condition|(
operator|!
name|disposed
condition|)
block|{
name|disposed
operator|=
literal|true
expr_stmt|;
name|gate
operator|.
name|commit
argument_list|(
literal|"end"
argument_list|)
expr_stmt|;
name|nodeMap
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"simple:"
operator|+
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|branch
parameter_list|(
name|String
name|trunkRevisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|trunkRevisionId
operator|=
name|trunkRevisionId
operator|==
literal|null
condition|?
name|headRevision
else|:
name|trunkRevisionId
expr_stmt|;
comment|// TODO OAK-45 support
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|merge
parameter_list|(
name|String
name|branchRevisionId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// TODO OAK-45 support
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

