begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
operator|.
name|toStringHelper
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|InvalidItemStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_comment
comment|/**  * {@code PropertyDelegate} serve as internal representations of {@code Property}s.  * Most methods of this class throw an {@code InvalidItemStateException}  * exception if the instance is stale. An instance is stale if the underlying  * items does not exist anymore.  */
end_comment

begin_class
specifier|public
class|class
name|PropertyDelegate
extends|extends
name|ItemDelegate
block|{
comment|/** The underlying {@link org.apache.jackrabbit.oak.api.Tree} of this property's parent */
specifier|private
specifier|final
name|Tree
name|parent
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
annotation|@
name|CheckForNull
specifier|private
name|PropertyState
name|state
decl_stmt|;
name|PropertyDelegate
parameter_list|(
name|SessionDelegate
name|sessionDelegate
parameter_list|,
name|Tree
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|sessionDelegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|checkNotNull
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|parent
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * The session has been updated since the last time this property delegate      * was accessed, so we need to re-retrieve the property state to get any      * potential updates. It might also be that this property was removed,      * in which case the {@link #state} reference will be {@code null}.      */
annotation|@
name|Override
specifier|protected
name|void
name|update
parameter_list|()
block|{
name|state
operator|=
name|parent
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|PathUtils
operator|.
name|concat
argument_list|(
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|public
name|NodeDelegate
name|getParent
parameter_list|()
block|{
return|return
name|parent
operator|.
name|exists
argument_list|()
condition|?
operator|new
name|NodeDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|parent
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
name|state
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|public
name|Status
name|getStatus
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getPropertyStatus
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isProtected
parameter_list|()
throws|throws
name|InvalidItemStateException
block|{
return|return
name|getParent
argument_list|()
operator|.
name|isProtected
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|PropertyState
name|getPropertyState
parameter_list|()
throws|throws
name|InvalidItemStateException
block|{
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
return|return
name|state
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|InvalidItemStateException
argument_list|(
literal|"The "
operator|+
name|name
operator|+
literal|" property does not exist"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Nonnull
specifier|public
name|PropertyState
name|getSingleState
parameter_list|()
throws|throws
name|InvalidItemStateException
throws|,
name|ValueFormatException
block|{
name|PropertyState
name|p
init|=
name|getPropertyState
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isArray
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ValueFormatException
argument_list|(
name|p
operator|+
literal|" is multi-valued."
argument_list|)
throw|;
block|}
return|return
name|p
return|;
block|}
specifier|public
name|boolean
name|getBoolean
parameter_list|()
throws|throws
name|ValueFormatException
throws|,
name|InvalidItemStateException
block|{
return|return
name|getSingleState
argument_list|()
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
return|;
block|}
specifier|public
name|String
name|getString
parameter_list|()
throws|throws
name|ValueFormatException
throws|,
name|InvalidItemStateException
block|{
return|return
name|getSingleState
argument_list|()
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDate
parameter_list|()
throws|throws
name|ValueFormatException
throws|,
name|InvalidItemStateException
block|{
return|return
name|getSingleState
argument_list|()
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|PropertyState
name|getMultiState
parameter_list|()
throws|throws
name|InvalidItemStateException
throws|,
name|ValueFormatException
block|{
name|PropertyState
name|p
init|=
name|getPropertyState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|isArray
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ValueFormatException
argument_list|(
name|p
operator|+
literal|" is single-valued."
argument_list|)
throw|;
block|}
return|return
name|p
return|;
block|}
specifier|public
name|void
name|setState
parameter_list|(
annotation|@
name|Nonnull
name|PropertyState
name|propertyState
parameter_list|)
block|{
name|parent
operator|.
name|setProperty
argument_list|(
name|propertyState
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove the property      */
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|()
block|{
if|if
condition|(
name|parent
operator|.
name|hasProperty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|parent
operator|.
name|removeProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toStringHelper
argument_list|(
name|this
argument_list|)
operator|.
name|add
argument_list|(
literal|"parent"
argument_list|,
name|parent
argument_list|)
operator|.
name|add
argument_list|(
literal|"property"
argument_list|,
name|parent
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

