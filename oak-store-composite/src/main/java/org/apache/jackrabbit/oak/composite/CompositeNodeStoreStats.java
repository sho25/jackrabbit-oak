begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|stats
operator|.
name|TimeSeries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|CounterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|HistogramStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatsOptions
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|stats
operator|.
name|TimeSeriesStatsUtil
operator|.
name|asCompositeData
import|;
end_import

begin_class
specifier|public
class|class
name|CompositeNodeStoreStats
implements|implements
name|CompositeNodeStoreStatsMBean
implements|,
name|CompositeNodeStoreMonitor
block|{
specifier|public
specifier|static
specifier|final
name|String
name|STRING_CACHE_SIZE
init|=
literal|"STRING_CACHE_SIZE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NODE_PATH_DEPTH
init|=
literal|"_PATH_DEPTH"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NODE_SWITCH_TO_DEFAULT_MOUNT
init|=
literal|"_SWITCH_TO_DEFAULT_MOUNT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NODE_SWITCH_TO_NON_DEFAULT_MOUNT
init|=
literal|"_SWITCH_TO_NON_DEFAULT_MOUNT"
decl_stmt|;
specifier|private
specifier|final
name|StatisticsProvider
name|statisticsProvider
decl_stmt|;
specifier|private
specifier|final
name|CounterStats
name|stringCacheSize
decl_stmt|;
specifier|private
specifier|final
name|HistogramStats
name|nodePathDepths
decl_stmt|;
specifier|private
specifier|final
name|CounterStats
name|nodeSwitchToDefaultMount
decl_stmt|;
specifier|private
specifier|final
name|CounterStats
name|nodeSwitchToNonDefaultMount
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|nodePathCounts
decl_stmt|;
specifier|private
name|long
name|maxNodePathCount
decl_stmt|;
specifier|private
specifier|final
name|long
name|nodePathCountSizeLimit
decl_stmt|;
specifier|private
specifier|final
name|long
name|nodePathCountValueLimit
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|countPaths
decl_stmt|;
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
specifier|public
name|CompositeNodeStoreStats
parameter_list|(
name|StatisticsProvider
name|statisticsProvider
parameter_list|,
name|String
name|prefix
parameter_list|,
name|boolean
name|countPaths
parameter_list|)
block|{
name|this
argument_list|(
name|statisticsProvider
argument_list|,
name|prefix
argument_list|,
name|countPaths
argument_list|,
literal|100
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CompositeNodeStoreStats
parameter_list|(
name|StatisticsProvider
name|statisticsProvider
parameter_list|,
name|String
name|prefix
parameter_list|,
name|boolean
name|countPaths
parameter_list|,
name|long
name|nodePathCountSizeLimit
parameter_list|,
name|long
name|nodePathCountValueLimit
parameter_list|)
block|{
name|this
operator|.
name|statisticsProvider
operator|=
name|statisticsProvider
expr_stmt|;
name|this
operator|.
name|stringCacheSize
operator|=
name|statisticsProvider
operator|.
name|getCounterStats
argument_list|(
name|prefix
operator|+
name|STRING_CACHE_SIZE
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodePathDepths
operator|=
name|statisticsProvider
operator|.
name|getHistogram
argument_list|(
name|prefix
operator|+
name|NODE_PATH_DEPTH
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeSwitchToDefaultMount
operator|=
name|statisticsProvider
operator|.
name|getCounterStats
argument_list|(
name|prefix
operator|+
name|NODE_SWITCH_TO_DEFAULT_MOUNT
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeSwitchToNonDefaultMount
operator|=
name|statisticsProvider
operator|.
name|getCounterStats
argument_list|(
name|prefix
operator|+
name|NODE_SWITCH_TO_NON_DEFAULT_MOUNT
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodePathCounts
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxNodePathCount
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|countPaths
operator|=
name|countPaths
expr_stmt|;
name|this
operator|.
name|nodePathCountSizeLimit
operator|=
name|nodePathCountSizeLimit
expr_stmt|;
name|this
operator|.
name|nodePathCountValueLimit
operator|=
name|nodePathCountValueLimit
expr_stmt|;
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCreateNodeObject
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|nodePathDepths
operator|.
name|update
argument_list|(
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|countPaths
condition|)
block|{
name|updatePathCount
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSwitchNodeToNative
parameter_list|(
name|Mount
name|mount
parameter_list|)
block|{
if|if
condition|(
name|mount
operator|.
name|isDefault
argument_list|()
condition|)
block|{
name|nodeSwitchToDefaultMount
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|nodeSwitchToNonDefaultMount
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAddStringCacheEntry
parameter_list|()
block|{
name|stringCacheSize
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getStringCacheSize
parameter_list|()
block|{
return|return
name|getCompositeData
argument_list|(
name|STRING_CACHE_SIZE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getNodeSwitchToDefaultMount
parameter_list|()
block|{
return|return
name|getCompositeData
argument_list|(
name|NODE_SWITCH_TO_DEFAULT_MOUNT
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getNodeSwitchToNonDefaultMount
parameter_list|()
block|{
return|return
name|getCompositeData
argument_list|(
name|NODE_SWITCH_TO_NON_DEFAULT_MOUNT
argument_list|)
return|;
block|}
specifier|private
name|CompositeData
name|getCompositeData
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|asCompositeData
argument_list|(
name|getTimeSeries
argument_list|(
name|prefix
operator|+
name|name
argument_list|)
argument_list|,
name|prefix
operator|+
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TabularData
name|getNodePathCounts
parameter_list|()
throws|throws
name|OpenDataException
block|{
return|return
name|pathsTable
argument_list|(
name|nodePathCounts
argument_list|,
literal|"popularNodeStatePaths"
argument_list|,
literal|"Popular node state paths"
argument_list|)
return|;
block|}
specifier|private
name|TimeSeries
name|getTimeSeries
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|statisticsProvider
operator|.
name|getStats
argument_list|()
operator|.
name|getTimeSeries
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
specifier|synchronized
name|void
name|updatePathCount
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|long
name|newValue
init|=
name|nodePathCounts
operator|.
name|compute
argument_list|(
name|path
argument_list|,
operator|(
name|p
expr|,
name|v
operator|)
operator|->
name|v
operator|==
literal|null
condition|?
literal|1
else|:
name|v
operator|+
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|removeZeros
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|newValue
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|nodePathCounts
operator|.
name|size
argument_list|()
operator|>=
name|nodePathCountSizeLimit
condition|)
block|{
name|nodePathCounts
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|e
lambda|->
name|nodePathCounts
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|maxNodePathCount
operator|--
expr_stmt|;
name|removeZeros
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maxNodePathCount
operator|<
name|newValue
condition|)
block|{
name|maxNodePathCount
operator|=
name|newValue
expr_stmt|;
if|if
condition|(
name|maxNodePathCount
operator|>=
name|nodePathCountValueLimit
condition|)
block|{
name|nodePathCounts
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|e
lambda|->
name|nodePathCounts
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|maxNodePathCount
operator|/=
literal|2
expr_stmt|;
name|removeZeros
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|removeZeros
condition|)
block|{
name|Iterator
argument_list|<
name|Long
argument_list|>
name|it
init|=
name|nodePathCounts
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|it
operator|.
name|next
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|TabularData
name|pathsTable
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|paths
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|CompositeType
name|pathRowType
init|=
operator|new
name|CompositeType
argument_list|(
literal|"compositePath"
argument_list|,
literal|"Path"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"count"
block|,
literal|"path"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"count"
block|,
literal|"path"
block|}
argument_list|,
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|STRING
block|}
argument_list|)
decl_stmt|;
name|TabularDataSupport
name|tabularData
init|=
operator|new
name|TabularDataSupport
argument_list|(
operator|new
name|TabularType
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
name|pathRowType
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"path"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|paths
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
name|Comparator
operator|.
expr|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
operator|>
name|comparingLong
argument_list|(
name|Entry
operator|::
name|getValue
argument_list|)
operator|.
name|reversed
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|e
lambda|->
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"count"
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"path"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
argument_list|)
operator|.
name|map
argument_list|(
name|d
lambda|->
name|mapToCompositeData
argument_list|(
name|pathRowType
argument_list|,
name|d
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|tabularData
operator|::
name|put
argument_list|)
expr_stmt|;
return|return
name|tabularData
return|;
block|}
specifier|private
specifier|static
name|CompositeData
name|mapToCompositeData
parameter_list|(
name|CompositeType
name|compositeType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|CompositeDataSupport
argument_list|(
name|compositeType
argument_list|,
name|data
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getNodePathCountsMap
parameter_list|()
block|{
return|return
name|nodePathCounts
return|;
block|}
name|long
name|getMaxNodePathCount
parameter_list|()
block|{
return|return
name|maxNodePathCount
return|;
block|}
block|}
end_class

end_unit

