begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TimeDurationFormatterTest
block|{
specifier|private
name|TimeDurationFormatter
name|df
init|=
name|TimeDurationFormatter
operator|.
name|forLogging
argument_list|()
decl_stmt|;
specifier|private
name|TimeDurationFormatter
name|dfu
init|=
operator|new
name|TimeDurationFormatter
argument_list|(
name|Locale
operator|.
name|GERMAN
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|defaultFormatter
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2.000 d"
argument_list|,
name|df
operator|.
name|format
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"24.00 h"
argument_list|,
name|df
operator|.
name|format
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10.50 d"
argument_list|,
name|df
operator|.
name|format
argument_list|(
literal|24
operator|*
literal|10
operator|+
literal|12
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2.500 h"
argument_list|,
name|df
operator|.
name|format
argument_list|(
literal|150
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10.00 min"
argument_list|,
name|df
operator|.
name|format
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1234 us"
argument_list|,
name|df
operator|.
name|format
argument_list|(
literal|1234
argument_list|,
name|TimeUnit
operator|.
name|MICROSECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1234 ns"
argument_list|,
name|df
operator|.
name|format
argument_list|(
literal|1234
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|uniFormatterWithOneThreshold
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2,000 d"
argument_list|,
name|dfu
operator|.
name|format
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1,000 d"
argument_list|,
name|dfu
operator|.
name|format
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10,50 d"
argument_list|,
name|dfu
operator|.
name|format
argument_list|(
literal|24
operator|*
literal|10
operator|+
literal|12
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2,500 h"
argument_list|,
name|dfu
operator|.
name|format
argument_list|(
literal|150
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10,00 min"
argument_list|,
name|dfu
operator|.
name|format
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1,234 ms"
argument_list|,
name|dfu
operator|.
name|format
argument_list|(
literal|1234
argument_list|,
name|TimeUnit
operator|.
name|MICROSECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1,234 \u00b5s"
argument_list|,
name|dfu
operator|.
name|format
argument_list|(
literal|1234
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

