begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|getIdFromPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|CommitValueResolverTest
block|{
annotation|@
name|Rule
specifier|public
name|DocumentMKBuilderProvider
name|builderProvider
init|=
operator|new
name|DocumentMKBuilderProvider
argument_list|()
decl_stmt|;
specifier|private
name|DocumentNodeStore
name|ns
decl_stmt|;
specifier|private
name|CommitValueResolver
name|resolver
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|ns
operator|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUpdateLimit
argument_list|(
literal|20
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
expr_stmt|;
name|resolver
operator|=
operator|new
name|CommitValueResolver
argument_list|(
literal|0
argument_list|,
operator|new
name|Supplier
argument_list|<
name|RevisionVector
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RevisionVector
name|get
parameter_list|()
block|{
return|return
name|ns
operator|.
name|getSweepRevisions
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|unknownRevision
parameter_list|()
throws|throws
name|Exception
block|{
name|Revision
name|oldRevision
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|addNode
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|Revision
name|newRevision
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|NodeDocument
name|foo
init|=
name|getDocument
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|NodeDocument
name|root
init|=
name|getDocument
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|oldRevision
argument_list|,
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|oldRevision
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|newRevision
argument_list|,
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|newRevision
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
comment|// trigger sweeper
name|ns
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// must still not report as committed
name|foo
operator|=
name|getDocument
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|root
operator|=
name|getDocument
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|oldRevision
argument_list|,
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|oldRevision
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|newRevision
argument_list|,
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|newRevision
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|committedTrunkCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|Revision
name|r
init|=
name|addNode
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|NodeDocument
name|foo
init|=
name|getDocument
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|NodeDocument
name|root
init|=
name|getDocument
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|resolver
operator|.
name|resolve
argument_list|(
name|r
argument_list|,
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|resolver
operator|.
name|resolve
argument_list|(
name|r
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
comment|// trigger sweeper
name|ns
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// must still report as committed
name|foo
operator|=
name|getDocument
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|root
operator|=
name|getDocument
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|resolver
operator|.
name|resolve
argument_list|(
name|r
argument_list|,
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|resolver
operator|.
name|resolve
argument_list|(
name|r
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|committedTrunkCommitValueMovedToPreviousDoc
parameter_list|()
throws|throws
name|Exception
block|{
name|Revision
name|r
init|=
name|addNode
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
comment|// add changes until the revision moves to a previous document
name|assertTrue
argument_list|(
name|getDocument
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getLocalRevisions
argument_list|()
operator|.
name|containsKey
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|getDocument
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getLocalRevisions
argument_list|()
operator|.
name|containsKey
argument_list|(
name|r
argument_list|)
condition|)
block|{
name|someChange
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|ns
operator|.
name|runBackgroundUpdateOperations
argument_list|()
expr_stmt|;
block|}
name|NodeDocument
name|foo
init|=
name|getDocument
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|NodeDocument
name|root
init|=
name|getDocument
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|resolver
operator|.
name|resolve
argument_list|(
name|r
argument_list|,
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|resolver
operator|.
name|resolve
argument_list|(
name|r
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
comment|// trigger sweeper
name|ns
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// must still report as committed
name|foo
operator|=
name|getDocument
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|root
operator|=
name|getDocument
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|resolver
operator|.
name|resolve
argument_list|(
name|r
argument_list|,
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|resolver
operator|.
name|resolve
argument_list|(
name|r
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|committedTrunkCommitMovedToPreviousDoc
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"/foo"
decl_stmt|;
name|Revision
name|r
init|=
name|addNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|removeNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|addNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// add changes until the revision moves to a previous document
name|assertTrue
argument_list|(
name|getDocument
argument_list|(
literal|"/foo"
argument_list|)
operator|.
name|getLocalCommitRoot
argument_list|()
operator|.
name|containsKey
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|getDocument
argument_list|(
literal|"/foo"
argument_list|)
operator|.
name|getLocalCommitRoot
argument_list|()
operator|.
name|containsKey
argument_list|(
name|r
argument_list|)
condition|)
block|{
name|someChange
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|ns
operator|.
name|runBackgroundUpdateOperations
argument_list|()
expr_stmt|;
block|}
name|NodeDocument
name|foo
init|=
name|getDocument
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|NodeDocument
name|root
init|=
name|getDocument
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|resolver
operator|.
name|resolve
argument_list|(
name|r
argument_list|,
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|resolver
operator|.
name|resolve
argument_list|(
name|r
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
comment|// trigger sweeper
name|ns
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// must still report as committed
name|foo
operator|=
name|getDocument
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|root
operator|=
name|getDocument
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|resolver
operator|.
name|resolve
argument_list|(
name|r
argument_list|,
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|resolver
operator|.
name|resolve
argument_list|(
name|r
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|branchCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"/foo"
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|addNodeBranched
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Revision
name|r
init|=
name|getDocument
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getLocalRevisions
argument_list|()
operator|.
name|firstKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|getDocument
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getLocalRevisions
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|NodeDocument
name|foo
init|=
name|getDocument
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|NodeDocument
name|root
init|=
name|getDocument
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|resolver
operator|.
name|resolve
argument_list|(
name|r
argument_list|,
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|resolver
operator|.
name|resolve
argument_list|(
name|r
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
comment|// add another commit and run the sweeper
name|addNode
argument_list|(
literal|"/bar"
argument_list|)
expr_stmt|;
name|ns
operator|.
name|runBackgroundUpdateOperations
argument_list|()
expr_stmt|;
comment|// must still report the same value
name|foo
operator|=
name|getDocument
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|root
operator|=
name|getDocument
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|resolver
operator|.
name|resolve
argument_list|(
name|r
argument_list|,
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|resolver
operator|.
name|resolve
argument_list|(
name|r
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
comment|// now merge the branch
name|TestUtils
operator|.
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
comment|// now must report the committed revision
name|foo
operator|=
name|getDocument
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|root
operator|=
name|getDocument
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|value
operator|=
name|foo
operator|.
name|resolveCommitValue
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Utils
operator|.
name|isCommitted
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|root
operator|.
name|resolveCommitValue
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|resolver
operator|.
name|resolve
argument_list|(
name|r
argument_list|,
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|resolver
operator|.
name|resolve
argument_list|(
name|r
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Revision
name|addNode
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|nb
init|=
name|builder
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|nb
operator|=
name|nb
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|TestUtils
operator|.
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
return|return
name|ns
operator|.
name|getHeadRevision
argument_list|()
operator|.
name|getRevision
argument_list|(
name|ns
operator|.
name|getClusterId
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|NodeBuilder
name|addNodeBranched
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|nb
init|=
name|builder
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|nb
operator|=
name|nb
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|int
name|numRevEntries
init|=
name|getNumRevisions
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|numRevEntries
operator|==
name|getNumRevisions
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|nb
operator|.
name|setProperty
argument_list|(
literal|"p-"
operator|+
name|i
operator|++
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
specifier|private
name|Revision
name|removeNode
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|nb
init|=
name|builder
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|nb
operator|=
name|nb
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|nb
operator|.
name|remove
argument_list|()
expr_stmt|;
name|TestUtils
operator|.
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
return|return
name|ns
operator|.
name|getHeadRevision
argument_list|()
operator|.
name|getRevision
argument_list|(
name|ns
operator|.
name|getClusterId
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|NodeDocument
name|getDocument
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|ns
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|getIdFromPath
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|someChange
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|nb
init|=
name|builder
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|nb
operator|=
name|nb
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|long
name|value
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|nb
operator|.
name|hasProperty
argument_list|(
literal|"p"
argument_list|)
condition|)
block|{
name|value
operator|=
name|nb
operator|.
name|getProperty
argument_list|(
literal|"p"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
name|nb
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|TestUtils
operator|.
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|getNumRevisions
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|NodeDocument
name|doc
init|=
name|getDocument
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|doc
operator|!=
literal|null
condition|?
name|doc
operator|.
name|getLocalRevisions
argument_list|()
operator|.
name|size
argument_list|()
else|:
literal|0
return|;
block|}
block|}
end_class

end_unit

