begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|concat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Integer
operator|.
name|bitCount
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Integer
operator|.
name|highestOneBit
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Integer
operator|.
name|numberOfTrailingZeros
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ComparisonChain
import|;
end_import

begin_class
class|class
name|MapRecord
extends|extends
name|Record
block|{
specifier|private
specifier|static
specifier|final
name|int
name|M
init|=
literal|0xDEECE66D
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|A
init|=
literal|0xB
decl_stmt|;
specifier|static
specifier|final
name|long
name|HASH_MASK
init|=
literal|0xFFFFFFFFL
decl_stmt|;
specifier|static
name|int
name|getHash
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|name
operator|.
name|hashCode
argument_list|()
operator|^
name|M
operator|)
operator|*
name|M
operator|+
name|A
return|;
block|}
comment|/**      * Number of bits of the hash code to look at on each level of the trie.      */
specifier|protected
specifier|static
specifier|final
name|int
name|BITS_PER_LEVEL
init|=
literal|5
decl_stmt|;
comment|/**      * Number of buckets at each level of the trie.      */
specifier|protected
specifier|static
specifier|final
name|int
name|BUCKETS_PER_LEVEL
init|=
literal|1
operator|<<
name|BITS_PER_LEVEL
decl_stmt|;
comment|// 32
comment|/**      * Maximum number of trie levels.      */
specifier|protected
specifier|static
specifier|final
name|int
name|MAX_NUMBER_OF_LEVELS
init|=
operator|(
literal|32
operator|+
name|BITS_PER_LEVEL
operator|-
literal|1
operator|)
operator|/
name|BITS_PER_LEVEL
decl_stmt|;
comment|// 7
comment|/**      * Number of bits needed to indicate the current trie level.      */
specifier|protected
specifier|static
specifier|final
name|int
name|LEVEL_BITS
init|=
comment|// 4, using nextPowerOfTwo():
name|numberOfTrailingZeros
argument_list|(
name|highestOneBit
argument_list|(
name|MAX_NUMBER_OF_LEVELS
argument_list|)
operator|<<
literal|1
argument_list|)
decl_stmt|;
comment|/**      * Number of bits used to indicate the size of a map.      */
specifier|protected
specifier|static
specifier|final
name|int
name|SIZE_BITS
init|=
literal|32
operator|-
name|LEVEL_BITS
decl_stmt|;
comment|/**      * Maximum size of a map.      */
specifier|protected
specifier|static
specifier|final
name|int
name|MAX_SIZE
init|=
operator|(
literal|1
operator|<<
name|SIZE_BITS
operator|)
operator|-
literal|1
decl_stmt|;
comment|// ~268e6
specifier|protected
name|MapRecord
parameter_list|(
name|Segment
name|segment
parameter_list|,
name|RecordId
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|segment
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isLeaf
parameter_list|()
block|{
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|int
name|head
init|=
name|segment
operator|.
name|readInt
argument_list|(
name|getOffset
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDiff
argument_list|(
name|head
argument_list|)
condition|)
block|{
name|RecordId
name|base
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|8
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|MapRecord
argument_list|(
name|segment
argument_list|,
name|base
argument_list|)
operator|.
name|isLeaf
argument_list|()
return|;
block|}
return|return
operator|!
name|isBranch
argument_list|(
name|head
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isDiff
parameter_list|()
block|{
return|return
name|isDiff
argument_list|(
name|getSegment
argument_list|()
operator|.
name|readInt
argument_list|(
name|getOffset
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
name|MapRecord
index|[]
name|getBuckets
parameter_list|()
block|{
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|MapRecord
index|[]
name|buckets
init|=
operator|new
name|MapRecord
index|[
name|BUCKETS_PER_LEVEL
index|]
decl_stmt|;
name|int
name|bitmap
init|=
name|segment
operator|.
name|readInt
argument_list|(
name|getOffset
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ids
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BUCKETS_PER_LEVEL
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|bitmap
operator|&
operator|(
literal|1
operator|<<
name|i
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|buckets
index|[
name|i
index|]
operator|=
operator|new
name|MapRecord
argument_list|(
name|segment
argument_list|,
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|8
argument_list|,
name|ids
operator|++
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buckets
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|buckets
return|;
block|}
specifier|private
name|List
argument_list|<
name|MapRecord
argument_list|>
name|getBucketList
parameter_list|(
name|Segment
name|segment
parameter_list|)
block|{
name|List
argument_list|<
name|MapRecord
argument_list|>
name|buckets
init|=
name|newArrayListWithCapacity
argument_list|(
name|BUCKETS_PER_LEVEL
argument_list|)
decl_stmt|;
name|int
name|bitmap
init|=
name|segment
operator|.
name|readInt
argument_list|(
name|getOffset
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ids
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BUCKETS_PER_LEVEL
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|bitmap
operator|&
operator|(
literal|1
operator|<<
name|i
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|RecordId
name|id
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|8
argument_list|,
name|ids
operator|++
argument_list|)
argument_list|)
decl_stmt|;
name|buckets
operator|.
name|add
argument_list|(
operator|new
name|MapRecord
argument_list|(
name|segment
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buckets
return|;
block|}
name|int
name|size
parameter_list|()
block|{
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|int
name|head
init|=
name|segment
operator|.
name|readInt
argument_list|(
name|getOffset
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDiff
argument_list|(
name|head
argument_list|)
condition|)
block|{
name|RecordId
name|base
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|8
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|MapRecord
argument_list|(
name|segment
argument_list|,
name|base
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
return|return
name|getSize
argument_list|(
name|head
argument_list|)
return|;
block|}
name|MapEntry
name|getEntry
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|int
name|hash
init|=
name|getHash
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|int
name|head
init|=
name|segment
operator|.
name|readInt
argument_list|(
name|getOffset
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDiff
argument_list|(
name|head
argument_list|)
condition|)
block|{
if|if
condition|(
name|hash
operator|==
name|segment
operator|.
name|readInt
argument_list|(
name|getOffset
argument_list|(
literal|4
argument_list|)
argument_list|)
condition|)
block|{
name|RecordId
name|key
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|8
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|segment
operator|.
name|readString
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
name|RecordId
name|value
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|MapEntry
argument_list|(
name|segment
argument_list|,
name|name
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
name|RecordId
name|base
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|8
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|MapRecord
argument_list|(
name|segment
argument_list|,
name|base
argument_list|)
operator|.
name|getEntry
argument_list|(
name|name
argument_list|)
return|;
block|}
name|int
name|size
init|=
name|getSize
argument_list|(
name|head
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
comment|// shortcut
block|}
name|int
name|level
init|=
name|getLevel
argument_list|(
name|head
argument_list|)
decl_stmt|;
if|if
condition|(
name|isBranch
argument_list|(
name|size
argument_list|,
name|level
argument_list|)
condition|)
block|{
comment|// this is an intermediate branch record
comment|// check if a matching bucket exists, and recurse
name|int
name|bitmap
init|=
name|segment
operator|.
name|readInt
argument_list|(
name|getOffset
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|mask
init|=
operator|(
literal|1
operator|<<
name|BITS_PER_LEVEL
operator|)
operator|-
literal|1
decl_stmt|;
name|int
name|shift
init|=
literal|32
operator|-
operator|(
name|level
operator|+
literal|1
operator|)
operator|*
name|BITS_PER_LEVEL
decl_stmt|;
name|int
name|index
init|=
operator|(
name|hash
operator|>>
name|shift
operator|)
operator|&
name|mask
decl_stmt|;
name|int
name|bit
init|=
literal|1
operator|<<
name|index
decl_stmt|;
if|if
condition|(
operator|(
name|bitmap
operator|&
name|bit
operator|)
operator|!=
literal|0
condition|)
block|{
name|int
name|ids
init|=
name|bitCount
argument_list|(
name|bitmap
operator|&
operator|(
name|bit
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
name|RecordId
name|id
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|8
argument_list|,
name|ids
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|MapRecord
argument_list|(
name|segment
argument_list|,
name|id
argument_list|)
operator|.
name|getEntry
argument_list|(
name|name
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// this is a leaf record; scan the list to find a matching entry
name|long
name|h
init|=
name|hash
operator|&
name|HASH_MASK
decl_stmt|;
name|int
name|p
init|=
literal|0
decl_stmt|;
name|long
name|pH
init|=
literal|0
decl_stmt|;
name|int
name|q
init|=
name|size
operator|-
literal|1
decl_stmt|;
name|long
name|qH
init|=
name|HASH_MASK
decl_stmt|;
while|while
condition|(
name|p
operator|<=
name|q
condition|)
block|{
name|checkState
argument_list|(
name|pH
operator|<=
name|qH
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|p
operator|+
call|(
name|int
call|)
argument_list|(
operator|(
name|q
operator|-
name|p
operator|)
operator|*
operator|(
name|h
operator|-
name|pH
operator|)
operator|/
operator|(
name|qH
operator|-
name|pH
operator|)
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|p
operator|<=
name|i
operator|&&
name|i
operator|<=
name|q
argument_list|)
expr_stmt|;
name|long
name|iH
init|=
name|segment
operator|.
name|readInt
argument_list|(
name|getOffset
argument_list|(
literal|4
operator|+
name|i
operator|*
literal|4
argument_list|)
argument_list|)
operator|&
name|HASH_MASK
decl_stmt|;
name|int
name|diff
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|iH
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|h
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|==
literal|0
condition|)
block|{
name|RecordId
name|keyId
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|4
operator|+
name|size
operator|*
literal|4
argument_list|,
name|i
operator|*
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|diff
operator|=
name|segment
operator|.
name|readString
argument_list|(
name|keyId
argument_list|)
operator|.
name|compareTo
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|diff
operator|==
literal|0
condition|)
block|{
name|RecordId
name|valueId
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|4
operator|+
name|size
operator|*
literal|4
argument_list|,
name|i
operator|*
literal|2
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|MapEntry
argument_list|(
name|segment
argument_list|,
name|name
argument_list|,
name|keyId
argument_list|,
name|valueId
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|diff
operator|<
literal|0
condition|)
block|{
name|p
operator|=
name|i
operator|+
literal|1
expr_stmt|;
name|pH
operator|=
name|iH
expr_stmt|;
block|}
else|else
block|{
name|q
operator|=
name|i
operator|-
literal|1
expr_stmt|;
name|qH
operator|=
name|iH
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|RecordId
name|getValue
parameter_list|(
name|int
name|hash
parameter_list|,
name|RecordId
name|key
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|int
name|head
init|=
name|segment
operator|.
name|readInt
argument_list|(
name|getOffset
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDiff
argument_list|(
name|head
argument_list|)
condition|)
block|{
if|if
condition|(
name|hash
operator|==
name|segment
operator|.
name|readInt
argument_list|(
name|getOffset
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|&&
name|key
operator|.
name|equals
argument_list|(
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|8
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|)
argument_list|)
return|;
block|}
name|RecordId
name|base
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|8
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|MapRecord
argument_list|(
name|segment
argument_list|,
name|base
argument_list|)
operator|.
name|getValue
argument_list|(
name|hash
argument_list|,
name|key
argument_list|)
return|;
block|}
name|int
name|size
init|=
name|getSize
argument_list|(
name|head
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
comment|// shortcut
block|}
name|int
name|level
init|=
name|getLevel
argument_list|(
name|head
argument_list|)
decl_stmt|;
if|if
condition|(
name|isBranch
argument_list|(
name|size
argument_list|,
name|level
argument_list|)
condition|)
block|{
comment|// this is an intermediate branch record
comment|// check if a matching bucket exists, and recurse
name|int
name|bitmap
init|=
name|segment
operator|.
name|readInt
argument_list|(
name|getOffset
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|mask
init|=
operator|(
literal|1
operator|<<
name|BITS_PER_LEVEL
operator|)
operator|-
literal|1
decl_stmt|;
name|int
name|shift
init|=
literal|32
operator|-
operator|(
name|level
operator|+
literal|1
operator|)
operator|*
name|BITS_PER_LEVEL
decl_stmt|;
name|int
name|index
init|=
operator|(
name|hash
operator|>>
name|shift
operator|)
operator|&
name|mask
decl_stmt|;
name|int
name|bit
init|=
literal|1
operator|<<
name|index
decl_stmt|;
if|if
condition|(
operator|(
name|bitmap
operator|&
name|bit
operator|)
operator|!=
literal|0
condition|)
block|{
name|int
name|ids
init|=
name|bitCount
argument_list|(
name|bitmap
operator|&
operator|(
name|bit
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
name|RecordId
name|id
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|8
argument_list|,
name|ids
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|MapRecord
argument_list|(
name|segment
argument_list|,
name|id
argument_list|)
operator|.
name|getValue
argument_list|(
name|hash
argument_list|,
name|key
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// this is a leaf record; scan the list to find a matching entry
name|Long
name|h
init|=
name|hash
operator|&
name|HASH_MASK
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|int
name|hashOffset
init|=
name|getOffset
argument_list|(
literal|4
operator|+
name|i
operator|*
literal|4
argument_list|)
decl_stmt|;
name|int
name|diff
init|=
name|h
operator|.
name|compareTo
argument_list|(
name|segment
operator|.
name|readInt
argument_list|(
name|hashOffset
argument_list|)
operator|&
name|HASH_MASK
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|>
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|diff
operator|==
literal|0
condition|)
block|{
name|int
name|keyOffset
init|=
name|getOffset
argument_list|(
literal|4
operator|+
name|size
operator|*
literal|4
argument_list|,
name|i
operator|*
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|segment
operator|.
name|readRecordId
argument_list|(
name|keyOffset
argument_list|)
argument_list|)
condition|)
block|{
name|int
name|valueOffset
init|=
name|getOffset
argument_list|(
literal|4
operator|+
name|size
operator|*
literal|4
argument_list|,
name|i
operator|*
literal|2
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|segment
operator|.
name|readRecordId
argument_list|(
name|valueOffset
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
name|Iterable
argument_list|<
name|String
argument_list|>
name|getKeys
parameter_list|()
block|{
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|int
name|head
init|=
name|segment
operator|.
name|readInt
argument_list|(
name|getOffset
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDiff
argument_list|(
name|head
argument_list|)
condition|)
block|{
name|RecordId
name|base
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|8
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|MapRecord
argument_list|(
name|segment
argument_list|,
name|base
argument_list|)
operator|.
name|getKeys
argument_list|()
return|;
block|}
name|int
name|size
init|=
name|getSize
argument_list|(
name|head
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
comment|// shortcut
block|}
name|int
name|level
init|=
name|getLevel
argument_list|(
name|head
argument_list|)
decl_stmt|;
if|if
condition|(
name|isBranch
argument_list|(
name|size
argument_list|,
name|level
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|MapRecord
argument_list|>
name|buckets
init|=
name|getBucketList
argument_list|(
name|segment
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|keys
init|=
name|newArrayListWithCapacity
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MapRecord
name|bucket
range|:
name|buckets
control|)
block|{
name|keys
operator|.
name|add
argument_list|(
name|bucket
operator|.
name|getKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|concat
argument_list|(
name|keys
argument_list|)
return|;
block|}
name|RecordId
index|[]
name|ids
init|=
operator|new
name|RecordId
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|ids
index|[
name|i
index|]
operator|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|4
operator|+
name|size
operator|*
literal|4
argument_list|,
name|i
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|keys
init|=
operator|new
name|String
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|keys
index|[
name|i
index|]
operator|=
name|segment
operator|.
name|readString
argument_list|(
name|ids
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|keys
argument_list|)
return|;
block|}
name|Iterable
argument_list|<
name|MapEntry
argument_list|>
name|getEntries
parameter_list|()
block|{
return|return
name|getEntries
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|Iterable
argument_list|<
name|MapEntry
argument_list|>
name|getEntries
parameter_list|(
name|RecordId
name|diffKey
parameter_list|,
name|RecordId
name|diffValue
parameter_list|)
block|{
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|int
name|head
init|=
name|segment
operator|.
name|readInt
argument_list|(
name|getOffset
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDiff
argument_list|(
name|head
argument_list|)
condition|)
block|{
name|RecordId
name|key
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|RecordId
name|value
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|RecordId
name|base
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|8
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|MapRecord
argument_list|(
name|segment
argument_list|,
name|base
argument_list|)
operator|.
name|getEntries
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
name|int
name|size
init|=
name|getSize
argument_list|(
name|head
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
comment|// shortcut
block|}
name|int
name|level
init|=
name|getLevel
argument_list|(
name|head
argument_list|)
decl_stmt|;
if|if
condition|(
name|isBranch
argument_list|(
name|size
argument_list|,
name|level
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|MapRecord
argument_list|>
name|buckets
init|=
name|getBucketList
argument_list|(
name|segment
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Iterable
argument_list|<
name|MapEntry
argument_list|>
argument_list|>
name|entries
init|=
name|newArrayListWithCapacity
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MapRecord
name|bucket
range|:
name|buckets
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|bucket
operator|.
name|getEntries
argument_list|(
name|diffKey
argument_list|,
name|diffValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|concat
argument_list|(
name|entries
argument_list|)
return|;
block|}
name|RecordId
index|[]
name|keys
init|=
operator|new
name|RecordId
index|[
name|size
index|]
decl_stmt|;
name|RecordId
index|[]
name|values
init|=
operator|new
name|RecordId
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|keys
index|[
name|i
index|]
operator|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|4
operator|+
name|size
operator|*
literal|4
argument_list|,
name|i
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|keys
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|diffKey
argument_list|)
condition|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|diffValue
expr_stmt|;
block|}
else|else
block|{
name|values
index|[
name|i
index|]
operator|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
literal|4
operator|+
name|size
operator|*
literal|4
argument_list|,
name|i
operator|*
literal|2
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|MapEntry
index|[]
name|entries
init|=
operator|new
name|MapEntry
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|segment
operator|.
name|readString
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|entries
index|[
name|i
index|]
operator|=
operator|new
name|MapEntry
argument_list|(
name|segment
argument_list|,
name|name
argument_list|,
name|keys
index|[
name|i
index|]
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|entries
argument_list|)
return|;
block|}
name|boolean
name|compareAgainstEmptyMap
parameter_list|(
name|MapDiff
name|diff
parameter_list|)
block|{
for|for
control|(
name|MapEntry
name|entry
range|:
name|getEntries
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|diff
operator|.
name|entryAdded
argument_list|(
name|entry
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
interface|interface
name|MapDiff
block|{
name|boolean
name|entryAdded
parameter_list|(
name|MapEntry
name|after
parameter_list|)
function_decl|;
name|boolean
name|entryChanged
parameter_list|(
name|MapEntry
name|before
parameter_list|,
name|MapEntry
name|after
parameter_list|)
function_decl|;
name|boolean
name|entryDeleted
parameter_list|(
name|MapEntry
name|before
parameter_list|)
function_decl|;
block|}
name|boolean
name|compare
parameter_list|(
name|MapRecord
name|base
parameter_list|,
name|MapDiff
name|diff
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|base
argument_list|,
name|this
argument_list|,
name|diff
argument_list|)
return|;
block|}
comment|//------------------------------------------------------------< Object>--
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
literal|null
decl_stmt|;
for|for
control|(
name|MapEntry
name|entry
range|:
name|getEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|(
literal|"{ "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
return|return
literal|"{}"
return|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|//-----------------------------------------------------------< private>--
specifier|private
specifier|static
name|boolean
name|compare
parameter_list|(
name|MapRecord
name|before
parameter_list|,
name|MapRecord
name|after
parameter_list|,
name|MapDiff
name|diff
parameter_list|)
block|{
name|Segment
name|beforeSegment
init|=
name|before
operator|.
name|getSegment
argument_list|()
decl_stmt|;
name|int
name|beforeHead
init|=
name|beforeSegment
operator|.
name|readInt
argument_list|(
name|before
operator|.
name|getOffset
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
name|afterSegment
init|=
name|after
operator|.
name|getSegment
argument_list|()
decl_stmt|;
name|int
name|afterHead
init|=
name|afterSegment
operator|.
name|readInt
argument_list|(
name|after
operator|.
name|getOffset
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDiff
argument_list|(
name|afterHead
argument_list|)
condition|)
block|{
name|RecordId
name|base
init|=
name|afterSegment
operator|.
name|readRecordId
argument_list|(
name|after
operator|.
name|getOffset
argument_list|(
literal|8
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|.
name|equals
argument_list|(
name|after
operator|.
name|getRecordId
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|hash
init|=
name|afterSegment
operator|.
name|readInt
argument_list|(
name|after
operator|.
name|getOffset
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|RecordId
name|key
init|=
name|afterSegment
operator|.
name|readRecordId
argument_list|(
name|after
operator|.
name|getOffset
argument_list|(
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|RecordId
name|afterValue
init|=
name|afterSegment
operator|.
name|readRecordId
argument_list|(
name|after
operator|.
name|getOffset
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|RecordId
name|beforeValue
init|=
name|before
operator|.
name|getValue
argument_list|(
name|hash
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|beforeSegment
operator|.
name|readString
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|diff
operator|.
name|entryChanged
argument_list|(
operator|new
name|MapEntry
argument_list|(
name|beforeSegment
argument_list|,
name|name
argument_list|,
name|key
argument_list|,
name|beforeValue
argument_list|)
argument_list|,
operator|new
name|MapEntry
argument_list|(
name|afterSegment
argument_list|,
name|name
argument_list|,
name|key
argument_list|,
name|afterValue
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|isDiff
argument_list|(
name|beforeHead
argument_list|)
condition|)
block|{
name|RecordId
name|beforeBase
init|=
name|beforeSegment
operator|.
name|readRecordId
argument_list|(
name|before
operator|.
name|getOffset
argument_list|(
literal|8
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|.
name|equals
argument_list|(
name|beforeBase
argument_list|)
condition|)
block|{
name|int
name|beforeHash
init|=
name|beforeSegment
operator|.
name|readInt
argument_list|(
name|before
operator|.
name|getOffset
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|RecordId
name|beforeKey
init|=
name|beforeSegment
operator|.
name|readRecordId
argument_list|(
name|before
operator|.
name|getOffset
argument_list|(
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|RecordId
name|beforeValue
init|=
name|beforeSegment
operator|.
name|readRecordId
argument_list|(
name|before
operator|.
name|getOffset
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|afterHash
init|=
name|afterSegment
operator|.
name|readInt
argument_list|(
name|after
operator|.
name|getOffset
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|RecordId
name|afterKey
init|=
name|afterSegment
operator|.
name|readRecordId
argument_list|(
name|after
operator|.
name|getOffset
argument_list|(
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|RecordId
name|afterValue
init|=
name|afterSegment
operator|.
name|readRecordId
argument_list|(
name|after
operator|.
name|getOffset
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|beforeKey
operator|.
name|equals
argument_list|(
name|afterKey
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|beforeSegment
operator|.
name|readString
argument_list|(
name|beforeKey
argument_list|)
decl_stmt|;
return|return
name|diff
operator|.
name|entryChanged
argument_list|(
operator|new
name|MapEntry
argument_list|(
name|beforeSegment
argument_list|,
name|name
argument_list|,
name|beforeKey
argument_list|,
name|beforeValue
argument_list|)
argument_list|,
operator|new
name|MapEntry
argument_list|(
name|afterSegment
argument_list|,
name|name
argument_list|,
name|afterKey
argument_list|,
name|afterValue
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|String
name|beforeName
init|=
name|beforeSegment
operator|.
name|readString
argument_list|(
name|beforeKey
argument_list|)
decl_stmt|;
name|String
name|afterName
init|=
name|afterSegment
operator|.
name|readString
argument_list|(
name|afterKey
argument_list|)
decl_stmt|;
return|return
name|diff
operator|.
name|entryChanged
argument_list|(
operator|new
name|MapEntry
argument_list|(
name|beforeSegment
argument_list|,
name|beforeName
argument_list|,
name|beforeKey
argument_list|,
name|beforeValue
argument_list|)
argument_list|,
operator|new
name|MapEntry
argument_list|(
name|afterSegment
argument_list|,
name|beforeName
argument_list|,
name|beforeKey
argument_list|,
name|after
operator|.
name|getValue
argument_list|(
name|beforeHash
argument_list|,
name|beforeKey
argument_list|)
argument_list|)
argument_list|)
operator|&&
name|diff
operator|.
name|entryChanged
argument_list|(
operator|new
name|MapEntry
argument_list|(
name|beforeSegment
argument_list|,
name|afterName
argument_list|,
name|afterKey
argument_list|,
name|before
operator|.
name|getValue
argument_list|(
name|afterHash
argument_list|,
name|afterKey
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MapEntry
argument_list|(
name|afterSegment
argument_list|,
name|afterName
argument_list|,
name|afterKey
argument_list|,
name|afterValue
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|isBranch
argument_list|(
name|beforeHead
argument_list|)
operator|&&
name|isBranch
argument_list|(
name|afterHead
argument_list|)
condition|)
block|{
return|return
name|compareBranch
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|diff
argument_list|)
return|;
block|}
name|Iterator
argument_list|<
name|MapEntry
argument_list|>
name|beforeEntries
init|=
name|before
operator|.
name|getEntries
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|MapEntry
argument_list|>
name|afterEntries
init|=
name|after
operator|.
name|getEntries
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|MapEntry
name|beforeEntry
init|=
name|nextOrNull
argument_list|(
name|beforeEntries
argument_list|)
decl_stmt|;
name|MapEntry
name|afterEntry
init|=
name|nextOrNull
argument_list|(
name|afterEntries
argument_list|)
decl_stmt|;
while|while
condition|(
name|beforeEntry
operator|!=
literal|null
operator|||
name|afterEntry
operator|!=
literal|null
condition|)
block|{
name|int
name|d
init|=
name|compare
argument_list|(
name|beforeEntry
argument_list|,
name|afterEntry
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|<
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|diff
operator|.
name|entryDeleted
argument_list|(
name|beforeEntry
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|beforeEntry
operator|=
name|nextOrNull
argument_list|(
name|beforeEntries
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|diff
operator|.
name|entryChanged
argument_list|(
name|beforeEntry
argument_list|,
name|afterEntry
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|beforeEntry
operator|=
name|nextOrNull
argument_list|(
name|beforeEntries
argument_list|)
expr_stmt|;
name|afterEntry
operator|=
name|nextOrNull
argument_list|(
name|afterEntries
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|diff
operator|.
name|entryAdded
argument_list|(
name|afterEntry
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|afterEntry
operator|=
name|nextOrNull
argument_list|(
name|afterEntries
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Compares two map branches. Given the way the comparison algorithm      * works, the branches are always guaranteed to be at the same level      * with the same hash prefixes.      */
specifier|private
specifier|static
name|boolean
name|compareBranch
parameter_list|(
name|MapRecord
name|before
parameter_list|,
name|MapRecord
name|after
parameter_list|,
name|MapDiff
name|diff
parameter_list|)
block|{
name|MapRecord
index|[]
name|beforeBuckets
init|=
name|before
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|MapRecord
index|[]
name|afterBuckets
init|=
name|after
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BUCKETS_PER_LEVEL
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equal
argument_list|(
name|beforeBuckets
index|[
name|i
index|]
argument_list|,
name|afterBuckets
index|[
name|i
index|]
argument_list|)
condition|)
block|{
comment|// these buckets are equal (or both empty), so no changes
block|}
elseif|else
if|if
condition|(
name|beforeBuckets
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
comment|// before bucket is empty, so all after entries were added
name|MapRecord
name|bucket
init|=
name|afterBuckets
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|MapEntry
name|entry
range|:
name|bucket
operator|.
name|getEntries
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|diff
operator|.
name|entryAdded
argument_list|(
name|entry
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|afterBuckets
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
comment|// after bucket is empty, so all before entries were deleted
name|MapRecord
name|bucket
init|=
name|beforeBuckets
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|MapEntry
name|entry
range|:
name|bucket
operator|.
name|getEntries
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|diff
operator|.
name|entryDeleted
argument_list|(
name|entry
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
else|else
block|{
comment|// both before and after buckets exist; compare recursively
name|MapRecord
name|beforeBucket
init|=
name|beforeBuckets
index|[
name|i
index|]
decl_stmt|;
name|MapRecord
name|afterBucket
init|=
name|afterBuckets
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|compare
argument_list|(
name|beforeBucket
argument_list|,
name|afterBucket
argument_list|,
name|diff
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|int
name|getSize
parameter_list|(
name|int
name|head
parameter_list|)
block|{
return|return
name|head
operator|&
operator|(
operator|(
literal|1
operator|<<
name|MapRecord
operator|.
name|SIZE_BITS
operator|)
operator|-
literal|1
operator|)
return|;
block|}
specifier|private
specifier|static
name|int
name|getLevel
parameter_list|(
name|int
name|head
parameter_list|)
block|{
return|return
name|head
operator|>>>
name|MapRecord
operator|.
name|SIZE_BITS
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isDiff
parameter_list|(
name|int
name|head
parameter_list|)
block|{
return|return
name|head
operator|==
operator|-
literal|1
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isBranch
parameter_list|(
name|int
name|head
parameter_list|)
block|{
return|return
name|isBranch
argument_list|(
name|getSize
argument_list|(
name|head
argument_list|)
argument_list|,
name|getLevel
argument_list|(
name|head
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isBranch
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|level
parameter_list|)
block|{
return|return
name|size
operator|>
name|MapRecord
operator|.
name|BUCKETS_PER_LEVEL
operator|&&
name|level
operator|<
name|MapRecord
operator|.
name|MAX_NUMBER_OF_LEVELS
return|;
block|}
specifier|private
specifier|static
name|int
name|compare
parameter_list|(
name|MapEntry
name|before
parameter_list|,
name|MapEntry
name|after
parameter_list|)
block|{
if|if
condition|(
name|before
operator|==
literal|null
condition|)
block|{
comment|// A null value signifies the end of the list of entries,
comment|// which is why the return value here is a bit counter-intuitive
comment|// (null> non-null). The idea is to make a virtual end-of-list
comment|// sentinel value appear greater than any normal value.
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|after
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
comment|// see above
block|}
else|else
block|{
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compare
argument_list|(
name|before
operator|.
name|getHash
argument_list|()
operator|&
name|HASH_MASK
argument_list|,
name|after
operator|.
name|getHash
argument_list|()
operator|&
name|HASH_MASK
argument_list|)
operator|.
name|compare
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|,
name|after
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
name|MapEntry
name|nextOrNull
parameter_list|(
name|Iterator
argument_list|<
name|MapEntry
argument_list|>
name|iterator
parameter_list|)
block|{
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

