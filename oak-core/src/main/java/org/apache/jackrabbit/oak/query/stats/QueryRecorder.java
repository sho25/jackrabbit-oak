begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|LineNumberReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|QueryRecorder
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueryRecorder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|RECORD_QUERIES_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|QUERIES_MAX
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.query.record"
argument_list|,
literal|5000
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|IOException
block|{
comment|// command line version: read from a file
name|LineNumberReader
name|reader
init|=
operator|new
name|LineNumberReader
argument_list|(
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|sorted
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|lineCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|sorted
operator|.
name|add
argument_list|(
name|simplify
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
name|lineCount
operator|++
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|sorted
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"sorted: "
operator|+
name|sorted
operator|.
name|size
argument_list|()
operator|+
literal|" original: "
operator|+
name|lineCount
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|record
parameter_list|(
name|String
name|query
parameter_list|,
name|boolean
name|internal
parameter_list|)
block|{
if|if
condition|(
name|internal
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
name|query
operator|=
name|query
operator|.
name|replace
argument_list|(
literal|'\n'
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|query
operator|=
name|query
operator|.
name|replace
argument_list|(
literal|'\t'
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"query:\t{}"
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|query
operator|=
name|simplify
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"failed to simplify {}"
argument_list|,
name|query
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|record
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|simplify
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|query
operator|=
name|query
operator|.
name|replaceAll
argument_list|(
literal|"'[^']*'"
argument_list|,
literal|"'x'"
argument_list|)
expr_stmt|;
name|query
operator|=
name|query
operator|.
name|replaceAll
argument_list|(
literal|"ISDESCENDANTNODE\\(\\[/[^]]*\\]\\)"
argument_list|,
literal|"ISDESCENDANTNODE('x')"
argument_list|)
expr_stmt|;
name|int
name|pathIndex
init|=
name|query
operator|.
name|indexOf
argument_list|(
literal|"/jcr:root/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathIndex
operator|>=
literal|0
condition|)
block|{
name|int
name|start
init|=
name|pathIndex
operator|+
literal|"/jcr:root/"
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|getFirstOccurance
argument_list|(
name|query
argument_list|,
name|start
argument_list|,
literal|" "
argument_list|,
literal|"/element("
argument_list|,
literal|"/text("
argument_list|,
literal|"/*"
argument_list|,
literal|"/("
argument_list|,
literal|"/jcr:deref("
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|query
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|int
name|first
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|>
literal|0
condition|)
block|{
name|first
operator|=
name|path
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|first
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
operator|>
literal|0
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|first
operator|+
literal|1
argument_list|)
operator|+
literal|"..."
expr_stmt|;
block|}
block|}
name|String
name|newQuery
init|=
name|query
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pathIndex
argument_list|)
operator|+
literal|"/jcr:root/"
operator|+
name|path
operator|+
name|query
operator|.
name|substring
argument_list|(
name|end
argument_list|,
name|query
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|query
operator|=
name|newQuery
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
specifier|static
name|int
name|getFirstOccurance
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|start
parameter_list|,
name|String
modifier|...
name|strings
parameter_list|)
block|{
name|int
name|first
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|strings
control|)
block|{
name|int
name|index
init|=
name|text
operator|.
name|indexOf
argument_list|(
name|s
argument_list|,
name|start
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
operator|&&
name|index
operator|<
name|first
condition|)
block|{
name|first
operator|=
name|index
expr_stmt|;
block|}
block|}
return|return
name|first
return|;
block|}
specifier|private
specifier|static
name|void
name|record
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|RECORD_QUERIES_MAP
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|size
argument_list|()
operator|>
name|QUERIES_MAX
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|old
decl_stmt|;
synchronized|synchronized
init|(
name|map
init|)
block|{
name|old
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|e
range|:
name|old
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|log
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Integer
name|count
decl_stmt|;
synchronized|synchronized
init|(
name|map
init|)
block|{
name|count
operator|=
name|map
operator|.
name|get
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|count
operator|=
name|count
operator|==
literal|null
condition|?
literal|1
else|:
name|count
operator|+
literal|1
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|query
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|==
literal|1
operator|||
name|count
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|log
argument_list|(
name|query
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|log
parameter_list|(
name|String
name|query
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"count:\t{}\tquery:\t{}"
argument_list|,
name|count
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

