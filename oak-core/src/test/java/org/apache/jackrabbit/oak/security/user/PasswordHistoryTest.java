begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|util
operator|.
name|PasswordUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * @see OAK-2445  */
end_comment

begin_class
specifier|public
class|class
name|PasswordHistoryTest
extends|extends
name|AbstractSecurityTest
implements|implements
name|UserConstants
block|{
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|PASSWORDS
init|=
block|{
literal|"abc"
block|,
literal|"def"
block|,
literal|"ghi"
block|,
literal|"jkl"
block|,
literal|"mno"
block|,
literal|"pqr"
block|,
literal|"stu"
block|,
literal|"vwx"
block|,
literal|"yz0"
block|,
literal|"123"
block|,
literal|"456"
block|,
literal|"789"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ConfigurationParameters
name|CONFIG
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|PARAM_PASSWORD_HISTORY_SIZE
argument_list|,
literal|10
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|ConfigurationParameters
name|getSecurityConfigParameters
parameter_list|()
block|{
return|return
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|UserConfiguration
operator|.
name|NAME
argument_list|,
name|CONFIG
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getHistory
parameter_list|(
annotation|@
name|Nonnull
name|User
name|user
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|TreeUtil
operator|.
name|getStrings
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getChild
argument_list|(
name|REP_PWD
argument_list|)
argument_list|,
name|REP_PWD_HISTORY
argument_list|)
argument_list|)
operator|.
name|reverse
argument_list|()
return|;
block|}
comment|/**      * Use reflection to access the private fields stored in the PasswordHistory      */
specifier|private
specifier|static
name|Integer
name|getMaxSize
parameter_list|(
annotation|@
name|Nonnull
name|PasswordHistory
name|history
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|maxSize
init|=
name|history
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"maxSize"
argument_list|)
decl_stmt|;
name|maxSize
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|Integer
operator|)
name|maxSize
operator|.
name|get
argument_list|(
name|history
argument_list|)
return|;
block|}
comment|/**      * Use reflection to access the private fields stored in the PasswordHistory      */
specifier|private
specifier|static
name|boolean
name|isEnabled
parameter_list|(
annotation|@
name|Nonnull
name|PasswordHistory
name|history
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|isEnabled
init|=
name|history
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"isEnabled"
argument_list|)
decl_stmt|;
name|isEnabled
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|isEnabled
operator|.
name|get
argument_list|(
name|history
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoPwdTreeOnUserCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|getTestUser
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|hasChild
argument_list|(
name|REP_PWD
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHistoryEmptyOnUserCreationWithPassword
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|getTestUser
argument_list|()
decl_stmt|;
comment|// the user is created with a password set
comment|// the rep:pwd child must not exist. without the rep:pwd child no password history can exist.
name|assertFalse
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|hasChild
argument_list|(
name|REP_PWD
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHistoryWithSinglePasswordChange
parameter_list|()
throws|throws
name|Exception
block|{
comment|// the user must be able to change the password
name|User
name|user
init|=
name|getTestUser
argument_list|()
decl_stmt|;
name|String
name|oldPassword
init|=
name|TreeUtil
operator|.
name|getString
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|REP_PASSWORD
argument_list|)
decl_stmt|;
name|user
operator|.
name|changePassword
argument_list|(
literal|"newPwd"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// after changing the password, 1 password history entry should be present and the
comment|// recorded password should be equal to the user's initial password
comment|// however, the user's current password must not match the old password.
name|assertTrue
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|hasChild
argument_list|(
name|REP_PWD
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|pwTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getChild
argument_list|(
name|REP_PWD
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pwTree
operator|.
name|hasProperty
argument_list|(
name|REP_PWD_HISTORY
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|history
init|=
name|getHistory
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|history
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldPassword
argument_list|,
name|history
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|currentPw
init|=
name|TreeUtil
operator|.
name|getString
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|REP_PASSWORD
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|currentPw
argument_list|,
name|oldPassword
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHistoryMaxSize
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|getTestUser
argument_list|()
decl_stmt|;
comment|// we're changing the password 12 times, history max is 10
for|for
control|(
name|String
name|pw
range|:
name|PASSWORDS
control|)
block|{
name|user
operator|.
name|changePassword
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|getHistory
argument_list|(
name|user
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHistoryOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|getTestUser
argument_list|()
decl_stmt|;
comment|// we're changing the password 12 times, history max is 10
for|for
control|(
name|String
name|pw
range|:
name|PASSWORDS
control|)
block|{
name|user
operator|.
name|changePassword
argument_list|(
name|pw
argument_list|)
expr_stmt|;
block|}
comment|// we skip the first entry in the password list as it was shifted out
comment|// due to max history size = 10.
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
name|String
name|pwHash
range|:
name|getHistory
argument_list|(
name|user
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|PasswordUtil
operator|.
name|isSame
argument_list|(
name|pwHash
argument_list|,
name|PASSWORDS
index|[
name|i
operator|++
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRepeatedPwAfterHistorySizeReached
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|getTestUser
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|pw
range|:
name|PASSWORDS
control|)
block|{
name|user
operator|.
name|changePassword
argument_list|(
name|pw
argument_list|)
expr_stmt|;
block|}
comment|// changing pw back to the original value (as used for creation) must succeed
name|user
operator|.
name|changePassword
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// now, using all old passwords must also succeed as they get shifted out
for|for
control|(
name|String
name|pw
range|:
name|PASSWORDS
control|)
block|{
name|user
operator|.
name|changePassword
argument_list|(
name|pw
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testHistoryViolationAtFirstChange
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|getTestUser
argument_list|()
decl_stmt|;
name|user
operator|.
name|changePassword
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testHistoryViolation
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|getTestUser
argument_list|()
decl_stmt|;
name|user
operator|.
name|changePassword
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|user
operator|.
name|changePassword
argument_list|(
literal|"def"
argument_list|)
expr_stmt|;
name|user
operator|.
name|changePassword
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoHistoryUpdateOnViolation
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|getTestUser
argument_list|()
decl_stmt|;
try|try
block|{
name|user
operator|.
name|changePassword
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|user
operator|.
name|changePassword
argument_list|(
literal|"def"
argument_list|)
expr_stmt|;
name|user
operator|.
name|changePassword
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"history violation not detected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConstraintViolationException
name|e
parameter_list|)
block|{
name|String
index|[]
name|expected
init|=
operator|new
name|String
index|[]
block|{
name|user
operator|.
name|getID
argument_list|()
block|,
literal|"abc"
block|}
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|pwHash
range|:
name|getHistory
argument_list|(
name|user
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|PasswordUtil
operator|.
name|isSame
argument_list|(
name|pwHash
argument_list|,
name|expected
index|[
name|i
operator|++
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnabledPasswordHistory
parameter_list|()
throws|throws
name|Exception
block|{
name|PasswordHistory
name|history
init|=
operator|new
name|PasswordHistory
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isEnabled
argument_list|(
name|history
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|getMaxSize
argument_list|(
name|history
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHistoryUpperLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|PasswordHistory
name|history
init|=
operator|new
name|PasswordHistory
argument_list|(
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|PARAM_PASSWORD_HISTORY_SIZE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isEnabled
argument_list|(
name|history
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|getMaxSize
argument_list|(
name|history
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisabledPasswordHistory
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|getTestUser
argument_list|()
decl_stmt|;
name|Tree
name|userTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ConfigurationParameters
argument_list|>
name|configs
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|PARAM_PASSWORD_HISTORY_SIZE
argument_list|,
name|PASSWORD_HISTORY_DISABLED_SIZE
argument_list|)
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|PARAM_PASSWORD_HISTORY_SIZE
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|PARAM_PASSWORD_HISTORY_SIZE
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|ConfigurationParameters
name|config
range|:
name|configs
control|)
block|{
name|PasswordHistory
name|disabledHistory
init|=
operator|new
name|PasswordHistory
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|isEnabled
argument_list|(
name|disabledHistory
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|disabledHistory
operator|.
name|updatePasswordHistory
argument_list|(
name|userTree
argument_list|,
name|user
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCheckPasswordHistory
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|userTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|PasswordHistory
name|history
init|=
operator|new
name|PasswordHistory
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isEnabled
argument_list|(
name|history
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|getMaxSize
argument_list|(
name|history
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|history
operator|.
name|updatePasswordHistory
argument_list|(
name|userTree
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigurationChange
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|getTestUser
argument_list|()
decl_stmt|;
name|Tree
name|userTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|PasswordHistory
name|history
init|=
operator|new
name|PasswordHistory
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pw
range|:
name|PASSWORDS
control|)
block|{
name|assertTrue
argument_list|(
name|history
operator|.
name|updatePasswordHistory
argument_list|(
name|userTree
argument_list|,
name|pw
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|getHistory
argument_list|(
name|user
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// change configuration to a smaller size
name|history
operator|=
operator|new
name|PasswordHistory
argument_list|(
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|PARAM_PASSWORD_HISTORY_SIZE
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|oldPwds
init|=
name|getHistory
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|oldPwds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// only the configured max-size number of entries in the history must be
comment|// checked. additional entries in the history must be ignored
name|Iterables
operator|.
name|skip
argument_list|(
name|oldPwds
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|history
operator|.
name|updatePasswordHistory
argument_list|(
name|userTree
argument_list|,
name|oldPwds
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// after chaning the pwd again however the rep:pwdHistory property must
comment|// only contain the max-size number of passwords
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|getHistory
argument_list|(
name|user
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|history
operator|=
operator|new
name|PasswordHistory
argument_list|(
name|CONFIG
argument_list|)
expr_stmt|;
name|history
operator|.
name|updatePasswordHistory
argument_list|(
name|userTree
argument_list|,
literal|"newPwd"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|getHistory
argument_list|(
name|user
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnableDisable
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|getTestUser
argument_list|()
decl_stmt|;
name|Tree
name|userTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|PasswordHistory
name|history
init|=
operator|new
name|PasswordHistory
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pw
range|:
name|PASSWORDS
control|)
block|{
name|assertTrue
argument_list|(
name|history
operator|.
name|updatePasswordHistory
argument_list|(
name|userTree
argument_list|,
name|pw
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|getHistory
argument_list|(
name|user
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// disable the password history : changing the pw now must not
comment|// modify the rep:pwdHistory property.
name|history
operator|=
operator|new
name|PasswordHistory
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|history
operator|.
name|updatePasswordHistory
argument_list|(
name|userTree
argument_list|,
name|PASSWORDS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|getHistory
argument_list|(
name|user
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleTypeHistoryProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|userTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|pwdNode
init|=
operator|new
name|NodeUtil
argument_list|(
name|userTree
argument_list|)
operator|.
name|getOrAddChild
argument_list|(
name|REP_PWD
argument_list|,
name|NT_REP_PASSWORD
argument_list|)
operator|.
name|getTree
argument_list|()
decl_stmt|;
name|pwdNode
operator|.
name|setProperty
argument_list|(
name|REP_PWD_HISTORY
argument_list|,
literal|"singleValuedProperty"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pwdNode
operator|.
name|getProperty
argument_list|(
name|REP_PWD_HISTORY
argument_list|)
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pwdNode
operator|.
name|getProperty
argument_list|(
name|REP_PWD_HISTORY
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|PasswordHistory
name|history
init|=
operator|new
name|PasswordHistory
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|history
operator|.
name|updatePasswordHistory
argument_list|(
name|userTree
argument_list|,
literal|"anyOtherPassword"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pwdNode
operator|.
name|getProperty
argument_list|(
name|REP_PWD_HISTORY
argument_list|)
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pwdNode
operator|.
name|getProperty
argument_list|(
name|REP_PWD_HISTORY
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

