begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|StateConsumerTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|shouldProvideChannelRegisteredState
parameter_list|()
throws|throws
name|Exception
block|{
name|StateConsumer
name|consumer
init|=
name|mock
argument_list|(
name|StateConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|StateHandler
name|handler
init|=
operator|new
name|StateHandler
argument_list|(
name|consumer
argument_list|)
decl_stmt|;
name|handler
operator|.
name|channelRegistered
argument_list|(
name|mock
argument_list|(
name|ChannelHandlerContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|consumer
argument_list|)
operator|.
name|consumeState
argument_list|(
literal|"channel registered"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldPropagateChannelRegisteredEvent
parameter_list|()
throws|throws
name|Exception
block|{
name|StateHandler
name|handler
init|=
operator|new
name|StateHandler
argument_list|(
name|mock
argument_list|(
name|StateConsumer
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|ChannelHandlerContext
name|ctx
init|=
name|mock
argument_list|(
name|ChannelHandlerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|handler
operator|.
name|channelRegistered
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ctx
argument_list|)
operator|.
name|fireChannelRegistered
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldProvideChannelUnregisteredState
parameter_list|()
throws|throws
name|Exception
block|{
name|StateConsumer
name|consumer
init|=
name|mock
argument_list|(
name|StateConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|StateHandler
name|handler
init|=
operator|new
name|StateHandler
argument_list|(
name|consumer
argument_list|)
decl_stmt|;
name|handler
operator|.
name|channelUnregistered
argument_list|(
name|mock
argument_list|(
name|ChannelHandlerContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|consumer
argument_list|)
operator|.
name|consumeState
argument_list|(
literal|"channel unregistered"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldPropagateChannelUnregisteredEvent
parameter_list|()
throws|throws
name|Exception
block|{
name|StateHandler
name|handler
init|=
operator|new
name|StateHandler
argument_list|(
name|mock
argument_list|(
name|StateConsumer
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|ChannelHandlerContext
name|ctx
init|=
name|mock
argument_list|(
name|ChannelHandlerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|handler
operator|.
name|channelUnregistered
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ctx
argument_list|)
operator|.
name|fireChannelUnregistered
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldProvideChannelActiveState
parameter_list|()
throws|throws
name|Exception
block|{
name|StateConsumer
name|consumer
init|=
name|mock
argument_list|(
name|StateConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|StateHandler
name|handler
init|=
operator|new
name|StateHandler
argument_list|(
name|consumer
argument_list|)
decl_stmt|;
name|handler
operator|.
name|channelActive
argument_list|(
name|mock
argument_list|(
name|ChannelHandlerContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|consumer
argument_list|)
operator|.
name|consumeState
argument_list|(
literal|"channel active"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldPropagateChannelActiveEvent
parameter_list|()
throws|throws
name|Exception
block|{
name|StateHandler
name|handler
init|=
operator|new
name|StateHandler
argument_list|(
name|mock
argument_list|(
name|StateConsumer
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|ChannelHandlerContext
name|ctx
init|=
name|mock
argument_list|(
name|ChannelHandlerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|handler
operator|.
name|channelActive
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ctx
argument_list|)
operator|.
name|fireChannelActive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldProvideChannelInactiveState
parameter_list|()
throws|throws
name|Exception
block|{
name|StateConsumer
name|consumer
init|=
name|mock
argument_list|(
name|StateConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|StateHandler
name|handler
init|=
operator|new
name|StateHandler
argument_list|(
name|consumer
argument_list|)
decl_stmt|;
name|handler
operator|.
name|channelInactive
argument_list|(
name|mock
argument_list|(
name|ChannelHandlerContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|consumer
argument_list|)
operator|.
name|consumeState
argument_list|(
literal|"channel inactive"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldPropagateChannelInactiveEvent
parameter_list|()
throws|throws
name|Exception
block|{
name|StateHandler
name|handler
init|=
operator|new
name|StateHandler
argument_list|(
name|mock
argument_list|(
name|StateConsumer
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|ChannelHandlerContext
name|ctx
init|=
name|mock
argument_list|(
name|ChannelHandlerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|handler
operator|.
name|channelInactive
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ctx
argument_list|)
operator|.
name|fireChannelInactive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldProvideGotMessageState
parameter_list|()
throws|throws
name|Exception
block|{
name|StateConsumer
name|consumer
init|=
name|mock
argument_list|(
name|StateConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|StateHandler
name|handler
init|=
operator|new
name|StateHandler
argument_list|(
name|consumer
argument_list|)
decl_stmt|;
name|handler
operator|.
name|channelRead
argument_list|(
name|mock
argument_list|(
name|ChannelHandlerContext
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|consumer
argument_list|)
operator|.
name|consumeState
argument_list|(
literal|"got message"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldPropagateChannelReadEvent
parameter_list|()
throws|throws
name|Exception
block|{
name|StateHandler
name|handler
init|=
operator|new
name|StateHandler
argument_list|(
name|mock
argument_list|(
name|StateConsumer
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|ChannelHandlerContext
name|ctx
init|=
name|mock
argument_list|(
name|ChannelHandlerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
name|msg
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|handler
operator|.
name|channelRead
argument_list|(
name|ctx
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ctx
argument_list|)
operator|.
name|fireChannelRead
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldProvideExceptionState
parameter_list|()
throws|throws
name|Exception
block|{
name|StateConsumer
name|consumer
init|=
name|mock
argument_list|(
name|StateConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|StateHandler
name|handler
init|=
operator|new
name|StateHandler
argument_list|(
name|consumer
argument_list|)
decl_stmt|;
name|handler
operator|.
name|exceptionCaught
argument_list|(
name|mock
argument_list|(
name|ChannelHandlerContext
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Throwable
argument_list|(
literal|"message"
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|consumer
argument_list|)
operator|.
name|consumeState
argument_list|(
literal|"exception occurred: message"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldPropagateExceptionCaughtEvent
parameter_list|()
throws|throws
name|Exception
block|{
name|StateHandler
name|handler
init|=
operator|new
name|StateHandler
argument_list|(
name|mock
argument_list|(
name|StateConsumer
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|ChannelHandlerContext
name|ctx
init|=
name|mock
argument_list|(
name|ChannelHandlerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Throwable
name|t
init|=
operator|new
name|Throwable
argument_list|()
decl_stmt|;
name|handler
operator|.
name|exceptionCaught
argument_list|(
name|ctx
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ctx
argument_list|)
operator|.
name|fireExceptionCaught
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

