begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests for {@link CachingFileDataStore}.  */
end_comment

begin_class
specifier|public
class|class
name|CachingFileDataStoreTest
extends|extends
name|AbstractDataStoreTest
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CachingFileDataStoreTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Properties
name|props
decl_stmt|;
specifier|private
name|String
name|fsBackendPath
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|fsBackendPath
operator|=
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|props
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"fsBackendPath"
argument_list|,
name|fsBackendPath
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|DataStore
name|createDataStore
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|CachingFileDataStore
name|ds
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ds
operator|=
operator|new
name|CachingFileDataStore
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
init|=
name|DataStoreUtils
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|props
operator|.
name|putAll
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|PropertiesUtil
operator|.
name|populate
argument_list|(
name|ds
argument_list|,
name|config
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ds
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|ds
operator|.
name|init
argument_list|(
name|dataStoreDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|ds
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|assertReferenceKey
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|dataLength
index|]
decl_stmt|;
name|randomGen
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|DataRecord
name|rec
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|rec
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertRecord
argument_list|(
name|data
argument_list|,
name|rec
argument_list|)
expr_stmt|;
name|DataRecord
name|refRec
init|=
name|ds
operator|.
name|getRecordFromReference
argument_list|(
name|rec
operator|.
name|getReference
argument_list|()
argument_list|)
decl_stmt|;
name|assertRecord
argument_list|(
name|data
argument_list|,
name|refRec
argument_list|)
expr_stmt|;
comment|// Check bytes retrieved from reference.key file
name|File
name|refFile
init|=
operator|new
name|File
argument_list|(
name|fsBackendPath
argument_list|,
literal|"reference.key"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|refFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|keyRet
init|=
name|FileUtils
operator|.
name|readFileToByteArray
argument_list|(
name|refFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|keyRet
operator|.
name|length
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**      * ---------- skip -----------      **/
annotation|@
name|Override
specifier|public
name|void
name|testUpdateLastModifiedOnAccess
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|testDeleteAllOlderThan
parameter_list|()
block|{     }
block|}
end_class

end_unit

