begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|backup
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Compactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|FileStoreBackup
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileStoreBackup
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_LIFETIME
init|=
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|static
name|int
name|MAX_FILE_SIZE
init|=
literal|256
decl_stmt|;
specifier|public
specifier|static
name|void
name|backup
parameter_list|(
name|NodeStore
name|store
parameter_list|,
name|File
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|s
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// 1. create a new checkpoint with the current state
name|String
name|checkpoint
init|=
name|store
operator|.
name|checkpoint
argument_list|(
name|DEFAULT_LIFETIME
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"creator"
argument_list|,
name|FileStoreBackup
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|"thread"
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|NodeState
name|current
init|=
name|store
operator|.
name|retrieve
argument_list|(
name|checkpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
comment|// unable to retrieve the checkpoint; use root state instead
name|current
operator|=
name|store
operator|.
name|getRoot
argument_list|()
expr_stmt|;
block|}
comment|// 2. init filestore
name|FileStore
name|backup
init|=
operator|new
name|FileStore
argument_list|(
name|destination
argument_list|,
name|MAX_FILE_SIZE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|SegmentNodeState
name|state
init|=
name|backup
operator|.
name|getHead
argument_list|()
decl_stmt|;
name|NodeState
name|before
init|=
literal|null
decl_stmt|;
name|String
name|beforeCheckpoint
init|=
name|state
operator|.
name|getString
argument_list|(
literal|"checkpoint"
argument_list|)
decl_stmt|;
if|if
condition|(
name|beforeCheckpoint
operator|==
literal|null
condition|)
block|{
comment|// 3.1 no stored checkpoint, so do the initial full backup
name|before
operator|=
name|EMPTY_NODE
expr_stmt|;
block|}
else|else
block|{
comment|// 3.2 try to retrieve the previously backed up checkpoint
name|before
operator|=
name|store
operator|.
name|retrieve
argument_list|(
name|beforeCheckpoint
argument_list|)
expr_stmt|;
if|if
condition|(
name|before
operator|==
literal|null
condition|)
block|{
comment|// the previous checkpoint is no longer available,
comment|// so use the backed up state as the basis of the
comment|// incremental backup diff
name|before
operator|=
name|state
operator|.
name|getChildNode
argument_list|(
literal|"root"
argument_list|)
expr_stmt|;
block|}
block|}
name|Compactor
name|compactor
init|=
operator|new
name|Compactor
argument_list|(
name|backup
argument_list|)
decl_stmt|;
name|SegmentNodeState
name|after
init|=
name|compactor
operator|.
name|compact
argument_list|(
name|before
argument_list|,
name|current
argument_list|)
decl_stmt|;
comment|// 4. commit the backup
name|SegmentNodeBuilder
name|builder
init|=
name|state
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"checkpoint"
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"root"
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|backup
operator|.
name|setHead
argument_list|(
name|state
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|backup
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Backup finished in {} ms."
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

