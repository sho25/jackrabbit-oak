begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiUtil
operator|.
name|lookupConfigurationThenFramework
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|osgi
operator|.
name|SplitBlobStoreService
operator|.
name|ONLY_STANDALONE_TARGET
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A factory allowing creation of secondary segment node stores.  *<p>  * The different secondaries are distinguished by their role attribute.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
name|name
operator|=
literal|"org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory"
argument_list|,
name|configurationFactory
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"Apache Jackrabbit Oak Segment-Tar NodeStore Factory"
argument_list|,
name|description
operator|=
literal|"Factory allowing configuration of adjacent instances of "
operator|+
literal|"NodeStore implementation based on Segment model besides a default SegmentNodeStore in same setup."
argument_list|)
specifier|public
class|class
name|SegmentNodeStoreFactory
block|{
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Role"
argument_list|,
name|description
operator|=
literal|"As multiple SegmentNodeStores can be configured, this parameter defines the role "
operator|+
literal|"of 'this' SegmentNodeStore."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|ROLE
init|=
literal|"role"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
literal|false
argument_list|,
name|label
operator|=
literal|"Custom BlobStore"
argument_list|,
name|description
operator|=
literal|"Boolean value indicating that a custom BlobStore is to be used. "
operator|+
literal|"By default large binary content would be stored within segment tar files"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_BLOB_STORE
init|=
literal|"customBlobStore"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
literal|false
argument_list|,
name|label
operator|=
literal|"Custom segment store"
argument_list|,
name|description
operator|=
literal|"Boolean value indicating that a custom (non-tar) segment store is used"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_SEGMENT_STORE
init|=
literal|"customSegmentStore"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
literal|false
argument_list|,
name|label
operator|=
literal|"Register JCR descriptors as OSGi services"
argument_list|,
name|description
operator|=
literal|"Should only be done for one factory instance"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|REGISTER_DESCRIPTORS
init|=
literal|"registerDescriptors"
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|STATIC
argument_list|,
name|policyOption
operator|=
name|ReferencePolicyOption
operator|.
name|GREEDY
argument_list|,
name|target
operator|=
name|ONLY_STANDALONE_TARGET
argument_list|)
specifier|private
specifier|volatile
name|BlobStore
name|blobStore
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|STATIC
argument_list|,
name|policyOption
operator|=
name|ReferencePolicyOption
operator|.
name|GREEDY
argument_list|)
specifier|private
specifier|volatile
name|SegmentNodeStorePersistence
name|segmentStore
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|StatisticsProvider
name|statisticsProvider
init|=
name|StatisticsProvider
operator|.
name|NOOP
decl_stmt|;
specifier|private
name|Closer
name|registrations
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
annotation|@
name|Activate
specifier|public
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|role
init|=
name|property
argument_list|(
name|ROLE
argument_list|,
name|context
argument_list|)
decl_stmt|;
comment|// In secondaryNodeStore mode customBlobStore is always enabled
name|boolean
name|isSecondaryStoreMode
init|=
literal|"secondary"
operator|.
name|equals
argument_list|(
name|role
argument_list|)
decl_stmt|;
name|boolean
name|customBlobStore
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|property
argument_list|(
name|CUSTOM_BLOB_STORE
argument_list|,
name|context
argument_list|)
argument_list|)
operator|||
name|isSecondaryStoreMode
decl_stmt|;
name|boolean
name|customSegmentStore
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|property
argument_list|(
name|CUSTOM_SEGMENT_STORE
argument_list|,
name|context
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|registerRepositoryDescriptors
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|property
argument_list|(
name|REGISTER_DESCRIPTORS
argument_list|,
name|context
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"activate: SegmentNodeStore '"
operator|+
name|role
operator|+
literal|"' starting."
argument_list|)
expr_stmt|;
if|if
condition|(
name|blobStore
operator|==
literal|null
operator|&&
name|customBlobStore
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"BlobStore use enabled. SegmentNodeStore would be initialized when BlobStore would be available"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|segmentStore
operator|==
literal|null
operator|&&
name|customSegmentStore
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"customSegmentStore enabled. SegmentNodeStore will be initialized once the custom segment store becomes available"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|role
operator|!=
literal|null
condition|)
block|{
name|registrations
operator|=
name|Closer
operator|.
name|create
argument_list|()
expr_stmt|;
name|OsgiWhiteboard
name|whiteboard
init|=
operator|new
name|OsgiWhiteboard
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|SegmentNodeStore
name|store
init|=
name|SegmentNodeStoreService
operator|.
name|registerSegmentStore
argument_list|(
name|context
argument_list|,
name|blobStore
argument_list|,
name|segmentStore
argument_list|,
name|statisticsProvider
argument_list|,
name|registrations
argument_list|,
name|whiteboard
argument_list|,
name|role
argument_list|,
name|registerRepositoryDescriptors
argument_list|)
decl_stmt|;
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|NodeStoreProvider
operator|.
name|ROLE
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|registrations
operator|.
name|register
argument_list|(
name|asCloseable
argument_list|(
name|whiteboard
operator|.
name|register
argument_list|(
name|NodeStoreProvider
operator|.
name|class
argument_list|,
operator|new
name|NodeStoreProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeStore
name|getNodeStore
parameter_list|()
block|{
return|return
name|store
return|;
block|}
block|}
argument_list|,
name|props
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Registered NodeStoreProvider backed by SegmentNodeStore of type '{}'"
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Deactivate
specifier|public
name|void
name|deactivate
parameter_list|()
block|{
if|if
condition|(
name|registrations
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|registrations
argument_list|)
expr_stmt|;
name|registrations
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Closeable
name|asCloseable
parameter_list|(
specifier|final
name|Registration
name|r
parameter_list|)
block|{
return|return
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|r
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|static
name|String
name|property
parameter_list|(
name|String
name|name
parameter_list|,
name|ComponentContext
name|context
parameter_list|)
block|{
return|return
name|lookupConfigurationThenFramework
argument_list|(
name|context
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

