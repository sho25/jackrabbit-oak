begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|currentThread
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentId
operator|.
name|isDataSegmentId
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|GCType
operator|.
name|FULL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|GCType
operator|.
name|TAIL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCStatus
operator|.
name|CLEANUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCStatus
operator|.
name|COMPACTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCStatus
operator|.
name|COMPACTION_FORCE_COMPACT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCStatus
operator|.
name|COMPACTION_RETRY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCStatus
operator|.
name|ESTIMATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCStatus
operator|.
name|IDLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|PrintableBytes
operator|.
name|newPrintableBytes
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|TarRevisions
operator|.
name|EXPEDITE_OPTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|TarRevisions
operator|.
name|timeout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|CheckpointCompactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|CleanupContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|GCGeneration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|TarFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_class
class|class
name|DefaultGarbageCollectionStrategy
implements|implements
name|GarbageCollectionStrategy
block|{
specifier|private
name|GCGeneration
name|getGcGeneration
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|getRevisions
argument_list|()
operator|.
name|getHead
argument_list|()
operator|.
name|getSegmentId
argument_list|()
operator|.
name|getGcGeneration
argument_list|()
return|;
block|}
specifier|private
name|SegmentNodeState
name|getBase
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|String
name|root
init|=
name|context
operator|.
name|getGCJournal
argument_list|()
operator|.
name|read
argument_list|()
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|RecordId
name|rootId
init|=
name|RecordId
operator|.
name|fromString
argument_list|(
name|context
operator|.
name|getSegmentTracker
argument_list|()
argument_list|,
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|RecordId
operator|.
name|NULL
operator|.
name|equals
argument_list|(
name|rootId
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|SegmentNodeState
name|node
init|=
name|context
operator|.
name|getSegmentReader
argument_list|()
operator|.
name|readNode
argument_list|(
name|rootId
argument_list|)
decl_stmt|;
name|node
operator|.
name|getPropertyCount
argument_list|()
expr_stmt|;
comment|// Resilience: fail early with a SNFE if the segment is not there
return|return
name|node
return|;
block|}
catch|catch
parameter_list|(
name|SegmentNotFoundException
name|snfe
parameter_list|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|error
argument_list|(
literal|"base state "
operator|+
name|rootId
operator|+
literal|" is not accessible"
argument_list|,
name|snfe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|SegmentNodeState
name|getHead
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|getSegmentReader
argument_list|()
operator|.
name|readHeadState
argument_list|(
name|context
operator|.
name|getRevisions
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|collectGarbage
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|context
operator|.
name|getGCOptions
argument_list|()
operator|.
name|getGCType
argument_list|()
condition|)
block|{
case|case
name|FULL
case|:
name|collectFullGarbage
argument_list|(
name|context
argument_list|)
expr_stmt|;
break|break;
case|case
name|TAIL
case|:
name|collectTailGarbage
argument_list|(
name|context
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Invalid GC type"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|collectFullGarbage
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|run
argument_list|(
name|context
argument_list|,
literal|true
argument_list|,
name|this
operator|::
name|compactFull
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|collectTailGarbage
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|run
argument_list|(
name|context
argument_list|,
literal|false
argument_list|,
name|this
operator|::
name|compactTail
argument_list|)
expr_stmt|;
block|}
specifier|private
interface|interface
name|Compactor
block|{
name|CompactionResult
name|compact
parameter_list|(
name|Context
name|contex
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|private
name|void
name|run
parameter_list|(
name|Context
name|context
parameter_list|,
name|boolean
name|full
parameter_list|,
name|Compactor
name|compact
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"started"
argument_list|)
expr_stmt|;
name|long
name|dt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|context
operator|.
name|getLastSuccessfulGC
argument_list|()
decl_stmt|;
if|if
condition|(
name|dt
operator|<
name|context
operator|.
name|getGCBackOff
argument_list|()
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|skipped
argument_list|(
literal|"skipping garbage collection as it already ran less than {} hours ago ({} s)."
argument_list|,
name|context
operator|.
name|getGCBackOff
argument_list|()
operator|/
literal|3600000
argument_list|,
name|dt
operator|/
literal|1000
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|sufficientEstimatedGain
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getGCOptions
argument_list|()
operator|.
name|isEstimationDisabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"estimation skipped because it was explicitly disabled"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|getGCOptions
argument_list|()
operator|.
name|isPaused
argument_list|()
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"estimation skipped because compaction is paused"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"estimation started"
argument_list|)
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|updateStatus
argument_list|(
name|ESTIMATION
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
name|PrintableStopwatch
name|watch
init|=
name|PrintableStopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|GCEstimationResult
name|estimation
init|=
name|estimateCompactionGain
argument_list|(
name|context
argument_list|,
name|full
argument_list|)
decl_stmt|;
name|sufficientEstimatedGain
operator|=
name|estimation
operator|.
name|isGcNeeded
argument_list|()
expr_stmt|;
name|String
name|gcLog
init|=
name|estimation
operator|.
name|getGcLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|sufficientEstimatedGain
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"estimation completed in {}. {}"
argument_list|,
name|watch
argument_list|,
name|gcLog
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|skipped
argument_list|(
literal|"estimation completed in {}. {}"
argument_list|,
name|watch
argument_list|,
name|gcLog
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sufficientEstimatedGain
condition|)
block|{
try|try
init|(
name|GCMemoryBarrier
name|ignored
init|=
operator|new
name|GCMemoryBarrier
argument_list|(
name|context
operator|.
name|getSufficientMemory
argument_list|()
argument_list|,
name|context
operator|.
name|getGCListener
argument_list|()
argument_list|,
name|context
operator|.
name|getGCOptions
argument_list|()
argument_list|)
init|)
block|{
if|if
condition|(
name|context
operator|.
name|getGCOptions
argument_list|()
operator|.
name|isPaused
argument_list|()
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|skipped
argument_list|(
literal|"compaction paused"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|context
operator|.
name|getSufficientMemory
argument_list|()
operator|.
name|get
argument_list|()
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|skipped
argument_list|(
literal|"compaction skipped. Not enough memory"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CompactionResult
name|compactionResult
init|=
name|compact
operator|.
name|compact
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|compactionResult
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|context
operator|.
name|getSuccessfulGarbageCollectionListener
argument_list|()
operator|.
name|onSuccessfulGarbageCollection
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"cleaning up after failed compaction"
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|getFileReaper
argument_list|()
operator|.
name|add
argument_list|(
name|cleanup
argument_list|(
name|context
argument_list|,
name|compactionResult
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|context
operator|.
name|getCompactionMonitor
argument_list|()
operator|.
name|finished
argument_list|()
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|updateStatus
argument_list|(
name|IDLE
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|CompactionResult
name|compactFull
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"running full compaction"
argument_list|)
expr_stmt|;
return|return
name|compact
argument_list|(
name|context
argument_list|,
name|FULL
argument_list|,
name|EMPTY_NODE
argument_list|,
name|getGcGeneration
argument_list|(
name|context
argument_list|)
operator|.
name|nextFull
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|CompactionResult
name|compactTail
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"running tail compaction"
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|base
init|=
name|getBase
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
return|return
name|compact
argument_list|(
name|context
argument_list|,
name|TAIL
argument_list|,
name|base
argument_list|,
name|getGcGeneration
argument_list|(
name|context
argument_list|)
operator|.
name|nextTail
argument_list|()
argument_list|)
return|;
block|}
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"no base state available, running full compaction instead"
argument_list|)
expr_stmt|;
return|return
name|compact
argument_list|(
name|context
argument_list|,
name|FULL
argument_list|,
name|EMPTY_NODE
argument_list|,
name|getGcGeneration
argument_list|(
name|context
argument_list|)
operator|.
name|nextFull
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|CompactionResult
name|compact
parameter_list|(
name|Context
name|context
parameter_list|,
name|SegmentGCOptions
operator|.
name|GCType
name|gcType
parameter_list|,
name|NodeState
name|base
parameter_list|,
name|GCGeneration
name|newGeneration
parameter_list|)
block|{
try|try
block|{
name|PrintableStopwatch
name|watch
init|=
name|PrintableStopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"compaction started, gc options={}, current generation={}, new generation={}"
argument_list|,
name|context
operator|.
name|getGCOptions
argument_list|()
argument_list|,
name|getHead
argument_list|(
name|context
argument_list|)
operator|.
name|getRecordId
argument_list|()
operator|.
name|getSegment
argument_list|()
operator|.
name|getGcGeneration
argument_list|()
argument_list|,
name|newGeneration
argument_list|)
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|updateStatus
argument_list|(
name|COMPACTION
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
name|GCJournal
operator|.
name|GCJournalEntry
name|gcEntry
init|=
name|context
operator|.
name|getGCJournal
argument_list|()
operator|.
name|read
argument_list|()
decl_stmt|;
name|long
name|initialSize
init|=
name|size
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|SegmentWriter
name|writer
init|=
name|context
operator|.
name|getSegmentWriterFactory
argument_list|()
operator|.
name|newSegmentWriter
argument_list|(
name|newGeneration
argument_list|)
decl_stmt|;
name|context
operator|.
name|getCompactionMonitor
argument_list|()
operator|.
name|init
argument_list|(
name|gcEntry
operator|.
name|getRepoSize
argument_list|()
argument_list|,
name|gcEntry
operator|.
name|getNodes
argument_list|()
argument_list|,
name|initialSize
argument_list|)
expr_stmt|;
name|CheckpointCompactor
name|compactor
init|=
operator|new
name|CheckpointCompactor
argument_list|(
name|context
operator|.
name|getGCListener
argument_list|()
argument_list|,
name|context
operator|.
name|getSegmentReader
argument_list|()
argument_list|,
name|writer
argument_list|,
name|context
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|context
operator|.
name|getCanceller
argument_list|()
argument_list|,
name|context
operator|.
name|getCompactionMonitor
argument_list|()
argument_list|)
decl_stmt|;
name|SegmentNodeState
name|head
init|=
name|getHead
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|SegmentNodeState
name|compacted
init|=
name|compactor
operator|.
name|compact
argument_list|(
name|base
argument_list|,
name|head
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|compacted
operator|==
literal|null
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|warn
argument_list|(
literal|"compaction cancelled: {}."
argument_list|,
name|context
operator|.
name|getCanceller
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|compactionAborted
argument_list|(
name|context
argument_list|,
name|newGeneration
argument_list|)
return|;
block|}
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"compaction cycle 0 completed in {}. Compacted {} to {}"
argument_list|,
name|watch
argument_list|,
name|head
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|compacted
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|cycles
init|=
literal|0
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|SegmentNodeState
name|previousHead
init|=
name|head
decl_stmt|;
while|while
condition|(
name|cycles
operator|<
name|context
operator|.
name|getGCOptions
argument_list|()
operator|.
name|getRetryCount
argument_list|()
operator|&&
operator|!
operator|(
name|success
operator|=
name|context
operator|.
name|getRevisions
argument_list|()
operator|.
name|setHead
argument_list|(
name|previousHead
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|compacted
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|EXPEDITE_OPTION
argument_list|)
operator|)
condition|)
block|{
comment|// Some other concurrent changes have been made.
comment|// Rebase (and compact) those changes on top of the
comment|// compacted state before retrying to set the head.
name|cycles
operator|++
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"compaction detected concurrent commits while compacting. "
operator|+
literal|"Compacting these commits. Cycle {} of {}"
argument_list|,
name|cycles
argument_list|,
name|context
operator|.
name|getGCOptions
argument_list|()
operator|.
name|getRetryCount
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|updateStatus
argument_list|(
name|COMPACTION_RETRY
operator|.
name|message
argument_list|()
operator|+
name|cycles
argument_list|)
expr_stmt|;
name|PrintableStopwatch
name|cycleWatch
init|=
name|PrintableStopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|head
operator|=
name|getHead
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|compacted
operator|=
name|compactor
operator|.
name|compact
argument_list|(
name|previousHead
argument_list|,
name|head
argument_list|,
name|compacted
argument_list|)
expr_stmt|;
if|if
condition|(
name|compacted
operator|==
literal|null
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|warn
argument_list|(
literal|"compaction cancelled: {}."
argument_list|,
name|context
operator|.
name|getCanceller
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|compactionAborted
argument_list|(
name|context
argument_list|,
name|newGeneration
argument_list|)
return|;
block|}
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"compaction cycle {} completed in {}. Compacted {} against {} to {}"
argument_list|,
name|cycles
argument_list|,
name|cycleWatch
argument_list|,
name|head
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|previousHead
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|compacted
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
name|previousHead
operator|=
name|head
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"compaction gave up compacting concurrent commits after {} cycles."
argument_list|,
name|cycles
argument_list|)
expr_stmt|;
name|int
name|forceTimeout
init|=
name|context
operator|.
name|getGCOptions
argument_list|()
operator|.
name|getForceTimeout
argument_list|()
decl_stmt|;
if|if
condition|(
name|forceTimeout
operator|>
literal|0
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"trying to force compact remaining commits for {} seconds. "
operator|+
literal|"Concurrent commits to the store will be blocked."
argument_list|,
name|forceTimeout
argument_list|)
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|updateStatus
argument_list|(
name|COMPACTION_FORCE_COMPACT
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
name|PrintableStopwatch
name|forceWatch
init|=
name|PrintableStopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|cycles
operator|++
expr_stmt|;
name|context
operator|.
name|getCanceller
argument_list|()
operator|.
name|timeOutAfter
argument_list|(
name|forceTimeout
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|compacted
operator|=
name|forceCompact
argument_list|(
name|context
argument_list|,
name|previousHead
argument_list|,
name|compacted
argument_list|,
name|compactor
argument_list|)
expr_stmt|;
name|success
operator|=
name|compacted
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"compaction succeeded to force compact remaining commits after {}."
argument_list|,
name|forceWatch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|context
operator|.
name|getCanceller
argument_list|()
operator|.
name|get
argument_list|()
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|warn
argument_list|(
literal|"compaction failed to force compact remaining commits "
operator|+
literal|"after {}. Compaction was cancelled: {}."
argument_list|,
name|forceWatch
argument_list|,
name|context
operator|.
name|getCanceller
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|warn
argument_list|(
literal|"compaction failed to force compact remaining commits. "
operator|+
literal|"after {}. Could not acquire exclusive access to the node store."
argument_list|,
name|forceWatch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|success
condition|)
block|{
comment|// Update type of the last compaction before calling methods that could throw an exception.
name|context
operator|.
name|getSuccessfulCompactionListener
argument_list|()
operator|.
name|onSuccessfulCompaction
argument_list|(
name|gcType
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|context
operator|.
name|getFlusher
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"compaction succeeded in {}, after {} cycles"
argument_list|,
name|watch
argument_list|,
name|cycles
argument_list|)
expr_stmt|;
return|return
name|compactionSucceeded
argument_list|(
name|context
argument_list|,
name|gcType
argument_list|,
name|newGeneration
argument_list|,
name|compacted
operator|.
name|getRecordId
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"compaction failed after {}, and {} cycles"
argument_list|,
name|watch
argument_list|,
name|cycles
argument_list|)
expr_stmt|;
return|return
name|compactionAborted
argument_list|(
name|context
argument_list|,
name|newGeneration
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|error
argument_list|(
literal|"compaction interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
name|compactionAborted
argument_list|(
name|context
argument_list|,
name|newGeneration
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|error
argument_list|(
literal|"compaction encountered an error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|compactionAborted
argument_list|(
name|context
argument_list|,
name|newGeneration
argument_list|)
return|;
block|}
block|}
specifier|private
name|CompactionResult
name|compactionAborted
parameter_list|(
name|Context
name|context
parameter_list|,
name|GCGeneration
name|generation
parameter_list|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|compactionFailed
argument_list|(
name|generation
argument_list|)
expr_stmt|;
return|return
name|CompactionResult
operator|.
name|aborted
argument_list|(
name|getGcGeneration
argument_list|(
name|context
argument_list|)
argument_list|,
name|generation
argument_list|,
name|context
operator|.
name|getGCCount
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|CompactionResult
name|compactionSucceeded
parameter_list|(
name|Context
name|context
parameter_list|,
name|SegmentGCOptions
operator|.
name|GCType
name|gcType
parameter_list|,
name|GCGeneration
name|generation
parameter_list|,
name|RecordId
name|compactedRootId
parameter_list|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|compactionSucceeded
argument_list|(
name|generation
argument_list|)
expr_stmt|;
return|return
name|CompactionResult
operator|.
name|succeeded
argument_list|(
name|gcType
argument_list|,
name|generation
argument_list|,
name|context
operator|.
name|getGCOptions
argument_list|()
argument_list|,
name|compactedRootId
argument_list|,
name|context
operator|.
name|getGCCount
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|SegmentNodeState
name|forceCompact
parameter_list|(
name|Context
name|context
parameter_list|,
specifier|final
name|NodeState
name|base
parameter_list|,
specifier|final
name|NodeState
name|onto
parameter_list|,
specifier|final
name|CheckpointCompactor
name|compactor
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|RecordId
name|compactedId
init|=
name|setHead
argument_list|(
name|context
argument_list|,
name|headId
lambda|->
block|{
try|try
block|{
name|PrintableStopwatch
name|t
init|=
name|PrintableStopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|SegmentNodeState
name|after
init|=
name|compactor
operator|.
name|compact
argument_list|(
name|base
argument_list|,
name|context
operator|.
name|getSegmentReader
argument_list|()
operator|.
name|readNode
argument_list|(
name|headId
argument_list|)
argument_list|,
name|onto
argument_list|)
decl_stmt|;
if|if
condition|(
name|after
operator|!=
literal|null
condition|)
block|{
return|return
name|after
operator|.
name|getRecordId
argument_list|()
return|;
block|}
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"compaction cancelled after {}"
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|error
argument_list|(
literal|"error during forced compaction."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|compactedId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|context
operator|.
name|getSegmentReader
argument_list|()
operator|.
name|readNode
argument_list|(
name|compactedId
argument_list|)
return|;
block|}
specifier|private
name|RecordId
name|setHead
parameter_list|(
name|Context
name|context
parameter_list|,
name|Function
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|f
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|context
operator|.
name|getRevisions
argument_list|()
operator|.
name|setHead
argument_list|(
name|f
argument_list|,
name|timeout
argument_list|(
name|context
operator|.
name|getGCOptions
argument_list|()
operator|.
name|getForceTimeout
argument_list|()
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|GCEstimationResult
name|estimateCompactionGain
parameter_list|(
name|Context
name|context
parameter_list|,
name|boolean
name|full
parameter_list|)
block|{
return|return
operator|new
name|SizeDeltaGcEstimation
argument_list|(
name|context
operator|.
name|getGCOptions
argument_list|()
operator|.
name|getGcSizeDeltaEstimation
argument_list|()
argument_list|,
name|context
operator|.
name|getGCJournal
argument_list|()
argument_list|,
name|context
operator|.
name|getTarFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|full
argument_list|)
operator|.
name|estimate
argument_list|()
return|;
block|}
specifier|private
name|long
name|size
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|getTarFiles
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|List
argument_list|<
name|String
argument_list|>
name|cleanup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|cleanup
argument_list|(
name|context
argument_list|,
name|CompactionResult
operator|.
name|skipped
argument_list|(
name|context
operator|.
name|getLastCompactionType
argument_list|()
argument_list|,
name|getGcGeneration
argument_list|(
name|context
argument_list|)
argument_list|,
name|context
operator|.
name|getGCOptions
argument_list|()
argument_list|,
name|context
operator|.
name|getRevisions
argument_list|()
operator|.
name|getHead
argument_list|()
argument_list|,
name|context
operator|.
name|getGCCount
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|cleanup
parameter_list|(
name|Context
name|context
parameter_list|,
name|CompactionResult
name|compactionResult
parameter_list|)
throws|throws
name|IOException
block|{
name|PrintableStopwatch
name|watch
init|=
name|PrintableStopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"cleanup started using reclaimer {}"
argument_list|,
name|compactionResult
operator|.
name|reclaimer
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|updateStatus
argument_list|(
name|CLEANUP
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getSegmentCache
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Suggest to the JVM that now would be a good time
comment|// to clear stale weak references in the SegmentTracker
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|TarFiles
operator|.
name|CleanupResult
name|cleanupResult
init|=
name|context
operator|.
name|getTarFiles
argument_list|()
operator|.
name|cleanup
argument_list|(
name|newCleanupContext
argument_list|(
name|context
argument_list|,
name|compactionResult
operator|.
name|reclaimer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cleanupResult
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"cleanup interrupted"
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|getSegmentTracker
argument_list|()
operator|.
name|clearSegmentIdTables
argument_list|(
name|cleanupResult
operator|.
name|getReclaimedSegmentIds
argument_list|()
argument_list|,
name|compactionResult
operator|.
name|gcInfo
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"cleanup marking files for deletion: {}"
argument_list|,
name|toFileNames
argument_list|(
name|cleanupResult
operator|.
name|getRemovableFiles
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|finalSize
init|=
name|size
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|long
name|reclaimedSize
init|=
name|cleanupResult
operator|.
name|getReclaimedSize
argument_list|()
decl_stmt|;
name|context
operator|.
name|getFileStoreStats
argument_list|()
operator|.
name|reclaimed
argument_list|(
name|reclaimedSize
argument_list|)
expr_stmt|;
name|context
operator|.
name|getGCJournal
argument_list|()
operator|.
name|persist
argument_list|(
name|reclaimedSize
argument_list|,
name|finalSize
argument_list|,
name|getGcGeneration
argument_list|(
name|context
argument_list|)
argument_list|,
name|context
operator|.
name|getCompactionMonitor
argument_list|()
operator|.
name|getCompactedNodes
argument_list|()
argument_list|,
name|compactionResult
operator|.
name|getCompactedRootId
argument_list|()
operator|.
name|toString10
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|cleaned
argument_list|(
name|reclaimedSize
argument_list|,
name|finalSize
argument_list|)
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"cleanup completed in {}. Post cleanup size is {} and space reclaimed {}."
argument_list|,
name|watch
argument_list|,
name|newPrintableBytes
argument_list|(
name|finalSize
argument_list|)
argument_list|,
name|newPrintableBytes
argument_list|(
name|reclaimedSize
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cleanupResult
operator|.
name|getRemovableFiles
argument_list|()
return|;
block|}
specifier|private
name|CleanupContext
name|newCleanupContext
parameter_list|(
name|Context
name|context
parameter_list|,
name|Predicate
argument_list|<
name|GCGeneration
argument_list|>
name|old
parameter_list|)
block|{
return|return
operator|new
name|CleanupContext
argument_list|()
block|{
specifier|private
name|boolean
name|isUnreferencedBulkSegment
parameter_list|(
name|UUID
name|id
parameter_list|,
name|boolean
name|referenced
parameter_list|)
block|{
return|return
operator|!
name|isDataSegmentId
argument_list|(
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
operator|&&
operator|!
name|referenced
return|;
block|}
specifier|private
name|boolean
name|isOldDataSegment
parameter_list|(
name|UUID
name|id
parameter_list|,
name|GCGeneration
name|generation
parameter_list|)
block|{
return|return
name|isDataSegmentId
argument_list|(
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
operator|&&
name|old
operator|.
name|apply
argument_list|(
name|generation
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|UUID
argument_list|>
name|initialReferences
parameter_list|()
block|{
name|Set
argument_list|<
name|UUID
argument_list|>
name|references
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|SegmentId
name|id
range|:
name|context
operator|.
name|getSegmentTracker
argument_list|()
operator|.
name|getReferencedSegmentIds
argument_list|()
control|)
block|{
if|if
condition|(
name|id
operator|.
name|isBulkSegmentId
argument_list|()
condition|)
block|{
name|references
operator|.
name|add
argument_list|(
name|id
operator|.
name|asUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|references
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldReclaim
parameter_list|(
name|UUID
name|id
parameter_list|,
name|GCGeneration
name|generation
parameter_list|,
name|boolean
name|referenced
parameter_list|)
block|{
return|return
name|isUnreferencedBulkSegment
argument_list|(
name|id
argument_list|,
name|referenced
argument_list|)
operator|||
name|isOldDataSegment
argument_list|(
name|id
argument_list|,
name|generation
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldFollow
parameter_list|(
name|UUID
name|from
parameter_list|,
name|UUID
name|to
parameter_list|)
block|{
return|return
operator|!
name|isDataSegmentId
argument_list|(
name|to
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|private
name|String
name|toFileNames
parameter_list|(
annotation|@
name|Nonnull
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
block|{
if|if
condition|(
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|"none"
return|;
block|}
else|else
block|{
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|files
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

