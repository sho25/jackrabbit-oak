begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|SharedDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|BlobIdTracker
operator|.
name|BlobIdStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|symmetricDifference
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|valueOf
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|UUID
operator|.
name|randomUUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|closeQuietly
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|readStringsAsSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|writeStrings
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreUtils
operator|.
name|getBlobStore
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeNoException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeThat
import|;
end_import

begin_comment
comment|/**  * Test for BlobIdTracker.BlobIdStore to test addition, retrieval and removal of blob ids.  */
end_comment

begin_class
specifier|public
class|class
name|BlobIdTrackerStoreTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlobIdTrackerStoreTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
name|root
decl_stmt|;
name|SharedDataStore
name|dataStore
decl_stmt|;
name|BlobIdTracker
name|tracker
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|String
name|repoId
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|assumeThat
argument_list|(
name|getBlobStore
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|SharedDataStore
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assumeNoException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|root
operator|=
name|folder
operator|.
name|newFolder
argument_list|()
expr_stmt|;
if|if
condition|(
name|dataStore
operator|==
literal|null
condition|)
block|{
name|dataStore
operator|=
name|getBlobStore
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|repoId
operator|=
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|tracker
operator|=
name|initTracker
argument_list|()
expr_stmt|;
block|}
specifier|private
name|BlobIdTracker
name|initTracker
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|BlobIdTracker
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|repoId
argument_list|,
literal|5
operator|*
literal|60
argument_list|,
name|dataStore
argument_list|)
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|tracker
operator|.
name|close
argument_list|()
expr_stmt|;
name|folder
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|BlobIdStore
name|store
init|=
name|tracker
operator|.
name|store
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|initAdd
init|=
name|add
argument_list|(
name|store
argument_list|,
name|range
argument_list|(
literal|0
argument_list|,
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|retrieved
init|=
name|retrieve
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect elements after add snapshot"
argument_list|,
name|initAdd
argument_list|,
name|retrieved
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addSnapshotRetrieve
parameter_list|()
throws|throws
name|Exception
block|{
name|BlobIdStore
name|store
init|=
name|tracker
operator|.
name|store
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|initAdd
init|=
name|add
argument_list|(
name|store
argument_list|,
name|range
argument_list|(
literal|0
argument_list|,
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|retrieved
init|=
name|retrieveFile
argument_list|(
name|store
argument_list|,
name|folder
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect elements after add snapshot reading file"
argument_list|,
name|initAdd
argument_list|,
name|retrieved
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addSnapshotAdd
parameter_list|()
throws|throws
name|Exception
block|{
name|BlobIdStore
name|store
init|=
name|tracker
operator|.
name|store
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|initAdd
init|=
name|add
argument_list|(
name|store
argument_list|,
name|range
argument_list|(
literal|0
argument_list|,
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|initAdd
operator|.
name|addAll
argument_list|(
name|add
argument_list|(
name|store
argument_list|,
name|range
argument_list|(
literal|10001
argument_list|,
literal|10003
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|retrieved
init|=
name|retrieve
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrect elements with add before snapshot"
argument_list|,
name|symmetricDifference
argument_list|(
name|initAdd
argument_list|,
name|retrieved
argument_list|)
operator|.
name|containsAll
argument_list|(
name|newHashSet
argument_list|(
literal|"10001"
argument_list|,
literal|"10002"
argument_list|,
literal|"10003"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addSnapshotAddSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|BlobIdStore
name|store
init|=
name|tracker
operator|.
name|store
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|initAdd
init|=
name|add
argument_list|(
name|store
argument_list|,
name|range
argument_list|(
literal|0
argument_list|,
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|initAdd
operator|.
name|addAll
argument_list|(
name|add
argument_list|(
name|store
argument_list|,
name|range
argument_list|(
literal|10001
argument_list|,
literal|10003
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|retrieved
init|=
name|retrieve
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect elements with snapshot after add"
argument_list|,
name|initAdd
argument_list|,
name|retrieved
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addSnapshotRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|BlobIdStore
name|store
init|=
name|tracker
operator|.
name|store
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|initAdd
init|=
name|add
argument_list|(
name|store
argument_list|,
name|range
argument_list|(
literal|0
argument_list|,
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|remove
argument_list|(
name|store
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|,
name|initAdd
argument_list|,
name|range
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|retrieved
init|=
name|retrieve
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect elements after remove"
argument_list|,
name|initAdd
argument_list|,
name|retrieved
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addRestart
parameter_list|()
throws|throws
name|IOException
block|{
name|BlobIdStore
name|store
init|=
name|tracker
operator|.
name|store
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|initAdd
init|=
name|add
argument_list|(
name|store
argument_list|,
name|range
argument_list|(
literal|0
argument_list|,
literal|100000
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|tracker
operator|=
name|initTracker
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|retrieved
init|=
name|retrieve
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Extra elements retrieved"
argument_list|,
name|retrieved
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|=
name|tracker
operator|.
name|store
expr_stmt|;
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|retrieved
operator|=
name|retrieve
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect elements after dirty restart"
argument_list|,
name|initAdd
argument_list|,
name|retrieved
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addCloseRestart
parameter_list|()
throws|throws
name|IOException
block|{
name|BlobIdStore
name|store
init|=
name|tracker
operator|.
name|store
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|initAdd
init|=
name|add
argument_list|(
name|store
argument_list|,
name|range
argument_list|(
literal|0
argument_list|,
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|tracker
operator|=
name|initTracker
argument_list|()
expr_stmt|;
name|store
operator|=
name|tracker
operator|.
name|store
expr_stmt|;
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|retrieved
init|=
name|retrieve
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect elements after safe restart"
argument_list|,
name|initAdd
argument_list|,
name|retrieved
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addConcurrentSnapshot
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|BlobIdStore
name|store
init|=
name|tracker
operator|.
name|store
decl_stmt|;
specifier|final
name|CountDownLatch
name|start
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|done
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Thread
name|addThread
init|=
name|addThread
argument_list|(
name|store
argument_list|,
name|start
argument_list|,
name|done
argument_list|)
decl_stmt|;
name|Thread
name|snapshotThread
init|=
name|snapshotThread
argument_list|(
name|store
argument_list|,
name|start
argument_list|,
name|done
argument_list|)
decl_stmt|;
name|snapshotThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|addThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|start
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|done
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Do a snapshot to ensure that all the adds if snapshot finished first are collected
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|retrieved
init|=
name|retrieve
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect elements after concurrent snapshot"
argument_list|,
name|newHashSet
argument_list|(
name|range
argument_list|(
literal|0
argument_list|,
literal|100000
argument_list|)
argument_list|)
argument_list|,
name|retrieved
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addSnapshotConcurrentRetrieve
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|BlobIdStore
name|store
init|=
name|tracker
operator|.
name|store
decl_stmt|;
specifier|final
name|CountDownLatch
name|start
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|done
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|initAdd
init|=
name|add
argument_list|(
name|store
argument_list|,
name|range
argument_list|(
literal|0
argument_list|,
literal|100000
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|retrieves
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|Thread
name|retrieveThread
init|=
name|retrieveThread
argument_list|(
name|store
argument_list|,
name|retrieves
argument_list|,
name|start
argument_list|,
name|done
argument_list|)
decl_stmt|;
name|Thread
name|snapshotThread
init|=
name|snapshotThread
argument_list|(
name|store
argument_list|,
name|start
argument_list|,
name|done
argument_list|)
decl_stmt|;
name|snapshotThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|retrieveThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|start
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|done
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
name|retrieves
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// take a snapshot to ensure that all adds accounted if snapshot finished last
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|retrieves
operator|.
name|addAll
argument_list|(
name|retrieve
argument_list|(
name|store
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Incorrect elements after concurrent snapshot/retrieve"
argument_list|,
name|initAdd
argument_list|,
name|retrieves
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|snapshotConcurrentRemove
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|BlobIdStore
name|store
init|=
name|tracker
operator|.
name|store
decl_stmt|;
specifier|final
name|CountDownLatch
name|start
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|done
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|initAdd
init|=
name|add
argument_list|(
name|store
argument_list|,
name|range
argument_list|(
literal|0
argument_list|,
literal|100000
argument_list|)
argument_list|)
decl_stmt|;
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|Thread
name|removeThread
init|=
name|removeThread
argument_list|(
name|store
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|,
name|initAdd
argument_list|,
name|start
argument_list|,
name|done
argument_list|)
decl_stmt|;
name|Thread
name|snapshotThread
init|=
name|snapshotThread
argument_list|(
name|store
argument_list|,
name|start
argument_list|,
name|done
argument_list|)
decl_stmt|;
name|removeThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|snapshotThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// add some more to check that snapshot is successfull
name|initAdd
operator|.
name|addAll
argument_list|(
name|add
argument_list|(
name|store
argument_list|,
name|range
argument_list|(
literal|10001
argument_list|,
literal|10003
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|done
operator|.
name|await
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|retrieves
init|=
name|retrieve
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect elements after concurrent snapshot/remove"
argument_list|,
name|initAdd
argument_list|,
name|retrieves
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addBulkAdd
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|BlobIdStore
name|store
init|=
name|tracker
operator|.
name|store
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|initAdd
init|=
name|add
argument_list|(
name|store
argument_list|,
name|range
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
decl_stmt|;
comment|// Add new ids from a file
name|File
name|temp
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|newAdd
init|=
name|range
argument_list|(
literal|5
argument_list|,
literal|9
argument_list|)
decl_stmt|;
name|initAdd
operator|.
name|addAll
argument_list|(
name|newAdd
argument_list|)
expr_stmt|;
name|writeStrings
argument_list|(
name|newAdd
operator|.
name|iterator
argument_list|()
argument_list|,
name|temp
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|addRecords
argument_list|(
name|temp
argument_list|)
expr_stmt|;
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|retrieved
init|=
name|retrieve
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect elements after bulk add from file"
argument_list|,
name|initAdd
argument_list|,
name|retrieved
argument_list|)
expr_stmt|;
name|newAdd
operator|=
name|range
argument_list|(
literal|10
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|initAdd
operator|.
name|addAll
argument_list|(
name|newAdd
argument_list|)
expr_stmt|;
name|store
operator|.
name|addRecords
argument_list|(
name|newAdd
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|retrieved
operator|=
name|retrieve
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect elements after bulk add from iterator"
argument_list|,
name|initAdd
argument_list|,
name|retrieved
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|bulkAddConcurrentCompact
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|BlobIdStore
name|store
init|=
name|tracker
operator|.
name|store
decl_stmt|;
specifier|final
name|CountDownLatch
name|start
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|done
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Thread
name|addThread
init|=
name|addThread
argument_list|(
name|store
argument_list|,
literal|true
argument_list|,
name|start
argument_list|,
name|done
argument_list|)
decl_stmt|;
name|Thread
name|snapshotThread
init|=
name|snapshotThread
argument_list|(
name|store
argument_list|,
name|start
argument_list|,
name|done
argument_list|)
decl_stmt|;
name|snapshotThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|addThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|start
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|done
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Do a snapshot to ensure that all the adds if snapshot finished first are collected
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|retrieved
init|=
name|retrieve
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect elements after concurrent snapshot"
argument_list|,
name|newHashSet
argument_list|(
name|range
argument_list|(
literal|0
argument_list|,
literal|100000
argument_list|)
argument_list|)
argument_list|,
name|retrieved
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Thread
name|addThread
parameter_list|(
specifier|final
name|BlobIdStore
name|store
parameter_list|,
specifier|final
name|CountDownLatch
name|start
parameter_list|,
specifier|final
name|CountDownLatch
name|done
parameter_list|)
block|{
return|return
name|addThread
argument_list|(
name|store
argument_list|,
literal|false
argument_list|,
name|start
argument_list|,
name|done
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Thread
name|addThread
parameter_list|(
specifier|final
name|BlobIdStore
name|store
parameter_list|,
specifier|final
name|boolean
name|bulk
parameter_list|,
specifier|final
name|CountDownLatch
name|start
parameter_list|,
specifier|final
name|CountDownLatch
name|done
parameter_list|)
block|{
return|return
operator|new
name|Thread
argument_list|(
literal|"AddThread"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|adds
init|=
name|range
argument_list|(
literal|0
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
name|start
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|bulk
condition|)
block|{
name|add
argument_list|(
name|store
argument_list|,
name|adds
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|store
operator|.
name|addRecords
argument_list|(
name|adds
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Exception in add"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Interrupted in add"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|Thread
name|retrieveThread
parameter_list|(
specifier|final
name|BlobIdStore
name|store
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|retrieves
parameter_list|,
specifier|final
name|CountDownLatch
name|start
parameter_list|,
specifier|final
name|CountDownLatch
name|done
parameter_list|)
block|{
return|return
operator|new
name|Thread
argument_list|(
literal|"RetrieveThread"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|start
operator|.
name|await
argument_list|()
expr_stmt|;
name|retrieves
operator|.
name|addAll
argument_list|(
name|retrieve
argument_list|(
name|store
argument_list|)
argument_list|)
expr_stmt|;
name|done
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Exception in retrieve"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Interrupted in retrieve"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|Thread
name|removeThread
parameter_list|(
specifier|final
name|BlobIdStore
name|store
parameter_list|,
specifier|final
name|File
name|temp
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|adds
parameter_list|,
specifier|final
name|CountDownLatch
name|start
parameter_list|,
specifier|final
name|CountDownLatch
name|done
parameter_list|)
block|{
return|return
operator|new
name|Thread
argument_list|(
literal|"RemoveThread"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|start
operator|.
name|await
argument_list|()
expr_stmt|;
name|remove
argument_list|(
name|store
argument_list|,
name|temp
argument_list|,
name|adds
argument_list|,
name|range
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|done
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Exception in remove"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Interrupted in remove"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|Thread
name|snapshotThread
parameter_list|(
specifier|final
name|BlobIdStore
name|store
parameter_list|,
specifier|final
name|CountDownLatch
name|start
parameter_list|,
specifier|final
name|CountDownLatch
name|done
parameter_list|)
block|{
return|return
operator|new
name|Thread
argument_list|(
literal|"SnapshotThread"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|start
operator|.
name|await
argument_list|()
expr_stmt|;
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|done
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Exception in snapshot"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Interrupted in snapshot"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|add
parameter_list|(
name|BlobIdStore
name|store
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|ints
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|s
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|rec
range|:
name|ints
control|)
block|{
name|store
operator|.
name|addRecord
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|rec
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|retrieve
parameter_list|(
name|BlobIdStore
name|store
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|retrieved
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|store
operator|.
name|getRecords
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|retrieved
operator|.
name|add
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|closeQuietly
argument_list|(
operator|(
name|Closeable
operator|)
name|iter
argument_list|)
expr_stmt|;
return|return
name|retrieved
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|retrieveFile
parameter_list|(
name|BlobIdStore
name|store
parameter_list|,
name|TemporaryFolder
name|folder
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|retrieved
init|=
name|readStringsAsSet
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|store
operator|.
name|getRecords
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|retrieved
return|;
block|}
specifier|private
specifier|static
name|void
name|remove
parameter_list|(
name|BlobIdStore
name|store
parameter_list|,
name|File
name|temp
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|initAdd
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|ints
parameter_list|)
throws|throws
name|IOException
block|{
name|writeStrings
argument_list|(
name|ints
operator|.
name|iterator
argument_list|()
argument_list|,
name|temp
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|initAdd
operator|.
name|removeAll
argument_list|(
name|ints
argument_list|)
expr_stmt|;
name|store
operator|.
name|removeRecords
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|range
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|min
init|;
name|i
operator|<=
name|max
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
end_class

end_unit

