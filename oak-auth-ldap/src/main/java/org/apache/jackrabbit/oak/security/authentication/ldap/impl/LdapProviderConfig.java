begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|ldap
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_comment
comment|/**  * Configuration of the ldap provider.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|label
operator|=
literal|"Apache Jackrabbit Oak LDAP Identity Provider"
argument_list|,
name|name
operator|=
literal|"org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider"
argument_list|,
name|configurationFactory
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|ds
operator|=
literal|false
argument_list|)
specifier|public
class|class
name|LdapProviderConfig
block|{
comment|/**      * @see #getName()      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_NAME_DEFAULT
init|=
literal|"ldap"
decl_stmt|;
comment|/**      * @see #getName()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"LDAP Provider Name"
argument_list|,
name|description
operator|=
literal|"Name of this LDAP provider configuration. This is used to reference this provider by the login modules."
argument_list|,
name|value
operator|=
name|PARAM_NAME_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_NAME
init|=
literal|"provider.name"
decl_stmt|;
comment|/**      * @see #getHostname()      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_LDAP_HOST_DEFAULT
init|=
literal|"localhost"
decl_stmt|;
comment|/**      * @see #getHostname()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"LDAP Server Hostname"
argument_list|,
name|description
operator|=
literal|"Hostname of the LDAP server"
argument_list|,
name|value
operator|=
name|PARAM_LDAP_HOST_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_LDAP_HOST
init|=
literal|"host.name"
decl_stmt|;
comment|/**      * @see #getPort()      */
specifier|public
specifier|static
specifier|final
name|int
name|PARAM_LDAP_PORT_DEFAULT
init|=
literal|389
decl_stmt|;
comment|/**      * @see #getPort()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"LDAP Server Port"
argument_list|,
name|description
operator|=
literal|"Port of the LDAP server"
argument_list|,
name|intValue
operator|=
name|PARAM_LDAP_PORT_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_LDAP_PORT
init|=
literal|"host.port"
decl_stmt|;
comment|/**      * @see #useSSL()      */
specifier|public
specifier|static
specifier|final
name|boolean
name|PARAM_USE_SSL_DEFAULT
init|=
literal|false
decl_stmt|;
comment|/**      * @see #useSSL()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Use SSL"
argument_list|,
name|description
operator|=
literal|"Indicates if an SSL (LDAPs) connection should be used."
argument_list|,
name|boolValue
operator|=
name|PARAM_USE_SSL_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USE_SSL
init|=
literal|"host.ssl"
decl_stmt|;
comment|/**      * @see #useTLS()      */
specifier|public
specifier|static
specifier|final
name|boolean
name|PARAM_USE_TLS_DEFAULT
init|=
literal|false
decl_stmt|;
comment|/**      * @see #useTLS()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Use TLS"
argument_list|,
name|description
operator|=
literal|"Indicates if TLS should be started on connections."
argument_list|,
name|boolValue
operator|=
name|PARAM_USE_TLS_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USE_TLS
init|=
literal|"host.tls"
decl_stmt|;
comment|/**      * @see #noCertCheck()      */
specifier|public
specifier|static
specifier|final
name|boolean
name|PARAM_NO_CERT_CHECK_DEFAULT
init|=
literal|false
decl_stmt|;
comment|/**      * @see #noCertCheck()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Disable certificate checking"
argument_list|,
name|description
operator|=
literal|"Indicates if server certificate validation should be disabled."
argument_list|,
name|boolValue
operator|=
name|PARAM_NO_CERT_CHECK_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_NO_CERT_CHECK
init|=
literal|"host.noCertCheck"
decl_stmt|;
comment|/**      * @see #getBindDN()      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_BIND_DN_DEFAULT
init|=
literal|""
decl_stmt|;
comment|/**      * @see #getBindDN()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Bind DN"
argument_list|,
name|description
operator|=
literal|"DN of the user for authentication. Leave empty for anonymous bind."
argument_list|,
name|value
operator|=
name|PARAM_BIND_DN_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_BIND_DN
init|=
literal|"bind.dn"
decl_stmt|;
comment|/**      * @see #getBindPassword()      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_BIND_PASSWORD_DEFAULT
init|=
literal|""
decl_stmt|;
comment|/**      * @see #getBindPassword()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Bind Password"
argument_list|,
name|description
operator|=
literal|"Password of the user for authentication."
argument_list|,
name|passwordValue
operator|=
name|PARAM_BIND_PASSWORD_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_BIND_PASSWORD
init|=
literal|"bind.password"
decl_stmt|;
comment|/**      * @see #getSearchTimeout()      */
specifier|public
specifier|static
specifier|final
name|int
name|PARAM_SEARCH_TIMEOUT_DEFAULT
init|=
literal|60000
decl_stmt|;
comment|/**      * @see #getSearchTimeout()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Search Timeout"
argument_list|,
name|description
operator|=
literal|"Time in milliseconds until a search times out."
argument_list|,
name|intValue
operator|=
name|PARAM_SEARCH_TIMEOUT_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_SEARCH_TIMEOUT
init|=
literal|"searchTimeout"
decl_stmt|;
comment|/**      * @see Identity#getBaseDN()      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USER_BASE_DN_DEFAULT
init|=
literal|"ou=people,o=example,dc=com"
decl_stmt|;
comment|/**      * @see Identity#getBaseDN()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"User base DN"
argument_list|,
name|description
operator|=
literal|"The base DN for user searches."
argument_list|,
name|value
operator|=
name|PARAM_USER_BASE_DN_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USER_BASE_DN
init|=
literal|"user.baseDN"
decl_stmt|;
comment|/**      * @see Identity#getObjectClasses()      */
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|PARAM_USER_OBJECTCLASS_DEFAULT
init|=
block|{
literal|"person"
block|}
decl_stmt|;
comment|/**      * @see Identity#getObjectClasses()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"User object classes"
argument_list|,
name|description
operator|=
literal|"The list of object classes an user entry must contain."
argument_list|,
name|value
operator|=
block|{
literal|"person"
block|}
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USER_OBJECTCLASS
init|=
literal|"user.objectclass"
decl_stmt|;
comment|/**      * @see Identity#getIdAttribute()      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USER_ID_ATTRIBUTE_DEFAULT
init|=
literal|"uid"
decl_stmt|;
comment|/**      * @see Identity#getIdAttribute()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"User id attribute"
argument_list|,
name|description
operator|=
literal|"Name of the attribute that contains the user id."
argument_list|,
name|value
operator|=
name|PARAM_USER_ID_ATTRIBUTE_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USER_ID_ATTRIBUTE
init|=
literal|"user.idAttribute"
decl_stmt|;
comment|/**      * @see Identity#getExtraFilter()      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USER_EXTRA_FILTER_DEFAULT
init|=
literal|""
decl_stmt|;
comment|/**      * @see Identity#getExtraFilter()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"User extra filter"
argument_list|,
name|description
operator|=
literal|"Extra LDAP filter to use when searching for users. The final filter is"
operator|+
literal|"formatted like: '(&(<idAttr>=<userId>)(objectclass=<objectclass>)<extraFilter>)'"
argument_list|,
name|value
operator|=
name|PARAM_USER_EXTRA_FILTER_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USER_EXTRA_FILTER
init|=
literal|"user.extraFilter"
decl_stmt|;
comment|/**      * @see Identity#makeDnPath()      */
specifier|public
specifier|static
specifier|final
name|boolean
name|PARAM_USER_MAKE_DN_PATH_DEFAULT
init|=
literal|false
decl_stmt|;
comment|/**      * @see Identity#makeDnPath()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"User DN paths"
argument_list|,
name|description
operator|=
literal|"Controls if the DN should be used for calculating a portion of the intermediate path."
argument_list|,
name|boolValue
operator|=
name|PARAM_USER_MAKE_DN_PATH_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USER_MAKE_DN_PATH
init|=
literal|"user.makeDnPath"
decl_stmt|;
comment|/**      * @see Identity#getBaseDN()      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_GROUP_BASE_DN_DEFAULT
init|=
literal|"ou=groups,o=example,dc=com"
decl_stmt|;
comment|/**      * @see Identity#getBaseDN()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Group base DN"
argument_list|,
name|description
operator|=
literal|"The base DN for group searches."
argument_list|,
name|value
operator|=
name|PARAM_GROUP_BASE_DN_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_GROUP_BASE_DN
init|=
literal|"group.baseDN"
decl_stmt|;
comment|/**      * @see Identity#getObjectClasses()      */
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|PARAM_GROUP_OBJECTCLASS_DEFAULT
init|=
block|{
literal|"groupOfUniqueNames"
block|}
decl_stmt|;
comment|/**      * @see Identity#getObjectClasses()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Group object classes"
argument_list|,
name|description
operator|=
literal|"The list of object classes a group entry must contain."
argument_list|,
name|value
operator|=
block|{
literal|"groupOfUniqueNames"
block|}
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_GROUP_OBJECTCLASS
init|=
literal|"group.objectclass"
decl_stmt|;
comment|/**      * @see Identity#getIdAttribute()      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_GROUP_NAME_ATTRIBUTE_DEFAULT
init|=
literal|"cn"
decl_stmt|;
comment|/**      * @see Identity#getIdAttribute()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Group name attribute"
argument_list|,
name|description
operator|=
literal|"Name of the attribute that contains the group name."
argument_list|,
name|value
operator|=
name|PARAM_GROUP_NAME_ATTRIBUTE_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_GROUP_NAME_ATTRIBUTE
init|=
literal|"group.nameAttribute"
decl_stmt|;
comment|/**      * @see Identity#getExtraFilter()      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_GROUP_EXTRA_FILTER_DEFAULT
init|=
literal|""
decl_stmt|;
comment|/**      * @see Identity#getExtraFilter()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Group extra filter"
argument_list|,
name|description
operator|=
literal|"Extra LDAP filter to use when searching for groups. The final filter is"
operator|+
literal|"formatted like: '(&(<nameAttr>=<groupName>)(objectclass=<objectclass>)<extraFilter>)'"
argument_list|,
name|value
operator|=
name|PARAM_GROUP_EXTRA_FILTER_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_GROUP_EXTRA_FILTER
init|=
literal|"group.extraFilter"
decl_stmt|;
comment|/**      * @see Identity#makeDnPath()      */
specifier|public
specifier|static
specifier|final
name|boolean
name|PARAM_GROUP_MAKE_DN_PATH_DEFAULT
init|=
literal|false
decl_stmt|;
comment|/**      * @see Identity#makeDnPath()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Group DN paths"
argument_list|,
name|description
operator|=
literal|"Controls if the DN should be used for calculating a portion of the intermediate path."
argument_list|,
name|boolValue
operator|=
name|PARAM_GROUP_MAKE_DN_PATH_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_GROUP_MAKE_DN_PATH
init|=
literal|"group.makeDnPath"
decl_stmt|;
comment|/**      * @see #getGroupMemberAttribute()      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_GROUP_MEMBER_ATTRIBUTE_DEFAULT
init|=
literal|"uniquemember"
decl_stmt|;
comment|/**      * @see #getGroupMemberAttribute()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Group member attribute"
argument_list|,
name|description
operator|=
literal|"Group attribute that contains the member(s) of a group."
argument_list|,
name|value
operator|=
name|PARAM_GROUP_MEMBER_ATTRIBUTE_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_GROUP_MEMBER_ATTRIBUTE
init|=
literal|"group.memberAttribute"
decl_stmt|;
comment|/**      * Defines the configuration of an identity (user or group).      */
specifier|public
class|class
name|Identity
block|{
specifier|private
name|String
name|baseDN
decl_stmt|;
specifier|private
name|String
index|[]
name|objectClasses
decl_stmt|;
specifier|private
name|String
name|idAttribute
decl_stmt|;
specifier|private
name|String
name|extraFilter
decl_stmt|;
specifier|private
name|String
name|filterTemplate
decl_stmt|;
specifier|private
name|boolean
name|makeDnPath
decl_stmt|;
comment|/**          * Configures the base DN for searches of this kind of identity          * @return the base DN          */
annotation|@
name|Nonnull
specifier|public
name|String
name|getBaseDN
parameter_list|()
block|{
return|return
name|baseDN
return|;
block|}
comment|/**          * Sets the base DN for search of this kind of identity.          * @param baseDN the DN as string.          * @return {@code this}          * @see #getBaseDN()          */
annotation|@
name|Nonnull
specifier|public
name|Identity
name|setBaseDN
parameter_list|(
annotation|@
name|Nonnull
name|String
name|baseDN
parameter_list|)
block|{
name|this
operator|.
name|baseDN
operator|=
name|baseDN
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the object classes of this kind of identity.          * @return an array of object classes          * @see #getSearchFilter(String) for more detail about searching and filtering          */
annotation|@
name|Nonnull
specifier|public
name|String
index|[]
name|getObjectClasses
parameter_list|()
block|{
return|return
name|objectClasses
return|;
block|}
comment|/**          * Sets the object classes.          * @param objectClasses the object classes          * @return {@code this}          * @see #getObjectClasses()          */
annotation|@
name|Nonnull
specifier|public
name|Identity
name|setObjectClasses
parameter_list|(
annotation|@
name|Nonnull
name|String
modifier|...
name|objectClasses
parameter_list|)
block|{
name|this
operator|.
name|objectClasses
operator|=
name|objectClasses
expr_stmt|;
name|filterTemplate
operator|=
literal|null
expr_stmt|;
name|memberOfFilterTemplate
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the attribute that is used to identify this identity by id. For users this is the attribute that          * holds the user id, for groups this is the attribute that holds the group name.          *          * @return the id attribute name          * @see #getSearchFilter(String) for more detail about searching and filtering          */
annotation|@
name|Nonnull
specifier|public
name|String
name|getIdAttribute
parameter_list|()
block|{
return|return
name|idAttribute
return|;
block|}
comment|/**          * Sets the id attribute.          * @param idAttribute the id attribute name          * @return {@code this}          * @see #getIdAttribute()          */
annotation|@
name|Nonnull
specifier|public
name|Identity
name|setIdAttribute
parameter_list|(
annotation|@
name|Nonnull
name|String
name|idAttribute
parameter_list|)
block|{
name|this
operator|.
name|idAttribute
operator|=
name|idAttribute
expr_stmt|;
name|filterTemplate
operator|=
literal|null
expr_stmt|;
name|memberOfFilterTemplate
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the extra LDAP filter that is appended to the internally computed filter when searching for          * identities.          *          * @return the extra filter          */
annotation|@
name|CheckForNull
specifier|public
name|String
name|getExtraFilter
parameter_list|()
block|{
return|return
name|extraFilter
return|;
block|}
comment|/**          * Sets the extra search filter.          * @param extraFilter the filter          * @return {@code this}          * @see #getExtraFilter()          */
annotation|@
name|Nonnull
specifier|public
name|Identity
name|setExtraFilter
parameter_list|(
annotation|@
name|Nullable
name|String
name|extraFilter
parameter_list|)
block|{
name|this
operator|.
name|extraFilter
operator|=
name|extraFilter
expr_stmt|;
name|filterTemplate
operator|=
literal|null
expr_stmt|;
name|memberOfFilterTemplate
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures if the identities DN should be used to generate a portion of the authorizables intermediate path.          * @return {@code true} if the DN is used a intermediate path.          */
specifier|public
name|boolean
name|makeDnPath
parameter_list|()
block|{
return|return
name|makeDnPath
return|;
block|}
comment|/**          * Sets the intermediate path flag.          * @param makeDnPath {@code true} to use the DN as intermediate path          * @return {@code this}          * @see #makeDnPath()          */
annotation|@
name|Nonnull
specifier|public
name|Identity
name|setMakeDnPath
parameter_list|(
name|boolean
name|makeDnPath
parameter_list|)
block|{
name|this
operator|.
name|makeDnPath
operator|=
name|makeDnPath
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Returns the LDAP filter that is used when searching this type of identity. The filter is based on the          * configuration and has the following format:          *          *<pre>          *     (&(${idAttr}=${id})(objectclass=${objectclass})${extraFilter})          *</pre>          *          * Note that the objectclass part is repeated according to the specified objectclasses in {@link #getObjectClasses()}.          *          * @param id the id value          * @return the search filter          */
annotation|@
name|Nonnull
specifier|public
name|String
name|getSearchFilter
parameter_list|(
annotation|@
name|Nonnull
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|filterTemplate
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|filter
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"(&("
argument_list|)
operator|.
name|append
argument_list|(
name|idAttribute
argument_list|)
operator|.
name|append
argument_list|(
literal|"=%s)"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|objectClass
range|:
name|objectClasses
control|)
block|{
name|filter
operator|.
name|append
argument_list|(
literal|"(objectclass="
argument_list|)
operator|.
name|append
argument_list|(
name|encodeFilterValue
argument_list|(
name|objectClass
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extraFilter
operator|!=
literal|null
operator|&&
name|extraFilter
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|filter
operator|.
name|append
argument_list|(
name|extraFilter
argument_list|)
expr_stmt|;
block|}
name|filter
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|filterTemplate
operator|=
name|filter
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|String
operator|.
name|format
argument_list|(
name|filterTemplate
argument_list|,
name|encodeFilterValue
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Creates a new LDAP provider configuration based on the properties store in the given parameters.      * @param params the configuration parameters.      * @return the config      */
specifier|public
specifier|static
name|LdapProviderConfig
name|of
parameter_list|(
name|ConfigurationParameters
name|params
parameter_list|)
block|{
name|LdapProviderConfig
name|cfg
init|=
operator|new
name|LdapProviderConfig
argument_list|()
operator|.
name|setName
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_NAME
argument_list|,
name|PARAM_NAME_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setHostname
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_LDAP_HOST
argument_list|,
name|PARAM_LDAP_HOST_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setPort
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_LDAP_PORT
argument_list|,
name|PARAM_LDAP_PORT_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setUseSSL
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_USE_SSL
argument_list|,
name|PARAM_USE_SSL_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setUseTLS
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_USE_TLS
argument_list|,
name|PARAM_USE_TLS_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setNoCertCheck
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_NO_CERT_CHECK
argument_list|,
name|PARAM_NO_CERT_CHECK_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setBindDN
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_BIND_DN
argument_list|,
name|PARAM_BIND_DN_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setBindPassword
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_BIND_PASSWORD
argument_list|,
name|PARAM_BIND_PASSWORD_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setSearchTimeout
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_SEARCH_TIMEOUT
argument_list|,
name|PARAM_SEARCH_TIMEOUT_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setGroupMemberAttribute
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_GROUP_MEMBER_ATTRIBUTE
argument_list|,
name|PARAM_GROUP_MEMBER_ATTRIBUTE_DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|getUserConfig
argument_list|()
operator|.
name|setBaseDN
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_USER_BASE_DN
argument_list|,
name|PARAM_USER_BASE_DN
argument_list|)
argument_list|)
operator|.
name|setIdAttribute
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_USER_ID_ATTRIBUTE
argument_list|,
name|PARAM_USER_ID_ATTRIBUTE_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setExtraFilter
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_USER_EXTRA_FILTER
argument_list|,
name|PARAM_USER_EXTRA_FILTER_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setObjectClasses
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_USER_OBJECTCLASS
argument_list|,
name|PARAM_USER_OBJECTCLASS_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setMakeDnPath
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_USER_MAKE_DN_PATH
argument_list|,
name|PARAM_USER_MAKE_DN_PATH_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|getGroupConfig
argument_list|()
operator|.
name|setBaseDN
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_GROUP_BASE_DN
argument_list|,
name|PARAM_GROUP_BASE_DN
argument_list|)
argument_list|)
operator|.
name|setIdAttribute
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_GROUP_NAME_ATTRIBUTE
argument_list|,
name|PARAM_GROUP_NAME_ATTRIBUTE_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setExtraFilter
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_GROUP_EXTRA_FILTER
argument_list|,
name|PARAM_GROUP_EXTRA_FILTER_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setObjectClasses
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_GROUP_OBJECTCLASS
argument_list|,
name|PARAM_GROUP_OBJECTCLASS_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setMakeDnPath
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_GROUP_MAKE_DN_PATH
argument_list|,
name|PARAM_GROUP_MAKE_DN_PATH_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cfg
return|;
block|}
specifier|private
name|String
name|name
init|=
name|PARAM_NAME_DEFAULT
decl_stmt|;
specifier|private
name|String
name|hostname
init|=
name|PARAM_LDAP_HOST_DEFAULT
decl_stmt|;
specifier|private
name|int
name|port
init|=
name|PARAM_LDAP_PORT_DEFAULT
decl_stmt|;
specifier|private
name|boolean
name|useSSL
init|=
name|PARAM_USE_SSL_DEFAULT
decl_stmt|;
specifier|private
name|boolean
name|useTLS
init|=
name|PARAM_USE_TLS_DEFAULT
decl_stmt|;
specifier|private
name|boolean
name|noCertCheck
init|=
name|PARAM_NO_CERT_CHECK_DEFAULT
decl_stmt|;
specifier|private
name|String
name|bindDN
init|=
name|PARAM_BIND_DN_DEFAULT
decl_stmt|;
specifier|private
name|String
name|bindPassword
init|=
name|PARAM_BIND_PASSWORD_DEFAULT
decl_stmt|;
specifier|private
name|int
name|searchTimeout
init|=
name|PARAM_SEARCH_TIMEOUT_DEFAULT
decl_stmt|;
specifier|private
name|String
name|groupMemberAttribute
init|=
name|PARAM_GROUP_MEMBER_ATTRIBUTE
decl_stmt|;
specifier|private
name|String
name|memberOfFilterTemplate
decl_stmt|;
specifier|private
specifier|final
name|Identity
name|userConfig
init|=
operator|new
name|Identity
argument_list|()
operator|.
name|setBaseDN
argument_list|(
name|PARAM_USER_BASE_DN_DEFAULT
argument_list|)
operator|.
name|setExtraFilter
argument_list|(
name|PARAM_USER_EXTRA_FILTER_DEFAULT
argument_list|)
operator|.
name|setIdAttribute
argument_list|(
name|PARAM_USER_ID_ATTRIBUTE_DEFAULT
argument_list|)
operator|.
name|setMakeDnPath
argument_list|(
name|PARAM_USER_MAKE_DN_PATH_DEFAULT
argument_list|)
operator|.
name|setObjectClasses
argument_list|(
name|PARAM_USER_OBJECTCLASS_DEFAULT
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Identity
name|groupConfig
init|=
operator|new
name|Identity
argument_list|()
operator|.
name|setBaseDN
argument_list|(
name|PARAM_GROUP_BASE_DN_DEFAULT
argument_list|)
operator|.
name|setExtraFilter
argument_list|(
name|PARAM_GROUP_EXTRA_FILTER_DEFAULT
argument_list|)
operator|.
name|setIdAttribute
argument_list|(
name|PARAM_GROUP_NAME_ATTRIBUTE_DEFAULT
argument_list|)
operator|.
name|setMakeDnPath
argument_list|(
name|PARAM_GROUP_MAKE_DN_PATH_DEFAULT
argument_list|)
operator|.
name|setObjectClasses
argument_list|(
name|PARAM_GROUP_OBJECTCLASS_DEFAULT
argument_list|)
decl_stmt|;
comment|/**      * Returns the name of this provider configuration.      * The default is {@value #PARAM_NAME_DEFAULT}      *      * @return the name.      */
annotation|@
name|Nonnull
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Sets the name of this provider.      * @param name the name      * @return {@code this}      * @see #getName()      */
annotation|@
name|Nonnull
specifier|public
name|LdapProviderConfig
name|setName
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures the hostname of the LDAP server.      * The default is {@value #PARAM_LDAP_HOST_DEFAULT}      *      * @return the hostname      */
annotation|@
name|Nonnull
specifier|public
name|String
name|getHostname
parameter_list|()
block|{
return|return
name|hostname
return|;
block|}
comment|/**      * Sets the hostname.      * @param hostname the hostname      * @return {@code this}      * @see #getHostname()      */
annotation|@
name|Nonnull
specifier|public
name|LdapProviderConfig
name|setHostname
parameter_list|(
annotation|@
name|Nonnull
name|String
name|hostname
parameter_list|)
block|{
name|this
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures the port of the LDAP server.      * The default is {@value #PARAM_LDAP_PORT_DEFAULT}      *      * @return the port      */
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
comment|/**      * Sets the port.      * @param port the port      * @return {@code this}      * @see #getPort()      */
annotation|@
name|Nonnull
specifier|public
name|LdapProviderConfig
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures whether SSL connections should be used.      * The default is {@value #PARAM_USE_SSL_DEFAULT}.      *      * @return {@code true} if SSL should be used.      */
specifier|public
name|boolean
name|useSSL
parameter_list|()
block|{
return|return
name|useSSL
return|;
block|}
comment|/**      * Enables SSL connections.      * @param useSSL {@code true} to enable SSL      * @return {@code this}      * @see #useSSL()      */
annotation|@
name|Nonnull
specifier|public
name|LdapProviderConfig
name|setUseSSL
parameter_list|(
name|boolean
name|useSSL
parameter_list|)
block|{
name|this
operator|.
name|useSSL
operator|=
name|useSSL
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures whether TLS connections should be used.      * The default is {@value #PARAM_USE_TLS_DEFAULT}.      *      * @return {@code true} if TLS should be used.      */
specifier|public
name|boolean
name|useTLS
parameter_list|()
block|{
return|return
name|useTLS
return|;
block|}
comment|/**      * Enables TLS connections.      * @param useTLS {@code true} to enable TLS      * @return {@code this}      * @see #useTLS()      */
annotation|@
name|Nonnull
specifier|public
name|LdapProviderConfig
name|setUseTLS
parameter_list|(
name|boolean
name|useTLS
parameter_list|)
block|{
name|this
operator|.
name|useTLS
operator|=
name|useTLS
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures whether certificates on SSL/TLS connections should be validated.      * The default is {@value #PARAM_NO_CERT_CHECK_DEFAULT}.      *      * @return {@code true} if certificates should not be validated      */
specifier|public
name|boolean
name|noCertCheck
parameter_list|()
block|{
return|return
name|noCertCheck
return|;
block|}
comment|/**      * Disables certificate validation.      * @param noCertCheck {@code true} to disable certificate validation      * @return {@code this}      * @see #noCertCheck()      */
annotation|@
name|Nonnull
specifier|public
name|LdapProviderConfig
name|setNoCertCheck
parameter_list|(
name|boolean
name|noCertCheck
parameter_list|)
block|{
name|this
operator|.
name|noCertCheck
operator|=
name|noCertCheck
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures the DN that is used to bind to the LDAP server. If this value is {@code null} or an empty string,      * anonymous connections are used.      * @return the bind DN or {@code null}.      */
annotation|@
name|CheckForNull
specifier|public
name|String
name|getBindDN
parameter_list|()
block|{
return|return
name|bindDN
return|;
block|}
comment|/**      * Sets the bind DN.      * @param bindDN the DN      * @return {@code this}      * @see #getBindDN()      */
annotation|@
name|Nonnull
specifier|public
name|LdapProviderConfig
name|setBindDN
parameter_list|(
annotation|@
name|Nullable
name|String
name|bindDN
parameter_list|)
block|{
name|this
operator|.
name|bindDN
operator|=
name|bindDN
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures the password that is used to bind to the LDAP server. This value is not used for anonymous binds.      * @return the password.      */
annotation|@
name|CheckForNull
specifier|public
name|String
name|getBindPassword
parameter_list|()
block|{
return|return
name|bindPassword
return|;
block|}
comment|/**      * Sets the bind password      * @param bindPassword the password      * @return {@code this}      * @see #getBindPassword()      */
annotation|@
name|Nonnull
specifier|public
name|LdapProviderConfig
name|setBindPassword
parameter_list|(
annotation|@
name|Nullable
name|String
name|bindPassword
parameter_list|)
block|{
name|this
operator|.
name|bindPassword
operator|=
name|bindPassword
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures the timeout in milliseconds that is used for all LDAP searches.      * The default is {@value #PARAM_SEARCH_TIMEOUT_DEFAULT}.      *      * @return the timeout in milliseconds.      */
specifier|public
name|int
name|getSearchTimeout
parameter_list|()
block|{
return|return
name|searchTimeout
return|;
block|}
comment|/**      * Sets the search timeout.      * @param searchTimeout the timeout in milliseconds      * @return {@code this}      * @see #setSearchTimeout(int)      */
annotation|@
name|Nonnull
specifier|public
name|LdapProviderConfig
name|setSearchTimeout
parameter_list|(
name|int
name|searchTimeout
parameter_list|)
block|{
name|this
operator|.
name|searchTimeout
operator|=
name|searchTimeout
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures the attribute that stores the members of a group.      * Default is {@value #PARAM_GROUP_MEMBER_ATTRIBUTE_DEFAULT}      *      * @return the group member attribute      */
annotation|@
name|Nonnull
specifier|public
name|String
name|getGroupMemberAttribute
parameter_list|()
block|{
return|return
name|groupMemberAttribute
return|;
block|}
comment|/**      * Sets the group member attribute.      * @param groupMemberAttribute the attribute name      * @return {@code this}      * @see #getGroupMemberAttribute()      */
annotation|@
name|Nonnull
specifier|public
name|LdapProviderConfig
name|setGroupMemberAttribute
parameter_list|(
annotation|@
name|Nonnull
name|String
name|groupMemberAttribute
parameter_list|)
block|{
name|this
operator|.
name|groupMemberAttribute
operator|=
name|groupMemberAttribute
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the LDAP filter that is used when searching for groups where an identity is member of.      * The filter is based on the configuration and has the following format:      *      *<pre>      *     (&(${memberAttribute}=${dn})(objectclass=${objectclass})${extraFilter})      *</pre>      *      * Note that the objectclass part is repeated according to the specified objectclasses in      * {@link Identity#getObjectClasses()} of the group configuration.      *      * @param dn the dn of the identity to search for      * @return the search filter      */
specifier|public
name|String
name|getMemberOfSearchFilter
parameter_list|(
annotation|@
name|Nonnull
name|String
name|dn
parameter_list|)
block|{
if|if
condition|(
name|memberOfFilterTemplate
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|filter
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"(&("
argument_list|)
operator|.
name|append
argument_list|(
name|groupMemberAttribute
argument_list|)
operator|.
name|append
argument_list|(
literal|"=%s)"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|objectClass
range|:
name|groupConfig
operator|.
name|objectClasses
control|)
block|{
name|filter
operator|.
name|append
argument_list|(
literal|"(objectclass="
argument_list|)
operator|.
name|append
argument_list|(
name|encodeFilterValue
argument_list|(
name|objectClass
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupConfig
operator|.
name|extraFilter
operator|!=
literal|null
operator|&&
name|groupConfig
operator|.
name|extraFilter
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|filter
operator|.
name|append
argument_list|(
name|groupConfig
operator|.
name|extraFilter
argument_list|)
expr_stmt|;
block|}
name|filter
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|memberOfFilterTemplate
operator|=
name|filter
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|String
operator|.
name|format
argument_list|(
name|memberOfFilterTemplate
argument_list|,
name|encodeFilterValue
argument_list|(
name|dn
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns the user specific configuration.      * @return the user config.      */
annotation|@
name|Nonnull
specifier|public
name|Identity
name|getUserConfig
parameter_list|()
block|{
return|return
name|userConfig
return|;
block|}
comment|/**      * Returns the group specific configuration.      * @return the groups config.      */
annotation|@
name|Nonnull
specifier|public
name|Identity
name|getGroupConfig
parameter_list|()
block|{
return|return
name|groupConfig
return|;
block|}
comment|/**      * Copied from org.apache.directory.api.ldap.model.filter.FilterEncoder#encodeFilterValue(java.lang.String)      * in order to keep this configuration LDAP client independent.      *      * Handles encoding of special characters in LDAP search filter assertion values using the      *&lt;valueencoding&gt; rule as described in<a href="http://www.ietf.org/rfc/rfc4515.txt">RFC 4515</a>.      *      * @param value Right hand side of "attrId=value" assertion occurring in an LDAP search filter.      * @return Escaped version of<code>value</code>      */
specifier|private
specifier|static
name|String
name|encodeFilterValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|value
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|replace
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|'*'
case|:
name|replace
operator|=
literal|"\\2A"
expr_stmt|;
break|break;
case|case
literal|'('
case|:
name|replace
operator|=
literal|"\\28"
expr_stmt|;
break|break;
case|case
literal|')'
case|:
name|replace
operator|=
literal|"\\29"
expr_stmt|;
break|break;
case|case
literal|'\\'
case|:
name|replace
operator|=
literal|"\\5C"
expr_stmt|;
break|break;
case|case
literal|'\0'
case|:
name|replace
operator|=
literal|"\\00"
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|replace
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sb
operator|==
literal|null
condition|)
block|{
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|(
name|value
operator|.
name|length
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|replace
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sb
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|sb
operator|==
literal|null
condition|?
name|value
else|:
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

