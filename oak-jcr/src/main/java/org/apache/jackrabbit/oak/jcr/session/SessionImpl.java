begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|session
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newTreeSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|stats
operator|.
name|RepositoryStatistics
operator|.
name|Type
operator|.
name|SESSION_COUNT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getParentPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|InvalidSerializedDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ItemNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Workspace
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|retention
operator|.
name|RetentionManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|stats
operator|.
name|RepositoryStatistics
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|xml
operator|.
name|DocumentViewExporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|xml
operator|.
name|Exporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|xml
operator|.
name|ParsingContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|xml
operator|.
name|SystemViewExporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|xml
operator|.
name|ToXmlContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
operator|.
name|ItemDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
operator|.
name|NodeDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
operator|.
name|PropertyDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
operator|.
name|SessionDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|session
operator|.
name|operation
operator|.
name|SessionOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|xml
operator|.
name|ImportHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|ImpersonationCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * TODO document  */
end_comment

begin_class
specifier|public
class|class
name|SessionImpl
implements|implements
name|JackrabbitSession
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SessionImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SessionContext
name|sessionContext
decl_stmt|;
specifier|private
specifier|final
name|SessionDelegate
name|sd
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|sessionCounter
decl_stmt|;
specifier|public
name|SessionImpl
parameter_list|(
name|SessionContext
name|sessionContext
parameter_list|)
block|{
name|this
operator|.
name|sessionContext
operator|=
name|sessionContext
expr_stmt|;
name|this
operator|.
name|sd
operator|=
name|sessionContext
operator|.
name|getSessionDelegate
argument_list|()
expr_stmt|;
name|this
operator|.
name|sessionCounter
operator|=
name|sessionContext
operator|.
name|getCounter
argument_list|(
name|SESSION_COUNT
argument_list|)
expr_stmt|;
name|sessionCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|sessionContext
operator|.
name|getCounter
argument_list|(
name|Type
operator|.
name|SESSION_LOGIN_COUNTER
argument_list|)
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|static
name|void
name|checkIndexOnName
parameter_list|(
name|String
name|jcrPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|int
name|pos
init|=
name|jcrPath
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|pos
operator|<
literal|2
operator|||
name|jcrPath
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
operator|!=
literal|']'
condition|)
block|{
return|return;
block|}
if|if
condition|(
literal|"0123456789"
operator|.
name|indexOf
argument_list|(
name|jcrPath
operator|.
name|charAt
argument_list|(
operator|--
name|pos
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
return|return;
block|}
while|while
condition|(
operator|--
name|pos
operator|>=
literal|0
condition|)
block|{
name|char
name|ch
init|=
name|jcrPath
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'['
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Cannot create a new node using a name including an index"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|"0123456789"
operator|.
name|indexOf
argument_list|(
name|ch
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
return|return;
block|}
block|}
block|}
specifier|private
specifier|abstract
class|class
name|ReadOperation
parameter_list|<
name|T
parameter_list|>
extends|extends
name|SessionOperation
argument_list|<
name|T
argument_list|>
block|{
specifier|protected
name|ReadOperation
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkPreconditions
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|sd
operator|.
name|checkAlive
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|abstract
class|class
name|WriteOperation
parameter_list|<
name|T
parameter_list|>
extends|extends
name|SessionOperation
argument_list|<
name|T
argument_list|>
block|{
specifier|protected
name|WriteOperation
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkPreconditions
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|sd
operator|.
name|checkAlive
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Nonnull
specifier|private
name|String
name|getOakPathOrThrow
parameter_list|(
annotation|@
name|Nonnull
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|p
init|=
name|sessionContext
operator|.
name|getOakPathOrThrow
argument_list|(
name|absPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|p
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Not an absolute path: "
operator|+
name|absPath
argument_list|)
throw|;
block|}
return|return
name|p
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|String
name|getOakPathOrThrowNotFound
parameter_list|(
annotation|@
name|Nonnull
name|String
name|absPath
parameter_list|)
throws|throws
name|PathNotFoundException
block|{
return|return
name|sessionContext
operator|.
name|getOakPathOrThrowNotFound
argument_list|(
name|absPath
argument_list|)
return|;
block|}
annotation|@
name|CheckForNull
specifier|private
name|ItemImpl
argument_list|<
name|?
argument_list|>
name|getItemInternal
parameter_list|(
annotation|@
name|Nonnull
name|String
name|oakPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|ItemDelegate
name|item
init|=
name|sd
operator|.
name|getItem
argument_list|(
name|oakPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|instanceof
name|NodeDelegate
condition|)
block|{
return|return
name|NodeImpl
operator|.
name|createNode
argument_list|(
operator|(
name|NodeDelegate
operator|)
name|item
argument_list|,
name|sessionContext
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|item
operator|instanceof
name|PropertyDelegate
condition|)
block|{
return|return
operator|new
name|PropertyImpl
argument_list|(
operator|(
name|PropertyDelegate
operator|)
name|item
argument_list|,
name|sessionContext
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|public
name|Node
name|getNodeOrNull
parameter_list|(
specifier|final
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkNotNull
argument_list|(
name|absPath
argument_list|)
expr_stmt|;
return|return
name|sd
operator|.
name|performNullable
argument_list|(
operator|new
name|ReadOperation
argument_list|<
name|Node
argument_list|>
argument_list|(
literal|"getNodeOrNull"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Node
name|performNullable
parameter_list|()
throws|throws
name|RepositoryException
block|{
try|try
block|{
return|return
name|NodeImpl
operator|.
name|createNodeOrNull
argument_list|(
name|sd
operator|.
name|getNode
argument_list|(
name|getOakPathOrThrow
argument_list|(
name|absPath
argument_list|)
argument_list|)
argument_list|,
name|sessionContext
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|public
name|Property
name|getPropertyOrNull
parameter_list|(
specifier|final
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|checkNotNull
argument_list|(
name|absPath
argument_list|)
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
specifier|final
name|String
name|oakPath
decl_stmt|;
try|try
block|{
name|oakPath
operator|=
name|getOakPathOrThrow
argument_list|(
name|absPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|sd
operator|.
name|performNullable
argument_list|(
operator|new
name|ReadOperation
argument_list|<
name|Property
argument_list|>
argument_list|(
literal|"getPropertyOrNull"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Property
name|performNullable
parameter_list|()
block|{
name|PropertyDelegate
name|pd
init|=
name|sd
operator|.
name|getProperty
argument_list|(
name|oakPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|pd
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|PropertyImpl
argument_list|(
name|pd
argument_list|,
name|sessionContext
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|public
name|Item
name|getItemOrNull
parameter_list|(
specifier|final
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkNotNull
argument_list|(
name|absPath
argument_list|)
expr_stmt|;
return|return
name|sd
operator|.
name|performNullable
argument_list|(
operator|new
name|ReadOperation
argument_list|<
name|Item
argument_list|>
argument_list|(
literal|"getItemOrNull"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Item
name|performNullable
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|getItemInternal
argument_list|(
name|getOakPathOrThrow
argument_list|(
name|absPath
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|//------------------------------------------------------------< Session>---
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Repository
name|getRepository
parameter_list|()
block|{
return|return
name|sessionContext
operator|.
name|getRepository
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUserID
parameter_list|()
block|{
return|return
name|sd
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getAttributeNames
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|newTreeSet
argument_list|(
name|sessionContext
operator|.
name|getAttributes
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|names
argument_list|,
name|sd
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getAttributeNames
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|names
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|names
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getAttribute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Object
name|attribute
init|=
name|sd
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|attribute
operator|==
literal|null
condition|)
block|{
name|attribute
operator|=
name|sessionContext
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|attribute
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Workspace
name|getWorkspace
parameter_list|()
block|{
return|return
name|sessionContext
operator|.
name|getWorkspace
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Session
name|impersonate
parameter_list|(
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|sd
operator|.
name|checkAlive
argument_list|()
expr_stmt|;
name|ImpersonationCredentials
name|impCreds
init|=
operator|new
name|ImpersonationCredentials
argument_list|(
name|checkNotNull
argument_list|(
name|credentials
argument_list|)
argument_list|,
name|sd
operator|.
name|getAuthInfo
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
name|impCreds
argument_list|,
name|sd
operator|.
name|getWorkspaceName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|ValueFactory
name|getValueFactory
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|sd
operator|.
name|checkAlive
argument_list|()
expr_stmt|;
return|return
name|sessionContext
operator|.
name|getValueFactory
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Node
name|getRootNode
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|sd
operator|.
name|perform
argument_list|(
operator|new
name|ReadOperation
argument_list|<
name|Node
argument_list|>
argument_list|(
literal|"getRootNode"
argument_list|)
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Node
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|NodeDelegate
name|nd
init|=
name|sd
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|nd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Root node is not accessible."
argument_list|)
throw|;
block|}
return|return
name|NodeImpl
operator|.
name|createNode
argument_list|(
name|nd
argument_list|,
name|sessionContext
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getNode
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|node
init|=
name|getNodeOrNull
argument_list|(
name|checkNotNull
argument_list|(
name|absPath
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
literal|"Node with path "
operator|+
name|absPath
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
return|return
name|node
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|nodeExists
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|getNodeOrNull
argument_list|(
name|checkNotNull
argument_list|(
name|absPath
argument_list|)
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|Node
name|getNodeById
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|sd
operator|.
name|perform
argument_list|(
operator|new
name|ReadOperation
argument_list|<
name|Node
argument_list|>
argument_list|(
literal|"getNodeById"
argument_list|)
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Node
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|NodeDelegate
name|nd
init|=
name|sd
operator|.
name|getNodeByIdentifier
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|nd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ItemNotFoundException
argument_list|(
literal|"Node with id "
operator|+
name|id
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
return|return
name|NodeImpl
operator|.
name|createNode
argument_list|(
name|nd
argument_list|,
name|sessionContext
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Node
name|getNodeByUUID
parameter_list|(
name|String
name|uuid
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|getNodeById
argument_list|(
name|checkNotNull
argument_list|(
name|uuid
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Node
name|getNodeByIdentifier
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|getNodeById
argument_list|(
name|checkNotNull
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Property
name|getProperty
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Property
name|property
init|=
name|getPropertyOrNull
argument_list|(
name|checkNotNull
argument_list|(
name|absPath
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
name|absPath
argument_list|)
throw|;
block|}
return|return
name|property
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyExists
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|getPropertyOrNull
argument_list|(
name|checkNotNull
argument_list|(
name|absPath
argument_list|)
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Item
name|getItem
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Item
name|item
init|=
name|getItemOrNull
argument_list|(
name|checkNotNull
argument_list|(
name|absPath
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
name|absPath
argument_list|)
throw|;
block|}
return|return
name|item
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|itemExists
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|getItemOrNull
argument_list|(
name|checkNotNull
argument_list|(
name|absPath
argument_list|)
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|move
parameter_list|(
name|String
name|srcAbsPath
parameter_list|,
specifier|final
name|String
name|destAbsPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkIndexOnName
argument_list|(
name|checkNotNull
argument_list|(
name|destAbsPath
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|srcOakPath
init|=
name|getOakPathOrThrowNotFound
argument_list|(
name|checkNotNull
argument_list|(
name|srcAbsPath
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|destOakPath
init|=
name|getOakPathOrThrowNotFound
argument_list|(
name|destAbsPath
argument_list|)
decl_stmt|;
name|sd
operator|.
name|performVoid
argument_list|(
operator|new
name|WriteOperation
argument_list|(
literal|"move"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkPreconditions
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|super
operator|.
name|checkPreconditions
argument_list|()
expr_stmt|;
name|sd
operator|.
name|checkProtectedNode
argument_list|(
name|getParentPath
argument_list|(
name|srcOakPath
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|checkProtectedNode
argument_list|(
name|getParentPath
argument_list|(
name|destOakPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|performVoid
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|sd
operator|.
name|move
argument_list|(
name|srcOakPath
argument_list|,
name|destOakPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeItem
parameter_list|(
specifier|final
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|String
name|oakPath
init|=
name|getOakPathOrThrowNotFound
argument_list|(
name|checkNotNull
argument_list|(
name|absPath
argument_list|)
argument_list|)
decl_stmt|;
name|sd
operator|.
name|performVoid
argument_list|(
operator|new
name|WriteOperation
argument_list|(
literal|"removeItem"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|performVoid
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|ItemDelegate
name|item
init|=
name|sd
operator|.
name|getItem
argument_list|(
name|oakPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
name|absPath
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|isProtected
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
name|item
operator|.
name|getPath
argument_list|()
operator|+
literal|" is protected"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|item
operator|.
name|remove
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|item
operator|.
name|getPath
argument_list|()
operator|+
literal|" could not be removed"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|save
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|sd
operator|.
name|performVoid
argument_list|(
operator|new
name|WriteOperation
argument_list|(
literal|"save"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|performVoid
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|sd
operator|.
name|save
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSave
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|(
specifier|final
name|boolean
name|keepChanges
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|sd
operator|.
name|performVoid
argument_list|(
operator|new
name|WriteOperation
argument_list|(
literal|"refresh"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|performVoid
parameter_list|()
block|{
name|sd
operator|.
name|refresh
argument_list|(
name|keepChanges
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRefresh
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPendingChanges
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|sd
operator|.
name|checkAlive
argument_list|()
expr_stmt|;
return|return
name|sd
operator|.
name|hasPendingChanges
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLive
parameter_list|()
block|{
return|return
name|sd
operator|.
name|isAlive
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|logout
parameter_list|()
block|{
if|if
condition|(
name|sd
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|sessionCounter
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
try|try
block|{
name|sd
operator|.
name|performVoid
argument_list|(
operator|new
name|SessionOperation
argument_list|(
literal|"logout"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|performVoid
parameter_list|()
block|{
name|sessionContext
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|sd
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLogout
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected exception thrown by operation 'logout'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|ContentHandler
name|getImportContentHandler
parameter_list|(
name|String
name|parentAbsPath
parameter_list|,
name|int
name|uuidBehavior
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
operator|new
name|ImportHandler
argument_list|(
name|checkNotNull
argument_list|(
name|parentAbsPath
argument_list|)
argument_list|,
name|sessionContext
argument_list|,
name|uuidBehavior
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|importXML
parameter_list|(
name|String
name|parentAbsPath
parameter_list|,
name|InputStream
name|in
parameter_list|,
name|int
name|uuidBehavior
parameter_list|)
throws|throws
name|IOException
throws|,
name|RepositoryException
block|{
try|try
block|{
name|ContentHandler
name|handler
init|=
name|getImportContentHandler
argument_list|(
name|checkNotNull
argument_list|(
name|parentAbsPath
argument_list|)
argument_list|,
name|uuidBehavior
argument_list|)
decl_stmt|;
operator|new
name|ParsingContentHandler
argument_list|(
name|handler
argument_list|)
operator|.
name|parse
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|Throwable
name|exception
init|=
name|e
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|instanceof
name|RepositoryException
condition|)
block|{
throw|throw
operator|(
name|RepositoryException
operator|)
name|exception
throw|;
block|}
elseif|else
if|if
condition|(
name|exception
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|exception
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|InvalidSerializedDataException
argument_list|(
literal|"XML parse error"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
comment|// JCR-2903
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{                 }
block|}
block|}
block|}
comment|/**      * Exports content at the given path using the given exporter.      *      * @param path     of the node to be exported      * @param exporter document or system view exporter      * @throws SAXException        if the SAX event handler failed      * @throws RepositoryException if another error occurs      */
specifier|private
specifier|synchronized
name|void
name|export
parameter_list|(
name|String
name|path
parameter_list|,
name|Exporter
name|exporter
parameter_list|)
throws|throws
name|SAXException
throws|,
name|RepositoryException
block|{
name|Item
name|item
init|=
name|getItem
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|isNode
argument_list|()
condition|)
block|{
name|exporter
operator|.
name|export
argument_list|(
operator|(
name|Node
operator|)
name|item
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
literal|"XML export is not defined for properties: "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|exportSystemView
parameter_list|(
name|String
name|absPath
parameter_list|,
name|ContentHandler
name|contentHandler
parameter_list|,
name|boolean
name|skipBinary
parameter_list|,
name|boolean
name|noRecurse
parameter_list|)
throws|throws
name|SAXException
throws|,
name|RepositoryException
block|{
name|export
argument_list|(
name|checkNotNull
argument_list|(
name|absPath
argument_list|)
argument_list|,
operator|new
name|SystemViewExporter
argument_list|(
name|this
argument_list|,
name|checkNotNull
argument_list|(
name|contentHandler
argument_list|)
argument_list|,
operator|!
name|noRecurse
argument_list|,
operator|!
name|skipBinary
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|exportSystemView
parameter_list|(
name|String
name|absPath
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|boolean
name|skipBinary
parameter_list|,
name|boolean
name|noRecurse
parameter_list|)
throws|throws
name|IOException
throws|,
name|RepositoryException
block|{
try|try
block|{
name|ContentHandler
name|handler
init|=
operator|new
name|ToXmlContentHandler
argument_list|(
name|checkNotNull
argument_list|(
name|out
argument_list|)
argument_list|)
decl_stmt|;
name|export
argument_list|(
name|checkNotNull
argument_list|(
name|absPath
argument_list|)
argument_list|,
operator|new
name|SystemViewExporter
argument_list|(
name|this
argument_list|,
name|handler
argument_list|,
operator|!
name|noRecurse
argument_list|,
operator|!
name|skipBinary
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|Exception
name|exception
init|=
name|e
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|instanceof
name|RepositoryException
condition|)
block|{
throw|throw
operator|(
name|RepositoryException
operator|)
name|exception
throw|;
block|}
elseif|else
if|if
condition|(
name|exception
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|exception
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Error serializing system view XML"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|exportDocumentView
parameter_list|(
name|String
name|absPath
parameter_list|,
name|ContentHandler
name|contentHandler
parameter_list|,
name|boolean
name|skipBinary
parameter_list|,
name|boolean
name|noRecurse
parameter_list|)
throws|throws
name|SAXException
throws|,
name|RepositoryException
block|{
name|export
argument_list|(
name|checkNotNull
argument_list|(
name|absPath
argument_list|)
argument_list|,
operator|new
name|DocumentViewExporter
argument_list|(
name|this
argument_list|,
name|checkNotNull
argument_list|(
name|contentHandler
argument_list|)
argument_list|,
operator|!
name|noRecurse
argument_list|,
operator|!
name|skipBinary
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|exportDocumentView
parameter_list|(
name|String
name|absPath
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|boolean
name|skipBinary
parameter_list|,
name|boolean
name|noRecurse
parameter_list|)
throws|throws
name|IOException
throws|,
name|RepositoryException
block|{
try|try
block|{
name|ContentHandler
name|handler
init|=
operator|new
name|ToXmlContentHandler
argument_list|(
name|checkNotNull
argument_list|(
name|out
argument_list|)
argument_list|)
decl_stmt|;
name|export
argument_list|(
name|checkNotNull
argument_list|(
name|absPath
argument_list|)
argument_list|,
operator|new
name|DocumentViewExporter
argument_list|(
name|this
argument_list|,
name|handler
argument_list|,
operator|!
name|noRecurse
argument_list|,
operator|!
name|skipBinary
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|Exception
name|exception
init|=
name|e
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|instanceof
name|RepositoryException
condition|)
block|{
throw|throw
operator|(
name|RepositoryException
operator|)
name|exception
throw|;
block|}
elseif|else
if|if
condition|(
name|exception
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|exception
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Error serializing document view XML"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addLockToken
parameter_list|(
name|String
name|lt
parameter_list|)
block|{
try|try
block|{
name|getWorkspace
argument_list|()
operator|.
name|getLockManager
argument_list|()
operator|.
name|addLockToken
argument_list|(
name|checkNotNull
argument_list|(
name|lt
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to add lock token "
operator|+
name|lt
operator|+
literal|" to session"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|String
index|[]
name|getLockTokens
parameter_list|()
block|{
try|try
block|{
return|return
name|getWorkspace
argument_list|()
operator|.
name|getLockManager
argument_list|()
operator|.
name|getLockTokens
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to retrieve lock tokens from session"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeLockToken
parameter_list|(
name|String
name|lt
parameter_list|)
block|{
try|try
block|{
name|getWorkspace
argument_list|()
operator|.
name|getLockManager
argument_list|()
operator|.
name|removeLockToken
argument_list|(
name|checkNotNull
argument_list|(
name|lt
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to remove lock token "
operator|+
name|lt
operator|+
literal|" from session"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPermission
parameter_list|(
name|String
name|absPath
parameter_list|,
specifier|final
name|String
name|actions
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|String
name|oakPath
init|=
name|getOakPathOrThrow
argument_list|(
name|checkNotNull
argument_list|(
name|absPath
argument_list|)
argument_list|)
decl_stmt|;
name|checkNotNull
argument_list|(
name|actions
argument_list|)
expr_stmt|;
return|return
name|sd
operator|.
name|perform
argument_list|(
operator|new
name|ReadOperation
argument_list|<
name|Boolean
argument_list|>
argument_list|(
literal|"hasPermission"
argument_list|)
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Boolean
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|sessionContext
operator|.
name|getAccessManager
argument_list|()
operator|.
name|hasPermissions
argument_list|(
name|oakPath
argument_list|,
name|actions
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkPermission
parameter_list|(
name|String
name|absPath
parameter_list|,
name|String
name|actions
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
operator|!
name|hasPermission
argument_list|(
name|checkNotNull
argument_list|(
name|absPath
argument_list|)
argument_list|,
name|checkNotNull
argument_list|(
name|actions
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Access denied."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasCapability
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Object
name|target
parameter_list|,
name|Object
index|[]
name|arguments
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkNotNull
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|sd
operator|.
name|checkAlive
argument_list|()
expr_stmt|;
if|if
condition|(
name|target
operator|instanceof
name|ItemImpl
condition|)
block|{
name|ItemDelegate
name|dlg
init|=
operator|(
operator|(
name|ItemImpl
argument_list|<
name|?
argument_list|>
operator|)
name|target
operator|)
operator|.
name|dlg
decl_stmt|;
if|if
condition|(
name|dlg
operator|.
name|isProtected
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|isNode
init|=
operator|(
operator|(
name|ItemImpl
argument_list|<
name|?
argument_list|>
operator|)
name|target
operator|)
operator|.
name|isNode
argument_list|()
decl_stmt|;
name|Node
name|parent
init|=
operator|(
name|isNode
operator|)
condition|?
operator|(
name|Node
operator|)
name|target
else|:
operator|(
operator|(
name|ItemImpl
argument_list|<
name|?
argument_list|>
operator|)
name|target
operator|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parent
operator|.
name|isCheckedOut
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|parent
operator|.
name|isLocked
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|AccessManager
name|accessMgr
init|=
name|sessionContext
operator|.
name|getAccessManager
argument_list|()
decl_stmt|;
name|long
name|permission
init|=
name|Permissions
operator|.
name|NO_PERMISSION
decl_stmt|;
if|if
condition|(
name|isNode
condition|)
block|{
name|Tree
name|tree
init|=
operator|(
operator|(
name|NodeDelegate
operator|)
name|dlg
operator|)
operator|.
name|getTree
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"addNode"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
if|if
condition|(
name|arguments
operator|!=
literal|null
operator|&&
name|arguments
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// add-node needs to be checked on the (path of) the
comment|// new node that has/will be added
name|String
name|path
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|,
name|sessionContext
operator|.
name|getOakName
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|accessMgr
operator|.
name|hasPermissions
argument_list|(
name|path
argument_list|,
name|Session
operator|.
name|ACTION_ADD_NODE
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"setPrimaryType"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
operator|||
literal|"addMixin"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
operator|||
literal|"removeMixin"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
name|permission
operator|=
name|Permissions
operator|.
name|NODE_TYPE_MANAGEMENT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"orderBefore"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
if|if
condition|(
name|tree
operator|.
name|isRoot
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|permission
operator|=
name|Permissions
operator|.
name|MODIFY_CHILD_NODE_COLLECTION
expr_stmt|;
name|tree
operator|=
name|tree
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"setProperty"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
name|permission
operator|=
name|Permissions
operator|.
name|ADD_PROPERTY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"remove"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
name|permission
operator|=
name|Permissions
operator|.
name|REMOVE_NODE
expr_stmt|;
block|}
return|return
name|accessMgr
operator|.
name|hasPermissions
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|permission
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
literal|"setValue"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
name|permission
operator|=
name|Permissions
operator|.
name|MODIFY_PROPERTY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"remove"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
name|permission
operator|=
name|Permissions
operator|.
name|REMOVE_PROPERTY
expr_stmt|;
block|}
name|NodeDelegate
name|parentDelegate
init|=
name|dlg
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentDelegate
operator|!=
literal|null
condition|)
block|{
return|return
name|accessMgr
operator|.
name|hasPermissions
argument_list|(
name|parentDelegate
operator|.
name|getTree
argument_list|()
argument_list|,
operator|(
operator|(
name|PropertyDelegate
operator|)
name|dlg
operator|)
operator|.
name|getPropertyState
argument_list|()
argument_list|,
name|permission
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|accessMgr
operator|.
name|hasPermissions
argument_list|(
name|dlg
operator|.
name|getPath
argument_list|()
argument_list|,
operator|(
name|permission
operator|==
name|Permissions
operator|.
name|MODIFY_PROPERTY
operator|)
condition|?
name|Session
operator|.
name|ACTION_SET_PROPERTY
else|:
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
return|;
block|}
block|}
block|}
comment|// TODO: add more best-effort checks
return|return
literal|true
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|AccessControlManager
name|getAccessControlManager
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|sessionContext
operator|.
name|getAccessControlManager
argument_list|()
return|;
block|}
comment|/**      * @see javax.jcr.Session#getRetentionManager()      */
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|RetentionManager
name|getRetentionManager
parameter_list|()
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"Retention Management is not supported."
argument_list|)
throw|;
block|}
comment|//---------------------------------------------------------< Namespaces>---
annotation|@
name|Override
specifier|public
name|void
name|setNamespacePrefix
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|sessionContext
operator|.
name|getNamespaces
argument_list|()
operator|.
name|setNamespacePrefix
argument_list|(
name|checkNotNull
argument_list|(
name|prefix
argument_list|)
argument_list|,
name|checkNotNull
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getNamespacePrefixes
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|sessionContext
operator|.
name|getNamespaces
argument_list|()
operator|.
name|getNamespacePrefixes
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|sessionContext
operator|.
name|getNamespaces
argument_list|()
operator|.
name|getNamespaceURI
argument_list|(
name|checkNotNull
argument_list|(
name|prefix
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespacePrefix
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|sessionContext
operator|.
name|getNamespaces
argument_list|()
operator|.
name|getNamespacePrefix
argument_list|(
name|checkNotNull
argument_list|(
name|uri
argument_list|)
argument_list|)
return|;
block|}
comment|//--------------------------------------------------< JackrabbitSession>---
annotation|@
name|Override
specifier|public
name|boolean
name|hasPermission
parameter_list|(
name|String
name|absPath
parameter_list|,
name|String
modifier|...
name|actions
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|hasPermission
argument_list|(
name|absPath
argument_list|,
name|Text
operator|.
name|implode
argument_list|(
name|actions
argument_list|,
literal|","
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|PrincipalManager
name|getPrincipalManager
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|sessionContext
operator|.
name|getPrincipalManager
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|UserManager
name|getUserManager
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|sessionContext
operator|.
name|getUserManager
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|sd
operator|.
name|getContentSession
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

