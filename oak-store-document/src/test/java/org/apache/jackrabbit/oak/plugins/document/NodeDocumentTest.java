begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|VersionGarbageCollector
operator|.
name|VersionGCStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newLinkedHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|COLLISIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|TestUtils
operator|.
name|NO_BINARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|getIdFromPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|getRootDocument
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|everyItem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests for {@link NodeDocument}.  */
end_comment

begin_class
specifier|public
class|class
name|NodeDocumentTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|splitCollisions
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryDocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|Utils
operator|.
name|getPathFromId
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
operator|new
name|NodeDocument
argument_list|(
name|docStore
argument_list|)
decl_stmt|;
name|doc
operator|.
name|put
argument_list|(
name|Document
operator|.
name|ID
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NodeDocument
operator|.
name|NUM_REVS_THRESHOLD
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|Revision
name|r
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|NodeDocument
operator|.
name|setRevision
argument_list|(
name|op
argument_list|,
name|r
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|addCollision
argument_list|(
name|op
argument_list|,
name|r
argument_list|,
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|UpdateUtils
operator|.
name|applyChanges
argument_list|(
name|doc
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|RevisionVector
name|head
init|=
name|DummyRevisionContext
operator|.
name|INSTANCE
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|doc
operator|.
name|split
argument_list|(
name|DummyRevisionContext
operator|.
name|INSTANCE
argument_list|,
name|head
argument_list|,
name|NO_BINARY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getConflictsFor
parameter_list|()
block|{
name|MemoryDocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|Utils
operator|.
name|getPathFromId
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
operator|new
name|NodeDocument
argument_list|(
name|docStore
argument_list|)
decl_stmt|;
name|doc
operator|.
name|put
argument_list|(
name|Document
operator|.
name|ID
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|Revision
argument_list|>
name|branchCommits
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Revision
argument_list|>
name|conflicts
init|=
name|doc
operator|.
name|getConflictsFor
argument_list|(
name|branchCommits
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|conflicts
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// add some collisions
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Revision
name|r0
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r1
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|c1
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r2
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|c2
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// backward compatibility test
name|op
operator|.
name|setMapEntry
argument_list|(
name|COLLISIONS
argument_list|,
name|r0
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// regular collision entries
name|NodeDocument
operator|.
name|addCollision
argument_list|(
name|op
argument_list|,
name|r1
argument_list|,
name|c1
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|addCollision
argument_list|(
name|op
argument_list|,
name|r2
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|UpdateUtils
operator|.
name|applyChanges
argument_list|(
name|doc
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|branchCommits
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|r0
argument_list|)
expr_stmt|;
name|conflicts
operator|=
name|doc
operator|.
name|getConflictsFor
argument_list|(
name|branchCommits
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conflicts
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|branchCommits
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|r1
operator|.
name|asBranchRevision
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|=
name|doc
operator|.
name|getConflictsFor
argument_list|(
name|branchCommits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|c1
argument_list|)
argument_list|,
name|conflicts
argument_list|)
expr_stmt|;
name|branchCommits
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|r2
operator|.
name|asBranchRevision
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|=
name|doc
operator|.
name|getConflictsFor
argument_list|(
name|branchCommits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|c2
argument_list|)
argument_list|,
name|conflicts
argument_list|)
expr_stmt|;
name|branchCommits
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|r1
operator|.
name|asBranchRevision
argument_list|()
argument_list|,
name|r2
operator|.
name|asBranchRevision
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|=
name|doc
operator|.
name|getConflictsFor
argument_list|(
name|branchCommits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
argument_list|,
name|conflicts
argument_list|)
expr_stmt|;
name|branchCommits
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|r2
operator|.
name|asBranchRevision
argument_list|()
argument_list|,
name|r1
operator|.
name|asBranchRevision
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|=
name|doc
operator|.
name|getConflictsFor
argument_list|(
name|branchCommits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
argument_list|,
name|conflicts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getAllChanges
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM_CHANGES
init|=
literal|200
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|createTestStore
argument_list|(
name|NUM_CHANGES
argument_list|)
decl_stmt|;
name|Revision
name|previous
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|NodeDocument
name|root
init|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Revision
name|r
range|:
name|root
operator|.
name|getAllChanges
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|previous
operator|.
name|compareRevisionTime
argument_list|(
name|r
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|previous
operator|=
name|r
expr_stmt|;
block|}
comment|// NUM_CHANGES + one revision when node was created
name|assertEquals
argument_list|(
name|NUM_CHANGES
operator|+
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|root
operator|.
name|getAllChanges
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getAllChangesAfterGC1
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numChanges
init|=
literal|200
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|createTestStore
argument_list|(
name|numChanges
argument_list|)
decl_stmt|;
name|NodeDocument
name|root
init|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
decl_stmt|;
comment|// remove most recent previous doc
name|NodeDocument
name|toRemove
init|=
name|root
operator|.
name|getAllPreviousDocs
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|numDeleted
init|=
operator|new
name|SplitDocumentCleanUp
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|,
operator|new
name|VersionGCStats
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|toRemove
argument_list|)
argument_list|)
operator|.
name|disconnect
argument_list|()
operator|.
name|deleteSplitDocuments
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numDeleted
argument_list|)
expr_stmt|;
name|numChanges
operator|-=
name|Iterables
operator|.
name|size
argument_list|(
name|toRemove
operator|.
name|getAllChanges
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|previous
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
for|for
control|(
name|Revision
name|r
range|:
name|root
operator|.
name|getAllChanges
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|previous
operator|.
name|compareRevisionTime
argument_list|(
name|r
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|previous
operator|=
name|r
expr_stmt|;
block|}
comment|// numChanges + one revision when node was created
name|assertEquals
argument_list|(
name|numChanges
operator|+
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|root
operator|.
name|getAllChanges
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getAllChangesAfterGC2
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numChanges
init|=
literal|200
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|createTestStore
argument_list|(
name|numChanges
argument_list|)
decl_stmt|;
name|NodeDocument
name|root
init|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
decl_stmt|;
comment|// remove oldest previous doc
name|NodeDocument
name|toRemove
init|=
name|Iterators
operator|.
name|getLast
argument_list|(
name|root
operator|.
name|getAllPreviousDocs
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numDeleted
init|=
operator|new
name|SplitDocumentCleanUp
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|,
operator|new
name|VersionGCStats
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|toRemove
argument_list|)
argument_list|)
operator|.
name|disconnect
argument_list|()
operator|.
name|deleteSplitDocuments
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numDeleted
argument_list|)
expr_stmt|;
name|numChanges
operator|-=
name|Iterables
operator|.
name|size
argument_list|(
name|toRemove
operator|.
name|getAllChanges
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|previous
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
for|for
control|(
name|Revision
name|r
range|:
name|root
operator|.
name|getAllChanges
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|previous
operator|.
name|compareRevisionTime
argument_list|(
name|r
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|previous
operator|=
name|r
expr_stmt|;
block|}
comment|// numChanges + one revision when node was created
name|assertEquals
argument_list|(
name|numChanges
operator|+
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|root
operator|.
name|getAllChanges
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getAllChangesCluster
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM_CLUSTER_NODES
init|=
literal|3
decl_stmt|;
specifier|final
name|int
name|NUM_CHANGES
init|=
literal|500
decl_stmt|;
name|DocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DocumentNodeStore
argument_list|>
name|docStores
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_CLUSTER_NODES
condition|;
name|i
operator|++
control|)
block|{
name|DocumentNodeStore
name|ns
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setClusterId
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|docStores
operator|.
name|add
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|42
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_CHANGES
condition|;
name|i
operator|++
control|)
block|{
comment|// randomly pick a clusterNode
name|int
name|clusterIdx
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|NUM_CLUSTER_NODES
argument_list|)
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|docStores
operator|.
name|get
argument_list|(
name|clusterIdx
argument_list|)
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"p-"
operator|+
name|clusterIdx
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|nextFloat
argument_list|()
operator|<
literal|0.2
condition|)
block|{
name|RevisionVector
name|head
init|=
name|ns
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
for|for
control|(
name|UpdateOp
name|op
range|:
name|SplitOperations
operator|.
name|forDocument
argument_list|(
name|getRootDocument
argument_list|(
name|store
argument_list|)
argument_list|,
name|ns
argument_list|,
name|head
argument_list|,
name|NO_BINARY
argument_list|,
literal|2
argument_list|)
control|)
block|{
name|store
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|DocumentNodeStore
name|ns
init|=
name|docStores
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NodeDocument
name|root
init|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
decl_stmt|;
name|Revision
name|previous
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
for|for
control|(
name|Revision
name|rev
range|:
name|root
operator|.
name|getAllChanges
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|previous
operator|.
name|compareRevisionTimeThenClusterId
argument_list|(
name|rev
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|previous
operator|=
name|rev
expr_stmt|;
block|}
comment|// numChanges + one revision when node was created
name|assertEquals
argument_list|(
name|NUM_CHANGES
operator|+
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|root
operator|.
name|getAllChanges
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|DocumentNodeStore
name|dns
range|:
name|docStores
control|)
block|{
name|dns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPreviousDocLeaves
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentNodeStore
name|ns
init|=
name|createTestStore
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|Revision
name|previous
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|NodeDocument
name|root
init|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|NodeDocument
argument_list|>
name|it
init|=
name|root
operator|.
name|getPreviousDocLeaves
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeDocument
name|leaf
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Revision
name|r
init|=
name|leaf
operator|.
name|getAllChanges
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|previous
operator|.
name|compareRevisionTime
argument_list|(
name|r
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|previous
operator|=
name|r
expr_stmt|;
block|}
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPreviousDocLeavesAfterGC1
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentNodeStore
name|ns
init|=
name|createTestStore
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|Revision
name|previous
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|NodeDocument
name|root
init|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numLeaves
init|=
name|Iterators
operator|.
name|size
argument_list|(
name|root
operator|.
name|getPreviousDocLeaves
argument_list|()
argument_list|)
decl_stmt|;
comment|// remove most recent previous doc
name|NodeDocument
name|toRemove
init|=
name|root
operator|.
name|getAllPreviousDocs
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|numDeleted
init|=
operator|new
name|SplitDocumentCleanUp
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|,
operator|new
name|VersionGCStats
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|toRemove
argument_list|)
argument_list|)
operator|.
name|disconnect
argument_list|()
operator|.
name|deleteSplitDocuments
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numDeleted
argument_list|)
expr_stmt|;
name|root
operator|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numLeaves
operator|-
literal|1
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|root
operator|.
name|getPreviousDocLeaves
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|NodeDocument
argument_list|>
name|it
init|=
name|root
operator|.
name|getPreviousDocLeaves
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeDocument
name|leaf
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Revision
name|r
init|=
name|leaf
operator|.
name|getAllChanges
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|previous
operator|.
name|compareRevisionTime
argument_list|(
name|r
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|previous
operator|=
name|r
expr_stmt|;
block|}
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPreviousDocLeavesAfterGC2
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentNodeStore
name|ns
init|=
name|createTestStore
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|Revision
name|previous
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|NodeDocument
name|root
init|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numLeaves
init|=
name|Iterators
operator|.
name|size
argument_list|(
name|root
operator|.
name|getPreviousDocLeaves
argument_list|()
argument_list|)
decl_stmt|;
comment|// remove oldest previous doc
name|NodeDocument
name|toRemove
init|=
name|Iterators
operator|.
name|getLast
argument_list|(
name|root
operator|.
name|getAllPreviousDocs
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numDeleted
init|=
operator|new
name|SplitDocumentCleanUp
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|,
operator|new
name|VersionGCStats
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|toRemove
argument_list|)
argument_list|)
operator|.
name|disconnect
argument_list|()
operator|.
name|deleteSplitDocuments
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numDeleted
argument_list|)
expr_stmt|;
name|root
operator|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numLeaves
operator|-
literal|1
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|root
operator|.
name|getPreviousDocLeaves
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|NodeDocument
argument_list|>
name|it
init|=
name|root
operator|.
name|getPreviousDocLeaves
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeDocument
name|leaf
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Revision
name|r
init|=
name|leaf
operator|.
name|getAllChanges
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|previous
operator|.
name|compareRevisionTime
argument_list|(
name|r
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|previous
operator|=
name|r
expr_stmt|;
block|}
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getNewestRevisionTooExpensive
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM_CHANGES
init|=
literal|200
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|prevDocCalls
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|DocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|Utils
operator|.
name|getPathFromId
argument_list|(
name|key
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"p"
argument_list|)
condition|)
block|{
name|prevDocCalls
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|find
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
comment|// create test data
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_CHANGES
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|builder
operator|.
name|hasChildNode
argument_list|(
literal|"test"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|Math
operator|.
name|random
argument_list|()
operator|<
literal|0.2
condition|)
block|{
name|RevisionVector
name|head
init|=
name|ns
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|ns
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|UpdateOp
name|op
range|:
name|SplitOperations
operator|.
name|forDocument
argument_list|(
name|doc
argument_list|,
name|ns
argument_list|,
name|head
argument_list|,
name|NO_BINARY
argument_list|,
literal|2
argument_list|)
control|)
block|{
name|store
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|NodeDocument
name|doc
init|=
name|ns
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
decl_stmt|;
comment|// get most recent previous doc
name|NodeDocument
name|prev
init|=
name|doc
operator|.
name|getAllPreviousDocs
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// simulate a change revision within the range of
comment|// the most recent previous document
name|Iterable
argument_list|<
name|Revision
argument_list|>
name|changes
init|=
name|prev
operator|.
name|getAllChanges
argument_list|()
decl_stmt|;
name|Revision
name|baseRev
init|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|changes
argument_list|)
decl_stmt|;
name|Revision
name|changeRev
init|=
operator|new
name|Revision
argument_list|(
name|baseRev
operator|.
name|getTimestamp
argument_list|()
argument_list|,
literal|1000
argument_list|,
name|ns
operator|.
name|getClusterId
argument_list|()
argument_list|)
decl_stmt|;
comment|// reset calls to previous documents
name|prevDocCalls
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doc
operator|.
name|getNewestRevision
argument_list|(
name|ns
argument_list|,
operator|new
name|RevisionVector
argument_list|(
name|baseRev
argument_list|)
argument_list|,
name|changeRev
argument_list|,
literal|null
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Revision
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// must not read all previous docs
name|assertTrue
argument_list|(
literal|"too many calls for previous documents: "
operator|+
name|prevDocCalls
argument_list|,
name|prevDocCalls
operator|.
name|size
argument_list|()
operator|<=
literal|5
argument_list|)
expr_stmt|;
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getNewestRevision
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns1
init|=
name|createTestStore
argument_list|(
name|store
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DocumentNodeStore
name|ns2
init|=
name|createTestStore
argument_list|(
name|store
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|NodeBuilder
name|b1
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns1
argument_list|,
name|b1
argument_list|)
expr_stmt|;
name|RevisionVector
name|headCreated
init|=
name|ns1
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|Revision
name|created
init|=
name|headCreated
operator|.
name|getRevision
argument_list|(
name|ns1
operator|.
name|getClusterId
argument_list|()
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Revision
argument_list|>
name|collisions
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|Revision
name|newest
init|=
name|doc
operator|.
name|getNewestRevision
argument_list|(
name|ns1
argument_list|,
name|ns1
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
name|ns1
operator|.
name|newRevision
argument_list|()
argument_list|,
literal|null
argument_list|,
name|collisions
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|created
argument_list|,
name|newest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|collisions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// from ns2 POV newest must be null, because the node is not yet visible
name|newest
operator|=
name|doc
operator|.
name|getNewestRevision
argument_list|(
name|ns2
argument_list|,
name|ns2
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
name|ns2
operator|.
name|newRevision
argument_list|()
argument_list|,
literal|null
argument_list|,
name|collisions
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|newest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|collisions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|created
argument_list|,
name|collisions
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|collisions
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// now ns2 sees /test
name|doc
operator|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|newest
operator|=
name|doc
operator|.
name|getNewestRevision
argument_list|(
name|ns2
argument_list|,
name|ns2
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
name|ns2
operator|.
name|newRevision
argument_list|()
argument_list|,
literal|null
argument_list|,
name|collisions
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|created
argument_list|,
name|newest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|collisions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|uncommitted
init|=
name|ns1
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|NodeDocument
operator|.
name|setCommitRoot
argument_list|(
name|op
argument_list|,
name|uncommitted
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|op
operator|.
name|setMapEntry
argument_list|(
literal|"p"
argument_list|,
name|uncommitted
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|store
operator|.
name|findAndUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
argument_list|)
expr_stmt|;
name|collisions
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// ns1 must report uncommitted in collisions
name|doc
operator|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|newest
operator|=
name|doc
operator|.
name|getNewestRevision
argument_list|(
name|ns1
argument_list|,
name|ns1
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
name|ns1
operator|.
name|newRevision
argument_list|()
argument_list|,
literal|null
argument_list|,
name|collisions
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|created
argument_list|,
name|newest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|collisions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uncommitted
argument_list|,
name|collisions
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|collisions
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// ns2 must report uncommitted in collisions
name|newest
operator|=
name|doc
operator|.
name|getNewestRevision
argument_list|(
name|ns2
argument_list|,
name|ns2
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
name|ns2
operator|.
name|newRevision
argument_list|()
argument_list|,
literal|null
argument_list|,
name|collisions
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|created
argument_list|,
name|newest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|collisions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uncommitted
argument_list|,
name|collisions
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|b1
operator|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"q"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns1
argument_list|,
name|b1
argument_list|)
expr_stmt|;
name|Revision
name|committed
init|=
name|ns1
operator|.
name|getHeadRevision
argument_list|()
operator|.
name|getRevision
argument_list|(
name|ns1
operator|.
name|getClusterId
argument_list|()
argument_list|)
decl_stmt|;
name|collisions
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// ns1 must now report committed revision as newest
comment|// uncommitted is not considered a collision anymore
comment|// because it is older than the base revision
name|doc
operator|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|newest
operator|=
name|doc
operator|.
name|getNewestRevision
argument_list|(
name|ns1
argument_list|,
name|headCreated
argument_list|,
name|ns1
operator|.
name|newRevision
argument_list|()
argument_list|,
literal|null
argument_list|,
name|collisions
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|committed
argument_list|,
name|newest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|collisions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// ns2 must report committed revision as collision because
comment|// it is not yet visible. newest is when the node was created
name|newest
operator|=
name|doc
operator|.
name|getNewestRevision
argument_list|(
name|ns2
argument_list|,
name|ns2
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
name|ns2
operator|.
name|newRevision
argument_list|()
argument_list|,
literal|null
argument_list|,
name|collisions
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|created
argument_list|,
name|newest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|collisions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|collisions
operator|.
name|contains
argument_list|(
name|uncommitted
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|collisions
operator|.
name|contains
argument_list|(
name|committed
argument_list|)
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|ns2
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getNewestRevisionCheckArgument
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|createTestStore
argument_list|(
name|store
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Revision
argument_list|>
name|collisions
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
decl_stmt|;
name|RevisionVector
name|branchBase
init|=
name|ns
operator|.
name|getHeadRevision
argument_list|()
operator|.
name|asBranchRevision
argument_list|(
name|ns
operator|.
name|getClusterId
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|doc
operator|.
name|getNewestRevision
argument_list|(
name|ns
argument_list|,
name|branchBase
argument_list|,
name|ns
operator|.
name|newRevision
argument_list|()
argument_list|,
literal|null
argument_list|,
name|collisions
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|RevisionVector
name|head
init|=
name|ns
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|Branch
name|b
init|=
name|ns
operator|.
name|getBranches
argument_list|()
operator|.
name|create
argument_list|(
name|head
argument_list|,
name|ns
operator|.
name|newRevision
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|doc
operator|.
name|getNewestRevision
argument_list|(
name|ns
argument_list|,
name|head
argument_list|,
name|ns
operator|.
name|newRevision
argument_list|()
argument_list|,
name|b
argument_list|,
name|collisions
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getChanges
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numChanges
init|=
literal|200
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|createTestStore
argument_list|(
name|numChanges
argument_list|)
decl_stmt|;
name|DocumentStore
name|store
init|=
name|ns
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|getRootDocument
argument_list|(
name|store
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|int
name|idx
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|numChanges
argument_list|)
decl_stmt|;
name|Revision
name|r
init|=
name|Iterables
operator|.
name|get
argument_list|(
name|doc
operator|.
name|getValueMap
argument_list|(
literal|"p"
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Revision
argument_list|>
name|revs
init|=
name|doc
operator|.
name|getChanges
argument_list|(
literal|"p"
argument_list|,
operator|new
name|RevisionVector
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|idx
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|revs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getChangesMixedClusterIds
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numChanges
init|=
literal|200
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns1
init|=
name|createTestStore
argument_list|(
name|store
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DocumentNodeStore
name|ns2
init|=
name|createTestStore
argument_list|(
name|store
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DocumentNodeStore
argument_list|>
name|nodeStores
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ns1
argument_list|,
name|ns2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RevisionVector
argument_list|>
name|headRevisions
init|=
name|Lists
operator|.
name|reverse
argument_list|(
name|createTestData
argument_list|(
name|nodeStores
argument_list|,
name|random
argument_list|,
name|numChanges
argument_list|)
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|getRootDocument
argument_list|(
name|store
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|int
name|idx
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|numChanges
argument_list|)
decl_stmt|;
name|RevisionVector
name|r
init|=
name|headRevisions
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Revision
argument_list|>
name|revs1
init|=
name|doc
operator|.
name|getChanges
argument_list|(
literal|"p"
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Revision
argument_list|>
name|revs2
init|=
name|doc
operator|.
name|getChanges
argument_list|(
literal|"p"
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Iterables
operator|.
name|size
argument_list|(
name|revs1
argument_list|)
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|revs2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|idx
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|revs1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ns1
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|ns2
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
comment|// OAK-3557
annotation|@
name|Test
specifier|public
name|void
name|isConflicting
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numChanges
init|=
literal|200
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|prevDocCalls
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|Utils
operator|.
name|getPathFromId
argument_list|(
name|key
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"p"
argument_list|)
condition|)
block|{
name|prevDocCalls
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|find
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|createTestStore
argument_list|(
name|store
argument_list|,
literal|0
argument_list|,
name|numChanges
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|getRootDocument
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
name|doc
operator|.
name|getValueMap
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|valueMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RevisionVector
name|baseRev
init|=
operator|new
name|RevisionVector
argument_list|(
name|valueMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|Revision
name|commitRev
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|op
operator|.
name|setMapEntry
argument_list|(
literal|"p"
argument_list|,
name|commitRev
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|prevDocCalls
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|doc
operator|.
name|isConflicting
argument_list|(
name|op
argument_list|,
name|baseRev
argument_list|,
name|commitRev
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"too many calls for previous documents: "
operator|+
name|prevDocCalls
argument_list|,
name|prevDocCalls
operator|.
name|size
argument_list|()
operator|<=
literal|6
argument_list|)
expr_stmt|;
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
comment|// OAK-4358
annotation|@
name|Test
specifier|public
name|void
name|tooManyReadsOnGetNewestRevision
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|prevDocCalls
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|Utils
operator|.
name|getPathFromId
argument_list|(
name|key
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"p"
argument_list|)
condition|)
block|{
name|prevDocCalls
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|find
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DocumentNodeStore
name|ns1
init|=
name|createTestStore
argument_list|(
name|store
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DocumentNodeStore
name|ns2
init|=
name|createTestStore
argument_list|(
name|store
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// create a test node on ns1
name|NodeBuilder
name|b1
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns1
argument_list|,
name|b1
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// modify node on ns2 a couple of time and
comment|// split off some changes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|b2
init|=
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b2
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"ns2"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns2
argument_list|,
name|b2
argument_list|)
expr_stmt|;
block|}
name|String
name|testId
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|NodeDocument
name|test
init|=
name|ns2
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|testId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|ops
init|=
name|SplitOperations
operator|.
name|forDocument
argument_list|(
name|test
argument_list|,
name|ns2
argument_list|,
name|ns2
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
name|NO_BINARY
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|UpdateOp
name|op
range|:
name|ops
control|)
block|{
name|ns2
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|RevisionVector
argument_list|>
name|headRevs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// perform many changes on ns1 and split
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|b1
operator|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"ns1"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns1
argument_list|,
name|b1
argument_list|)
expr_stmt|;
name|test
operator|=
name|ns1
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|testId
argument_list|)
expr_stmt|;
for|for
control|(
name|UpdateOp
name|op
range|:
name|SplitOperations
operator|.
name|forDocument
argument_list|(
name|test
argument_list|,
name|ns1
argument_list|,
name|ns1
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
name|NO_BINARY
argument_list|,
literal|3
argument_list|)
control|)
block|{
name|ns1
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
name|headRevs
operator|.
name|add
argument_list|(
name|ns1
operator|.
name|getHeadRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|numPrevDocs
init|=
name|Iterators
operator|.
name|size
argument_list|(
name|test
operator|.
name|getPreviousDocLeaves
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|numPrevDocs
argument_list|)
expr_stmt|;
comment|// getNewestRevision must not read all previous documents
name|prevDocCalls
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// simulate a call done by a commit with a
comment|// base revision somewhat in the past
name|test
operator|.
name|getNewestRevision
argument_list|(
name|ns1
argument_list|,
name|headRevs
operator|.
name|get
argument_list|(
literal|16
argument_list|)
argument_list|,
name|ns1
operator|.
name|newRevision
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Revision
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// must only read one previous document for ns1 changes
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|prevDocCalls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|sealedNodeDocumentFromJSON
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentNodeStore
name|ns
init|=
name|createTestStore
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|NodeDocument
name|root
init|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|json
init|=
name|root
operator|.
name|asString
argument_list|()
decl_stmt|;
name|NodeDocument
name|doc2
init|=
name|NodeDocument
operator|.
name|fromString
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|,
name|json
argument_list|)
decl_stmt|;
name|doc2
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|tooManyReadsOnGetNodeAtRevision
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numChanges
init|=
literal|200
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|prevDocCalls
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|Utils
operator|.
name|getPathFromId
argument_list|(
name|key
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"p"
argument_list|)
condition|)
block|{
name|prevDocCalls
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|find
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|createTestStore
argument_list|(
name|store
argument_list|,
literal|0
argument_list|,
name|numChanges
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|getRootDocument
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
name|doc
operator|.
name|getValueMap
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|valueMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|oldest
init|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|valueMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|prevDocCalls
operator|.
name|clear
argument_list|()
expr_stmt|;
name|DocumentNodeState
name|state
init|=
name|doc
operator|.
name|getNodeAtRevision
argument_list|(
name|ns
argument_list|,
operator|new
name|RevisionVector
argument_list|(
name|oldest
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|PropertyState
name|prop
init|=
name|state
operator|.
name|getProperty
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
operator|(
name|long
operator|)
name|prop
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"too many calls for previous documents: "
operator|+
name|prevDocCalls
argument_list|,
name|prevDocCalls
operator|.
name|size
argument_list|()
operator|<=
literal|2
argument_list|)
expr_stmt|;
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
comment|// OAK-5207
annotation|@
name|Test
specifier|public
name|void
name|tooManyReadsOnGetVisibleChanges
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numChanges
init|=
literal|500
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|prevDocCalls
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|Utils
operator|.
name|getPathFromId
argument_list|(
name|key
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"p"
argument_list|)
condition|)
block|{
name|prevDocCalls
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|find
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|DocumentNodeStore
name|ns1
init|=
name|createTestStore
argument_list|(
name|store
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DocumentNodeStore
name|ns2
init|=
name|createTestStore
argument_list|(
name|store
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DocumentNodeStore
argument_list|>
name|nodeStores
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ns1
argument_list|,
name|ns2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RevisionVector
argument_list|>
name|headRevisions
init|=
name|Lists
operator|.
name|reverse
argument_list|(
name|createTestData
argument_list|(
name|nodeStores
argument_list|,
name|random
argument_list|,
name|numChanges
argument_list|)
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|getRootDocument
argument_list|(
name|store
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|prevDocCalls
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|value
init|=
name|doc
operator|.
name|getVisibleChanges
argument_list|(
literal|"p"
argument_list|,
name|headRevisions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|numChanges
operator|-
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"too many calls for previous documents: "
operator|+
name|prevDocCalls
argument_list|,
name|prevDocCalls
operator|.
name|size
argument_list|()
operator|<=
literal|3
argument_list|)
expr_stmt|;
block|}
name|ns1
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|ns2
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|tooManyReadsOnGetVisibleChangesWithLongRunningBranchCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numChanges
init|=
literal|843
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|prevDocCalls
init|=
name|newLinkedHashMap
argument_list|()
decl_stmt|;
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|T
name|doc
init|=
name|super
operator|.
name|find
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|Utils
operator|.
name|getPathFromId
argument_list|(
name|key
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"p"
argument_list|)
condition|)
block|{
name|prevDocCalls
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
block|}
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|DocumentNodeStore
name|ns1
init|=
name|createTestStore
argument_list|(
name|store
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DocumentNodeStore
name|ns2
init|=
name|createTestStore
argument_list|(
name|store
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DocumentNodeStore
argument_list|>
name|nodeStores
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ns1
argument_list|,
name|ns2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RevisionVector
argument_list|>
name|headRevisions
init|=
name|Lists
operator|.
name|reverse
argument_list|(
name|createTestData
argument_list|(
name|nodeStores
argument_list|,
name|random
argument_list|,
name|numChanges
argument_list|)
argument_list|)
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"q"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|int
name|numNodes
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|getRootDocument
argument_list|(
name|store
argument_list|)
operator|.
name|getValueMap
argument_list|(
literal|"q"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// write some other changes until a branch is created
name|NodeBuilder
name|child
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"n-"
operator|+
name|numNodes
operator|++
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|child
operator|.
name|setProperty
argument_list|(
literal|"p-"
operator|+
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|// do not yet merge, but create more test data
name|int
name|numMoreChanges
init|=
literal|50
decl_stmt|;
name|List
argument_list|<
name|RevisionVector
argument_list|>
name|moreRevs
init|=
name|Lists
operator|.
name|reverse
argument_list|(
name|createTestData
argument_list|(
name|nodeStores
argument_list|,
name|random
argument_list|,
name|numMoreChanges
argument_list|,
name|numChanges
argument_list|)
argument_list|)
decl_stmt|;
name|headRevisions
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|moreRevs
argument_list|,
name|headRevisions
argument_list|)
argument_list|)
expr_stmt|;
name|numChanges
operator|+=
name|numMoreChanges
expr_stmt|;
comment|// now merge the branch and update 'q'. this will split
comment|// the old value to a previous document
name|merge
argument_list|(
name|ns1
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"q"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns1
argument_list|,
name|builder
argument_list|)
expr_stmt|;
comment|// and create yet more test data
name|numMoreChanges
operator|=
literal|50
expr_stmt|;
name|moreRevs
operator|=
name|Lists
operator|.
name|reverse
argument_list|(
name|createTestData
argument_list|(
name|nodeStores
argument_list|,
name|random
argument_list|,
name|numMoreChanges
argument_list|,
name|numChanges
argument_list|)
argument_list|)
expr_stmt|;
name|headRevisions
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|moreRevs
argument_list|,
name|headRevisions
argument_list|)
argument_list|)
expr_stmt|;
name|numChanges
operator|+=
name|numMoreChanges
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|getRootDocument
argument_list|(
name|store
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|prevDocCalls
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|value
init|=
name|doc
operator|.
name|getVisibleChanges
argument_list|(
literal|"p"
argument_list|,
name|headRevisions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|numChanges
operator|-
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"too many calls for previous documents ("
operator|+
name|prevDocCalls
operator|.
name|size
argument_list|()
operator|+
literal|"): "
operator|+
name|prevDocCalls
argument_list|,
name|prevDocCalls
operator|.
name|size
argument_list|()
operator|<=
literal|10
argument_list|)
expr_stmt|;
block|}
name|ns1
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|ns2
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readsWithOverlappingPreviousDocuments
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|prevDocCalls
init|=
name|newLinkedHashMap
argument_list|()
decl_stmt|;
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|T
name|doc
init|=
name|super
operator|.
name|find
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
name|NODES
operator|&&
name|Utils
operator|.
name|getPathFromId
argument_list|(
name|key
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"p"
argument_list|)
condition|)
block|{
name|prevDocCalls
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
block|}
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|createTestStore
argument_list|(
name|store
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RevisionVector
argument_list|>
name|headRevisions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|long
name|count
init|=
literal|1000
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|test
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// maintain four other properties and update
comment|// them with different probabilities
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|4
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
name|j
operator|+
literal|1
argument_list|)
operator|==
literal|0
condition|)
block|{
name|test
operator|.
name|setProperty
argument_list|(
literal|"p"
operator|+
name|j
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|headRevisions
operator|.
name|add
argument_list|(
name|ns
operator|.
name|getHeadRevision
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
comment|// split the document
name|RevisionVector
name|head
init|=
name|ns
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|UpdateOp
name|op
range|:
name|SplitOperations
operator|.
name|forDocument
argument_list|(
name|doc
argument_list|,
name|ns
argument_list|,
name|head
argument_list|,
name|NO_BINARY
argument_list|,
literal|2
argument_list|)
control|)
block|{
name|store
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ns
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|numCalls
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// go back in time and check number of find calls
name|Collections
operator|.
name|reverse
argument_list|(
name|headRevisions
argument_list|)
expr_stmt|;
for|for
control|(
name|RevisionVector
name|rv
range|:
name|headRevisions
control|)
block|{
name|prevDocCalls
operator|.
name|clear
argument_list|()
expr_stmt|;
name|DocumentNodeState
name|s
init|=
name|doc
operator|.
name|getNodeAtRevision
argument_list|(
name|ns
argument_list|,
name|rv
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|--
name|count
argument_list|,
name|s
operator|.
name|getProperty
argument_list|(
literal|"p"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|numCalls
operator|.
name|add
argument_list|(
name|prevDocCalls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|numCalls
operator|.
name|toString
argument_list|()
argument_list|,
name|numCalls
argument_list|,
name|everyItem
argument_list|(
name|lessThan
argument_list|(
literal|43
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getVisibleChanges
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numChanges
init|=
literal|200
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|createTestStore
argument_list|(
name|numChanges
argument_list|)
decl_stmt|;
name|DocumentStore
name|store
init|=
name|ns
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|getRootDocument
argument_list|(
name|store
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|int
name|idx
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|numChanges
argument_list|)
decl_stmt|;
name|Revision
name|r
init|=
name|Iterables
operator|.
name|get
argument_list|(
name|doc
operator|.
name|getValueMap
argument_list|(
literal|"p"
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
argument_list|>
name|revs
init|=
name|doc
operator|.
name|getVisibleChanges
argument_list|(
literal|"p"
argument_list|,
operator|new
name|RevisionVector
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|idx
argument_list|,
name|numChanges
operator|-
name|Iterables
operator|.
name|size
argument_list|(
name|revs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getVisibleChangesMixedClusterIds
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numChanges
init|=
literal|200
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns1
init|=
name|createTestStore
argument_list|(
name|store
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DocumentNodeStore
name|ns2
init|=
name|createTestStore
argument_list|(
name|store
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DocumentNodeStore
argument_list|>
name|nodeStores
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ns1
argument_list|,
name|ns2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RevisionVector
argument_list|>
name|headRevisions
init|=
name|Lists
operator|.
name|reverse
argument_list|(
name|createTestData
argument_list|(
name|nodeStores
argument_list|,
name|random
argument_list|,
name|numChanges
argument_list|)
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|getRootDocument
argument_list|(
name|store
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|int
name|idx
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|numChanges
argument_list|)
decl_stmt|;
name|RevisionVector
name|r
init|=
name|headRevisions
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
argument_list|>
name|revs1
init|=
name|doc
operator|.
name|getVisibleChanges
argument_list|(
literal|"p"
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
argument_list|>
name|revs2
init|=
name|doc
operator|.
name|getVisibleChanges
argument_list|(
literal|"p"
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Iterables
operator|.
name|size
argument_list|(
name|revs1
argument_list|)
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|revs2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|idx
argument_list|,
name|numChanges
operator|-
name|Iterables
operator|.
name|size
argument_list|(
name|revs1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ns1
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|ns2
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
comment|// OAK-7593
annotation|@
name|Test
specifier|public
name|void
name|getVisibleChangesWithOverlappingRanges
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|createTestStore
argument_list|(
name|store
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|addNode
argument_list|(
name|ns
argument_list|,
literal|"/test"
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|ns
argument_list|,
literal|"/test/p"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|ns
argument_list|,
literal|"/test/p"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|ns
argument_list|,
literal|"/test/p"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|RevisionVector
name|readRev
init|=
name|ns
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|setProperty
argument_list|(
name|ns
argument_list|,
literal|"/test/q"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|ns
argument_list|,
literal|"/test/q"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|splitOps
init|=
name|SplitOperations
operator|.
name|forDocument
argument_list|(
name|doc
argument_list|,
name|ns
argument_list|,
name|ns
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
name|NO_BINARY
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splitOps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|splitOps
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|ns
argument_list|,
literal|"/test/p"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|doc
operator|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|splitOps
operator|=
name|SplitOperations
operator|.
name|forDocument
argument_list|(
name|doc
argument_list|,
name|ns
argument_list|,
name|ns
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
name|NO_BINARY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splitOps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|splitOps
argument_list|)
expr_stmt|;
name|doc
operator|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|change
range|:
name|doc
operator|.
name|getVisibleChanges
argument_list|(
literal|"p"
argument_list|,
name|readRev
argument_list|)
control|)
block|{
name|assertFalse
argument_list|(
name|readRev
operator|.
name|isRevisionNewer
argument_list|(
name|change
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|getSweepRevisions
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|NodeDocument
name|doc
init|=
operator|new
name|NodeDocument
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|RevisionVector
name|sweepRev
init|=
name|doc
operator|.
name|getSweepRevisions
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|sweepRev
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|sweepRev
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|r1
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r2
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
literal|"id"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|NodeDocument
operator|.
name|setSweepRevision
argument_list|(
name|op
argument_list|,
name|r1
argument_list|)
expr_stmt|;
name|UpdateUtils
operator|.
name|applyChanges
argument_list|(
name|doc
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|sweepRev
operator|=
name|doc
operator|.
name|getSweepRevisions
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|sweepRev
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sweepRev
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|RevisionVector
argument_list|(
name|r1
argument_list|)
argument_list|,
name|sweepRev
argument_list|)
expr_stmt|;
name|op
operator|=
operator|new
name|UpdateOp
argument_list|(
literal|"id"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setSweepRevision
argument_list|(
name|op
argument_list|,
name|r2
argument_list|)
expr_stmt|;
name|UpdateUtils
operator|.
name|applyChanges
argument_list|(
name|doc
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|sweepRev
operator|=
name|doc
operator|.
name|getSweepRevisions
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|sweepRev
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|sweepRev
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|RevisionVector
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
argument_list|,
name|sweepRev
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noPreviousDocAccessAfterSweep
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|findCalls
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|DocumentStore
name|ds
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|findCalls
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|find
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|createTestStore
argument_list|(
name|ds
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// create test nodes with the root document as commit root
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
comment|// now add many changes to the root document, which will
comment|// move the commit information to a previous document
name|createTestData
argument_list|(
name|singletonList
argument_list|(
name|ns
argument_list|)
argument_list|,
operator|new
name|Random
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|ns
operator|.
name|runBackgroundUpdateOperations
argument_list|()
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|ds
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|findCalls
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doc
operator|.
name|getNodeAtRevision
argument_list|(
name|ns
argument_list|,
name|ns
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// with an old sweep revision, there will be find calls
comment|// to look up the commit root document
name|assertTrue
argument_list|(
name|findCalls
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// run sweeper
name|ns
operator|.
name|runBackgroundSweepOperation
argument_list|()
expr_stmt|;
comment|// now number of find calls must be zero
name|doc
operator|=
name|ds
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|findCalls
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doc
operator|.
name|getNodeAtRevision
argument_list|(
name|ns
argument_list|,
name|ns
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|findCalls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|DocumentNodeStore
name|createTestStore
parameter_list|(
name|int
name|numChanges
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createTestStore
argument_list|(
operator|new
name|MemoryDocumentStore
argument_list|()
argument_list|,
literal|0
argument_list|,
name|numChanges
argument_list|)
return|;
block|}
specifier|private
name|DocumentNodeStore
name|createTestStore
parameter_list|(
name|DocumentStore
name|store
parameter_list|,
name|int
name|clusterId
parameter_list|,
name|int
name|numChanges
parameter_list|,
name|int
name|commitValueCacheSize
parameter_list|)
throws|throws
name|Exception
block|{
name|DocumentNodeStore
name|ns
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setCommitValueCacheSize
argument_list|(
name|commitValueCacheSize
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChanges
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|Math
operator|.
name|random
argument_list|()
operator|<
literal|0.2
condition|)
block|{
name|RevisionVector
name|head
init|=
name|ns
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
for|for
control|(
name|UpdateOp
name|op
range|:
name|SplitOperations
operator|.
name|forDocument
argument_list|(
name|getRootDocument
argument_list|(
name|store
argument_list|)
argument_list|,
name|ns
argument_list|,
name|head
argument_list|,
name|NO_BINARY
argument_list|,
literal|2
argument_list|)
control|)
block|{
name|store
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ns
return|;
block|}
specifier|private
name|DocumentNodeStore
name|createTestStore
parameter_list|(
name|DocumentStore
name|store
parameter_list|,
name|int
name|clusterId
parameter_list|,
name|int
name|numChanges
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createTestStore
argument_list|(
name|store
argument_list|,
name|clusterId
argument_list|,
name|numChanges
argument_list|,
literal|10000
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|RevisionVector
argument_list|>
name|createTestData
parameter_list|(
name|List
argument_list|<
name|DocumentNodeStore
argument_list|>
name|nodeStores
parameter_list|,
name|Random
name|random
parameter_list|,
name|int
name|numChanges
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
name|createTestData
argument_list|(
name|nodeStores
argument_list|,
name|random
argument_list|,
name|numChanges
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|RevisionVector
argument_list|>
name|createTestData
parameter_list|(
name|List
argument_list|<
name|DocumentNodeStore
argument_list|>
name|nodeStores
parameter_list|,
name|Random
name|random
parameter_list|,
name|int
name|numChanges
parameter_list|,
name|int
name|startValue
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|List
argument_list|<
name|RevisionVector
argument_list|>
name|headRevisions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startValue
init|;
name|i
operator|<
name|numChanges
operator|+
name|startValue
condition|;
name|i
operator|++
control|)
block|{
name|DocumentNodeStore
name|ns
init|=
name|nodeStores
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|nodeStores
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ns
operator|.
name|runBackgroundUpdateOperations
argument_list|()
expr_stmt|;
name|ns
operator|.
name|runBackgroundReadOperations
argument_list|()
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|headRevisions
operator|.
name|add
argument_list|(
name|ns
operator|.
name|getHeadRevision
argument_list|()
argument_list|)
expr_stmt|;
name|ns
operator|.
name|runBackgroundUpdateOperations
argument_list|()
expr_stmt|;
name|ns
operator|.
name|runBackgroundReadOperations
argument_list|()
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.2
condition|)
block|{
name|DocumentStore
name|store
init|=
name|ns
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|RevisionVector
name|head
init|=
name|ns
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
for|for
control|(
name|UpdateOp
name|op
range|:
name|SplitOperations
operator|.
name|forDocument
argument_list|(
name|getRootDocument
argument_list|(
name|store
argument_list|)
argument_list|,
name|ns
argument_list|,
name|head
argument_list|,
name|NO_BINARY
argument_list|,
literal|2
argument_list|)
control|)
block|{
name|store
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|headRevisions
return|;
block|}
specifier|private
name|void
name|merge
parameter_list|(
name|NodeStore
name|store
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addNode
parameter_list|(
name|NodeStore
name|store
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|root
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|builder
operator|=
name|builder
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|builder
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setProperty
parameter_list|(
name|NodeStore
name|store
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|root
decl_stmt|;
name|String
name|nodePath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|propertyName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|nodePath
argument_list|)
control|)
block|{
name|builder
operator|=
name|builder
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|builder
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

