begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|counter
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|counter
operator|.
name|ApproximateCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ApproximateCounterTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|veryHighResolution
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
operator|-
literal|100
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|ApproximateCounter
operator|.
name|calculateOffset
argument_list|(
name|i
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|ApproximateCounter
operator|.
name|calculateOffset
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|ApproximateCounter
operator|.
name|calculateOffset
argument_list|(
name|i
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|regularResolution
parameter_list|()
block|{
name|ApproximateCounter
operator|.
name|setSeed
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|long
name|result
init|=
literal|0
decl_stmt|;
name|long
name|count
init|=
literal|100000
decl_stmt|;
name|int
name|nonZero
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|long
name|offset
init|=
name|ApproximateCounter
operator|.
name|calculateOffset
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|!=
literal|0
condition|)
block|{
name|nonZero
operator|++
expr_stmt|;
name|result
operator|+=
name|offset
expr_stmt|;
block|}
block|}
comment|// most of the time, 0 needs to be returned
name|assertTrue
argument_list|(
name|nonZero
operator|<
name|count
operator|/
literal|500
argument_list|)
expr_stmt|;
comment|// the expected result is within a certain range
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|result
operator|-
name|count
argument_list|)
operator|<
name|count
operator|/
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addRemove
parameter_list|()
block|{
name|ApproximateCounter
operator|.
name|setSeed
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|long
name|result
init|=
literal|0
decl_stmt|;
name|long
name|exactResult
init|=
literal|0
decl_stmt|;
name|long
name|count
init|=
literal|100000
decl_stmt|;
name|long
name|sumChange
init|=
literal|0
decl_stmt|;
name|int
name|nonZero
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|int
name|o
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|-
literal|10
decl_stmt|;
name|exactResult
operator|+=
name|o
expr_stmt|;
name|sumChange
operator|+=
name|Math
operator|.
name|abs
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|long
name|offset
init|=
name|ApproximateCounter
operator|.
name|calculateOffset
argument_list|(
name|o
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|!=
literal|0
condition|)
block|{
name|nonZero
operator|++
expr_stmt|;
name|result
operator|+=
name|offset
expr_stmt|;
block|}
block|}
comment|// most of the time, 0 needs to be returned
name|assertTrue
argument_list|(
name|nonZero
operator|<
name|count
operator|/
literal|50
argument_list|)
expr_stmt|;
comment|// the expected result is within a certain range
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|result
operator|-
name|exactResult
argument_list|)
operator|<
name|sumChange
operator|/
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|lowResolution
parameter_list|()
block|{
name|ApproximateCounter
operator|.
name|setSeed
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|long
name|result
init|=
literal|0
decl_stmt|;
name|long
name|count
init|=
literal|100000
decl_stmt|;
name|int
name|nonZero
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|long
name|offset
init|=
name|ApproximateCounter
operator|.
name|calculateOffset
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|!=
literal|0
condition|)
block|{
name|offset
operator|=
name|ApproximateCounter
operator|.
name|adjustOffset
argument_list|(
name|result
argument_list|,
name|offset
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|offset
operator|!=
literal|0
condition|)
block|{
name|nonZero
operator|++
expr_stmt|;
name|result
operator|+=
name|offset
expr_stmt|;
block|}
block|}
comment|// most of the time, 0 needs to be returned
name|assertTrue
argument_list|(
name|nonZero
operator|<
name|count
operator|/
literal|500
argument_list|)
expr_stmt|;
comment|// the expected result is within a certain range
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|result
operator|-
name|count
argument_list|)
operator|<
name|count
operator|/
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|keepAboveZero
parameter_list|()
block|{
comment|// adjustOffset ensures that the resulting count is larger or equal to 0
name|assertEquals
argument_list|(
literal|1234
argument_list|,
name|ApproximateCounter
operator|.
name|adjustOffset
argument_list|(
operator|-
literal|1234
argument_list|,
operator|-
literal|100
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|highResolutionAdjust
parameter_list|()
block|{
comment|// adjustOffset with resolution of 1 should not affect the result
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|ApproximateCounter
operator|.
name|adjustOffset
argument_list|(
name|i
argument_list|,
literal|123
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

