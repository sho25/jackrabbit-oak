begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|configuration
operator|.
name|DefaultSolrConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|configuration
operator|.
name|OakSolrConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|configuration
operator|.
name|OakSolrConfigurationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|server
operator|.
name|SolrServerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|NodeStateNodeTypeInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryEngineSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|NodeTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|NodeTypeInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|SelectorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|FilterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|IndexRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|PropertyValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Tests for {@link SolrQueryIndex}  */
end_comment

begin_class
specifier|public
class|class
name|SolrQueryIndexTest
block|{
specifier|private
name|NodeState
name|nodeState
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|EMPTY_NODE
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|child
argument_list|(
literal|"solr"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"oak:QueryIndexDefinition"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"type"
argument_list|,
literal|"solr"
argument_list|)
operator|.
name|child
argument_list|(
literal|"server"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"solrServerType"
argument_list|,
literal|"embedded"
argument_list|)
expr_stmt|;
name|nodeState
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoIndexPlanWithNoRestrictions
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectorImpl
name|selector
init|=
name|mock
argument_list|(
name|SelectorImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|SolrQueryIndex
name|solrQueryIndex
init|=
operator|new
name|SolrQueryIndex
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
literal|""
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
name|sortOrder
init|=
operator|new
name|LinkedList
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|IndexPlan
argument_list|>
name|plans
init|=
name|solrQueryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
name|sortOrder
argument_list|,
name|nodeState
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoPlanWithPathRestrictions
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectorImpl
name|selector
init|=
name|newSelector
argument_list|(
name|nodeState
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|SolrQueryIndex
name|solrQueryIndex
init|=
operator|new
name|SolrQueryIndex
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
literal|"select * from [nt:base] as a where isdescendantnode(a, '/test')"
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictPath
argument_list|(
literal|"/test"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
name|sortOrder
init|=
operator|new
name|LinkedList
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|IndexPlan
argument_list|>
name|plans
init|=
name|solrQueryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
name|sortOrder
argument_list|,
name|nodeState
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoPlanWithOnlyPathRestrictionsEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|nodeState
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|child
argument_list|(
literal|"solr"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"pathRestrictions"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nodeState
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|SelectorImpl
name|selector
init|=
name|newSelector
argument_list|(
name|nodeState
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|SolrQueryIndex
name|solrQueryIndex
init|=
operator|new
name|SolrQueryIndex
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
literal|"select * from [nt:base] as a where isdescendantnode(a, '/test')"
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictPath
argument_list|(
literal|"/test"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
name|sortOrder
init|=
operator|new
name|LinkedList
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|IndexPlan
argument_list|>
name|plans
init|=
name|solrQueryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
name|sortOrder
argument_list|,
name|nodeState
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPlanWithPropertyAndPathRestrictionsEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|nodeState
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|child
argument_list|(
literal|"solr"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"pathRestrictions"
argument_list|,
literal|true
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propertyRestrictions"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nodeState
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|SelectorImpl
name|selector
init|=
name|newSelector
argument_list|(
name|nodeState
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|SolrQueryIndex
name|solrQueryIndex
init|=
operator|new
name|SolrQueryIndex
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
literal|"select * from [nt:base] as a where isdescendantnode(a, '/test')"
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictPath
argument_list|(
literal|"/test"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
name|sortOrder
init|=
operator|new
name|LinkedList
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|IndexPlan
argument_list|>
name|plans
init|=
name|solrQueryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
name|sortOrder
argument_list|,
name|nodeState
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoPlanWithPropertyRestrictions
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectorImpl
name|selector
init|=
name|newSelector
argument_list|(
name|nodeState
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|SolrQueryIndex
name|solrQueryIndex
init|=
operator|new
name|SolrQueryIndex
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
literal|"select * from [nt:base] as a where name = 'hello')"
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"name"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
name|sortOrder
init|=
operator|new
name|LinkedList
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|IndexPlan
argument_list|>
name|plans
init|=
name|solrQueryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
name|sortOrder
argument_list|,
name|nodeState
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPlanWithPropertyRestrictionsEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|nodeState
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|child
argument_list|(
literal|"solr"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propertyRestrictions"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nodeState
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|SelectorImpl
name|selector
init|=
name|newSelector
argument_list|(
name|nodeState
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|SolrQueryIndex
name|solrQueryIndex
init|=
operator|new
name|SolrQueryIndex
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
literal|"select * from [nt:base] as a where name = 'hello')"
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"name"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
name|sortOrder
init|=
operator|new
name|LinkedList
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|IndexPlan
argument_list|>
name|plans
init|=
name|solrQueryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
name|sortOrder
argument_list|,
name|nodeState
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoPlanWithPrimaryTypeRestrictions
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectorImpl
name|selector
init|=
name|newSelector
argument_list|(
name|nodeState
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|SolrQueryIndex
name|solrQueryIndex
init|=
operator|new
name|SolrQueryIndex
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
literal|"select * from [nt:base] as a where jcr:primaryType = 'nt:unstructured')"
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"nt:unstructured"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
name|sortOrder
init|=
operator|new
name|LinkedList
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|IndexPlan
argument_list|>
name|plans
init|=
name|solrQueryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
name|sortOrder
argument_list|,
name|nodeState
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoPlanWithOnlyPrimaryTypeRestrictionsEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|nodeState
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|child
argument_list|(
literal|"solr"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"primaryTypes"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nodeState
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|SelectorImpl
name|selector
init|=
name|newSelector
argument_list|(
name|nodeState
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|SolrQueryIndex
name|solrQueryIndex
init|=
operator|new
name|SolrQueryIndex
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
literal|"select * from [nt:base] as a where jcr:primaryType = 'nt:unstructured')"
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"nt:unstructured"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
name|sortOrder
init|=
operator|new
name|LinkedList
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|IndexPlan
argument_list|>
name|plans
init|=
name|solrQueryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
name|sortOrder
argument_list|,
name|nodeState
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPlanWithPropertyAndPrimaryTypeRestrictionsEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|nodeState
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|child
argument_list|(
literal|"solr"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propertyRestrictions"
argument_list|,
literal|true
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"primaryTypes"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nodeState
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|SelectorImpl
name|selector
init|=
name|newSelector
argument_list|(
name|nodeState
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|SolrQueryIndex
name|solrQueryIndex
init|=
operator|new
name|SolrQueryIndex
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
literal|"select * from [nt:base] as a where jcr:primaryType = 'nt:unstructured')"
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"nt:unstructured"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"name"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
name|sortOrder
init|=
operator|new
name|LinkedList
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|IndexPlan
argument_list|>
name|plans
init|=
name|solrQueryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
name|sortOrder
argument_list|,
name|nodeState
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoPlanWithPropertyRestrictionsEnabledButPropertyIgnored
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|nodeState
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|child
argument_list|(
literal|"solr"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"ignoredProperties"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propertyRestrictions"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nodeState
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|SelectorImpl
name|selector
init|=
name|newSelector
argument_list|(
name|nodeState
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|SolrQueryIndex
name|solrQueryIndex
init|=
operator|new
name|SolrQueryIndex
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
literal|"select * from [nt:base] as a where name = 'hello')"
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"name"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
name|sortOrder
init|=
operator|new
name|LinkedList
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|IndexPlan
argument_list|>
name|plans
init|=
name|solrQueryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
name|sortOrder
argument_list|,
name|nodeState
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// there's no plan matching the filter
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoPlanWithPropertyRestrictionsEnabledButNotUsedProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|nodeState
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|child
argument_list|(
literal|"solr"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"usedProperties"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propertyRestrictions"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nodeState
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|SelectorImpl
name|selector
init|=
name|newSelector
argument_list|(
name|nodeState
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|SolrQueryIndex
name|solrQueryIndex
init|=
operator|new
name|SolrQueryIndex
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
literal|"select * from [nt:base] as a where name = 'hello')"
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"name"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
name|sortOrder
init|=
operator|new
name|LinkedList
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|IndexPlan
argument_list|>
name|plans
init|=
name|solrQueryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
name|sortOrder
argument_list|,
name|nodeState
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPlanWithPropertyRestrictionsEnabledAndUsedProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|nodeState
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|child
argument_list|(
literal|"solr"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"usedProperties"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propertyRestrictions"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nodeState
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|SelectorImpl
name|selector
init|=
name|newSelector
argument_list|(
name|nodeState
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|SolrQueryIndex
name|solrQueryIndex
init|=
operator|new
name|SolrQueryIndex
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
literal|"select * from [nt:base] as a where name = 'hello')"
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"name"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
name|sortOrder
init|=
operator|new
name|LinkedList
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|IndexPlan
argument_list|>
name|plans
init|=
name|solrQueryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
name|sortOrder
argument_list|,
name|nodeState
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoPlanWithPropertyNotListedInUsedProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|nodeState
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|child
argument_list|(
literal|"solr"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"usedProperties"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propertyRestrictions"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nodeState
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|SelectorImpl
name|selector
init|=
name|newSelector
argument_list|(
name|nodeState
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|SolrQueryIndex
name|solrQueryIndex
init|=
operator|new
name|SolrQueryIndex
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
literal|"select * from [nt:base] as a where foo = 'bar')"
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
name|sortOrder
init|=
operator|new
name|LinkedList
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|IndexPlan
argument_list|>
name|plans
init|=
name|solrQueryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
name|sortOrder
argument_list|,
name|nodeState
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnion
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectorImpl
name|selector
init|=
name|mock
argument_list|(
name|SelectorImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|SolrQueryIndex
name|solrQueryIndex
init|=
operator|new
name|SolrQueryIndex
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|sqlQuery
init|=
literal|"select [jcr:path], [jcr:score], [rep:excerpt] from [nt:hierarchyNode] as a where"
operator|+
literal|" isdescendantnode(a, '/content') and contains([jcr:content/*], 'founded') union select [jcr:path],"
operator|+
literal|" [jcr:score], [rep:excerpt] from [nt:hierarchyNode] as a where isdescendantnode(a, '/content') and "
operator|+
literal|"contains([jcr:content/jcr:title], 'founded') union select [jcr:path], [jcr:score], [rep:excerpt]"
operator|+
literal|" from [nt:hierarchyNode] as a where isdescendantnode(a, '/content') and "
operator|+
literal|"contains([jcr:content/jcr:description], 'founded') order by [jcr:score] desc"
decl_stmt|;
name|FilterImpl
name|filter
init|=
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
name|sqlQuery
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
name|sortOrder
init|=
operator|new
name|LinkedList
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|IndexPlan
argument_list|>
name|plans
init|=
name|solrQueryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
name|sortOrder
argument_list|,
name|nodeState
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testSize
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|mock
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|root
operator|.
name|getNames
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|SelectorImpl
name|selector
init|=
name|newSelector
argument_list|(
name|root
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|String
name|sqlQuery
init|=
literal|"select [jcr:path], [jcr:score] from [nt:base] as a where"
operator|+
literal|" contains([jcr:content/*], 'founded')"
decl_stmt|;
name|SolrServer
name|solrServer
init|=
name|TestUtils
operator|.
name|createSolrServer
argument_list|()
decl_stmt|;
name|SolrServerProvider
name|solrServerProvider
init|=
name|mock
argument_list|(
name|SolrServerProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|OakSolrConfigurationProvider
name|configurationProvider
init|=
name|mock
argument_list|(
name|OakSolrConfigurationProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|OakSolrConfiguration
name|configuration
init|=
operator|new
name|DefaultSolrConfiguration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|useForPropertyRestrictions
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|when
argument_list|(
name|configurationProvider
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|SolrQueryIndex
name|solrQueryIndex
init|=
operator|new
name|SolrQueryIndex
argument_list|(
literal|null
argument_list|,
name|configurationProvider
argument_list|,
name|solrServerProvider
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
name|sqlQuery
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
decl_stmt|;
name|Cursor
name|cursor
init|=
name|solrQueryIndex
operator|.
name|query
argument_list|(
name|filter
argument_list|,
name|root
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|long
name|sizeExact
init|=
name|cursor
operator|.
name|getSize
argument_list|(
name|Result
operator|.
name|SizePrecision
operator|.
name|EXACT
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
name|long
name|sizeApprox
init|=
name|cursor
operator|.
name|getSize
argument_list|(
name|Result
operator|.
name|SizePrecision
operator|.
name|APPROXIMATION
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
name|long
name|sizeFastApprox
init|=
name|cursor
operator|.
name|getSize
argument_list|(
name|Result
operator|.
name|SizePrecision
operator|.
name|FAST_APPROXIMATION
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|sizeExact
operator|-
name|sizeApprox
argument_list|)
operator|<
literal|10
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|sizeExact
operator|-
name|sizeFastApprox
argument_list|)
operator|>
literal|10000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testNoMoreThanThreeSolrRequests
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|mock
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|root
operator|.
name|getNames
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|SelectorImpl
name|selector
init|=
name|newSelector
argument_list|(
name|root
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|String
name|sqlQuery
init|=
literal|"select [jcr:path], [jcr:score] from [nt:base] as a where"
operator|+
literal|" contains([jcr:content/*], 'founded')"
decl_stmt|;
name|SolrServer
name|solrServer
init|=
name|mock
argument_list|(
name|SolrServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|SolrServerProvider
name|solrServerProvider
init|=
name|mock
argument_list|(
name|SolrServerProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|solrServerProvider
operator|.
name|getSearchingSolrServer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|solrServer
argument_list|)
expr_stmt|;
name|OakSolrConfigurationProvider
name|configurationProvider
init|=
name|mock
argument_list|(
name|OakSolrConfigurationProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|OakSolrConfiguration
name|configuration
init|=
operator|new
name|DefaultSolrConfiguration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|useForPropertyRestrictions
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRows
parameter_list|()
block|{
return|return
literal|10
return|;
block|}
block|}
decl_stmt|;
name|when
argument_list|(
name|configurationProvider
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|SolrQueryIndex
name|solrQueryIndex
init|=
operator|new
name|SolrQueryIndex
argument_list|(
literal|null
argument_list|,
name|configurationProvider
argument_list|,
name|solrServerProvider
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
name|sqlQuery
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
decl_stmt|;
name|CountingResponse
name|response
init|=
operator|new
name|CountingResponse
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|solrServer
operator|.
name|query
argument_list|(
name|any
argument_list|(
name|SolrParams
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Cursor
name|cursor
init|=
name|solrQueryIndex
operator|.
name|query
argument_list|(
name|filter
argument_list|,
name|root
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
while|while
condition|(
name|cursor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IndexRow
name|row
init|=
name|cursor
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|response
operator|.
name|getCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|SelectorImpl
name|newSelector
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|NodeTypeInfoProvider
name|types
init|=
operator|new
name|NodeStateNodeTypeInfoProvider
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|NodeTypeInfo
name|type
init|=
name|types
operator|.
name|getNodeTypeInfo
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
return|return
operator|new
name|SelectorImpl
argument_list|(
name|type
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|private
class|class
name|CountingResponse
extends|extends
name|QueryResponse
block|{
specifier|private
name|int
name|counter
decl_stmt|;
specifier|public
name|CountingResponse
parameter_list|(
name|int
name|counter
parameter_list|)
block|{
name|this
operator|.
name|counter
operator|=
name|counter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SolrDocumentList
name|getResults
parameter_list|()
block|{
name|SolrDocumentList
name|results
init|=
operator|new
name|SolrDocumentList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|results
operator|.
name|add
argument_list|(
operator|new
name|SolrDocument
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|setNumFound
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
return|return
name|results
return|;
block|}
specifier|public
name|int
name|getCounter
parameter_list|()
block|{
return|return
name|counter
return|;
block|}
block|}
block|}
end_class

end_unit

