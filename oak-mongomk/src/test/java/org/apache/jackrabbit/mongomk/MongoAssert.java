begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Commit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|MongoNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|MongoCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|MongoNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|MongoSync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|util
operator|.
name|MongoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|QueryBuilder
import|;
end_import

begin_comment
comment|/**  * Assertion utilities for {@code MongoDB} tests.  */
end_comment

begin_class
specifier|public
class|class
name|MongoAssert
block|{
specifier|private
specifier|static
name|MongoNodeStore
name|nodeStore
decl_stmt|;
specifier|public
specifier|static
name|void
name|assertCommitContainsAffectedPaths
parameter_list|(
name|String
name|revisionId
parameter_list|,
name|String
modifier|...
name|expectedPaths
parameter_list|)
throws|throws
name|Exception
block|{
name|DBCollection
name|commitCollection
init|=
name|nodeStore
operator|.
name|getCommitCollection
argument_list|()
decl_stmt|;
name|DBObject
name|query
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
name|MongoCommit
operator|.
name|KEY_REVISION_ID
argument_list|)
operator|.
name|is
argument_list|(
name|MongoUtil
operator|.
name|toMongoRepresentation
argument_list|(
name|revisionId
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|MongoCommit
name|result
init|=
operator|(
name|MongoCommit
operator|)
name|commitCollection
operator|.
name|findOne
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actualPaths
init|=
name|result
operator|.
name|getAffectedPaths
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedPaths
argument_list|)
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|actualPaths
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|assertCommitExists
parameter_list|(
name|Commit
name|commit
parameter_list|)
block|{
name|DBCollection
name|commitCollection
init|=
name|nodeStore
operator|.
name|getCommitCollection
argument_list|()
decl_stmt|;
name|DBObject
name|query
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
name|MongoCommit
operator|.
name|KEY_REVISION_ID
argument_list|)
operator|.
name|is
argument_list|(
name|commit
operator|.
name|getRevisionId
argument_list|()
argument_list|)
operator|.
name|and
argument_list|(
name|MongoCommit
operator|.
name|KEY_MESSAGE
argument_list|)
operator|.
name|is
argument_list|(
name|commit
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|and
argument_list|(
name|MongoCommit
operator|.
name|KEY_PATH
argument_list|)
operator|.
name|is
argument_list|(
name|commit
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|and
argument_list|(
name|MongoCommit
operator|.
name|KEY_FAILED
argument_list|)
operator|.
name|notEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|MongoCommit
name|result
init|=
operator|(
name|MongoCommit
operator|)
name|commitCollection
operator|.
name|findOne
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|commit
operator|.
name|getDiff
argument_list|()
argument_list|,
name|result
operator|.
name|getDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|assertHeadRevision
parameter_list|(
name|long
name|revisionId
parameter_list|)
block|{
name|DBCollection
name|headCollection
init|=
name|nodeStore
operator|.
name|getSyncCollection
argument_list|()
decl_stmt|;
name|MongoSync
name|result
init|=
operator|(
name|MongoSync
operator|)
name|headCollection
operator|.
name|findOne
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|revisionId
argument_list|,
name|result
operator|.
name|getHeadRevisionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|assertNextRevision
parameter_list|(
name|long
name|revisionId
parameter_list|)
block|{
name|DBCollection
name|headCollection
init|=
name|nodeStore
operator|.
name|getSyncCollection
argument_list|()
decl_stmt|;
name|MongoSync
name|result
init|=
operator|(
name|MongoSync
operator|)
name|headCollection
operator|.
name|findOne
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|revisionId
argument_list|,
name|result
operator|.
name|getNextRevisionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|assertNodeRevisionId
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|boolean
name|exists
parameter_list|)
throws|throws
name|Exception
block|{
name|DBCollection
name|nodeCollection
init|=
name|nodeStore
operator|.
name|getNodeCollection
argument_list|()
decl_stmt|;
name|DBObject
name|query
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
name|MongoNode
operator|.
name|KEY_PATH
argument_list|)
operator|.
name|is
argument_list|(
name|path
argument_list|)
operator|.
name|and
argument_list|(
name|MongoNode
operator|.
name|KEY_REVISION_ID
argument_list|)
operator|.
name|is
argument_list|(
name|MongoUtil
operator|.
name|toMongoRepresentation
argument_list|(
name|revisionId
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|MongoNode
name|nodeMongo
init|=
operator|(
name|MongoNode
operator|)
name|nodeCollection
operator|.
name|findOne
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
condition|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nodeMongo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|nodeMongo
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|assertNodesExist
parameter_list|(
name|Node
name|expected
parameter_list|)
block|{
name|DBCollection
name|nodeCollection
init|=
name|nodeStore
operator|.
name|getNodeCollection
argument_list|()
decl_stmt|;
name|QueryBuilder
name|qb
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
name|MongoNode
operator|.
name|KEY_PATH
argument_list|)
operator|.
name|is
argument_list|(
name|expected
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|and
argument_list|(
name|MongoNode
operator|.
name|KEY_REVISION_ID
argument_list|)
operator|.
name|is
argument_list|(
name|expected
operator|.
name|getRevisionId
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|expected
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|qb
operator|.
name|and
argument_list|(
name|MongoNode
operator|.
name|KEY_PROPERTIES
operator|+
literal|"."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|is
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|DBObject
name|query
init|=
name|qb
operator|.
name|get
argument_list|()
decl_stmt|;
name|MongoNode
name|nodeMongo
init|=
operator|(
name|MongoNode
operator|)
name|nodeCollection
operator|.
name|findOne
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nodeMongo
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodeMongoChildren
init|=
name|nodeMongo
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|int
name|actual
init|=
name|nodeMongoChildren
operator|!=
literal|null
condition|?
name|nodeMongoChildren
operator|.
name|size
argument_list|()
else|:
literal|0
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getChildNodeCount
argument_list|()
argument_list|,
name|actual
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Node
argument_list|>
name|it
init|=
name|expected
operator|.
name|getChildNodeEntries
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Node
name|childNode
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNodesExist
argument_list|(
name|childNode
argument_list|)
expr_stmt|;
name|String
name|childName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|childNode
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nodeMongoChildren
operator|.
name|contains
argument_list|(
name|childName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|setNodeStore
parameter_list|(
name|MongoNodeStore
name|nodeStore
parameter_list|)
block|{
comment|// must be set prior to using this class.
name|MongoAssert
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
block|}
block|}
end_class

end_unit

