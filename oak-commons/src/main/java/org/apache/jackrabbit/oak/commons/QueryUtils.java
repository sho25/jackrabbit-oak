begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|QueryUtils
block|{
specifier|private
name|QueryUtils
parameter_list|()
block|{}
comment|/**      * Escape {@code string} for matching in jcr escaped node names      *      * @param string string to escape      * @return escaped string      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|String
name|escapeNodeName
parameter_list|(
annotation|@
name|Nonnull
name|String
name|string
parameter_list|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
name|int
name|j
decl_stmt|;
do|do
block|{
name|j
operator|=
name|string
operator|.
name|indexOf
argument_list|(
literal|'%'
argument_list|,
name|k
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|<
literal|0
condition|)
block|{
comment|// jcr escape trail
name|result
operator|.
name|append
argument_list|(
name|Text
operator|.
name|escapeIllegalJcrChars
argument_list|(
name|string
operator|.
name|substring
argument_list|(
name|k
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|j
operator|>
literal|0
operator|&&
name|string
operator|.
name|charAt
argument_list|(
name|j
operator|-
literal|1
argument_list|)
operator|==
literal|'\\'
condition|)
block|{
comment|// literal occurrence of % -> jcr escape
name|result
operator|.
name|append
argument_list|(
name|Text
operator|.
name|escapeIllegalJcrChars
argument_list|(
name|string
operator|.
name|substring
argument_list|(
name|k
argument_list|,
name|j
argument_list|)
operator|+
literal|'%'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// wildcard occurrence of % -> jcr escape all but %
name|result
operator|.
name|append
argument_list|(
name|Text
operator|.
name|escapeIllegalJcrChars
argument_list|(
name|string
operator|.
name|substring
argument_list|(
name|k
argument_list|,
name|j
argument_list|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'%'
argument_list|)
expr_stmt|;
block|}
name|k
operator|=
name|j
operator|+
literal|1
expr_stmt|;
block|}
do|while
condition|(
name|j
operator|>=
literal|0
condition|)
do|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
specifier|public
specifier|static
name|String
name|escapeForQuery
parameter_list|(
annotation|@
name|Nonnull
name|String
name|value
parameter_list|)
block|{
name|StringBuilder
name|ret
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|value
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
literal|"\\\\"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\''
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
literal|"''"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

