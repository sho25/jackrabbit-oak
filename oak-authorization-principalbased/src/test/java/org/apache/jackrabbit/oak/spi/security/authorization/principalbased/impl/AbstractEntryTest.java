begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProviderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|Restriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBitsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|NT_REP_POLICY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|NT_REP_RESTRICTIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|REP_GLOB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|REP_NT_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_class
specifier|public
class|class
name|AbstractEntryTest
extends|extends
name|AbstractPrincipalBasedTest
block|{
specifier|private
name|PrivilegeBitsProvider
name|bitsProvider
decl_stmt|;
specifier|private
name|AbstractEntry
name|entryA
decl_stmt|;
specifier|private
name|AbstractEntry
name|entryB
decl_stmt|;
specifier|private
name|Restriction
name|restriction
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|this
operator|.
name|bitsProvider
operator|=
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|ValueFactory
name|vf
init|=
name|getValueFactory
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|RestrictionProvider
name|rp
init|=
operator|new
name|RestrictionProviderImpl
argument_list|()
decl_stmt|;
name|Restriction
name|r
init|=
name|rp
operator|.
name|createRestriction
argument_list|(
name|TEST_OAK_PATH
argument_list|,
name|REP_NT_NAMES
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrName
argument_list|(
name|NT_OAK_UNSTRUCTURED
argument_list|)
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
argument_list|)
decl_stmt|;
name|Principal
name|principal
init|=
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|entryA
operator|=
operator|new
name|TestEntry
argument_list|(
name|TEST_OAK_PATH
argument_list|,
name|principal
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|)
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|entryB
operator|=
operator|new
name|TestEntry
argument_list|(
literal|null
argument_list|,
name|principal
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_NODE_TYPE_DEFINITION_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|restriction
operator|=
name|rp
operator|.
name|createRestriction
argument_list|(
name|entryA
operator|.
name|getOakPath
argument_list|()
argument_list|,
name|REP_GLOB
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCode
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotEquals
argument_list|(
name|entryA
operator|.
name|hashCode
argument_list|()
argument_list|,
name|entryB
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// same entry -> same hash
name|assertEquals
argument_list|(
name|entryA
operator|.
name|hashCode
argument_list|()
argument_list|,
name|entryA
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// equivalent entry -> same hash
name|assertEquals
argument_list|(
name|entryA
operator|.
name|hashCode
argument_list|()
argument_list|,
operator|new
name|TestEntry
argument_list|(
name|entryA
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entryB
operator|.
name|hashCode
argument_list|()
argument_list|,
operator|new
name|TestEntry
argument_list|(
name|entryB
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// different restrictions -> different hash
name|AbstractEntry
name|differentRestriction
init|=
operator|new
name|TestEntry
argument_list|(
name|entryA
operator|.
name|getOakPath
argument_list|()
argument_list|,
name|entryA
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|entryA
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|,
name|restriction
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|entryA
operator|.
name|hashCode
argument_list|()
argument_list|,
name|differentRestriction
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// different path -> different hash
name|AbstractEntry
name|differentPath
init|=
operator|new
name|TestEntry
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|entryA
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|entryA
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|,
name|entryA
operator|.
name|getRestrictions
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Restriction
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|entryA
operator|.
name|hashCode
argument_list|()
argument_list|,
name|differentPath
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// different path -> different hash
name|AbstractEntry
name|differentPrincipal
init|=
operator|new
name|TestEntry
argument_list|(
name|entryB
operator|.
name|getOakPath
argument_list|()
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|entryB
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|,
name|entryB
operator|.
name|getRestrictions
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Restriction
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|entryB
operator|.
name|hashCode
argument_list|()
argument_list|,
name|differentPath
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// different path -> different hash
name|AbstractEntry
name|differentPrivs
init|=
operator|new
name|TestEntry
argument_list|(
name|entryB
operator|.
name|getOakPath
argument_list|()
argument_list|,
name|entryB
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|,
name|entryB
operator|.
name|getRestrictions
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Restriction
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|entryB
operator|.
name|hashCode
argument_list|()
argument_list|,
name|differentPrivs
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotEquals
argument_list|(
name|entryA
argument_list|,
name|entryB
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|entryB
argument_list|,
name|entryA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entryA
argument_list|,
name|entryA
argument_list|)
expr_stmt|;
comment|// equivalent entry -> equals
name|assertEquals
argument_list|(
name|entryA
argument_list|,
operator|new
name|TestEntry
argument_list|(
name|entryA
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entryB
argument_list|,
operator|new
name|TestEntry
argument_list|(
name|entryB
argument_list|)
argument_list|)
expr_stmt|;
comment|// different restrictions -> different hash
name|AbstractEntry
name|differentRestriction
init|=
operator|new
name|TestEntry
argument_list|(
name|entryA
operator|.
name|getOakPath
argument_list|()
argument_list|,
name|entryA
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|entryA
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|,
name|restriction
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|entryA
argument_list|,
name|differentRestriction
argument_list|)
expr_stmt|;
comment|// different path -> different hash
name|AbstractEntry
name|differentPath
init|=
operator|new
name|TestEntry
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|entryA
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|entryA
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|,
name|entryA
operator|.
name|getRestrictions
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Restriction
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|entryA
argument_list|,
name|differentPath
argument_list|)
expr_stmt|;
comment|// different path -> different hash
name|AbstractEntry
name|differentPrincipal
init|=
operator|new
name|TestEntry
argument_list|(
name|entryB
operator|.
name|getOakPath
argument_list|()
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|entryB
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|,
name|entryB
operator|.
name|getRestrictions
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Restriction
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|entryB
argument_list|,
name|differentPath
argument_list|)
expr_stmt|;
comment|// different path -> different hash
name|AbstractEntry
name|differentPrivs
init|=
operator|new
name|TestEntry
argument_list|(
name|entryB
operator|.
name|getOakPath
argument_list|()
argument_list|,
name|entryB
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|,
name|entryB
operator|.
name|getRestrictions
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Restriction
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|entryB
argument_list|,
name|differentPrivs
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
class|class
name|TestEntry
extends|extends
name|AbstractEntry
block|{
name|TestEntry
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|NotNull
name|Principal
name|principal
parameter_list|,
annotation|@
name|NotNull
name|PrivilegeBits
name|privilegeBits
parameter_list|,
annotation|@
name|NotNull
name|Restriction
modifier|...
name|restrictions
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|super
argument_list|(
name|oakPath
argument_list|,
name|principal
argument_list|,
name|privilegeBits
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|restrictions
argument_list|)
argument_list|,
name|AbstractEntryTest
operator|.
name|this
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TestEntry
parameter_list|(
annotation|@
name|NotNull
name|AbstractEntry
name|base
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|super
argument_list|(
name|base
operator|.
name|getOakPath
argument_list|()
argument_list|,
name|base
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|base
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|,
name|base
operator|.
name|getRestrictions
argument_list|()
argument_list|,
name|AbstractEntryTest
operator|.
name|this
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|NotNull
name|NamePathMapper
name|getNamePathMapper
parameter_list|()
block|{
return|return
name|AbstractEntryTest
operator|.
name|this
operator|.
name|getNamePathMapper
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getPrivileges
parameter_list|()
block|{
try|try
block|{
return|return
name|privilegesFromNames
argument_list|(
name|bitsProvider
operator|.
name|getPrivilegeNames
argument_list|(
name|getPrivilegeBits
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

