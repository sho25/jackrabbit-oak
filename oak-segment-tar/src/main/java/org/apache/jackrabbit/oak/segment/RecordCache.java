begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|// FIXME OAK-4277: Finalise de-duplication caches
end_comment

begin_comment
comment|// implement configuration, monitoring and management
end_comment

begin_comment
comment|// add unit tests
end_comment

begin_comment
comment|// document, nullability
end_comment

begin_class
specifier|public
class|class
name|RecordCache
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|T
argument_list|,
name|RecordId
argument_list|>
name|records
decl_stmt|;
specifier|public
specifier|static
specifier|final
parameter_list|<
name|T
parameter_list|>
name|Supplier
argument_list|<
name|RecordCache
argument_list|<
name|T
argument_list|>
argument_list|>
name|factory
parameter_list|(
specifier|final
name|int
name|size
parameter_list|)
block|{
return|return
operator|new
name|Supplier
argument_list|<
name|RecordCache
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RecordCache
argument_list|<
name|T
argument_list|>
name|get
parameter_list|()
block|{
return|return
operator|new
name|RecordCache
argument_list|<>
argument_list|(
name|size
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
specifier|final
parameter_list|<
name|T
parameter_list|>
name|Supplier
argument_list|<
name|RecordCache
argument_list|<
name|T
argument_list|>
argument_list|>
name|empty
parameter_list|()
block|{
return|return
operator|new
name|Supplier
argument_list|<
name|RecordCache
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RecordCache
argument_list|<
name|T
argument_list|>
name|get
parameter_list|()
block|{
return|return
operator|new
name|RecordCache
argument_list|<
name|T
argument_list|>
argument_list|(
literal|0
argument_list|)
block|{
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|put
parameter_list|(
name|T
name|key
parameter_list|,
name|RecordId
name|value
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
specifier|synchronized
name|RecordId
name|get
parameter_list|(
name|T
name|key
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
specifier|public
name|RecordCache
parameter_list|(
specifier|final
name|int
name|size
parameter_list|)
block|{
name|records
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|T
argument_list|,
name|RecordId
argument_list|>
argument_list|(
name|size
operator|*
literal|4
operator|/
literal|3
argument_list|,
literal|0.75f
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|T
argument_list|,
name|RecordId
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|>=
name|size
return|;
block|}
block|}
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|put
parameter_list|(
name|T
name|key
parameter_list|,
name|RecordId
name|value
parameter_list|)
block|{
name|records
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|RecordId
name|get
parameter_list|(
name|T
name|key
parameter_list|)
block|{
return|return
name|records
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
end_class

end_unit

