begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ObserverTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_class
specifier|public
class|class
name|ObserverTrackerTest
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|Observer
argument_list|>
name|observers
init|=
name|newHashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Observable
name|observable
init|=
operator|new
name|Observable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Closeable
name|addObserver
parameter_list|(
specifier|final
name|Observer
name|observer
parameter_list|)
block|{
name|observers
operator|.
name|add
argument_list|(
name|observer
argument_list|)
expr_stmt|;
return|return
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
operator|!
name|observers
operator|.
name|remove
argument_list|(
name|observer
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Already closed"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|ObserverTracker
name|tracker
init|=
operator|new
name|ObserverTracker
argument_list|(
name|observable
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ServiceReference
name|ref1
init|=
name|mock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Observer
name|observer1
init|=
name|mock
argument_list|(
name|Observer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ServiceReference
name|ref2
init|=
name|mock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Observer
name|observer2
init|=
name|mock
argument_list|(
name|Observer
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|BundleContext
name|bundleContext
init|=
name|mock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|bundleContext
operator|.
name|getService
argument_list|(
name|ref1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|observer1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|bundleContext
operator|.
name|getService
argument_list|(
name|ref2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|observer2
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|start
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|tracker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|registerUnregister
parameter_list|()
block|{
name|tracker
operator|.
name|addingService
argument_list|(
name|ref1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|observer1
argument_list|)
argument_list|,
name|observers
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addingService
argument_list|(
name|ref2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|observer1
argument_list|,
name|observer2
argument_list|)
argument_list|,
name|observers
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|removedService
argument_list|(
name|ref1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|observer2
argument_list|)
argument_list|,
name|observers
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|removedService
argument_list|(
name|ref2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|observers
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|registerTwice
parameter_list|()
block|{
name|tracker
operator|.
name|addingService
argument_list|(
name|ref1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|observer1
argument_list|)
argument_list|,
name|observers
argument_list|)
expr_stmt|;
comment|// Adding an already added service should have no effect
name|tracker
operator|.
name|addingService
argument_list|(
name|ref1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|observer1
argument_list|)
argument_list|,
name|observers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|unregisterWhenEmpty
parameter_list|()
block|{
name|tracker
operator|.
name|removedService
argument_list|(
name|ref1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|observers
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|unregisterTwice
parameter_list|()
block|{
name|tracker
operator|.
name|addingService
argument_list|(
name|ref1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|observer1
argument_list|)
argument_list|,
name|observers
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|removedService
argument_list|(
name|ref1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|observers
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Removing a removed service should have no effect
name|tracker
operator|.
name|removedService
argument_list|(
name|ref1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|observers
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

