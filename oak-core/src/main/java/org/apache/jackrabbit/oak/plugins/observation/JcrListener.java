begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_ADDED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_MOVED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_REMOVED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PROPERTY_ADDED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PROPERTY_CHANGED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PROPERTY_REMOVED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|AbstractTree
operator|.
name|OAK_CHILD_ORDER
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|ImmutableTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|EventIterable
operator|.
name|IterableListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * TODO JcrListener...  */
end_comment

begin_class
class|class
name|JcrListener
implements|implements
name|IterableListener
argument_list|<
name|Event
argument_list|>
block|{
specifier|private
specifier|final
name|EventContext
name|context
decl_stmt|;
specifier|private
specifier|final
name|ImmutableTree
name|beforeTree
decl_stmt|;
specifier|private
specifier|final
name|ImmutableTree
name|afterTree
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Event
argument_list|>
name|events
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|JcrListener
parameter_list|(
name|EventContext
name|context
parameter_list|,
name|ImmutableTree
name|beforeTree
parameter_list|,
name|ImmutableTree
name|afterTree
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|beforeTree
operator|=
name|beforeTree
expr_stmt|;
name|this
operator|.
name|afterTree
operator|=
name|afterTree
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
name|events
operator|.
name|add
argument_list|(
operator|new
name|EventImpl
argument_list|(
name|context
argument_list|,
name|PROPERTY_ADDED
argument_list|,
name|afterTree
argument_list|,
name|after
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|events
operator|.
name|add
argument_list|(
operator|new
name|EventImpl
argument_list|(
name|context
argument_list|,
name|PROPERTY_CHANGED
argument_list|,
name|afterTree
argument_list|,
name|after
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
name|events
operator|.
name|add
argument_list|(
operator|new
name|EventImpl
argument_list|(
name|context
argument_list|,
name|PROPERTY_REMOVED
argument_list|,
name|beforeTree
argument_list|,
name|before
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|events
operator|.
name|add
argument_list|(
operator|new
name|EventImpl
argument_list|(
name|context
argument_list|,
name|NODE_ADDED
argument_list|,
operator|new
name|ImmutableTree
argument_list|(
name|afterTree
argument_list|,
name|name
argument_list|,
name|after
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|detectReorder
argument_list|(
name|name
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
name|events
operator|.
name|add
argument_list|(
operator|new
name|EventImpl
argument_list|(
name|context
argument_list|,
name|NODE_REMOVED
argument_list|,
operator|new
name|ImmutableTree
argument_list|(
name|beforeTree
argument_list|,
name|name
argument_list|,
name|before
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeMoved
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|moved
parameter_list|)
block|{
name|String
name|destPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|afterTree
operator|.
name|getPath
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"srcAbsPath"
argument_list|,
name|context
operator|.
name|getJcrPath
argument_list|(
name|sourcePath
argument_list|)
argument_list|,
literal|"destAbsPath"
argument_list|,
name|context
operator|.
name|getJcrPath
argument_list|(
name|destPath
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableTree
name|tree
init|=
operator|new
name|ImmutableTree
argument_list|(
name|afterTree
argument_list|,
name|name
argument_list|,
name|moved
argument_list|)
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
operator|new
name|EventImpl
argument_list|(
name|context
argument_list|,
name|NODE_MOVED
argument_list|,
name|tree
argument_list|,
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|JcrListener
name|create
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
return|return
operator|new
name|JcrListener
argument_list|(
name|context
argument_list|,
operator|new
name|ImmutableTree
argument_list|(
name|beforeTree
argument_list|,
name|name
argument_list|,
name|before
argument_list|)
argument_list|,
operator|new
name|ImmutableTree
argument_list|(
name|afterTree
argument_list|,
name|name
argument_list|,
name|after
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Event
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|events
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
name|void
name|detectReorder
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|afterNames
init|=
name|newArrayList
argument_list|(
name|after
operator|.
name|getNames
argument_list|(
name|OAK_CHILD_ORDER
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|beforeNames
init|=
name|newArrayList
argument_list|(
name|before
operator|.
name|getNames
argument_list|(
name|OAK_CHILD_ORDER
argument_list|)
argument_list|)
decl_stmt|;
name|afterNames
operator|.
name|retainAll
argument_list|(
name|beforeNames
argument_list|)
expr_stmt|;
name|beforeNames
operator|.
name|retainAll
argument_list|(
name|afterNames
argument_list|)
expr_stmt|;
name|ImmutableTree
name|parent
init|=
operator|new
name|ImmutableTree
argument_list|(
name|afterTree
argument_list|,
name|name
argument_list|,
name|after
argument_list|)
decl_stmt|;
comment|// Selection sort beforeNames into afterNames recording the swaps as we go
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|afterNames
operator|.
name|size
argument_list|()
condition|;
name|a
operator|++
control|)
block|{
name|String
name|afterName
init|=
name|afterNames
operator|.
name|get
argument_list|(
name|a
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|b
init|=
name|a
init|;
name|b
operator|<
name|beforeNames
operator|.
name|size
argument_list|()
condition|;
name|b
operator|++
control|)
block|{
name|String
name|beforeName
init|=
name|beforeNames
operator|.
name|get
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
name|b
operator|&&
name|beforeName
operator|.
name|equals
argument_list|(
name|afterName
argument_list|)
condition|)
block|{
name|beforeNames
operator|.
name|set
argument_list|(
name|b
argument_list|,
name|beforeNames
operator|.
name|get
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|beforeNames
operator|.
name|set
argument_list|(
name|a
argument_list|,
name|beforeName
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"srcChildRelPath"
argument_list|,
name|context
operator|.
name|getJcrName
argument_list|(
name|beforeNames
operator|.
name|get
argument_list|(
name|a
argument_list|)
argument_list|)
argument_list|,
literal|"destChildRelPath"
argument_list|,
name|context
operator|.
name|getJcrName
argument_list|(
name|beforeNames
operator|.
name|get
argument_list|(
name|a
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableTree
name|tree
init|=
name|parent
operator|.
name|getChild
argument_list|(
name|afterName
argument_list|)
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
operator|new
name|EventImpl
argument_list|(
name|context
argument_list|,
name|NODE_MOVED
argument_list|,
name|tree
argument_list|,
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

