begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|CountingInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|io
operator|.
name|LazyInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdateCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|fulltext
operator|.
name|ExtractedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|fulltext
operator|.
name|ExtractedText
operator|.
name|ExtractionResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|Aggregate
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|BlobByteSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoubleDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoubleField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|sortedset
operator|.
name|SortedSetDocValuesFacetField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PrefixQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|WriteOutContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_DATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|concat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|FieldFactory
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TermFactory
operator|.
name|newPathTerm
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|ConfigUtil
operator|.
name|getPrimaryTypeName
import|;
end_import

begin_comment
comment|/**  * {@link IndexEditor} implementation that is responsible for keeping the  * {@link LuceneIndex} up to date  *  * @see LuceneIndex  */
end_comment

begin_class
specifier|public
class|class
name|LuceneIndexEditor
implements|implements
name|IndexEditor
implements|,
name|Aggregate
operator|.
name|AggregateRoot
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LuceneIndexEditor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|TEXT_EXTRACTION_ERROR
init|=
literal|"TextExtractionError"
decl_stmt|;
specifier|private
specifier|final
name|LuceneIndexEditorContext
name|context
decl_stmt|;
comment|/** Name of this node, or {@code null} for the root node. */
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|/** Parent editor or {@code null} if this is the root editor. */
specifier|private
specifier|final
name|LuceneIndexEditor
name|parent
decl_stmt|;
comment|/** Path of this editor, built lazily in {@link #getPath()}. */
specifier|private
name|String
name|path
decl_stmt|;
specifier|private
name|boolean
name|propertiesChanged
init|=
literal|false
decl_stmt|;
specifier|private
name|List
argument_list|<
name|PropertyState
argument_list|>
name|propertiesModified
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|root
decl_stmt|;
comment|/**      * Flag indicating if the current tree being traversed has a deleted parent.      */
specifier|private
specifier|final
name|boolean
name|isDeleted
decl_stmt|;
specifier|private
name|Tree
name|afterTree
decl_stmt|;
specifier|private
name|Tree
name|beforeTree
decl_stmt|;
specifier|private
name|IndexDefinition
operator|.
name|IndexingRule
name|indexingRule
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Matcher
argument_list|>
name|currentMatchers
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|MatcherState
name|matcherState
decl_stmt|;
specifier|private
specifier|final
name|PathFilter
operator|.
name|Result
name|pathFilterResult
decl_stmt|;
name|LuceneIndexEditor
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|NodeBuilder
name|definition
parameter_list|,
name|IndexUpdateCallback
name|updateCallback
parameter_list|,
annotation|@
name|Nullable
name|IndexCopier
name|indexCopier
parameter_list|,
name|ExtractedTextCache
name|extractedTextCache
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|this
operator|.
name|parent
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|path
operator|=
literal|"/"
expr_stmt|;
name|this
operator|.
name|context
operator|=
operator|new
name|LuceneIndexEditorContext
argument_list|(
name|root
argument_list|,
name|definition
argument_list|,
name|updateCallback
argument_list|,
name|indexCopier
argument_list|,
name|extractedTextCache
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|isDeleted
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|matcherState
operator|=
name|MatcherState
operator|.
name|NONE
expr_stmt|;
name|this
operator|.
name|pathFilterResult
operator|=
name|context
operator|.
name|getDefinition
argument_list|()
operator|.
name|getPathFilter
argument_list|()
operator|.
name|filter
argument_list|(
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|LuceneIndexEditor
parameter_list|(
name|LuceneIndexEditor
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|MatcherState
name|matcherState
parameter_list|,
name|PathFilter
operator|.
name|Result
name|pathFilterResult
parameter_list|,
name|boolean
name|isDeleted
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|path
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|parent
operator|.
name|context
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|parent
operator|.
name|root
expr_stmt|;
name|this
operator|.
name|isDeleted
operator|=
name|isDeleted
expr_stmt|;
name|this
operator|.
name|matcherState
operator|=
name|matcherState
expr_stmt|;
name|this
operator|.
name|pathFilterResult
operator|=
name|pathFilterResult
expr_stmt|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
comment|//TODO Use the tree instance to determine path
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
comment|// => parent != null
name|path
operator|=
name|concat
argument_list|(
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|enter
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|EmptyNodeState
operator|.
name|MISSING_NODE
operator|==
name|before
operator|&&
name|parent
operator|==
literal|null
condition|)
block|{
name|context
operator|.
name|enableReindexMode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|afterTree
operator|=
name|TreeFactory
operator|.
name|createReadOnlyTree
argument_list|(
name|after
argument_list|)
expr_stmt|;
name|beforeTree
operator|=
name|TreeFactory
operator|.
name|createReadOnlyTree
argument_list|(
name|before
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|afterTree
operator|=
name|parent
operator|.
name|afterTree
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|beforeTree
operator|=
name|parent
operator|.
name|beforeTree
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|//Only check for indexing if the result is include.
comment|//In case like TRAVERSE nothing needs to be indexed for those
comment|//path
if|if
condition|(
name|pathFilterResult
operator|==
name|PathFilter
operator|.
name|Result
operator|.
name|INCLUDE
condition|)
block|{
comment|//For traversal in deleted sub tree before state has to be used
name|Tree
name|current
init|=
name|afterTree
operator|.
name|exists
argument_list|()
condition|?
name|afterTree
else|:
name|beforeTree
decl_stmt|;
name|indexingRule
operator|=
name|getDefinition
argument_list|()
operator|.
name|getApplicableIndexingRule
argument_list|(
name|current
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexingRule
operator|!=
literal|null
condition|)
block|{
name|currentMatchers
operator|=
name|indexingRule
operator|.
name|getAggregate
argument_list|()
operator|.
name|createMatchers
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|leave
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|propertiesChanged
operator|||
operator|!
name|before
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|addOrUpdate
argument_list|(
name|path
argument_list|,
name|after
argument_list|,
name|before
operator|.
name|exists
argument_list|()
argument_list|)
condition|)
block|{
name|long
name|indexed
init|=
name|context
operator|.
name|incIndexedNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexed
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] => Indexed {} nodes..."
argument_list|,
name|getIndexName
argument_list|()
argument_list|,
name|indexed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Matcher
name|m
range|:
name|matcherState
operator|.
name|affectedMatchers
control|)
block|{
name|m
operator|.
name|markRootDirty
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|context
operator|.
name|closeWriter
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Lucene"
argument_list|,
literal|4
argument_list|,
literal|"Failed to close the Lucene index"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|context
operator|.
name|getIndexedNodes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] => Indexed {} nodes, done."
argument_list|,
name|getIndexName
argument_list|()
argument_list|,
name|context
operator|.
name|getIndexedNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
name|markPropertyChanged
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|checkAggregates
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|markPropertyChanged
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|propertiesModified
operator|.
name|add
argument_list|(
name|before
argument_list|)
expr_stmt|;
name|checkAggregates
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
name|markPropertyChanged
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|propertiesModified
operator|.
name|add
argument_list|(
name|before
argument_list|)
expr_stmt|;
name|checkAggregates
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|PathFilter
operator|.
name|Result
name|filterResult
init|=
name|getPathFilterResult
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterResult
operator|!=
name|PathFilter
operator|.
name|Result
operator|.
name|EXCLUDE
condition|)
block|{
return|return
operator|new
name|LuceneIndexEditor
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|getMatcherState
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
argument_list|,
name|filterResult
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|PathFilter
operator|.
name|Result
name|filterResult
init|=
name|getPathFilterResult
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterResult
operator|!=
name|PathFilter
operator|.
name|Result
operator|.
name|EXCLUDE
condition|)
block|{
return|return
operator|new
name|LuceneIndexEditor
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|getMatcherState
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
argument_list|,
name|filterResult
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|PathFilter
operator|.
name|Result
name|filterResult
init|=
name|getPathFilterResult
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterResult
operator|==
name|PathFilter
operator|.
name|Result
operator|.
name|EXCLUDE
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|isDeleted
condition|)
block|{
comment|// tree deletion is handled on the parent node
name|String
name|path
init|=
name|concat
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
try|try
block|{
name|IndexWriter
name|writer
init|=
name|context
operator|.
name|getWriter
argument_list|()
decl_stmt|;
comment|// Remove all index entries in the removed subtree
name|writer
operator|.
name|deleteDocuments
argument_list|(
name|newPathTerm
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
name|newPathTerm
argument_list|(
name|path
operator|+
literal|"/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|indexUpdate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Lucene"
argument_list|,
literal|5
argument_list|,
literal|"Failed to remove the index entries of"
operator|+
literal|" the removed subtree "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|MatcherState
name|ms
init|=
name|getMatcherState
argument_list|(
name|name
argument_list|,
name|before
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|LuceneIndexEditor
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|ms
argument_list|,
name|filterResult
argument_list|,
literal|true
argument_list|)
return|;
block|}
return|return
literal|null
return|;
comment|// no need to recurse down the removed subtree
block|}
specifier|private
name|boolean
name|addOrUpdate
parameter_list|(
name|String
name|path
parameter_list|,
name|NodeState
name|state
parameter_list|,
name|boolean
name|isUpdate
parameter_list|)
throws|throws
name|CommitFailedException
block|{
try|try
block|{
name|Document
name|d
init|=
name|makeDocument
argument_list|(
name|path
argument_list|,
name|state
argument_list|,
name|isUpdate
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"[{}] Indexed document for {} is {}"
argument_list|,
name|getIndexName
argument_list|()
argument_list|,
name|path
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|indexUpdate
argument_list|()
expr_stmt|;
name|context
operator|.
name|getWriter
argument_list|()
operator|.
name|updateDocument
argument_list|(
name|newPathTerm
argument_list|(
name|path
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Lucene"
argument_list|,
literal|3
argument_list|,
literal|"Failed to index the node "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ie
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to index the node [{}]"
argument_list|,
name|path
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|Document
name|makeDocument
parameter_list|(
name|String
name|path
parameter_list|,
name|NodeState
name|state
parameter_list|,
name|boolean
name|isUpdate
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isIndexable
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|boolean
name|facet
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|Field
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PropertyState
name|property
range|:
name|state
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|pname
init|=
name|property
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isVisible
argument_list|(
name|pname
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|PropertyDefinition
name|pd
init|=
name|indexingRule
operator|.
name|getConfig
argument_list|(
name|pname
argument_list|)
decl_stmt|;
if|if
condition|(
name|pd
operator|==
literal|null
operator|||
operator|!
name|pd
operator|.
name|index
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|pd
operator|.
name|ordered
condition|)
block|{
name|dirty
operator||=
name|addTypedOrderedFields
argument_list|(
name|fields
argument_list|,
name|property
argument_list|,
name|pname
argument_list|,
name|pd
argument_list|)
expr_stmt|;
block|}
name|dirty
operator||=
name|indexProperty
argument_list|(
name|path
argument_list|,
name|fields
argument_list|,
name|state
argument_list|,
name|property
argument_list|,
name|pname
argument_list|,
name|pd
argument_list|)
expr_stmt|;
name|facet
operator||=
name|pd
operator|.
name|facet
expr_stmt|;
block|}
name|dirty
operator||=
name|indexAggregates
argument_list|(
name|path
argument_list|,
name|fields
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|dirty
operator||=
name|indexNullCheckEnabledProps
argument_list|(
name|path
argument_list|,
name|fields
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|dirty
operator||=
name|indexNotNullCheckEnabledProps
argument_list|(
name|path
argument_list|,
name|fields
argument_list|,
name|state
argument_list|)
expr_stmt|;
comment|// Check if a node having a single property was modified/deleted
if|if
condition|(
operator|!
name|dirty
condition|)
block|{
name|dirty
operator|=
name|indexIfSinglePropertyRemoved
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isUpdate
operator|&&
operator|!
name|dirty
condition|)
block|{
comment|// updated the state but had no relevant changes
return|return
literal|null
return|;
block|}
name|String
name|name
init|=
name|getName
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexingRule
operator|.
name|isNodeNameIndexed
argument_list|()
condition|)
block|{
name|addNodeNameField
argument_list|(
name|fields
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
comment|//For property index no use making an empty document if
comment|//none of the properties are indexed
if|if
condition|(
operator|!
name|indexingRule
operator|.
name|indexesAllNodesOfMatchingType
argument_list|()
operator|&&
operator|!
name|dirty
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
name|newPathField
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexingRule
operator|.
name|isFulltextEnabled
argument_list|()
condition|)
block|{
name|document
operator|.
name|add
argument_list|(
name|newFulltextField
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDefinition
argument_list|()
operator|.
name|evaluatePathRestrictions
argument_list|()
condition|)
block|{
name|document
operator|.
name|add
argument_list|(
name|newAncestorsField
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|newDepthField
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// because of LUCENE-5833 we have to merge the suggest fields into a single one
name|Field
name|suggestField
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|fields
control|)
block|{
if|if
condition|(
name|FieldNames
operator|.
name|SUGGEST
operator|.
name|equals
argument_list|(
name|f
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|suggestField
operator|==
literal|null
condition|)
block|{
name|suggestField
operator|=
name|FieldFactory
operator|.
name|newSuggestField
argument_list|(
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|suggestField
operator|=
name|FieldFactory
operator|.
name|newSuggestField
argument_list|(
name|suggestField
operator|.
name|stringValue
argument_list|()
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|document
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|suggestField
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|add
argument_list|(
name|suggestField
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|facet
condition|)
block|{
name|document
operator|=
name|context
operator|.
name|getFacetsConfig
argument_list|()
operator|.
name|build
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
comment|//TODO Boost at document level
return|return
name|document
return|;
block|}
specifier|private
name|boolean
name|addFacetFields
parameter_list|(
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|,
name|PropertyState
name|property
parameter_list|,
name|String
name|pname
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
name|String
name|facetFieldName
init|=
name|FieldNames
operator|.
name|createFacetFieldName
argument_list|(
name|pname
argument_list|)
decl_stmt|;
name|context
operator|.
name|getFacetsConfig
argument_list|()
operator|.
name|setIndexFieldName
argument_list|(
name|pname
argument_list|,
name|facetFieldName
argument_list|)
expr_stmt|;
name|int
name|tag
init|=
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
decl_stmt|;
name|int
name|idxDefinedTag
init|=
name|pd
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// Try converting type to the defined type in the index definition
if|if
condition|(
name|tag
operator|!=
name|idxDefinedTag
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] Facet property defined with type {} differs from property {} with type {} in "
operator|+
literal|"path {}"
argument_list|,
name|getIndexName
argument_list|()
argument_list|,
name|Type
operator|.
name|fromTag
argument_list|(
name|idxDefinedTag
argument_list|,
literal|false
argument_list|)
argument_list|,
name|property
operator|.
name|toString
argument_list|()
argument_list|,
name|Type
operator|.
name|fromTag
argument_list|(
name|tag
argument_list|,
literal|false
argument_list|)
argument_list|,
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|tag
operator|=
name|idxDefinedTag
expr_stmt|;
block|}
name|boolean
name|fieldAdded
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|tag
operator|==
name|Type
operator|.
name|STRINGS
operator|.
name|tag
argument_list|()
operator|&&
name|property
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|context
operator|.
name|getFacetsConfig
argument_list|()
operator|.
name|setMultiValued
argument_list|(
name|pname
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|values
init|=
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesFacetField
argument_list|(
name|pname
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|fieldAdded
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|==
name|Type
operator|.
name|STRING
operator|.
name|tag
argument_list|()
condition|)
block|{
name|String
name|value
init|=
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesFacetField
argument_list|(
name|pname
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|fieldAdded
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"[{}] Ignoring facet property. Could not convert property {} of type {} to type {} for path {}"
argument_list|,
name|getIndexName
argument_list|()
argument_list|,
name|pname
argument_list|,
name|Type
operator|.
name|fromTag
argument_list|(
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|,
name|Type
operator|.
name|fromTag
argument_list|(
name|tag
argument_list|,
literal|false
argument_list|)
argument_list|,
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|fieldAdded
return|;
block|}
specifier|private
name|boolean
name|indexProperty
parameter_list|(
name|String
name|path
parameter_list|,
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|,
name|NodeState
name|state
parameter_list|,
name|PropertyState
name|property
parameter_list|,
name|String
name|pname
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
name|boolean
name|includeTypeForFullText
init|=
name|indexingRule
operator|.
name|includePropertyType
argument_list|(
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Type
operator|.
name|BINARY
operator|.
name|tag
argument_list|()
operator|==
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
operator|&&
name|includeTypeForFullText
condition|)
block|{
name|fields
operator|.
name|addAll
argument_list|(
name|newBinary
argument_list|(
name|property
argument_list|,
name|state
argument_list|,
literal|null
argument_list|,
name|path
operator|+
literal|"@"
operator|+
name|pname
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|pd
operator|.
name|propertyIndex
operator|&&
name|pd
operator|.
name|includePropertyType
argument_list|(
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
argument_list|)
condition|)
block|{
name|dirty
operator||=
name|addTypedFields
argument_list|(
name|fields
argument_list|,
name|property
argument_list|,
name|pname
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pd
operator|.
name|fulltextEnabled
argument_list|()
operator|&&
name|includeTypeForFullText
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
control|)
block|{
if|if
condition|(
name|pd
operator|.
name|analyzed
operator|&&
name|pd
operator|.
name|includePropertyType
argument_list|(
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|analyzedPropName
init|=
name|constructAnalyzedPropertyName
argument_list|(
name|pname
argument_list|)
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|newPropertyField
argument_list|(
name|analyzedPropName
argument_list|,
name|value
argument_list|,
operator|!
name|pd
operator|.
name|skipTokenization
argument_list|(
name|pname
argument_list|)
argument_list|,
name|pd
operator|.
name|stored
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pd
operator|.
name|useInSuggest
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|FieldFactory
operator|.
name|newSuggestField
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pd
operator|.
name|useInSpellcheck
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|newPropertyField
argument_list|(
name|FieldNames
operator|.
name|SPELLCHECK
argument_list|,
name|value
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pd
operator|.
name|nodeScopeIndex
condition|)
block|{
name|Field
name|field
init|=
name|newFulltextField
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pd
operator|.
name|facet
condition|)
block|{
name|dirty
operator||=
name|addFacetFields
argument_list|(
name|fields
argument_list|,
name|property
argument_list|,
name|pname
argument_list|,
name|pd
argument_list|)
expr_stmt|;
block|}
return|return
name|dirty
return|;
block|}
block|}
specifier|private
name|String
name|constructAnalyzedPropertyName
parameter_list|(
name|String
name|pname
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|getDefinition
argument_list|()
operator|.
name|getVersion
argument_list|()
operator|.
name|isAtLeast
argument_list|(
name|IndexFormatVersion
operator|.
name|V2
argument_list|)
condition|)
block|{
return|return
name|FieldNames
operator|.
name|createAnalyzedFieldName
argument_list|(
name|pname
argument_list|)
return|;
block|}
return|return
name|pname
return|;
block|}
specifier|private
name|boolean
name|addTypedFields
parameter_list|(
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|,
name|PropertyState
name|property
parameter_list|,
name|String
name|pname
parameter_list|)
block|{
name|int
name|tag
init|=
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
decl_stmt|;
name|boolean
name|fieldAdded
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|property
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Field
name|f
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|Type
operator|.
name|LONG
operator|.
name|tag
argument_list|()
condition|)
block|{
name|f
operator|=
operator|new
name|LongField
argument_list|(
name|pname
argument_list|,
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|==
name|Type
operator|.
name|DATE
operator|.
name|tag
argument_list|()
condition|)
block|{
name|String
name|date
init|=
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|f
operator|=
operator|new
name|LongField
argument_list|(
name|pname
argument_list|,
name|FieldFactory
operator|.
name|dateToLong
argument_list|(
name|date
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|==
name|Type
operator|.
name|DOUBLE
operator|.
name|tag
argument_list|()
condition|)
block|{
name|f
operator|=
operator|new
name|DoubleField
argument_list|(
name|pname
argument_list|,
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|,
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|==
name|Type
operator|.
name|BOOLEAN
operator|.
name|tag
argument_list|()
condition|)
block|{
name|f
operator|=
operator|new
name|StringField
argument_list|(
name|pname
argument_list|,
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|f
operator|=
operator|new
name|StringField
argument_list|(
name|pname
argument_list|,
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
expr_stmt|;
block|}
name|fields
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|fieldAdded
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|fieldAdded
return|;
block|}
specifier|private
name|boolean
name|addTypedOrderedFields
parameter_list|(
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|,
name|PropertyState
name|property
parameter_list|,
name|String
name|pname
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
comment|// Ignore and warn if property multi-valued as not supported
if|if
condition|(
name|property
operator|.
name|getType
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"[{}] Ignoring ordered property {} of type {} for path {} as multivalued ordered property not supported"
argument_list|,
name|getIndexName
argument_list|()
argument_list|,
name|pname
argument_list|,
name|Type
operator|.
name|fromTag
argument_list|(
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|,
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|tag
init|=
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
decl_stmt|;
name|int
name|idxDefinedTag
init|=
name|pd
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// Try converting type to the defined type in the index definition
if|if
condition|(
name|tag
operator|!=
name|idxDefinedTag
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] Ordered property defined with type {} differs from property {} with type {} in "
operator|+
literal|"path {}"
argument_list|,
name|getIndexName
argument_list|()
argument_list|,
name|Type
operator|.
name|fromTag
argument_list|(
name|idxDefinedTag
argument_list|,
literal|false
argument_list|)
argument_list|,
name|property
operator|.
name|toString
argument_list|()
argument_list|,
name|Type
operator|.
name|fromTag
argument_list|(
name|tag
argument_list|,
literal|false
argument_list|)
argument_list|,
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|tag
operator|=
name|idxDefinedTag
expr_stmt|;
block|}
name|String
name|name
init|=
name|FieldNames
operator|.
name|createDocValFieldName
argument_list|(
name|pname
argument_list|)
decl_stmt|;
name|boolean
name|fieldAdded
init|=
literal|false
decl_stmt|;
name|Field
name|f
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|tag
operator|==
name|Type
operator|.
name|LONG
operator|.
name|tag
argument_list|()
condition|)
block|{
comment|//TODO Distinguish fields which need to be used for search and for sort
comment|//If a field is only used for Sort then it can be stored with less precision
name|f
operator|=
operator|new
name|NumericDocValuesField
argument_list|(
name|name
argument_list|,
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|==
name|Type
operator|.
name|DATE
operator|.
name|tag
argument_list|()
condition|)
block|{
name|String
name|date
init|=
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|f
operator|=
operator|new
name|NumericDocValuesField
argument_list|(
name|name
argument_list|,
name|FieldFactory
operator|.
name|dateToLong
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|==
name|Type
operator|.
name|DOUBLE
operator|.
name|tag
argument_list|()
condition|)
block|{
name|f
operator|=
operator|new
name|DoubleDocValuesField
argument_list|(
name|name
argument_list|,
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|==
name|Type
operator|.
name|BOOLEAN
operator|.
name|tag
argument_list|()
condition|)
block|{
name|f
operator|=
operator|new
name|SortedDocValuesField
argument_list|(
name|name
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|==
name|Type
operator|.
name|STRING
operator|.
name|tag
argument_list|()
condition|)
block|{
name|f
operator|=
operator|new
name|SortedDocValuesField
argument_list|(
name|name
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|fieldAdded
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"[{}] Ignoring ordered property. Could not convert property {} of type {} to type {} for path {}"
argument_list|,
name|getIndexName
argument_list|()
argument_list|,
name|pname
argument_list|,
name|Type
operator|.
name|fromTag
argument_list|(
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|,
name|Type
operator|.
name|fromTag
argument_list|(
name|tag
argument_list|,
literal|false
argument_list|)
argument_list|,
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|fieldAdded
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isVisible
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|':'
return|;
block|}
specifier|private
name|List
argument_list|<
name|Field
argument_list|>
name|newBinary
parameter_list|(
name|PropertyState
name|property
parameter_list|,
name|NodeState
name|state
parameter_list|,
name|String
name|nodePath
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|Field
argument_list|>
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
comment|//jcr:mimeType is mandatory for a binary to be indexed
name|String
name|type
init|=
name|state
operator|.
name|getString
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIMETYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|||
operator|!
name|isSupportedMediaType
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"[{}] Ignoring binary content for node {} due to unsupported (or null) jcr:mimeType [{}]"
argument_list|,
name|getIndexName
argument_list|()
argument_list|,
name|path
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|fields
return|;
block|}
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|JCR_DATA
operator|.
name|equals
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|encoding
init|=
name|state
operator|.
name|getString
argument_list|(
name|JcrConstants
operator|.
name|JCR_ENCODING
argument_list|)
decl_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
block|{
comment|// not mandatory
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_ENCODING
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Blob
name|v
range|:
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARIES
argument_list|)
control|)
block|{
name|String
name|value
init|=
name|parseStringValue
argument_list|(
name|v
argument_list|,
name|metadata
argument_list|,
name|path
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|nodePath
operator|!=
literal|null
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|newFulltextField
argument_list|(
name|nodePath
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fields
operator|.
name|add
argument_list|(
name|newFulltextField
argument_list|(
name|value
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fields
return|;
block|}
comment|//~-------------------------------------------------------< NullCheck Support>
specifier|private
name|boolean
name|indexNotNullCheckEnabledProps
parameter_list|(
name|String
name|path
parameter_list|,
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|,
name|NodeState
name|state
parameter_list|)
block|{
name|boolean
name|fieldAdded
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PropertyDefinition
name|pd
range|:
name|indexingRule
operator|.
name|getNotNullCheckEnabledProperties
argument_list|()
control|)
block|{
if|if
condition|(
name|isPropertyNotNull
argument_list|(
name|state
argument_list|,
name|pd
argument_list|)
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
name|FieldNames
operator|.
name|NOT_NULL_PROPS
argument_list|,
name|pd
operator|.
name|name
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|fieldAdded
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|fieldAdded
return|;
block|}
specifier|private
name|boolean
name|indexNullCheckEnabledProps
parameter_list|(
name|String
name|path
parameter_list|,
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|,
name|NodeState
name|state
parameter_list|)
block|{
name|boolean
name|fieldAdded
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PropertyDefinition
name|pd
range|:
name|indexingRule
operator|.
name|getNullCheckEnabledProperties
argument_list|()
control|)
block|{
if|if
condition|(
name|isPropertyNull
argument_list|(
name|state
argument_list|,
name|pd
argument_list|)
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
name|FieldNames
operator|.
name|NULL_PROPS
argument_list|,
name|pd
operator|.
name|name
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|fieldAdded
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|fieldAdded
return|;
block|}
specifier|private
name|boolean
name|indexIfSinglePropertyRemoved
parameter_list|()
block|{
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PropertyState
name|ps
range|:
name|propertiesModified
control|)
block|{
name|PropertyDefinition
name|pd
init|=
name|indexingRule
operator|.
name|getConfig
argument_list|(
name|ps
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pd
operator|!=
literal|null
operator|&&
name|pd
operator|.
name|index
operator|&&
operator|(
name|pd
operator|.
name|includePropertyType
argument_list|(
name|ps
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
argument_list|)
operator|||
name|indexingRule
operator|.
name|includePropertyType
argument_list|(
name|ps
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|dirty
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|dirty
return|;
block|}
comment|/**      * Determine if the property as defined by PropertyDefinition exists or not.      *      *<p>For relative property if the intermediate nodes do not exist then property is      *<bold>not</bold> considered to be null</p>      *      * @return true if the property does not exist      */
specifier|private
name|boolean
name|isPropertyNull
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
name|NodeState
name|propertyNode
init|=
name|getPropertyNode
argument_list|(
name|state
argument_list|,
name|pd
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propertyNode
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|!
name|propertyNode
operator|.
name|hasProperty
argument_list|(
name|pd
operator|.
name|nonRelativeName
argument_list|)
return|;
block|}
comment|/**      * Determine if the property as defined by PropertyDefinition exists or not.      *      *<p>For relative property if the intermediate nodes do not exist then property is      * considered to be null</p>      *      * @return true if the property exists      */
specifier|private
name|boolean
name|isPropertyNotNull
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
name|NodeState
name|propertyNode
init|=
name|getPropertyNode
argument_list|(
name|state
argument_list|,
name|pd
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propertyNode
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|propertyNode
operator|.
name|hasProperty
argument_list|(
name|pd
operator|.
name|nonRelativeName
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|NodeState
name|getPropertyNode
parameter_list|(
name|NodeState
name|nodeState
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
if|if
condition|(
operator|!
name|pd
operator|.
name|relative
condition|)
block|{
return|return
name|nodeState
return|;
block|}
name|NodeState
name|node
init|=
name|nodeState
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|pd
operator|.
name|ancestors
control|)
block|{
name|node
operator|=
name|node
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
comment|//~-------------------------------------------------------< Aggregate>
annotation|@
name|Override
specifier|public
name|void
name|markDirty
parameter_list|()
block|{
name|propertiesChanged
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|MatcherState
name|getMatcherState
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|List
argument_list|<
name|Matcher
argument_list|>
name|matched
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Matcher
argument_list|>
name|inherited
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Matcher
name|m
range|:
name|Iterables
operator|.
name|concat
argument_list|(
name|matcherState
operator|.
name|inherited
argument_list|,
name|currentMatchers
argument_list|)
control|)
block|{
name|Matcher
name|result
init|=
name|m
operator|.
name|match
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getStatus
argument_list|()
operator|==
name|Matcher
operator|.
name|Status
operator|.
name|MATCH_FOUND
condition|)
block|{
name|matched
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|getStatus
argument_list|()
operator|!=
name|Matcher
operator|.
name|Status
operator|.
name|FAIL
condition|)
block|{
name|inherited
operator|.
name|addAll
argument_list|(
name|result
operator|.
name|nextSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|matched
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|inherited
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|MatcherState
argument_list|(
name|matched
argument_list|,
name|inherited
argument_list|)
return|;
block|}
return|return
name|MatcherState
operator|.
name|NONE
return|;
block|}
specifier|private
name|boolean
name|indexAggregates
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|,
specifier|final
name|NodeState
name|state
parameter_list|)
block|{
specifier|final
name|AtomicBoolean
name|dirtyFlag
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|indexingRule
operator|.
name|getAggregate
argument_list|()
operator|.
name|collectAggregates
argument_list|(
name|state
argument_list|,
operator|new
name|Aggregate
operator|.
name|ResultCollector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResult
parameter_list|(
name|Aggregate
operator|.
name|NodeIncludeResult
name|result
parameter_list|)
block|{
name|boolean
name|dirty
init|=
name|indexAggregatedNode
argument_list|(
name|path
argument_list|,
name|fields
argument_list|,
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirty
condition|)
block|{
name|dirtyFlag
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onResult
parameter_list|(
name|Aggregate
operator|.
name|PropertyIncludeResult
name|result
parameter_list|)
block|{
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|pd
operator|.
name|ordered
condition|)
block|{
name|dirty
operator||=
name|addTypedOrderedFields
argument_list|(
name|fields
argument_list|,
name|result
operator|.
name|propertyState
argument_list|,
name|result
operator|.
name|propertyPath
argument_list|,
name|result
operator|.
name|pd
argument_list|)
expr_stmt|;
block|}
name|dirty
operator||=
name|indexProperty
argument_list|(
name|path
argument_list|,
name|fields
argument_list|,
name|state
argument_list|,
name|result
operator|.
name|propertyState
argument_list|,
name|result
operator|.
name|propertyPath
argument_list|,
name|result
operator|.
name|pd
argument_list|)
expr_stmt|;
if|if
condition|(
name|dirty
condition|)
block|{
name|dirtyFlag
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|dirtyFlag
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Create the fulltext field from the aggregated nodes. If result is for aggregate for a relative node      * include then      * @param path current node path      * @param fields indexed fields      * @param result aggregate result      * @return true if a field was created for passed node result      */
specifier|private
name|boolean
name|indexAggregatedNode
parameter_list|(
name|String
name|path
parameter_list|,
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|,
name|Aggregate
operator|.
name|NodeIncludeResult
name|result
parameter_list|)
block|{
comment|//rule for node being aggregated might be null if such nodes
comment|//are not indexed on there own. In such cases we rely in current
comment|//rule for some checks
name|IndexDefinition
operator|.
name|IndexingRule
name|ruleAggNode
init|=
name|context
operator|.
name|getDefinition
argument_list|()
operator|.
name|getApplicableIndexingRule
argument_list|(
name|getPrimaryTypeName
argument_list|(
name|result
operator|.
name|nodeState
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PropertyState
name|property
range|:
name|result
operator|.
name|nodeState
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|pname
init|=
name|property
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|propertyPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|result
operator|.
name|nodePath
argument_list|,
name|pname
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isVisible
argument_list|(
name|pname
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|//Check if type is indexed
name|int
name|type
init|=
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
decl_stmt|;
if|if
condition|(
name|ruleAggNode
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|ruleAggNode
operator|.
name|includePropertyType
argument_list|(
name|type
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|indexingRule
operator|.
name|includePropertyType
argument_list|(
name|type
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|//Check if any explicit property defn is defined via relative path
comment|// and is marked to exclude this property from being indexed
name|PropertyDefinition
name|pdForRootNode
init|=
name|indexingRule
operator|.
name|getConfig
argument_list|(
name|propertyPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|pdForRootNode
operator|!=
literal|null
operator|&&
operator|!
name|pdForRootNode
operator|.
name|index
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|Type
operator|.
name|BINARY
operator|==
name|property
operator|.
name|getType
argument_list|()
condition|)
block|{
name|String
name|aggreagtedNodePath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|result
operator|.
name|nodePath
argument_list|)
decl_stmt|;
comment|//Here the fulltext is being created for aggregate root hence nodePath passed
comment|//should be null
name|String
name|nodePath
init|=
name|result
operator|.
name|isRelativeNode
argument_list|()
condition|?
name|result
operator|.
name|rootIncludePath
else|:
literal|null
decl_stmt|;
name|fields
operator|.
name|addAll
argument_list|(
name|newBinary
argument_list|(
name|property
argument_list|,
name|result
operator|.
name|nodeState
argument_list|,
name|nodePath
argument_list|,
name|aggreagtedNodePath
operator|+
literal|"@"
operator|+
name|pname
argument_list|)
argument_list|)
expr_stmt|;
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|PropertyDefinition
name|pd
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ruleAggNode
operator|!=
literal|null
condition|)
block|{
name|pd
operator|=
name|ruleAggNode
operator|.
name|getConfig
argument_list|(
name|pname
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pd
operator|!=
literal|null
operator|&&
operator|!
name|pd
operator|.
name|nodeScopeIndex
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|String
name|value
range|:
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
control|)
block|{
name|Field
name|field
init|=
name|result
operator|.
name|isRelativeNode
argument_list|()
condition|?
name|newFulltextField
argument_list|(
name|result
operator|.
name|rootIncludePath
argument_list|,
name|value
argument_list|)
else|:
name|newFulltextField
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|pd
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|setBoost
argument_list|(
name|pd
operator|.
name|boost
argument_list|)
expr_stmt|;
block|}
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
name|dirty
return|;
block|}
comment|/**      * Determines which all matchers are affected by this property change      *      * @param name modified property name      */
specifier|private
name|void
name|checkAggregates
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|Matcher
name|m
range|:
name|matcherState
operator|.
name|matched
control|)
block|{
if|if
condition|(
operator|!
name|matcherState
operator|.
name|affectedMatchers
operator|.
name|contains
argument_list|(
name|m
argument_list|)
operator|&&
name|m
operator|.
name|aggregatesProperty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|matcherState
operator|.
name|affectedMatchers
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|MatcherState
block|{
specifier|final
specifier|static
name|MatcherState
name|NONE
init|=
operator|new
name|MatcherState
argument_list|(
name|Collections
operator|.
expr|<
name|Matcher
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|Matcher
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Matcher
argument_list|>
name|matched
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Matcher
argument_list|>
name|inherited
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Matcher
argument_list|>
name|affectedMatchers
decl_stmt|;
specifier|public
name|MatcherState
parameter_list|(
name|List
argument_list|<
name|Matcher
argument_list|>
name|matched
parameter_list|,
name|List
argument_list|<
name|Matcher
argument_list|>
name|inherited
parameter_list|)
block|{
name|this
operator|.
name|matched
operator|=
name|matched
expr_stmt|;
name|this
operator|.
name|inherited
operator|=
name|inherited
expr_stmt|;
comment|//Affected matches would only be used when there are
comment|//some matched matchers
if|if
condition|(
name|matched
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|affectedMatchers
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|affectedMatchers
operator|=
name|Sets
operator|.
name|newIdentityHashSet
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|matched
operator|.
name|isEmpty
argument_list|()
operator|&&
name|inherited
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
specifier|private
name|void
name|markPropertyChanged
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|isIndexable
argument_list|()
operator|&&
operator|!
name|propertiesChanged
operator|&&
name|indexingRule
operator|.
name|isIndexed
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|propertiesChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|private
name|IndexDefinition
name|getDefinition
parameter_list|()
block|{
return|return
name|context
operator|.
name|getDefinition
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|isIndexable
parameter_list|()
block|{
return|return
name|indexingRule
operator|!=
literal|null
return|;
block|}
specifier|private
name|PathFilter
operator|.
name|Result
name|getPathFilterResult
parameter_list|(
name|String
name|childNodeName
parameter_list|)
block|{
return|return
name|context
operator|.
name|getDefinition
argument_list|()
operator|.
name|getPathFilter
argument_list|()
operator|.
name|filter
argument_list|(
name|concat
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|childNodeName
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isSupportedMediaType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|context
operator|.
name|isSupportedMediaType
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|private
name|String
name|parseStringValue
parameter_list|(
name|Blob
name|v
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
name|String
name|text
init|=
name|context
operator|.
name|getExtractedTextCache
argument_list|()
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|propertyName
argument_list|,
name|v
argument_list|,
name|context
operator|.
name|isReindex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
name|text
operator|=
name|parseStringValue0
argument_list|(
name|v
argument_list|,
name|metadata
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|text
return|;
block|}
specifier|private
name|String
name|parseStringValue0
parameter_list|(
name|Blob
name|v
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|WriteOutContentHandler
name|handler
init|=
operator|new
name|WriteOutContentHandler
argument_list|(
name|context
operator|.
name|getDefinition
argument_list|()
operator|.
name|getMaxExtractLength
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|bytesRead
init|=
literal|0
decl_stmt|;
try|try
block|{
name|CountingInputStream
name|stream
init|=
operator|new
name|CountingInputStream
argument_list|(
operator|new
name|LazyInputStream
argument_list|(
operator|new
name|BlobByteSource
argument_list|(
name|v
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|context
operator|.
name|getParser
argument_list|()
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|bytesRead
operator|=
name|stream
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LinkageError
name|e
parameter_list|)
block|{
comment|// Capture and ignore errors caused by extraction libraries
comment|// not being present. This is equivalent to disabling
comment|// selected media types in configuration, so we can simply
comment|// ignore these errors.
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Capture and report any other full text extraction problems.
comment|// The special STOP exception is used for normal termination.
if|if
condition|(
operator|!
name|handler
operator|.
name|isWriteLimitReached
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] Failed to extract text from a binary property: {}."
operator|+
literal|" This is a fairly common case, and nothing to"
operator|+
literal|" worry about. The stack trace is included to"
operator|+
literal|" help improve the text extraction feature."
argument_list|,
name|getIndexName
argument_list|()
argument_list|,
name|path
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|context
operator|.
name|getExtractedTextCache
argument_list|()
operator|.
name|put
argument_list|(
name|v
argument_list|,
name|ExtractedText
operator|.
name|ERROR
argument_list|)
expr_stmt|;
return|return
name|TEXT_EXTRACTION_ERROR
return|;
block|}
block|}
name|String
name|result
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|bytesRead
operator|>
literal|0
condition|)
block|{
name|context
operator|.
name|recordTextExtractionStats
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|,
name|bytesRead
argument_list|,
name|result
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|getExtractedTextCache
argument_list|()
operator|.
name|put
argument_list|(
name|v
argument_list|,
operator|new
name|ExtractedText
argument_list|(
name|ExtractionResult
operator|.
name|SUCCESS
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|String
name|getIndexName
parameter_list|()
block|{
return|return
name|context
operator|.
name|getDefinition
argument_list|()
operator|.
name|getIndexName
argument_list|()
return|;
block|}
comment|/**      * Extracts the local name of the current node ignoring any namespace prefix      *      * @param name node name      */
specifier|private
specifier|static
name|void
name|addNodeNameField
parameter_list|(
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|,
name|String
name|name
parameter_list|)
block|{
comment|//TODO Need to check if it covers all cases
name|int
name|colon
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|colon
operator|<
literal|0
condition|?
name|name
else|:
name|name
operator|.
name|substring
argument_list|(
name|colon
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|//For now just add a single term. Later we can look into using different analyzer
comment|//to analyze the node name and add multiple terms. Like add multiple terms for a
comment|//cameCase file name to allow faster like search
name|fields
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
name|FieldNames
operator|.
name|NODE_NAME
argument_list|,
name|value
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

