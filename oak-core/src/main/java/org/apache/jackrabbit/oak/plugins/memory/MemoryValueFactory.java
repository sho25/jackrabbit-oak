begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValueFactory
import|;
end_import

begin_class
specifier|public
class|class
name|MemoryValueFactory
implements|implements
name|CoreValueFactory
block|{
specifier|public
specifier|static
specifier|final
name|CoreValueFactory
name|INSTANCE
init|=
operator|new
name|MemoryValueFactory
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|CoreValue
name|createValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|StringValue
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CoreValue
name|createValue
parameter_list|(
name|double
name|value
parameter_list|)
block|{
return|return
operator|new
name|DoubleValue
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CoreValue
name|createValue
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
operator|new
name|LongValue
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CoreValue
name|createValue
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
block|{
return|return
name|BooleanValue
operator|.
name|TRUE
return|;
block|}
else|else
block|{
return|return
name|BooleanValue
operator|.
name|FALSE
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CoreValue
name|createValue
parameter_list|(
name|BigDecimal
name|value
parameter_list|)
block|{
return|return
operator|new
name|DecimalValue
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CoreValue
name|createValue
parameter_list|(
name|InputStream
name|value
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|ByteArrayOutputStream
name|buffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|n
init|=
name|value
operator|.
name|read
argument_list|(
name|b
argument_list|)
decl_stmt|;
while|while
condition|(
name|n
operator|!=
operator|-
literal|1
condition|)
block|{
name|buffer
operator|.
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|n
operator|=
name|value
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BinaryValue
argument_list|(
name|buffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|value
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CoreValue
name|createValue
parameter_list|(
name|String
name|value
parameter_list|,
specifier|final
name|int
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|PropertyType
operator|.
name|BINARY
condition|)
block|{
try|try
block|{
return|return
operator|new
name|BinaryValue
argument_list|(
name|value
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"UTF-8 is not supported"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|PropertyType
operator|.
name|DECIMAL
condition|)
block|{
return|return
name|createValue
argument_list|(
name|createValue
argument_list|(
name|value
argument_list|)
operator|.
name|getDecimal
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|PropertyType
operator|.
name|DECIMAL
condition|)
block|{
return|return
name|createValue
argument_list|(
name|createValue
argument_list|(
name|value
argument_list|)
operator|.
name|getDecimal
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|PropertyType
operator|.
name|DOUBLE
condition|)
block|{
return|return
name|createValue
argument_list|(
name|createValue
argument_list|(
name|value
argument_list|)
operator|.
name|getDouble
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|PropertyType
operator|.
name|LONG
condition|)
block|{
return|return
name|createValue
argument_list|(
name|createValue
argument_list|(
name|value
argument_list|)
operator|.
name|getLong
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|PropertyType
operator|.
name|STRING
condition|)
block|{
return|return
name|createValue
argument_list|(
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|GenericValue
argument_list|(
name|type
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

