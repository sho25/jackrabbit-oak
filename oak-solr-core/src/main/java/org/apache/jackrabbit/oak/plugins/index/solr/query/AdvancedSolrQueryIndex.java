begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|aggregate
operator|.
name|NodeAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|configuration
operator|.
name|OakSolrConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|EmbeddedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import

begin_comment
comment|/**  * {@link org.apache.jackrabbit.oak.spi.query.QueryIndex.AdvanceFulltextQueryIndex} implementation of a Solr  * {@link org.apache.jackrabbit.oak.spi.query.QueryIndex} index, extending {@link org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex}.  */
end_comment

begin_class
specifier|public
class|class
name|AdvancedSolrQueryIndex
extends|extends
name|SolrQueryIndex
implements|implements
name|QueryIndex
operator|.
name|AdvanceFulltextQueryIndex
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|cache
init|=
operator|new
name|WeakHashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|OakSolrConfiguration
name|configuration
decl_stmt|;
specifier|private
specifier|final
name|SolrServer
name|solrServer
decl_stmt|;
specifier|private
specifier|final
name|NodeAggregator
name|aggregator
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|public
name|AdvancedSolrQueryIndex
parameter_list|(
name|String
name|name
parameter_list|,
name|SolrServer
name|solrServer
parameter_list|,
name|OakSolrConfiguration
name|configuration
parameter_list|,
name|NodeAggregator
name|aggregator
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|solrServer
argument_list|,
name|configuration
argument_list|,
name|aggregator
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|solrServer
operator|=
name|solrServer
expr_stmt|;
name|this
operator|.
name|aggregator
operator|=
name|aggregator
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|IndexPlan
argument_list|>
name|getPlans
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|sortOrder
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
comment|// TODO : eventually provide multiple plans for (eventually) filtering by ACLs
comment|// TODO : eventually provide multiple plans for normal paging vs deep paging
comment|// TODO : eventually support sorting
if|if
condition|(
name|getMatchingFilterRestrictions
argument_list|(
name|filter
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|planBuilder
argument_list|(
name|filter
argument_list|)
operator|.
name|setEstimatedEntryCount
argument_list|(
name|estimateEntryCount
argument_list|(
name|filter
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
specifier|private
name|long
name|estimateEntryCount
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
name|String
name|key
init|=
name|filter
operator|.
name|toString
argument_list|()
decl_stmt|;
name|long
name|cachedEstimate
init|=
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|?
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
else|:
operator|-
literal|1
decl_stmt|;
name|long
name|estimatedEntryCount
decl_stmt|;
if|if
condition|(
name|cachedEstimate
operator|>=
literal|0
condition|)
block|{
name|estimatedEntryCount
operator|=
name|cachedEstimate
expr_stmt|;
block|}
else|else
block|{
name|Long
name|updatedEstimation
init|=
name|initializeEstimation
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|updatedEstimation
argument_list|)
expr_stmt|;
name|estimatedEntryCount
operator|=
name|updatedEstimation
expr_stmt|;
block|}
return|return
name|estimatedEntryCount
return|;
block|}
specifier|private
name|Long
name|initializeEstimation
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
name|SolrQuery
name|solrQuery
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|solrServer
operator|.
name|query
argument_list|(
name|solrQuery
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
operator|/
literal|3
return|;
comment|// 33% of the docs is a reasonable worst case
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
block|}
specifier|private
name|IndexPlan
operator|.
name|Builder
name|planBuilder
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
return|return
operator|new
name|IndexPlan
operator|.
name|Builder
argument_list|()
operator|.
name|setCostPerExecution
argument_list|(
name|solrServer
operator|instanceof
name|EmbeddedSolrServer
condition|?
literal|1
else|:
literal|2
argument_list|)
comment|// disk I/O + network I/O
operator|.
name|setCostPerEntry
argument_list|(
literal|0.3
argument_list|)
comment|// with properly configured SolrCaches ~70% of the doc fetches should hit them
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
operator|.
name|setFulltextIndex
argument_list|(
literal|true
argument_list|)
operator|.
name|setIncludesNodeData
argument_list|(
literal|true
argument_list|)
comment|// we currently include node data
operator|.
name|setDelayed
argument_list|(
literal|true
argument_list|)
return|;
comment|//Solr is most usually async
block|}
annotation|@
name|Override
name|void
name|onRetrievedResults
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|SolrDocumentList
name|docs
parameter_list|)
block|{
comment|// update estimates cache
name|cache
operator|.
name|put
argument_list|(
name|filter
operator|.
name|toString
argument_list|()
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPlanDescription
parameter_list|(
name|IndexPlan
name|plan
parameter_list|,
name|NodeState
name|root
parameter_list|)
block|{
return|return
name|plan
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cursor
name|query
parameter_list|(
name|IndexPlan
name|plan
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
return|return
name|super
operator|.
name|query
argument_list|(
name|plan
operator|.
name|getFilter
argument_list|()
argument_list|,
name|rootState
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeAggregator
name|getNodeAggregator
parameter_list|()
block|{
return|return
name|aggregator
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getCost
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
return|return
name|super
operator|.
name|getCost
argument_list|(
name|filter
argument_list|,
name|rootState
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cursor
name|query
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
return|return
name|super
operator|.
name|query
argument_list|(
name|filter
argument_list|,
name|rootState
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPlan
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
return|return
name|super
operator|.
name|getPlan
argument_list|(
name|filter
argument_list|,
name|rootState
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

