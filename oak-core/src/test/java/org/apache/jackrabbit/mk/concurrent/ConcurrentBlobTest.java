begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|IOUtilsTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test concurrent access to the blob store.  */
end_comment

begin_class
specifier|public
class|class
name|ConcurrentBlobTest
block|{
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY
init|=
operator|new
name|byte
index|[
literal|50
index|]
decl_stmt|;
name|MemoryBlobStore
name|store
init|=
operator|new
name|MemoryBlobStore
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|store
operator|.
name|setBlockSizeMin
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|id
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|Concurrent
operator|.
name|run
argument_list|(
literal|"blob"
argument_list|,
operator|new
name|Concurrent
operator|.
name|Task
argument_list|()
block|{
specifier|public
name|void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|i
init|=
name|id
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|writeLong
argument_list|(
name|out
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|EMPTY
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|out
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|store
operator|.
name|writeBlob
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|58
argument_list|,
name|store
operator|.
name|getBlobLength
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|test
init|=
name|out
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|store
operator|.
name|readBlob
argument_list|(
name|id
argument_list|,
literal|0
argument_list|,
name|test
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtilsTest
operator|.
name|assertEquals
argument_list|(
name|data
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

