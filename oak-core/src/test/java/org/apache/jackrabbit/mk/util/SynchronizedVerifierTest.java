begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|Concurrent
operator|.
name|Task
import|;
end_import

begin_comment
comment|/**  * Tests the SynchronizedVerifier  */
end_comment

begin_class
specifier|public
class|class
name|SynchronizedVerifierTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testReadRead
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|x
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|SynchronizedVerifier
operator|.
name|setDetect
argument_list|(
name|AtomicInteger
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Concurrent
operator|.
name|run
argument_list|(
literal|"read"
argument_list|,
operator|new
name|Task
argument_list|()
block|{
specifier|public
name|void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|SynchronizedVerifier
operator|.
name|check
argument_list|(
name|x
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|x
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|SynchronizedVerifier
operator|.
name|setDetect
argument_list|(
name|AtomicInteger
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReadWrite
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|x
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|SynchronizedVerifier
operator|.
name|setDetect
argument_list|(
name|AtomicInteger
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|Concurrent
operator|.
name|run
argument_list|(
literal|"readWrite"
argument_list|,
operator|new
name|Task
argument_list|()
block|{
specifier|public
name|void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"1"
argument_list|)
condition|)
block|{
name|SynchronizedVerifier
operator|.
name|check
argument_list|(
name|x
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|x
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SynchronizedVerifier
operator|.
name|check
argument_list|(
name|x
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|x
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// expected
block|}
finally|finally
block|{
name|SynchronizedVerifier
operator|.
name|setDetect
argument_list|(
name|AtomicInteger
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testWriteWrite
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|x
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|SynchronizedVerifier
operator|.
name|setDetect
argument_list|(
name|AtomicInteger
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|Concurrent
operator|.
name|run
argument_list|(
literal|"write"
argument_list|,
operator|new
name|Task
argument_list|()
block|{
specifier|public
name|void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|SynchronizedVerifier
operator|.
name|check
argument_list|(
name|x
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|x
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// expected
block|}
finally|finally
block|{
name|SynchronizedVerifier
operator|.
name|setDetect
argument_list|(
name|AtomicInteger
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

