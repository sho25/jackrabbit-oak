begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_class
class|class
name|MapRecord
extends|extends
name|Record
block|{
specifier|static
specifier|final
name|int
name|LEVEL_BITS
init|=
literal|6
decl_stmt|;
name|MapRecord
parameter_list|(
name|SegmentReader
name|reader
parameter_list|,
name|RecordId
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|reader
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|readInt
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
name|RecordId
name|getEntry
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|getEntry
argument_list|(
name|key
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|private
name|RecordId
name|getEntry
parameter_list|(
name|String
name|key
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|int
name|size
init|=
literal|1
operator|<<
name|LEVEL_BITS
decl_stmt|;
name|int
name|mask
init|=
name|size
operator|-
literal|1
decl_stmt|;
name|int
name|shift
init|=
name|level
operator|*
name|LEVEL_BITS
decl_stmt|;
name|int
name|code
init|=
name|key
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|int
name|bucketSize
init|=
name|readInt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucketSize
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|bucketSize
operator|<=
name|size
condition|)
block|{
name|int
name|offset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|bucketSize
operator|&&
name|readInt
argument_list|(
literal|4
operator|+
name|offset
operator|*
literal|4
argument_list|)
operator|<
name|code
condition|)
block|{
name|offset
operator|++
expr_stmt|;
block|}
while|while
condition|(
name|offset
operator|<
name|bucketSize
operator|&&
name|readInt
argument_list|(
literal|4
operator|+
name|offset
operator|*
literal|4
argument_list|)
operator|==
name|code
condition|)
block|{
name|RecordId
name|keyId
init|=
name|readRecordId
argument_list|(
literal|4
operator|+
operator|(
name|bucketSize
operator|+
name|offset
operator|)
operator|*
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|getReader
argument_list|()
operator|.
name|readString
argument_list|(
name|keyId
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|readRecordId
argument_list|(
literal|4
operator|+
operator|(
literal|2
operator|*
name|bucketSize
operator|+
name|offset
operator|)
operator|*
literal|4
argument_list|)
return|;
block|}
name|offset
operator|++
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
name|long
name|bucketMap
init|=
name|readLong
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|int
name|bucketIndex
init|=
operator|(
name|code
operator|>>
name|shift
operator|)
operator|&
name|mask
decl_stmt|;
name|long
name|bucketBit
init|=
literal|1L
operator|<<
name|bucketIndex
decl_stmt|;
if|if
condition|(
operator|(
name|bucketMap
operator|&
name|bucketBit
operator|)
operator|!=
literal|0
condition|)
block|{
name|bucketIndex
operator|=
name|Long
operator|.
name|bitCount
argument_list|(
name|bucketMap
operator|&
operator|(
name|bucketBit
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|RecordId
name|bucketId
init|=
name|readRecordId
argument_list|(
literal|12
operator|+
name|bucketIndex
operator|*
literal|4
argument_list|)
decl_stmt|;
return|return
operator|new
name|MapRecord
argument_list|(
name|getReader
argument_list|()
argument_list|,
name|bucketId
argument_list|)
operator|.
name|getEntry
argument_list|(
name|key
argument_list|,
name|level
operator|+
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

