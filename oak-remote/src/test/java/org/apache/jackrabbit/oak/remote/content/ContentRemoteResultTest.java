begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|content
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ResultRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO8601
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
specifier|public
class|class
name|ContentRemoteResultTest
block|{
specifier|private
name|ContentRemoteResult
name|createResult
parameter_list|(
name|ResultRow
name|row
parameter_list|)
block|{
return|return
operator|new
name|ContentRemoteResult
argument_list|(
name|mock
argument_list|(
name|ContentRemoteBinaries
operator|.
name|class
argument_list|)
argument_list|,
name|row
argument_list|)
return|;
block|}
specifier|private
name|ContentRemoteResult
name|createResult
parameter_list|(
name|ContentRemoteBinaries
name|binaries
parameter_list|,
name|ResultRow
name|row
parameter_list|)
block|{
return|return
operator|new
name|ContentRemoteResult
argument_list|(
name|binaries
argument_list|,
name|row
argument_list|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testColumnNotAvailable
parameter_list|()
block|{
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringColumn
parameter_list|()
block|{
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|"value"
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|remoteValue
operator|.
name|asText
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinaryColumn
parameter_list|()
block|{
name|Blob
name|blob
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|blob
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteBinaries
name|binaries
init|=
name|mock
argument_list|(
name|ContentRemoteBinaries
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"id"
argument_list|)
operator|.
name|when
argument_list|(
name|binaries
argument_list|)
operator|.
name|put
argument_list|(
name|blob
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|binaries
argument_list|,
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|remoteValue
operator|.
name|asBinaryId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColumn
parameter_list|()
block|{
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|42L
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|42L
argument_list|,
name|remoteValue
operator|.
name|asLong
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColumn
parameter_list|()
block|{
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|4.2
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4.2
argument_list|,
name|remoteValue
operator|.
name|asDouble
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|1e-5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDateColumn
parameter_list|()
block|{
name|Date
name|now
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|toFormattedDate
argument_list|(
name|now
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|now
operator|.
name|getTime
argument_list|()
argument_list|,
name|remoteValue
operator|.
name|asDate
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBooleanColumn
parameter_list|()
block|{
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|remoteValue
operator|.
name|asBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNameColumn
parameter_list|()
block|{
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|"value"
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|remoteValue
operator|.
name|asName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathColumn
parameter_list|()
block|{
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|PATH
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|"value"
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|PATH
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|remoteValue
operator|.
name|asPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReferenceColumn
parameter_list|()
block|{
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|REFERENCE
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|"value"
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCE
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|remoteValue
operator|.
name|asReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWeakReferenceColumn
parameter_list|()
block|{
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|WEAKREFERENCE
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|"value"
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|WEAKREFERENCE
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|remoteValue
operator|.
name|asWeakReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUriColumn
parameter_list|()
block|{
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|URI
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|"value"
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|URI
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|remoteValue
operator|.
name|asUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDecimalColumn
parameter_list|()
block|{
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|DECIMAL
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|,
name|remoteValue
operator|.
name|asDecimal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiStringColumn
parameter_list|()
block|{
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|remoteValue
operator|.
name|asMultiText
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiBinaryColumn
parameter_list|()
block|{
name|Blob
name|first
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
name|Blob
name|second
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContentRemoteBinaries
name|binaries
init|=
name|mock
argument_list|(
name|ContentRemoteBinaries
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"first"
argument_list|)
operator|.
name|when
argument_list|(
name|binaries
argument_list|)
operator|.
name|put
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|"second"
argument_list|)
operator|.
name|when
argument_list|(
name|binaries
argument_list|)
operator|.
name|put
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|BINARIES
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARIES
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|binaries
argument_list|,
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"first"
argument_list|,
literal|"second"
argument_list|)
argument_list|,
name|remoteValue
operator|.
name|asMultiBinaryId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiLongColumn
parameter_list|()
block|{
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|LONGS
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
literal|4L
argument_list|,
literal|2L
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONGS
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|4L
argument_list|,
literal|2L
argument_list|)
argument_list|,
name|remoteValue
operator|.
name|asMultiLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiDoubleColumn
parameter_list|()
block|{
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|DOUBLES
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
literal|4.0
argument_list|,
literal|2.0
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DOUBLES
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|4.0
argument_list|,
literal|2.0
argument_list|)
argument_list|,
name|remoteValue
operator|.
name|asMultiDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiDateColumn
parameter_list|()
block|{
name|Date
name|first
init|=
operator|new
name|Date
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|Date
name|second
init|=
operator|new
name|Date
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|DATES
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|toFormattedDates
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATES
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|4L
argument_list|,
literal|2L
argument_list|)
argument_list|,
name|remoteValue
operator|.
name|asMultiDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiBooleanColumn
parameter_list|()
block|{
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|BOOLEANS
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEANS
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|,
name|remoteValue
operator|.
name|asMultiBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiNameColumn
parameter_list|()
block|{
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|remoteValue
operator|.
name|asMultiName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiPathColumn
parameter_list|()
block|{
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|PATHS
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|PATHS
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|remoteValue
operator|.
name|asMultiPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiReferenceColumn
parameter_list|()
block|{
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|REFERENCES
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCES
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|remoteValue
operator|.
name|asMultiReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiWeakReferenceColumn
parameter_list|()
block|{
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|WEAKREFERENCES
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|WEAKREFERENCES
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|remoteValue
operator|.
name|asMultiWeakReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiUriColumn
parameter_list|()
block|{
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|URIS
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|URIS
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|remoteValue
operator|.
name|asMultiUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiDecimalColumn
parameter_list|()
block|{
name|BigDecimal
name|first
init|=
operator|new
name|BigDecimal
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|BigDecimal
name|second
init|=
operator|new
name|BigDecimal
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|PropertyValue
name|value
init|=
name|mock
argument_list|(
name|PropertyValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Type
operator|.
name|DECIMALS
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|asList
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DECIMALS
argument_list|)
expr_stmt|;
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|value
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|ContentRemoteResult
name|result
init|=
name|createResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RemoteValue
name|remoteValue
init|=
name|result
operator|.
name|getColumnValue
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
argument_list|,
name|remoteValue
operator|.
name|asMultiDecimal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSelectorNotAvailable
parameter_list|()
block|{
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getPath
argument_list|(
literal|"selector"
argument_list|)
expr_stmt|;
name|createResult
argument_list|(
name|row
argument_list|)
operator|.
name|getSelectorPath
argument_list|(
literal|"selector"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelector
parameter_list|()
block|{
name|ResultRow
name|row
init|=
name|mock
argument_list|(
name|ResultRow
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"path"
argument_list|)
operator|.
name|when
argument_list|(
name|row
argument_list|)
operator|.
name|getPath
argument_list|(
literal|"selector"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|createResult
argument_list|(
name|row
argument_list|)
operator|.
name|getSelectorPath
argument_list|(
literal|"selector"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|toFormattedDates
parameter_list|(
name|Date
modifier|...
name|dates
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Date
name|date
range|:
name|dates
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|toFormattedDate
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|String
name|toFormattedDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
return|return
name|ISO8601
operator|.
name|format
argument_list|(
name|toCalendar
argument_list|(
name|date
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Calendar
name|toCalendar
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|Calendar
name|calendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|calendar
operator|.
name|setTimeInMillis
argument_list|(
name|date
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|calendar
return|;
block|}
block|}
end_class

end_unit

