begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_comment
comment|/**  * Composite commit hook. Maintains a list of component hooks and takes  * care of calling them in proper sequence.  */
end_comment

begin_class
specifier|public
class|class
name|CompositeHook
implements|implements
name|CommitHook
block|{
specifier|public
specifier|static
name|CommitHook
name|compose
parameter_list|(
annotation|@
name|NotNull
name|Collection
argument_list|<
name|CommitHook
argument_list|>
name|hooks
parameter_list|)
block|{
switch|switch
condition|(
name|hooks
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|EmptyHook
operator|.
name|INSTANCE
return|;
case|case
literal|1
case|:
return|return
name|hooks
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
default|default:
return|return
operator|new
name|CompositeHook
argument_list|(
name|hooks
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|final
name|Collection
argument_list|<
name|CommitHook
argument_list|>
name|hooks
decl_stmt|;
specifier|private
name|CompositeHook
parameter_list|(
annotation|@
name|NotNull
name|Collection
argument_list|<
name|CommitHook
argument_list|>
name|hooks
parameter_list|)
block|{
name|this
operator|.
name|hooks
operator|=
name|hooks
expr_stmt|;
block|}
specifier|public
name|CompositeHook
parameter_list|(
name|CommitHook
modifier|...
name|hooks
parameter_list|)
block|{
name|this
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|hooks
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|NodeState
name|processCommit
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeState
name|newState
init|=
name|after
decl_stmt|;
for|for
control|(
name|CommitHook
name|hook
range|:
name|hooks
control|)
block|{
name|newState
operator|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|newState
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|newState
return|;
block|}
block|}
end_class

end_unit

