begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkPositionIndexes
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newConcurrentMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|getBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|closeQuietly
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentWriter
operator|.
name|BLOCK_SIZE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|WritableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|HexDump
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|ReferenceCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_comment
comment|/**  * A list of records.  *<p>  * Record data is not kept in memory, but some entries are cached (templates,  * all strings in the segment).  *<p>  * This class includes method to read records from the raw bytes.  */
end_comment

begin_class
specifier|public
class|class
name|Segment
block|{
comment|/**      * Number of bytes used for storing a record identifier. One byte      * is used for identifying the segment and two for the record offset      * within that segment.      */
specifier|static
specifier|final
name|int
name|RECORD_ID_BYTES
init|=
literal|1
operator|+
literal|2
decl_stmt|;
comment|/**      * The limit on segment references within one segment. Since record      * identifiers use one byte to indicate the referenced segment, a single      * segment can hold references to up to 255 segments plus itself.      */
specifier|static
specifier|final
name|int
name|SEGMENT_REFERENCE_LIMIT
init|=
operator|(
literal|1
operator|<<
literal|8
operator|)
operator|-
literal|1
decl_stmt|;
comment|// 255
comment|/**      * The number of bytes (or bits of address space) to use for the      * alignment boundary of segment records.      */
specifier|public
specifier|static
specifier|final
name|int
name|RECORD_ALIGN_BITS
init|=
literal|2
decl_stmt|;
comment|// align at the four-byte boundary
comment|/**      * Maximum segment size. Record identifiers are stored as three-byte      * sequences with the first byte indicating the segment and the next      * two the offset within that segment. Since all records are aligned      * at four-byte boundaries, the two bytes can address up to 256kB of      * record data.      */
specifier|public
specifier|static
specifier|final
name|int
name|MAX_SEGMENT_SIZE
init|=
literal|1
operator|<<
operator|(
literal|16
operator|+
name|RECORD_ALIGN_BITS
operator|)
decl_stmt|;
comment|// 256kB
comment|/**      * The size limit for small values. The variable length of small values      * is encoded as a single byte with the high bit as zero, which gives us      * seven bits for encoding the length of the value.      */
specifier|static
specifier|final
name|int
name|SMALL_LIMIT
init|=
literal|1
operator|<<
literal|7
decl_stmt|;
comment|/**      * The size limit for medium values. The variable length of medium values      * is encoded as two bytes with the highest bits of the first byte set to      * one and zero, which gives us 14 bits for encoding the length of the      * value. And since small values are never stored as medium ones, we can      * extend the size range to cover that many longer values.      */
specifier|public
specifier|static
specifier|final
name|int
name|MEDIUM_LIMIT
init|=
operator|(
literal|1
operator|<<
operator|(
literal|16
operator|-
literal|2
operator|)
operator|)
operator|+
name|SMALL_LIMIT
decl_stmt|;
comment|/**      * Maximum size of small blob IDs. A small blob ID is stored in a value      * record whose length field contains the pattern "1110" in its most      * significant bits. Since two bytes are used to store both the bit pattern      * and the actual length of the blob ID, a maximum of 2^12 values can be      * stored in the length field.      */
specifier|public
specifier|static
specifier|final
name|int
name|BLOB_ID_SMALL_LIMIT
init|=
literal|1
operator|<<
literal|12
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|REF_COUNT_OFFSET
init|=
literal|5
decl_stmt|;
specifier|static
specifier|final
name|int
name|ROOT_COUNT_OFFSET
init|=
literal|6
decl_stmt|;
specifier|static
specifier|final
name|int
name|BLOBREF_COUNT_OFFSET
init|=
literal|8
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|GC_GEN_OFFSET
init|=
literal|10
decl_stmt|;
specifier|private
specifier|final
name|SegmentTracker
name|tracker
decl_stmt|;
specifier|private
specifier|final
name|SegmentId
name|id
decl_stmt|;
specifier|private
specifier|final
name|ByteBuffer
name|data
decl_stmt|;
comment|/**      * Version of the segment storage format.      */
specifier|private
specifier|final
name|SegmentVersion
name|version
decl_stmt|;
comment|/**      * Referenced segment identifiers. Entries are initialized lazily in      * {@link #getRefId(int)}. Set to {@code null} for bulk segments.      */
specifier|private
specifier|final
name|SegmentId
index|[]
name|refids
decl_stmt|;
comment|/**      * String records read from segment. Used to avoid duplicate      * copies and repeated parsing of the same strings.      *      * @deprecated  Superseded by {@link #stringCache} unless      * {@link SegmentTracker#DISABLE_STRING_CACHE} is {@code true}.      */
annotation|@
name|Deprecated
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|strings
decl_stmt|;
specifier|private
specifier|final
name|Function
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|loadString
init|=
operator|new
name|Function
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|Integer
name|offset
parameter_list|)
block|{
return|return
name|loadString
argument_list|(
name|offset
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**      * Cache for string records or {@code null} if {@link #strings} is used for caching      */
specifier|private
specifier|final
name|StringCache
name|stringCache
decl_stmt|;
comment|/**      * Template records read from segment. Used to avoid duplicate      * copies and repeated parsing of the same templates.      */
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|Integer
argument_list|,
name|Template
argument_list|>
name|templates
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|DISABLE_TEMPLATE_CACHE
init|=
name|getBoolean
argument_list|(
literal|"oak.segment.disableTemplateCache"
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|accessed
decl_stmt|;
comment|/**      * Decode a 4 byte aligned segment offset.      * @param offset  4 byte aligned segment offset      * @return decoded segment offset      */
specifier|public
specifier|static
name|int
name|decode
parameter_list|(
name|short
name|offset
parameter_list|)
block|{
return|return
operator|(
name|offset
operator|&
literal|0xffff
operator|)
operator|<<
name|RECORD_ALIGN_BITS
return|;
block|}
comment|/**      * Encode a segment offset into a 4 byte aligned address packed into a {@code short}.      * @param offset  segment offset      * @return  encoded segment offset packed into a {@code short}      */
specifier|public
specifier|static
name|short
name|encode
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
call|(
name|short
call|)
argument_list|(
name|offset
operator|>>
name|RECORD_ALIGN_BITS
argument_list|)
return|;
block|}
comment|/**      * Align an {@code address} on the given {@code boundary}      *      * @param address     address to align      * @param boundary    boundary to align to      * @return  {@code n = address + a} such that {@code n % boundary == 0} and      *          {@code 0<= a< boundary}.      */
specifier|public
specifier|static
name|int
name|align
parameter_list|(
name|int
name|address
parameter_list|,
name|int
name|boundary
parameter_list|)
block|{
return|return
operator|(
name|address
operator|+
name|boundary
operator|-
literal|1
operator|)
operator|&
operator|~
operator|(
name|boundary
operator|-
literal|1
operator|)
return|;
block|}
specifier|public
name|Segment
parameter_list|(
name|SegmentTracker
name|tracker
parameter_list|,
name|SegmentId
name|id
parameter_list|,
name|ByteBuffer
name|data
parameter_list|)
block|{
name|this
argument_list|(
name|tracker
argument_list|,
name|id
argument_list|,
name|data
argument_list|,
name|SegmentVersion
operator|.
name|V_11
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Segment
parameter_list|(
name|SegmentTracker
name|tracker
parameter_list|,
specifier|final
name|SegmentId
name|id
parameter_list|,
specifier|final
name|ByteBuffer
name|data
parameter_list|,
name|SegmentVersion
name|version
parameter_list|)
block|{
name|this
operator|.
name|tracker
operator|=
name|checkNotNull
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|checkNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|tracker
operator|.
name|getStringCache
argument_list|()
operator|==
literal|null
condition|)
block|{
name|strings
operator|=
name|newConcurrentMap
argument_list|()
expr_stmt|;
name|stringCache
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|strings
operator|=
literal|null
expr_stmt|;
name|stringCache
operator|=
name|tracker
operator|.
name|getStringCache
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|DISABLE_TEMPLATE_CACHE
condition|)
block|{
name|templates
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|templates
operator|=
name|newConcurrentMap
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|data
operator|=
name|checkNotNull
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|.
name|isDataSegmentId
argument_list|()
condition|)
block|{
name|byte
name|segmentVersion
init|=
name|data
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|data
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
literal|'0'
operator|&&
name|data
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|==
literal|'a'
operator|&&
name|data
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|==
literal|'K'
operator|&&
name|SegmentVersion
operator|.
name|isValid
argument_list|(
name|segmentVersion
argument_list|)
argument_list|,
operator|new
name|Object
argument_list|()
block|{
comment|// Defer evaluation of error message
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Invalid segment format. Dumping segment "
operator|+
name|id
operator|+
literal|"\n"
operator|+
name|toHex
argument_list|(
name|data
operator|.
name|array
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|refids
operator|=
operator|new
name|SegmentId
index|[
name|getRefCount
argument_list|()
index|]
expr_stmt|;
name|this
operator|.
name|refids
index|[
literal|0
index|]
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|SegmentVersion
operator|.
name|fromByte
argument_list|(
name|segmentVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|refids
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|toHex
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|HexDump
operator|.
name|dump
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|out
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|(
name|Charsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|"Error dumping segment: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
return|;
block|}
finally|finally
block|{
name|closeQuietly
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
name|Segment
parameter_list|(
name|SegmentTracker
name|tracker
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|String
name|info
parameter_list|)
block|{
name|this
operator|.
name|tracker
operator|=
name|checkNotNull
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|tracker
operator|.
name|newDataSegmentId
argument_list|()
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
if|if
condition|(
name|tracker
operator|.
name|getStringCache
argument_list|()
operator|==
literal|null
condition|)
block|{
name|strings
operator|=
name|newConcurrentMap
argument_list|()
expr_stmt|;
name|stringCache
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|strings
operator|=
literal|null
expr_stmt|;
name|stringCache
operator|=
name|tracker
operator|.
name|getStringCache
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|DISABLE_TEMPLATE_CACHE
condition|)
block|{
name|templates
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|templates
operator|=
name|newConcurrentMap
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|data
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|checkNotNull
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|refids
operator|=
operator|new
name|SegmentId
index|[
name|SEGMENT_REFERENCE_LIMIT
operator|+
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|refids
index|[
literal|0
index|]
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|SegmentVersion
operator|.
name|fromByte
argument_list|(
name|buffer
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|.
name|setSegment
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|SegmentVersion
name|getSegmentVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
comment|/**      * Maps the given record offset to the respective position within the      * internal {@link #data} array. The validity of a record with the given      * length at the given offset is also verified.      *      * @param offset record offset      * @param length record length      * @return position within the data array      */
specifier|private
name|int
name|pos
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|checkPositionIndexes
argument_list|(
name|offset
argument_list|,
name|offset
operator|+
name|length
argument_list|,
name|MAX_SEGMENT_SIZE
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|data
operator|.
name|limit
argument_list|()
operator|-
name|MAX_SEGMENT_SIZE
operator|+
name|offset
decl_stmt|;
name|checkState
argument_list|(
name|pos
operator|>=
name|data
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pos
return|;
block|}
specifier|public
name|SegmentId
name|getSegmentId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
name|int
name|getRefCount
parameter_list|()
block|{
return|return
operator|(
name|data
operator|.
name|get
argument_list|(
name|REF_COUNT_OFFSET
argument_list|)
operator|&
literal|0xff
operator|)
operator|+
literal|1
return|;
block|}
specifier|public
name|int
name|getRootCount
parameter_list|()
block|{
return|return
name|data
operator|.
name|getShort
argument_list|(
name|ROOT_COUNT_OFFSET
argument_list|)
operator|&
literal|0xffff
return|;
block|}
specifier|public
specifier|static
name|int
name|getGcGen
parameter_list|(
name|ByteBuffer
name|data
parameter_list|)
block|{
return|return
name|data
operator|.
name|getInt
argument_list|(
name|GC_GEN_OFFSET
argument_list|)
return|;
block|}
specifier|public
name|int
name|getGcGen
parameter_list|()
block|{
return|return
name|getGcGen
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
name|RecordType
name|getRootType
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|int
name|refCount
init|=
name|getRefCount
argument_list|()
decl_stmt|;
name|checkArgument
argument_list|(
name|index
operator|<
name|getRootCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|RecordType
operator|.
name|values
argument_list|()
index|[
name|data
operator|.
name|get
argument_list|(
name|data
operator|.
name|position
argument_list|()
operator|+
name|refCount
operator|*
literal|16
operator|+
name|index
operator|*
literal|3
argument_list|)
operator|&
literal|0xff
index|]
return|;
block|}
specifier|public
name|int
name|getRootOffset
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|int
name|refCount
init|=
name|getRefCount
argument_list|()
decl_stmt|;
name|checkArgument
argument_list|(
name|index
operator|<
name|getRootCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|data
operator|.
name|getShort
argument_list|(
name|data
operator|.
name|position
argument_list|()
operator|+
name|refCount
operator|*
literal|16
operator|+
name|index
operator|*
literal|3
operator|+
literal|1
argument_list|)
operator|&
literal|0xffff
operator|)
operator|<<
name|RECORD_ALIGN_BITS
return|;
block|}
specifier|private
specifier|volatile
name|String
name|info
decl_stmt|;
comment|/**      * Returns the segment meta data of this segment or {@code null} if none is present.      *<p>      * The segment meta data is a string of the format {@code "{wid=W,sno=S,gc=G,t=T}"}      * where:      *<ul>      *<li>{@code W} is the writer id {@code wid},</li>      *<li>{@code S} is a unique, increasing sequence number corresponding to the allocation order      * of the segments in this store,</li>      *<li>{@code G} is the garbage collection generation (i.e. the number of compaction cycles      * that have been run),</li>      *<li>{@code T} is a time stamp according to {@link System#currentTimeMillis()}.</li>      *</ul>      * @return the segment meta data      */
annotation|@
name|CheckForNull
specifier|public
name|String
name|getSegmentInfo
parameter_list|()
block|{
if|if
condition|(
name|info
operator|==
literal|null
operator|&&
name|getRefCount
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|info
operator|=
name|readString
argument_list|(
name|getRootOffset
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
name|SegmentId
name|getRefId
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|refids
operator|==
literal|null
operator|||
name|index
operator|>=
name|refids
operator|.
name|length
condition|)
block|{
name|String
name|type
init|=
literal|"data"
decl_stmt|;
if|if
condition|(
operator|!
name|id
operator|.
name|isDataSegmentId
argument_list|()
condition|)
block|{
name|type
operator|=
literal|"bulk"
expr_stmt|;
block|}
name|long
name|delta
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|id
operator|.
name|getCreationTime
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"RefId '"
operator|+
name|index
operator|+
literal|"' doesn't exist in "
operator|+
name|type
operator|+
literal|" segment "
operator|+
name|id
operator|+
literal|". Creation date delta is "
operator|+
name|delta
operator|+
literal|" ms."
argument_list|)
throw|;
block|}
name|SegmentId
name|refid
init|=
name|refids
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|refid
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|refid
operator|=
name|refids
index|[
name|index
index|]
expr_stmt|;
if|if
condition|(
name|refid
operator|==
literal|null
condition|)
block|{
name|int
name|refpos
init|=
name|data
operator|.
name|position
argument_list|()
operator|+
name|index
operator|*
literal|16
decl_stmt|;
name|long
name|msb
init|=
name|data
operator|.
name|getLong
argument_list|(
name|refpos
argument_list|)
decl_stmt|;
name|long
name|lsb
init|=
name|data
operator|.
name|getLong
argument_list|(
name|refpos
operator|+
literal|8
argument_list|)
decl_stmt|;
name|refid
operator|=
name|tracker
operator|.
name|getSegmentId
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
expr_stmt|;
name|refids
index|[
name|index
index|]
operator|=
name|refid
expr_stmt|;
block|}
block|}
block|}
return|return
name|refid
return|;
block|}
specifier|public
name|List
argument_list|<
name|SegmentId
argument_list|>
name|getReferencedIds
parameter_list|()
block|{
name|int
name|refcount
init|=
name|getRefCount
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SegmentId
argument_list|>
name|ids
init|=
name|newArrayListWithCapacity
argument_list|(
name|refcount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|refid
init|=
literal|0
init|;
name|refid
operator|<
name|refcount
condition|;
name|refid
operator|++
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|getRefId
argument_list|(
name|refid
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ids
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|data
operator|.
name|remaining
argument_list|()
return|;
block|}
specifier|public
name|long
name|getCacheSize
parameter_list|()
block|{
name|int
name|size
init|=
literal|1024
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|isDirect
argument_list|()
condition|)
block|{
name|size
operator|+=
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|.
name|isDataSegmentId
argument_list|()
condition|)
block|{
name|size
operator|+=
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
comment|/**      * Writes this segment to the given output stream.      *      * @param stream stream to which this segment will be written      * @throws IOException on an IO error      */
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBuffer
name|buffer
init|=
name|data
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|WritableByteChannel
name|channel
init|=
name|Channels
operator|.
name|newChannel
argument_list|(
name|stream
argument_list|)
decl_stmt|;
while|while
condition|(
name|buffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|channel
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|collectBlobReferences
parameter_list|(
name|ReferenceCollector
name|collector
parameter_list|)
block|{
name|int
name|refcount
init|=
name|getRefCount
argument_list|()
decl_stmt|;
name|int
name|rootcount
init|=
name|data
operator|.
name|getShort
argument_list|(
name|data
operator|.
name|position
argument_list|()
operator|+
name|ROOT_COUNT_OFFSET
argument_list|)
operator|&
literal|0xffff
decl_stmt|;
name|int
name|blobrefcount
init|=
name|data
operator|.
name|getShort
argument_list|(
name|data
operator|.
name|position
argument_list|()
operator|+
name|BLOBREF_COUNT_OFFSET
argument_list|)
operator|&
literal|0xffff
decl_stmt|;
name|int
name|blobrefpos
init|=
name|data
operator|.
name|position
argument_list|()
operator|+
name|refcount
operator|*
literal|16
operator|+
name|rootcount
operator|*
literal|3
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blobrefcount
condition|;
name|i
operator|++
control|)
block|{
name|int
name|offset
init|=
operator|(
name|data
operator|.
name|getShort
argument_list|(
name|blobrefpos
operator|+
name|i
operator|*
literal|2
argument_list|)
operator|&
literal|0xffff
operator|)
operator|<<
literal|2
decl_stmt|;
name|SegmentBlob
name|blob
init|=
operator|new
name|SegmentBlob
argument_list|(
operator|new
name|RecordId
argument_list|(
name|id
argument_list|,
name|offset
argument_list|)
argument_list|)
decl_stmt|;
name|collector
operator|.
name|addReference
argument_list|(
name|blob
operator|.
name|getBlobId
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|byte
name|readByte
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
name|data
operator|.
name|get
argument_list|(
name|pos
argument_list|(
name|offset
argument_list|,
literal|1
argument_list|)
argument_list|)
return|;
block|}
name|short
name|readShort
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
name|data
operator|.
name|getShort
argument_list|(
name|pos
argument_list|(
name|offset
argument_list|,
literal|2
argument_list|)
argument_list|)
return|;
block|}
name|int
name|readInt
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
name|data
operator|.
name|getInt
argument_list|(
name|pos
argument_list|(
name|offset
argument_list|,
literal|4
argument_list|)
argument_list|)
return|;
block|}
name|long
name|readLong
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
name|data
operator|.
name|getLong
argument_list|(
name|pos
argument_list|(
name|offset
argument_list|,
literal|8
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Reads the given number of bytes starting from the given position      * in this segment.      *      * @param position position within segment      * @param buffer target buffer      * @param offset offset within target buffer      * @param length number of bytes to read      */
name|void
name|readBytes
parameter_list|(
name|int
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|checkPositionIndexes
argument_list|(
name|offset
argument_list|,
name|offset
operator|+
name|length
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|ByteBuffer
name|d
init|=
name|data
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|d
operator|.
name|position
argument_list|(
name|pos
argument_list|(
name|position
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|get
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|RecordId
name|readRecordId
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
name|int
name|pos
init|=
name|pos
argument_list|(
name|offset
argument_list|,
name|RECORD_ID_BYTES
argument_list|)
decl_stmt|;
return|return
name|internalReadRecordId
argument_list|(
name|pos
argument_list|)
return|;
block|}
specifier|private
name|RecordId
name|internalReadRecordId
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|SegmentId
name|refid
init|=
name|getRefId
argument_list|(
name|data
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|&
literal|0xff
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
operator|(
operator|(
name|data
operator|.
name|get
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|data
operator|.
name|get
argument_list|(
name|pos
operator|+
literal|2
argument_list|)
operator|&
literal|0xff
operator|)
decl_stmt|;
return|return
operator|new
name|RecordId
argument_list|(
name|refid
argument_list|,
name|offset
operator|<<
name|RECORD_ALIGN_BITS
argument_list|)
return|;
block|}
specifier|static
name|String
name|readString
parameter_list|(
specifier|final
name|RecordId
name|id
parameter_list|)
block|{
specifier|final
name|SegmentId
name|segmentId
init|=
name|id
operator|.
name|getSegmentId
argument_list|()
decl_stmt|;
name|StringCache
name|cache
init|=
name|segmentId
operator|.
name|getTracker
argument_list|()
operator|.
name|getStringCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
return|return
name|segmentId
operator|.
name|getSegment
argument_list|()
operator|.
name|readString
argument_list|(
name|id
operator|.
name|getOffset
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|long
name|msb
init|=
name|segmentId
operator|.
name|getMostSignificantBits
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|segmentId
operator|.
name|getLeastSignificantBits
argument_list|()
decl_stmt|;
return|return
name|cache
operator|.
name|getString
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|,
name|id
operator|.
name|getOffset
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|Integer
name|offset
parameter_list|)
block|{
return|return
name|segmentId
operator|.
name|getSegment
argument_list|()
operator|.
name|loadString
argument_list|(
name|offset
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
specifier|private
name|String
name|readString
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|stringCache
operator|!=
literal|null
condition|)
block|{
name|long
name|msb
init|=
name|id
operator|.
name|getMostSignificantBits
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
decl_stmt|;
return|return
name|stringCache
operator|.
name|getString
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|,
name|offset
argument_list|,
name|loadString
argument_list|)
return|;
block|}
else|else
block|{
name|String
name|string
init|=
name|strings
operator|.
name|get
argument_list|(
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|string
operator|==
literal|null
condition|)
block|{
name|string
operator|=
name|loadString
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|strings
operator|.
name|putIfAbsent
argument_list|(
name|offset
argument_list|,
name|string
argument_list|)
expr_stmt|;
comment|// only keep the first copy
block|}
return|return
name|string
return|;
block|}
block|}
specifier|private
name|String
name|loadString
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
name|int
name|pos
init|=
name|pos
argument_list|(
name|offset
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|long
name|length
init|=
name|internalReadLength
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|<
name|SMALL_LIMIT
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|length
index|]
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|data
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|position
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|length
operator|<
name|MEDIUM_LIMIT
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|length
index|]
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|data
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|position
argument_list|(
name|pos
operator|+
literal|2
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|length
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|int
name|size
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|length
operator|+
name|BLOCK_SIZE
operator|-
literal|1
operator|)
operator|/
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|ListRecord
name|list
init|=
operator|new
name|ListRecord
argument_list|(
name|internalReadRecordId
argument_list|(
name|pos
operator|+
literal|8
argument_list|)
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|SegmentStream
name|stream
init|=
operator|new
name|SegmentStream
argument_list|(
operator|new
name|RecordId
argument_list|(
name|id
argument_list|,
name|offset
argument_list|)
argument_list|,
name|list
argument_list|,
name|length
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|stream
operator|.
name|getString
argument_list|()
return|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"String is too long: "
operator|+
name|length
argument_list|)
throw|;
block|}
block|}
name|MapRecord
name|readMap
parameter_list|(
name|RecordId
name|id
parameter_list|)
block|{
return|return
operator|new
name|MapRecord
argument_list|(
name|id
argument_list|)
return|;
block|}
name|Template
name|readTemplate
parameter_list|(
specifier|final
name|RecordId
name|id
parameter_list|)
block|{
return|return
name|id
operator|.
name|getSegment
argument_list|()
operator|.
name|readTemplate
argument_list|(
name|id
operator|.
name|getOffset
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Template
name|readTemplate
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|templates
operator|==
literal|null
condition|)
block|{
return|return
name|loadTemplate
argument_list|(
name|offset
argument_list|)
return|;
block|}
name|Template
name|template
init|=
name|templates
operator|.
name|get
argument_list|(
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|template
operator|==
literal|null
condition|)
block|{
name|template
operator|=
name|loadTemplate
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|templates
operator|.
name|putIfAbsent
argument_list|(
name|offset
argument_list|,
name|template
argument_list|)
expr_stmt|;
comment|// only keep the first copy
block|}
return|return
name|template
return|;
block|}
specifier|private
name|Template
name|loadTemplate
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
name|int
name|head
init|=
name|readInt
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|boolean
name|hasPrimaryType
init|=
operator|(
name|head
operator|&
operator|(
literal|1
operator|<<
literal|31
operator|)
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|hasMixinTypes
init|=
operator|(
name|head
operator|&
operator|(
literal|1
operator|<<
literal|30
operator|)
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|zeroChildNodes
init|=
operator|(
name|head
operator|&
operator|(
literal|1
operator|<<
literal|29
operator|)
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|manyChildNodes
init|=
operator|(
name|head
operator|&
operator|(
literal|1
operator|<<
literal|28
operator|)
operator|)
operator|!=
literal|0
decl_stmt|;
name|int
name|mixinCount
init|=
operator|(
name|head
operator|>>
literal|18
operator|)
operator|&
operator|(
operator|(
literal|1
operator|<<
literal|10
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
name|int
name|propertyCount
init|=
name|head
operator|&
operator|(
operator|(
literal|1
operator|<<
literal|18
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
name|offset
operator|+=
literal|4
expr_stmt|;
name|PropertyState
name|primaryType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasPrimaryType
condition|)
block|{
name|RecordId
name|primaryId
init|=
name|readRecordId
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|primaryType
operator|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
name|readString
argument_list|(
name|primaryId
argument_list|)
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|RECORD_ID_BYTES
expr_stmt|;
block|}
name|PropertyState
name|mixinTypes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasMixinTypes
condition|)
block|{
name|String
index|[]
name|mixins
init|=
operator|new
name|String
index|[
name|mixinCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mixins
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|RecordId
name|mixinId
init|=
name|readRecordId
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|mixins
index|[
name|i
index|]
operator|=
name|readString
argument_list|(
name|mixinId
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|RECORD_ID_BYTES
expr_stmt|;
block|}
name|mixinTypes
operator|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"jcr:mixinTypes"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|mixins
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
block|}
name|String
name|childName
init|=
name|Template
operator|.
name|ZERO_CHILD_NODES
decl_stmt|;
if|if
condition|(
name|manyChildNodes
condition|)
block|{
name|childName
operator|=
name|Template
operator|.
name|MANY_CHILD_NODES
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|zeroChildNodes
condition|)
block|{
name|RecordId
name|childNameId
init|=
name|readRecordId
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|childName
operator|=
name|readString
argument_list|(
name|childNameId
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|RECORD_ID_BYTES
expr_stmt|;
block|}
name|PropertyTemplate
index|[]
name|properties
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|onOrAfter
argument_list|(
name|SegmentVersion
operator|.
name|V_11
argument_list|)
condition|)
block|{
name|properties
operator|=
name|readPropsV11
argument_list|(
name|propertyCount
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|=
name|readPropsV10
argument_list|(
name|propertyCount
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Template
argument_list|(
name|primaryType
argument_list|,
name|mixinTypes
argument_list|,
name|properties
argument_list|,
name|childName
argument_list|)
return|;
block|}
specifier|private
name|PropertyTemplate
index|[]
name|readPropsV10
parameter_list|(
name|int
name|propertyCount
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|PropertyTemplate
index|[]
name|properties
init|=
operator|new
name|PropertyTemplate
index|[
name|propertyCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propertyCount
condition|;
name|i
operator|++
control|)
block|{
name|RecordId
name|propertyNameId
init|=
name|readRecordId
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|offset
operator|+=
name|RECORD_ID_BYTES
expr_stmt|;
name|byte
name|type
init|=
name|readByte
argument_list|(
name|offset
operator|++
argument_list|)
decl_stmt|;
name|properties
index|[
name|i
index|]
operator|=
operator|new
name|PropertyTemplate
argument_list|(
name|i
argument_list|,
name|readString
argument_list|(
name|propertyNameId
argument_list|)
argument_list|,
name|Type
operator|.
name|fromTag
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|type
argument_list|)
argument_list|,
name|type
operator|<
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
specifier|private
name|PropertyTemplate
index|[]
name|readPropsV11
parameter_list|(
name|int
name|propertyCount
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|PropertyTemplate
index|[]
name|properties
init|=
operator|new
name|PropertyTemplate
index|[
name|propertyCount
index|]
decl_stmt|;
if|if
condition|(
name|propertyCount
operator|>
literal|0
condition|)
block|{
name|RecordId
name|id
init|=
name|readRecordId
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|ListRecord
name|propertyNames
init|=
operator|new
name|ListRecord
argument_list|(
name|id
argument_list|,
name|properties
operator|.
name|length
argument_list|)
decl_stmt|;
name|offset
operator|+=
name|RECORD_ID_BYTES
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propertyCount
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|type
init|=
name|readByte
argument_list|(
name|offset
operator|++
argument_list|)
decl_stmt|;
name|properties
index|[
name|i
index|]
operator|=
operator|new
name|PropertyTemplate
argument_list|(
name|i
argument_list|,
name|readString
argument_list|(
name|propertyNames
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|fromTag
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|type
argument_list|)
argument_list|,
name|type
operator|<
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|properties
return|;
block|}
name|long
name|readLength
parameter_list|(
name|RecordId
name|id
parameter_list|)
block|{
return|return
name|id
operator|.
name|getSegment
argument_list|()
operator|.
name|readLength
argument_list|(
name|id
operator|.
name|getOffset
argument_list|()
argument_list|)
return|;
block|}
name|long
name|readLength
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
name|internalReadLength
argument_list|(
name|pos
argument_list|(
name|offset
argument_list|,
literal|1
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|long
name|internalReadLength
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|int
name|length
init|=
name|data
operator|.
name|get
argument_list|(
name|pos
operator|++
argument_list|)
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
operator|(
name|length
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|length
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|length
operator|&
literal|0x40
operator|)
operator|==
literal|0
condition|)
block|{
return|return
operator|(
operator|(
name|length
operator|&
literal|0x3f
operator|)
operator|<<
literal|8
operator||
name|data
operator|.
name|get
argument_list|(
name|pos
operator|++
argument_list|)
operator|&
literal|0xff
operator|)
operator|+
name|SMALL_LIMIT
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
operator|(
name|long
operator|)
name|length
operator|&
literal|0x3f
operator|)
operator|<<
literal|56
operator||
operator|(
call|(
name|long
call|)
argument_list|(
name|data
operator|.
name|get
argument_list|(
name|pos
operator|++
argument_list|)
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|48
operator||
operator|(
call|(
name|long
call|)
argument_list|(
name|data
operator|.
name|get
argument_list|(
name|pos
operator|++
argument_list|)
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|40
operator||
operator|(
call|(
name|long
call|)
argument_list|(
name|data
operator|.
name|get
argument_list|(
name|pos
operator|++
argument_list|)
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|32
operator||
operator|(
call|(
name|long
call|)
argument_list|(
name|data
operator|.
name|get
argument_list|(
name|pos
operator|++
argument_list|)
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|24
operator||
operator|(
call|(
name|long
call|)
argument_list|(
name|data
operator|.
name|get
argument_list|(
name|pos
operator|++
argument_list|)
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|16
operator||
operator|(
call|(
name|long
call|)
argument_list|(
name|data
operator|.
name|get
argument_list|(
name|pos
operator|++
argument_list|)
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|8
operator||
operator|(
call|(
name|long
call|)
argument_list|(
name|data
operator|.
name|get
argument_list|(
name|pos
operator|++
argument_list|)
operator|&
literal|0xff
argument_list|)
operator|)
operator|)
operator|+
name|MEDIUM_LIMIT
return|;
block|}
block|}
comment|//------------------------------------------------------------< Object>--
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringWriter
name|string
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|string
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|data
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|writer
operator|.
name|format
argument_list|(
literal|"Segment %s (%d bytes)%n"
argument_list|,
name|id
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|String
name|segmentInfo
init|=
name|getSegmentInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|segmentInfo
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|format
argument_list|(
literal|"Info: %s, Generation: %d%n"
argument_list|,
name|segmentInfo
argument_list|,
name|getGcGen
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|.
name|isDataSegmentId
argument_list|()
condition|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"--------------------------------------------------------------------------"
argument_list|)
expr_stmt|;
name|int
name|refcount
init|=
name|getRefCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|refid
init|=
literal|0
init|;
name|refid
operator|<
name|refcount
condition|;
name|refid
operator|++
control|)
block|{
name|writer
operator|.
name|format
argument_list|(
literal|"reference %02x: %s%n"
argument_list|,
name|refid
argument_list|,
name|getRefId
argument_list|(
name|refid
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|rootcount
init|=
name|data
operator|.
name|getShort
argument_list|(
name|ROOT_COUNT_OFFSET
argument_list|)
operator|&
literal|0xffff
decl_stmt|;
name|int
name|pos
init|=
name|data
operator|.
name|position
argument_list|()
operator|+
name|refcount
operator|*
literal|16
decl_stmt|;
for|for
control|(
name|int
name|rootid
init|=
literal|0
init|;
name|rootid
operator|<
name|rootcount
condition|;
name|rootid
operator|++
control|)
block|{
name|writer
operator|.
name|format
argument_list|(
literal|"root %d: %s at %04x%n"
argument_list|,
name|rootid
argument_list|,
name|RecordType
operator|.
name|values
argument_list|()
index|[
name|data
operator|.
name|get
argument_list|(
name|pos
operator|+
name|rootid
operator|*
literal|3
argument_list|)
operator|&
literal|0xff
index|]
argument_list|,
name|data
operator|.
name|getShort
argument_list|(
name|pos
operator|+
name|rootid
operator|*
literal|3
operator|+
literal|1
argument_list|)
operator|&
literal|0xffff
argument_list|)
expr_stmt|;
block|}
name|int
name|blobrefcount
init|=
name|data
operator|.
name|getShort
argument_list|(
name|BLOBREF_COUNT_OFFSET
argument_list|)
operator|&
literal|0xffff
decl_stmt|;
name|pos
operator|+=
name|rootcount
operator|*
literal|3
expr_stmt|;
for|for
control|(
name|int
name|blobrefid
init|=
literal|0
init|;
name|blobrefid
operator|<
name|blobrefcount
condition|;
name|blobrefid
operator|++
control|)
block|{
name|int
name|offset
init|=
name|data
operator|.
name|getShort
argument_list|(
name|pos
operator|+
name|blobrefid
operator|*
literal|2
argument_list|)
operator|&
literal|0xffff
decl_stmt|;
name|SegmentBlob
name|blob
init|=
operator|new
name|SegmentBlob
argument_list|(
operator|new
name|RecordId
argument_list|(
name|id
argument_list|,
name|offset
operator|<<
name|RECORD_ALIGN_BITS
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|format
argument_list|(
literal|"blobref %d: %s at %04x%n"
argument_list|,
name|blobrefid
argument_list|,
name|blob
operator|.
name|getBlobId
argument_list|()
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|println
argument_list|(
literal|"--------------------------------------------------------------------------"
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|data
operator|.
name|limit
argument_list|()
operator|-
operator|(
operator|(
name|length
operator|+
literal|15
operator|)
operator|&
operator|~
literal|15
operator|)
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|data
operator|.
name|limit
argument_list|()
condition|)
block|{
name|writer
operator|.
name|format
argument_list|(
literal|"%04x: "
argument_list|,
operator|(
name|MAX_SEGMENT_SIZE
operator|-
name|data
operator|.
name|limit
argument_list|()
operator|+
name|pos
operator|)
operator|>>
name|RECORD_ALIGN_BITS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|i
operator|%
literal|4
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|+
name|i
operator|>=
name|data
operator|.
name|position
argument_list|()
condition|)
block|{
name|byte
name|b
init|=
name|data
operator|.
name|get
argument_list|(
name|pos
operator|+
name|i
argument_list|)
decl_stmt|;
name|writer
operator|.
name|format
argument_list|(
literal|"%02x "
argument_list|,
name|b
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"   "
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|pos
operator|+
name|i
operator|>=
name|data
operator|.
name|position
argument_list|()
condition|)
block|{
name|byte
name|b
init|=
name|data
operator|.
name|get
argument_list|(
name|pos
operator|+
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|>=
literal|' '
operator|&&
name|b
operator|<
literal|127
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|writer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|println
argument_list|()
expr_stmt|;
name|pos
operator|+=
literal|16
expr_stmt|;
block|}
name|writer
operator|.
name|println
argument_list|(
literal|"--------------------------------------------------------------------------"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|string
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

