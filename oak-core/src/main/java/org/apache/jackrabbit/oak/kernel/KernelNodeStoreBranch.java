begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|ChangeDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractNodeStoreBranch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * {@code NodeStoreBranch} based on {@link MicroKernel} branching and merging.  * This implementation keeps changes in memory up to a certain limit and writes  * them back to the Microkernel branch when the limit is exceeded.  */
end_comment

begin_class
specifier|public
class|class
name|KernelNodeStoreBranch
extends|extends
name|AbstractNodeStoreBranch
argument_list|<
name|KernelNodeStore
argument_list|,
name|KernelNodeState
argument_list|>
block|{
comment|/** Lock for coordinating concurrent merge operations */
specifier|private
specifier|final
name|Lock
name|mergeLock
decl_stmt|;
specifier|private
specifier|final
name|BlobSerializer
name|blobs
init|=
operator|new
name|BlobSerializer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|serialize
parameter_list|(
name|Blob
name|blob
parameter_list|)
block|{
name|KernelBlob
name|kernelBlob
decl_stmt|;
if|if
condition|(
name|blob
operator|instanceof
name|KernelBlob
condition|)
block|{
name|kernelBlob
operator|=
operator|(
name|KernelBlob
operator|)
name|blob
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|kernelBlob
operator|=
name|store
operator|.
name|createBlob
argument_list|(
name|blob
operator|.
name|getNewStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|kernelBlob
operator|.
name|getBinaryID
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|KernelNodeStoreBranch
parameter_list|(
name|KernelNodeStore
name|kernelNodeStore
parameter_list|,
name|ChangeDispatcher
name|dispatcher
parameter_list|,
name|Lock
name|mergeLock
parameter_list|,
name|KernelNodeState
name|base
parameter_list|)
block|{
name|super
argument_list|(
name|kernelNodeStore
argument_list|,
name|dispatcher
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|this
operator|.
name|mergeLock
operator|=
name|checkNotNull
argument_list|(
name|mergeLock
argument_list|)
expr_stmt|;
block|}
comment|//----------------------< AbstractNodeStoreBranch>-------------------------
annotation|@
name|Override
specifier|public
name|KernelNodeState
name|createBranch
parameter_list|(
name|KernelNodeState
name|state
parameter_list|)
block|{
return|return
name|store
operator|.
name|branch
argument_list|(
name|state
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|KernelNodeState
name|getRoot
parameter_list|()
block|{
return|return
name|store
operator|.
name|getRoot
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|KernelNodeState
name|rebase
parameter_list|(
name|KernelNodeState
name|branchHead
parameter_list|,
name|KernelNodeState
name|base
parameter_list|)
block|{
return|return
name|store
operator|.
name|rebase
argument_list|(
name|branchHead
argument_list|,
name|base
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|KernelNodeState
name|merge
parameter_list|(
name|KernelNodeState
name|branchHead
parameter_list|)
block|{
return|return
name|store
operator|.
name|merge
argument_list|(
name|branchHead
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|KernelNodeState
name|persist
parameter_list|(
name|NodeState
name|toPersist
parameter_list|,
name|KernelNodeState
name|base
parameter_list|)
block|{
name|JsopDiff
name|diff
init|=
operator|new
name|JsopDiff
argument_list|(
name|blobs
argument_list|)
decl_stmt|;
name|toPersist
operator|.
name|compareAgainstBaseState
argument_list|(
name|base
argument_list|,
name|diff
argument_list|)
expr_stmt|;
return|return
name|store
operator|.
name|commit
argument_list|(
name|diff
operator|.
name|toString
argument_list|()
argument_list|,
name|base
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|KernelNodeState
name|copy
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|target
parameter_list|,
name|KernelNodeState
name|base
parameter_list|)
block|{
return|return
name|store
operator|.
name|commit
argument_list|(
literal|"*\""
operator|+
name|source
operator|+
literal|"\":\""
operator|+
name|target
operator|+
literal|'"'
argument_list|,
name|base
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|KernelNodeState
name|move
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|target
parameter_list|,
name|KernelNodeState
name|base
parameter_list|)
block|{
return|return
name|store
operator|.
name|commit
argument_list|(
literal|">\""
operator|+
name|source
operator|+
literal|"\":\""
operator|+
name|target
operator|+
literal|'"'
argument_list|,
name|base
argument_list|)
return|;
block|}
comment|//------------------------< NodeStoreBranch>-------------------------------
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|merge
parameter_list|(
annotation|@
name|Nonnull
name|CommitHook
name|hook
parameter_list|,
annotation|@
name|Nullable
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|mergeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|super
operator|.
name|merge
argument_list|(
name|hook
argument_list|,
name|info
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Kernel"
argument_list|,
literal|1
argument_list|,
literal|"Failed to merge changes to the underlying MicroKernel"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|mergeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

