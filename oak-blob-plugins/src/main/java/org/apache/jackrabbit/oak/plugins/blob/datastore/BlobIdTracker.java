begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|FileLineDifferenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
operator|.
name|ExecutorCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|SharedDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
operator|.
name|alwaysTrue
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|transform
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
operator|.
name|fileTreeTraverser
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
operator|.
name|move
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
operator|.
name|newWriter
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|io
operator|.
name|File
operator|.
name|createTempFile
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|System
operator|.
name|currentTimeMillis
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|synchronizedList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|UUID
operator|.
name|randomUUID
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|copyFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|forceDelete
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|forceMkdir
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|lineIterator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|touch
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
operator|.
name|concat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
operator|.
name|removeExtension
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|closeQuietly
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|BurnOnCloseFileIterator
operator|.
name|wrap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|append
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|copy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|sort
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|writeStrings
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|BlobIdTracker
operator|.
name|BlobIdStore
operator|.
name|Type
operator|.
name|GENERATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|BlobIdTracker
operator|.
name|BlobIdStore
operator|.
name|Type
operator|.
name|IN_PROCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|BlobIdTracker
operator|.
name|BlobIdStore
operator|.
name|Type
operator|.
name|REFS
import|;
end_import

begin_comment
comment|/**  * Tracks the blob ids available or added in the blob store using the {@link BlobIdStore} .  *  */
end_comment

begin_class
specifier|public
class|class
name|BlobIdTracker
implements|implements
name|Closeable
implements|,
name|BlobTracker
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlobIdTracker
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * System property to skip tracker. If set will skip:      * * Snapshots (No-op)      * * Retrieve (return empty)      * * Add (No-op)      */
specifier|private
specifier|final
name|boolean
name|SKIP_TRACKER
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"oak.datastore.skipTracker"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|datastoreMeta
init|=
literal|"blobids"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|fileNamePrefix
init|=
literal|"blob"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|mergedFileSuffix
init|=
literal|".refs"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|snapshotMarkerSuffix
init|=
literal|".snapshot"
decl_stmt|;
comment|/* Local instance identifier */
specifier|private
specifier|final
name|String
name|instanceId
init|=
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|SharedDataStore
name|datastore
decl_stmt|;
specifier|private
specifier|final
name|long
name|snapshotInterval
decl_stmt|;
specifier|private
specifier|final
name|ActiveDeletionTracker
name|deleteTracker
decl_stmt|;
specifier|protected
name|BlobIdStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|ScheduledExecutorService
name|scheduler
decl_stmt|;
specifier|private
name|String
name|prefix
decl_stmt|;
specifier|private
name|File
name|rootDir
decl_stmt|;
specifier|public
name|BlobIdTracker
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|long
name|snapshotIntervalSecs
parameter_list|,
name|SharedDataStore
name|datastore
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|path
argument_list|,
name|repositoryId
argument_list|,
name|newSingleThreadScheduledExecutor
argument_list|()
argument_list|,
name|snapshotIntervalSecs
argument_list|,
name|snapshotIntervalSecs
argument_list|,
name|datastore
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BlobIdTracker
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|repositoryId
parameter_list|,
name|ScheduledExecutorService
name|scheduler
parameter_list|,
name|long
name|snapshotDelaySecs
parameter_list|,
name|long
name|snapshotIntervalSecs
parameter_list|,
name|SharedDataStore
name|datastore
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|root
init|=
name|concat
argument_list|(
name|path
argument_list|,
name|datastoreMeta
argument_list|)
decl_stmt|;
name|this
operator|.
name|rootDir
operator|=
operator|new
name|File
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|this
operator|.
name|datastore
operator|=
name|datastore
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|snapshotInterval
operator|=
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|snapshotIntervalSecs
argument_list|)
expr_stmt|;
try|try
block|{
name|forceMkdir
argument_list|(
name|rootDir
argument_list|)
expr_stmt|;
name|prefix
operator|=
name|fileNamePrefix
operator|+
literal|"-"
operator|+
name|repositoryId
expr_stmt|;
name|this
operator|.
name|store
operator|=
operator|new
name|BlobIdStore
argument_list|(
name|rootDir
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|SnapshotJob
argument_list|()
argument_list|,
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|snapshotDelaySecs
argument_list|)
argument_list|,
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|snapshotIntervalSecs
argument_list|)
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|deleteTracker
operator|=
operator|new
name|ActiveDeletionTracker
argument_list|(
name|rootDir
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error initializing blob tracker"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|ActiveDeletionTracker
name|getDeleteTracker
parameter_list|()
block|{
return|return
name|deleteTracker
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|File
name|recs
parameter_list|,
name|Options
name|options
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|options
operator|==
name|Options
operator|.
name|ACTIVE_DELETION
condition|)
block|{
name|globalMerge
argument_list|()
expr_stmt|;
name|deleteTracker
operator|.
name|track
argument_list|(
name|recs
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|removeRecords
argument_list|(
name|recs
argument_list|)
expr_stmt|;
name|snapshot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|File
name|recs
parameter_list|)
throws|throws
name|IOException
block|{
name|store
operator|.
name|removeRecords
argument_list|(
name|recs
argument_list|)
expr_stmt|;
name|snapshot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|recs
parameter_list|)
throws|throws
name|IOException
block|{
name|store
operator|.
name|removeRecords
argument_list|(
name|recs
argument_list|)
expr_stmt|;
name|snapshot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|SKIP_TRACKER
condition|)
block|{
name|store
operator|.
name|addRecord
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|recs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|SKIP_TRACKER
condition|)
block|{
name|store
operator|.
name|addRecords
argument_list|(
name|recs
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|File
name|recs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|SKIP_TRACKER
condition|)
block|{
name|store
operator|.
name|addRecords
argument_list|(
name|recs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Retrieves all the reference files available in the DataStore and merges      * them to the local store and then returns an iterator over it.      * This way the ids returned are as recent as the snapshots taken on all      * instances/repositories connected to the DataStore.      *<p>      * The iterator returned ia a Closeable instance and should be closed by calling #close().      *      * @return iterator over all the blob ids available      * @throws IOException      */
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|get
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|SKIP_TRACKER
condition|)
block|{
name|globalMerge
argument_list|()
expr_stmt|;
return|return
name|store
operator|.
name|getRecords
argument_list|()
return|;
block|}
return|return
name|Iterators
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in retrieving blob records iterator"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|File
name|get
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|SKIP_TRACKER
condition|)
block|{
name|globalMerge
argument_list|()
expr_stmt|;
return|return
name|store
operator|.
name|getRecords
argument_list|(
name|path
argument_list|)
return|;
block|}
return|return
operator|new
name|File
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|/**      * Retrieves and merges all the blob id records available in the DataStore from different      * instances sharing the DataStore (cluster nodes/different repositories).      *      * @throws IOException      */
specifier|private
name|void
name|globalMerge
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|Stopwatch
name|watch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Retrieving all blob id files available form the DataStore"
argument_list|)
expr_stmt|;
comment|// Download all the blob reference records from the data store
name|Iterable
argument_list|<
name|DataRecord
argument_list|>
name|refRecords
init|=
name|datastore
operator|.
name|getAllMetadataRecords
argument_list|(
name|fileNamePrefix
argument_list|)
decl_stmt|;
comment|// Download all the corresponding files for the records
name|List
argument_list|<
name|File
argument_list|>
name|refFiles
init|=
name|newArrayList
argument_list|(
name|transform
argument_list|(
name|refRecords
argument_list|,
operator|new
name|Function
argument_list|<
name|DataRecord
argument_list|,
name|File
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|File
name|apply
parameter_list|(
name|DataRecord
name|input
parameter_list|)
block|{
name|InputStream
name|inputStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|inputStream
operator|=
name|input
operator|.
name|getStream
argument_list|()
expr_stmt|;
return|return
name|copy
argument_list|(
name|inputStream
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error copying data store file locally {}"
argument_list|,
name|input
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeQuietly
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Retrieved all blob id files in [{}]"
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Merge all the downloaded files in to the local store
name|watch
operator|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|refFiles
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Merged all retrieved blob id files in [{}]"
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove all the data store records as they have been merged
name|watch
operator|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
expr_stmt|;
for|for
control|(
name|DataRecord
name|rec
range|:
name|refRecords
control|)
block|{
name|datastore
operator|.
name|deleteMetadataRecord
argument_list|(
name|rec
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleted metadata record {}"
argument_list|,
name|rec
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted all blob id metadata files in [{}]"
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in merging blob records iterator from the data store"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|snapshot
parameter_list|()
throws|throws
name|IOException
block|{
name|snapshot
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Takes a snapshot on the tracker.      * to other cluster nodes/repositories connected to the DataStore.      *      * @throws IOException      */
specifier|private
name|void
name|snapshot
parameter_list|(
name|boolean
name|skipStoreSnapshot
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|SKIP_TRACKER
condition|)
block|{
name|Stopwatch
name|watch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|skipStoreSnapshot
condition|)
block|{
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Completed snapshot in [{}]"
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|watch
operator|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
expr_stmt|;
name|File
name|recs
init|=
name|store
operator|.
name|getBlobRecordsFile
argument_list|()
decl_stmt|;
name|datastore
operator|.
name|addMetadataRecord
argument_list|(
name|recs
argument_list|,
operator|(
name|prefix
operator|+
name|instanceId
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|mergedFileSuffix
operator|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added blob id metadata record in DataStore in [{}]"
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|forceDelete
argument_list|(
name|recs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted blob record file after snapshot and upload {}"
argument_list|,
name|recs
argument_list|)
expr_stmt|;
comment|// Update the timestamp for the snapshot marker
name|touch
argument_list|(
name|getSnapshotMarkerFile
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updated snapshot marker"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to in cleaning up {}"
argument_list|,
name|recs
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error taking snapshot"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Snapshot error"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|File
name|getSnapshotMarkerFile
parameter_list|()
block|{
name|File
name|snapshotMarker
init|=
operator|new
name|File
argument_list|(
name|rootDir
argument_list|,
name|prefix
operator|+
name|snapshotMarkerSuffix
argument_list|)
decl_stmt|;
return|return
name|snapshotMarker
return|;
block|}
comment|/**      * Closes the tracker and the underlying store.      *      * @throws IOException      */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
operator|new
name|ExecutorCloser
argument_list|(
name|scheduler
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tracking any active deletions  store for managing the blob reference      */
specifier|public
specifier|static
class|class
name|ActiveDeletionTracker
block|{
comment|/* Suffix for tracking file */
specifier|private
specifier|static
specifier|final
name|String
name|DEL_SUFFIX
init|=
literal|".del"
decl_stmt|;
comment|/* deletion tracking file */
specifier|private
name|File
name|delFile
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DELIM
init|=
literal|","
decl_stmt|;
comment|/* Lock for operations on the active deletions file */
specifier|private
specifier|final
name|ReentrantLock
name|lock
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|transformer
init|=
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|String
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
return|return
name|input
operator|.
name|split
argument_list|(
name|DELIM
argument_list|)
index|[
literal|0
index|]
return|;
block|}
return|return
literal|""
return|;
block|}
block|}
decl_stmt|;
name|ActiveDeletionTracker
parameter_list|(
name|File
name|rootDir
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|delFile
operator|=
operator|new
name|File
argument_list|(
name|rootDir
argument_list|,
name|prefix
operator|+
name|DEL_SUFFIX
argument_list|)
expr_stmt|;
name|touch
argument_list|(
name|delFile
argument_list|)
expr_stmt|;
name|lock
operator|=
operator|new
name|ReentrantLock
argument_list|()
expr_stmt|;
block|}
comment|/**          * Adds the ids in the file provided to the tracked deletions.          * @param recs the deleted ids to track          */
specifier|public
name|void
name|track
parameter_list|(
name|File
name|recs
parameter_list|)
throws|throws
name|IOException
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|append
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|recs
argument_list|)
argument_list|,
name|delFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sort
argument_list|(
name|delFile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|File
name|retrieve
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|copiedRecsFile
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|copyFile
argument_list|(
name|delFile
argument_list|,
name|copiedRecsFile
argument_list|)
expr_stmt|;
return|return
name|copiedRecsFile
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in retrieving active deletions file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**          * Remove ids given by the file in parameter from the deletions being tracked.          *          * @param recs the sorted file containing ids to be removed from tracker          */
specifier|public
name|void
name|reconcile
parameter_list|(
name|File
name|recs
parameter_list|)
throws|throws
name|IOException
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Remove and spool the remaining ids into a temp file
name|File
name|toBeRemoved
init|=
name|createTempFile
argument_list|(
literal|"toBeRemoved"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|File
name|removed
init|=
name|createTempFile
argument_list|(
literal|"removed"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FileLineDifferenceIterator
name|toBeRemovedIterator
init|=
literal|null
decl_stmt|;
name|FileLineDifferenceIterator
name|removeIterator
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Gather all records which are not required to be tracked anymore
name|toBeRemovedIterator
operator|=
operator|new
name|FileLineDifferenceIterator
argument_list|(
name|recs
argument_list|,
name|delFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writeStrings
argument_list|(
name|toBeRemovedIterator
argument_list|,
name|toBeRemoved
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Remove records not to be tracked
name|removeIterator
operator|=
operator|new
name|FileLineDifferenceIterator
argument_list|(
name|toBeRemoved
argument_list|,
name|delFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writeStrings
argument_list|(
name|removeIterator
argument_list|,
name|removed
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|toBeRemovedIterator
operator|!=
literal|null
condition|)
block|{
name|toBeRemovedIterator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|removeIterator
operator|!=
literal|null
condition|)
block|{
name|removeIterator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|toBeRemoved
operator|!=
literal|null
condition|)
block|{
name|toBeRemoved
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
name|move
argument_list|(
name|removed
argument_list|,
name|delFile
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"removed active delete records"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          * Return any ids not existing in the deletions being tracked from the ids in file parameter.          *          * @param recs the file to search for ids existing in the deletions here          * @return          */
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|(
name|File
name|recs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FileLineDifferenceIterator
argument_list|(
name|delFile
argument_list|,
name|recs
argument_list|,
name|transformer
argument_list|)
return|;
block|}
block|}
comment|/**      * Local store for managing the blob reference      */
specifier|static
class|class
name|BlobIdStore
implements|implements
name|Closeable
block|{
comment|/* Suffix for a snapshot generation file */
specifier|private
specifier|static
specifier|final
name|String
name|genFileNameSuffix
init|=
literal|".gen"
decl_stmt|;
comment|/* Suffix for in process file */
specifier|private
specifier|static
specifier|final
name|String
name|workingCopySuffix
init|=
literal|".process"
decl_stmt|;
comment|/* The current writer where all blob ids are being appended */
specifier|private
name|BufferedWriter
name|writer
decl_stmt|;
comment|/* In-process file */
specifier|private
name|File
name|processFile
decl_stmt|;
comment|/* All available generations that need to be merged */
specifier|private
specifier|final
name|List
argument_list|<
name|File
argument_list|>
name|generations
decl_stmt|;
specifier|private
specifier|final
name|File
name|rootDir
decl_stmt|;
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
comment|/* Lock for operations on references file */
specifier|private
specifier|final
name|ReentrantLock
name|refLock
decl_stmt|;
comment|/* Lock for snapshot */
specifier|private
specifier|final
name|ReentrantLock
name|snapshotLock
decl_stmt|;
name|BlobIdStore
parameter_list|(
name|File
name|rootDir
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|rootDir
operator|=
name|rootDir
expr_stmt|;
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|this
operator|.
name|refLock
operator|=
operator|new
name|ReentrantLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|snapshotLock
operator|=
operator|new
name|ReentrantLock
argument_list|()
expr_stmt|;
comment|// Retrieve the process file if it exists
name|processFile
operator|=
name|fileTreeTraverser
argument_list|()
operator|.
name|breadthFirstTraversal
argument_list|(
name|rootDir
argument_list|)
operator|.
name|firstMatch
argument_list|(
name|IN_PROCESS
operator|.
name|filter
argument_list|()
argument_list|)
operator|.
name|orNull
argument_list|()
expr_stmt|;
comment|// Get the List of all generations available.
name|generations
operator|=
name|synchronizedList
argument_list|(
name|newArrayList
argument_list|(
name|fileTreeTraverser
argument_list|()
operator|.
name|breadthFirstTraversal
argument_list|(
name|rootDir
argument_list|)
operator|.
name|filter
argument_list|(
name|GENERATION
operator|.
name|filter
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Close/rename any existing in process
name|nextGeneration
argument_list|()
expr_stmt|;
block|}
comment|/**          * Add a blob id to the tracking file.          *          * @param id id to track          * @throws IOException          */
specifier|protected
specifier|synchronized
name|void
name|addRecord
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|writer
operator|.
name|newLine
argument_list|()
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added record {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**          * Returns an iterator on the tracked blob ids.          *          * @return record iterator          * @throws IOException          */
specifier|protected
name|Iterator
argument_list|<
name|String
argument_list|>
name|getRecords
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
comment|// Get a temp file path
name|String
name|path
init|=
name|createTempFile
argument_list|(
literal|"temp"
argument_list|,
literal|null
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
return|return
name|wrap
argument_list|(
name|lineIterator
argument_list|(
name|getRecords
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in retrieving blob records iterator"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**          * Returns a file with the tracked blob ids.          *          * @param path path of the file          * @return File containing tracked file ids          * @throws IOException          */
specifier|protected
name|File
name|getRecords
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|refLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|File
name|copiedRecsFile
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|copyFile
argument_list|(
name|getBlobRecordsFile
argument_list|()
argument_list|,
name|copiedRecsFile
argument_list|)
expr_stmt|;
return|return
name|copiedRecsFile
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in retrieving blob records file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|refLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          * Returns the blob references file          *          * @return blob reference file          * @throws IOException          */
specifier|protected
name|File
name|getBlobRecordsFile
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|refs
init|=
operator|new
name|File
argument_list|(
name|rootDir
argument_list|,
name|prefix
operator|+
name|REFS
operator|.
name|getFileNameSuffix
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|refs
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"File created {}"
argument_list|,
name|refs
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|refs
return|;
block|}
comment|/**          * Merges the given files with the references file and deletes the files.          *          * @param refFiles files to merge          * @param doSort whether to sort while merging          * @throws IOException          */
specifier|protected
name|void
name|merge
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|refFiles
parameter_list|,
name|boolean
name|doSort
parameter_list|)
throws|throws
name|IOException
block|{
name|refLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|refFiles
operator|!=
literal|null
operator|&&
operator|!
name|refFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|File
name|merged
init|=
operator|new
name|File
argument_list|(
name|rootDir
argument_list|,
name|prefix
operator|+
name|REFS
operator|.
name|getFileNameSuffix
argument_list|()
argument_list|)
decl_stmt|;
name|append
argument_list|(
name|refFiles
argument_list|,
name|merged
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Merged files into references {}"
argument_list|,
name|refFiles
argument_list|)
expr_stmt|;
comment|// Clear the references as not needed
name|refFiles
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|doSort
condition|)
block|{
name|sort
argument_list|(
name|getBlobRecordsFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|refLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          * Removes ids obtained by the given iterator from the tracked references.          * The iterator has to be closed by the caller.          *          * @param recs iterator over records to remove          * @throws IOException          */
specifier|protected
name|void
name|removeRecords
parameter_list|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|recs
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Spool the ids to be deleted into a file and sort
name|File
name|deleted
init|=
name|createTempFile
argument_list|(
literal|"deleted"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|writeStrings
argument_list|(
name|recs
argument_list|,
name|deleted
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|removeRecords
argument_list|(
name|deleted
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Removed records"
argument_list|)
expr_stmt|;
block|}
comment|/**          * Removes ids obtained by the given file from the tracked references.          * File is deleted before returning.          *          * @param recs file of records to delete          * @throws IOException          */
specifier|protected
name|void
name|removeRecords
parameter_list|(
name|File
name|recs
parameter_list|)
throws|throws
name|IOException
block|{
comment|// do a snapshot
name|snapshot
argument_list|()
expr_stmt|;
name|refLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|sort
argument_list|(
name|getBlobRecordsFile
argument_list|()
argument_list|)
expr_stmt|;
name|sort
argument_list|(
name|recs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Sorted files"
argument_list|)
expr_stmt|;
comment|// Remove and spool the remaining ids into a temp file
name|File
name|temp
init|=
name|createTempFile
argument_list|(
literal|"sorted"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FileLineDifferenceIterator
name|iterator
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iterator
operator|=
operator|new
name|FileLineDifferenceIterator
argument_list|(
name|recs
argument_list|,
name|getBlobRecordsFile
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writeStrings
argument_list|(
name|iterator
argument_list|,
name|temp
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|iterator
operator|!=
literal|null
condition|)
block|{
name|iterator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|File
name|blobRecs
init|=
name|getBlobRecordsFile
argument_list|()
decl_stmt|;
name|move
argument_list|(
name|temp
argument_list|,
name|blobRecs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"removed records"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|refLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
try|try
block|{
name|forceDelete
argument_list|(
name|recs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to delete file {}"
argument_list|,
name|recs
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**          * Opens a new generation file and a writer over it.          *          * @throws IOException          */
specifier|private
specifier|synchronized
name|void
name|nextGeneration
parameter_list|()
throws|throws
name|IOException
block|{
name|close
argument_list|()
expr_stmt|;
name|processFile
operator|=
operator|new
name|File
argument_list|(
name|rootDir
argument_list|,
name|prefix
operator|+
name|IN_PROCESS
operator|.
name|getFileNameSuffix
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|=
name|newWriter
argument_list|(
name|processFile
argument_list|,
name|UTF_8
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created new process file and writer over {} "
argument_list|,
name|processFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**          * Adds all the ids backed by the iterator into the references.          * Closing the iterator is the responsibility of the caller.          *          * @param recs iterator over records to add          * @throws IOException          */
specifier|protected
name|void
name|addRecords
parameter_list|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|recs
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Spool contents into a temp file
name|File
name|added
init|=
name|createTempFile
argument_list|(
literal|"added"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|writeStrings
argument_list|(
name|recs
argument_list|,
name|added
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Merge the file with the references
name|merge
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|added
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**          * Merges the contents of the file into the references file.          *          * @param recs File of records to add          * @throws IOException          */
specifier|protected
name|void
name|addRecords
parameter_list|(
name|File
name|recs
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Merge the file with the references
name|merge
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|recs
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**          * Snapshots the local store, starts a new generation for writing          * and merges all generations available.          *          * @throws IOException          */
specifier|protected
name|void
name|snapshot
parameter_list|()
throws|throws
name|IOException
block|{
name|snapshotLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|nextGeneration
argument_list|()
expr_stmt|;
name|merge
argument_list|(
name|generations
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|snapshotLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
name|closeQuietly
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Closed writer"
argument_list|)
expr_stmt|;
comment|// Convert the process file to a generational file
if|if
condition|(
name|processFile
operator|!=
literal|null
condition|)
block|{
name|File
name|renamed
init|=
operator|new
name|File
argument_list|(
name|removeExtension
argument_list|(
name|processFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
name|processFile
operator|.
name|renameTo
argument_list|(
name|renamed
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"File renamed {}"
argument_list|,
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|generations
operator|.
name|add
argument_list|(
name|renamed
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Process file renamed to {}"
argument_list|,
name|renamed
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Trying a copy file operation"
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|renamed
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
name|Files
operator|.
name|copy
argument_list|(
name|processFile
argument_list|,
name|renamed
argument_list|)
expr_stmt|;
name|generations
operator|.
name|add
argument_list|(
name|renamed
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} File copied to {}"
argument_list|,
name|processFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|renamed
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to copy process file to corresponding gen file. Some"
operator|+
literal|" elements may be missed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**          * Different types of files          */
enum|enum
name|Type
block|{
name|IN_PROCESS
block|{
annotation|@
name|Override
name|String
name|getFileNameSuffix
parameter_list|()
block|{
return|return
literal|"."
operator|+
name|currentTimeMillis
argument_list|()
operator|+
name|genFileNameSuffix
operator|+
name|workingCopySuffix
return|;
block|}
annotation|@
name|Override
name|Predicate
argument_list|<
name|File
argument_list|>
name|filter
parameter_list|()
block|{
return|return
operator|new
name|Predicate
argument_list|<
name|File
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|File
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|workingCopySuffix
argument_list|)
operator|&&
name|input
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|fileNamePrefix
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
block|,
name|GENERATION
block|{
annotation|@
name|Override
name|String
name|getFileNameSuffix
parameter_list|()
block|{
return|return
literal|"."
operator|+
name|currentTimeMillis
argument_list|()
operator|+
name|genFileNameSuffix
return|;
block|}
annotation|@
name|Override
name|Predicate
argument_list|<
name|File
argument_list|>
name|filter
parameter_list|()
block|{
return|return
operator|new
name|Predicate
argument_list|<
name|File
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|File
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|fileNamePrefix
argument_list|)
operator|&&
name|input
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|genFileNameSuffix
argument_list|)
operator|&&
operator|!
name|input
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|workingCopySuffix
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
block|,
name|REFS
block|{
annotation|@
name|Override
name|String
name|getFileNameSuffix
parameter_list|()
block|{
return|return
name|mergedFileSuffix
return|;
block|}
annotation|@
name|Override
name|Predicate
argument_list|<
name|File
argument_list|>
name|filter
parameter_list|()
block|{
return|return
operator|new
name|Predicate
argument_list|<
name|File
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|File
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|mergedFileSuffix
argument_list|)
operator|&&
name|input
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|fileNamePrefix
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
block|;
comment|/**              * Returns the file name suffix according to the type.              *              * @return file name suffix              */
name|String
name|getFileNameSuffix
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
comment|/**              * Returns the predicate to filter files in the root directory according to the type.              *              * @return a predicate to select particular file types              */
name|Predicate
argument_list|<
name|File
argument_list|>
name|filter
parameter_list|()
block|{
return|return
name|alwaysTrue
argument_list|()
return|;
block|}
block|}
block|}
comment|/**      * Job which calls the snapshot on the tracker.      */
class|class
name|SnapshotJob
implements|implements
name|Runnable
block|{
specifier|private
name|long
name|interval
decl_stmt|;
specifier|private
name|Clock
name|clock
decl_stmt|;
specifier|public
name|SnapshotJob
parameter_list|()
block|{
name|this
operator|.
name|interval
operator|=
name|snapshotInterval
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|Clock
operator|.
name|SIMPLE
expr_stmt|;
block|}
specifier|public
name|SnapshotJob
parameter_list|(
name|long
name|millis
parameter_list|,
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|interval
operator|=
name|millis
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|skip
argument_list|()
condition|)
block|{
try|try
block|{
name|snapshot
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished taking snapshot"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failure in taking snapshot"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping scheduled snapshot as it last executed within {} seconds"
argument_list|,
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|interval
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|skip
parameter_list|()
block|{
name|File
name|snapshotMarker
init|=
name|getSnapshotMarkerFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|snapshotMarker
operator|.
name|exists
argument_list|()
operator|&&
operator|(
name|snapshotMarker
operator|.
name|lastModified
argument_list|()
operator|>
operator|(
name|clock
operator|.
name|getTime
argument_list|()
operator|-
name|interval
operator|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

