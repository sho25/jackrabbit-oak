begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|EventGenerator
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * {@code EventTypeFilter} filters based on event types as defined  * by {@link javax.jcr.observation.ObservationManager#addEventListener(         javax.jcr.observation.EventListener, int, String, boolean, String[], String[], boolean)         ObservationManager.addEventListener()}.  */
end_comment

begin_class
specifier|public
class|class
name|EventTypeFilter
implements|implements
name|Filter
block|{
specifier|private
specifier|final
name|int
name|eventTypes
decl_stmt|;
comment|/**      * Create a new {@code Filter} instance that includes all events matching      * the {@code eventTypes} bit mask. That is, a given event is included if      * the corresponding bit in {@code eventType} is set.      *      * @param eventTypes  bit mask encoding the types of events to include      *      * @see Event      */
specifier|public
name|EventTypeFilter
parameter_list|(
name|int
name|eventTypes
parameter_list|)
block|{
name|this
operator|.
name|eventTypes
operator|=
name|eventTypes
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeAdd
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
return|return
name|includeByEvent
argument_list|(
name|Event
operator|.
name|PROPERTY_ADDED
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeChange
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
return|return
name|includeByEvent
argument_list|(
name|Event
operator|.
name|PROPERTY_CHANGED
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeDelete
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
return|return
name|includeByEvent
argument_list|(
name|Event
operator|.
name|PROPERTY_REMOVED
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeAdd
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
return|return
name|includeByEvent
argument_list|(
name|Event
operator|.
name|NODE_ADDED
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeDelete
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
return|return
name|includeByEvent
argument_list|(
name|Event
operator|.
name|NODE_REMOVED
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeChange
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeMove
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|moved
parameter_list|)
block|{
return|return
name|includeByEvent
argument_list|(
name|Event
operator|.
name|NODE_MOVED
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Filter
name|create
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
return|return
name|this
return|;
block|}
comment|//------------------------------------------------------------< internal>---
specifier|private
name|boolean
name|includeByEvent
parameter_list|(
name|int
name|eventType
parameter_list|)
block|{
return|return
operator|(
name|this
operator|.
name|eventTypes
operator|&
name|eventType
operator|)
operator|!=
literal|0
return|;
block|}
block|}
end_class

end_unit

