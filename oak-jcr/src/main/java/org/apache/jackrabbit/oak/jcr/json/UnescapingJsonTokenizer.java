begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
operator|.
name|Token
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * This JSON tokenizer operates on a string as its input. In contrast to  * {@link DefaultJsonTokenizer} it<em>does</em> unescape JSON string values.  */
end_comment

begin_class
specifier|public
class|class
name|UnescapingJsonTokenizer
extends|extends
name|DefaultJsonTokenizer
block|{
specifier|public
name|UnescapingJsonTokenizer
parameter_list|(
name|String
name|json
parameter_list|)
block|{
name|super
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see JsonTokenizer#JsonTokenizer(JsonTokenizer)      */
specifier|protected
name|UnescapingJsonTokenizer
parameter_list|(
name|UnescapingJsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|super
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|UnescapingJsonTokenizer
name|copy
parameter_list|()
block|{
return|return
operator|new
name|UnescapingJsonTokenizer
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|//------------------------------------------< protected>---
annotation|@
name|Override
specifier|protected
name|Token
name|createToken
parameter_list|(
name|Type
name|type
parameter_list|,
name|String
name|text
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
return|return
name|super
operator|.
name|createToken
argument_list|(
name|type
argument_list|,
name|type
operator|==
name|Type
operator|.
name|STRING
condition|?
name|unescape
argument_list|(
name|text
argument_list|)
else|:
name|text
argument_list|,
name|pos
argument_list|)
return|;
block|}
comment|//------------------------------------------< private>---
specifier|private
name|String
name|unescape
parameter_list|(
name|String
name|text
parameter_list|)
block|{
try|try
block|{
return|return
name|JsonValue
operator|.
name|unescape
argument_list|(
name|text
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|pos
argument_list|()
argument_list|,
literal|"Invalid character escaping in string"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|pos
argument_list|()
argument_list|,
literal|"Invalid character escaping in string"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

