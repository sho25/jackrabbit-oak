begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|closeQuietly
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
operator|.
name|toLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStoreBuilder
operator|.
name|DEFAULT_MEMORY_CACHE_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|MODIFIED_IN_SECS_RESOLUTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoDocumentNodeStoreBuilder
operator|.
name|newMongoDocumentNodeStoreBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDocumentNodeStoreBuilder
operator|.
name|newRDBDocumentNodeStoreBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|osgi
operator|.
name|SplitBlobStoreService
operator|.
name|ONLY_STANDALONE_TARGET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|registerMBean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|scheduleWithFixedDelay
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|UncheckedExecutionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoClientURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|SimpleValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CacheStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CheckpointMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|PersistentCacheStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|VersionGarbageCollector
operator|.
name|VersionGCStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoDocumentNodeStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoDocumentStoreMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDocumentNodeStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ObserverTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobGC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobGCMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobGarbageCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobStoreStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobTrackingStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|SharedDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|BlobIdTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
operator|.
name|PersistentCacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|MongoConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|cluster
operator|.
name|ClusterRepositoryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStoreWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|stats
operator|.
name|BlobStoreStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|BackgroundObserverMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|gc
operator|.
name|DelegatingGCMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|gc
operator|.
name|GCMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|gc
operator|.
name|GCMonitorTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|gc
operator|.
name|LoggingGCMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|Clusterable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|RevisionGC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|RevisionGCMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|AbstractServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|descriptors
operator|.
name|GenericDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|CronExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The OSGi service to start/stop a DocumentNodeStore instance.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|configurationPolicy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
name|configurationPid
operator|=
block|{
name|Configuration
operator|.
name|PID
block|}
argument_list|)
specifier|public
class|class
name|DocumentNodeStoreService
block|{
specifier|private
specifier|static
specifier|final
name|long
name|MB
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|static
specifier|final
name|String
name|DEFAULT_URI
init|=
literal|"mongodb://localhost:27017/oak"
decl_stmt|;
specifier|static
specifier|final
name|int
name|DEFAULT_CACHE
init|=
call|(
name|int
call|)
argument_list|(
name|DEFAULT_MEMORY_CACHE_SIZE
operator|/
name|MB
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|int
name|DEFAULT_BLOB_CACHE_SIZE
init|=
literal|16
decl_stmt|;
specifier|static
specifier|final
name|String
name|DEFAULT_DB
init|=
literal|"oak"
decl_stmt|;
specifier|static
specifier|final
name|boolean
name|DEFAULT_SO_KEEP_ALIVE
init|=
literal|true
decl_stmt|;
specifier|static
specifier|final
name|String
name|DEFAULT_PERSISTENT_CACHE
init|=
literal|"cache"
decl_stmt|;
specifier|static
specifier|final
name|String
name|DEFAULT_JOURNAL_CACHE
init|=
literal|"diff-cache"
decl_stmt|;
specifier|static
specifier|final
name|boolean
name|DEFAULT_CUSTOM_BLOB_STORE
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONTINUOUS_RGC_EXPR
init|=
literal|"*/5 * * * * ?"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CLASSIC_RGC_EXPR
init|=
literal|"0 0 2 * * ?"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RGC_TIME_LIMIT_SECS
init|=
literal|3
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
comment|// default is 3 hours
specifier|private
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"oak.nodestore.description"
decl_stmt|;
specifier|static
specifier|final
name|long
name|DEFAULT_JOURNAL_GC_INTERVAL_MILLIS
init|=
literal|5
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// default is 5min
specifier|static
specifier|final
name|long
name|DEFAULT_JOURNAL_GC_MAX_AGE_MILLIS
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// default is 24hours
specifier|static
specifier|final
name|boolean
name|DEFAULT_PREFETCH_EXTERNAL_CHANGES
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PROP_HOME
init|=
literal|"./repository"
decl_stmt|;
specifier|static
specifier|final
name|long
name|DEFAULT_MAX_REPLICATION_LAG
init|=
literal|6
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
specifier|static
specifier|final
name|boolean
name|DEFAULT_BUNDLING_DISABLED
init|=
literal|false
decl_stmt|;
specifier|static
specifier|final
name|String
name|DEFAULT_VER_GC_EXPRESSION
init|=
literal|""
decl_stmt|;
comment|/**      * Revisions older than this time would be garbage collected      */
specifier|static
specifier|final
name|long
name|DEFAULT_VER_GC_MAX_AGE
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
comment|//TimeUnit.DAYS.toSeconds(1);
comment|/**      * Blob modified before this time duration would be considered for Blob GC      */
specifier|static
specifier|final
name|long
name|DEFAULT_BLOB_GC_MAX_AGE
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
comment|/**      * Default interval for taking snapshots of locally tracked blob ids.      */
specifier|static
specifier|final
name|long
name|DEFAULT_BLOB_SNAPSHOT_INTERVAL
init|=
literal|12
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
comment|// property name constants - values can come from framework properties or OSGi config
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_BLOB_STORE
init|=
literal|"customBlobStore"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROP_REV_RECOVERY_INTERVAL
init|=
literal|"lastRevRecoveryJobIntervalInSecs"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROP_DS_TYPE
init|=
literal|"documentStoreType"
decl_stmt|;
specifier|private
enum|enum
name|DocumentStoreType
block|{
name|MONGO
block|,
name|RDB
block|;
specifier|static
name|DocumentStoreType
name|fromString
parameter_list|(
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
name|MONGO
return|;
block|}
return|return
name|valueOf
argument_list|(
name|type
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|ServiceRegistration
name|nodeStoreReg
decl_stmt|;
specifier|private
name|Closer
name|closer
decl_stmt|;
specifier|private
name|WhiteboardExecutor
name|executor
decl_stmt|;
specifier|private
specifier|volatile
name|BlobStore
name|blobStore
decl_stmt|;
specifier|private
specifier|volatile
name|DataSource
name|dataSource
decl_stmt|;
specifier|private
specifier|volatile
name|DataSource
name|blobDataSource
decl_stmt|;
specifier|private
specifier|volatile
name|DocumentNodeStateCache
name|nodeStateCache
decl_stmt|;
specifier|private
name|DocumentNodeStore
name|nodeStore
decl_stmt|;
specifier|private
name|ObserverTracker
name|observerTracker
decl_stmt|;
specifier|private
name|JournalPropertyHandlerFactory
name|journalPropertyHandlerFactory
init|=
operator|new
name|JournalPropertyHandlerFactory
argument_list|()
decl_stmt|;
specifier|private
name|ComponentContext
name|context
decl_stmt|;
specifier|private
name|Whiteboard
name|whiteboard
decl_stmt|;
specifier|private
name|long
name|deactivationTimestamp
init|=
literal|0
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|StatisticsProvider
name|statisticsProvider
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|ConfigurationAdmin
name|configurationAdmin
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|service
operator|=
name|Preset
operator|.
name|class
argument_list|)
specifier|private
name|Preset
name|preset
decl_stmt|;
specifier|private
name|boolean
name|customBlobStore
decl_stmt|;
specifier|private
name|ServiceRegistration
name|blobStoreReg
decl_stmt|;
specifier|private
name|BlobStore
name|defaultBlobStore
decl_stmt|;
specifier|private
name|Configuration
name|config
decl_stmt|;
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|,
name|Configuration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|=
name|Closer
operator|.
name|create
argument_list|()
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|DocumentNodeStoreServiceConfiguration
operator|.
name|create
argument_list|(
name|context
argument_list|,
name|configurationAdmin
argument_list|,
name|preset
operator|.
name|configuration
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|whiteboard
operator|=
operator|new
name|OsgiWhiteboard
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|=
operator|new
name|WhiteboardExecutor
argument_list|()
expr_stmt|;
name|executor
operator|.
name|start
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
name|customBlobStore
operator|=
name|this
operator|.
name|config
operator|.
name|customBlobStore
argument_list|()
expr_stmt|;
name|documentStoreType
operator|=
name|DocumentStoreType
operator|.
name|fromString
argument_list|(
name|this
operator|.
name|config
operator|.
name|documentStoreType
argument_list|()
argument_list|)
expr_stmt|;
name|registerNodeStoreIfPossible
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|registerNodeStoreIfPossible
parameter_list|()
throws|throws
name|IOException
block|{
comment|// disallow attempts to restart (OAK-3420)
if|if
condition|(
name|deactivationTimestamp
operator|!=
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"DocumentNodeStore was already unregistered ({}ms ago)"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|deactivationTimestamp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Component still not activated. Ignoring the initialization call"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|customBlobStore
operator|&&
name|blobStore
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Custom BlobStore use enabled. DocumentNodeStoreService would be initialized when "
operator|+
literal|"BlobStore would be available"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|documentStoreType
operator|==
name|DocumentStoreType
operator|.
name|RDB
operator|&&
operator|(
name|dataSource
operator|==
literal|null
operator|||
name|blobDataSource
operator|==
literal|null
operator|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"DataSource use enabled. DocumentNodeStoreService would be initialized when "
operator|+
literal|"DataSource would be available (currently available: nodes: {}, blobs: {})"
argument_list|,
name|dataSource
argument_list|,
name|blobDataSource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|registerNodeStore
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|registerNodeStore
parameter_list|()
throws|throws
name|IOException
block|{
name|DocumentNodeStoreBuilder
argument_list|<
name|?
argument_list|>
name|mkBuilder
decl_stmt|;
if|if
condition|(
name|documentStoreType
operator|==
name|DocumentStoreType
operator|.
name|RDB
condition|)
block|{
name|RDBDocumentNodeStoreBuilder
name|builder
init|=
name|newRDBDocumentNodeStoreBuilder
argument_list|()
decl_stmt|;
name|configureBuilder
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|dataSource
argument_list|,
literal|"DataStore type set [%s] but DataSource reference not initialized"
argument_list|,
name|PROP_DS_TYPE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|customBlobStore
condition|)
block|{
name|checkNotNull
argument_list|(
name|blobDataSource
argument_list|,
literal|"DataStore type set [%s] but BlobDataSource reference not initialized"
argument_list|,
name|PROP_DS_TYPE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setRDBConnection
argument_list|(
name|dataSource
argument_list|,
name|blobDataSource
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Connected to datasources {} {}"
argument_list|,
name|dataSource
argument_list|,
name|blobDataSource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|blobDataSource
operator|!=
literal|null
operator|&&
name|blobDataSource
operator|!=
name|dataSource
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Ignoring blobDataSource {} as custom blob store takes precedence."
argument_list|,
name|blobDataSource
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setRDBConnection
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Connected to datasource {}"
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
block|}
name|mkBuilder
operator|=
name|builder
expr_stmt|;
block|}
else|else
block|{
name|String
name|uri
init|=
name|config
operator|.
name|mongouri
argument_list|()
decl_stmt|;
name|String
name|db
init|=
name|config
operator|.
name|db
argument_list|()
decl_stmt|;
name|boolean
name|soKeepAlive
init|=
name|config
operator|.
name|socketKeepAlive
argument_list|()
decl_stmt|;
name|MongoClientURI
name|mongoURI
init|=
operator|new
name|MongoClientURI
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|String
name|persistentCache
init|=
name|resolvePath
argument_list|(
name|config
operator|.
name|persistentCache
argument_list|()
argument_list|,
name|DEFAULT_PERSISTENT_CACHE
argument_list|)
decl_stmt|;
name|String
name|journalCache
init|=
name|resolvePath
argument_list|(
name|config
operator|.
name|journalCache
argument_list|()
argument_list|,
name|DEFAULT_JOURNAL_CACHE
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
comment|// Take care around not logging the uri directly as it
comment|// might contain passwords
name|log
operator|.
name|info
argument_list|(
literal|"Starting DocumentNodeStore with host={}, db={}, cache size (MB)={}, persistentCache={}, "
operator|+
literal|"journalCache={}, blobCacheSize (MB)={}, maxReplicationLagInSecs={}"
argument_list|,
name|mongoURI
operator|.
name|getHosts
argument_list|()
argument_list|,
name|db
argument_list|,
name|config
operator|.
name|cache
argument_list|()
argument_list|,
name|persistentCache
argument_list|,
name|journalCache
argument_list|,
name|config
operator|.
name|blobCacheSize
argument_list|()
argument_list|,
name|config
operator|.
name|maxReplicationLagInSecs
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Mongo Connection details {}"
argument_list|,
name|MongoConnection
operator|.
name|toString
argument_list|(
name|mongoURI
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MongoDocumentNodeStoreBuilder
name|builder
init|=
name|newMongoDocumentNodeStoreBuilder
argument_list|()
decl_stmt|;
name|configureBuilder
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMaxReplicationLag
argument_list|(
name|config
operator|.
name|maxReplicationLagInSecs
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSocketKeepAlive
argument_list|(
name|soKeepAlive
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMongoDB
argument_list|(
name|uri
argument_list|,
name|db
argument_list|,
name|config
operator|.
name|blobCacheSize
argument_list|()
argument_list|)
expr_stmt|;
name|mkBuilder
operator|=
name|builder
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Connected to database '{}'"
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|customBlobStore
condition|)
block|{
name|defaultBlobStore
operator|=
name|mkBuilder
operator|.
name|getBlobStore
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Registering the BlobStore with ServiceRegistry"
argument_list|)
expr_stmt|;
name|blobStoreReg
operator|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|registerService
argument_list|(
name|BlobStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|defaultBlobStore
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|//Set wrapping blob store after setting the DB
if|if
condition|(
name|isWrappingCustomBlobStore
argument_list|()
condition|)
block|{
operator|(
operator|(
name|BlobStoreWrapper
operator|)
name|blobStore
operator|)
operator|.
name|setBlobStore
argument_list|(
name|mkBuilder
operator|.
name|getBlobStore
argument_list|()
argument_list|)
expr_stmt|;
name|mkBuilder
operator|.
name|setBlobStore
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
block|}
comment|// attach GCMonitor
specifier|final
name|GCMonitorTracker
name|gcMonitor
init|=
operator|new
name|GCMonitorTracker
argument_list|()
decl_stmt|;
name|gcMonitor
operator|.
name|start
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|asCloseable
argument_list|(
name|gcMonitor
argument_list|)
argument_list|)
expr_stmt|;
name|Logger
name|vgcLogger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VersionGarbageCollector
operator|.
name|class
argument_list|)
decl_stmt|;
name|GCMonitor
name|loggingGCMonitor
decl_stmt|;
if|if
condition|(
name|isContinuousRevisionGC
argument_list|()
condition|)
block|{
comment|// log less chatty with continuous RevisionGC
name|loggingGCMonitor
operator|=
operator|new
name|QuietGCMonitor
argument_list|(
name|vgcLogger
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|loggingGCMonitor
operator|=
operator|new
name|LoggingGCMonitor
argument_list|(
name|vgcLogger
argument_list|)
expr_stmt|;
block|}
name|mkBuilder
operator|.
name|setGCMonitor
argument_list|(
operator|new
name|DelegatingGCMonitor
argument_list|(
name|newArrayList
argument_list|(
name|gcMonitor
argument_list|,
name|loggingGCMonitor
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|nodeStore
operator|=
name|mkBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// ensure a clusterId is initialized
comment|// and expose it as 'oak.clusterid' repository descriptor
name|GenericDescriptors
name|clusterIdDesc
init|=
operator|new
name|GenericDescriptors
argument_list|()
decl_stmt|;
name|clusterIdDesc
operator|.
name|put
argument_list|(
name|ClusterRepositoryInfo
operator|.
name|OAK_CLUSTERID_REPOSITORY_DESCRIPTOR_KEY
argument_list|,
operator|new
name|SimpleValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|ClusterRepositoryInfo
operator|.
name|getOrCreateId
argument_list|(
name|nodeStore
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|whiteboard
operator|.
name|register
argument_list|(
name|Descriptors
operator|.
name|class
argument_list|,
name|clusterIdDesc
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
comment|// If a shared data store register the repo id in the data store
if|if
condition|(
name|SharedDataStoreUtils
operator|.
name|isShared
argument_list|(
name|blobStore
argument_list|)
condition|)
block|{
name|String
name|repoId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|repoId
operator|=
name|ClusterRepositoryInfo
operator|.
name|getOrCreateId
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SharedDataStore
operator|)
name|blobStore
operator|)
operator|.
name|addMetadataRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|SharedDataStoreUtils
operator|.
name|SharedStoreRecordType
operator|.
name|REPOSITORY
operator|.
name|getNameFromId
argument_list|(
name|repoId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not register a unique repositoryId"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|blobStore
operator|instanceof
name|BlobTrackingStore
condition|)
block|{
name|BlobTrackingStore
name|trackingStore
init|=
operator|(
name|BlobTrackingStore
operator|)
name|blobStore
decl_stmt|;
if|if
condition|(
name|trackingStore
operator|.
name|getTracker
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|trackingStore
operator|.
name|getTracker
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|BlobTrackingStore
operator|)
name|blobStore
operator|)
operator|.
name|addTracker
argument_list|(
name|BlobIdTracker
operator|.
name|build
argument_list|(
name|getRepositoryHome
argument_list|()
argument_list|,
name|repoId
argument_list|,
name|config
operator|.
name|blobTrackSnapshotIntervalInSecs
argument_list|()
argument_list|,
operator|(
name|SharedDataStore
operator|)
name|blobStore
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|registerJMXBeans
argument_list|(
name|nodeStore
argument_list|,
name|mkBuilder
argument_list|)
expr_stmt|;
name|registerLastRevRecoveryJob
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
name|registerJournalGC
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
name|registerVersionGCJob
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
name|registerDocumentStoreMetrics
argument_list|(
name|mkBuilder
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isNodeStoreProvider
argument_list|()
condition|)
block|{
name|observerTracker
operator|=
operator|new
name|ObserverTracker
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
name|observerTracker
operator|.
name|start
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|journalPropertyHandlerFactory
operator|.
name|start
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
name|DocumentStore
name|ds
init|=
name|nodeStore
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
comment|// OAK-2682: time difference detection applied at startup with a default
comment|// max time diff of 2000 millis (2sec)
specifier|final
name|long
name|maxDiff
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.documentMK.maxServerTimeDiffMillis"
argument_list|,
literal|"2000"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|maxDiff
operator|>=
literal|0
condition|)
block|{
specifier|final
name|long
name|timeDiff
init|=
name|ds
operator|.
name|determineServerTimeDifferenceMillis
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"registerNodeStore: server time difference: {}ms (max allowed: {}ms)"
argument_list|,
name|timeDiff
argument_list|,
name|maxDiff
argument_list|)
expr_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|timeDiff
argument_list|)
operator|>
name|maxDiff
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Server clock seems off ("
operator|+
name|timeDiff
operator|+
literal|"ms) by more than configured amount ("
operator|+
name|maxDiff
operator|+
literal|"ms)"
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// no checked exception
comment|// in case of a RuntimeException, just log but continue
name|log
operator|.
name|warn
argument_list|(
literal|"registerNodeStore: got RuntimeException while trying to determine time difference to server: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|serviceClasses
decl_stmt|;
if|if
condition|(
name|isNodeStoreProvider
argument_list|()
condition|)
block|{
name|registerNodeStoreProvider
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
name|serviceClasses
operator|=
operator|new
name|String
index|[]
block|{
name|DocumentNodeStore
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Clusterable
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
expr_stmt|;
block|}
else|else
block|{
name|serviceClasses
operator|=
operator|new
name|String
index|[]
block|{
name|NodeStore
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|DocumentNodeStore
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Clusterable
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
expr_stmt|;
block|}
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
name|DocumentNodeStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|DESCRIPTION
argument_list|,
name|getMetadata
argument_list|(
name|ds
argument_list|)
argument_list|)
expr_stmt|;
comment|// OAK-2844: in order to allow DocumentDiscoveryLiteService to directly
comment|// require a service DocumentNodeStore (instead of having to do an 'instanceof')
comment|// the registration is now done for both NodeStore and DocumentNodeStore here.
name|nodeStoreReg
operator|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|registerService
argument_list|(
name|serviceClasses
argument_list|,
name|nodeStore
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|configureBuilder
parameter_list|(
name|DocumentNodeStoreBuilder
argument_list|<
name|?
argument_list|>
name|builder
parameter_list|)
block|{
name|String
name|persistentCache
init|=
name|resolvePath
argument_list|(
name|config
operator|.
name|persistentCache
argument_list|()
argument_list|,
name|DEFAULT_PERSISTENT_CACHE
argument_list|)
decl_stmt|;
name|String
name|journalCache
init|=
name|resolvePath
argument_list|(
name|config
operator|.
name|journalCache
argument_list|()
argument_list|,
name|DEFAULT_JOURNAL_CACHE
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setStatisticsProvider
argument_list|(
name|statisticsProvider
argument_list|)
operator|.
name|setExecutor
argument_list|(
name|executor
argument_list|)
operator|.
name|memoryCacheSize
argument_list|(
name|config
operator|.
name|cache
argument_list|()
operator|*
name|MB
argument_list|)
operator|.
name|memoryCacheDistribution
argument_list|(
name|config
operator|.
name|nodeCachePercentage
argument_list|()
argument_list|,
name|config
operator|.
name|prevDocCachePercentage
argument_list|()
argument_list|,
name|config
operator|.
name|childrenCachePercentage
argument_list|()
argument_list|,
name|config
operator|.
name|diffCachePercentage
argument_list|()
argument_list|)
operator|.
name|setCacheSegmentCount
argument_list|(
name|config
operator|.
name|cacheSegmentCount
argument_list|()
argument_list|)
operator|.
name|setCacheStackMoveDistance
argument_list|(
name|config
operator|.
name|cacheStackMoveDistance
argument_list|()
argument_list|)
operator|.
name|setBundlingDisabled
argument_list|(
name|config
operator|.
name|bundlingDisabled
argument_list|()
argument_list|)
operator|.
name|setJournalPropertyHandlerFactory
argument_list|(
name|journalPropertyHandlerFactory
argument_list|)
operator|.
name|setLeaseCheckMode
argument_list|(
name|ClusterNodeInfo
operator|.
name|DEFAULT_LEASE_CHECK_DISABLED
condition|?
name|LeaseCheckMode
operator|.
name|DISABLED
else|:
name|LeaseCheckMode
operator|.
name|valueOf
argument_list|(
name|config
operator|.
name|leaseCheckMode
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setLeaseFailureHandler
argument_list|(
operator|new
name|LeaseFailureHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handleLeaseFailure
parameter_list|()
block|{
name|Bundle
name|bundle
init|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getBundle
argument_list|()
decl_stmt|;
name|String
name|bundleName
init|=
name|bundle
operator|.
name|getSymbolicName
argument_list|()
decl_stmt|;
try|try
block|{
comment|// plan A: try stopping oak-store-document
name|log
operator|.
name|error
argument_list|(
literal|"handleLeaseFailure: stopping {}..."
argument_list|,
name|bundleName
argument_list|)
expr_stmt|;
name|bundle
operator|.
name|stop
argument_list|(
name|Bundle
operator|.
name|STOP_TRANSIENT
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"handleLeaseFailure: stopped {}."
argument_list|,
name|bundleName
argument_list|)
expr_stmt|;
comment|// plan A worked, perfect!
block|}
catch|catch
parameter_list|(
name|BundleException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"handleLeaseFailure: exception while stopping "
operator|+
name|bundleName
operator|+
literal|": "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// plan B: stop only DocumentNodeStoreService (to stop the background threads)
name|log
operator|.
name|error
argument_list|(
literal|"handleLeaseFailure: stopping DocumentNodeStoreService..."
argument_list|)
expr_stmt|;
name|context
operator|.
name|disableComponent
argument_list|(
name|DocumentNodeStoreService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"handleLeaseFailure: stopped DocumentNodeStoreService"
argument_list|)
expr_stmt|;
comment|// plan B succeeded.
block|}
block|}
block|}
argument_list|)
operator|.
name|setPrefetchExternalChanges
argument_list|(
name|config
operator|.
name|prefetchExternalChanges
argument_list|()
argument_list|)
operator|.
name|setUpdateLimit
argument_list|(
name|config
operator|.
name|updateLimit
argument_list|()
argument_list|)
operator|.
name|setJournalGCMaxAge
argument_list|(
name|config
operator|.
name|journalGCMaxAge
argument_list|()
argument_list|)
operator|.
name|setNodeCachePathPredicate
argument_list|(
name|createCachePredicate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|persistentCache
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setPersistentCache
argument_list|(
name|persistentCache
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|journalCache
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setJournalCache
argument_list|(
name|journalCache
argument_list|)
expr_stmt|;
block|}
comment|//Set blobstore before setting the document store
if|if
condition|(
name|customBlobStore
operator|&&
operator|!
name|isWrappingCustomBlobStore
argument_list|()
condition|)
block|{
name|checkNotNull
argument_list|(
name|blobStore
argument_list|,
literal|"Use of custom BlobStore enabled via  [%s] but blobStore reference not "
operator|+
literal|"initialized"
argument_list|,
name|CUSTOM_BLOB_STORE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setBlobStore
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isWrappingCustomBlobStore
parameter_list|()
block|{
return|return
name|customBlobStore
operator|&&
name|blobStore
operator|instanceof
name|BlobStoreWrapper
return|;
block|}
specifier|private
name|Predicate
argument_list|<
name|Path
argument_list|>
name|createCachePredicate
parameter_list|()
block|{
if|if
condition|(
name|config
operator|.
name|persistentCacheIncludes
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
return|;
block|}
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|config
operator|.
name|persistentCacheIncludes
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"/"
block|}
block|)
block|)
block|{
return|return
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
return|;
block|}
end_class

begin_decl_stmt
name|Set
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
name|String
name|p
range|:
name|config
operator|.
name|persistentCacheIncludes
argument_list|()
control|)
block|{
name|p
operator|=
name|p
operator|!=
literal|null
condition|?
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|p
operator|.
name|trim
argument_list|()
argument_list|)
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|Path
operator|.
name|fromString
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_for

begin_expr_stmt
name|log
operator|.
name|info
argument_list|(
literal|"Configuring persistent cache to only cache nodes under paths {}"
argument_list|,
name|paths
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|input
lambda|->
block|{
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Path
name|p
range|:
name|paths
control|)
block|{
if|if
condition|(
name|p
operator|.
name|isAncestorOf
argument_list|(
name|input
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
return|;
end_return

begin_function
unit|}      private
name|boolean
name|isNodeStoreProvider
parameter_list|()
block|{
return|return
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|config
operator|.
name|role
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|boolean
name|isContinuousRevisionGC
parameter_list|()
block|{
name|String
name|expr
init|=
name|getVersionGCExpression
argument_list|()
decl_stmt|;
name|String
index|[]
name|elements
init|=
name|expr
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
decl_stmt|;
comment|// simple heuristic to determine if revision GC runs 'frequently'
return|return
name|elements
operator|.
name|length
operator|>=
literal|6
operator|&&
name|elements
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|String
name|getVersionGCExpression
parameter_list|()
block|{
name|String
name|defaultExpr
init|=
name|CONTINUOUS_RGC_EXPR
decl_stmt|;
name|String
name|expr
init|=
name|config
operator|.
name|versionGCExpression
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|expr
argument_list|)
condition|)
block|{
name|expr
operator|=
name|defaultExpr
expr_stmt|;
block|}
comment|// validate expression
try|try
block|{
if|if
condition|(
operator|!
name|expr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|new
name|CronExpression
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid cron expression, falling back to default '"
operator|+
name|defaultExpr
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|expr
operator|=
name|defaultExpr
expr_stmt|;
block|}
return|return
name|expr
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|registerNodeStoreProvider
parameter_list|(
specifier|final
name|NodeStore
name|ns
parameter_list|)
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|NodeStoreProvider
operator|.
name|ROLE
argument_list|,
name|config
operator|.
name|role
argument_list|()
argument_list|)
expr_stmt|;
name|nodeStoreReg
operator|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|registerService
argument_list|(
name|NodeStoreProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
call|(
name|NodeStoreProvider
call|)
argument_list|()
operator|->
name|ns
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Registered NodeStoreProvider backed by DocumentNodeStore"
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|()
block|{
if|if
condition|(
name|observerTracker
operator|!=
literal|null
condition|)
block|{
name|observerTracker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|journalPropertyHandlerFactory
operator|!=
literal|null
condition|)
block|{
name|journalPropertyHandlerFactory
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|unregisterNodeStore
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Reference
argument_list|(
name|name
operator|=
literal|"blobStore"
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|target
operator|=
name|ONLY_STANDALONE_TARGET
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|protected
name|void
name|bindBlobStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|defaultBlobStore
operator|==
name|blobStore
condition|)
block|{
return|return;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Initializing DocumentNodeStore with BlobStore [{}]"
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
name|registerNodeStoreIfPossible
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|protected
name|void
name|unbindBlobStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
block|{
if|if
condition|(
name|defaultBlobStore
operator|==
name|blobStore
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|blobStore
operator|=
literal|null
expr_stmt|;
name|unregisterNodeStore
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Reference
argument_list|(
name|name
operator|=
literal|"dataSource"
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|target
operator|=
literal|"(datasource.name=oak)"
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|protected
name|void
name|bindDataSource
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|dataSource
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Ignoring bindDataSource [{}] because dataSource [{}] is already bound"
argument_list|,
name|dataSource
argument_list|,
name|this
operator|.
name|dataSource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Initializing DocumentNodeStore with dataSource [{}]"
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataSource
operator|=
name|dataSource
expr_stmt|;
name|registerNodeStoreIfPossible
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|protected
name|void
name|unbindDataSource
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|dataSource
operator|!=
name|dataSource
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Ignoring unbindDataSource [{}] because dataSource is bound to [{}]"
argument_list|,
name|dataSource
argument_list|,
name|this
operator|.
name|dataSource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Unregistering DocumentNodeStore because dataSource [{}] was unbound"
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataSource
operator|=
literal|null
expr_stmt|;
name|unregisterNodeStore
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_decl_stmt
specifier|private
name|DocumentStoreType
name|documentStoreType
decl_stmt|;
end_decl_stmt

begin_function
annotation|@
name|Reference
argument_list|(
name|name
operator|=
literal|"blobDataSource"
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|target
operator|=
literal|"(datasource.name=oak)"
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|protected
name|void
name|bindBlobDataSource
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|blobDataSource
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Ignoring bindBlobDataSource [{}] because blobDataSource [{}] is already bound"
argument_list|,
name|dataSource
argument_list|,
name|this
operator|.
name|blobDataSource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Initializing DocumentNodeStore with blobDataSource [{}]"
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
name|this
operator|.
name|blobDataSource
operator|=
name|dataSource
expr_stmt|;
name|registerNodeStoreIfPossible
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|protected
name|void
name|unbindBlobDataSource
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|blobDataSource
operator|!=
name|dataSource
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Ignoring unbindBlobDataSource [{}] because dataSource is bound to [{}]"
argument_list|,
name|dataSource
argument_list|,
name|this
operator|.
name|blobDataSource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Unregistering DocumentNodeStore because blobDataSource [{}] was unbound"
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
name|this
operator|.
name|blobDataSource
operator|=
literal|null
expr_stmt|;
name|unregisterNodeStore
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Reference
argument_list|(
name|name
operator|=
literal|"nodeStateCache"
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|protected
name|void
name|bindNodeStateCache
parameter_list|(
name|DocumentNodeStateCache
name|nodeStateCache
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|nodeStore
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Registered DocumentNodeStateCache [{}] with DocumentNodeStore"
argument_list|,
name|nodeStateCache
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|setNodeStateCache
argument_list|(
name|nodeStateCache
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|protected
name|void
name|unbindNodeStateCache
parameter_list|(
name|DocumentNodeStateCache
name|nodeStateCache
parameter_list|)
block|{
if|if
condition|(
name|nodeStore
operator|!=
literal|null
condition|)
block|{
name|nodeStore
operator|.
name|setNodeStateCache
argument_list|(
name|DocumentNodeStateCache
operator|.
name|NOOP
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|unregisterNodeStore
parameter_list|()
block|{
name|deactivationTimestamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|closeQuietly
argument_list|(
name|closer
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeStoreReg
operator|!=
literal|null
condition|)
block|{
name|nodeStoreReg
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|nodeStoreReg
operator|=
literal|null
expr_stmt|;
block|}
comment|//If we exposed our BlobStore then unregister it *after*
comment|//NodeStore service. This ensures that if any other component
comment|//like SecondaryStoreCache depends on this then it remains active
comment|//untill DocumentNodeStore get deactivated
if|if
condition|(
name|blobStoreReg
operator|!=
literal|null
condition|)
block|{
name|blobStoreReg
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|blobStoreReg
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|nodeStore
operator|!=
literal|null
condition|)
block|{
name|nodeStore
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|nodeStore
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
name|executor
operator|.
name|stop
argument_list|()
expr_stmt|;
name|executor
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|registerJMXBeans
parameter_list|(
specifier|final
name|DocumentNodeStore
name|store
parameter_list|,
name|DocumentNodeStoreBuilder
argument_list|<
name|?
argument_list|>
name|mkBuilder
parameter_list|)
throws|throws
name|IOException
block|{
name|registerCacheStatsMBean
argument_list|(
name|store
operator|.
name|getNodeCacheStats
argument_list|()
argument_list|)
expr_stmt|;
name|registerCacheStatsMBean
argument_list|(
name|store
operator|.
name|getNodeChildrenCacheStats
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CacheStats
name|cs
range|:
name|store
operator|.
name|getDiffCacheStats
argument_list|()
control|)
block|{
name|registerCacheStatsMBean
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
name|DocumentStore
name|ds
init|=
name|store
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
if|if
condition|(
name|ds
operator|.
name|getCacheStats
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CacheStats
name|cacheStats
range|:
name|ds
operator|.
name|getCacheStats
argument_list|()
control|)
block|{
name|registerCacheStatsMBean
argument_list|(
name|cacheStats
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isNodeStoreProvider
argument_list|()
condition|)
block|{
name|addRegistration
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|CheckpointMBean
operator|.
name|class
argument_list|,
operator|new
name|DocumentCheckpointMBean
argument_list|(
name|store
argument_list|)
argument_list|,
name|CheckpointMBean
operator|.
name|TYPE
argument_list|,
literal|"Document node store checkpoint management"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addRegistration
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|DocumentNodeStoreMBean
operator|.
name|class
argument_list|,
name|store
operator|.
name|getMBean
argument_list|()
argument_list|,
name|DocumentNodeStoreMBean
operator|.
name|TYPE
argument_list|,
literal|"Document node store management"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mkBuilder
operator|.
name|getBlobStoreCacheStats
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|registerCacheStatsMBean
argument_list|(
name|mkBuilder
operator|.
name|getBlobStoreCacheStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mkBuilder
operator|.
name|getDocumentStoreStatsCollector
argument_list|()
operator|instanceof
name|DocumentStoreStatsMBean
condition|)
block|{
name|addRegistration
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|DocumentStoreStatsMBean
operator|.
name|class
argument_list|,
operator|(
name|DocumentStoreStatsMBean
operator|)
name|mkBuilder
operator|.
name|getDocumentStoreStatsCollector
argument_list|()
argument_list|,
name|DocumentStoreStatsMBean
operator|.
name|TYPE
argument_list|,
literal|"DocumentStore Statistics"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// register persistent cache stats
name|Map
argument_list|<
name|String
argument_list|,
name|PersistentCacheStats
argument_list|>
name|persistenceCacheStats
init|=
name|mkBuilder
operator|.
name|getPersistenceCacheStats
argument_list|()
decl_stmt|;
for|for
control|(
name|PersistentCacheStats
name|pcs
range|:
name|persistenceCacheStats
operator|.
name|values
argument_list|()
control|)
block|{
name|addRegistration
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|PersistentCacheStatsMBean
operator|.
name|class
argument_list|,
name|pcs
argument_list|,
name|PersistentCacheStatsMBean
operator|.
name|TYPE
argument_list|,
name|pcs
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|versionGcMaxAgeInSecs
init|=
name|config
operator|.
name|versionGcMaxAgeInSecs
argument_list|()
decl_stmt|;
specifier|final
name|long
name|blobGcMaxAgeInSecs
init|=
name|config
operator|.
name|blobGcMaxAgeInSecs
argument_list|()
decl_stmt|;
if|if
condition|(
name|store
operator|.
name|getBlobStore
argument_list|()
operator|instanceof
name|GarbageCollectableBlobStore
condition|)
block|{
name|BlobGarbageCollector
name|gc
init|=
name|store
operator|.
name|createBlobGarbageCollector
argument_list|(
name|blobGcMaxAgeInSecs
argument_list|,
name|ClusterRepositoryInfo
operator|.
name|getOrCreateId
argument_list|(
name|nodeStore
argument_list|)
argument_list|,
name|whiteboard
argument_list|,
name|statisticsProvider
argument_list|)
decl_stmt|;
name|addRegistration
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|BlobGCMBean
operator|.
name|class
argument_list|,
operator|new
name|BlobGC
argument_list|(
name|gc
argument_list|,
name|executor
argument_list|)
argument_list|,
name|BlobGCMBean
operator|.
name|TYPE
argument_list|,
literal|"Document node store blob garbage collection"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Runnable
name|startGC
init|=
operator|new
name|RevisionGCJob
argument_list|(
name|store
argument_list|,
name|versionGcMaxAgeInSecs
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Runnable
name|cancelGC
init|=
parameter_list|()
lambda|->
name|store
operator|.
name|getVersionGarbageCollector
argument_list|()
operator|.
name|cancel
argument_list|()
decl_stmt|;
name|Supplier
argument_list|<
name|String
argument_list|>
name|status
init|=
parameter_list|()
lambda|->
name|store
operator|.
name|getVersionGarbageCollector
argument_list|()
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|RevisionGC
name|revisionGC
init|=
operator|new
name|RevisionGC
argument_list|(
name|startGC
argument_list|,
name|cancelGC
argument_list|,
name|status
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|addRegistration
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|RevisionGCMBean
operator|.
name|class
argument_list|,
name|revisionGC
argument_list|,
name|RevisionGCMBean
operator|.
name|TYPE
argument_list|,
literal|"Document node store revision garbage collection"
argument_list|)
argument_list|)
expr_stmt|;
name|addRegistration
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|RevisionGCStatsMBean
operator|.
name|class
argument_list|,
name|store
operator|.
name|getVersionGarbageCollector
argument_list|()
operator|.
name|getRevisionGCStats
argument_list|()
argument_list|,
name|RevisionGCStatsMBean
operator|.
name|TYPE
argument_list|,
literal|"Document node store revision garbage collection statistics"
argument_list|)
argument_list|)
expr_stmt|;
name|BlobStoreStats
name|blobStoreStats
init|=
name|mkBuilder
operator|.
name|getBlobStoreStats
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|customBlobStore
operator|&&
name|blobStoreStats
operator|!=
literal|null
condition|)
block|{
name|addRegistration
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|BlobStoreStatsMBean
operator|.
name|class
argument_list|,
name|blobStoreStats
argument_list|,
name|BlobStoreStatsMBean
operator|.
name|TYPE
argument_list|,
name|ds
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|mkBuilder
operator|.
name|isBundlingDisabled
argument_list|()
condition|)
block|{
name|addRegistration
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|BackgroundObserverMBean
operator|.
name|class
argument_list|,
name|store
operator|.
name|getBundlingConfigHandler
argument_list|()
operator|.
name|getMBean
argument_list|()
argument_list|,
name|BackgroundObserverMBean
operator|.
name|TYPE
argument_list|,
literal|"BundlingConfigObserver"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|registerCacheStatsMBean
parameter_list|(
name|CacheStats
name|cacheStats
parameter_list|)
block|{
name|addRegistration
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|cacheStats
argument_list|,
name|CacheStatsMBean
operator|.
name|TYPE
argument_list|,
name|cacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|registerLastRevRecoveryJob
parameter_list|(
specifier|final
name|DocumentNodeStore
name|nodeStore
parameter_list|)
block|{
name|long
name|leaseTime
init|=
name|toLong
argument_list|(
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|PROP_REV_RECOVERY_INTERVAL
argument_list|)
argument_list|,
name|ClusterNodeInfo
operator|.
name|DEFAULT_LEASE_UPDATE_INTERVAL_MILLIS
argument_list|)
decl_stmt|;
name|addRegistration
argument_list|(
name|scheduleWithFixedDelay
argument_list|(
name|whiteboard
argument_list|,
operator|new
name|LastRevRecoveryJob
argument_list|(
name|nodeStore
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|leaseTime
argument_list|)
argument_list|,
literal|false
comment|/*runOnSingleClusterNode*/
argument_list|,
literal|true
comment|/*use dedicated pool*/
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|registerJournalGC
parameter_list|(
specifier|final
name|DocumentNodeStore
name|nodeStore
parameter_list|)
block|{
name|addRegistration
argument_list|(
name|scheduleWithFixedDelay
argument_list|(
name|whiteboard
argument_list|,
operator|new
name|JournalGCJob
argument_list|(
name|nodeStore
argument_list|)
argument_list|,
name|jobPropertiesFor
argument_list|(
name|JournalGCJob
operator|.
name|class
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|config
operator|.
name|journalGCInterval
argument_list|()
argument_list|)
argument_list|,
literal|true
comment|/*runOnSingleClusterNode*/
argument_list|,
literal|true
comment|/*use dedicated pool*/
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|registerVersionGCJob
parameter_list|(
specifier|final
name|DocumentNodeStore
name|nodeStore
parameter_list|)
block|{
name|String
name|expr
init|=
name|getVersionGCExpression
argument_list|()
decl_stmt|;
if|if
condition|(
name|expr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|jobPropertiesFor
argument_list|(
name|RevisionGCJob
operator|.
name|class
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"scheduler.expression"
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|long
name|versionGcMaxAgeInSecs
init|=
name|config
operator|.
name|versionGcMaxAgeInSecs
argument_list|()
decl_stmt|;
name|long
name|versionGCTimeLimitInSecs
init|=
name|config
operator|.
name|versionGCTimeLimitInSecs
argument_list|()
decl_stmt|;
name|addRegistration
argument_list|(
name|scheduleWithFixedDelay
argument_list|(
name|whiteboard
argument_list|,
operator|new
name|RevisionGCJob
argument_list|(
name|nodeStore
argument_list|,
name|versionGcMaxAgeInSecs
argument_list|,
name|versionGCTimeLimitInSecs
argument_list|)
argument_list|,
name|props
argument_list|,
name|MODIFIED_IN_SECS_RESOLUTION
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|registerDocumentStoreMetrics
parameter_list|(
name|DocumentStore
name|store
parameter_list|)
block|{
if|if
condition|(
name|store
operator|instanceof
name|MongoDocumentStore
condition|)
block|{
name|addRegistration
argument_list|(
name|scheduleWithFixedDelay
argument_list|(
name|whiteboard
argument_list|,
operator|new
name|MongoDocumentStoreMetrics
argument_list|(
operator|(
name|MongoDocumentStore
operator|)
name|store
argument_list|,
name|statisticsProvider
argument_list|)
argument_list|,
name|jobPropertiesFor
argument_list|(
name|MongoDocumentStoreMetrics
operator|.
name|class
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toSeconds
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|String
name|resolvePath
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|path
init|=
name|value
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|path
operator|=
name|defaultValue
expr_stmt|;
block|}
if|if
condition|(
literal|"-"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// disable this path configuration
return|return
literal|""
return|;
block|}
comment|// resolve as relative to repository.home
return|return
name|FilenameUtils
operator|.
name|concat
argument_list|(
name|getRepositoryHome
argument_list|()
argument_list|,
name|path
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|String
name|getRepositoryHome
parameter_list|()
block|{
name|String
name|repoHome
init|=
name|config
operator|.
name|repository_home
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|repoHome
argument_list|)
condition|)
block|{
name|repoHome
operator|=
name|DEFAULT_PROP_HOME
expr_stmt|;
block|}
return|return
name|repoHome
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|String
index|[]
name|getMetadata
parameter_list|(
name|DocumentStore
name|ds
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|meta
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|ds
operator|.
name|getMetadata
argument_list|()
argument_list|)
decl_stmt|;
name|meta
operator|.
name|put
argument_list|(
literal|"nodeStoreType"
argument_list|,
literal|"document"
argument_list|)
expr_stmt|;
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
name|meta
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|meta
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|result
index|[
name|i
operator|++
index|]
operator|=
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|addRegistration
parameter_list|(
annotation|@
name|NotNull
name|Registration
name|reg
parameter_list|)
block|{
name|closer
operator|.
name|register
argument_list|(
name|asCloseable
argument_list|(
name|reg
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|Closeable
name|asCloseable
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|Registration
name|reg
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|reg
argument_list|)
expr_stmt|;
return|return
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|reg
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|Closeable
name|asCloseable
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|AbstractServiceTracker
name|t
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|t
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
end_function

begin_class
specifier|static
specifier|final
class|class
name|RevisionGCJob
implements|implements
name|Runnable
implements|,
name|Supplier
argument_list|<
name|String
argument_list|>
block|{
comment|// log as VersionGarbageCollector
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VersionGarbageCollector
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// log every hour
specifier|private
specifier|static
specifier|final
name|long
name|LOG_INTERVAL
init|=
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|DocumentNodeStore
name|nodeStore
decl_stmt|;
specifier|private
specifier|final
name|long
name|versionGCMaxAgeInSecs
decl_stmt|;
specifier|private
specifier|final
name|long
name|versionGCTimeLimitInSecs
decl_stmt|;
specifier|private
specifier|volatile
name|Object
name|lastResult
init|=
literal|""
decl_stmt|;
specifier|private
name|long
name|lastLogTime
decl_stmt|;
specifier|private
name|VersionGCStats
name|stats
decl_stmt|;
name|RevisionGCJob
parameter_list|(
name|DocumentNodeStore
name|ns
parameter_list|,
name|long
name|versionGcMaxAgeInSecs
parameter_list|,
name|long
name|versionGCTimeLimitInSecs
parameter_list|)
block|{
name|this
operator|.
name|nodeStore
operator|=
name|ns
expr_stmt|;
name|this
operator|.
name|versionGCMaxAgeInSecs
operator|=
name|versionGcMaxAgeInSecs
expr_stmt|;
name|this
operator|.
name|versionGCTimeLimitInSecs
operator|=
name|versionGCTimeLimitInSecs
expr_stmt|;
name|resetStats
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|VersionGarbageCollector
name|gc
init|=
name|nodeStore
operator|.
name|getVersionGarbageCollector
argument_list|()
decl_stmt|;
name|gc
operator|.
name|setOptions
argument_list|(
name|gc
operator|.
name|getOptions
argument_list|()
operator|.
name|withMaxDuration
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|versionGCTimeLimitInSecs
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|VersionGCStats
name|s
init|=
name|gc
operator|.
name|gc
argument_list|(
name|versionGCMaxAgeInSecs
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|stats
operator|.
name|addRun
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|lastResult
operator|=
name|s
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|lastResult
operator|=
name|e
expr_stmt|;
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error occurred while executing the Version Garbage Collector"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|maybeLogStats
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          * Returns the result of the last revision GC run. This method throws          * an {@link UncheckedExecutionException} if the last run failed with an          * exception.          *          * @return result of the last revision GC run.          */
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|()
throws|throws
name|UncheckedExecutionException
block|{
if|if
condition|(
name|lastResult
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|new
name|UncheckedExecutionException
argument_list|(
operator|(
name|Exception
operator|)
name|lastResult
argument_list|)
throw|;
block|}
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|lastResult
argument_list|)
return|;
block|}
specifier|private
name|void
name|resetStats
parameter_list|()
block|{
name|lastLogTime
operator|=
name|nodeStore
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|stats
operator|=
operator|new
name|VersionGCStats
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|maybeLogStats
parameter_list|()
block|{
if|if
condition|(
name|nodeStore
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
operator|>
name|lastLogTime
operator|+
name|LOG_INTERVAL
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Garbage collector stats since {}: {}"
argument_list|,
name|Utils
operator|.
name|timestampToString
argument_list|(
name|lastLogTime
argument_list|)
argument_list|,
name|stats
argument_list|)
expr_stmt|;
name|resetStats
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
specifier|private
specifier|static
specifier|final
class|class
name|JournalGCJob
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|DocumentNodeStore
name|nodeStore
decl_stmt|;
name|JournalGCJob
parameter_list|(
name|DocumentNodeStore
name|ns
parameter_list|)
block|{
name|this
operator|.
name|nodeStore
operator|=
name|ns
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|nodeStore
operator|.
name|getJournalGarbageCollector
argument_list|()
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_class
specifier|private
specifier|static
specifier|final
class|class
name|LastRevRecoveryJob
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|DocumentNodeStore
name|nodeStore
decl_stmt|;
name|LastRevRecoveryJob
parameter_list|(
name|DocumentNodeStore
name|ns
parameter_list|)
block|{
name|this
operator|.
name|nodeStore
operator|=
name|ns
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|nodeStore
operator|.
name|getLastRevRecoveryAgent
argument_list|()
operator|.
name|performRecoveryIfNeeded
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_function
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jobPropertiesFor
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"scheduler.name"
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
end_function

begin_class
annotation|@
name|Component
argument_list|(
name|service
operator|=
name|Preset
operator|.
name|class
argument_list|,
name|configurationPid
operator|=
name|Configuration
operator|.
name|PRESET_PID
argument_list|)
specifier|public
specifier|static
class|class
name|Preset
block|{
name|Configuration
name|configuration
decl_stmt|;
annotation|@
name|Activate
name|void
name|activate
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
block|}
end_class

unit|}
end_unit

