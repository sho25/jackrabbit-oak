begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|action
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
specifier|public
class|class
name|AbstractGroupActionTest
block|{
specifier|private
specifier|final
name|GroupAction
name|groupAction
init|=
operator|new
name|AbstractGroupAction
argument_list|()
block|{}
decl_stmt|;
specifier|private
specifier|final
name|User
name|user
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Group
name|group
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Group
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Root
name|root
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|NamePathMapper
name|namePathMapper
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NamePathMapper
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testMemberAdded
parameter_list|()
throws|throws
name|Exception
block|{
name|groupAction
operator|.
name|onMemberAdded
argument_list|(
name|group
argument_list|,
name|user
argument_list|,
name|root
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMemberRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|groupAction
operator|.
name|onMemberRemoved
argument_list|(
name|group
argument_list|,
name|user
argument_list|,
name|root
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMembersAdded
parameter_list|()
throws|throws
name|Exception
block|{
name|groupAction
operator|.
name|onMembersAdded
argument_list|(
name|group
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"user1"
argument_list|,
literal|"user2"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|,
name|root
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMembersAddedContentId
parameter_list|()
throws|throws
name|Exception
block|{
name|groupAction
operator|.
name|onMembersAddedContentId
argument_list|(
name|group
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"user1"
argument_list|,
literal|"user2"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|,
name|root
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMembersRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|groupAction
operator|.
name|onMembersRemoved
argument_list|(
name|group
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"user1"
argument_list|,
literal|"user2"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|,
name|root
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

