begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneIndexHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_class
specifier|public
class|class
name|TestUtil
block|{
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|COUNTER
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|static
name|void
name|useV2
parameter_list|(
name|NodeBuilder
name|idxNb
parameter_list|)
block|{
name|idxNb
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|COMPAT_MODE
argument_list|,
name|IndexFormatVersion
operator|.
name|V2
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|useV2
parameter_list|(
name|Tree
name|idxTree
parameter_list|)
block|{
name|idxTree
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|COMPAT_MODE
argument_list|,
name|IndexFormatVersion
operator|.
name|V2
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|NodeBuilder
name|newLuceneIndexDefinitionV2
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|index
parameter_list|,
annotation|@
name|Nonnull
name|String
name|name
parameter_list|,
annotation|@
name|Nullable
name|Set
argument_list|<
name|String
argument_list|>
name|propertyTypes
parameter_list|)
block|{
name|NodeBuilder
name|nb
init|=
name|LuceneIndexHelper
operator|.
name|newLuceneIndexDefinition
argument_list|(
name|index
argument_list|,
name|name
argument_list|,
name|propertyTypes
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|useV2
argument_list|(
name|nb
argument_list|)
expr_stmt|;
return|return
name|nb
return|;
block|}
specifier|public
specifier|static
name|Tree
name|enableForFullText
parameter_list|(
name|Tree
name|props
parameter_list|,
name|String
name|propName
parameter_list|)
block|{
return|return
name|enableForFullText
argument_list|(
name|props
argument_list|,
name|propName
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Tree
name|enableForFullText
parameter_list|(
name|Tree
name|props
parameter_list|,
name|String
name|propName
parameter_list|,
name|boolean
name|regex
parameter_list|)
block|{
name|Tree
name|prop
init|=
name|props
operator|.
name|addChild
argument_list|(
name|unique
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
decl_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
name|propName
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_PROPERTY_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_IS_REGEX
argument_list|,
name|regex
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_USE_IN_EXCERPT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|prop
return|;
block|}
specifier|public
specifier|static
name|Tree
name|enablePropertyIndex
parameter_list|(
name|Tree
name|props
parameter_list|,
name|String
name|propName
parameter_list|,
name|boolean
name|regex
parameter_list|)
block|{
name|Tree
name|prop
init|=
name|props
operator|.
name|addChild
argument_list|(
name|unique
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
decl_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
name|propName
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_PROPERTY_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_IS_REGEX
argument_list|,
name|regex
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|prop
return|;
block|}
specifier|public
specifier|static
name|AggregatorBuilder
name|newNodeAggregator
parameter_list|(
name|Tree
name|indexDefn
parameter_list|)
block|{
return|return
operator|new
name|AggregatorBuilder
argument_list|(
name|indexDefn
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Tree
name|newRulePropTree
parameter_list|(
name|Tree
name|indexDefn
parameter_list|,
name|String
name|typeName
parameter_list|)
block|{
name|Tree
name|rules
init|=
name|indexDefn
operator|.
name|addChild
argument_list|(
name|LuceneIndexConstants
operator|.
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|rules
operator|.
name|setOrderableChildren
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|rule
init|=
name|rules
operator|.
name|addChild
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|Tree
name|props
init|=
name|rule
operator|.
name|addChild
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE
argument_list|)
decl_stmt|;
name|props
operator|.
name|setOrderableChildren
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
specifier|static
class|class
name|AggregatorBuilder
block|{
specifier|private
specifier|final
name|Tree
name|aggs
decl_stmt|;
specifier|private
name|AggregatorBuilder
parameter_list|(
name|Tree
name|indexDefn
parameter_list|)
block|{
name|this
operator|.
name|aggs
operator|=
name|indexDefn
operator|.
name|addChild
argument_list|(
name|LuceneIndexConstants
operator|.
name|AGGREGATES
argument_list|)
expr_stmt|;
block|}
name|AggregatorBuilder
name|newRuleWithName
parameter_list|(
name|String
name|primaryType
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|includes
parameter_list|)
block|{
name|Tree
name|agg
init|=
name|aggs
operator|.
name|addChild
argument_list|(
name|primaryType
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|include
range|:
name|includes
control|)
block|{
name|agg
operator|.
name|addChild
argument_list|(
name|unique
argument_list|(
literal|"include"
argument_list|)
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|AGG_PATH
argument_list|,
name|include
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|unique
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|+
name|COUNTER
operator|.
name|getAndIncrement
argument_list|()
return|;
block|}
block|}
end_class

end_unit

