begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|bundlor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|IncludeTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|simpleWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|Include
name|i
init|=
operator|new
name|Include
argument_list|(
literal|"*"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i
operator|.
name|match
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i
operator|.
name|match
argument_list|(
literal|"/x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i
operator|.
name|match
argument_list|(
literal|"/x/y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|exactName
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
operator|new
name|Include
argument_list|(
literal|"x"
argument_list|)
operator|.
name|match
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|Include
argument_list|(
literal|"x"
argument_list|)
operator|.
name|match
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|Include
argument_list|(
literal|"x/y"
argument_list|)
operator|.
name|match
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|Include
argument_list|(
literal|"x/y"
argument_list|)
operator|.
name|match
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|Include
argument_list|(
literal|"x/y"
argument_list|)
operator|.
name|match
argument_list|(
literal|"x/y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|directive
parameter_list|()
throws|throws
name|Exception
block|{
name|Include
name|i0
init|=
operator|new
name|Include
argument_list|(
literal|"x/*"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Include
operator|.
name|Directive
operator|.
name|NONE
argument_list|,
name|i0
operator|.
name|getDirective
argument_list|()
argument_list|)
expr_stmt|;
name|Include
name|i
init|=
operator|new
name|Include
argument_list|(
literal|"x/*;all"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Include
operator|.
name|Directive
operator|.
name|ALL
argument_list|,
name|i
operator|.
name|getDirective
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|invalidDirective
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|Include
argument_list|(
literal|"x/y;all/z"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|directiveAll
parameter_list|()
throws|throws
name|Exception
block|{
name|Include
name|i
init|=
operator|new
name|Include
argument_list|(
literal|"x/*;all"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i
operator|.
name|match
argument_list|(
literal|"x/y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i
operator|.
name|match
argument_list|(
literal|"x/y/z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i
operator|.
name|match
argument_list|(
literal|"x/y/z/x"
argument_list|)
argument_list|)
expr_stmt|;
name|Include
name|i2
init|=
operator|new
name|Include
argument_list|(
literal|"x/y;all"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i2
operator|.
name|match
argument_list|(
literal|"x/y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i2
operator|.
name|match
argument_list|(
literal|"x/y/z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i2
operator|.
name|match
argument_list|(
literal|"x/y/z/x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|match
parameter_list|(
name|Include
name|i
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|i
operator|.
name|createMatcher
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|e
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|m
operator|=
name|m
operator|.
name|next
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|m
operator|.
name|isMatch
argument_list|()
return|;
block|}
block|}
end_class

end_unit

