begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|command
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|BaseMongoTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|NodeAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|builder
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|scenario
operator|.
name|SimpleNodeScenario
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests GetNodesCommandMongo.  */
end_comment

begin_class
specifier|public
class|class
name|GetNodesCommandMongoTest
extends|extends
name|BaseMongoTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|getNodesSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleNodeScenario
name|scenario
init|=
operator|new
name|SimpleNodeScenario
argument_list|(
name|mongoConnection
argument_list|)
decl_stmt|;
name|String
name|firstRevisionId
init|=
name|scenario
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|secondRevisionId
init|=
name|scenario
operator|.
name|update_A_and_add_D_and_E
argument_list|()
decl_stmt|;
name|GetNodesCommandMongo
name|command
init|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|firstRevisionId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Node
name|actual
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|Node
name|expected
init|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a\" : {} } }"
argument_list|,
name|firstRevisionId
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|secondRevisionId
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|actual
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|expected
operator|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a\" : {} } }"
argument_list|,
name|firstRevisionId
argument_list|,
name|secondRevisionId
argument_list|)
argument_list|)
expr_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getNodesDepthLimited
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleNodeScenario
name|scenario
init|=
operator|new
name|SimpleNodeScenario
argument_list|(
name|mongoConnection
argument_list|)
decl_stmt|;
name|String
name|firstRevisionId
init|=
name|scenario
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|secondRevisionId
init|=
name|scenario
operator|.
name|update_A_and_add_D_and_E
argument_list|()
decl_stmt|;
name|GetNodesCommandMongo
name|command
init|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|firstRevisionId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Node
name|actual
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|Node
name|expected
init|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%1$s\" : { \"int\" : 1 , \"b\" : {} , \"c\" : {} } } }"
argument_list|,
name|firstRevisionId
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|secondRevisionId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|actual
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|expected
operator|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%2$s\" : { \"int\" : 1 , \"double\" : 0.123, \"b\" : {} , \"c\" : {} , \"d\" : {} } } }"
argument_list|,
name|firstRevisionId
argument_list|,
name|secondRevisionId
argument_list|)
argument_list|)
expr_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|firstRevisionId
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|actual
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|expected
operator|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%1$s\" : { \"int\" : 1 , \"b#%1$s\" : { \"string\" : \"foo\" } , \"c#%1$s\" : { \"bool\" : true } } } }"
argument_list|,
name|firstRevisionId
argument_list|)
argument_list|)
expr_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|secondRevisionId
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|actual
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|expected
operator|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%2$s\" : { \"int\" : 1 , \"double\" : 0.123 , \"b#%2$s\" : { \"string\" : \"foo\" , \"e\" : {} } , \"c#%1$s\" : { \"bool\" : true }, \"d#%2$s\" : { \"null\" : null } } } }"
argument_list|,
name|firstRevisionId
argument_list|,
name|secondRevisionId
argument_list|)
argument_list|)
expr_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|firstRevisionId
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|actual
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|expected
operator|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%1$s\" : { \"int\" : 1 , \"b#%1$s\" : { \"string\" : \"foo\" } , \"c#%1$s\" : { \"bool\" : true } } } }"
argument_list|,
name|firstRevisionId
argument_list|)
argument_list|)
expr_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|secondRevisionId
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|actual
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|expected
operator|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%2$s\" : { \"int\" : 1 , \"double\" : 0.123 , \"b#%2$s\" : { \"string\" : \"foo\" , \"e#%2$s\" : { \"array\" : [ 123, null, 123.456, \"for:bar\", true ] } } , \"c#%1$s\" : { \"bool\" : true }, \"d#%2$s\" : { \"null\" : null } } } }"
argument_list|,
name|firstRevisionId
argument_list|,
name|secondRevisionId
argument_list|)
argument_list|)
expr_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getNodesDepthUnlimited
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleNodeScenario
name|scenario
init|=
operator|new
name|SimpleNodeScenario
argument_list|(
name|mongoConnection
argument_list|)
decl_stmt|;
name|String
name|firstRevisionId
init|=
name|scenario
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|secondRevisionId
init|=
name|scenario
operator|.
name|update_A_and_add_D_and_E
argument_list|()
decl_stmt|;
name|GetNodesCommandMongo
name|command
init|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|firstRevisionId
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Node
name|actual
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|Node
name|expected
init|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%1$s\" : { \"int\" : 1 , \"b#%1$s\" : { \"string\" : \"foo\" } , \"c#%1$s\" : { \"bool\" : true } } } }"
argument_list|,
name|firstRevisionId
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|secondRevisionId
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|actual
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|expected
operator|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%2$s\" : { \"int\" : 1 , \"double\" : 0.123 , \"b#%2$s\" : { \"string\" : \"foo\" , \"e#%2$s\" : { \"array\" : [ 123, null, 123.456, \"for:bar\", true ] } } , \"c#%1$s\" : { \"bool\" : true }, \"d#%2$s\" : { \"null\" : null } } } }"
argument_list|,
name|firstRevisionId
argument_list|,
name|secondRevisionId
argument_list|)
argument_list|)
expr_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getNodesAfterDeletion
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleNodeScenario
name|scenario
init|=
operator|new
name|SimpleNodeScenario
argument_list|(
name|mongoConnection
argument_list|)
decl_stmt|;
name|String
name|revisionId
init|=
name|scenario
operator|.
name|create
argument_list|()
decl_stmt|;
name|revisionId
operator|=
name|scenario
operator|.
name|delete_A
argument_list|()
expr_stmt|;
name|GetNodesCommandMongo
name|command
init|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|revisionId
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Node
name|actual
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|Node
name|expected
init|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : {} }"
argument_list|,
name|revisionId
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getNodesInvalidRevisionId
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleNodeScenario
name|scenario
init|=
operator|new
name|SimpleNodeScenario
argument_list|(
name|mongoConnection
argument_list|)
decl_stmt|;
name|scenario
operator|.
name|create
argument_list|()
expr_stmt|;
name|GetNodesCommandMongo
name|command
init|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{         }
block|}
block|}
end_class

end_unit

