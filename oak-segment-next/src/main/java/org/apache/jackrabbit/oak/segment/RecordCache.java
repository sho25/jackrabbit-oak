begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
operator|.
name|memoize
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newConcurrentMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * FIXME OAK-3348 document  */
end_comment

begin_comment
comment|// FIXME OAK-3348 implement monitoring for this cache
end_comment

begin_comment
comment|// FIXME OAK-3348 unit test
end_comment

begin_class
specifier|public
class|class
name|RecordCache
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RecordCache
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// FIXME OAK-3348 make this a feature flag
specifier|private
specifier|static
specifier|final
name|int
name|RETENTION_THRESHOLD
init|=
literal|1
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|Integer
argument_list|,
name|Supplier
argument_list|<
name|Cache
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|>
name|generations
init|=
name|newConcurrentMap
argument_list|()
decl_stmt|;
specifier|public
specifier|abstract
specifier|static
class|class
name|Cache
parameter_list|<
name|T
parameter_list|>
block|{
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Cache
argument_list|<
name|T
argument_list|>
name|disabled
parameter_list|()
block|{
return|return
operator|new
name|Cache
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|void
name|put
parameter_list|(
name|T
name|key
parameter_list|,
name|RecordId
name|value
parameter_list|)
block|{ }
annotation|@
name|Override
name|void
name|put
parameter_list|(
name|T
name|key
parameter_list|,
name|RecordId
name|value
parameter_list|,
name|int
name|cost
parameter_list|)
block|{ }
annotation|@
name|Override
name|RecordId
name|get
parameter_list|(
name|T
name|key
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
name|void
name|clear
parameter_list|()
block|{ }
block|}
return|;
block|}
specifier|abstract
name|void
name|put
parameter_list|(
name|T
name|key
parameter_list|,
name|RecordId
name|value
parameter_list|)
function_decl|;
specifier|abstract
name|void
name|put
parameter_list|(
name|T
name|key
parameter_list|,
name|RecordId
name|value
parameter_list|,
name|int
name|cost
parameter_list|)
function_decl|;
specifier|abstract
name|RecordId
name|get
parameter_list|(
name|T
name|key
parameter_list|)
function_decl|;
specifier|abstract
name|void
name|clear
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|RecordCache
argument_list|<
name|T
argument_list|>
name|disabled
parameter_list|()
block|{
return|return
operator|new
name|RecordCache
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Cache
argument_list|<
name|T
argument_list|>
name|generation
parameter_list|(
name|int
name|generation
parameter_list|)
block|{
return|return
name|Cache
operator|.
name|disabled
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|(
name|int
name|generation
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{ }
block|}
return|;
block|}
specifier|protected
name|Cache
argument_list|<
name|T
argument_list|>
name|getCache
parameter_list|(
name|int
name|generation
parameter_list|)
block|{
return|return
name|Cache
operator|.
name|disabled
argument_list|()
return|;
block|}
specifier|public
name|Cache
argument_list|<
name|T
argument_list|>
name|generation
parameter_list|(
specifier|final
name|int
name|generation
parameter_list|)
block|{
comment|// Preemptive check to limit the number of wasted Supplier instances
if|if
condition|(
operator|!
name|generations
operator|.
name|containsKey
argument_list|(
name|generation
argument_list|)
condition|)
block|{
name|generations
operator|.
name|putIfAbsent
argument_list|(
name|generation
argument_list|,
name|memoize
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Cache
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Cache
argument_list|<
name|T
argument_list|>
name|get
parameter_list|()
block|{
return|return
name|getCache
argument_list|(
name|generation
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|generations
operator|.
name|get
argument_list|(
name|generation
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|put
parameter_list|(
name|Cache
argument_list|<
name|T
argument_list|>
name|cache
parameter_list|,
name|int
name|generation
parameter_list|)
block|{
name|generations
operator|.
name|put
argument_list|(
name|generation
argument_list|,
name|Suppliers
operator|.
name|ofInstance
argument_list|(
name|cache
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearUpTo
parameter_list|(
name|int
name|maxGen
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|it
init|=
name|generations
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Integer
name|gen
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|gen
operator|<=
name|maxGen
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|clear
parameter_list|(
name|int
name|generation
parameter_list|)
block|{
name|generations
operator|.
name|remove
argument_list|(
name|generation
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|generations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
class|class
name|LRUCache
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Cache
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|T
argument_list|,
name|RecordId
argument_list|>
name|map
decl_stmt|;
specifier|public
name|LRUCache
parameter_list|(
specifier|final
name|int
name|size
parameter_list|)
block|{
name|map
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|T
argument_list|,
name|RecordId
argument_list|>
argument_list|(
name|size
operator|*
literal|4
operator|/
literal|3
argument_list|,
literal|0.75f
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|T
argument_list|,
name|RecordId
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|>=
name|size
return|;
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|put
parameter_list|(
name|T
name|key
parameter_list|,
name|RecordId
name|value
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|T
name|key
parameter_list|,
name|RecordId
name|value
parameter_list|,
name|int
name|cost
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot put with a cost"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|RecordId
name|get
parameter_list|(
name|T
name|key
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|DeduplicationCache
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Cache
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|final
name|int
name|capacity
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Map
argument_list|<
name|T
argument_list|,
name|RecordId
argument_list|>
argument_list|>
name|maps
decl_stmt|;
specifier|private
name|int
name|size
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|muteDepths
init|=
name|newHashSet
argument_list|()
decl_stmt|;
specifier|public
name|DeduplicationCache
parameter_list|(
name|int
name|capacity
parameter_list|,
name|int
name|maxDepth
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|capacity
operator|>
literal|0
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|maxDepth
operator|>
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
name|this
operator|.
name|maps
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|maxDepth
condition|;
name|k
operator|++
control|)
block|{
name|maps
operator|.
name|add
argument_list|(
operator|new
name|HashMap
argument_list|<
name|T
argument_list|,
name|RecordId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|T
name|key
parameter_list|,
name|RecordId
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot put without a cost"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|put
parameter_list|(
name|T
name|key
parameter_list|,
name|RecordId
name|value
parameter_list|,
name|int
name|cost
parameter_list|)
block|{
comment|// FIXME OAK-3348 Validate and optimise the eviction strategy.
comment|// Nodes with many children should probably get a boost to
comment|// protecting them from preemptive eviction. Also it might be
comment|// necessary to implement pinning (e.g. for checkpoints).
while|while
condition|(
name|size
operator|>=
name|capacity
condition|)
block|{
name|int
name|d
init|=
name|maps
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|removed
init|=
name|maps
operator|.
name|remove
argument_list|(
name|d
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|size
operator|-=
name|removed
expr_stmt|;
if|if
condition|(
name|removed
operator|>
literal|0
condition|)
block|{
comment|// FIXME OAK-4165: Too verbose logging during revision gc
name|LOG
operator|.
name|info
argument_list|(
literal|"Evicted cache at depth {} as size {} reached capacity {}. "
operator|+
literal|"New size is {}"
argument_list|,
name|d
argument_list|,
name|size
operator|+
name|removed
argument_list|,
name|capacity
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cost
operator|<
name|maps
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|maps
operator|.
name|get
argument_list|(
name|cost
argument_list|)
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
operator|==
literal|null
condition|)
block|{
name|size
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|muteDepths
operator|.
name|add
argument_list|(
name|cost
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Not caching {} -> {} as depth {} reaches or exceeds the maximum of {}"
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
name|cost
argument_list|,
name|maps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|RecordId
name|get
parameter_list|(
name|T
name|key
parameter_list|)
block|{
for|for
control|(
name|Map
argument_list|<
name|T
argument_list|,
name|RecordId
argument_list|>
name|map
range|:
name|maps
control|)
block|{
if|if
condition|(
operator|!
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RecordId
name|recordId
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|recordId
operator|!=
literal|null
condition|)
block|{
return|return
name|recordId
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
name|maps
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

