begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Literal
import|;
end_import

begin_comment
comment|/**  * The implementation of the corresponding JCR interface.  */
end_comment

begin_class
specifier|public
class|class
name|LiteralImpl
extends|extends
name|StaticOperandImpl
implements|implements
name|Literal
block|{
specifier|private
specifier|final
name|Value
name|value
decl_stmt|;
specifier|public
name|LiteralImpl
parameter_list|(
name|Value
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Value
name|getLiteralValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
switch|switch
condition|(
name|value
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|PropertyType
operator|.
name|BINARY
case|:
return|return
name|cast
argument_list|(
literal|"BINARY"
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|BOOLEAN
case|:
return|return
name|cast
argument_list|(
literal|"BOOLEAN"
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DATE
case|:
return|return
name|cast
argument_list|(
literal|"DATE"
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DECIMAL
case|:
return|return
name|cast
argument_list|(
literal|"DECIMAL"
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
case|case
name|PropertyType
operator|.
name|LONG
case|:
return|return
name|value
operator|.
name|getString
argument_list|()
return|;
case|case
name|PropertyType
operator|.
name|NAME
case|:
return|return
name|cast
argument_list|(
literal|"NAME"
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|PATH
case|:
return|return
name|cast
argument_list|(
literal|"PATH"
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|REFERENCE
case|:
return|return
name|cast
argument_list|(
literal|"REFERENCE"
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|STRING
case|:
return|return
name|escape
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|URI
case|:
return|return
name|cast
argument_list|(
literal|"URI"
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|WEAKREFERENCE
case|:
return|return
name|cast
argument_list|(
literal|"WEAKREFERENCE"
argument_list|)
return|;
default|default:
return|return
name|escape
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|private
name|String
name|cast
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
literal|"CAST("
operator|+
name|escape
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
operator|+
literal|" AS "
operator|+
name|type
operator|+
literal|')'
return|;
block|}
specifier|public
specifier|static
name|String
name|escape
parameter_list|(
name|String
name|v
parameter_list|)
block|{
return|return
literal|'\''
operator|+
name|v
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"''"
argument_list|)
operator|+
literal|'\''
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|bindVariables
parameter_list|(
name|QueryObjectModelImpl
name|qom
parameter_list|)
block|{
comment|// ignore
block|}
block|}
end_class

end_unit

