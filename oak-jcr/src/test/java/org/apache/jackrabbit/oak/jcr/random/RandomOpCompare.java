begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|random
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|AbstractRepositoryTest
operator|.
name|dispose
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|NodeStoreFixtures
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|MongoConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_comment
comment|/**  * A randomized test that writes to two repositories (using different storage  * backends), and compares the results. The test uses low cache sizes, and low  * thresholds / limits so that as much of the code as possible is used (high  * code coverage).  */
end_comment

begin_class
specifier|public
class|class
name|RandomOpCompare
block|{
specifier|private
specifier|static
specifier|final
name|int
name|SESSION_COUNT
init|=
literal|3
decl_stmt|;
specifier|protected
name|NodeStoreFixture
name|f1
decl_stmt|;
specifier|protected
name|NodeStoreFixture
name|f2
decl_stmt|;
specifier|protected
name|NodeStore
name|ns1
decl_stmt|,
name|ns2
decl_stmt|;
specifier|protected
name|Repository
name|r1
decl_stmt|,
name|r2
decl_stmt|;
specifier|protected
name|Session
name|session1
decl_stmt|,
name|session2
decl_stmt|;
specifier|protected
name|Session
index|[]
name|sessionList1
init|=
operator|new
name|Session
index|[
name|SESSION_COUNT
index|]
decl_stmt|;
specifier|protected
name|Session
index|[]
name|sessionList2
init|=
operator|new
name|Session
index|[
name|SESSION_COUNT
index|]
decl_stmt|;
specifier|private
name|Random
name|random
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|RandomOpCompare
name|app
init|=
operator|new
name|RandomOpCompare
argument_list|()
decl_stmt|;
name|app
operator|.
name|login
argument_list|()
expr_stmt|;
name|app
operator|.
name|test
argument_list|()
expr_stmt|;
name|app
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
static|static
block|{
comment|// TODO changes to system properties are not picked up if other tests
comment|// are run first
comment|// code coverage oak.plugins.document: 48.1%
comment|// code coverage 46.3% (8829) - with
comment|// DocumentRootBuilder
name|System
operator|.
name|setProperty
argument_list|(
literal|"update.limit"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
comment|// System.setProperty("oak.documentMK.childrenCacheLimit", "1024");
comment|// code coverage 39.8% (7583) - without
block|}
comment|// @Before
specifier|public
name|void
name|login
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|f1
operator|=
name|NodeStoreFixtures
operator|.
name|SEGMENT_TAR
expr_stmt|;
name|f2
operator|=
name|getMongo
argument_list|()
expr_stmt|;
name|ns1
operator|=
name|f1
operator|.
name|createNodeStore
argument_list|()
expr_stmt|;
name|r1
operator|=
operator|new
name|Jcr
argument_list|(
name|ns1
argument_list|)
operator|.
name|createRepository
argument_list|()
expr_stmt|;
name|session1
operator|=
name|r1
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SESSION_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|sessionList1
index|[
name|i
index|]
operator|=
name|r1
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ns2
operator|=
name|f2
operator|.
name|createNodeStore
argument_list|()
expr_stmt|;
name|r2
operator|=
operator|new
name|Jcr
argument_list|(
name|ns2
argument_list|)
operator|.
name|createRepository
argument_list|()
expr_stmt|;
name|session2
operator|=
name|r2
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SESSION_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|sessionList2
index|[
name|i
index|]
operator|=
name|r2
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// @After
specifier|public
name|void
name|logout
parameter_list|()
block|{
if|if
condition|(
name|session1
operator|!=
literal|null
condition|)
block|{
name|session1
operator|.
name|logout
argument_list|()
expr_stmt|;
name|session1
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|Session
name|s
range|:
name|sessionList1
control|)
block|{
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|session2
operator|!=
literal|null
condition|)
block|{
name|session2
operator|.
name|logout
argument_list|()
expr_stmt|;
name|session2
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|Session
name|s
range|:
name|sessionList2
control|)
block|{
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
name|r1
operator|=
name|dispose
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|r2
operator|=
name|dispose
argument_list|(
name|r2
argument_list|)
expr_stmt|;
if|if
condition|(
name|ns1
operator|!=
literal|null
condition|)
block|{
name|f1
operator|.
name|dispose
argument_list|(
name|ns1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ns2
operator|!=
literal|null
condition|)
block|{
name|f2
operator|.
name|dispose
argument_list|(
name|ns2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|NodeStoreFixture
name|getMongo
parameter_list|()
block|{
return|return
operator|new
name|NodeStoreFixture
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeStore
name|createNodeStore
parameter_list|()
block|{
name|MongoConnection
name|connection
decl_stmt|;
try|try
block|{
name|connection
operator|=
operator|new
name|MongoConnection
argument_list|(
literal|"mongodb://localhost:27017/oak"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|DB
name|mongoDB
init|=
name|connection
operator|.
name|getDB
argument_list|()
decl_stmt|;
return|return
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|memoryCacheSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setMongoDB
argument_list|(
name|mongoDB
argument_list|,
literal|16
argument_list|)
operator|.
name|setPersistentCache
argument_list|(
literal|"target/persistentCache,time"
argument_list|)
operator|.
name|getNodeStore
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeStore
name|createNodeStore
parameter_list|(
name|int
name|clusterNodeId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|)
block|{
if|if
condition|(
name|nodeStore
operator|instanceof
name|Closeable
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|Closeable
operator|)
name|nodeStore
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|;
block|}
comment|// @Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|String
name|longName
init|=
name|longNodeName
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Node
name|root1
init|=
name|session1
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"testNodeRoot"
argument_list|)
operator|.
name|addNode
argument_list|(
name|longName
argument_list|)
operator|.
name|addNode
argument_list|(
name|longName
argument_list|)
operator|.
name|addNode
argument_list|(
name|longName
argument_list|)
decl_stmt|;
name|session1
operator|.
name|save
argument_list|()
expr_stmt|;
name|Node
name|root2
init|=
name|session2
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"testNodeRoot"
argument_list|)
operator|.
name|addNode
argument_list|(
name|longName
argument_list|)
operator|.
name|addNode
argument_list|(
name|longName
argument_list|)
operator|.
name|addNode
argument_list|(
name|longName
argument_list|)
decl_stmt|;
name|session2
operator|.
name|save
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"len: "
operator|+
name|root1
operator|.
name|getPath
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|-
name|start
operator|>
literal|1000
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"i: "
operator|+
name|i
argument_list|)
expr_stmt|;
name|start
operator|=
name|now
expr_stmt|;
block|}
name|String
name|nodeName
init|=
name|randomNodeName
argument_list|()
decl_stmt|;
name|String
name|propertyName
init|=
literal|"p"
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|value
init|=
literal|"x"
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|int
name|sessionId
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|SESSION_COUNT
argument_list|)
decl_stmt|;
name|Session
name|s1
init|=
name|sessionList1
index|[
name|sessionId
index|]
decl_stmt|;
name|Session
name|s2
init|=
name|sessionList1
index|[
name|sessionId
index|]
decl_stmt|;
switch|switch
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|root1
operator|.
name|hasNode
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|root2
operator|.
name|hasNode
argument_list|(
name|nodeName
argument_list|)
argument_list|)
expr_stmt|;
name|root1
operator|.
name|getNode
argument_list|(
name|nodeName
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root2
operator|.
name|getNode
argument_list|(
name|nodeName
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|root2
operator|.
name|hasNode
argument_list|(
name|nodeName
argument_list|)
argument_list|)
expr_stmt|;
name|root1
operator|.
name|addNode
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|root2
operator|.
name|addNode
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|root1
operator|.
name|hasNode
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|root2
operator|.
name|hasNode
argument_list|(
name|nodeName
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|n1
init|=
name|root1
operator|.
name|getNode
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
name|Node
name|n2
init|=
name|root1
operator|.
name|getNode
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|n1
operator|.
name|hasProperty
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|n2
operator|.
name|hasProperty
argument_list|(
name|propertyName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|n1
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getString
argument_list|()
argument_list|,
name|n2
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|n2
operator|.
name|hasProperty
argument_list|(
name|propertyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|n1
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|s1
operator|.
name|save
argument_list|()
expr_stmt|;
name|s2
operator|.
name|save
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|private
name|String
name|randomNodeName
parameter_list|()
block|{
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|longNodeName
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|"n"
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|longNodeName
parameter_list|(
name|int
name|x
parameter_list|)
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"n"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|140
condition|;
name|i
operator|++
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|'x'
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|x
argument_list|)
expr_stmt|;
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

