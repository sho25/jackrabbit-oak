begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|query
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|query
operator|.
name|AbstractQueryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|facet
operator|.
name|FacetResult
import|;
end_import

begin_comment
comment|/**  * Test for faceting capabilities via JCR API  */
end_comment

begin_class
specifier|public
class|class
name|FacetTest
extends|extends
name|AbstractQueryTest
block|{
specifier|public
name|void
name|testFacetRetrieval
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|superuser
decl_stmt|;
name|Node
name|n1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|Node
name|n2
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"hallo"
argument_list|)
expr_stmt|;
name|Node
name|n3
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"oh hallo"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|String
name|sql2
init|=
literal|"select [jcr:path], [rep:facet(text)] from [nt:base] "
operator|+
literal|"where contains([text], 'hello OR hallo') order by [jcr:path]"
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|sql2
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|contains
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
operator|.
name|Facet
argument_list|>
name|facets
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"oh hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NodeIterator
name|nodes
init|=
name|result
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFacetRetrievalMV
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|superuser
decl_stmt|;
name|Node
name|n1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"apache jackrabbit oak"
argument_list|)
expr_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
literal|"tags"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"software"
block|,
literal|"repository"
block|,
literal|"apache"
block|}
argument_list|)
expr_stmt|;
name|Node
name|n2
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"oak furniture"
argument_list|)
expr_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
literal|"tags"
argument_list|,
literal|"furniture"
argument_list|)
expr_stmt|;
name|Node
name|n3
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"oak cosmetics"
argument_list|)
expr_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
literal|"tags"
argument_list|,
literal|"cosmetics"
argument_list|)
expr_stmt|;
name|Node
name|n4
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node4"
argument_list|)
decl_stmt|;
name|n4
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"oak and aem"
argument_list|)
expr_stmt|;
name|n4
operator|.
name|setProperty
argument_list|(
literal|"tags"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"software"
block|,
literal|"repository"
block|,
literal|"aem"
block|}
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|String
name|sql2
init|=
literal|"select [jcr:path], [rep:facet(tags)] from [nt:base] "
operator|+
literal|"where contains([jcr:title], 'oak') order by [jcr:path]"
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|sql2
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|contains
argument_list|(
literal|"tags"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
operator|.
name|Facet
argument_list|>
name|facets
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"tags"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"repository"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"software"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aem"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"apache"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cosmetics"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"furniture"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NodeIterator
name|nodes
init|=
name|result
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFacetRetrievalWithAnonymousUser
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|superuser
decl_stmt|;
name|Node
name|n1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|Node
name|n2
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"hallo"
argument_list|)
expr_stmt|;
name|Node
name|n3
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"oh hallo"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|session
operator|=
name|getHelper
argument_list|()
operator|.
name|getReadOnlySession
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|String
name|sql2
init|=
literal|"select [jcr:path], [rep:facet(text)] from [nt:base] "
operator|+
literal|"where contains([text], 'hello OR hallo') order by [jcr:path]"
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|sql2
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|contains
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
operator|.
name|Facet
argument_list|>
name|facets
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"oh hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NodeIterator
name|nodes
init|=
name|result
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFacetRetrieval2
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|superuser
decl_stmt|;
name|Node
name|n1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
name|String
name|pn
init|=
literal|"jcr:title"
decl_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|Node
name|n2
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo"
argument_list|)
expr_stmt|;
name|Node
name|n3
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"oh hallo"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|String
name|sql2
init|=
literal|"select [jcr:path], [rep:facet("
operator|+
name|pn
operator|+
literal|")] from [nt:base] "
operator|+
literal|"where contains(["
operator|+
name|pn
operator|+
literal|"], 'hallo') order by [jcr:path]"
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|sql2
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|contains
argument_list|(
name|pn
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
operator|.
name|Facet
argument_list|>
name|facets
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
name|pn
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"oh hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NodeIterator
name|nodes
init|=
name|result
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMultipleFacetsRetrieval
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|superuser
decl_stmt|;
name|Node
name|n1
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
name|String
name|pn
init|=
literal|"jcr:title"
decl_stmt|;
name|String
name|pn2
init|=
literal|"jcr:description"
decl_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|n1
operator|.
name|setProperty
argument_list|(
name|pn2
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|Node
name|n2
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"hallo"
argument_list|)
expr_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
name|pn2
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|Node
name|n3
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
name|pn
argument_list|,
literal|"oh hallo"
argument_list|)
expr_stmt|;
name|n3
operator|.
name|setProperty
argument_list|(
name|pn2
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|String
name|sql2
init|=
literal|"select [jcr:path], [rep:facet("
operator|+
name|pn
operator|+
literal|")], [rep:facet("
operator|+
name|pn2
operator|+
literal|")] from [nt:base] "
operator|+
literal|"where contains(["
operator|+
name|pn
operator|+
literal|"], 'hallo') order by [jcr:path]"
decl_stmt|;
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|sql2
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|result
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|contains
argument_list|(
name|pn
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|facetResult
operator|.
name|getDimensions
argument_list|()
operator|.
name|contains
argument_list|(
name|pn2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
operator|.
name|Facet
argument_list|>
name|facets
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
name|pn
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"oh hallo"
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
operator|.
name|Facet
argument_list|>
name|facets1
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
name|pn2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facets1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|facets1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|facets1
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets1
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NodeIterator
name|nodes
init|=
name|result
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodes
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

