begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryEngineSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests the cursors implementations.  */
end_comment

begin_class
specifier|public
class|class
name|CursorsTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|intersectionCursor
parameter_list|()
block|{
name|QueryEngineSettings
name|s
init|=
operator|new
name|QueryEngineSettings
argument_list|()
decl_stmt|;
name|Cursor
name|a
init|=
operator|new
name|SimpleCursor
argument_list|(
literal|"1:"
argument_list|,
literal|"/b"
argument_list|,
literal|"/c"
argument_list|,
literal|"/e"
argument_list|,
literal|"/e"
argument_list|,
literal|"/c"
argument_list|)
decl_stmt|;
name|Cursor
name|b
init|=
operator|new
name|SimpleCursor
argument_list|(
literal|"2:"
argument_list|,
literal|"/a"
argument_list|,
literal|"/c"
argument_list|,
literal|"/d"
argument_list|,
literal|"/b"
argument_list|,
literal|"/c"
argument_list|)
decl_stmt|;
name|Cursor
name|c
init|=
name|Cursors
operator|.
name|newIntersectionCursor
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1:/b, 1:/c"
argument_list|,
name|list
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|intersectionCursorExceptions
parameter_list|()
block|{
name|QueryEngineSettings
name|s
init|=
operator|new
name|QueryEngineSettings
argument_list|()
decl_stmt|;
name|Cursor
name|a
init|=
operator|new
name|SimpleCursor
argument_list|(
literal|"1:"
argument_list|,
literal|"/x"
argument_list|,
literal|"/b"
argument_list|,
literal|"/c"
argument_list|,
literal|"/e"
argument_list|,
literal|"/e"
argument_list|,
literal|"/c"
argument_list|)
decl_stmt|;
name|Cursor
name|b
init|=
operator|new
name|SimpleCursor
argument_list|(
literal|"2:"
argument_list|,
literal|"/a"
argument_list|,
literal|"/c"
argument_list|,
literal|"/d"
argument_list|,
literal|"/b"
argument_list|,
literal|"/c"
argument_list|)
decl_stmt|;
name|Cursor
name|c
init|=
name|Cursors
operator|.
name|newIntersectionCursor
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|c
operator|.
name|next
argument_list|()
expr_stmt|;
name|c
operator|.
name|next
argument_list|()
expr_stmt|;
try|try
block|{
name|c
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|c
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|static
name|String
name|list
parameter_list|(
name|Cursor
name|c
parameter_list|)
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|c
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
name|buff
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|", "
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|c
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
class|class
name|SimpleCursor
implements|implements
name|Cursor
block|{
specifier|final
name|Iterator
argument_list|<
name|IndexRow
argument_list|>
name|rows
decl_stmt|;
name|SimpleCursor
parameter_list|(
name|String
name|idPrefix
parameter_list|,
name|String
modifier|...
name|paths
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|IndexRow
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|IndexRow
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|paths
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|SimpleIndexRow
argument_list|(
name|p
argument_list|,
name|idPrefix
operator|+
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rows
operator|=
name|list
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|rows
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|rows
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|IndexRow
name|next
parameter_list|()
block|{
return|return
name|rows
operator|.
name|next
argument_list|()
return|;
block|}
block|}
specifier|static
class|class
name|SimpleIndexRow
implements|implements
name|IndexRow
block|{
specifier|final
name|String
name|path
decl_stmt|;
specifier|final
name|String
name|id
decl_stmt|;
name|SimpleIndexRow
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyValue
name|getValue
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|id
return|;
block|}
block|}
block|}
end_class

end_unit

