begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|synchronizedList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|getIdFromPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|junit
operator|.
name|LogCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDocumentStoreJDBC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_class
specifier|public
class|class
name|MultiDocumentStoreTest
extends|extends
name|AbstractMultiDocumentStoreTest
block|{
specifier|public
name|MultiDocumentStoreTest
parameter_list|(
name|DocumentStoreFixture
name|dsf
parameter_list|)
block|{
name|super
argument_list|(
name|dsf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInterleavedBatchUpdate
parameter_list|()
block|{
name|int
name|amount
init|=
literal|10
decl_stmt|;
name|int
name|halfAmount
init|=
name|amount
operator|/
literal|2
decl_stmt|;
name|String
name|baseId
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testInterleavedBatchUpdate"
decl_stmt|;
comment|// remove if present
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|amount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|baseId
operator|+
literal|"-"
operator|+
name|i
decl_stmt|;
name|NodeDocument
name|nd
init|=
name|super
operator|.
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|ds1
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|{
comment|// create half of the entries in ds1
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<
name|UpdateOp
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|halfAmount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|baseId
operator|+
literal|"-"
operator|+
name|i
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_createdby"
argument_list|,
literal|"ds1"
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|up
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|result
init|=
name|super
operator|.
name|ds1
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|ops
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|halfAmount
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeDocument
name|doc
range|:
name|result
control|)
block|{
name|assertNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|{
comment|// create all of the entries in ds2
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<
name|UpdateOp
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|amount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|baseId
operator|+
literal|"-"
operator|+
name|i
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_createdby"
argument_list|,
literal|"ds2"
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|up
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|result
init|=
name|super
operator|.
name|ds2
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|ops
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|amount
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeDocument
name|doc
range|:
name|result
control|)
block|{
comment|// documents are either new or have been created by ds1
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"ds1"
argument_list|,
name|doc
operator|.
name|get
argument_list|(
literal|"_createdby"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// final check: does DS1 see all documents including the changes made by DS2?
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|amount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|baseId
operator|+
literal|"-"
operator|+
name|i
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|super
operator|.
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ds2"
argument_list|,
name|doc
operator|.
name|get
argument_list|(
literal|"_createdby"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|concurrentBatchUpdate
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CountDownLatch
name|ready
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|go
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/node-"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|removeMe
operator|.
name|addAll
argument_list|(
name|ids
argument_list|)
expr_stmt|;
comment|// make sure not present before test run
name|ds1
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|ids
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Exception
argument_list|>
name|exceptions
init|=
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Exception
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|NodeDocument
argument_list|>
name|result1
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Thread
name|t1
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|ops
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|op
operator|.
name|set
argument_list|(
literal|"_t1"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|ops
argument_list|)
expr_stmt|;
name|ready
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|go
operator|.
name|await
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|docs
init|=
name|ds1
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|ops
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ops
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|UpdateOp
name|op
init|=
name|ops
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|result1
operator|.
name|put
argument_list|(
name|op
operator|.
name|getId
argument_list|()
argument_list|,
name|docs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|NodeDocument
argument_list|>
name|result2
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Thread
name|t2
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|ops
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|op
operator|.
name|set
argument_list|(
literal|"_t2"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|ops
argument_list|)
expr_stmt|;
name|ready
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|go
operator|.
name|await
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|docs
init|=
name|ds2
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|ops
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ops
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|UpdateOp
name|op
init|=
name|ops
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|result2
operator|.
name|put
argument_list|(
name|op
operator|.
name|getId
argument_list|()
argument_list|,
name|docs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|"t2"
argument_list|)
decl_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
name|ready
operator|.
name|await
argument_list|()
expr_stmt|;
name|go
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|t1
operator|.
name|join
argument_list|()
expr_stmt|;
name|t2
operator|.
name|join
argument_list|()
expr_stmt|;
for|for
control|(
name|Exception
name|e
range|:
name|exceptions
control|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|NodeDocument
name|d1
init|=
name|result1
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|NodeDocument
name|d2
init|=
name|result2
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|d1
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|d2
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"found "
operator|+
name|id
operator|+
literal|" in both result sets, modcounts are: "
operator|+
name|d1
operator|.
name|getModCount
argument_list|()
operator|+
literal|"/"
operator|+
name|d2
operator|.
name|getModCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertNotNull
argument_list|(
literal|"id "
operator|+
name|id
operator|+
literal|" is in neither result set"
argument_list|,
name|d2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|batchUpdateCachedDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|op
operator|.
name|set
argument_list|(
literal|"_ds1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ds1
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|op
argument_list|)
argument_list|)
expr_stmt|;
comment|// force ds2 to populate the cache with doc
name|assertNotNull
argument_list|(
name|ds2
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
comment|// modify doc via ds1
name|op
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|op
operator|.
name|set
argument_list|(
literal|"_ds1"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ds1
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|op
argument_list|)
argument_list|)
expr_stmt|;
comment|// modify doc via ds2 with batch createOrUpdate
name|op
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|op
operator|.
name|set
argument_list|(
literal|"_ds2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|ops
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
comment|// add more ops to make sure a batch
comment|// update call is triggered
name|String
name|docId
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/node-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|UpdateOp
name|update
init|=
operator|new
name|UpdateOp
argument_list|(
name|docId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|update
operator|.
name|set
argument_list|(
literal|"_ds2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|old
init|=
name|ds2
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|ops
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|old
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|old
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|old
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"_ds1"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeDocument
name|foo
init|=
name|ds2
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|foo
operator|.
name|get
argument_list|(
literal|"_ds1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|foo
operator|.
name|get
argument_list|(
literal|"_ds2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateRemovedNode
parameter_list|()
block|{
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"testUpdateRemovedNode"
argument_list|)
decl_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ds1
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|op
argument_list|)
argument_list|)
expr_stmt|;
comment|// get it into the cache
name|NodeDocument
name|n
init|=
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|n
argument_list|)
expr_stmt|;
comment|// delete it through the other instance
name|ds2
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
comment|// assume still in the cache?
name|NodeDocument
name|n2
init|=
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|n2
argument_list|)
expr_stmt|;
comment|// create-or-update should at least work after one retry
comment|// see OAK-7953 - note that the retry shouldn't be needed; see OAK-7745
comment|// for more information
try|try
block|{
name|UpdateOp
name|op2
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ds1
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|op2
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentStoreException
name|ex
parameter_list|)
block|{
name|UpdateOp
name|op2
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ds1
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|op2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateOrCreateDeletedDocument
parameter_list|()
block|{
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|UpdateOp
name|op1
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ds1
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|op1
argument_list|)
argument_list|)
expr_stmt|;
name|NodeDocument
name|d
init|=
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|Long
name|mc
init|=
name|d
operator|.
name|getModCount
argument_list|()
decl_stmt|;
name|ds2
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|UpdateOp
name|op2
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|NodeDocument
name|prev
init|=
name|ds1
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|op2
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|prev
argument_list|)
expr_stmt|;
comment|// make sure created
name|NodeDocument
name|created
init|=
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|created
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mc
argument_list|,
name|created
operator|.
name|getModCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateNoCreateDeletedDocument
parameter_list|()
block|{
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|UpdateOp
name|op1
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ds1
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|op1
argument_list|)
argument_list|)
expr_stmt|;
name|NodeDocument
name|d
init|=
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|ds2
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|UpdateOp
name|op2
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|NodeDocument
name|prev
init|=
name|ds1
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|op2
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|prev
argument_list|)
expr_stmt|;
comment|// make sure not created
name|assertNull
argument_list|(
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|batchUpdateNoCreateDeletedDocument
parameter_list|()
block|{
name|batchUpdateNoCreateDeletedDocument
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|batchUpdateNoCreateDeletedDocumentMany
parameter_list|()
block|{
name|batchUpdateNoCreateDeletedDocument
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|batchUpdateNoCreateDeletedDocument
parameter_list|(
name|int
name|numUpdates
parameter_list|)
block|{
name|String
name|id1
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".batchUpdateNoCreateDeletedDocument"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numUpdates
condition|;
name|i
operator|++
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|id1
operator|+
literal|"b"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|removeMe
operator|.
name|add
argument_list|(
name|id1
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|addAll
argument_list|(
name|ids
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ids
argument_list|)
decl_stmt|;
name|allIds
operator|.
name|add
argument_list|(
name|id1
argument_list|)
expr_stmt|;
comment|// create docs
for|for
control|(
name|String
name|id
range|:
name|allIds
control|)
block|{
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ds1
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
argument_list|)
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// remove id1 on ds2
name|ds2
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id1
argument_list|)
expr_stmt|;
comment|// bulk update
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ops
operator|.
name|add
argument_list|(
operator|new
name|UpdateOp
argument_list|(
name|id1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|ops
operator|.
name|add
argument_list|(
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|result
init|=
name|ds1
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|ops
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numUpdates
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// id1 result should be reported as null and not be created
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id1
argument_list|)
argument_list|)
expr_stmt|;
comment|// for other ids result should be reported with previous doc
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numUpdates
condition|;
name|i
operator|++
control|)
block|{
name|NodeDocument
name|prev
init|=
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|prev
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|ids
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|prev
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|NodeDocument
name|updated
init|=
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|updated
argument_list|)
expr_stmt|;
if|if
condition|(
name|prev
operator|.
name|getModCount
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertNotEquals
argument_list|(
name|updated
operator|.
name|getModCount
argument_list|()
argument_list|,
name|prev
operator|.
name|getModCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTraceLoggingForBulkUpdates
parameter_list|()
block|{
if|if
condition|(
name|ds
operator|instanceof
name|RDBDocumentStore
condition|)
block|{
name|int
name|count
init|=
literal|10
decl_stmt|;
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|getIdFromPath
argument_list|(
literal|"/bulktracelog-"
operator|+
name|i
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|op
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ds
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|ops
argument_list|)
expr_stmt|;
name|LogCustomizer
name|logCustomizerJDBC
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|RDBDocumentStoreJDBC
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|enable
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
operator|.
name|matchesRegex
argument_list|(
literal|"update: batch result.*"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|logCustomizerJDBC
operator|.
name|starting
argument_list|()
expr_stmt|;
name|LogCustomizer
name|logCustomizer
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|RDBDocumentStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|enable
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
operator|.
name|matchesRegex
argument_list|(
literal|"bulkUpdate: success.*"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|logCustomizer
operator|.
name|starting
argument_list|()
expr_stmt|;
try|try
block|{
name|ops
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// modify first entry through secondary store
name|String
name|modifiedRow
init|=
name|getIdFromPath
argument_list|(
literal|"/bulktracelog-"
operator|+
literal|0
argument_list|)
decl_stmt|;
name|UpdateOp
name|op2
init|=
operator|new
name|UpdateOp
argument_list|(
name|modifiedRow
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|op2
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|ds2
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|op2
argument_list|)
expr_stmt|;
comment|// delete second entry through secondary store
name|String
name|deletedRow
init|=
name|getIdFromPath
argument_list|(
literal|"/bulktracelog-"
operator|+
literal|1
argument_list|)
decl_stmt|;
name|ds2
operator|.
name|remove
argument_list|(
name|NODES
argument_list|,
name|deletedRow
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|getIdFromPath
argument_list|(
literal|"/bulktracelog-"
operator|+
name|i
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|op
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
literal|"qux"
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|op
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ds
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|ops
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logCustomizer
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logCustomizer
operator|.
name|getLogs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
literal|"failure for ["
operator|+
name|modifiedRow
operator|+
literal|", "
operator|+
name|deletedRow
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
comment|// System.out.println(logCustomizer.getLogs());
name|assertTrue
argument_list|(
name|logCustomizerJDBC
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logCustomizerJDBC
operator|.
name|getLogs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
literal|"0 (for "
operator|+
name|modifiedRow
operator|+
literal|" (1)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logCustomizerJDBC
operator|.
name|getLogs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
literal|"0 (for "
operator|+
name|deletedRow
operator|+
literal|" (1)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// System.out.println(logCustomizerJDBC.getLogs());
block|}
finally|finally
block|{
name|logCustomizer
operator|.
name|finished
argument_list|()
expr_stmt|;
name|logCustomizerJDBC
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

