begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|SplitOperations
operator|.
name|forDocument
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|getIdFromPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|getRootDocument
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|VersionGCSweepTest
extends|extends
name|AbstractTwoNodeTest
block|{
specifier|public
name|VersionGCSweepTest
parameter_list|(
name|DocumentStoreFixture
name|fixture
parameter_list|)
block|{
name|super
argument_list|(
name|fixture
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|oldSweepRevision
parameter_list|()
throws|throws
name|Exception
block|{
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|NodeDocument
operator|.
name|MODIFIED_IN_SECS_RESOLUTION
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// run background update and read, but no sweep
name|manyChanges
argument_list|(
name|ds1
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
name|ds1
operator|.
name|runBackgroundUpdateOperations
argument_list|()
expr_stmt|;
name|ds1
operator|.
name|runBackgroundReadOperations
argument_list|()
expr_stmt|;
name|int
name|ds1Splits
init|=
name|getNumSplitDocuments
argument_list|(
name|store1
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ds1Splits
operator|>
literal|0
argument_list|)
expr_stmt|;
name|manyChanges
argument_list|(
name|ds2
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
name|ds2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|int
name|ds2Splits
init|=
name|getNumSplitDocuments
argument_list|(
name|store2
argument_list|,
literal|"/"
argument_list|)
operator|-
name|ds1Splits
decl_stmt|;
name|assertTrue
argument_list|(
name|ds2Splits
operator|>
literal|0
argument_list|)
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|VersionGarbageCollector
name|gc
init|=
name|ds2
operator|.
name|getVersionGarbageCollector
argument_list|()
decl_stmt|;
name|gc
operator|.
name|gc
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
comment|// gc must collect split docs from ds2
comment|// but not from ds1, because its sweep revision
comment|// is older than the gc maxRevisionAge
name|assertEquals
argument_list|(
name|ds1Splits
argument_list|,
name|getNumSplitDocuments
argument_list|(
name|store2
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|NodeDocument
argument_list|>
name|prevs
init|=
name|getRootDocument
argument_list|(
name|store2
argument_list|)
operator|.
name|getAllPreviousDocs
argument_list|()
decl_stmt|;
while|while
condition|(
name|prevs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
for|for
control|(
name|Revision
name|r
range|:
name|prevs
operator|.
name|next
argument_list|()
operator|.
name|getAllChanges
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|ds1
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|r
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|manyChanges
parameter_list|(
name|DocumentNodeStore
name|ns
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|nb
init|=
name|builder
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|nb
operator|=
name|nb
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|nb
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// also set property on root node. this will use
comment|// the root document as the commit root
name|builder
operator|.
name|setProperty
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|path
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|TestUtils
operator|.
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|10
operator|==
literal|9
condition|)
block|{
name|splitRoot
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|splitRoot
parameter_list|(
name|DocumentNodeStore
name|ns
parameter_list|)
throws|throws
name|Exception
block|{
name|DocumentStore
name|store
init|=
name|ns
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|getRootDocument
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|ops
init|=
name|forDocument
argument_list|(
name|doc
argument_list|,
name|ns
argument_list|,
name|ns
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
name|TestUtils
operator|.
name|NO_BINARY
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|ops
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|ops
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|int
name|getNumSplitDocuments
parameter_list|(
name|DocumentStore
name|store
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|getIdFromPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
return|return
name|Iterators
operator|.
name|size
argument_list|(
name|doc
operator|.
name|getAllPreviousDocs
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

