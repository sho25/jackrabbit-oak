begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|remote
operator|.
name|util
operator|.
name|BoundedInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|remote
operator|.
name|util
operator|.
name|ChunkedInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * HTTP Request implementation.  */
end_comment

begin_class
class|class
name|Request
implements|implements
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_11_PROTOCOL
init|=
literal|"HTTP/1.1"
decl_stmt|;
specifier|private
name|InputStream
name|in
decl_stmt|;
specifier|private
name|String
name|method
decl_stmt|;
specifier|private
name|String
name|file
decl_stmt|;
specifier|private
name|String
name|queryString
decl_stmt|;
specifier|private
name|String
name|protocol
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|paramsChecked
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ChunkedInputStream
name|chunkedIn
init|=
operator|new
name|ChunkedInputStream
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|private
name|InputStream
name|reqIn
decl_stmt|;
comment|/**      * Parse a request. This automatically resets any internal state, so it can be      * used multiple times      *      * @param in input stream      * @throws IOException if an I/O error occurs      */
name|void
name|parse
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|requestLine
init|=
name|readLine
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|requestLine
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Bad HTTP request line: %s"
argument_list|,
name|requestLine
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|method
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
name|String
name|uri
init|=
name|parts
index|[
literal|1
index|]
decl_stmt|;
name|int
name|index
init|=
name|uri
operator|.
name|lastIndexOf
argument_list|(
literal|'?'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
name|file
operator|=
name|uri
expr_stmt|;
name|queryString
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|file
operator|=
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|queryString
operator|=
name|uri
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|protocol
operator|=
name|parts
index|[
literal|2
index|]
expr_stmt|;
name|headers
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|String
name|headerLine
init|=
name|readLine
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerLine
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
break|break;
block|}
name|parts
operator|=
name|headerLine
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|parts
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|parts
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|params
operator|.
name|clear
argument_list|()
expr_stmt|;
name|paramsChecked
operator|=
literal|false
expr_stmt|;
name|reqIn
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
comment|/**      * Read a single line, terminated by a CR LF combination from an {@code InputStream}.      *      * @return line      * @throws IOException if an I/O error occurs      */
specifier|private
specifier|static
name|String
name|readLine
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|line
init|=
operator|new
name|StringBuilder
argument_list|(
literal|128
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|c
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'\r'
case|:
comment|// swallow
break|break;
case|case
literal|'\n'
case|:
return|return
name|line
operator|.
name|toString
argument_list|()
return|;
case|case
operator|-
literal|1
case|:
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
default|default:
name|line
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
specifier|public
name|String
name|getFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
specifier|private
name|String
name|getContentType
parameter_list|()
block|{
name|String
name|ct
init|=
name|headers
operator|.
name|get
argument_list|(
literal|"content-type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ct
operator|!=
literal|null
condition|)
block|{
name|int
name|sep
init|=
name|ct
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|sep
operator|!=
operator|-
literal|1
condition|)
block|{
name|ct
operator|=
name|ct
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sep
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ct
return|;
block|}
specifier|private
name|int
name|getContentLength
parameter_list|()
block|{
name|String
name|s
init|=
name|headers
operator|.
name|get
argument_list|(
literal|"content-length"
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|/* ignore */
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|String
name|getUserAgent
parameter_list|()
block|{
return|return
name|headers
operator|.
name|get
argument_list|(
literal|"user-agent"
argument_list|)
return|;
block|}
specifier|public
name|String
name|getQueryString
parameter_list|()
block|{
return|return
name|queryString
return|;
block|}
specifier|public
name|String
name|getParameter
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|paramsChecked
condition|)
block|{
try|try
block|{
name|String
name|contentType
init|=
name|getContentType
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"application/x-www-form-urlencoded"
operator|.
name|equals
argument_list|(
name|contentType
argument_list|)
condition|)
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|getInputStream
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|collectParameters
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|paramsChecked
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|params
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|String
name|getParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|s
init|=
name|getParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
return|return
name|s
return|;
block|}
return|return
name|defaultValue
return|;
block|}
specifier|public
name|int
name|getParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|defaultValue
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|s
init|=
name|getParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|/* ignore */
block|}
block|}
return|return
name|defaultValue
return|;
block|}
specifier|public
name|long
name|getParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|defaultValue
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|s
init|=
name|getParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|s
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|/* ignore */
block|}
block|}
return|return
name|defaultValue
return|;
block|}
specifier|public
name|InputStream
name|getFileParameter
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|ct
init|=
name|getContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|ct
operator|==
literal|null
operator|||
operator|!
name|ct
operator|.
name|startsWith
argument_list|(
literal|"multipart/form-data"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|reqIn
operator|!=
literal|null
condition|)
block|{
comment|/* might already be consumed */
return|return
literal|null
return|;
block|}
name|InputStream
name|body
init|=
name|getInputStream
argument_list|()
decl_stmt|;
name|String
name|boundary
init|=
name|readLine
argument_list|(
name|body
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|String
name|line
init|=
name|readLine
argument_list|(
name|body
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
break|break;
block|}
comment|// TODO evaluate other information (such as mime type)
block|}
return|return
operator|new
name|BoundaryInputStream
argument_list|(
name|body
argument_list|,
name|boundary
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|collectParameters
parameter_list|(
name|String
name|s
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|param
range|:
name|s
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
control|)
block|{
name|String
index|[]
name|nv
init|=
name|param
operator|.
name|split
argument_list|(
literal|"="
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|nv
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|nv
index|[
literal|0
index|]
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|,
name|URLDecoder
operator|.
name|decode
argument_list|(
name|nv
index|[
literal|1
index|]
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
block|{
if|if
condition|(
name|reqIn
operator|==
literal|null
condition|)
block|{
name|String
name|encoding
init|=
name|headers
operator|.
name|get
argument_list|(
literal|"transfer-encoding"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"chunked"
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoding
argument_list|)
condition|)
block|{
name|chunkedIn
operator|.
name|recycle
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|reqIn
operator|=
name|chunkedIn
expr_stmt|;
block|}
else|else
block|{
name|int
name|contentLength
init|=
name|getContentLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentLength
operator|==
operator|-
literal|1
condition|)
block|{
name|contentLength
operator|=
literal|0
expr_stmt|;
block|}
name|reqIn
operator|=
operator|new
name|BoundedInputStream
argument_list|(
name|in
argument_list|,
name|contentLength
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|reqIn
return|;
block|}
name|boolean
name|isKeepAlive
parameter_list|()
block|{
return|return
name|HTTP_11_PROTOCOL
operator|.
name|equals
argument_list|(
name|protocol
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// Consume a possibly non-empty body by triggering the
comment|// creation of our request input stream
name|getInputStream
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|reqIn
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

