begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractRebaseDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * This implementation of {@code RebaseDiff} implements a  * {@link org.apache.jackrabbit.oak.spi.state.NodeStateDiff}  * for applying changes made on top of secure node states  * to a node builder for the underlying non secure node state  * of the before state.  *  * @see SecureNodeState  */
end_comment

begin_class
class|class
name|SecuredNodeRebaseDiff
extends|extends
name|AbstractRebaseDiff
block|{
specifier|private
name|SecuredNodeRebaseDiff
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
comment|/**      * Rebase the differences between {@code before} and {@code after} on top of      * {@code builder}. Add existing node and add existing property conflicts give      * precedence to the {@code after} state. All other conflicts are unexpected      * and result in an {@code IllegalStateException}.      *      * @param before   before state      * @param after    after state      * @param builder  builder based on the before state      * @return  node state resulting from applying the differences between      *          {@code before} and {@code after} to {@code builder}      * @throws IllegalStateException  if an unexpected conflict occurs due to      *         {@code builder} not being based on {@code before}.      */
specifier|public
specifier|static
name|NodeState
name|rebase
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|SecuredNodeRebaseDiff
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getNodeState
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|SecuredNodeRebaseDiff
name|createDiff
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|SecuredNodeRebaseDiff
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This conflict corresponds to the shadowing of an invisible property.      * @param builder  parent builder      * @param before existing property      * @param after  added property      */
annotation|@
name|Override
specifier|protected
name|void
name|addExistingProperty
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|changeDeletedProperty
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected conflict: change deleted property: "
operator|+
name|after
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|changeChangedProperty
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected conflict: change changed property from "
operator|+
name|before
operator|+
literal|" to "
operator|+
name|after
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deleteDeletedProperty
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|PropertyState
name|before
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected conflict: delete deleted property: "
operator|+
name|before
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deleteChangedProperty
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|PropertyState
name|before
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected conflict: delete changed property: "
operator|+
name|before
argument_list|)
throw|;
block|}
comment|/**      * This conflict corresponds to the shadowing of an invisible node      * @param builder  parent builder      * @param before existing property      * @param after  added property      */
annotation|@
name|Override
specifier|protected
name|void
name|addExistingNode
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
comment|// FIXME (OAK-709) after might be a secured node instead of the underlying non secured node.
comment|// Pushing this on the non secured builder is wrong.
comment|// AFAICS this is only relevant when the after node state has been moved here
name|builder
operator|.
name|setChildNode
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|changeDeletedNode
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected conflict: change deleted node: "
operator|+
name|name
operator|+
literal|" : "
operator|+
name|after
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deleteDeletedNode
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected conflict: delete deleted node: "
operator|+
name|name
operator|+
literal|" : "
operator|+
name|before
argument_list|)
throw|;
block|}
comment|/**      * This conflict occurs when deleting a node that has an invisible child node.      * @param builder  parent builder      * @param name      * @param before  deleted node      */
annotation|@
name|Override
specifier|protected
name|void
name|deleteChangedNode
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
name|builder
operator|.
name|removeChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

