begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|counter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|Multiplexers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|MountsNodeCounterTest
block|{
specifier|private
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|private
name|Root
name|root
decl_stmt|;
specifier|private
name|MountInfoProvider
name|mip
decl_stmt|;
specifier|private
name|Whiteboard
name|wb
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentSession
name|session
init|=
name|createRepository
argument_list|()
operator|.
name|login
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|root
operator|=
name|session
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleMounts
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|root
operator|.
name|getTree
argument_list|(
literal|"/oak:index/counter"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"resolution"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|apps
init|=
name|rootTree
operator|.
name|addChild
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|Tree
name|libs
init|=
name|rootTree
operator|.
name|addChild
argument_list|(
literal|"libs"
argument_list|)
decl_stmt|;
name|Tree
name|content
init|=
name|rootTree
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|Tree
name|nested
init|=
name|rootTree
operator|.
name|addChild
argument_list|(
literal|"nested"
argument_list|)
decl_stmt|;
name|Tree
name|nestedMount
init|=
name|nested
operator|.
name|addChild
argument_list|(
literal|"mount"
argument_list|)
decl_stmt|;
name|Tree
name|fragments
init|=
name|rootTree
operator|.
name|addChild
argument_list|(
literal|"var"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"fragments"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"oak:mount-libs"
argument_list|)
decl_stmt|;
name|addChildren
argument_list|(
name|apps
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|addChildren
argument_list|(
name|libs
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|addChildren
argument_list|(
name|content
argument_list|,
literal|400
argument_list|)
expr_stmt|;
name|addChildren
argument_list|(
name|nested
argument_list|,
literal|800
argument_list|)
expr_stmt|;
name|addChildren
argument_list|(
name|nestedMount
argument_list|,
literal|1600
argument_list|)
expr_stmt|;
name|addChildren
argument_list|(
name|fragments
argument_list|,
literal|3200
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|runAsyncIndex
argument_list|()
expr_stmt|;
comment|// leaves:
name|Mount
name|defaultMount
init|=
name|mip
operator|.
name|getDefaultMount
argument_list|()
decl_stmt|;
name|Mount
name|libsMount
init|=
name|mip
operator|.
name|getMountByName
argument_list|(
literal|"libs"
argument_list|)
decl_stmt|;
name|assertCountEquals
argument_list|(
literal|100
argument_list|,
name|libsMount
argument_list|,
literal|"apps"
argument_list|)
expr_stmt|;
name|assertCountEquals
argument_list|(
literal|200
argument_list|,
name|libsMount
argument_list|,
literal|"libs"
argument_list|)
expr_stmt|;
name|assertCountEquals
argument_list|(
literal|400
argument_list|,
name|defaultMount
argument_list|,
literal|"content"
argument_list|)
expr_stmt|;
name|assertCountEquals
argument_list|(
literal|800
argument_list|,
name|defaultMount
argument_list|,
literal|"nested"
argument_list|)
expr_stmt|;
name|assertCountEquals
argument_list|(
literal|1600
argument_list|,
name|libsMount
argument_list|,
literal|"nested/mount"
argument_list|)
expr_stmt|;
name|assertCountEquals
argument_list|(
literal|3200
argument_list|,
name|libsMount
argument_list|,
literal|"var"
argument_list|)
expr_stmt|;
name|assertCountEquals
argument_list|(
literal|3200
argument_list|,
name|libsMount
argument_list|,
literal|"var/fragments"
argument_list|)
expr_stmt|;
name|assertCountEquals
argument_list|(
literal|3200
argument_list|,
name|libsMount
argument_list|,
literal|"var/fragments/oak:mount-libs"
argument_list|)
expr_stmt|;
name|assertCountEquals
argument_list|(
literal|0
argument_list|,
name|defaultMount
argument_list|,
literal|"var"
argument_list|)
expr_stmt|;
name|assertCountEquals
argument_list|(
literal|0
argument_list|,
name|defaultMount
argument_list|,
literal|"var/fragments"
argument_list|)
expr_stmt|;
name|assertCountEquals
argument_list|(
literal|100
operator|+
literal|200
operator|+
literal|1600
operator|+
literal|3200
argument_list|,
name|libsMount
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertCountEquals
argument_list|(
literal|1600
argument_list|,
name|libsMount
argument_list|,
literal|"nested"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertCountEquals
parameter_list|(
name|int
name|expectedCount
parameter_list|,
name|Mount
name|mount
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|String
name|p
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
literal|"/oak:index/counter"
argument_list|,
name|Multiplexers
operator|.
name|getNodeForMount
argument_list|(
name|mount
argument_list|,
literal|":index"
argument_list|)
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|NodeState
name|s
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|element
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|p
argument_list|)
control|)
block|{
name|s
operator|=
name|s
operator|.
name|getChildNode
argument_list|(
name|element
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|expectedCount
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"Can't find node "
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|PropertyState
name|ps
init|=
name|s
operator|.
name|getProperty
argument_list|(
literal|":cnt"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|expectedCount
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"There's no :cnt property on "
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
name|long
name|v
init|=
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected:<"
operator|+
name|expectedCount
operator|+
literal|"> but was:<"
operator|+
name|v
operator|+
literal|">"
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|expectedCount
operator|-
name|v
argument_list|)
operator|<
literal|10
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|addChildren
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|int
name|count
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|tree
operator|.
name|addChild
argument_list|(
literal|"n-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
name|Mounts
operator|.
name|Builder
name|builder
init|=
name|Mounts
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|mount
argument_list|(
literal|"libs"
argument_list|,
literal|false
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/var/fragments"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/apps"
argument_list|,
literal|"/libs"
argument_list|,
literal|"/nested/mount"
argument_list|)
argument_list|)
expr_stmt|;
name|mip
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|nodeStore
operator|=
operator|new
name|MemoryNodeStore
argument_list|()
expr_stmt|;
name|Oak
name|oak
init|=
operator|new
name|Oak
argument_list|(
name|nodeStore
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
operator|.
name|with
argument_list|(
name|mip
argument_list|)
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|NodeCounterEditorProvider
argument_list|()
operator|.
name|with
argument_list|(
name|mip
argument_list|)
argument_list|)
comment|//Effectively disable async indexing auto run
comment|//such that we can control run timing as per test requirement
operator|.
name|withAsyncIndexing
argument_list|(
literal|"async"
argument_list|,
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toSeconds
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|wb
operator|=
name|oak
operator|.
name|getWhiteboard
argument_list|()
expr_stmt|;
return|return
name|oak
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
specifier|private
name|void
name|runAsyncIndex
parameter_list|()
block|{
name|Runnable
name|async
init|=
name|WhiteboardUtils
operator|.
name|getService
argument_list|(
name|wb
argument_list|,
name|Runnable
operator|.
name|class
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Runnable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|test
parameter_list|(
annotation|@
name|Nullable
name|Runnable
name|input
parameter_list|)
block|{
return|return
name|input
operator|instanceof
name|AsyncIndexUpdate
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|async
argument_list|)
expr_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

