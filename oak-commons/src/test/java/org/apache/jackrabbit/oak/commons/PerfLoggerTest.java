begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|MockitoAnnotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verifyNoMoreInteractions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|PerfLoggerTest
block|{
annotation|@
name|Mock
name|Logger
name|logger
decl_stmt|;
specifier|private
name|PerfLogger
name|perfLogger
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|MockitoAnnotations
operator|.
name|initMocks
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|perfLogger
operator|=
operator|new
name|PerfLogger
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
comment|//test for logger set at TRACE
annotation|@
name|Test
specifier|public
name|void
name|logAtTraceSimpleStart
parameter_list|()
block|{
name|setupTraceLogger
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|perfLogger
operator|.
name|start
argument_list|()
decl_stmt|;
name|perfLogger
operator|.
name|end
argument_list|(
name|start
argument_list|,
operator|-
literal|1
argument_list|,
literal|"message"
argument_list|,
literal|"argument"
argument_list|)
expr_stmt|;
name|verifyTraceInteractions
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyDebugInteractions
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|logAtTraceMessageStart
parameter_list|()
block|{
name|setupTraceLogger
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|perfLogger
operator|.
name|start
argument_list|(
literal|"Start message"
argument_list|)
decl_stmt|;
name|perfLogger
operator|.
name|end
argument_list|(
name|start
argument_list|,
operator|-
literal|1
argument_list|,
literal|"message"
argument_list|,
literal|"argument"
argument_list|)
expr_stmt|;
name|verifyTraceInteractions
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyDebugInteractions
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|logAtTraceSimpleStartWithInfoLog
parameter_list|()
block|{
name|setupTraceLogger
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|perfLogger
operator|.
name|startForInfoLog
argument_list|()
decl_stmt|;
name|perfLogger
operator|.
name|end
argument_list|(
name|start
argument_list|,
operator|-
literal|1
argument_list|,
literal|"message"
argument_list|,
literal|"argument"
argument_list|)
expr_stmt|;
name|verifyTraceInteractions
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyInfoInteractions
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|logAtTraceMessageStartWithInfoLog
parameter_list|()
block|{
name|setupTraceLogger
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|perfLogger
operator|.
name|startForInfoLog
argument_list|(
literal|"Start message"
argument_list|)
decl_stmt|;
name|perfLogger
operator|.
name|end
argument_list|(
name|start
argument_list|,
operator|-
literal|1
argument_list|,
literal|"message"
argument_list|,
literal|"argument"
argument_list|)
expr_stmt|;
name|verifyTraceInteractions
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyInfoInteractions
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
comment|//end TRACE tests
comment|//test for logger set at DEBUG
annotation|@
name|Test
specifier|public
name|void
name|logAtDebugSimpleStart
parameter_list|()
block|{
name|setupDebugLogger
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|perfLogger
operator|.
name|start
argument_list|()
decl_stmt|;
name|perfLogger
operator|.
name|end
argument_list|(
name|start
argument_list|,
operator|-
literal|1
argument_list|,
literal|"message"
argument_list|,
literal|"argument"
argument_list|)
expr_stmt|;
name|verifyTraceInteractions
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyDebugInteractions
argument_list|(
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|logAtDebugMessageStart
parameter_list|()
block|{
name|setupDebugLogger
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|perfLogger
operator|.
name|start
argument_list|(
literal|"Start message"
argument_list|)
decl_stmt|;
name|perfLogger
operator|.
name|end
argument_list|(
name|start
argument_list|,
operator|-
literal|1
argument_list|,
literal|"message"
argument_list|,
literal|"argument"
argument_list|)
expr_stmt|;
name|verifyTraceInteractions
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyDebugInteractions
argument_list|(
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|logAtDebugSimpleStartWithInfoLog
parameter_list|()
block|{
name|setupDebugLogger
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|perfLogger
operator|.
name|startForInfoLog
argument_list|()
decl_stmt|;
name|perfLogger
operator|.
name|end
argument_list|(
name|start
argument_list|,
operator|-
literal|1
argument_list|,
literal|"message"
argument_list|,
literal|"argument"
argument_list|)
expr_stmt|;
name|verifyTraceInteractions
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyDebugInteractions
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyInfoInteractions
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|logAtDebugMessageStartWithInfoLog
parameter_list|()
block|{
name|setupDebugLogger
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|perfLogger
operator|.
name|startForInfoLog
argument_list|(
literal|"Start message"
argument_list|)
decl_stmt|;
name|perfLogger
operator|.
name|end
argument_list|(
name|start
argument_list|,
operator|-
literal|1
argument_list|,
literal|"message"
argument_list|,
literal|"argument"
argument_list|)
expr_stmt|;
name|verifyTraceInteractions
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyDebugInteractions
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyInfoInteractions
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
comment|//end DEBUG tests
comment|//test for logger set at INFO
annotation|@
name|Test
specifier|public
name|void
name|logAtInfoSimpleStart
parameter_list|()
block|{
name|setupInfoLogger
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|perfLogger
operator|.
name|start
argument_list|()
decl_stmt|;
name|perfLogger
operator|.
name|end
argument_list|(
name|start
argument_list|,
operator|-
literal|1
argument_list|,
literal|"message"
argument_list|,
literal|"argument"
argument_list|)
expr_stmt|;
name|verifyDebugInteractions
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|logAtInfoMessageStart
parameter_list|()
block|{
name|setupInfoLogger
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|perfLogger
operator|.
name|start
argument_list|(
literal|"Start message"
argument_list|)
decl_stmt|;
name|perfLogger
operator|.
name|end
argument_list|(
name|start
argument_list|,
operator|-
literal|1
argument_list|,
literal|"message"
argument_list|,
literal|"argument"
argument_list|)
expr_stmt|;
name|verifyDebugInteractions
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|logAtInfoSimpleStartWithInfoLog
parameter_list|()
block|{
name|setupInfoLogger
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|perfLogger
operator|.
name|startForInfoLog
argument_list|()
decl_stmt|;
name|perfLogger
operator|.
name|end
argument_list|(
name|start
argument_list|,
operator|-
literal|1
argument_list|,
literal|"message"
argument_list|,
literal|"argument"
argument_list|)
expr_stmt|;
name|verifyTraceInteractions
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyDebugInteractions
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyInfoInteractions
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|logAtInfoMessageStartWithInfoLog
parameter_list|()
block|{
name|setupInfoLogger
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|perfLogger
operator|.
name|startForInfoLog
argument_list|(
literal|"Start message"
argument_list|)
decl_stmt|;
name|perfLogger
operator|.
name|end
argument_list|(
name|start
argument_list|,
operator|-
literal|1
argument_list|,
literal|"message"
argument_list|,
literal|"argument"
argument_list|)
expr_stmt|;
name|verifyTraceInteractions
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyDebugInteractions
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyInfoInteractions
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
comment|//end INFO tests
specifier|private
name|void
name|setupTraceLogger
parameter_list|()
block|{
name|when
argument_list|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setupDebugLogger
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setupDebugLogger
parameter_list|()
block|{
name|when
argument_list|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setupInfoLogger
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setupInfoLogger
parameter_list|()
block|{
name|when
argument_list|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyTraceInteractions
parameter_list|(
name|int
name|enabled
parameter_list|,
name|boolean
name|shouldLogStart
parameter_list|,
name|boolean
name|shouldLogEnd
parameter_list|)
block|{
name|verify
argument_list|(
name|logger
argument_list|,
name|times
argument_list|(
name|enabled
argument_list|)
argument_list|)
operator|.
name|isTraceEnabled
argument_list|()
expr_stmt|;
if|if
condition|(
name|shouldLogStart
condition|)
block|{
name|verify
argument_list|(
name|logger
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|trace
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shouldLogEnd
condition|)
block|{
name|verify
argument_list|(
name|logger
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|trace
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyDebugInteractions
parameter_list|(
name|int
name|enabled
parameter_list|,
name|boolean
name|shouldLog
parameter_list|)
block|{
name|verify
argument_list|(
name|logger
argument_list|,
name|times
argument_list|(
name|enabled
argument_list|)
argument_list|)
operator|.
name|isDebugEnabled
argument_list|()
expr_stmt|;
if|if
condition|(
name|shouldLog
condition|)
block|{
name|verify
argument_list|(
name|logger
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|debug
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyInfoInteractions
parameter_list|(
name|int
name|enabled
parameter_list|,
name|boolean
name|shouldLog
parameter_list|)
block|{
name|verify
argument_list|(
name|logger
argument_list|,
name|times
argument_list|(
name|enabled
argument_list|)
argument_list|)
operator|.
name|isInfoEnabled
argument_list|()
expr_stmt|;
if|if
condition|(
name|shouldLog
condition|)
block|{
name|verify
argument_list|(
name|logger
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|info
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

