begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|prototype
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|blob
operator|.
name|MongoBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|prototype
operator|.
name|Node
operator|.
name|Children
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_comment
comment|/**  * A MicroKernel implementation that stores the data in a MongoDB.  */
end_comment

begin_class
specifier|public
class|class
name|MongoMK
implements|implements
name|MicroKernel
block|{
comment|/**      * The delay for asynchronous operations (delayed commit propagation and      * cache update).      */
specifier|protected
specifier|static
specifier|final
name|long
name|ASYNC_DELAY
init|=
literal|1000
decl_stmt|;
comment|/**      * For revisions that are older than this many seconds, the MongoMK will      * assume the revision is valid. For more recent changes, the MongoMK needs      * to verify it first (by reading the revision root). The default is      * Integer.MAX_VALUE, meaning no revisions are trusted. Once the garbage      * collector removes old revisions, this value is changed.      */
specifier|private
specifier|static
specifier|final
name|int
name|trustedRevisionAge
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|AtomicBoolean
name|isDisposed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
comment|/**      * The MongoDB store (might be used by multiple MongoMKs).      */
specifier|private
specifier|final
name|DocumentStore
name|store
decl_stmt|;
comment|/**      * The MongoDB blob store.      */
specifier|private
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
comment|/**      * The unique cluster id, similar to the unique machine id in MongoDB.      */
specifier|private
specifier|final
name|int
name|clusterId
decl_stmt|;
comment|/**      * The node cache.      *      * Key: path@rev      * Value: node      */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
name|nodeCache
init|=
operator|new
name|Cache
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
comment|/**      * Child node cache.      */
specifier|private
name|Cache
argument_list|<
name|String
argument_list|,
name|Node
operator|.
name|Children
argument_list|>
name|nodeChildrenCache
init|=
operator|new
name|Cache
argument_list|<
name|String
argument_list|,
name|Node
operator|.
name|Children
argument_list|>
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
comment|/**      * The unsaved write count increments.      */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|writeCountIncrements
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * The set of known valid revision.      * The key is the revision id, the value is 1 (because a cache can't be a set).      */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|revCache
init|=
operator|new
name|Cache
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
comment|/**      * The last known head revision. This is the last-known revision.      */
specifier|private
name|Revision
name|headRevision
decl_stmt|;
specifier|private
name|Thread
name|backgroundThread
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|branchCommits
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Create a new in-memory MongoMK used for testing.      */
specifier|public
name|MongoMK
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|MemoryDocumentStore
argument_list|()
argument_list|,
operator|new
name|MemoryBlobStore
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new MongoMK.      *       * @param db the MongoDB connection (null for in-memory)      * @param clusterId the cluster id (must be unique)      */
specifier|public
name|MongoMK
parameter_list|(
name|DB
name|db
parameter_list|,
name|int
name|clusterId
parameter_list|)
block|{
name|this
argument_list|(
name|db
operator|==
literal|null
condition|?
operator|new
name|MemoryDocumentStore
argument_list|()
else|:
operator|new
name|MongoDocumentStore
argument_list|(
name|db
argument_list|)
argument_list|,
name|db
operator|==
literal|null
condition|?
operator|new
name|MemoryBlobStore
argument_list|()
else|:
operator|new
name|MongoBlobStore
argument_list|(
name|db
argument_list|)
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new MongoMK.      *      * @param store the store (might be shared)      * @param blobStore the blob store to use      * @param clusterId the cluster id (must be unique)      */
specifier|public
name|MongoMK
parameter_list|(
name|DocumentStore
name|store
parameter_list|,
name|BlobStore
name|blobStore
parameter_list|,
name|int
name|clusterId
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
name|backgroundThread
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|BackgroundOperation
argument_list|(
name|this
argument_list|,
name|isDisposed
argument_list|)
argument_list|,
literal|"MongoMK background thread"
argument_list|)
expr_stmt|;
name|backgroundThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|backgroundThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|headRevision
operator|=
name|Revision
operator|.
name|newRevision
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|readNode
argument_list|(
literal|"/"
argument_list|,
name|headRevision
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
comment|// root node is missing: repository is not initialized
name|Commit
name|commit
init|=
operator|new
name|Commit
argument_list|(
name|this
argument_list|,
name|headRevision
argument_list|)
decl_stmt|;
name|n
operator|=
operator|new
name|Node
argument_list|(
literal|"/"
argument_list|,
name|headRevision
argument_list|)
expr_stmt|;
name|commit
operator|.
name|addNode
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|commit
operator|.
name|applyToDocumentStore
argument_list|()
expr_stmt|;
block|}
block|}
name|Revision
name|newRevision
parameter_list|()
block|{
return|return
name|Revision
operator|.
name|newRevision
argument_list|(
name|clusterId
argument_list|)
return|;
block|}
name|void
name|runBackgroundOperations
parameter_list|()
block|{
comment|// to be implemented
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isDisposed
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|isDisposed
init|)
block|{
name|isDisposed
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|backgroundThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|store
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Get the node for the given path and revision. The returned object might      * not be modified directly.      *      * @param path      * @param rev      * @return the node      */
name|Node
name|getNode
parameter_list|(
name|String
name|path
parameter_list|,
name|Revision
name|rev
parameter_list|)
block|{
name|String
name|key
init|=
name|path
operator|+
literal|"@"
operator|+
name|rev
decl_stmt|;
name|Node
name|node
init|=
name|nodeCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|node
operator|=
name|readNode
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|nodeCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|node
return|;
block|}
specifier|private
name|boolean
name|includeRevision
parameter_list|(
name|Revision
name|x
parameter_list|,
name|Revision
name|requestRevision
parameter_list|)
block|{
if|if
condition|(
name|x
operator|.
name|getClusterId
argument_list|()
operator|==
name|this
operator|.
name|clusterId
operator|&&
name|requestRevision
operator|.
name|getClusterId
argument_list|()
operator|==
name|this
operator|.
name|clusterId
condition|)
block|{
comment|// both revisions were created by this cluster node:
comment|// compare timestamps only
return|return
name|requestRevision
operator|.
name|compareRevisionTime
argument_list|(
name|x
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|// TODO currently we only compare the timestamps
return|return
name|x
operator|.
name|compareRevisionTime
argument_list|(
name|requestRevision
argument_list|)
operator|>=
literal|0
return|;
block|}
name|boolean
name|isRevisionNewer
parameter_list|(
name|Revision
name|x
parameter_list|,
name|Revision
name|previous
parameter_list|)
block|{
comment|// TODO currently we only compare the timestamps
return|return
name|x
operator|.
name|compareRevisionTime
argument_list|(
name|previous
argument_list|)
operator|>=
literal|0
return|;
block|}
specifier|public
name|Node
operator|.
name|Children
name|readChildren
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|Revision
name|rev
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|Node
operator|.
name|Children
name|c
decl_stmt|;
name|c
operator|=
name|nodeChildrenCache
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
return|return
name|c
return|;
block|}
name|String
name|from
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|from
operator|=
name|Node
operator|.
name|convertPathToDocumentId
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|from
operator|=
name|from
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|from
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|String
name|to
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
literal|"z"
argument_list|)
decl_stmt|;
name|to
operator|=
name|Node
operator|.
name|convertPathToDocumentId
argument_list|(
name|to
argument_list|)
expr_stmt|;
name|to
operator|=
name|to
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|to
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
operator|+
literal|"0"
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|list
init|=
name|store
operator|.
name|query
argument_list|(
name|DocumentStore
operator|.
name|Collection
operator|.
name|NODES
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|limit
argument_list|)
decl_stmt|;
name|c
operator|=
operator|new
name|Node
operator|.
name|Children
argument_list|(
name|path
argument_list|,
name|nodeId
argument_list|,
name|rev
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|list
control|)
block|{
comment|// Filter out deleted children
if|if
condition|(
name|isDeleted
argument_list|(
name|e
argument_list|,
name|rev
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// TODO put the whole node in the cache
name|String
name|id
init|=
name|e
operator|.
name|get
argument_list|(
name|UpdateOp
operator|.
name|ID
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|p
init|=
name|id
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|c
operator|.
name|children
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|nodeChildrenCache
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|c
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
specifier|private
name|Node
name|readNode
parameter_list|(
name|String
name|path
parameter_list|,
name|Revision
name|rev
parameter_list|)
block|{
name|String
name|id
init|=
name|Node
operator|.
name|convertPathToDocumentId
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|store
operator|.
name|find
argument_list|(
name|DocumentStore
operator|.
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|isDeleted
argument_list|(
name|map
argument_list|,
name|rev
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Node
name|n
init|=
operator|new
name|Node
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|Long
name|w
init|=
name|writeCountIncrements
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|long
name|writeCount
init|=
name|w
operator|==
literal|null
condition|?
literal|0
else|:
name|w
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|UpdateOp
operator|.
name|WRITE_COUNT
argument_list|)
condition|)
block|{
name|writeCount
operator|+=
operator|(
name|Long
operator|)
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
condition|)
block|{
comment|// TODO property name escaping
continue|continue;
block|}
name|Object
name|v
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|v
decl_stmt|;
if|if
condition|(
name|valueMap
operator|!=
literal|null
condition|)
block|{
name|Revision
name|latestRev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|r
range|:
name|valueMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Revision
name|propRev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeRevision
argument_list|(
name|propRev
argument_list|,
name|rev
argument_list|)
condition|)
block|{
if|if
condition|(
name|latestRev
operator|==
literal|null
operator|||
name|isRevisionNewer
argument_list|(
name|propRev
argument_list|,
name|latestRev
argument_list|)
condition|)
block|{
name|latestRev
operator|=
name|propRev
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|valueMap
operator|.
name|get
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|n
operator|.
name|setWriteCount
argument_list|(
name|writeCount
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHeadRevision
parameter_list|()
throws|throws
name|MicroKernelException
block|{
return|return
name|headRevision
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRevisionHistory
parameter_list|(
name|long
name|since
parameter_list|,
name|int
name|maxEntries
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// not currently called by oak-core
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|waitForCommit
parameter_list|(
name|String
name|oldHeadRevisionId
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|MicroKernelException
throws|,
name|InterruptedException
block|{
comment|// not currently called by oak-core
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getJournal
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// not currently called by oak-core
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|diff
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|fromRevisionId
operator|.
name|equals
argument_list|(
name|toRevisionId
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
comment|// TODO implement if needed
return|return
literal|"{}"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|nodeExists
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|Revision
name|rev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|stripBranchRevMarker
argument_list|(
name|revisionId
argument_list|)
argument_list|)
decl_stmt|;
name|Node
name|n
init|=
name|getNode
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
decl_stmt|;
return|return
name|n
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// not currently called by oak-core
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNodes
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|int
name|depth
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|maxChildNodes
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|depth
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Only depth 0 is supported, depth is "
operator|+
name|depth
argument_list|)
throw|;
block|}
if|if
condition|(
name|revisionId
operator|.
name|startsWith
argument_list|(
literal|"b"
argument_list|)
condition|)
block|{
comment|// reading from the branch is reading from the trunk currently
name|revisionId
operator|=
name|revisionId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
literal|'+'
argument_list|,
literal|' '
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|Revision
name|rev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
name|Node
name|n
init|=
name|getNode
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
comment|// throw new MicroKernelException("Node not found at path " + path);
block|}
name|JsopStream
name|json
init|=
operator|new
name|JsopStream
argument_list|()
decl_stmt|;
name|boolean
name|includeId
init|=
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|contains
argument_list|(
literal|":id"
argument_list|)
decl_stmt|;
name|includeId
operator||=
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|contains
argument_list|(
literal|":hash"
argument_list|)
expr_stmt|;
name|json
operator|.
name|object
argument_list|()
expr_stmt|;
name|n
operator|.
name|append
argument_list|(
name|json
argument_list|,
name|includeId
argument_list|)
expr_stmt|;
name|Children
name|c
init|=
name|readChildren
argument_list|(
name|path
argument_list|,
name|n
operator|.
name|getId
argument_list|()
argument_list|,
name|rev
argument_list|,
name|maxChildNodes
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|c
operator|.
name|children
control|)
block|{
name|String
name|name
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|json
operator|.
name|key
argument_list|(
name|name
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|json
operator|.
name|key
argument_list|(
literal|":childNodeCount"
argument_list|)
operator|.
name|value
argument_list|(
name|c
operator|.
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|String
name|result
init|=
name|json
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// if (filter != null&& filter.contains(":hash")) {
comment|//     result = result.replaceAll("\":id\"", "\":hash\"");
comment|// }
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|commit
parameter_list|(
name|String
name|rootPath
parameter_list|,
name|String
name|json
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|revisionId
operator|=
name|revisionId
operator|==
literal|null
condition|?
name|headRevision
operator|.
name|toString
argument_list|()
else|:
name|revisionId
expr_stmt|;
name|JsopReader
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|Revision
name|rev
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
name|clusterId
argument_list|)
decl_stmt|;
name|Commit
name|commit
init|=
operator|new
name|Commit
argument_list|(
name|this
argument_list|,
name|rev
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|r
init|=
name|t
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|JsopReader
operator|.
name|END
condition|)
block|{
break|break;
block|}
name|String
name|path
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|rootPath
argument_list|,
name|t
operator|.
name|readString
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|r
condition|)
block|{
case|case
literal|'+'
case|:
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|parseAddNode
argument_list|(
name|commit
argument_list|,
name|t
argument_list|,
name|path
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'-'
case|:
name|commit
operator|.
name|removeNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|markAsDeleted
argument_list|(
name|path
argument_list|,
name|commit
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|commit
operator|.
name|removeNodeDiff
argument_list|(
name|path
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'^'
case|:
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|value
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|NULL
argument_list|)
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
name|commit
operator|.
name|getDiff
argument_list|()
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|path
argument_list|)
operator|.
name|value
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|t
operator|.
name|readRawValue
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|commit
operator|.
name|getDiff
argument_list|()
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|path
argument_list|)
operator|.
name|value
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|String
name|p
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|propertyName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|commit
operator|.
name|updateProperty
argument_list|(
name|p
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|commit
operator|.
name|updatePropertyDiff
argument_list|(
name|p
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'>'
case|:
block|{
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|sourcePath
init|=
name|path
decl_stmt|;
name|String
name|targetPath
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
name|targetPath
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
block|}
name|commit
operator|.
name|moveNode
argument_list|(
name|sourcePath
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
name|moveNode
argument_list|(
name|sourcePath
argument_list|,
name|targetPath
argument_list|,
name|commit
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'*'
case|:
block|{
comment|// TODO possibly support target position notation
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|target
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|target
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|rootPath
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
name|String
name|to
init|=
name|PathUtils
operator|.
name|relativize
argument_list|(
literal|"/"
argument_list|,
name|target
argument_list|)
decl_stmt|;
comment|// TODO support copy operations
break|break;
block|}
default|default:
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"token: "
operator|+
operator|(
name|char
operator|)
name|t
operator|.
name|getTokenType
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|revisionId
operator|.
name|startsWith
argument_list|(
literal|"b"
argument_list|)
condition|)
block|{
comment|// just commit to head currently
name|applyCommit
argument_list|(
name|commit
argument_list|)
expr_stmt|;
return|return
literal|"b"
operator|+
name|rev
operator|.
name|toString
argument_list|()
return|;
comment|// String jsonBranch = branchCommits.remove(revisionId);
comment|// jsonBranch += commit.getDiff().toString();
comment|// String branchRev = revisionId + "+";
comment|// branchCommits.put(branchRev, jsonBranch);
comment|// return branchRev;
block|}
name|applyCommit
argument_list|(
name|commit
argument_list|)
expr_stmt|;
return|return
name|rev
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|moveNode
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|targetPath
parameter_list|,
name|Commit
name|commit
parameter_list|)
block|{
comment|// TODO Optimize - Move logic would not work well with very move of very large subtrees
comment|// At minimum we can optimize by traversing breadth wise and collect node id
comment|// and fetch them via '$in' queries
comment|// TODO Transient Node - Current logic does not account for operations which are part
comment|// of this commit i.e. transient nodes. If its required it would need to be looked
comment|// into
name|Node
name|n
init|=
name|getNode
argument_list|(
name|sourcePath
argument_list|,
name|commit
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
comment|// Node might be deleted already
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Node
name|newNode
init|=
operator|new
name|Node
argument_list|(
name|targetPath
argument_list|,
name|commit
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
name|n
operator|.
name|copyTo
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
name|commit
operator|.
name|addNode
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
name|markAsDeleted
argument_list|(
name|sourcePath
argument_list|,
name|commit
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Node
operator|.
name|Children
name|c
init|=
name|readChildren
argument_list|(
name|sourcePath
argument_list|,
name|n
operator|.
name|getId
argument_list|()
argument_list|,
name|commit
operator|.
name|getRevision
argument_list|()
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|srcChildPath
range|:
name|c
operator|.
name|children
control|)
block|{
name|String
name|childName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|srcChildPath
argument_list|)
decl_stmt|;
name|String
name|destChildPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|targetPath
argument_list|,
name|childName
argument_list|)
decl_stmt|;
name|moveNode
argument_list|(
name|srcChildPath
argument_list|,
name|destChildPath
argument_list|,
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|markAsDeleted
parameter_list|(
name|String
name|path
parameter_list|,
name|Commit
name|commit
parameter_list|,
name|boolean
name|subTreeAlso
parameter_list|)
block|{
name|Revision
name|rev
init|=
name|commit
operator|.
name|getRevision
argument_list|()
decl_stmt|;
name|commit
operator|.
name|removeNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|subTreeAlso
condition|)
block|{
comment|// recurse down the tree
comment|// TODO causes issue with large number of children
name|Node
name|n
init|=
name|getNode
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
decl_stmt|;
comment|// remove from the cache
name|nodeCache
operator|.
name|remove
argument_list|(
name|path
operator|+
literal|"@"
operator|+
name|rev
argument_list|)
expr_stmt|;
name|Node
operator|.
name|Children
name|c
init|=
name|readChildren
argument_list|(
name|path
argument_list|,
name|n
operator|.
name|getId
argument_list|()
argument_list|,
name|rev
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|childPath
range|:
name|c
operator|.
name|children
control|)
block|{
name|markAsDeleted
argument_list|(
name|childPath
argument_list|,
name|commit
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Remove the node from the cache
name|nodeCache
operator|.
name|remove
argument_list|(
name|path
operator|+
literal|"@"
operator|+
name|rev
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isDeleted
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nodeProps
parameter_list|,
name|Revision
name|rev
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|nodeProps
operator|.
name|get
argument_list|(
name|UpdateOp
operator|.
name|DELETED
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|valueMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// TODO What if multiple revisions are there?. Should we sort
comment|// them and then
comment|// determine include revision based on that
name|Revision
name|propRev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeRevision
argument_list|(
name|propRev
argument_list|,
name|rev
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|String
name|stripBranchRevMarker
parameter_list|(
name|String
name|revisionId
parameter_list|)
block|{
if|if
condition|(
name|revisionId
operator|.
name|startsWith
argument_list|(
literal|"b"
argument_list|)
condition|)
block|{
return|return
name|revisionId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
return|return
name|revisionId
return|;
block|}
specifier|private
name|void
name|applyCommit
parameter_list|(
name|Commit
name|commit
parameter_list|)
block|{
name|headRevision
operator|=
name|commit
operator|.
name|getRevision
argument_list|()
expr_stmt|;
if|if
condition|(
name|commit
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|commit
operator|.
name|applyToDocumentStore
argument_list|()
expr_stmt|;
name|commit
operator|.
name|applyToCache
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|parseAddNode
parameter_list|(
name|Commit
name|commit
parameter_list|,
name|JsopReader
name|t
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|Node
name|n
init|=
operator|new
name|Node
argument_list|(
name|path
argument_list|,
name|commit
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|.
name|matches
argument_list|(
literal|'}'
argument_list|)
condition|)
block|{
do|do
block|{
name|String
name|key
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|'{'
argument_list|)
condition|)
block|{
name|String
name|childPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|parseAddNode
argument_list|(
name|commit
argument_list|,
name|t
argument_list|,
name|childPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|value
init|=
name|t
operator|.
name|readRawValue
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
condition|)
do|;
name|t
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
name|commit
operator|.
name|addNode
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|commit
operator|.
name|addNodeDiff
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|branch
parameter_list|(
name|String
name|trunkRevisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// TODO improve implementation if needed
name|String
name|branchId
init|=
literal|"b"
operator|+
name|trunkRevisionId
decl_stmt|;
comment|// branchCommits.put(branchId, "");
return|return
name|branchId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|merge
parameter_list|(
name|String
name|branchRevisionId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// reading from the branch is reading from the trunk currently
name|String
name|revisionId
init|=
name|branchRevisionId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
literal|'+'
argument_list|,
literal|' '
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
return|return
name|revisionId
return|;
comment|// TODO improve implementation if needed
comment|// if (!branchRevisionId.startsWith("b")) {
comment|//     throw new MicroKernelException("Not a branch: " + branchRevisionId);
comment|// }
comment|//
comment|// String commit = branchCommits.remove(branchRevisionId);
comment|// return commit("", commit, null, null);
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|String
name|rebase
parameter_list|(
name|String
name|branchRevisionId
parameter_list|,
name|String
name|newBaseRevisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// TODO improve implementation if needed
return|return
name|branchRevisionId
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
try|try
block|{
return|return
name|blobStore
operator|.
name|getBlobLength
argument_list|(
name|blobId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|MicroKernelException
block|{
try|try
block|{
return|return
name|blobStore
operator|.
name|readBlob
argument_list|(
name|blobId
argument_list|,
name|pos
argument_list|,
name|buff
argument_list|,
name|off
argument_list|,
name|length
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|write
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|MicroKernelException
block|{
try|try
block|{
return|return
name|blobStore
operator|.
name|writeBlob
argument_list|(
name|in
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|DocumentStore
name|getDocumentStore
parameter_list|()
block|{
return|return
name|store
return|;
block|}
comment|/**      * A simple cache.      *      * @param<K> the key type      * @param<V> the value type      */
specifier|static
class|class
name|Cache
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|LinkedHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|int
name|size
decl_stmt|;
name|Cache
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|size
argument_list|,
operator|(
name|float
operator|)
literal|0.75
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|>
name|size
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|','
argument_list|,
literal|'\n'
argument_list|)
return|;
block|}
block|}
comment|/**      * A background thread.      */
specifier|static
class|class
name|BackgroundOperation
implements|implements
name|Runnable
block|{
specifier|final
name|WeakReference
argument_list|<
name|MongoMK
argument_list|>
name|ref
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|isDisposed
decl_stmt|;
name|BackgroundOperation
parameter_list|(
name|MongoMK
name|mk
parameter_list|,
name|AtomicBoolean
name|isDisposed
parameter_list|)
block|{
name|ref
operator|=
operator|new
name|WeakReference
argument_list|<
name|MongoMK
argument_list|>
argument_list|(
name|mk
argument_list|)
expr_stmt|;
name|this
operator|.
name|isDisposed
operator|=
name|isDisposed
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|isDisposed
operator|.
name|get
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|isDisposed
init|)
block|{
try|try
block|{
name|isDisposed
operator|.
name|wait
argument_list|(
name|ASYNC_DELAY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|MongoMK
name|mk
init|=
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|mk
operator|!=
literal|null
condition|)
block|{
name|mk
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|applyChanges
parameter_list|(
name|Revision
name|rev
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|isNew
parameter_list|,
name|boolean
name|isWritten
parameter_list|,
name|long
name|oldWriteCount
parameter_list|,
name|long
name|writeCountInc
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|added
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|removed
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isWritten
condition|)
block|{
if|if
condition|(
name|writeCountInc
operator|==
literal|0
condition|)
block|{
name|writeCountIncrements
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeCountIncrements
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|writeCountInc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|writeCountIncrements
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|long
name|newWriteCount
init|=
name|oldWriteCount
operator|+
name|writeCountInc
decl_stmt|;
name|Children
name|c
init|=
name|nodeChildrenCache
operator|.
name|get
argument_list|(
name|path
operator|+
literal|"@"
operator|+
operator|(
name|newWriteCount
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNew
operator|||
name|c
operator|!=
literal|null
condition|)
block|{
name|String
name|id
init|=
name|path
operator|+
literal|"@"
operator|+
name|newWriteCount
decl_stmt|;
name|Children
name|c2
init|=
operator|new
name|Children
argument_list|(
name|path
argument_list|,
name|id
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|set
operator|.
name|addAll
argument_list|(
name|c
operator|.
name|children
argument_list|)
expr_stmt|;
block|}
name|set
operator|.
name|removeAll
argument_list|(
name|removed
argument_list|)
expr_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|added
argument_list|)
expr_stmt|;
name|c2
operator|.
name|children
operator|.
name|addAll
argument_list|(
name|set
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeChildrenCache
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"New child list already cached"
argument_list|)
throw|;
block|}
name|nodeChildrenCache
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|c2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|getWriteCountIncrement
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|Long
name|x
init|=
name|writeCountIncrements
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|x
operator|==
literal|null
condition|?
literal|0
else|:
name|x
return|;
block|}
block|}
end_class

end_unit

