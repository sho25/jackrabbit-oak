begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Revision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|StableRevisionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Utilities that provide JSON support on top of the existing  * {@link JsopTokenizer} support in oak-commons.  *<p>  * The result of parsing uses the simplest possible Java representation of the  * JSON values (see Section 3 of RFC 7159), thus  *<ul>  *<li>{@code null}, {@link Boolean#TRUE}, {@link Boolean#FALSE}, {@link Number}  * , or {@link String}, or  *<li>a {@link List} of representations, or  *<li>a {@link Map}, mapping member names to representations.  *</ul>  *<p>  * The boolean parameter of the constructor ({link  * {@link #RDBJSONSupport(boolean)}) allows changing the default for the maps to  * use sorted maps using {@link Revision}s as keys, as used internally be the  * {@link DocumentNodeStore}.  */
end_comment

begin_class
specifier|public
class|class
name|RDBJSONSupport
block|{
specifier|private
specifier|final
name|boolean
name|useRevisionMaps
decl_stmt|;
comment|/**      * @param useRevisionMaps      *            whether to use revision maps instead of regular      *            {@link Map}s.      */
specifier|public
name|RDBJSONSupport
parameter_list|(
name|boolean
name|useRevisionMaps
parameter_list|)
block|{
name|this
operator|.
name|useRevisionMaps
operator|=
name|useRevisionMaps
expr_stmt|;
block|}
comment|/**      * Parses the supplied JSON.      */
annotation|@
name|Nullable
specifier|public
name|Object
name|parse
parameter_list|(
annotation|@
name|NotNull
name|String
name|json
parameter_list|)
block|{
return|return
name|parse
argument_list|(
operator|new
name|JsopTokenizer
argument_list|(
name|json
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Parses the supplied JSON.      */
annotation|@
name|Nullable
specifier|public
name|Object
name|parse
parameter_list|(
annotation|@
name|NotNull
name|JsopTokenizer
name|json
parameter_list|)
block|{
switch|switch
condition|(
name|json
operator|.
name|read
argument_list|()
condition|)
block|{
case|case
name|JsopReader
operator|.
name|NULL
case|:
return|return
literal|null
return|;
case|case
name|JsopReader
operator|.
name|TRUE
case|:
return|return
name|Boolean
operator|.
name|TRUE
return|;
case|case
name|JsopReader
operator|.
name|FALSE
case|:
return|return
name|Boolean
operator|.
name|FALSE
return|;
case|case
name|JsopReader
operator|.
name|NUMBER
case|:
name|String
name|t
init|=
name|json
operator|.
name|getToken
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|t
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|t
argument_list|)
return|;
block|}
case|case
name|JsopReader
operator|.
name|STRING
case|:
return|return
name|json
operator|.
name|getToken
argument_list|()
return|;
case|case
literal|'{'
case|:
if|if
condition|(
name|useRevisionMaps
condition|)
block|{
name|Map
argument_list|<
name|Revision
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|Revision
argument_list|,
name|Object
argument_list|>
argument_list|(
name|StableRevisionComparator
operator|.
name|REVERSE
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|json
operator|.
name|matches
argument_list|(
literal|'}'
argument_list|)
condition|)
block|{
break|break;
block|}
name|String
name|k
init|=
name|json
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
name|k
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unexpected null revision"
argument_list|)
throw|;
block|}
name|json
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Revision
operator|.
name|fromString
argument_list|(
name|k
argument_list|)
argument_list|,
name|parse
argument_list|(
name|json
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|json
operator|.
name|matches
argument_list|(
literal|'}'
argument_list|)
condition|)
block|{
break|break;
block|}
name|String
name|k
init|=
name|json
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
name|k
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unexpected null key"
argument_list|)
throw|;
block|}
name|json
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|parse
argument_list|(
name|json
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
case|case
literal|'['
case|:
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|json
operator|.
name|matches
argument_list|(
literal|']'
argument_list|)
condition|)
block|{
break|break;
block|}
name|list
operator|.
name|add
argument_list|(
name|parse
argument_list|(
name|json
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|json
operator|.
name|readRawValue
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|appendJsonMember
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|appendJsonString
argument_list|(
name|sb
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|appendJsonValue
argument_list|(
name|sb
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|appendJsonString
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|JsopBuilder
operator|.
name|escape
argument_list|(
name|s
argument_list|,
name|sb
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|appendJsonMap
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|boolean
name|needComma
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|needComma
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|appendJsonMember
argument_list|(
name|sb
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|needComma
operator|=
literal|true
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|appendJsonValue
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|appendJsonString
argument_list|(
name|sb
argument_list|,
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Map
condition|)
block|{
name|appendJsonMap
argument_list|(
name|sb
argument_list|,
operator|(
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unexpected type: "
operator|+
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

