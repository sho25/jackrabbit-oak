begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|JcrUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|config
operator|.
name|RepositoryConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Test case that simulates copying different paths from two source repositories  * into a single target repository.  */
end_comment

begin_class
specifier|public
class|class
name|UpgradeFromTwoSourcesTest
extends|extends
name|AbstractRepositoryUpgradeTest
block|{
specifier|private
specifier|static
name|boolean
name|upgradeComplete
decl_stmt|;
specifier|private
specifier|static
name|FileStore
name|fileStore
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|NodeStore
name|createTargetNodeStore
parameter_list|()
block|{
return|return
operator|new
name|SegmentNodeStore
argument_list|(
name|fileStore
argument_list|)
return|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|initialize
parameter_list|()
block|{
specifier|final
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|getTestDirectory
argument_list|()
argument_list|,
literal|"segments"
argument_list|)
decl_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
try|try
block|{
name|fileStore
operator|=
name|FileStore
operator|.
name|newFileStore
argument_list|(
name|dir
argument_list|)
operator|.
name|withMaxFileSize
argument_list|(
literal|128
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|upgradeComplete
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
block|{
name|fileStore
operator|.
name|close
argument_list|()
expr_stmt|;
name|fileStore
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
specifier|synchronized
name|void
name|upgradeRepository
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|upgradeComplete
condition|)
block|{
specifier|final
name|File
name|sourceDir1
init|=
operator|new
name|File
argument_list|(
name|getTestDirectory
argument_list|()
argument_list|,
literal|"source1"
argument_list|)
decl_stmt|;
specifier|final
name|File
name|sourceDir2
init|=
operator|new
name|File
argument_list|(
name|getTestDirectory
argument_list|()
argument_list|,
literal|"source2"
argument_list|)
decl_stmt|;
name|sourceDir1
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|sourceDir2
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
specifier|final
name|RepositoryImpl
name|source1
init|=
name|createSourceRepository
argument_list|(
name|sourceDir1
argument_list|)
decl_stmt|;
specifier|final
name|RepositoryImpl
name|source2
init|=
name|createSourceRepository
argument_list|(
name|sourceDir2
argument_list|)
decl_stmt|;
try|try
block|{
name|createSourceContent
argument_list|(
name|source1
argument_list|)
expr_stmt|;
name|createSourceContent2
argument_list|(
name|source2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|source1
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|source2
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|final
name|NodeStore
name|target
init|=
name|getTargetNodeStore
argument_list|()
decl_stmt|;
name|doUpgradeRepository
argument_list|(
name|sourceDir1
argument_list|,
name|target
argument_list|,
literal|"/left"
argument_list|)
expr_stmt|;
name|doUpgradeRepository
argument_list|(
name|sourceDir2
argument_list|,
name|target
argument_list|,
literal|"/right"
argument_list|,
literal|"/left/child2"
argument_list|,
literal|"/left/child3"
argument_list|)
expr_stmt|;
name|fileStore
operator|.
name|flush
argument_list|()
expr_stmt|;
name|upgradeComplete
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doUpgradeRepository
parameter_list|(
name|File
name|source
parameter_list|,
name|NodeStore
name|target
parameter_list|,
name|String
modifier|...
name|includes
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|RepositoryConfig
name|config
init|=
name|RepositoryConfig
operator|.
name|create
argument_list|(
name|source
argument_list|)
decl_stmt|;
specifier|final
name|RepositoryContext
name|context
init|=
name|RepositoryContext
operator|.
name|create
argument_list|(
name|config
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|RepositoryUpgrade
name|upgrade
init|=
operator|new
name|RepositoryUpgrade
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|upgrade
operator|.
name|setIncludes
argument_list|(
name|includes
argument_list|)
expr_stmt|;
name|upgrade
operator|.
name|copy
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|context
operator|.
name|getRepository
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|createSourceContent
parameter_list|(
name|Repository
name|repository
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
literal|null
decl_stmt|;
try|try
block|{
name|session
operator|=
name|repository
operator|.
name|login
argument_list|(
name|CREDENTIALS
argument_list|)
expr_stmt|;
name|JcrUtils
operator|.
name|getOrCreateByPath
argument_list|(
literal|"/left/child1/grandchild1"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|JcrUtils
operator|.
name|getOrCreateByPath
argument_list|(
literal|"/left/child1/grandchild2"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|JcrUtils
operator|.
name|getOrCreateByPath
argument_list|(
literal|"/left/child1/grandchild3"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|JcrUtils
operator|.
name|getOrCreateByPath
argument_list|(
literal|"/left/child2/grandchild1"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|JcrUtils
operator|.
name|getOrCreateByPath
argument_list|(
literal|"/left/child2/grandchild2"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|session
operator|!=
literal|null
operator|&&
name|session
operator|.
name|isLive
argument_list|()
condition|)
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|createSourceContent2
parameter_list|(
name|Repository
name|repository
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
literal|null
decl_stmt|;
try|try
block|{
name|session
operator|=
name|repository
operator|.
name|login
argument_list|(
name|CREDENTIALS
argument_list|)
expr_stmt|;
name|JcrUtils
operator|.
name|getOrCreateByPath
argument_list|(
literal|"/left/child2/grandchild3"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|JcrUtils
operator|.
name|getOrCreateByPath
argument_list|(
literal|"/left/child2/grandchild2"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|JcrUtils
operator|.
name|getOrCreateByPath
argument_list|(
literal|"/left/child3"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|JcrUtils
operator|.
name|getOrCreateByPath
argument_list|(
literal|"/right/child1/grandchild1"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|JcrUtils
operator|.
name|getOrCreateByPath
argument_list|(
literal|"/right/child1/grandchild2"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|session
operator|!=
literal|null
operator|&&
name|session
operator|.
name|isLive
argument_list|()
condition|)
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldContainNodesFromBothSources
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExisting
argument_list|(
literal|"/"
argument_list|,
literal|"/left"
argument_list|,
literal|"/left/child1"
argument_list|,
literal|"/left/child2"
argument_list|,
literal|"/left/child3"
argument_list|,
literal|"/left/child1/grandchild1"
argument_list|,
literal|"/left/child1/grandchild2"
argument_list|,
literal|"/left/child1/grandchild3"
argument_list|,
literal|"/left/child2/grandchild2"
argument_list|,
literal|"/left/child2/grandchild3"
argument_list|,
literal|"/right"
argument_list|,
literal|"/right/child1"
argument_list|,
literal|"/right/child1/grandchild1"
argument_list|,
literal|"/right/child1/grandchild2"
argument_list|)
expr_stmt|;
name|assertMissing
argument_list|(
literal|"/left/child2/grandchild1"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

