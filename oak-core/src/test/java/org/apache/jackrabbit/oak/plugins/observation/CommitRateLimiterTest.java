begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CommitRateLimiterTest
block|{
specifier|private
specifier|static
specifier|final
name|NodeState
name|AFTER
init|=
name|createAfter
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|NodeState
name|createAfter
parameter_list|()
block|{
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getNodeState
argument_list|()
return|;
block|}
specifier|private
name|CommitRateLimiter
name|limiter
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|limiter
operator|=
operator|new
name|CommitRateLimiter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|commit
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|assertSame
argument_list|(
name|AFTER
argument_list|,
name|limiter
operator|.
name|processCommit
argument_list|(
name|EMPTY_NODE
argument_list|,
name|AFTER
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|blockCommits
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|InterruptedException
block|{
comment|// using a latch to avoid having to rely on timing
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CommitRateLimiter
name|limiter
init|=
operator|new
name|CommitRateLimiter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|getBlockCommits
parameter_list|()
block|{
comment|// this method is called in the 'try' loop, so it
comment|// that InterruptedException will be converted
comment|// to CommitFailedException as expected
comment|// (sure, this is an implementation detail,
comment|// but I don't see a good alternative here)
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|getBlockCommits
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|limiter
operator|.
name|blockCommits
argument_list|()
expr_stmt|;
specifier|final
name|Thread
name|mainThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// wait forever to avoid timing problems
comment|// (if the CommitRateLimiter is changed to not call
comment|// getBlockCommits(), then this wouldn't work - but
comment|// how could it not call getBlockCommits()?)
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|mainThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|limiter
operator|.
name|processCommit
argument_list|(
name|EMPTY_NODE
argument_list|,
name|AFTER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// once in a while, we get a spurious
comment|// wakeup in the CommitRateLimiter,
comment|// so that the Thresd.interrupt() above
comment|// will reach t.join().
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|Thread
operator|.
name|interrupted
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|delayCommits
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|limiter
operator|.
name|setDelay
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|Clock
operator|.
name|ACCURATE
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|AFTER
argument_list|,
name|limiter
operator|.
name|processCommit
argument_list|(
name|EMPTY_NODE
argument_list|,
name|AFTER
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Clock
operator|.
name|ACCURATE
operator|.
name|getTime
argument_list|()
operator|-
name|t0
operator|>=
literal|1000
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|FutureTask
argument_list|<
name|Long
argument_list|>
name|commit
init|=
operator|new
name|FutureTask
argument_list|<
name|Long
argument_list|>
argument_list|(
operator|new
name|Callable
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|t0
init|=
name|Clock
operator|.
name|ACCURATE
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|Clock
operator|.
name|ACCURATE
operator|.
name|waitUntil
argument_list|(
name|Clock
operator|.
name|ACCURATE
operator|.
name|getTime
argument_list|()
operator|+
literal|100
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|AFTER
argument_list|,
name|limiter
operator|.
name|processCommit
argument_list|(
name|EMPTY_NODE
argument_list|,
name|AFTER
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Clock
operator|.
name|ACCURATE
operator|.
name|getTime
argument_list|()
operator|-
name|t0
return|;
block|}
block|}
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|delayCommitsWithReset
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
name|limiter
operator|.
name|setDelay
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|(
name|commit
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|limiter
operator|.
name|setDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|commit
operator|.
name|get
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|>=
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ExecutionException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|delayCommitsWithInterrupt
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
name|limiter
operator|.
name|setDelay
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|commit
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|commit
operator|.
name|get
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

