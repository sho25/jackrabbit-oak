begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FulltextIndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentTestConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|OakDirectory
operator|.
name|UNIQUE_KEY_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|ChunkedOakDirectoryTest
extends|extends
name|OakDirectoryTestBase
block|{
annotation|@
name|Test
specifier|public
name|void
name|writes_CustomBlobSize
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|BLOB_SIZE
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|createDir
argument_list|(
name|builder
argument_list|,
literal|false
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|assertWrites
argument_list|(
name|dir
argument_list|,
literal|300
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dirNameInException_Flush
parameter_list|()
throws|throws
name|Exception
block|{
name|FailOnDemandBlobStore
name|blobStore
init|=
operator|new
name|FailOnDemandBlobStore
argument_list|()
decl_stmt|;
name|FileStore
name|store
init|=
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
argument_list|(
name|tempFolder
operator|.
name|getRoot
argument_list|()
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
literal|false
argument_list|)
operator|.
name|withBlobStore
argument_list|(
name|blobStore
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|SegmentNodeStore
name|nodeStore
init|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|store
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|indexPath
init|=
literal|"/foo/bar"
decl_stmt|;
name|int
name|minFileSize
init|=
name|SegmentTestConstants
operator|.
name|MEDIUM_LIMIT
decl_stmt|;
name|int
name|blobSize
init|=
name|minFileSize
operator|+
literal|1000
decl_stmt|;
name|builder
operator|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|BLOB_SIZE
argument_list|,
name|blobSize
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|createDir
argument_list|(
name|builder
argument_list|,
literal|false
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|IndexOutput
name|o3
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"test1.txt"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|o3
operator|.
name|writeBytes
argument_list|(
name|randomBytes
argument_list|(
name|minFileSize
argument_list|)
argument_list|,
name|minFileSize
argument_list|)
expr_stmt|;
name|blobStore
operator|.
name|startFailing
argument_list|()
expr_stmt|;
try|try
block|{
name|o3
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
name|indexPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"test1.txt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|assertBlobSizeInWrite
parameter_list|(
name|PropertyState
name|jcrData
parameter_list|,
name|int
name|blobSize
parameter_list|,
name|int
name|fileSize
parameter_list|)
block|{
name|List
argument_list|<
name|Blob
argument_list|>
name|blobs
init|=
name|newArrayList
argument_list|(
name|jcrData
operator|.
name|getValue
argument_list|(
name|BINARIES
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|blobSize
operator|+
name|UNIQUE_KEY_SIZE
argument_list|,
name|blobs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|OakDirectoryBuilder
name|getOakDirectoryBuilder
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|LuceneIndexDefinition
name|indexDefinition
parameter_list|)
block|{
return|return
operator|new
name|OakDirectoryBuilder
argument_list|(
name|builder
argument_list|,
name|indexDefinition
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
name|MemoryBlobStore
name|getBlackHoleBlobStore
parameter_list|()
block|{
return|return
operator|new
name|BlackHoleBlobStoreForSmallBlobs
argument_list|()
return|;
block|}
specifier|private
specifier|static
class|class
name|BlackHoleBlobStoreForSmallBlobs
extends|extends
name|MemoryBlobStore
block|{
specifier|private
name|String
name|blobId
decl_stmt|;
specifier|private
name|byte
index|[]
name|data
decl_stmt|;
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|void
name|storeBlock
parameter_list|(
name|byte
index|[]
name|digest
parameter_list|,
name|int
name|level
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
comment|//Eat up all the writes
block|}
annotation|@
name|Override
specifier|public
name|String
name|writeBlob
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|//Avoid expensive digest calculation as all content is 0 byte. So memorize
comment|//the id if same content is passed
if|if
condition|(
name|blobId
operator|==
literal|null
condition|)
block|{
name|data
operator|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|blobId
operator|=
name|super
operator|.
name|writeBlob
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|blobId
return|;
block|}
else|else
block|{
name|byte
index|[]
name|bytes
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|data
argument_list|,
name|bytes
argument_list|)
condition|)
block|{
return|return
name|blobId
return|;
block|}
return|return
name|super
operator|.
name|writeBlob
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|byte
index|[]
name|readBlockFromBackend
parameter_list|(
name|BlockId
name|id
parameter_list|)
block|{
return|return
name|data
return|;
block|}
block|}
block|}
end_class

end_unit

