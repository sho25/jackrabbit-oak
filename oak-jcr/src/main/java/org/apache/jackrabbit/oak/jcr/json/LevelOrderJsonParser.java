begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
operator|.
name|JsonValue
operator|.
name|JsonArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
operator|.
name|JsonValue
operator|.
name|JsonAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
operator|.
name|JsonValue
operator|.
name|JsonObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Utility class for parsing JSON objects and arrays into {@link JsonObject}s  * and {@link JsonArray}s, respectively. In contrast to {@link FullJsonParser},  * this implementation resolves nested structures lazily. That, is it does a  * level order traverse of the JSON tree.  *<p/>  * The parser looks for 'hints' in the JSON text to speed up parsing: when it  * encounters an integer value with the key ":size" in an object, that value  * is used for the size of the entire object (including sub-objects).  *  * @see FullJsonParser  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|LevelOrderJsonParser
block|{
specifier|private
name|LevelOrderJsonParser
parameter_list|()
block|{ }
comment|/**      * Parse a JSON object from {@code tokenizer}      * @param tokenizer      * @return a {@code JsonObject}      * @throws ParseException      */
specifier|public
specifier|static
name|JsonObject
name|parseObject
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|ObjectHandler
name|objectHandler
init|=
operator|new
name|ObjectHandler
argument_list|()
decl_stmt|;
operator|new
name|JsonParser
argument_list|(
name|objectHandler
argument_list|)
operator|.
name|parseObject
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
return|return
name|objectHandler
operator|.
name|getObject
argument_list|()
return|;
block|}
comment|/**      * Parse a JSON array from {@code tokenizer}      * @param tokenizer      * @return a {@code JsonArray}      * @throws ParseException      */
specifier|public
specifier|static
name|JsonArray
name|parseArray
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|ArrayHandler
name|arrayHandler
init|=
operator|new
name|ArrayHandler
argument_list|()
decl_stmt|;
operator|new
name|JsonParser
argument_list|(
name|arrayHandler
argument_list|)
operator|.
name|parseArray
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
return|return
name|arrayHandler
operator|.
name|getArray
argument_list|()
return|;
block|}
comment|/**      * This implementation of a {@code JsonHandler} builds up a {@code JsonObject}      * from its constituents. Nested objects are not fully parsed though, but a      * reference to the parser is kept which is only invoked when that nested object      * is actually accessed.      */
specifier|public
specifier|static
class|class
name|ObjectHandler
extends|extends
name|JsonHandler
block|{
specifier|private
specifier|final
name|JsonObject
name|object
init|=
operator|new
name|JsonObject
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|JsonValue
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|atom
parameter_list|(
name|Token
name|key
parameter_list|,
name|Token
name|value
parameter_list|)
block|{
name|object
operator|.
name|put
argument_list|(
name|key
operator|.
name|text
argument_list|()
argument_list|,
operator|new
name|JsonAtom
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|object
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|Token
name|key
parameter_list|,
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|object
operator|.
name|put
argument_list|(
name|key
operator|.
name|text
argument_list|()
argument_list|,
operator|new
name|DeferredObjectValue
argument_list|(
name|tokenizer
operator|.
name|copy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tokenizer
operator|.
name|setPos
argument_list|(
name|getNextPairPos
argument_list|(
name|tokenizer
operator|.
name|copy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|array
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|Token
name|key
parameter_list|,
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|object
operator|.
name|put
argument_list|(
name|key
operator|.
name|text
argument_list|()
argument_list|,
name|parseArray
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JsonObject
name|getObject
parameter_list|()
block|{
return|return
name|object
return|;
block|}
block|}
comment|/**      * This implementation of a {@code JsonHandler} builds up a {@code JsonArray}      * from its constituents. Nested objects are not fully parsed though, but a      * reference to the parser is kept which is only invoked when that nested object      * is actually accessed.      */
specifier|public
specifier|static
class|class
name|ArrayHandler
extends|extends
name|JsonHandler
block|{
specifier|private
specifier|final
name|JsonArray
name|array
init|=
operator|new
name|JsonArray
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|JsonValue
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|atom
parameter_list|(
name|Token
name|key
parameter_list|,
name|Token
name|value
parameter_list|)
block|{
name|array
operator|.
name|add
argument_list|(
operator|new
name|JsonAtom
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|object
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|Token
name|key
parameter_list|,
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|array
operator|.
name|add
argument_list|(
operator|new
name|DeferredObjectValue
argument_list|(
name|tokenizer
operator|.
name|copy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tokenizer
operator|.
name|setPos
argument_list|(
name|getNextPairPos
argument_list|(
name|tokenizer
operator|.
name|copy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|array
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|Token
name|key
parameter_list|,
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|array
operator|.
name|add
argument_list|(
name|parseArray
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JsonArray
name|getArray
parameter_list|()
block|{
return|return
name|array
return|;
block|}
block|}
comment|//------------------------------------------< private>---
specifier|private
specifier|static
class|class
name|BreakException
extends|extends
name|RuntimeException
block|{
specifier|private
specifier|static
specifier|final
name|BreakException
name|BREAK
init|=
operator|new
name|BreakException
argument_list|()
decl_stmt|;
block|}
specifier|private
specifier|static
name|int
name|getNextPairPos
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|SkipObjectHandler
name|skipObjectHandler
init|=
operator|new
name|SkipObjectHandler
argument_list|(
name|tokenizer
operator|.
name|pos
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|JsonParser
argument_list|(
name|skipObjectHandler
argument_list|)
operator|.
name|parseObject
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BreakException
name|e
parameter_list|)
block|{
return|return
name|skipObjectHandler
operator|.
name|newPos
return|;
block|}
return|return
name|tokenizer
operator|.
name|pos
argument_list|()
return|;
block|}
specifier|private
specifier|static
class|class
name|DeferredObjectValue
extends|extends
name|JsonObject
block|{
specifier|private
specifier|final
name|JsonTokenizer
name|tokenizer
decl_stmt|;
specifier|public
name|DeferredObjectValue
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenizer
operator|=
name|tokenizer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|JsonValue
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot add value"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|JsonValue
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|value
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|JsonValue
argument_list|>
name|value
parameter_list|()
block|{
return|return
name|parseObject
argument_list|(
name|tokenizer
operator|.
name|copy
argument_list|()
argument_list|)
operator|.
name|value
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"<deferred>"
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|SkipObjectHandler
extends|extends
name|JsonHandler
block|{
specifier|private
specifier|final
name|int
name|startPos
decl_stmt|;
specifier|private
name|int
name|newPos
decl_stmt|;
specifier|public
name|SkipObjectHandler
parameter_list|(
name|int
name|startPos
parameter_list|)
block|{
name|this
operator|.
name|startPos
operator|=
name|startPos
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|atom
parameter_list|(
name|Token
name|key
parameter_list|,
name|Token
name|value
parameter_list|)
block|{
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
literal|":size"
operator|.
name|equals
argument_list|(
name|key
operator|.
name|text
argument_list|()
argument_list|)
operator|&&
name|Token
operator|.
name|Type
operator|.
name|NUMBER
operator|==
name|value
operator|.
name|type
argument_list|()
condition|)
block|{
name|newPos
operator|=
name|startPos
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|BreakException
operator|.
name|BREAK
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

