begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Compactor
operator|.
name|mapToByteBuffer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Compactor
operator|.
name|readEntry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Compactor
operator|.
name|recordAsKey
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Segment
operator|.
name|RECORD_ALIGN_BITS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|memory
operator|.
name|MemoryStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CompactorTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|mapSerializationTest
parameter_list|()
block|{
specifier|final
name|int
name|maxExistingEntries
init|=
literal|100000
decl_stmt|;
specifier|final
name|int
name|maxNonExistingEntries
init|=
literal|10000
decl_stmt|;
specifier|final
name|int
name|seed
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|SegmentTracker
name|factory
init|=
operator|new
name|MemoryStore
argument_list|()
operator|.
name|getTracker
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
argument_list|()
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|int
name|existing
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|maxExistingEntries
argument_list|)
decl_stmt|;
name|int
name|nonExisting
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|maxNonExistingEntries
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|existing
condition|;
name|i
operator|++
control|)
block|{
name|RecordId
name|k
init|=
operator|new
name|RecordId
argument_list|(
name|factory
operator|.
name|newDataSegmentId
argument_list|()
argument_list|,
name|asValidOffset
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|MAX_SEGMENT_SIZE
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|RecordId
name|v
init|=
operator|new
name|RecordId
argument_list|(
name|factory
operator|.
name|newDataSegmentId
argument_list|()
argument_list|,
name|asValidOffset
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|MAX_SEGMENT_SIZE
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|ByteBuffer
name|compaction
init|=
name|mapToByteBuffer
argument_list|(
name|map
argument_list|)
decl_stmt|;
comment|// not serialized, expecting the same value back
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nonExisting
condition|;
name|i
operator|++
control|)
block|{
name|RecordId
name|k
init|=
operator|new
name|RecordId
argument_list|(
name|factory
operator|.
name|newDataSegmentId
argument_list|()
argument_list|,
name|asValidOffset
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|MAX_SEGMENT_SIZE
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Clash on recordids"
argument_list|,
name|map
operator|.
name|containsKey
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|k
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|long
index|[]
name|v
init|=
name|recordAsKey
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|long
index|[]
name|vl
init|=
name|readEntry
argument_list|(
name|compaction
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Failed with seed "
operator|+
name|seed
argument_list|,
name|vl
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|asValidOffset
parameter_list|(
name|int
name|random
parameter_list|)
block|{
while|while
condition|(
name|random
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|random
operator|%
operator|(
literal|1
operator|<<
name|RECORD_ALIGN_BITS
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|random
return|;
block|}
name|random
operator|--
expr_stmt|;
block|}
return|return
name|random
return|;
block|}
block|}
end_class

end_unit

