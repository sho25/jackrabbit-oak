begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|query
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|FilterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
operator|.
name|createProperty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContentHelper
operator|.
name|INITIAL_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Tests for {@link SolrIndexLookup}  */
end_comment

begin_class
specifier|public
class|class
name|SolrIndexLookupTest
block|{
specifier|private
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
specifier|private
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|collectPathOnRootNode
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|newSolrIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"l1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|newSolrIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"l2"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|SolrIndexLookup
name|lookup
init|=
operator|new
name|SolrIndexLookup
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|FilterImpl
operator|.
name|newTestInstance
argument_list|()
decl_stmt|;
name|f
operator|.
name|restrictPath
argument_list|(
literal|"/"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|EXACT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
literal|"/oak:index/l1"
argument_list|,
literal|"/oak:index/l2"
argument_list|)
argument_list|,
name|lookup
operator|.
name|collectIndexNodePaths
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|collectPathOnSubNode
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|newSolrIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"l1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
expr_stmt|;
name|newSolrIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"l2"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
expr_stmt|;
name|newSolrIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"l3"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|SolrIndexLookup
name|lookup
init|=
operator|new
name|SolrIndexLookup
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|FilterImpl
operator|.
name|newTestInstance
argument_list|()
decl_stmt|;
name|f
operator|.
name|restrictPath
argument_list|(
literal|"/a"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|EXACT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
literal|"/oak:index/l1"
argument_list|,
literal|"/a/oak:index/l2"
argument_list|)
argument_list|,
name|lookup
operator|.
name|collectIndexNodePaths
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictPath
argument_list|(
literal|"/a/b"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|EXACT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
literal|"/oak:index/l1"
argument_list|,
literal|"/a/oak:index/l2"
argument_list|,
literal|"/a/b/oak:index/l3"
argument_list|)
argument_list|,
name|lookup
operator|.
name|collectIndexNodePaths
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|NodeBuilder
name|newSolrIndexDefinition
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|index
parameter_list|,
annotation|@
name|Nonnull
name|String
name|name
parameter_list|,
annotation|@
name|Nullable
name|Set
argument_list|<
name|String
argument_list|>
name|properties
parameter_list|)
block|{
if|if
condition|(
name|index
operator|.
name|hasChildNode
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|index
operator|.
name|child
argument_list|(
name|name
argument_list|)
return|;
block|}
name|index
operator|=
name|index
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|,
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|,
literal|"solr"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|index
operator|.
name|child
argument_list|(
literal|"server"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"solrServerType"
argument_list|,
literal|"embedded"
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
operator|&&
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|index
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
literal|"usedProperties"
argument_list|,
name|properties
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
block|}
end_class

end_unit

