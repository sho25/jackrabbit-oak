begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_comment
comment|/**  * A utility to create a (large) number of nodes in a tree structure.  */
end_comment

begin_class
specifier|public
class|class
name|NodeCreator
block|{
specifier|private
specifier|final
name|MicroKernel
name|mk
decl_stmt|;
specifier|private
name|String
name|head
decl_stmt|;
specifier|private
name|int
name|totalCount
init|=
literal|200
decl_stmt|;
specifier|private
name|int
name|width
init|=
literal|30
decl_stmt|,
name|count
decl_stmt|;
specifier|private
name|StopWatch
name|timer
decl_stmt|;
specifier|private
name|String
name|nodeName
init|=
literal|"test"
decl_stmt|;
specifier|private
name|String
name|data
init|=
literal|"Hello World"
decl_stmt|;
specifier|private
name|boolean
name|logToSystemOut
decl_stmt|;
specifier|public
name|NodeCreator
parameter_list|(
name|MicroKernel
name|mk
parameter_list|)
block|{
name|this
operator|.
name|mk
operator|=
name|mk
expr_stmt|;
name|head
operator|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setWidth
parameter_list|(
name|int
name|width
parameter_list|)
block|{
name|this
operator|.
name|width
operator|=
name|width
expr_stmt|;
block|}
specifier|public
name|void
name|setTotalCount
parameter_list|(
name|int
name|totalCount
parameter_list|)
block|{
name|this
operator|.
name|totalCount
operator|=
name|totalCount
expr_stmt|;
block|}
specifier|public
name|void
name|setNodeName
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
name|this
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
block|}
specifier|public
name|void
name|setData
parameter_list|(
name|String
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
specifier|public
name|void
name|create
parameter_list|()
block|{
name|log
argument_list|(
literal|"implementation: "
operator|+
name|mk
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"creating "
operator|+
name|totalCount
operator|+
literal|" nodes"
argument_list|)
expr_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\""
operator|+
name|nodeName
operator|+
literal|"\":{}"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|timer
operator|=
operator|new
name|StopWatch
argument_list|()
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|int
name|depth
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|Math
operator|.
name|log
argument_list|(
name|totalCount
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
name|width
argument_list|)
argument_list|)
decl_stmt|;
name|log
argument_list|(
literal|"depth: "
operator|+
name|depth
argument_list|)
expr_stmt|;
name|createNodes
argument_list|(
name|nodeName
argument_list|,
name|depth
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"created  "
operator|+
name|count
operator|+
literal|" nodes in "
operator|+
name|timer
operator|.
name|operationsPerSecond
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|traverse
parameter_list|()
block|{
name|timer
operator|=
operator|new
name|StopWatch
argument_list|()
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|int
name|depth
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|Math
operator|.
name|log
argument_list|(
name|totalCount
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
name|width
argument_list|)
argument_list|)
decl_stmt|;
name|log
argument_list|(
literal|"depth: "
operator|+
name|depth
argument_list|)
expr_stmt|;
name|traverse
argument_list|(
name|nodeName
argument_list|,
name|depth
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"read  "
operator|+
name|count
operator|+
literal|" nodes in "
operator|+
name|timer
operator|.
name|operationsPerSecond
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createNodes
parameter_list|(
name|String
name|parent
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
if|if
condition|(
name|count
operator|>=
name|totalCount
condition|)
block|{
return|return;
block|}
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|width
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|count
operator|>=
name|totalCount
operator|&&
name|depth
operator|==
literal|0
condition|)
block|{
break|break;
block|}
name|String
name|p
init|=
name|parent
operator|+
literal|"/node"
operator|+
name|depth
operator|+
name|i
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"+ \""
operator|+
name|p
operator|+
literal|"\": {"
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"\"data\":\""
argument_list|)
operator|.
name|append
argument_list|(
name|data
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|count
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|%
literal|1000
operator|==
literal|0
operator|&&
name|timer
operator|.
name|log
argument_list|()
condition|)
block|{
name|log
argument_list|(
literal|"  "
operator|+
name|count
operator|+
literal|" nodes in "
operator|+
name|timer
operator|.
name|operationsPerSecond
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
name|buff
operator|.
name|toString
argument_list|()
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|depth
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|width
condition|;
name|i
operator|++
control|)
block|{
name|String
name|p
init|=
name|parent
operator|+
literal|"/node"
operator|+
name|depth
operator|+
name|i
decl_stmt|;
name|createNodes
argument_list|(
name|p
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|traverse
parameter_list|(
name|String
name|parent
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
if|if
condition|(
name|count
operator|>=
name|totalCount
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|width
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|count
operator|>=
name|totalCount
operator|&&
name|depth
operator|==
literal|0
condition|)
block|{
break|break;
block|}
name|String
name|p
init|=
name|parent
operator|+
literal|"/node"
operator|+
name|depth
operator|+
name|i
decl_stmt|;
if|if
condition|(
operator|!
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/"
operator|+
name|p
argument_list|,
name|head
argument_list|)
condition|)
block|{
break|break;
block|}
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
operator|+
name|p
argument_list|,
name|head
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|%
literal|1000
operator|==
literal|0
operator|&&
name|timer
operator|.
name|log
argument_list|()
condition|)
block|{
name|log
argument_list|(
literal|"  "
operator|+
name|count
operator|+
literal|" nodes in "
operator|+
name|timer
operator|.
name|operationsPerSecond
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|depth
operator|>
literal|0
condition|)
block|{
name|traverse
argument_list|(
name|p
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|log
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|logToSystemOut
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setLogToSystemOut
parameter_list|(
name|boolean
name|logToSystemOut
parameter_list|)
block|{
name|this
operator|.
name|logToSystemOut
operator|=
name|logToSystemOut
expr_stmt|;
block|}
block|}
end_class

end_unit

