begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *    *    http://www.apache.org/licenses/LICENSE-2.0  *    *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.   *    */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|ldap
operator|.
name|InitialLdapContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|ldap
operator|.
name|LdapContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|entry
operator|.
name|DefaultEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|ldif
operator|.
name|LdifEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|ldif
operator|.
name|LdifReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|name
operator|.
name|Dn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|schema
operator|.
name|SchemaManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|schema
operator|.
name|registries
operator|.
name|SchemaLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|schema
operator|.
name|extractor
operator|.
name|SchemaLdifExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|schema
operator|.
name|extractor
operator|.
name|impl
operator|.
name|DefaultSchemaLdifExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|schema
operator|.
name|loader
operator|.
name|LdifSchemaLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|schema
operator|.
name|manager
operator|.
name|impl
operator|.
name|DefaultSchemaManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|constants
operator|.
name|ServerDNConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|DefaultDirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|api
operator|.
name|CoreSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|api
operator|.
name|DirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|api
operator|.
name|InstanceLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|api
operator|.
name|schema
operator|.
name|SchemaPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|factory
operator|.
name|JdbmPartitionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|jndi
operator|.
name|CoreContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|partition
operator|.
name|impl
operator|.
name|btree
operator|.
name|jdbm
operator|.
name|JdbmPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|partition
operator|.
name|ldif
operator|.
name|LdifPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|ldap
operator|.
name|LdapServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|ldap
operator|.
name|handlers
operator|.
name|extended
operator|.
name|StartTlsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|ldap
operator|.
name|handlers
operator|.
name|extended
operator|.
name|StoredProcedureExtendedOperationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|ldap
operator|.
name|handlers
operator|.
name|sasl
operator|.
name|MechanismHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|ldap
operator|.
name|handlers
operator|.
name|sasl
operator|.
name|cramMD5
operator|.
name|CramMd5MechanismHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|ldap
operator|.
name|handlers
operator|.
name|sasl
operator|.
name|digestMD5
operator|.
name|DigestMd5MechanismHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|ldap
operator|.
name|handlers
operator|.
name|sasl
operator|.
name|gssapi
operator|.
name|GssapiMechanismHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|ldap
operator|.
name|handlers
operator|.
name|sasl
operator|.
name|ntlm
operator|.
name|NtlmMechanismHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|ldap
operator|.
name|handlers
operator|.
name|sasl
operator|.
name|plain
operator|.
name|PlainMechanismHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|protocol
operator|.
name|shared
operator|.
name|transport
operator|.
name|TcpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|shared
operator|.
name|ldap
operator|.
name|constants
operator|.
name|SchemaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|shared
operator|.
name|ldap
operator|.
name|constants
operator|.
name|SupportedSaslMechanisms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|util
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A simple testcase for testing JNDI provider functionality.  *  * @author<a href="mailto:dev@directory.apache.org">Apache Directory Project</a>  * @version $Rev: 784530 $  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractServer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|LdifEntry
argument_list|>
name|EMPTY_LIST
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|LdifEntry
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CTX_FACTORY
init|=
literal|"com.sun.jndi.ldap.LdapCtxFactory"
decl_stmt|;
comment|/**      * the context root for the system partition      */
specifier|protected
name|LdapContext
name|sysRoot
decl_stmt|;
comment|/**      * the context root for the rootDSE      */
specifier|protected
name|CoreSession
name|rootDSE
decl_stmt|;
comment|/**      * the context root for the schema      */
specifier|protected
name|LdapContext
name|schemaRoot
decl_stmt|;
comment|/**      * flag whether to delete database files for each test or not      */
specifier|protected
name|boolean
name|doDelete
init|=
literal|true
decl_stmt|;
specifier|protected
name|int
name|port
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|DirectoryService
name|directoryService
decl_stmt|;
specifier|protected
name|LdapServer
name|ldapServer
decl_stmt|;
comment|/**      * If there is an LDIF file with the same name as the test class      * but with the .ldif extension then it is read and the entries      * it contains are added to the server.  It appears as though the      * administor adds these entries to the server.      *      * @param verifyEntries whether or not all entry additions are checked      *                      to see if they were in fact correctly added to the server      * @return a list of entries added to the server in the order they were added      * @throws NamingException of the load fails      */
specifier|protected
name|List
argument_list|<
name|LdifEntry
argument_list|>
name|loadTestLdif
parameter_list|(
name|boolean
name|verifyEntries
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|loadLdif
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".ldif"
argument_list|)
argument_list|,
name|verifyEntries
argument_list|)
return|;
block|}
comment|/**      * Loads an LDIF from an input stream and adds the entries it contains to      * the server.  It appears as though the administrator added these entries      * to the server.      *      * @param in            the input stream containing the LDIF entries to load      * @param verifyEntries whether or not all entry additions are checked      *                      to see if they were in fact correctly added to the server      * @return a list of entries added to the server in the order they were added      * @throws NamingException of the load fails      */
specifier|protected
name|List
argument_list|<
name|LdifEntry
argument_list|>
name|loadLdif
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|boolean
name|verifyEntries
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
return|return
name|EMPTY_LIST
return|;
block|}
name|LdifReader
name|ldifReader
init|=
operator|new
name|LdifReader
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
name|loadLdif
argument_list|(
name|ldifReader
argument_list|,
name|verifyEntries
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|LdifEntry
argument_list|>
name|loadLdif
parameter_list|(
name|LdifReader
name|ldifReader
parameter_list|,
name|boolean
name|verifyEntries
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|LdifEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|LdifEntry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|LdifEntry
name|ldifEntry
range|:
name|ldifReader
control|)
block|{
name|Dn
name|dn
init|=
name|ldifEntry
operator|.
name|getDn
argument_list|()
decl_stmt|;
if|if
condition|(
name|ldifEntry
operator|.
name|isEntry
argument_list|()
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|entry
operator|.
name|Entry
name|items
init|=
name|ldifEntry
operator|.
name|getEntry
argument_list|()
decl_stmt|;
name|rootDSE
operator|.
name|add
argument_list|(
operator|new
name|DefaultEntry
argument_list|(
name|directoryService
operator|.
name|getSchemaManager
argument_list|()
argument_list|,
name|items
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|verifyEntries
condition|)
block|{
name|verify
argument_list|(
name|ldifEntry
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully verified addition of entry {}"
argument_list|,
name|dn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Added entry {} without verification"
argument_list|,
name|dn
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|add
argument_list|(
name|ldifEntry
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|entries
return|;
block|}
comment|/**      * Inject an ldif String into the server. DN must be relative to the      * root.      *      * @param ldif the entries to inject      * @throws NamingException if the entries cannot be added      */
specifier|protected
name|void
name|injectEntries
parameter_list|(
name|String
name|ldif
parameter_list|)
throws|throws
name|Exception
block|{
name|LdifReader
name|reader
init|=
operator|new
name|LdifReader
argument_list|()
decl_stmt|;
name|loadLdif
argument_list|(
name|reader
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verifies that an entry exists in the directory with the      * specified attributes.      *      * @param entry the entry to verify      * @throws NamingException if there are problems accessing the entry      */
specifier|protected
name|void
name|verify
parameter_list|(
name|LdifEntry
name|entry
parameter_list|)
throws|throws
name|Exception
block|{
comment|//        Entry readEntry = rootDSE.lookup( entry.getDn() );
comment|//
comment|//        for ( EntryAttribute readAttribute:readEntry )
comment|//        {
comment|//            String id = readAttribute.getId();
comment|//            EntryAttribute origAttribute = entry.getEntry().get( id );
comment|//
comment|//            for ( Value<?> value:origAttribute )
comment|//            {
comment|//                if ( ! readAttribute.contains( value ) )
comment|//                {
comment|//                    LOG.error( "Failed to verify entry addition of {}. {} attribute in original " +
comment|//                            "entry missing from read entry.", entry.getDn(), id );
comment|//                    throw new AssertionFailedError( "Failed to verify entry addition of " + entry.getDn()  );
comment|//                }
comment|//            }
comment|//        }
block|}
comment|/**      * Common code to get an initial context via a simple bind to the      * server over the wire using the SUN JNDI LDAP provider. Do not use      * this method until after the setUp() method is called to start the      * server otherwise it will fail.      *      * @return an LDAP context as the the administrator to the rootDSE      * @throws NamingException if the server cannot be contacted      */
specifier|protected
name|LdapContext
name|getWiredContext
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getWiredContext
argument_list|(
name|ServerDNConstants
operator|.
name|ADMIN_SYSTEM_DN
argument_list|,
literal|"secret"
argument_list|)
return|;
block|}
comment|/**      * Common code to get an initial context via a simple bind to the      * server over the wire using the SUN JNDI LDAP provider. Do not use      * this method until after the setUp() method is called to start the      * server otherwise it will fail.      *      * @param bindPrincipalDn the DN of the principal to bind as      * @param password        the password of the bind principal      * @return an LDAP context as the the administrator to the rootDSE      * @throws NamingException if the server cannot be contacted      */
specifier|protected
name|LdapContext
name|getWiredContext
parameter_list|(
name|String
name|bindPrincipalDn
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
comment|//        if ( ! apacheDS.isStarted() )
comment|//        {
comment|//            throw new ConfigurationException( "The server is not online! Cannot connect to it." );
comment|//        }
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|INITIAL_CONTEXT_FACTORY
argument_list|,
name|CTX_FACTORY
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|,
literal|"ldap://localhost:"
operator|+
name|port
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_PRINCIPAL
argument_list|,
name|bindPrincipalDn
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_CREDENTIALS
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_AUTHENTICATION
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
return|return
operator|new
name|InitialLdapContext
argument_list|(
name|env
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Get's the initial context factory for the provider's ou=system context      * root.      */
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|cwd
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
literal|"apacheds"
argument_list|)
decl_stmt|;
name|doDelete
argument_list|(
name|cwd
argument_list|)
expr_stmt|;
name|directoryService
operator|=
operator|new
name|DefaultDirectoryService
argument_list|()
expr_stmt|;
name|directoryService
operator|.
name|setShutdownHookEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|directoryService
operator|.
name|setInstanceLayout
argument_list|(
operator|new
name|InstanceLayout
argument_list|(
name|cwd
argument_list|)
argument_list|)
expr_stmt|;
name|directoryService
operator|.
name|setSystemPartition
argument_list|(
name|createSystemPartition
argument_list|(
name|directoryService
argument_list|,
name|cwd
argument_list|)
argument_list|)
expr_stmt|;
name|port
operator|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|ldapServer
operator|=
operator|new
name|LdapServer
argument_list|()
expr_stmt|;
name|ldapServer
operator|.
name|setTransports
argument_list|(
operator|new
name|TcpTransport
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|ldapServer
operator|.
name|setDirectoryService
argument_list|(
name|directoryService
argument_list|)
expr_stmt|;
name|setupSaslMechanisms
argument_list|(
name|ldapServer
argument_list|)
expr_stmt|;
name|directoryService
operator|.
name|startup
argument_list|()
expr_stmt|;
name|ldapServer
operator|.
name|addExtendedOperationHandler
argument_list|(
operator|new
name|StartTlsHandler
argument_list|()
argument_list|)
expr_stmt|;
name|ldapServer
operator|.
name|addExtendedOperationHandler
argument_list|(
operator|new
name|StoredProcedureExtendedOperationHandler
argument_list|()
argument_list|)
expr_stmt|;
name|ldapServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|setContexts
argument_list|(
name|ServerDNConstants
operator|.
name|ADMIN_SYSTEM_DN
argument_list|,
literal|"secret"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|JdbmPartition
name|createSystemPartition
parameter_list|(
name|DirectoryService
name|service
parameter_list|,
specifier|final
name|File
name|workingDirectory
parameter_list|)
throws|throws
name|Exception
block|{
name|JdbmPartitionFactory
name|partitionFactory
init|=
operator|new
name|JdbmPartitionFactory
argument_list|()
decl_stmt|;
name|JdbmPartition
name|systemPartition
init|=
name|partitionFactory
operator|.
name|createPartition
argument_list|(
name|service
operator|.
name|getSchemaManager
argument_list|()
argument_list|,
name|service
operator|.
name|getDnFactory
argument_list|()
argument_list|,
literal|"system"
argument_list|,
name|ServerDNConstants
operator|.
name|SYSTEM_DN
argument_list|,
literal|500
argument_list|,
operator|new
name|File
argument_list|(
name|workingDirectory
argument_list|,
literal|"system"
argument_list|)
argument_list|)
decl_stmt|;
name|partitionFactory
operator|.
name|addIndex
argument_list|(
name|systemPartition
argument_list|,
name|SchemaConstants
operator|.
name|OBJECT_CLASS_AT
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|systemPartition
operator|.
name|setSchemaManager
argument_list|(
name|service
operator|.
name|getSchemaManager
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|systemPartition
return|;
block|}
specifier|private
name|void
name|setupSaslMechanisms
parameter_list|(
name|LdapServer
name|server
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MechanismHandler
argument_list|>
name|mechanismHandlerMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MechanismHandler
argument_list|>
argument_list|()
decl_stmt|;
name|mechanismHandlerMap
operator|.
name|put
argument_list|(
name|SupportedSaslMechanisms
operator|.
name|PLAIN
argument_list|,
operator|new
name|PlainMechanismHandler
argument_list|()
argument_list|)
expr_stmt|;
name|CramMd5MechanismHandler
name|cramMd5MechanismHandler
init|=
operator|new
name|CramMd5MechanismHandler
argument_list|()
decl_stmt|;
name|mechanismHandlerMap
operator|.
name|put
argument_list|(
name|SupportedSaslMechanisms
operator|.
name|CRAM_MD5
argument_list|,
name|cramMd5MechanismHandler
argument_list|)
expr_stmt|;
name|DigestMd5MechanismHandler
name|digestMd5MechanismHandler
init|=
operator|new
name|DigestMd5MechanismHandler
argument_list|()
decl_stmt|;
name|mechanismHandlerMap
operator|.
name|put
argument_list|(
name|SupportedSaslMechanisms
operator|.
name|DIGEST_MD5
argument_list|,
name|digestMd5MechanismHandler
argument_list|)
expr_stmt|;
name|GssapiMechanismHandler
name|gssapiMechanismHandler
init|=
operator|new
name|GssapiMechanismHandler
argument_list|()
decl_stmt|;
name|mechanismHandlerMap
operator|.
name|put
argument_list|(
name|SupportedSaslMechanisms
operator|.
name|GSSAPI
argument_list|,
name|gssapiMechanismHandler
argument_list|)
expr_stmt|;
name|NtlmMechanismHandler
name|ntlmMechanismHandler
init|=
operator|new
name|NtlmMechanismHandler
argument_list|()
decl_stmt|;
comment|// TODO - set some sort of default NtlmProvider implementation here
comment|// ntlmMechanismHandler.setNtlmProvider( provider );
comment|// TODO - or set FQCN of some sort of default NtlmProvider implementation here
comment|// ntlmMechanismHandler.setNtlmProviderFqcn( "com.foo.BarNtlmProvider" );
name|mechanismHandlerMap
operator|.
name|put
argument_list|(
name|SupportedSaslMechanisms
operator|.
name|NTLM
argument_list|,
name|ntlmMechanismHandler
argument_list|)
expr_stmt|;
name|mechanismHandlerMap
operator|.
name|put
argument_list|(
name|SupportedSaslMechanisms
operator|.
name|GSS_SPNEGO
argument_list|,
name|ntlmMechanismHandler
argument_list|)
expr_stmt|;
name|ldapServer
operator|.
name|setSaslMechanismHandlers
argument_list|(
name|mechanismHandlerMap
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deletes the Eve working directory.      *      * @param wkdir the directory to delete      * @throws IOException if the directory cannot be deleted      */
specifier|protected
name|void
name|doDelete
parameter_list|(
name|File
name|wkdir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doDelete
condition|)
block|{
if|if
condition|(
name|wkdir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|wkdir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wkdir
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete: "
operator|+
name|wkdir
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Sets the contexts for this base class.  Values of user and password used to      * set the respective JNDI properties.  These values can be overriden by the      * overrides properties.      *      * @param user   the username for authenticating as this user      * @param passwd the password of the user      * @throws NamingException if there is a failure of any kind      */
specifier|protected
name|void
name|setContexts
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|passwd
parameter_list|)
throws|throws
name|Exception
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|env
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DirectoryService
operator|.
name|JNDI_KEY
argument_list|,
name|directoryService
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_PRINCIPAL
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_CREDENTIALS
argument_list|,
name|passwd
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_AUTHENTICATION
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|INITIAL_CONTEXT_FACTORY
argument_list|,
name|CoreContextFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setContexts
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the contexts of this class taking into account the extras and overrides      * properties.      *      * @param env an environment to use while setting up the system root.      * @throws NamingException if there is a failure of any kind      */
specifier|protected
name|void
name|setContexts
parameter_list|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|env
parameter_list|)
throws|throws
name|Exception
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|envFinal
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|env
argument_list|)
decl_stmt|;
name|envFinal
operator|.
name|put
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|,
name|ServerDNConstants
operator|.
name|SYSTEM_DN
argument_list|)
expr_stmt|;
name|sysRoot
operator|=
operator|new
name|InitialLdapContext
argument_list|(
name|envFinal
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|envFinal
operator|.
name|put
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|rootDSE
operator|=
name|directoryService
operator|.
name|getAdminSession
argument_list|()
expr_stmt|;
name|envFinal
operator|.
name|put
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|,
name|ServerDNConstants
operator|.
name|CN_SCHEMA_DN
argument_list|)
expr_stmt|;
name|schemaRoot
operator|=
operator|new
name|InitialLdapContext
argument_list|(
name|envFinal
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the system context root to null.      */
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|ldapServer
operator|.
name|stop
argument_list|()
expr_stmt|;
try|try
block|{
name|directoryService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
name|sysRoot
operator|=
literal|null
expr_stmt|;
block|}
comment|//    /**
comment|//     * Imports the LDIF entries packaged with the Eve JNDI provider jar into
comment|//     * the newly created system partition to prime it up for operation.  Note
comment|//     * that only ou=system entries will be added - entries for other partitions
comment|//     * cannot be imported and will blow chunks.
comment|//     *
comment|//     * @throws NamingException if there are problems reading the ldif file and
comment|//     * adding those entries to the system partition
comment|//     * @param in the input stream with the ldif
comment|//     */
comment|//    protected void importLdif( InputStream in ) throws NamingException
comment|//    {
comment|//        try
comment|//        {
comment|//            for ( LdifEntry ldifEntry:new LdifReader( in ) )
comment|//            {
comment|//                rootDSE.add(
comment|//                    new DefaultServerEntry(
comment|//                        rootDSE.getDirectoryService().getRegistries(), ldifEntry.getEntry() ) );
comment|//            }
comment|//        }
comment|//        catch ( Exception e )
comment|//        {
comment|//            String msg = "failed while trying to parse system ldif file";
comment|//            NamingException ne = new LdapConfigurationException( msg );
comment|//            ne.setRootCause( e );
comment|//            throw ne;
comment|//        }
comment|//    }
comment|//
comment|//
block|}
end_class

end_unit

