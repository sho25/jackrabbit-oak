begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_comment
comment|/**  * Abstract base class for the various kinds of type definition classes  * in this package.  */
end_comment

begin_class
specifier|abstract
class|class
name|AbstractTypeDefinition
block|{
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|NO_STRINGS
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
specifier|protected
specifier|final
name|Tree
name|definition
decl_stmt|;
specifier|protected
specifier|final
name|NamePathMapper
name|mapper
decl_stmt|;
specifier|protected
name|AbstractTypeDefinition
parameter_list|(
name|Tree
name|definition
parameter_list|,
name|NamePathMapper
name|mapper
parameter_list|)
block|{
name|this
operator|.
name|definition
operator|=
name|checkNotNull
argument_list|(
name|definition
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
name|checkNotNull
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the boolean value of the named property.      *      * @param name property name      * @return property value, or {@code false} if the property does not exist      */
specifier|protected
name|boolean
name|getBoolean
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
block|{
name|PropertyState
name|property
init|=
name|definition
operator|.
name|getProperty
argument_list|(
name|checkNotNull
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|property
operator|!=
literal|null
operator|&&
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
return|;
block|}
comment|/**      * Returns the string value of the named property.      *      * @param oakName property name      * @return property value, or {@code null} if the property does not exist      */
annotation|@
name|CheckForNull
specifier|protected
name|String
name|getString
parameter_list|(
annotation|@
name|Nonnull
name|String
name|oakName
parameter_list|)
block|{
return|return
name|getValue
argument_list|(
name|oakName
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
return|;
block|}
comment|/**      * Returns the string values of the named property.      *      * @param oakName property name      * @return property values, or {@code null} if the property does not exist      */
annotation|@
name|CheckForNull
specifier|protected
name|String
index|[]
name|getStrings
parameter_list|(
annotation|@
name|Nonnull
name|String
name|oakName
parameter_list|)
block|{
return|return
name|getValues
argument_list|(
name|oakName
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
return|;
block|}
comment|/**      * Returns the name value of the named property.      *      * @param oakName property name      * @return property value, or {@code null} if the property does not exist      */
annotation|@
name|CheckForNull
specifier|protected
name|String
name|getName
parameter_list|(
annotation|@
name|Nonnull
name|String
name|oakName
parameter_list|)
block|{
return|return
name|getValue
argument_list|(
name|oakName
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
return|;
block|}
comment|/**      * Returns the name values of the named property.      *      * @param oakName property name      * @return property values, or {@code null} if the property does not exist      */
annotation|@
name|CheckForNull
specifier|protected
name|String
index|[]
name|getNames
parameter_list|(
annotation|@
name|Nonnull
name|String
name|oakName
parameter_list|)
block|{
return|return
name|getValues
argument_list|(
name|oakName
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
return|;
block|}
specifier|private
name|String
name|getValue
parameter_list|(
name|String
name|oakName
parameter_list|,
name|Type
argument_list|<
name|String
argument_list|>
name|type
parameter_list|)
block|{
name|PropertyState
name|property
init|=
name|definition
operator|.
name|getProperty
argument_list|(
name|checkNotNull
argument_list|(
name|oakName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
return|return
name|property
operator|.
name|getValue
argument_list|(
name|type
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|String
index|[]
name|getValues
parameter_list|(
name|String
name|oakName
parameter_list|,
name|Type
argument_list|<
name|String
argument_list|>
name|type
parameter_list|)
block|{
name|String
index|[]
name|values
init|=
literal|null
decl_stmt|;
name|PropertyState
name|property
init|=
name|definition
operator|.
name|getProperty
argument_list|(
name|checkNotNull
argument_list|(
name|oakName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|int
name|n
init|=
name|property
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|values
operator|=
operator|new
name|String
index|[
name|n
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|property
operator|.
name|getValue
argument_list|(
name|type
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|values
operator|=
name|NO_STRINGS
expr_stmt|;
block|}
block|}
return|return
name|values
return|;
block|}
block|}
end_class

end_unit

