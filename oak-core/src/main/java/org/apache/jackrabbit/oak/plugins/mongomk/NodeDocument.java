begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
operator|.
name|UpdateOp
operator|.
name|Key
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
operator|.
name|UpdateOp
operator|.
name|Operation
import|;
end_import

begin_comment
comment|/**  * A document storing data about a node.  */
end_comment

begin_class
specifier|public
class|class
name|NodeDocument
extends|extends
name|Document
block|{
comment|/**      * Marker document, which indicates the document does not exist.      */
specifier|public
specifier|static
specifier|final
name|NodeDocument
name|NULL
init|=
operator|new
name|NodeDocument
argument_list|(
operator|new
name|MemoryDocumentStore
argument_list|()
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NodeDocument
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * A size threshold after which to consider a document a split candidate.      * TODO: check which value is the best one      */
specifier|static
specifier|final
name|int
name|SPLIT_CANDIDATE_THRESHOLD
init|=
literal|32
operator|*
literal|1024
decl_stmt|;
comment|/**      * A document size threshold after which a split is forced even if      * {@link #REVISIONS_SPLIT_OFF_SIZE} is not reached.      */
specifier|static
specifier|final
name|int
name|FORCE_SPLIT_THRESHOLD
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|/**      * Only split off at least this number of revisions.      */
specifier|static
specifier|final
name|int
name|REVISIONS_SPLIT_OFF_SIZE
init|=
literal|1000
decl_stmt|;
comment|/**      * Revision collision markers set by commits with modifications, which      * overlap with un-merged branch commits.      * Key: revision, value:      */
specifier|static
specifier|final
name|String
name|COLLISIONS
init|=
literal|"_collisions"
decl_stmt|;
comment|/**      * The modified time (5 second resolution).      */
specifier|static
specifier|final
name|String
name|MODIFIED
init|=
literal|"_modified"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
name|EMPTY_RANGE_MAP
init|=
name|Collections
operator|.
name|unmodifiableSortedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * The list of revision to root commit depth mappings to find out if a      * revision is actually committed.      */
specifier|private
specifier|static
specifier|final
name|String
name|COMMIT_ROOT
init|=
literal|"_commitRoot"
decl_stmt|;
comment|/**      * The number of previous documents (documents that contain old revisions of      * this node). This property is only set if multiple documents per node      * exist. This is the case when a node is updated very often in a short      * time, such that the document gets very big.      */
specifier|private
specifier|static
specifier|final
name|String
name|PREVIOUS
init|=
literal|"_prev"
decl_stmt|;
comment|/**      * Whether this node is deleted. Key: revision, value: true/false.      */
specifier|private
specifier|static
specifier|final
name|String
name|DELETED
init|=
literal|"_deleted"
decl_stmt|;
comment|/**      * The list of recent revisions for this node, where this node is the      * root of the commit. Key: revision, value: true or the base revision of an      * un-merged branch commit.      */
specifier|private
specifier|static
specifier|final
name|String
name|REVISIONS
init|=
literal|"_revisions"
decl_stmt|;
comment|/**      * The last revision. Key: machine id, value: revision.      */
specifier|private
specifier|static
specifier|final
name|String
name|LAST_REV
init|=
literal|"_lastRev"
decl_stmt|;
comment|/**      * Properties to ignore when a document is split.      */
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|IGNORE_ON_SPLIT
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ID
argument_list|,
name|MOD_COUNT
argument_list|,
name|MODIFIED
argument_list|,
name|PREVIOUS
argument_list|,
name|LAST_REV
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DocumentStore
name|store
decl_stmt|;
comment|/**      * Parsed and sorted set of previous revisions.      */
specifier|private
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
name|previous
decl_stmt|;
specifier|private
specifier|final
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|NodeDocument
parameter_list|(
annotation|@
name|Nonnull
name|DocumentStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|checkNotNull
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the value map for the given key. This method is similar to {@link      * #get(String)} but will always return a value map. The returned value map      * may span multiple documents if the values of the given<code>key</code>      * were split off to {@link #PREVIOUS} documents.      *      * @param key a string key.      * @return the map associated with the key.      */
annotation|@
name|Nonnull
specifier|public
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|getValueMap
parameter_list|(
annotation|@
name|Nonnull
name|String
name|key
parameter_list|)
block|{
name|Object
name|value
init|=
name|super
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|IGNORE_ON_SPLIT
operator|.
name|contains
argument_list|(
name|key
argument_list|)
operator|||
operator|!
operator|(
name|value
operator|instanceof
name|Map
operator|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|ValueMap
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|key
argument_list|)
return|;
block|}
block|}
comment|/**      * @return the system time this object was created.      */
specifier|public
specifier|final
name|long
name|getCreated
parameter_list|()
block|{
return|return
name|time
return|;
block|}
comment|/**      * @return a map of the last known revision for each clusterId.      */
annotation|@
name|Nonnull
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Revision
argument_list|>
name|getLastRev
parameter_list|()
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Revision
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
name|getLocalMap
argument_list|(
name|LAST_REV
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|e
range|:
name|valueMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|clusterId
init|=
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getClusterId
argument_list|()
decl_stmt|;
name|Revision
name|rev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|clusterId
argument_list|,
name|rev
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
comment|/**      * Returns<code>true</code> if the given<code>revision</code> is marked      * committed.      *      * @param revision the revision.      * @return<code>true</code> if committed;<code>false</code> otherwise.      */
specifier|public
name|boolean
name|isCommitted
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
name|NodeDocument
name|commitRootDoc
init|=
name|getCommitRoot
argument_list|(
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|commitRootDoc
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|value
init|=
name|commitRootDoc
operator|.
name|getLocalRevisions
argument_list|()
operator|.
name|get
argument_list|(
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|Utils
operator|.
name|isCommitted
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|// check previous docs
for|for
control|(
name|NodeDocument
name|prev
range|:
name|commitRootDoc
operator|.
name|getPreviousDocs
argument_list|(
name|revision
argument_list|,
name|REVISIONS
argument_list|)
control|)
block|{
if|if
condition|(
name|prev
operator|.
name|containsRevision
argument_list|(
name|revision
argument_list|)
condition|)
block|{
return|return
name|prev
operator|.
name|isCommitted
argument_list|(
name|revision
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns<code>true</code> if this document contains an entry for the      * given<code>revision</code> in the {@link #REVISIONS} map. Please note      * that an entry in the {@link #REVISIONS} map does not necessarily mean      * the the revision is committed. Use {@link #isCommitted(Revision)} to get      * the commit state of a revision.      *      * @param revision the revision to check.      * @return<code>true</code> if this document contains the given revision.      */
specifier|public
name|boolean
name|containsRevision
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
if|if
condition|(
name|getLocalRevisions
argument_list|()
operator|.
name|containsKey
argument_list|(
name|revision
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|NodeDocument
name|prev
range|:
name|getPreviousDocs
argument_list|(
name|revision
argument_list|,
name|REVISIONS
argument_list|)
control|)
block|{
if|if
condition|(
name|prev
operator|.
name|containsRevision
argument_list|(
name|revision
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Gets a sorted map of uncommitted revisions of this document with the      * local cluster node id as returned by the {@link RevisionContext}. These      * are the {@link #REVISIONS} entries where {@link Utils#isCommitted(String)}      * returns false.      *      * @param context the revision context.      * @return the uncommitted revisions of this document.      */
specifier|public
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|Revision
argument_list|>
name|getUncommittedRevisions
parameter_list|(
name|RevisionContext
name|context
parameter_list|)
block|{
comment|// only look at revisions in this document.
comment|// uncommitted revisions are not split off
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
name|getLocalRevisions
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|Revision
argument_list|>
name|revisions
init|=
operator|new
name|TreeMap
argument_list|<
name|Revision
argument_list|,
name|Revision
argument_list|>
argument_list|(
name|context
operator|.
name|getRevisionComparator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|commit
range|:
name|valueMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Utils
operator|.
name|isCommitted
argument_list|(
name|commit
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|Revision
name|r
init|=
name|commit
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getClusterId
argument_list|()
operator|==
name|context
operator|.
name|getClusterId
argument_list|()
condition|)
block|{
name|Revision
name|b
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|commit
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|revisions
operator|.
name|put
argument_list|(
name|r
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|revisions
return|;
block|}
comment|/**      * Returns the commit root path for the given<code>revision</code> or      *<code>null</code> if this document does not have a commit root entry for      * the given<code>revision</code>.      *      * @param revision a revision.      * @return the commit root path or<code>null</code>.      */
annotation|@
name|CheckForNull
specifier|public
name|String
name|getCommitRootPath
parameter_list|(
name|Revision
name|revision
parameter_list|)
block|{
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
name|getCommitRoot
argument_list|()
decl_stmt|;
name|String
name|depth
init|=
name|valueMap
operator|.
name|get
argument_list|(
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|depth
operator|!=
literal|null
condition|)
block|{
name|String
name|p
init|=
name|Utils
operator|.
name|getPathFromId
argument_list|(
name|getId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|p
argument_list|,
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|p
argument_list|)
operator|-
name|Integer
operator|.
name|parseInt
argument_list|(
name|depth
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Get the revision of the latest change made to this node.      *      * @param context the revision context      * @param changeRev the revision of the current change      * @param handler the conflict handler, which is called for concurrent changes      *                preceding<code>changeRev</code>.      * @return the revision, or null if deleted      */
annotation|@
name|CheckForNull
specifier|public
name|Revision
name|getNewestRevision
parameter_list|(
name|RevisionContext
name|context
parameter_list|,
name|Revision
name|changeRev
parameter_list|,
name|CollisionHandler
name|handler
parameter_list|)
block|{
comment|// no need to look at all commits. the primary document
comment|// always contains at least one commit, including all
comment|// branch commits which are not yet merged
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|revisions
init|=
name|getLocalRevisions
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|commitRoots
init|=
name|getLocalCommitRoot
argument_list|()
decl_stmt|;
name|Revision
name|newestRev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Revision
name|r
range|:
name|Iterables
operator|.
name|mergeSorted
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|revisions
operator|.
name|keySet
argument_list|()
argument_list|,
name|commitRoots
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
name|revisions
operator|.
name|comparator
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|r
argument_list|,
name|changeRev
argument_list|)
condition|)
block|{
comment|// we have seen a previous change from another cluster node
comment|// (which might be conflicting or not) - we need to make
comment|// sure this change is visible from now on
comment|// TODO verify this is really needed
name|context
operator|.
name|publishRevision
argument_list|(
name|r
argument_list|,
name|changeRev
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|r
operator|.
name|equals
argument_list|(
name|changeRev
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isValidRevision
argument_list|(
name|context
argument_list|,
name|r
argument_list|,
name|changeRev
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Revision
argument_list|>
argument_list|()
argument_list|)
condition|)
block|{
name|handler
operator|.
name|concurrentModification
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newestRev
operator|=
name|r
expr_stmt|;
comment|// found newest revision, no need to check more revisions
comment|// revisions are sorted newest first
break|break;
block|}
block|}
block|}
if|if
condition|(
name|newestRev
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|value
init|=
name|getDeleted
argument_list|()
operator|.
name|get
argument_list|(
name|newestRev
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
comment|// deleted in the newest revision
return|return
literal|null
return|;
block|}
return|return
name|newestRev
return|;
block|}
comment|/**      * Checks if the revision is valid for the given document. A revision is      * considered valid if the given document is the root of the commit, or the      * commit root has the revision set. This method may read further documents      * to perform this check.      * This method also takes pending branches into consideration.      * The<code>readRevision</code> identifies the read revision used by the      * client, which may be a branch revision logged in {@link RevisionContext#getBranches()}.      * The revision<code>rev</code> is valid if it is part of the branch      * history of<code>readRevision</code>.      *      * @param rev     revision to check.      * @param readRevision the read revision of the client.      * @param validRevisions set of revisions already checked against      *<code>readRevision</code> and considered valid.      * @return<code>true</code> if the revision is valid;<code>false</code>      *         otherwise.      */
name|boolean
name|isValidRevision
parameter_list|(
annotation|@
name|Nonnull
name|RevisionContext
name|context
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|rev
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|readRevision
parameter_list|,
annotation|@
name|Nonnull
name|Set
argument_list|<
name|Revision
argument_list|>
name|validRevisions
parameter_list|)
block|{
if|if
condition|(
name|validRevisions
operator|.
name|contains
argument_list|(
name|rev
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|NodeDocument
name|doc
init|=
name|getCommitRoot
argument_list|(
name|rev
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|doc
operator|.
name|isCommitted
argument_list|(
name|context
argument_list|,
name|rev
argument_list|,
name|readRevision
argument_list|)
condition|)
block|{
name|validRevisions
operator|.
name|add
argument_list|(
name|rev
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns a {@link Node} as seen at the given<code>readRevision</code>.      *      * @param context      the revision context.      * @param readRevision the read revision.      * @return the node or<code>null</code> if the node doesn't exist at the      *         given read revision.      */
annotation|@
name|CheckForNull
specifier|public
name|Node
name|getNodeAtRevision
parameter_list|(
name|RevisionContext
name|context
parameter_list|,
name|Revision
name|readRevision
parameter_list|)
block|{
name|Set
argument_list|<
name|Revision
argument_list|>
name|validRevisions
init|=
operator|new
name|HashSet
argument_list|<
name|Revision
argument_list|>
argument_list|()
decl_stmt|;
name|Revision
name|min
init|=
name|getLiveRevision
argument_list|(
name|context
argument_list|,
name|readRevision
argument_list|,
name|validRevisions
argument_list|)
decl_stmt|;
if|if
condition|(
name|min
operator|==
literal|null
condition|)
block|{
comment|// deleted
return|return
literal|null
return|;
block|}
name|String
name|path
init|=
name|Utils
operator|.
name|getPathFromId
argument_list|(
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Node
name|n
init|=
operator|new
name|Node
argument_list|(
name|path
argument_list|,
name|readRevision
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Utils
operator|.
name|isPropertyName
argument_list|(
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// first check local map, which contains most recent values
name|Value
name|value
init|=
name|getLatestValue
argument_list|(
name|context
argument_list|,
name|getLocalMap
argument_list|(
name|key
argument_list|)
argument_list|,
name|min
argument_list|,
name|readRevision
argument_list|,
name|validRevisions
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// check complete revision history
name|value
operator|=
name|getLatestValue
argument_list|(
name|context
argument_list|,
name|getValueMap
argument_list|(
name|key
argument_list|)
argument_list|,
name|min
argument_list|,
name|readRevision
argument_list|,
name|validRevisions
argument_list|)
expr_stmt|;
block|}
name|String
name|propertyName
init|=
name|Utils
operator|.
name|unescapePropertyName
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|v
init|=
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|value
else|:
literal|null
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
comment|// when was this node last modified?
name|Branch
name|branch
init|=
name|context
operator|.
name|getBranches
argument_list|()
operator|.
name|getBranch
argument_list|(
name|readRevision
argument_list|)
decl_stmt|;
name|Revision
name|lastRevision
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Revision
argument_list|>
name|lastRevs
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|getLastRev
argument_list|()
argument_list|)
decl_stmt|;
comment|// overlay with unsaved last modified from this instance
name|Revision
name|lastModified
init|=
name|context
operator|.
name|getPendingModifications
argument_list|()
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastModified
operator|!=
literal|null
condition|)
block|{
name|lastRevs
operator|.
name|put
argument_list|(
name|context
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|lastModified
argument_list|)
expr_stmt|;
block|}
comment|// filter out revisions newer than branch base
if|if
condition|(
name|branch
operator|!=
literal|null
condition|)
block|{
name|Revision
name|base
init|=
name|branch
operator|.
name|getBase
argument_list|(
name|readRevision
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Revision
argument_list|>
name|it
init|=
name|lastRevs
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Revision
name|r
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|r
argument_list|,
name|base
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Revision
name|r
range|:
name|lastRevs
operator|.
name|values
argument_list|()
control|)
block|{
comment|// ignore if newer than readRevision
if|if
condition|(
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|r
argument_list|,
name|readRevision
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|lastRevision
operator|==
literal|null
operator|||
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|r
argument_list|,
name|lastRevision
argument_list|)
condition|)
block|{
name|lastRevision
operator|=
name|r
expr_stmt|;
block|}
block|}
if|if
condition|(
name|branch
operator|!=
literal|null
condition|)
block|{
comment|// read from a branch
comment|// -> possibly overlay with unsaved last revs from branch
name|Revision
name|r
init|=
name|branch
operator|.
name|getUnsavedLastRevision
argument_list|(
name|path
argument_list|,
name|readRevision
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|lastRevision
operator|=
name|r
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastRevision
operator|==
literal|null
condition|)
block|{
comment|// use readRevision if none found
name|lastRevision
operator|=
name|readRevision
expr_stmt|;
block|}
name|n
operator|.
name|setLastRevision
argument_list|(
name|lastRevision
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
comment|/**      * Returns<code>true</code> if this node is considered deleted at the      * given<code>readRevision</code>.      *      * @param context the revision context.      * @param readRevision the read revision.      * @param validRevisions the set of revisions already checked against      *<code>readRevision</code> and considered valid.      * @return<code>true</code> if deleted,<code>false</code> otherwise.      */
specifier|public
name|boolean
name|isDeleted
parameter_list|(
name|RevisionContext
name|context
parameter_list|,
name|Revision
name|readRevision
parameter_list|,
name|Set
argument_list|<
name|Revision
argument_list|>
name|validRevisions
parameter_list|)
block|{
return|return
name|getLiveRevision
argument_list|(
name|context
argument_list|,
name|readRevision
argument_list|,
name|validRevisions
argument_list|)
operator|==
literal|null
return|;
block|}
comment|/**      * Get the earliest (oldest) revision where the node was alive at or before      * the provided revision, if the node was alive at the given revision.      *       * @param context the revision context      * @param maxRev the maximum revision to return      * @param validRevisions the set of revisions already checked against maxRev      *            and considered valid.      * @return the earliest revision, or null if the node is deleted at the      *         given revision      */
annotation|@
name|CheckForNull
specifier|public
name|Revision
name|getLiveRevision
parameter_list|(
name|RevisionContext
name|context
parameter_list|,
name|Revision
name|maxRev
parameter_list|,
name|Set
argument_list|<
name|Revision
argument_list|>
name|validRevisions
parameter_list|)
block|{
comment|// check local deleted map first
name|Value
name|value
init|=
name|getLatestValue
argument_list|(
name|context
argument_list|,
name|getLocalDeleted
argument_list|()
argument_list|,
literal|null
argument_list|,
name|maxRev
argument_list|,
name|validRevisions
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// need to check complete map
name|value
operator|=
name|getLatestValue
argument_list|(
name|context
argument_list|,
name|getDeleted
argument_list|()
argument_list|,
literal|null
argument_list|,
name|maxRev
argument_list|,
name|validRevisions
argument_list|)
expr_stmt|;
block|}
return|return
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|value
operator|.
name|equals
argument_list|(
literal|"false"
argument_list|)
condition|?
name|value
operator|.
name|revision
else|:
literal|null
return|;
block|}
comment|/**      * Returns<code>true</code> if the given operation is conflicting with this      * document.      *      * @param op the update operation.      * @param baseRevision the base revision for the update operation.      * @param context the revision context.      * @return<code>true</code> if conflicting,<code>false</code> otherwise.      */
specifier|public
name|boolean
name|isConflicting
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|baseRevision
parameter_list|,
annotation|@
name|Nonnull
name|RevisionContext
name|context
parameter_list|)
block|{
comment|// did existence of node change after baseRevision?
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|deleted
init|=
name|getDeleted
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|deleted
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|baseRevision
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Operation
argument_list|>
name|entry
range|:
name|op
operator|.
name|getChanges
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|type
operator|!=
name|Operation
operator|.
name|Type
operator|.
name|SET_MAP_ENTRY
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|DELETED
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// existence of node changed, this always conflicts with
comment|// any other concurrent change
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|Utils
operator|.
name|isPropertyName
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// was this property touched after baseRevision?
for|for
control|(
name|Revision
name|rev
range|:
name|getValueMap
argument_list|(
name|name
argument_list|)
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|rev
argument_list|,
name|baseRevision
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns update operations to split this document. The implementation may      * decide to not return any operations if no splitting is required.      *      * @param context the revision context.      * @return the split operations.      */
annotation|@
name|Nonnull
specifier|public
name|Iterable
argument_list|<
name|UpdateOp
argument_list|>
name|split
parameter_list|(
annotation|@
name|Nonnull
name|RevisionContext
name|context
parameter_list|)
block|{
comment|// only consider if there are enough commits,
comment|// unless document is really big
if|if
condition|(
name|getLocalRevisions
argument_list|()
operator|.
name|size
argument_list|()
operator|+
name|getLocalCommitRoot
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
name|REVISIONS_SPLIT_OFF_SIZE
operator|&&
name|getMemory
argument_list|()
operator|<
name|FORCE_SPLIT_THRESHOLD
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|String
name|id
init|=
name|getId
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
name|previous
init|=
name|getPreviousRanges
argument_list|()
decl_stmt|;
comment|// what's the most recent previous revision?
name|Revision
name|recentPrevious
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Revision
name|rev
range|:
name|previous
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|rev
operator|.
name|getClusterId
argument_list|()
operator|!=
name|context
operator|.
name|getClusterId
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|recentPrevious
operator|==
literal|null
operator|||
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|rev
argument_list|,
name|recentPrevious
argument_list|)
condition|)
block|{
name|recentPrevious
operator|=
name|rev
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|NavigableMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
argument_list|>
name|splitValues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NavigableMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|property
range|:
name|data
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|IGNORE_ON_SPLIT
operator|.
name|contains
argument_list|(
name|property
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|NavigableMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|splitMap
init|=
operator|new
name|TreeMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
argument_list|(
name|context
operator|.
name|getRevisionComparator
argument_list|()
argument_list|)
decl_stmt|;
name|splitValues
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|splitMap
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
name|getLocalMap
argument_list|(
name|property
argument_list|)
decl_stmt|;
comment|// collect committed changes of this cluster node after the
comment|// most recent previous split revision
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|valueMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Revision
name|rev
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|rev
operator|.
name|getClusterId
argument_list|()
operator|!=
name|context
operator|.
name|getClusterId
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|recentPrevious
operator|==
literal|null
operator|||
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|rev
argument_list|,
name|recentPrevious
argument_list|)
condition|)
block|{
if|if
condition|(
name|isCommitted
argument_list|(
name|rev
argument_list|)
condition|)
block|{
name|splitMap
operator|.
name|put
argument_list|(
name|rev
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|splitOps
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|int
name|numValues
init|=
literal|0
decl_stmt|;
name|Revision
name|high
init|=
literal|null
decl_stmt|;
name|Revision
name|low
init|=
literal|null
decl_stmt|;
for|for
control|(
name|NavigableMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|splitMap
range|:
name|splitValues
operator|.
name|values
argument_list|()
control|)
block|{
comment|// keep the most recent in the main document
if|if
condition|(
operator|!
name|splitMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|splitMap
operator|.
name|remove
argument_list|(
name|splitMap
operator|.
name|lastKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|splitMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// remember highest / lowest revision
if|if
condition|(
name|high
operator|==
literal|null
operator|||
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|splitMap
operator|.
name|lastKey
argument_list|()
argument_list|,
name|high
argument_list|)
condition|)
block|{
name|high
operator|=
name|splitMap
operator|.
name|lastKey
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|low
operator|==
literal|null
operator|||
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|low
argument_list|,
name|splitMap
operator|.
name|firstKey
argument_list|()
argument_list|)
condition|)
block|{
name|low
operator|=
name|splitMap
operator|.
name|firstKey
argument_list|()
expr_stmt|;
block|}
name|numValues
operator|+=
name|splitMap
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|high
operator|!=
literal|null
operator|&&
name|low
operator|!=
literal|null
operator|&&
operator|(
name|numValues
operator|>=
name|REVISIONS_SPLIT_OFF_SIZE
operator|||
name|getMemory
argument_list|()
operator|>
name|FORCE_SPLIT_THRESHOLD
operator|)
condition|)
block|{
comment|// enough revisions to split off
name|splitOps
operator|=
operator|new
name|ArrayList
argument_list|<
name|UpdateOp
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// move to another document
name|UpdateOp
name|main
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|main
operator|.
name|setMapEntry
argument_list|(
name|PREVIOUS
argument_list|,
name|high
argument_list|,
name|low
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateOp
name|old
init|=
operator|new
name|UpdateOp
argument_list|(
name|Utils
operator|.
name|getPreviousIdFor
argument_list|(
name|id
argument_list|,
name|high
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|old
operator|.
name|set
argument_list|(
name|ID
argument_list|,
name|old
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|property
range|:
name|splitValues
operator|.
name|keySet
argument_list|()
control|)
block|{
name|NavigableMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|splitMap
init|=
name|splitValues
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|splitMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Revision
name|r
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|main
operator|.
name|removeMapEntry
argument_list|(
name|property
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|old
operator|.
name|setMapEntry
argument_list|(
name|property
argument_list|,
name|r
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|splitOps
operator|.
name|add
argument_list|(
name|old
argument_list|)
expr_stmt|;
name|splitOps
operator|.
name|add
argument_list|(
name|main
argument_list|)
expr_stmt|;
block|}
return|return
name|splitOps
return|;
block|}
comment|/**      * Returns previous revision ranges for this document. The revision keys are      * sorted descending, newest first!      *      * @return the previous ranges for this document.      */
annotation|@
name|Nonnull
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
name|getPreviousRanges
parameter_list|()
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|map
init|=
name|getLocalMap
argument_list|(
name|PREVIOUS
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|previous
operator|=
name|EMPTY_RANGE_MAP
expr_stmt|;
block|}
else|else
block|{
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
name|transformed
init|=
operator|new
name|TreeMap
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Revision
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Revision
name|o1
parameter_list|,
name|Revision
name|o2
parameter_list|)
block|{
comment|// in reverse order!
name|int
name|c
init|=
name|o2
operator|.
name|compareRevisionTime
argument_list|(
name|o1
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
name|c
operator|=
name|o1
operator|.
name|getClusterId
argument_list|()
operator|<
name|o2
operator|.
name|getClusterId
argument_list|()
condition|?
operator|-
literal|1
else|:
operator|(
name|o1
operator|.
name|getClusterId
argument_list|()
operator|==
name|o2
operator|.
name|getClusterId
argument_list|()
condition|?
literal|0
else|:
literal|1
operator|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Revision
name|high
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Revision
name|low
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|transformed
operator|.
name|put
argument_list|(
name|high
argument_list|,
operator|new
name|Range
argument_list|(
name|high
argument_list|,
name|low
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|previous
operator|=
name|Collections
operator|.
name|unmodifiableSortedMap
argument_list|(
name|transformed
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|previous
return|;
block|}
comment|/**      * Returns previous {@link NodeDocument}, which include entries for the      * property in the given revision.      * If the<code>revision</code> is<code>null</code>, then all previous      * documents are returned. The returned documents are returned in descending      * revision order (newest first).      *      * @param revision the revision to match or<code>null</code>.      * @param property the name of a property.      * @return previous documents.      */
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|getPreviousDocs
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|Revision
name|revision
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|String
name|property
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|docs
init|=
name|Iterables
operator|.
name|transform
argument_list|(
name|Iterables
operator|.
name|filter
argument_list|(
name|getPreviousRanges
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
name|input
parameter_list|)
block|{
return|return
name|revision
operator|==
literal|null
operator|||
name|input
operator|.
name|getValue
argument_list|()
operator|.
name|includes
argument_list|(
name|revision
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
argument_list|,
name|NodeDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|NodeDocument
name|apply
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
name|input
parameter_list|)
block|{
name|Revision
name|r
init|=
name|input
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|prevId
init|=
name|Utils
operator|.
name|getPreviousIdFor
argument_list|(
name|getId
argument_list|()
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|NodeDocument
name|prev
init|=
name|store
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|prevId
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Document with previous revisions not found: "
operator|+
name|prevId
argument_list|)
expr_stmt|;
block|}
return|return
name|prev
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// filter out null docs and check if the revision is actually in there
return|return
name|Iterables
operator|.
name|filter
argument_list|(
name|docs
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|NodeDocument
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|revision
operator|==
literal|null
operator|||
name|input
operator|.
name|getLocalMap
argument_list|(
name|property
argument_list|)
operator|.
name|containsKey
argument_list|(
name|revision
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Returns the local value map for the given key. Returns<code>null</code>      * if no such value map exists.      *      * @param key the key.      * @return local value map.      */
annotation|@
name|Nonnull
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|getLocalMap
parameter_list|(
name|String
name|key
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|(
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
operator|)
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|map
operator|=
name|ValueMap
operator|.
name|EMPTY
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
comment|/**      * @return the {@link #REVISIONS} stored on this document.      */
annotation|@
name|Nonnull
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|getLocalRevisions
parameter_list|()
block|{
return|return
name|getLocalMap
argument_list|(
name|REVISIONS
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|getLocalCommitRoot
parameter_list|()
block|{
return|return
name|getLocalMap
argument_list|(
name|COMMIT_ROOT
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|getLocalDeleted
parameter_list|()
block|{
return|return
name|getLocalMap
argument_list|(
name|DELETED
argument_list|)
return|;
block|}
comment|//-------------------------< UpdateOp modifiers>---------------------------
specifier|public
specifier|static
name|void
name|setModified
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|set
argument_list|(
name|MODIFIED
argument_list|,
name|Commit
operator|.
name|getModified
argument_list|(
name|checkNotNull
argument_list|(
name|revision
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setRevision
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|,
annotation|@
name|Nonnull
name|String
name|commitValue
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|setMapEntry
argument_list|(
name|REVISIONS
argument_list|,
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|,
name|checkNotNull
argument_list|(
name|commitValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|unsetRevision
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|unsetMapEntry
argument_list|(
name|REVISIONS
argument_list|,
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setLastRev
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|setMapEntry
argument_list|(
name|LAST_REV
argument_list|,
operator|new
name|Revision
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|revision
operator|.
name|getClusterId
argument_list|()
argument_list|)
argument_list|,
name|revision
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setCommitRoot
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|,
name|int
name|commitRootDepth
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|setMapEntry
argument_list|(
name|COMMIT_ROOT
argument_list|,
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|commitRootDepth
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setDeleted
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|,
name|boolean
name|deleted
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|op
argument_list|)
operator|.
name|setMapEntry
argument_list|(
name|DELETED
argument_list|,
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|deleted
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//----------------------------< internal>----------------------------------
comment|/**      * Returns the commit root document for the given revision. This may either      * be this document or another one.      *      * @param rev a revision.      * @return the commit root or<code>null</code> if there is none.      */
annotation|@
name|CheckForNull
specifier|private
name|NodeDocument
name|getCommitRoot
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|rev
parameter_list|)
block|{
if|if
condition|(
name|containsRevision
argument_list|(
name|rev
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
name|String
name|commitRootPath
init|=
name|getCommitRootPath
argument_list|(
name|rev
argument_list|)
decl_stmt|;
if|if
condition|(
name|commitRootPath
operator|==
literal|null
condition|)
block|{
comment|// shouldn't happen, either node is commit root for a revision
comment|// or has a reference to the commit root
name|LOG
operator|.
name|warn
argument_list|(
literal|"Node {} does not have commit root reference for revision {}"
argument_list|,
name|getId
argument_list|()
argument_list|,
name|rev
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// get root of commit
return|return
name|store
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|commitRootPath
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Checks that revision x is newer than another revision.      *      * @param x the revision to check      * @param previous the presumed earlier revision      * @return true if x is newer      */
specifier|private
specifier|static
name|boolean
name|isRevisionNewer
parameter_list|(
annotation|@
name|Nonnull
name|RevisionContext
name|context
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|x
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|previous
parameter_list|)
block|{
return|return
name|context
operator|.
name|getRevisionComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|x
argument_list|,
name|previous
argument_list|)
operator|>
literal|0
return|;
block|}
comment|/**      * Returns<code>true</code> if the given revision      * {@link Utils#isCommitted(String)} in the revisions map (including      * revisions split off to previous documents) and is visible from the      *<code>readRevision</code>.      *      * @param revision  the revision to check.      * @param readRevision the read revision.      * @return<code>true</code> if the revision is committed, otherwise      *<code>false</code>.      */
specifier|private
name|boolean
name|isCommitted
parameter_list|(
annotation|@
name|Nonnull
name|RevisionContext
name|context
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|readRevision
parameter_list|)
block|{
if|if
condition|(
name|revision
operator|.
name|equalsIgnoreBranch
argument_list|(
name|readRevision
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|value
init|=
name|getCommitValue
argument_list|(
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|Utils
operator|.
name|isCommitted
argument_list|(
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|getBranches
argument_list|()
operator|.
name|getBranch
argument_list|(
name|readRevision
argument_list|)
operator|==
literal|null
operator|&&
operator|!
name|readRevision
operator|.
name|isBranch
argument_list|()
condition|)
block|{
comment|// resolve commit revision
name|revision
operator|=
name|Utils
operator|.
name|resolveCommitRevision
argument_list|(
name|revision
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// readRevision is not from a branch
comment|// compare resolved revision as is
return|return
operator|!
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|revision
argument_list|,
name|readRevision
argument_list|)
return|;
block|}
else|else
block|{
comment|// on same merged branch?
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
name|getCommitValue
argument_list|(
name|readRevision
operator|.
name|asTrunkRevision
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
comment|// compare unresolved revision
return|return
operator|!
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|revision
argument_list|,
name|readRevision
argument_list|)
return|;
block|}
block|}
block|}
else|else
block|{
comment|// branch commit (not merged)
if|if
condition|(
name|Revision
operator|.
name|fromString
argument_list|(
name|value
argument_list|)
operator|.
name|getClusterId
argument_list|()
operator|!=
name|context
operator|.
name|getClusterId
argument_list|()
condition|)
block|{
comment|// this is an unmerged branch commit from another cluster node,
comment|// hence never visible to us
return|return
literal|false
return|;
block|}
block|}
return|return
name|includeRevision
argument_list|(
name|context
argument_list|,
name|Utils
operator|.
name|resolveCommitRevision
argument_list|(
name|revision
argument_list|,
name|value
argument_list|)
argument_list|,
name|readRevision
argument_list|)
return|;
block|}
comment|/**      * Returns the commit value for the given<code>revision</code>.      *      * @param revision a revision.      * @return the commit value or<code>null</code> if the revision is unknown.      */
annotation|@
name|CheckForNull
specifier|private
name|String
name|getCommitValue
parameter_list|(
name|Revision
name|revision
parameter_list|)
block|{
name|String
name|value
init|=
name|getLocalRevisions
argument_list|()
operator|.
name|get
argument_list|(
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// check previous
for|for
control|(
name|NodeDocument
name|prev
range|:
name|getPreviousDocs
argument_list|(
name|revision
argument_list|,
name|REVISIONS
argument_list|)
control|)
block|{
name|value
operator|=
name|prev
operator|.
name|getLocalRevisions
argument_list|()
operator|.
name|get
argument_list|(
name|revision
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|value
return|;
block|}
specifier|private
specifier|static
name|boolean
name|includeRevision
parameter_list|(
name|RevisionContext
name|context
parameter_list|,
name|Revision
name|x
parameter_list|,
name|Revision
name|requestRevision
parameter_list|)
block|{
name|Branch
name|b
init|=
name|context
operator|.
name|getBranches
argument_list|()
operator|.
name|getBranch
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
comment|// only include if requested revision is also a branch revision
comment|// with a history including x
if|if
condition|(
name|b
operator|.
name|containsCommit
argument_list|(
name|requestRevision
argument_list|)
condition|)
block|{
comment|// in same branch, include if the same revision or
comment|// requestRevision is newer
return|return
name|x
operator|.
name|equalsIgnoreBranch
argument_list|(
name|requestRevision
argument_list|)
operator|||
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|requestRevision
argument_list|,
name|x
argument_list|)
return|;
block|}
comment|// not part of branch identified by requestedRevision
return|return
literal|false
return|;
block|}
comment|// assert: x is not a branch commit
name|b
operator|=
name|context
operator|.
name|getBranches
argument_list|()
operator|.
name|getBranch
argument_list|(
name|requestRevision
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
comment|// reset requestRevision to branch base revision to make
comment|// sure we don't include revisions committed after branch
comment|// was created
name|requestRevision
operator|=
name|b
operator|.
name|getBase
argument_list|(
name|requestRevision
argument_list|)
expr_stmt|;
block|}
return|return
name|context
operator|.
name|getRevisionComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|requestRevision
argument_list|,
name|x
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/**      * Get the latest property value that is larger or equal the min revision,      * and smaller or equal the readRevision revision.      *      * @param valueMap the sorted revision-value map      * @param min the minimum revision (null meaning unlimited)      * @param readRevision the maximum revision      * @param validRevisions set of revision considered valid against the given      *                       readRevision.      * @return the value, or null if not found      */
annotation|@
name|CheckForNull
specifier|private
name|Value
name|getLatestValue
parameter_list|(
annotation|@
name|Nonnull
name|RevisionContext
name|context
parameter_list|,
annotation|@
name|Nonnull
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|valueMap
parameter_list|,
annotation|@
name|Nullable
name|Revision
name|min
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|readRevision
parameter_list|,
annotation|@
name|Nonnull
name|Set
argument_list|<
name|Revision
argument_list|>
name|validRevisions
parameter_list|)
block|{
name|String
name|value
init|=
literal|null
decl_stmt|;
name|Revision
name|latestRev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|valueMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Revision
name|propRev
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|min
operator|!=
literal|null
operator|&&
name|isRevisionNewer
argument_list|(
name|context
argument_list|,
name|min
argument_list|,
name|propRev
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|isValidRevision
argument_list|(
name|context
argument_list|,
name|propRev
argument_list|,
name|readRevision
argument_list|,
name|validRevisions
argument_list|)
condition|)
block|{
name|latestRev
operator|=
name|propRev
expr_stmt|;
name|value
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
return|return
name|value
operator|!=
literal|null
condition|?
operator|new
name|Value
argument_list|(
name|value
argument_list|,
name|latestRev
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|getDeleted
parameter_list|()
block|{
return|return
name|ValueMap
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|DELETED
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|getCommitRoot
parameter_list|()
block|{
return|return
name|ValueMap
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|COMMIT_ROOT
argument_list|)
return|;
block|}
comment|/**      * The list of children for a node. The list might be complete or not, in      * which case it only represents a block of children.      */
specifier|static
specifier|final
class|class
name|Children
implements|implements
name|CacheValue
implements|,
name|Cloneable
block|{
comment|/**          * The child node names, ordered as stored in MongoDB.          */
name|ArrayList
argument_list|<
name|String
argument_list|>
name|childNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**          * Whether the list is complete (in which case there are no other          * children) or not.          */
name|boolean
name|isComplete
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|getMemory
parameter_list|()
block|{
name|int
name|size
init|=
literal|114
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|childNames
control|)
block|{
name|size
operator|+=
name|name
operator|.
name|length
argument_list|()
operator|*
literal|2
operator|+
literal|56
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Children
name|clone
parameter_list|()
block|{
try|try
block|{
name|Children
name|clone
init|=
operator|(
name|Children
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
name|clone
operator|.
name|childNames
operator|=
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|childNames
operator|.
name|clone
argument_list|()
expr_stmt|;
return|return
name|clone
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
block|}
comment|/**      * A property value / revision combination.      */
specifier|private
specifier|static
specifier|final
class|class
name|Value
block|{
specifier|final
name|String
name|value
decl_stmt|;
specifier|final
name|Revision
name|revision
decl_stmt|;
name|Value
parameter_list|(
annotation|@
name|Nonnull
name|String
name|value
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|revision
operator|=
name|checkNotNull
argument_list|(
name|revision
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

