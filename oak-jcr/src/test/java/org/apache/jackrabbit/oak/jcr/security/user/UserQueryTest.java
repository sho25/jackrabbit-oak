begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for the {@link Query} interface and  * {@link org.apache.jackrabbit.api.security.user.UserManager#findAuthorizables(Query)}.  */
end_comment

begin_class
specifier|public
class|class
name|UserQueryTest
extends|extends
name|AbstractUserTest
block|{
specifier|private
name|User
name|kangaroo
decl_stmt|;
specifier|private
name|User
name|elephant
decl_stmt|;
specifier|private
name|User
name|goldenToad
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|User
argument_list|>
name|users
init|=
operator|new
name|HashSet
argument_list|<
name|User
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Group
name|vertebrates
decl_stmt|;
specifier|private
name|Group
name|mammals
decl_stmt|;
specifier|private
name|Group
name|apes
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|Group
argument_list|>
name|groups
init|=
operator|new
name|HashSet
argument_list|<
name|Group
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|Authorizable
argument_list|>
name|authorizables
init|=
operator|new
name|HashSet
argument_list|<
name|Authorizable
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|Authorizable
argument_list|>
name|systemDefined
init|=
operator|new
name|HashSet
argument_list|<
name|Authorizable
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|systemAuthorizables
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
literal|"rep:principalName"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|systemAuthorizables
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Authorizable
name|authorizable
init|=
name|systemAuthorizables
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|authorizable
operator|.
name|isGroup
argument_list|()
condition|)
block|{
name|groups
operator|.
name|add
argument_list|(
operator|(
name|Group
operator|)
name|authorizable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|users
operator|.
name|add
argument_list|(
operator|(
name|User
operator|)
name|authorizable
argument_list|)
expr_stmt|;
block|}
name|systemDefined
operator|.
name|add
argument_list|(
name|authorizable
argument_list|)
expr_stmt|;
block|}
name|Group
name|animals
init|=
name|createGroup
argument_list|(
literal|"animals"
argument_list|)
decl_stmt|;
name|Group
name|invertebrates
init|=
name|createGroup
argument_list|(
literal|"invertebrates"
argument_list|)
decl_stmt|;
name|Group
name|arachnids
init|=
name|createGroup
argument_list|(
literal|"arachnids"
argument_list|)
decl_stmt|;
name|Group
name|insects
init|=
name|createGroup
argument_list|(
literal|"insects"
argument_list|)
decl_stmt|;
name|vertebrates
operator|=
name|createGroup
argument_list|(
literal|"vertebrates"
argument_list|)
expr_stmt|;
name|mammals
operator|=
name|createGroup
argument_list|(
literal|"mammals"
argument_list|)
expr_stmt|;
name|apes
operator|=
name|createGroup
argument_list|(
literal|"apes"
argument_list|)
expr_stmt|;
name|Group
name|reptiles
init|=
name|createGroup
argument_list|(
literal|"reptiles"
argument_list|)
decl_stmt|;
name|Group
name|birds
init|=
name|createGroup
argument_list|(
literal|"birds"
argument_list|)
decl_stmt|;
name|Group
name|amphibians
init|=
name|createGroup
argument_list|(
literal|"amphibians"
argument_list|)
decl_stmt|;
name|animals
operator|.
name|addMember
argument_list|(
name|invertebrates
argument_list|)
expr_stmt|;
name|animals
operator|.
name|addMember
argument_list|(
name|vertebrates
argument_list|)
expr_stmt|;
name|invertebrates
operator|.
name|addMember
argument_list|(
name|arachnids
argument_list|)
expr_stmt|;
name|invertebrates
operator|.
name|addMember
argument_list|(
name|insects
argument_list|)
expr_stmt|;
name|vertebrates
operator|.
name|addMember
argument_list|(
name|mammals
argument_list|)
expr_stmt|;
name|vertebrates
operator|.
name|addMember
argument_list|(
name|reptiles
argument_list|)
expr_stmt|;
name|vertebrates
operator|.
name|addMember
argument_list|(
name|birds
argument_list|)
expr_stmt|;
name|vertebrates
operator|.
name|addMember
argument_list|(
name|amphibians
argument_list|)
expr_stmt|;
name|mammals
operator|.
name|addMember
argument_list|(
name|apes
argument_list|)
expr_stmt|;
name|User
name|blackWidow
init|=
name|createUser
argument_list|(
literal|"black widow"
argument_list|,
literal|"flies"
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|User
name|gardenSpider
init|=
name|createUser
argument_list|(
literal|"garden spider"
argument_list|,
literal|"flies"
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|User
name|jumpingSpider
init|=
name|createUser
argument_list|(
literal|"jumping spider"
argument_list|,
literal|"insects"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|addMembers
argument_list|(
name|arachnids
argument_list|,
name|blackWidow
argument_list|,
name|gardenSpider
argument_list|,
name|jumpingSpider
argument_list|)
expr_stmt|;
name|User
name|ant
init|=
name|createUser
argument_list|(
literal|"ant"
argument_list|,
literal|"leaves"
argument_list|,
literal|0.5
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|User
name|bee
init|=
name|createUser
argument_list|(
literal|"bee"
argument_list|,
literal|"honey"
argument_list|,
literal|2.5
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|User
name|fly
init|=
name|createUser
argument_list|(
literal|"fly"
argument_list|,
literal|"dirt"
argument_list|,
literal|1.3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|addMembers
argument_list|(
name|insects
argument_list|,
name|ant
argument_list|,
name|bee
argument_list|,
name|fly
argument_list|)
expr_stmt|;
name|User
name|jackrabbit
init|=
name|createUser
argument_list|(
literal|"jackrabbit"
argument_list|,
literal|"carrots"
argument_list|,
literal|2500
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|User
name|deer
init|=
name|createUser
argument_list|(
literal|"deer"
argument_list|,
literal|"leaves"
argument_list|,
literal|120000
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|User
name|opposum
init|=
name|createUser
argument_list|(
literal|"opposum"
argument_list|,
literal|"fruit"
argument_list|,
literal|1200
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|kangaroo
operator|=
name|createUser
argument_list|(
literal|"kangaroo"
argument_list|,
literal|"grass"
argument_list|,
literal|90000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|elephant
operator|=
name|createUser
argument_list|(
literal|"elephant"
argument_list|,
literal|"leaves"
argument_list|,
literal|5000000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addMembers
argument_list|(
name|mammals
argument_list|,
name|jackrabbit
argument_list|,
name|deer
argument_list|,
name|opposum
argument_list|,
name|kangaroo
argument_list|,
name|elephant
argument_list|)
expr_stmt|;
name|User
name|lemur
init|=
name|createUser
argument_list|(
literal|"lemur"
argument_list|,
literal|"nectar"
argument_list|,
literal|1100
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|User
name|gibbon
init|=
name|createUser
argument_list|(
literal|"gibbon"
argument_list|,
literal|"meat"
argument_list|,
literal|20000
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|addMembers
argument_list|(
name|apes
argument_list|,
name|lemur
argument_list|,
name|gibbon
argument_list|)
expr_stmt|;
name|User
name|crocodile
init|=
name|createUser
argument_list|(
literal|"crocodile"
argument_list|,
literal|"meat"
argument_list|,
literal|80000
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|User
name|turtle
init|=
name|createUser
argument_list|(
literal|"turtle"
argument_list|,
literal|"leaves"
argument_list|,
literal|10000
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|User
name|lizard
init|=
name|createUser
argument_list|(
literal|"lizard"
argument_list|,
literal|"leaves"
argument_list|,
literal|1900
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|addMembers
argument_list|(
name|reptiles
argument_list|,
name|crocodile
argument_list|,
name|turtle
argument_list|,
name|lizard
argument_list|)
expr_stmt|;
name|User
name|kestrel
init|=
name|createUser
argument_list|(
literal|"kestrel"
argument_list|,
literal|"mice"
argument_list|,
literal|2000
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|User
name|goose
init|=
name|createUser
argument_list|(
literal|"goose"
argument_list|,
literal|"snails"
argument_list|,
literal|13000
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|User
name|pelican
init|=
name|createUser
argument_list|(
literal|"pelican"
argument_list|,
literal|"fish"
argument_list|,
literal|15000
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|User
name|dove
init|=
name|createUser
argument_list|(
literal|"dove"
argument_list|,
literal|"insects"
argument_list|,
literal|1600
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|addMembers
argument_list|(
name|birds
argument_list|,
name|kestrel
argument_list|,
name|goose
argument_list|,
name|pelican
argument_list|,
name|dove
argument_list|)
expr_stmt|;
name|User
name|salamander
init|=
name|createUser
argument_list|(
literal|"salamander"
argument_list|,
literal|"insects"
argument_list|,
literal|800
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|goldenToad
operator|=
name|createUser
argument_list|(
literal|"golden toad"
argument_list|,
literal|"insects"
argument_list|,
literal|700
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|User
name|poisonDartFrog
init|=
name|createUser
argument_list|(
literal|"poison dart frog"
argument_list|,
literal|"insects"
argument_list|,
literal|40
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|addMembers
argument_list|(
name|amphibians
argument_list|,
name|salamander
argument_list|,
name|goldenToad
argument_list|,
name|poisonDartFrog
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"canFly"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|true
argument_list|)
argument_list|,
name|bee
argument_list|,
name|fly
argument_list|,
name|kestrel
argument_list|,
name|goose
argument_list|,
name|pelican
argument_list|,
name|dove
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"poisonous"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|true
argument_list|)
argument_list|,
name|blackWidow
argument_list|,
name|bee
argument_list|,
name|poisonDartFrog
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"poisonous"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|false
argument_list|)
argument_list|,
name|turtle
argument_list|,
name|lemur
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"hasWings"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|false
argument_list|)
argument_list|,
name|blackWidow
argument_list|,
name|gardenSpider
argument_list|,
name|jumpingSpider
argument_list|,
name|ant
argument_list|,
name|jackrabbit
argument_list|,
name|deer
argument_list|,
name|opposum
argument_list|,
name|kangaroo
argument_list|,
name|elephant
argument_list|,
name|lemur
argument_list|,
name|gibbon
argument_list|,
name|crocodile
argument_list|,
name|turtle
argument_list|,
name|lizard
argument_list|,
name|salamander
argument_list|,
name|goldenToad
argument_list|,
name|poisonDartFrog
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"color"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|"black"
argument_list|)
argument_list|,
name|blackWidow
argument_list|,
name|gardenSpider
argument_list|,
name|ant
argument_list|,
name|fly
argument_list|,
name|lizard
argument_list|,
name|salamander
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"color"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|"WHITE"
argument_list|)
argument_list|,
name|opposum
argument_list|,
name|goose
argument_list|,
name|pelican
argument_list|,
name|dove
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"color"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|"gold"
argument_list|)
argument_list|,
name|goldenToad
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"numberOfLegs"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|2
argument_list|)
argument_list|,
name|kangaroo
argument_list|,
name|gibbon
argument_list|,
name|kestrel
argument_list|,
name|goose
argument_list|,
name|dove
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"numberOfLegs"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|4
argument_list|)
argument_list|,
name|jackrabbit
argument_list|,
name|deer
argument_list|,
name|opposum
argument_list|,
name|elephant
argument_list|,
name|lemur
argument_list|,
name|crocodile
argument_list|,
name|turtle
argument_list|,
name|lizard
argument_list|,
name|salamander
argument_list|,
name|goldenToad
argument_list|,
name|poisonDartFrog
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"numberOfLegs"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|6
argument_list|)
argument_list|,
name|ant
argument_list|,
name|bee
argument_list|,
name|fly
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"numberOfLegs"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|8
argument_list|)
argument_list|,
name|blackWidow
argument_list|,
name|gardenSpider
argument_list|,
name|jumpingSpider
argument_list|)
expr_stmt|;
name|elephant
operator|.
name|getImpersonation
argument_list|()
operator|.
name|grantImpersonation
argument_list|(
name|jackrabbit
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|authorizables
operator|.
name|addAll
argument_list|(
name|users
argument_list|)
expr_stmt|;
name|authorizables
operator|.
name|addAll
argument_list|(
name|groups
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|userMgr
operator|.
name|isAutoSave
argument_list|()
condition|)
block|{
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Authorizable
name|authorizable
range|:
name|authorizables
control|)
block|{
if|if
condition|(
operator|!
name|systemDefined
operator|.
name|contains
argument_list|(
name|authorizable
argument_list|)
condition|)
block|{
name|authorizable
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|authorizables
operator|.
name|clear
argument_list|()
expr_stmt|;
name|groups
operator|.
name|clear
argument_list|()
expr_stmt|;
name|users
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|userMgr
operator|.
name|isAutoSave
argument_list|()
condition|)
block|{
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAny
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
comment|/* any */
block|}
block|}
argument_list|)
decl_stmt|;
name|assertSameElements
argument_list|(
name|result
argument_list|,
name|authorizables
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelector
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Authorizable
argument_list|>
argument_list|>
name|selectors
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Authorizable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|selectors
operator|.
name|add
argument_list|(
name|Authorizable
operator|.
name|class
argument_list|)
expr_stmt|;
name|selectors
operator|.
name|add
argument_list|(
name|Group
operator|.
name|class
argument_list|)
expr_stmt|;
name|selectors
operator|.
name|add
argument_list|(
name|User
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Authorizable
argument_list|>
name|s
range|:
name|selectors
control|)
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setSelector
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|User
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|assertSameElements
argument_list|(
name|result
argument_list|,
name|users
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Group
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|assertSameElements
argument_list|(
name|result
argument_list|,
name|groups
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertSameElements
argument_list|(
name|result
argument_list|,
name|authorizables
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDirectScope
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Group
index|[]
name|groups
init|=
operator|new
name|Group
index|[]
block|{
name|mammals
block|,
name|vertebrates
block|,
name|apes
block|}
decl_stmt|;
for|for
control|(
specifier|final
name|Group
name|g
range|:
name|groups
control|)
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
try|try
block|{
name|builder
operator|.
name|setScope
argument_list|(
name|g
operator|.
name|getID
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|members
init|=
name|g
operator|.
name|getDeclaredMembers
argument_list|()
decl_stmt|;
name|assertSameElements
argument_list|(
name|result
argument_list|,
name|members
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIndirectScope
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Group
index|[]
name|groups
init|=
operator|new
name|Group
index|[]
block|{
name|mammals
block|,
name|vertebrates
block|,
name|apes
block|}
decl_stmt|;
for|for
control|(
specifier|final
name|Group
name|g
range|:
name|groups
control|)
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
try|try
block|{
name|builder
operator|.
name|setScope
argument_list|(
name|g
operator|.
name|getID
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|members
init|=
name|g
operator|.
name|getMembers
argument_list|()
decl_stmt|;
name|assertSameElements
argument_list|(
name|result
argument_list|,
name|members
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindUsersInGroup
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Group
index|[]
name|groups
init|=
operator|new
name|Group
index|[]
block|{
name|mammals
block|,
name|vertebrates
block|,
name|apes
block|}
decl_stmt|;
for|for
control|(
specifier|final
name|Group
name|g
range|:
name|groups
control|)
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
try|try
block|{
name|builder
operator|.
name|setSelector
argument_list|(
name|User
operator|.
name|class
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setScope
argument_list|(
name|g
operator|.
name|getID
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|members
init|=
name|g
operator|.
name|getMembers
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|users
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|members
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Authorizable
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Authorizable
name|authorizable
parameter_list|)
block|{
return|return
operator|!
name|authorizable
operator|.
name|isGroup
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertSameElements
argument_list|(
name|result
argument_list|,
name|users
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindGroupsInGroup
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Group
index|[]
name|groups
init|=
operator|new
name|Group
index|[]
block|{
name|mammals
block|,
name|vertebrates
block|,
name|apes
block|}
decl_stmt|;
for|for
control|(
specifier|final
name|Group
name|g
range|:
name|groups
control|)
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
try|try
block|{
name|builder
operator|.
name|setSelector
argument_list|(
name|Group
operator|.
name|class
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setScope
argument_list|(
name|g
operator|.
name|getID
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|members
init|=
name|g
operator|.
name|getDeclaredMembers
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|users
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|members
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Authorizable
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Authorizable
name|authorizable
parameter_list|)
block|{
return|return
name|authorizable
operator|.
name|isGroup
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertSameElements
argument_list|(
name|result
argument_list|,
name|users
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindInEveryoneGroup
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Authorizable
name|everyone
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|boolean
name|doRemove
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|everyone
operator|==
literal|null
condition|)
block|{
name|everyone
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|doRemove
operator|=
literal|true
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setScope
argument_list|(
name|EveryonePrincipal
operator|.
name|NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|members
init|=
operator|(
operator|(
name|Group
operator|)
name|everyone
operator|)
operator|.
name|getDeclaredMembers
argument_list|()
decl_stmt|;
name|assertSameElements
argument_list|(
name|result
argument_list|,
name|members
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|doRemove
condition|)
block|{
name|everyone
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNameMatch
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|nameMatches
argument_list|(
literal|"a%"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|expected
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|authorizables
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Authorizable
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Authorizable
name|authorizable
parameter_list|)
block|{
try|try
block|{
name|String
name|name
init|=
name|authorizable
operator|.
name|getID
argument_list|()
decl_stmt|;
name|Principal
name|principal
init|=
name|authorizable
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
return|return
name|name
operator|.
name|startsWith
argument_list|(
literal|"a"
argument_list|)
operator|||
name|principal
operator|!=
literal|null
operator|&&
name|principal
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"a"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSameElements
argument_list|(
name|result
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
comment|/**      * The name matching condition must not only search for node-name and      * principal name but also needs to take the new rep:authoriableId into      * account that has been introduced as of Oak 1.0      *      * @see<a href="https://issues.apache.org/jira/browse/OAK-2243">OAK-2243</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testNameMatch2
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// create a user with different id and principal name
name|User
name|user
init|=
name|userMgr
operator|.
name|createUser
argument_list|(
literal|"moloch"
argument_list|,
literal|null
argument_list|,
operator|new
name|PrincipalImpl
argument_list|(
literal|"MolochHorridus"
argument_list|)
argument_list|,
literal|"reptiles"
argument_list|)
decl_stmt|;
name|String
name|userPath
init|=
name|user
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// move it such that the node name doesn't reveal the id.
name|superuser
operator|.
name|move
argument_list|(
name|userPath
argument_list|,
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|userPath
argument_list|,
literal|1
argument_list|)
operator|+
literal|"/thorny_dragon"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|authorizables
operator|.
name|add
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// search for the authorizable ID
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|nameMatches
argument_list|(
literal|"moloch"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Authorizable
name|a
init|=
name|result
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"moloch"
argument_list|,
name|a
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// search for the principal name (basically just for backwards compatibility)
name|result
operator|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|nameMatches
argument_list|(
literal|"MolochHorridus"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|=
name|result
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MolochHorridus"
argument_list|,
name|a
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// search for the node name
name|result
operator|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|nameMatches
argument_list|(
literal|"thorny_dragon"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|=
name|result
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"thorny_dragon"
argument_list|,
name|Text
operator|.
name|getName
argument_list|(
name|a
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindProperty1
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|eq
argument_list|(
literal|"@canFly"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|User
argument_list|>
name|expected
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|users
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|User
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|User
name|user
parameter_list|)
block|{
try|try
block|{
name|Value
index|[]
name|canFly
init|=
name|user
operator|.
name|getProperty
argument_list|(
literal|"canFly"
argument_list|)
decl_stmt|;
return|return
name|canFly
operator|!=
literal|null
operator|&&
name|canFly
operator|.
name|length
operator|==
literal|1
operator|&&
name|canFly
index|[
literal|0
index|]
operator|.
name|getBoolean
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSameElements
argument_list|(
name|result
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindProperty2
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|gt
argument_list|(
literal|"profile/@weight"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|2000.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|User
argument_list|>
name|expected
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|users
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|User
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|User
name|user
parameter_list|)
block|{
try|try
block|{
name|Value
index|[]
name|weight
init|=
name|user
operator|.
name|getProperty
argument_list|(
literal|"profile/weight"
argument_list|)
decl_stmt|;
return|return
name|weight
operator|!=
literal|null
operator|&&
name|weight
operator|.
name|length
operator|==
literal|1
operator|&&
name|weight
index|[
literal|0
index|]
operator|.
name|getDouble
argument_list|()
operator|>
literal|2000.0
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSameElements
argument_list|(
name|result
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindProperty3
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|eq
argument_list|(
literal|"@numberOfLegs"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|User
argument_list|>
name|expected
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|users
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|User
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|User
name|user
parameter_list|)
block|{
try|try
block|{
name|Value
index|[]
name|numberOfLegs
init|=
name|user
operator|.
name|getProperty
argument_list|(
literal|"numberOfLegs"
argument_list|)
decl_stmt|;
return|return
name|numberOfLegs
operator|!=
literal|null
operator|&&
name|numberOfLegs
operator|.
name|length
operator|==
literal|1
operator|&&
name|numberOfLegs
index|[
literal|0
index|]
operator|.
name|getLong
argument_list|()
operator|==
literal|8
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSameElements
argument_list|(
name|result
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertyExistence
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|exists
argument_list|(
literal|"@poisonous"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|User
argument_list|>
name|expected
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|users
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|User
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|User
name|user
parameter_list|)
block|{
try|try
block|{
name|Value
index|[]
name|poisonous
init|=
name|user
operator|.
name|getProperty
argument_list|(
literal|"poisonous"
argument_list|)
decl_stmt|;
return|return
name|poisonous
operator|!=
literal|null
operator|&&
name|poisonous
operator|.
name|length
operator|==
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSameElements
argument_list|(
name|result
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertyLike
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|like
argument_list|(
literal|"profile/@food"
argument_list|,
literal|"m%"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|User
argument_list|>
name|expected
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|users
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|User
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|User
name|user
parameter_list|)
block|{
try|try
block|{
name|Value
index|[]
name|food
init|=
name|user
operator|.
name|getProperty
argument_list|(
literal|"profile/food"
argument_list|)
decl_stmt|;
if|if
condition|(
name|food
operator|==
literal|null
operator|||
name|food
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|String
name|value
init|=
name|food
index|[
literal|0
index|]
operator|.
name|getString
argument_list|()
decl_stmt|;
return|return
name|value
operator|.
name|startsWith
argument_list|(
literal|"m"
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSameElements
argument_list|(
name|result
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContains1
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|contains
argument_list|(
literal|"."
argument_list|,
literal|"gold"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|User
argument_list|>
name|expected
init|=
name|Iterators
operator|.
name|singletonIterator
argument_list|(
name|goldenToad
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSameElements
argument_list|(
name|result
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContains2
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|contains
argument_list|(
literal|"@color"
argument_list|,
literal|"gold"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|User
argument_list|>
name|expected
init|=
name|Iterators
operator|.
name|singletonIterator
argument_list|(
name|goldenToad
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSameElements
argument_list|(
name|result
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContains3
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|contains
argument_list|(
literal|"profile/."
argument_list|,
literal|"grass"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|User
argument_list|>
name|expected
init|=
name|Iterators
operator|.
name|singletonIterator
argument_list|(
name|kangaroo
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSameElements
argument_list|(
name|result
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContains4
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|contains
argument_list|(
literal|"profile/@food"
argument_list|,
literal|"grass"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|User
argument_list|>
name|expected
init|=
name|Iterators
operator|.
name|singletonIterator
argument_list|(
name|kangaroo
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSameElements
argument_list|(
name|result
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCondition1
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|and
argument_list|(
name|builder
operator|.
name|eq
argument_list|(
literal|"profile/@cute"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|,
name|builder
operator|.
name|not
argument_list|(
name|builder
operator|.
name|eq
argument_list|(
literal|"@color"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|"black"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|User
argument_list|>
name|expected
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|users
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|User
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|User
name|user
parameter_list|)
block|{
try|try
block|{
name|Value
index|[]
name|cute
init|=
name|user
operator|.
name|getProperty
argument_list|(
literal|"profile/cute"
argument_list|)
decl_stmt|;
name|Value
index|[]
name|black
init|=
name|user
operator|.
name|getProperty
argument_list|(
literal|"color"
argument_list|)
decl_stmt|;
return|return
name|cute
operator|!=
literal|null
operator|&&
name|cute
operator|.
name|length
operator|==
literal|1
operator|&&
name|cute
index|[
literal|0
index|]
operator|.
name|getBoolean
argument_list|()
operator|&&
operator|!
operator|(
name|black
operator|!=
literal|null
operator|&&
name|black
operator|.
name|length
operator|==
literal|1
operator|&&
name|black
index|[
literal|0
index|]
operator|.
name|getString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"black"
argument_list|)
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSameElements
argument_list|(
name|result
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCondition2
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|or
argument_list|(
name|builder
operator|.
name|eq
argument_list|(
literal|"profile/@food"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|"mice"
argument_list|)
argument_list|)
argument_list|,
name|builder
operator|.
name|eq
argument_list|(
literal|"profile/@food"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|"nectar"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|User
argument_list|>
name|expected
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|users
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|User
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|User
name|user
parameter_list|)
block|{
try|try
block|{
name|Value
index|[]
name|food
init|=
name|user
operator|.
name|getProperty
argument_list|(
literal|"profile/food"
argument_list|)
decl_stmt|;
return|return
name|food
operator|!=
literal|null
operator|&&
name|food
operator|.
name|length
operator|==
literal|1
operator|&&
operator|(
name|food
index|[
literal|0
index|]
operator|.
name|getString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"mice"
argument_list|)
operator|||
name|food
index|[
literal|0
index|]
operator|.
name|getString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"nectar"
argument_list|)
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSameElements
argument_list|(
name|result
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImpersonation
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|impersonates
argument_list|(
literal|"jackrabbit"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|User
argument_list|>
name|expected
init|=
name|Iterators
operator|.
name|singletonIterator
argument_list|(
name|elephant
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSameElements
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAdminImpersonation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|adminPrincipalName
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|superuser
operator|.
name|getUserID
argument_list|()
argument_list|)
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|impersonates
argument_list|(
name|adminPrincipalName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|expected
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
name|UserConstants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|,
literal|null
argument_list|,
name|UserManager
operator|.
name|SEARCH_TYPE_USER
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSameElements
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSortOrder1
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|exists
argument_list|(
literal|"@color"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSortOrder
argument_list|(
literal|"@color"
argument_list|,
name|QueryBuilder
operator|.
name|Direction
operator|.
name|DESCENDING
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|prev
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|result
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Authorizable
name|authorizable
init|=
name|result
operator|.
name|next
argument_list|()
decl_stmt|;
name|Value
index|[]
name|color
init|=
name|authorizable
operator|.
name|getProperty
argument_list|(
literal|"color"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|color
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prev
operator|==
literal|null
operator|||
name|prev
operator|.
name|compareToIgnoreCase
argument_list|(
name|color
index|[
literal|0
index|]
operator|.
name|getString
argument_list|()
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|prev
operator|=
name|color
index|[
literal|0
index|]
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSortOrder2
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|exists
argument_list|(
literal|"profile/@weight"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSortOrder
argument_list|(
literal|"profile/@weight"
argument_list|,
name|QueryBuilder
operator|.
name|Direction
operator|.
name|ASCENDING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|prev
init|=
name|Double
operator|.
name|MIN_VALUE
decl_stmt|;
while|while
condition|(
name|result
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Authorizable
name|authorizable
init|=
name|result
operator|.
name|next
argument_list|()
decl_stmt|;
name|Value
index|[]
name|weight
init|=
name|authorizable
operator|.
name|getProperty
argument_list|(
literal|"profile/weight"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|weight
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|weight
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prev
operator|<=
name|weight
index|[
literal|0
index|]
operator|.
name|getDouble
argument_list|()
argument_list|)
expr_stmt|;
name|prev
operator|=
name|weight
index|[
literal|0
index|]
operator|.
name|getDouble
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOffset
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|long
index|[]
name|offsets
init|=
block|{
literal|2
block|,
literal|0
block|,
literal|3
block|,
literal|0
block|,
literal|100000
block|}
decl_stmt|;
name|long
index|[]
name|counts
init|=
block|{
literal|4
block|,
literal|4
block|,
literal|0
block|,
literal|100000
block|,
literal|100000
block|}
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|offsets
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
specifier|final
name|long
name|offset
init|=
name|offsets
index|[
name|k
index|]
decl_stmt|;
specifier|final
name|long
name|count
init|=
name|counts
index|[
name|k
index|]
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setSortOrder
argument_list|(
literal|"profile/@weight"
argument_list|,
name|QueryBuilder
operator|.
name|Direction
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLimit
argument_list|(
name|offset
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|expected
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setSortOrder
argument_list|(
literal|"profile/@weight"
argument_list|,
name|QueryBuilder
operator|.
name|Direction
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|skip
argument_list|(
name|expected
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|expected
argument_list|,
name|result
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetBound
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|User
argument_list|>
name|sortedUsers
init|=
operator|new
name|ArrayList
argument_list|<
name|User
argument_list|>
argument_list|(
name|users
argument_list|)
decl_stmt|;
name|sortedUsers
operator|.
name|removeAll
argument_list|(
name|systemDefined
argument_list|)
expr_stmt|;
comment|// remove system defined users: no @weight
name|Comparator
argument_list|<
name|?
super|super
name|User
argument_list|>
name|comp
init|=
operator|new
name|Comparator
argument_list|<
name|User
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|User
name|user1
parameter_list|,
name|User
name|user2
parameter_list|)
block|{
try|try
block|{
name|Value
index|[]
name|weight1
init|=
name|user1
operator|.
name|getProperty
argument_list|(
literal|"profile/weight"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|weight1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|weight1
operator|.
name|length
argument_list|)
expr_stmt|;
name|Value
index|[]
name|weight2
init|=
name|user2
operator|.
name|getProperty
argument_list|(
literal|"profile/weight"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|weight2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|weight2
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|weight1
index|[
literal|0
index|]
operator|.
name|getDouble
argument_list|()
operator|<
name|weight2
index|[
literal|0
index|]
operator|.
name|getDouble
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
comment|// Make the compiler happy
block|}
block|}
block|}
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedUsers
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|long
index|[]
name|counts
init|=
block|{
literal|4
block|,
literal|0
block|,
literal|100000
block|}
decl_stmt|;
for|for
control|(
specifier|final
name|long
name|count
range|:
name|counts
control|)
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|eq
argument_list|(
literal|"profile/@cute"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSortOrder
argument_list|(
literal|"profile/@weight"
argument_list|,
name|QueryBuilder
operator|.
name|Direction
operator|.
name|ASCENDING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLimit
argument_list|(
name|vf
operator|.
name|createValue
argument_list|(
literal|1000.0
argument_list|)
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|User
argument_list|>
name|expected
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|sortedUsers
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|User
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|User
name|user
parameter_list|)
block|{
try|try
block|{
name|Value
index|[]
name|cute
init|=
name|user
operator|.
name|getProperty
argument_list|(
literal|"profile/cute"
argument_list|)
decl_stmt|;
name|Value
index|[]
name|weight
init|=
name|user
operator|.
name|getProperty
argument_list|(
literal|"profile/weight"
argument_list|)
decl_stmt|;
return|return
name|cute
operator|!=
literal|null
operator|&&
name|cute
operator|.
name|length
operator|==
literal|1
operator|&&
name|cute
index|[
literal|0
index|]
operator|.
name|getBoolean
argument_list|()
operator|&&
name|weight
operator|!=
literal|null
operator|&&
name|weight
operator|.
name|length
operator|==
literal|1
operator|&&
name|weight
index|[
literal|0
index|]
operator|.
name|getDouble
argument_list|()
operator|>
literal|1000.0
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|expected
argument_list|,
name|result
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScopeWithOffset
parameter_list|()
throws|throws
name|RepositoryException
block|{
specifier|final
name|int
name|offset
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|count
init|=
literal|10000
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setScope
argument_list|(
literal|"vertebrates"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSortOrder
argument_list|(
literal|"profile/@weight"
argument_list|,
name|QueryBuilder
operator|.
name|Direction
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLimit
argument_list|(
name|offset
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|expected
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setScope
argument_list|(
literal|"vertebrates"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSortOrder
argument_list|(
literal|"profile/@weight"
argument_list|,
name|QueryBuilder
operator|.
name|Direction
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|skip
argument_list|(
name|expected
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|expected
argument_list|,
name|result
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScopeWithMax
parameter_list|()
throws|throws
name|RepositoryException
block|{
specifier|final
name|int
name|offset
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|count
init|=
literal|22
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setScope
argument_list|(
literal|"vertebrates"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSortOrder
argument_list|(
literal|"profile/@weight"
argument_list|,
name|QueryBuilder
operator|.
name|Direction
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLimit
argument_list|(
name|offset
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|expected
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setScope
argument_list|(
literal|"vertebrates"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSortOrder
argument_list|(
literal|"profile/@weight"
argument_list|,
name|QueryBuilder
operator|.
name|Direction
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertSameElements
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxCount
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|count
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|final
name|long
name|countjr2
init|=
operator|-
literal|1
decl_stmt|;
comment|// in jackrabbit -1 could be used to set no limit
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setSortOrder
argument_list|(
literal|"profile/@weight"
argument_list|,
name|QueryBuilder
operator|.
name|Direction
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLimit
argument_list|(
literal|0
argument_list|,
name|countjr2
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|expected
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setSortOrder
argument_list|(
literal|"profile/@weight"
argument_list|,
name|QueryBuilder
operator|.
name|Direction
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLimit
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|expected
argument_list|,
name|result
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxCountWithScope
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|count
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|final
name|long
name|countjr2
init|=
operator|-
literal|1
decl_stmt|;
comment|// in jackrabbit -1 could be used to set no limit
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setSortOrder
argument_list|(
literal|"profile/@weight"
argument_list|,
name|QueryBuilder
operator|.
name|Direction
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setScope
argument_list|(
literal|"vertebrates"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLimit
argument_list|(
literal|0
argument_list|,
name|countjr2
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|expected
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setSortOrder
argument_list|(
literal|"profile/@weight"
argument_list|,
name|QueryBuilder
operator|.
name|Direction
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setScope
argument_list|(
literal|"vertebrates"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLimit
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|expected
argument_list|,
name|result
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
specifier|static
name|void
name|addMembers
parameter_list|(
name|Group
name|group
parameter_list|,
name|Authorizable
modifier|...
name|authorizables
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|Authorizable
name|authorizable
range|:
name|authorizables
control|)
block|{
name|group
operator|.
name|addMember
argument_list|(
name|authorizable
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Group
name|createGroup
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Group
name|group
init|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
return|return
name|group
return|;
block|}
specifier|private
name|User
name|createUser
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|food
parameter_list|,
name|double
name|weight
parameter_list|,
name|boolean
name|cute
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|User
name|user
init|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|name
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
literal|"profile/food"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
name|food
argument_list|)
argument_list|)
expr_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
literal|"profile/weight"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
name|weight
argument_list|)
argument_list|)
expr_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
literal|"profile/cute"
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
name|cute
argument_list|)
argument_list|)
expr_stmt|;
name|users
operator|.
name|add
argument_list|(
name|user
argument_list|)
expr_stmt|;
return|return
name|user
return|;
block|}
specifier|private
specifier|static
name|void
name|setProperty
parameter_list|(
name|String
name|relPath
parameter_list|,
name|Value
name|value
parameter_list|,
name|Authorizable
modifier|...
name|authorizables
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|Authorizable
name|authorizable
range|:
name|authorizables
control|)
block|{
name|authorizable
operator|.
name|setProperty
argument_list|(
name|relPath
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|assertSameElements
parameter_list|(
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|it1
parameter_list|,
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|it2
parameter_list|)
block|{
name|Set
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|set1
init|=
name|toSet
argument_list|(
name|it1
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|set2
init|=
name|toSet
argument_list|(
name|it2
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|?
super|super
name|T
argument_list|>
name|missing
init|=
operator|new
name|HashSet
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|missing
operator|.
name|addAll
argument_list|(
name|set2
argument_list|)
expr_stmt|;
name|missing
operator|.
name|removeAll
argument_list|(
name|set1
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|?
super|super
name|T
argument_list|>
name|excess
init|=
operator|new
name|HashSet
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|excess
operator|.
name|addAll
argument_list|(
name|set1
argument_list|)
expr_stmt|;
name|excess
operator|.
name|removeAll
argument_list|(
name|set2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|missing
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Missing elements in query result: "
operator|+
name|missing
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|excess
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Excess elements in query result: "
operator|+
name|excess
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Set
argument_list|<
name|T
argument_list|>
name|toSet
parameter_list|(
name|Iterator
argument_list|<
name|T
argument_list|>
name|it
parameter_list|)
block|{
name|Set
argument_list|<
name|T
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|set
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|assertSame
parameter_list|(
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|expected
parameter_list|,
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|actual
parameter_list|,
name|long
name|count
parameter_list|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|count
operator|&&
name|actual
operator|.
name|hasNext
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|expected
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|next
argument_list|()
argument_list|,
name|actual
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|skip
parameter_list|(
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|,
name|long
name|count
parameter_list|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|count
operator|&&
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

