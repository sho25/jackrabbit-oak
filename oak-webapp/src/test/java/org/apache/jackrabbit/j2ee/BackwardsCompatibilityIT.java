begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|j2ee
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFormatException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionHistory
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|derby
operator|.
name|jdbc
operator|.
name|EmbeddedDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|SessionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|config
operator|.
name|RepositoryConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|RepositoryUpgrade
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|BackwardsCompatibilityIT
extends|extends
name|TestCase
block|{
comment|/**      * Logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BackwardsCompatibilityIT
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|void
name|testBackwardsCompatibility
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Force loading of the Derby JDBC driver
operator|new
name|EmbeddedDriver
argument_list|()
expr_stmt|;
name|File
name|target
init|=
operator|new
name|File
argument_list|(
literal|"target/backwards-compatibility-test"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|target
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|source
init|=
operator|new
name|File
argument_list|(
literal|"src/test/resources/compatibility.zip"
argument_list|)
decl_stmt|;
name|unpack
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|dir
range|:
name|target
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Testing backwards compatibility with {}"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|checkJackrabbitRepository
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|NodeStore
name|store
init|=
operator|new
name|SegmentNodeStore
argument_list|()
decl_stmt|;
name|RepositoryUpgrade
operator|.
name|copy
argument_list|(
name|dir
argument_list|,
name|store
argument_list|)
expr_stmt|;
name|checkRepositoryContent
argument_list|(
operator|new
name|Jcr
argument_list|(
operator|new
name|Oak
argument_list|(
name|store
argument_list|)
argument_list|)
operator|.
name|createRepository
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkJackrabbitRepository
parameter_list|(
name|File
name|directory
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|configuration
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
literal|"repository.xml"
argument_list|)
decl_stmt|;
try|try
block|{
name|RepositoryConfig
name|config
init|=
name|RepositoryConfig
operator|.
name|create
argument_list|(
name|configuration
operator|.
name|getPath
argument_list|()
argument_list|,
name|directory
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|RepositoryImpl
name|repository
init|=
name|RepositoryImpl
operator|.
name|create
argument_list|(
name|config
argument_list|)
decl_stmt|;
try|try
block|{
name|checkRepositoryContent
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|repository
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Unable to access repository "
operator|+
name|directory
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkRepositoryContent
parameter_list|(
name|Repository
name|repository
parameter_list|)
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|repository
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|assertTestData
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertTestData
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|Node
name|root
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|hasNode
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|test
init|=
name|root
operator|.
name|getNode
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Node
name|versionable
init|=
name|assertVersionable
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|assertProperties
argument_list|(
name|test
argument_list|,
name|versionable
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|instanceof
name|SessionImpl
condition|)
block|{
comment|// FIXME: Not yet supported by Oak
name|assertVersionableCopy
argument_list|(
name|test
argument_list|,
name|versionable
argument_list|)
expr_stmt|;
block|}
name|assertLock
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|assertUsers
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|private
name|Node
name|assertVersionable
parameter_list|(
name|Node
name|test
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|assertTrue
argument_list|(
name|test
operator|.
name|hasNode
argument_list|(
literal|"versionable"
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|versionable
init|=
name|test
operator|.
name|getNode
argument_list|(
literal|"versionable"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|versionable
operator|.
name|isNodeType
argument_list|(
literal|"nt:myversionable"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|versionable
operator|.
name|isNodeType
argument_list|(
literal|"nt:unstructured"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|versionable
operator|.
name|isNodeType
argument_list|(
literal|"mix:versionable"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|versionable
operator|.
name|isCheckedOut
argument_list|()
argument_list|)
expr_stmt|;
name|VersionHistory
name|history
init|=
name|versionable
operator|.
name|getVersionHistory
argument_list|()
decl_stmt|;
name|Version
name|versionB
init|=
name|versionable
operator|.
name|getBaseVersion
argument_list|()
decl_stmt|;
name|String
index|[]
name|labels
init|=
name|history
operator|.
name|getVersionLabels
argument_list|(
name|versionB
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|labels
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"labelB"
argument_list|,
name|labels
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Version
name|versionA
init|=
name|history
operator|.
name|getVersionByLabel
argument_list|(
literal|"labelA"
argument_list|)
decl_stmt|;
name|versionable
operator|.
name|restore
argument_list|(
name|versionA
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|versionable
operator|.
name|getProperty
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|versionable
operator|.
name|restore
argument_list|(
name|versionB
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"B"
argument_list|,
name|versionable
operator|.
name|getProperty
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|versionable
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|private
name|void
name|assertProperties
parameter_list|(
name|Node
name|test
parameter_list|,
name|Node
name|versionable
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|PathNotFoundException
throws|,
name|ValueFormatException
throws|,
name|IOException
block|{
name|assertTrue
argument_list|(
name|test
operator|.
name|hasNode
argument_list|(
literal|"properties"
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|properties
init|=
name|test
operator|.
name|getNode
argument_list|(
literal|"properties"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|isNodeType
argument_list|(
literal|"nt:unstructured"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"boolean"
argument_list|)
operator|.
name|getBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.123456789
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"double"
argument_list|)
operator|.
name|getDouble
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1234567890
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"long"
argument_list|)
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|reference
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"reference"
argument_list|)
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|reference
operator|.
name|isSame
argument_list|(
name|versionable
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"string"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|Value
index|[]
name|multiple
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"multiple"
argument_list|)
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|multiple
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|multiple
index|[
literal|0
index|]
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|multiple
index|[
literal|1
index|]
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|multiple
index|[
literal|2
index|]
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|calendar
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"date"
argument_list|)
operator|.
name|getDate
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1234567890
argument_list|,
name|calendar
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|stream
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"binary"
argument_list|)
operator|.
name|getStream
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|binary
init|=
operator|new
name|byte
index|[
literal|100
operator|*
literal|1000
index|]
decl_stmt|;
operator|new
name|Random
argument_list|(
literal|1234567890
argument_list|)
operator|.
name|nextBytes
argument_list|(
name|binary
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|binary
argument_list|,
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|stream
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|private
name|void
name|assertVersionableCopy
parameter_list|(
name|Node
name|test
parameter_list|,
name|Node
name|versionable
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|test
operator|.
name|getSession
argument_list|()
operator|.
name|getWorkspace
argument_list|()
operator|.
name|copy
argument_list|(
name|versionable
operator|.
name|getPath
argument_list|()
argument_list|,
name|versionable
operator|.
name|getPath
argument_list|()
operator|+
literal|"-copy"
argument_list|)
expr_stmt|;
name|Node
name|copy
init|=
name|test
operator|.
name|getNode
argument_list|(
name|versionable
operator|.
name|getName
argument_list|()
operator|+
literal|"-copy"
argument_list|)
decl_stmt|;
name|copy
operator|.
name|remove
argument_list|()
expr_stmt|;
name|test
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|assertLock
parameter_list|(
name|Node
name|test
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|lock
init|=
name|test
operator|.
name|getNode
argument_list|(
literal|"lock"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|lock
operator|.
name|isLocked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lock
operator|.
name|hasProperty
argument_list|(
literal|"jcr:lockOwner"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertUsers
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|RepositoryException
block|{     }
specifier|private
name|void
name|unpack
parameter_list|(
name|File
name|archive
parameter_list|,
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|ZipFile
name|zip
init|=
operator|new
name|ZipFile
argument_list|(
name|archive
argument_list|)
decl_stmt|;
try|try
block|{
name|Enumeration
argument_list|<
name|?
extends|extends
name|ZipEntry
argument_list|>
name|entries
init|=
name|zip
operator|.
name|entries
argument_list|()
decl_stmt|;
while|while
condition|(
name|entries
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|ZipEntry
name|entry
init|=
name|entries
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"META-INF"
argument_list|)
condition|)
block|{                 }
elseif|else
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|InputStream
name|input
init|=
name|zip
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
decl_stmt|;
try|try
block|{
name|OutputStream
name|output
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|zip
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

