begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
operator|.
name|STRING
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|ArrayType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CheckpointMBean
import|;
end_import

begin_comment
comment|/**  * Abstract base class for {@code CheckpointMBean} implementations.  * This class provides the basic functionality for converting checkpoints  * into tabular data.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractCheckpointMBean
implements|implements
name|CheckpointMBean
block|{
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|FIELD_NAMES
init|=
operator|new
name|String
index|[]
block|{
literal|"id"
block|,
literal|"created"
block|,
literal|"expires"
block|,
literal|"properties"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|FIELD_DESCRIPTIONS
init|=
name|FIELD_NAMES
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
specifier|static
specifier|final
name|OpenType
index|[]
name|FIELD_TYPES
init|=
operator|new
name|OpenType
index|[]
block|{
name|STRING
block|,
name|STRING
block|,
name|STRING
block|,
name|createStringArrayType
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
name|ArrayType
argument_list|<
name|String
argument_list|>
name|createStringArrayType
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|ArrayType
argument_list|<
name|String
argument_list|>
argument_list|(
name|STRING
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|CompositeType
name|createCompositeType
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|CompositeType
argument_list|(
name|getTypeName
argument_list|()
argument_list|,
literal|"Checkpoints"
argument_list|,
name|FIELD_NAMES
argument_list|,
name|FIELD_DESCRIPTIONS
argument_list|,
name|FIELD_TYPES
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Called to collect the tabular data for the checkpoints.      * Each checkpoint should be represented by a single row in {@code tab}.      * Implementors should use the {@link #toCompositeData} utility method for converting      * the individual fields associated with a checkpoint into the correct composite data      * format.      *      * @param tab      * @throws OpenDataException      */
specifier|protected
specifier|abstract
name|void
name|collectCheckpoints
parameter_list|(
name|TabularDataSupport
name|tab
parameter_list|)
throws|throws
name|OpenDataException
function_decl|;
annotation|@
name|Override
specifier|public
name|TabularData
name|listCheckpoints
parameter_list|()
block|{
try|try
block|{
name|TabularDataSupport
name|tab
init|=
operator|new
name|TabularDataSupport
argument_list|(
operator|new
name|TabularType
argument_list|(
name|getTypeName
argument_list|()
argument_list|,
literal|"Checkpoints"
argument_list|,
name|createCompositeType
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"id"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|collectCheckpoints
argument_list|(
name|tab
argument_list|)
expr_stmt|;
return|return
name|tab
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|abstract
name|long
name|getOldestCheckpointCreationTimestamp
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|Date
name|getOldestCheckpointCreationDate
parameter_list|()
block|{
return|return
operator|new
name|Date
argument_list|(
name|getOldestCheckpointCreationTimestamp
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Utility method for converting the fields associated with a checkpoint to      * the composite data format.      *      * @param id      id of the checkpoint      * @param created creation data of the checkpoint      * @param expires expiry data of the checkpoint      * @return composite data representation of the fields associated with the      * checkpoint      * @throws OpenDataException      */
specifier|protected
specifier|final
name|CompositeDataSupport
name|toCompositeData
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|created
parameter_list|,
name|String
name|expires
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
throws|throws
name|OpenDataException
block|{
return|return
operator|new
name|CompositeDataSupport
argument_list|(
name|createCompositeType
argument_list|()
argument_list|,
name|FIELD_NAMES
argument_list|,
operator|new
name|Object
index|[]
block|{
name|id
block|,
name|created
block|,
name|expires
block|,
name|toArray
argument_list|(
name|properties
argument_list|)
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|toArray
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|String
index|[]
name|value
init|=
operator|new
name|String
index|[
name|properties
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|value
index|[
name|k
operator|++
index|]
operator|=
name|p
operator|.
name|getKey
argument_list|()
operator|+
literal|'='
operator|+
name|p
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
specifier|private
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

