begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|standalone
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|connect
operator|.
name|launch
operator|.
name|PojoServiceRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|http
operator|.
name|proxy
operator|.
name|ProxyListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|http
operator|.
name|proxy
operator|.
name|ProxyServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|webconsole
operator|.
name|WebConsoleSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|osgi
operator|.
name|ServiceRegistryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|web
operator|.
name|servlet
operator|.
name|ServletListenerRegistrationBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|web
operator|.
name|servlet
operator|.
name|ServletRegistrationBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * Integrates the Felix WebConsole support with servlet container. The console is  * accessible at /osgi/system/console/  */
end_comment

begin_class
annotation|@
name|Configuration
specifier|public
class|class
name|WebConsoleSupport
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Adding a dependency to ensure that by the time servlet      * is registered BundleContext is set in ServletContext      */
annotation|@
name|Autowired
specifier|private
name|Repository
name|repository
decl_stmt|;
annotation|@
name|Autowired
specifier|private
name|ApplicationContext
name|context
decl_stmt|;
annotation|@
name|PostConstruct
specifier|private
name|void
name|postConstruct
parameter_list|()
throws|throws
name|Exception
block|{
name|PojoServiceRegistry
name|reg
init|=
operator|(
operator|(
name|ServiceRegistryProvider
operator|)
name|repository
operator|)
operator|.
name|getServiceRegistry
argument_list|()
decl_stmt|;
comment|//Configure repository backed SecurityProvider
name|reg
operator|.
name|registerService
argument_list|(
name|WebConsoleSecurityProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RepositorySecurityProvider
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//Expose the Spring Application context to Script Console access
name|reg
operator|.
name|registerService
argument_list|(
name|ApplicationContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Bean
specifier|public
name|ServletRegistrationBean
name|felixProxyServlet
parameter_list|()
block|{
return|return
operator|new
name|ServletRegistrationBean
argument_list|(
operator|new
name|ProxyServlet
argument_list|()
argument_list|,
literal|"/osgi/*"
argument_list|)
return|;
block|}
annotation|@
name|Bean
specifier|public
name|ServletListenerRegistrationBean
name|felixListener
parameter_list|()
block|{
return|return
operator|new
name|ServletListenerRegistrationBean
argument_list|<
name|ProxyListener
argument_list|>
argument_list|(
operator|new
name|ProxyListener
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * A simple WebConsoleSecurityProvider implementation which only allows      * repository admin user to perform login      */
specifier|private
class|class
name|RepositorySecurityProvider
implements|implements
name|WebConsoleSecurityProvider
block|{
annotation|@
name|Override
specifier|public
name|Object
name|authenticate
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|password
parameter_list|)
block|{
specifier|final
name|Credentials
name|creds
init|=
operator|new
name|SimpleCredentials
argument_list|(
name|userName
argument_list|,
operator|(
name|password
operator|==
literal|null
operator|)
condition|?
operator|new
name|char
index|[
literal|0
index|]
else|:
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
try|try
block|{
name|session
operator|=
name|repository
operator|.
name|login
argument_list|(
name|creds
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"admin"
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
condition|)
block|{
return|return
name|userName
return|;
block|}
block|}
catch|catch
parameter_list|(
name|LoginException
name|re
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"authenticate: User {} failed to authenticate with the repository "
operator|+
literal|"for Web Console access"
argument_list|,
name|userName
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|re
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"authenticate: Generic problem trying grant User {} access to the Web Console"
argument_list|,
name|userName
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|authorize
parameter_list|(
name|Object
name|user
parameter_list|,
name|String
name|role
parameter_list|)
block|{
comment|//No fine grained access control for now
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

