begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|queue
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|AzureSegmentArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|SegmentWriteQueueTest
block|{
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_DATA
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
specifier|private
name|SegmentWriteQueue
name|queue
decl_stmt|;
annotation|@
name|After
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|queue
operator|!=
literal|null
condition|)
block|{
name|queue
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Set
argument_list|<
name|UUID
argument_list|>
name|added
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|Semaphore
name|semaphore
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|queue
operator|=
operator|new
name|SegmentWriteQueue
argument_list|(
parameter_list|(
name|tarEntry
parameter_list|,
name|data
parameter_list|,
name|offset
parameter_list|,
name|size
parameter_list|)
lambda|->
block|{
try|try
block|{
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
name|added
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
name|tarEntry
operator|.
name|getMsb
argument_list|()
argument_list|,
name|tarEntry
operator|.
name|getLsb
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|queue
operator|.
name|addToQueue
argument_list|(
name|tarEntry
argument_list|(
name|i
argument_list|)
argument_list|,
name|EMPTY_DATA
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
literal|"Segments should be available for read"
argument_list|,
name|queue
operator|.
name|read
argument_list|(
name|uuid
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Queue shouldn't be empty"
argument_list|,
name|queue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|semaphore
operator|.
name|release
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"There should be 10 segments consumed"
argument_list|,
literal|10
argument_list|,
name|added
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"Missing consumed segment"
argument_list|,
name|added
operator|.
name|contains
argument_list|(
name|uuid
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
specifier|public
name|void
name|testFlush
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Set
argument_list|<
name|UUID
argument_list|>
name|added
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|Semaphore
name|semaphore
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|queue
operator|=
operator|new
name|SegmentWriteQueue
argument_list|(
parameter_list|(
name|tarEntry
parameter_list|,
name|data
parameter_list|,
name|offset
parameter_list|,
name|size
parameter_list|)
lambda|->
block|{
try|try
block|{
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
name|added
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
name|tarEntry
operator|.
name|getMsb
argument_list|()
argument_list|,
name|tarEntry
operator|.
name|getLsb
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|queue
operator|.
name|addToQueue
argument_list|(
name|tarEntry
argument_list|(
name|i
argument_list|)
argument_list|,
name|EMPTY_DATA
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|AtomicBoolean
name|flushFinished
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|UUID
argument_list|>
name|addedAfterFlush
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|queue
operator|.
name|flush
argument_list|()
expr_stmt|;
name|flushFinished
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addedAfterFlush
operator|.
name|addAll
argument_list|(
name|added
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Flush should be blocked"
argument_list|,
name|flushFinished
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|addFinished
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|queue
operator|.
name|addToQueue
argument_list|(
name|tarEntry
argument_list|(
literal|10
argument_list|)
argument_list|,
name|EMPTY_DATA
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|addFinished
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Adding segments should be blocked until the flush is finished"
argument_list|,
name|addFinished
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|semaphore
operator|.
name|release
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|addFinished
operator|.
name|get
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Flush should be finished once the "
argument_list|,
name|flushFinished
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Adding segments should be blocked until the flush is finished"
argument_list|,
name|addFinished
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|addedAfterFlush
operator|.
name|contains
argument_list|(
name|uuid
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testClose
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|queue
operator|=
operator|new
name|SegmentWriteQueue
argument_list|(
parameter_list|(
name|tarEntry
parameter_list|,
name|data
parameter_list|,
name|offset
parameter_list|,
name|size
parameter_list|)
lambda|->
block|{}
argument_list|)
expr_stmt|;
name|queue
operator|.
name|close
argument_list|()
expr_stmt|;
name|queue
operator|.
name|addToQueue
argument_list|(
name|tarEntry
argument_list|(
literal|10
argument_list|)
argument_list|,
name|EMPTY_DATA
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecoveryMode
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Set
argument_list|<
name|UUID
argument_list|>
name|added
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|Semaphore
name|semaphore
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|doBreak
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|writeAttempts
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|queue
operator|=
operator|new
name|SegmentWriteQueue
argument_list|(
parameter_list|(
name|tarEntry
parameter_list|,
name|data
parameter_list|,
name|offset
parameter_list|,
name|size
parameter_list|)
lambda|->
block|{
name|writeAttempts
operator|.
name|add
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
if|if
condition|(
name|doBreak
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
name|added
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
name|tarEntry
operator|.
name|getMsb
argument_list|()
argument_list|,
name|tarEntry
operator|.
name|getLsb
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|queue
operator|.
name|addToQueue
argument_list|(
name|tarEntry
argument_list|(
name|i
argument_list|)
argument_list|,
name|EMPTY_DATA
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|semaphore
operator|.
name|release
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queue
operator|.
name|isBroken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|queue
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// the 10th segment is handled by the recovery thread
name|writeAttempts
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
name|writeAttempts
operator|.
name|size
argument_list|()
operator|<
literal|5
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|long
name|lastAttempt
init|=
name|writeAttempts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|long
name|delay
init|=
name|writeAttempts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|-
name|lastAttempt
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The delay between attempts to persist segment should be larger than 1s. Actual: "
operator|+
name|delay
argument_list|,
name|delay
operator|>=
literal|1000
argument_list|)
expr_stmt|;
name|lastAttempt
operator|=
name|writeAttempts
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|AtomicBoolean
name|addFinished
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|queue
operator|.
name|addToQueue
argument_list|(
name|tarEntry
argument_list|(
literal|10
argument_list|)
argument_list|,
name|EMPTY_DATA
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|addFinished
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Adding segments should be blocked until the recovery mode is finished"
argument_list|,
name|addFinished
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|doBreak
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
while|while
condition|(
name|queue
operator|.
name|isBroken
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Queue shouldn't be broken anymore"
argument_list|,
name|queue
operator|.
name|isBroken
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|added
operator|.
name|size
argument_list|()
operator|<
literal|11
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"All segments should be consumed"
argument_list|,
literal|11
argument_list|,
name|added
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|11
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"All segments should be consumed"
argument_list|,
name|added
operator|.
name|contains
argument_list|(
name|uuid
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|i
init|=
name|writeAttempts
operator|.
name|size
argument_list|()
operator|-
literal|10
decl_stmt|;
name|lastAttempt
operator|=
name|writeAttempts
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|writeAttempts
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|long
name|delay
init|=
name|writeAttempts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|-
name|lastAttempt
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Segments should be persisted immediately"
argument_list|,
name|delay
operator|<
literal|1000
argument_list|)
expr_stmt|;
name|lastAttempt
operator|=
name|writeAttempts
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|AzureSegmentArchiveEntry
name|tarEntry
parameter_list|(
name|long
name|i
parameter_list|)
block|{
return|return
operator|new
name|AzureSegmentArchiveEntry
argument_list|(
literal|0
argument_list|,
name|i
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|UUID
name|uuid
parameter_list|(
name|long
name|i
parameter_list|)
block|{
return|return
operator|new
name|UUID
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
return|;
block|}
block|}
end_class

end_unit

