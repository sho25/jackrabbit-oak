begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|JcrNameParser
operator|.
name|Listener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * All path in the Oak API have the following form  *<p>  *<pre>  * PATH    := ("/" ELEMENT)* | ELEMENT ("/" ELEMENT)*  * ELEMENT := [PREFIX ":"] NAME  * PREFIX  := non empty string not containing ":" and "/"  * NAME    := non empty string not containing ":" and "/" TODO: check whether this is correct  *</pre>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Paths
block|{
specifier|private
name|Paths
parameter_list|()
block|{}
specifier|public
specifier|static
name|String
name|toOakName
parameter_list|(
name|String
name|name
parameter_list|,
specifier|final
name|NameMapper
name|mapper
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|element
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Listener
name|listener
init|=
operator|new
name|JcrNameParser
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|error
parameter_list|(
name|String
name|message
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|message
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|name
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|p
init|=
name|mapper
operator|.
name|getOakName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|element
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|JcrNameParser
operator|.
name|parse
argument_list|(
name|name
argument_list|,
name|listener
argument_list|)
expr_stmt|;
return|return
name|element
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|toOakPath
parameter_list|(
name|String
name|jcrPath
parameter_list|,
specifier|final
name|NameMapper
name|mapper
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|elements
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"/"
operator|.
name|equals
argument_list|(
name|jcrPath
argument_list|)
condition|)
block|{
comment|// avoid the need to special case the root path later on
return|return
literal|"/"
return|;
block|}
name|JcrPathParser
operator|.
name|Listener
name|listener
init|=
operator|new
name|JcrPathParser
operator|.
name|Listener
argument_list|()
block|{
comment|// TODO: replace RuntimeException by something that oak-jcr can deal with (e.g. ValueFactory)
annotation|@
name|Override
specifier|public
name|void
name|root
parameter_list|()
block|{
if|if
condition|(
operator|!
name|elements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"/ on non-empty path"
argument_list|)
throw|;
block|}
name|elements
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|identifier
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
if|if
condition|(
operator|!
name|elements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"[identifier] on non-empty path"
argument_list|)
throw|;
block|}
name|elements
operator|.
name|add
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
comment|// todo resolve identifier
comment|// todo seal
block|}
annotation|@
name|Override
specifier|public
name|void
name|current
parameter_list|()
block|{
comment|// nothing to do here
block|}
annotation|@
name|Override
specifier|public
name|void
name|parent
parameter_list|()
block|{
if|if
condition|(
name|elements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|".. of empty path"
argument_list|)
throw|;
block|}
name|elements
operator|.
name|remove
argument_list|(
name|elements
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|index
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"index> 1"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|error
parameter_list|(
name|String
name|message
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|message
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|name
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|p
init|=
name|mapper
operator|.
name|getOakName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|elements
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|JcrPathParser
operator|.
name|parse
argument_list|(
name|jcrPath
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|StringBuilder
name|oakPath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|element
range|:
name|elements
control|)
block|{
if|if
condition|(
name|element
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// root
name|oakPath
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|oakPath
operator|.
name|append
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|oakPath
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
block|}
comment|// root path is special-cased early on so it does not need to
comment|// be considered here
name|oakPath
operator|.
name|deleteCharAt
argument_list|(
name|oakPath
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|oakPath
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|toJcrPath
parameter_list|(
name|String
name|oakPath
parameter_list|,
specifier|final
name|NameMapper
name|mapper
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|elements
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"/"
operator|.
name|equals
argument_list|(
name|oakPath
argument_list|)
condition|)
block|{
comment|// avoid the need to special case the root path later on
return|return
literal|"/"
return|;
block|}
name|JcrPathParser
operator|.
name|Listener
name|listener
init|=
operator|new
name|JcrPathParser
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|root
parameter_list|()
block|{
if|if
condition|(
operator|!
name|elements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"/ on non-empty path"
argument_list|)
throw|;
block|}
name|elements
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|identifier
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
if|if
condition|(
operator|!
name|elements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"[identifier] on non-empty path"
argument_list|)
throw|;
block|}
name|elements
operator|.
name|add
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
comment|// todo resolve identifier
comment|// todo seal
block|}
annotation|@
name|Override
specifier|public
name|void
name|current
parameter_list|()
block|{
comment|// nothing to do here
block|}
annotation|@
name|Override
specifier|public
name|void
name|parent
parameter_list|()
block|{
if|if
condition|(
name|elements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|".. of empty path"
argument_list|)
throw|;
block|}
name|elements
operator|.
name|remove
argument_list|(
name|elements
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|index
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"index> 1"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|error
parameter_list|(
name|String
name|message
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|message
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|name
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|p
init|=
name|mapper
operator|.
name|getJcrName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|elements
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|JcrPathParser
operator|.
name|parse
argument_list|(
name|oakPath
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|StringBuilder
name|jcrPath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|element
range|:
name|elements
control|)
block|{
if|if
condition|(
name|element
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// root
name|jcrPath
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jcrPath
operator|.
name|append
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|jcrPath
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
block|}
name|jcrPath
operator|.
name|deleteCharAt
argument_list|(
name|jcrPath
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|jcrPath
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

