begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import

begin_comment
comment|/**  * A very simple estimator for no. of entries in the index using least mean square.  */
end_comment

begin_class
class|class
name|LMSEstimator
block|{
specifier|private
name|double
index|[]
name|weights
decl_stmt|;
specifier|public
name|LMSEstimator
parameter_list|(
name|double
index|[]
name|weights
parameter_list|)
block|{
name|this
operator|.
name|weights
operator|=
name|weights
expr_stmt|;
block|}
specifier|public
name|LMSEstimator
parameter_list|()
block|{
name|this
operator|.
name|weights
operator|=
operator|new
name|double
index|[
literal|5
index|]
expr_stmt|;
block|}
specifier|synchronized
name|void
name|update
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|SolrDocumentList
name|docs
parameter_list|)
block|{
name|double
index|[]
name|updatedWeights
init|=
operator|new
name|double
index|[
name|weights
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|updatedWeights
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|double
name|errors
init|=
operator|(
name|docs
operator|.
name|getNumFound
argument_list|()
operator|-
name|estimate
argument_list|(
name|filter
argument_list|)
operator|)
operator|*
name|getInput
argument_list|(
name|filter
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|updatedWeights
index|[
name|i
index|]
operator|=
name|weights
index|[
name|i
index|]
operator|+
literal|0.03
operator|*
name|errors
expr_stmt|;
block|}
comment|// weights updated
name|weights
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|updatedWeights
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
name|long
name|estimate
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
name|long
name|estimatedEntryCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|estimatedEntryCount
operator|+=
name|weights
index|[
name|i
index|]
operator|*
name|getInput
argument_list|(
name|filter
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|estimatedEntryCount
operator|+
literal|1
return|;
comment|// smoothing
block|}
specifier|private
name|long
name|getInput
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|int
name|i
parameter_list|)
block|{
assert|assert
name|i
operator|<
literal|5
assert|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
return|return
name|filter
operator|.
name|getPropertyRestrictions
argument_list|()
operator|!=
literal|null
condition|?
name|filter
operator|.
name|getPropertyRestrictions
argument_list|()
operator|.
name|size
argument_list|()
else|:
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
return|return
name|filter
operator|.
name|containsNativeConstraint
argument_list|()
condition|?
literal|1
else|:
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|2
condition|)
block|{
return|return
name|filter
operator|.
name|getPathRestriction
argument_list|()
operator|!=
literal|null
condition|?
name|filter
operator|.
name|getPathRestriction
argument_list|()
operator|.
name|ordinal
argument_list|()
else|:
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|3
condition|)
block|{
return|return
name|filter
operator|.
name|getPathRestriction
argument_list|()
operator|!=
literal|null
condition|?
name|filter
operator|.
name|getPathRestriction
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
operator|.
name|length
else|:
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|4
condition|)
block|{
return|return
name|filter
operator|.
name|getFullTextConstraint
argument_list|()
operator|!=
literal|null
condition|?
name|filter
operator|.
name|getFullTextConstraint
argument_list|()
operator|.
name|getPrecedence
argument_list|()
else|:
literal|0
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

