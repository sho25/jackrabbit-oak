begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_class
class|class
name|TarFile
block|{
comment|/** The tar file block size. */
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|512
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ZERO_BYTES
init|=
operator|new
name|byte
index|[
name|BLOCK_SIZE
index|]
decl_stmt|;
specifier|private
specifier|static
class|class
name|Location
block|{
name|int
name|offset
decl_stmt|;
name|int
name|size
decl_stmt|;
name|Location
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|File
name|file
decl_stmt|;
specifier|private
specifier|final
name|FileAccess
name|access
decl_stmt|;
specifier|private
name|int
name|position
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxFileSize
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|UUID
argument_list|,
name|Location
argument_list|>
name|entries
init|=
name|newConcurrentMap
argument_list|()
decl_stmt|;
name|TarFile
parameter_list|(
name|File
name|file
parameter_list|,
name|int
name|maxFileSize
parameter_list|,
name|boolean
name|memoryMapping
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|len
init|=
name|file
operator|.
name|length
argument_list|()
decl_stmt|;
name|checkState
argument_list|(
name|len
operator|<=
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxFileSize
operator|=
name|Math
operator|.
name|max
argument_list|(
operator|(
name|int
operator|)
name|len
argument_list|,
name|maxFileSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
if|if
condition|(
name|memoryMapping
condition|)
block|{
name|this
operator|.
name|access
operator|=
operator|new
name|MappedAccess
argument_list|(
name|file
argument_list|,
name|this
operator|.
name|maxFileSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|access
operator|=
operator|new
name|RandomAccess
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|position
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|position
operator|+
name|BLOCK_SIZE
operator|<=
name|len
condition|)
block|{
comment|// read the tar header block
name|ByteBuffer
name|buffer
init|=
name|this
operator|.
name|access
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|readString
argument_list|(
name|buffer
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|position
argument_list|(
literal|124
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|readNumber
argument_list|(
name|buffer
argument_list|,
literal|12
argument_list|)
decl_stmt|;
comment|// TODO: verify the checksum, magic, etc.?
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
operator|&&
name|size
operator|==
literal|0
condition|)
block|{
break|break;
comment|// no more entries in this file
block|}
try|try
block|{
name|UUID
name|id
init|=
name|UUID
operator|.
name|fromString
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|entries
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|Location
argument_list|(
name|position
operator|+
name|BLOCK_SIZE
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected tar entry: "
operator|+
name|name
argument_list|)
throw|;
block|}
name|position
operator|+=
operator|(
literal|1
operator|+
operator|(
name|size
operator|+
name|BLOCK_SIZE
operator|-
literal|1
operator|)
operator|/
name|BLOCK_SIZE
operator|)
operator|*
name|BLOCK_SIZE
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|UUID
argument_list|>
name|getUUIDs
parameter_list|()
block|{
return|return
name|entries
operator|.
name|keySet
argument_list|()
return|;
block|}
name|ByteBuffer
name|readEntry
parameter_list|(
name|UUID
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|Location
name|location
init|=
name|entries
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
return|return
name|access
operator|.
name|read
argument_list|(
name|location
operator|.
name|offset
argument_list|,
name|location
operator|.
name|size
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|synchronized
name|boolean
name|writeEntry
parameter_list|(
name|UUID
name|id
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|position
operator|+
name|BLOCK_SIZE
operator|+
name|size
operator|>
name|maxFileSize
condition|)
block|{
return|return
literal|false
return|;
block|}
name|byte
index|[]
name|header
init|=
operator|new
name|byte
index|[
name|BLOCK_SIZE
index|]
decl_stmt|;
comment|// File name
name|byte
index|[]
name|n
init|=
name|id
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|n
argument_list|,
literal|0
argument_list|,
name|header
argument_list|,
literal|0
argument_list|,
name|n
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// File mode
name|System
operator|.
name|arraycopy
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%07o"
argument_list|,
literal|0400
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
literal|0
argument_list|,
name|header
argument_list|,
literal|100
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// User's numeric user ID
name|System
operator|.
name|arraycopy
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%07o"
argument_list|,
literal|0
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
literal|0
argument_list|,
name|header
argument_list|,
literal|108
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// Group's numeric user ID
name|System
operator|.
name|arraycopy
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%07o"
argument_list|,
literal|0
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
literal|0
argument_list|,
name|header
argument_list|,
literal|116
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// File size in bytes (octal basis)
name|System
operator|.
name|arraycopy
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%011o"
argument_list|,
name|size
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
literal|0
argument_list|,
name|header
argument_list|,
literal|124
argument_list|,
literal|11
argument_list|)
expr_stmt|;
comment|// Last modification time in numeric Unix time format (octal)
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%011o"
argument_list|,
name|time
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
literal|0
argument_list|,
name|header
argument_list|,
literal|136
argument_list|,
literal|11
argument_list|)
expr_stmt|;
comment|// Checksum for header record
name|System
operator|.
name|arraycopy
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|}
argument_list|,
literal|0
argument_list|,
name|header
argument_list|,
literal|148
argument_list|,
literal|8
argument_list|)
expr_stmt|;
comment|// Type flag
name|header
index|[
literal|156
index|]
operator|=
literal|'0'
expr_stmt|;
comment|// Compute checksum
name|int
name|checksum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|header
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|checksum
operator|+=
name|header
index|[
name|i
index|]
operator|&
literal|0xff
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%06o"
argument_list|,
name|checksum
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
literal|0
argument_list|,
name|header
argument_list|,
literal|148
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|header
index|[
literal|154
index|]
operator|=
literal|0
expr_stmt|;
name|access
operator|.
name|write
argument_list|(
name|position
argument_list|,
name|header
argument_list|,
literal|0
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|position
operator|+=
name|BLOCK_SIZE
expr_stmt|;
name|access
operator|.
name|write
argument_list|(
name|position
argument_list|,
name|b
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|entries
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|Location
argument_list|(
name|position
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|position
operator|+=
name|size
expr_stmt|;
name|int
name|padding
init|=
name|BLOCK_SIZE
operator|-
name|position
operator|%
name|BLOCK_SIZE
decl_stmt|;
if|if
condition|(
name|padding
operator|<
name|BLOCK_SIZE
condition|)
block|{
name|access
operator|.
name|write
argument_list|(
name|position
argument_list|,
name|ZERO_BYTES
argument_list|,
literal|0
argument_list|,
name|padding
argument_list|)
expr_stmt|;
name|position
operator|+=
name|padding
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|access
operator|.
name|flush
argument_list|()
expr_stmt|;
name|access
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|readString
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|fieldSize
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|fieldSize
index|]
decl_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|n
operator|<
name|fieldSize
operator|&&
name|b
index|[
name|n
index|]
operator|!=
literal|0
condition|)
block|{
name|n
operator|++
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|n
argument_list|,
name|UTF_8
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|readNumber
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|fieldSize
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|fieldSize
index|]
decl_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|int
name|number
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldSize
condition|;
name|i
operator|++
control|)
block|{
name|int
name|digit
init|=
name|b
index|[
name|i
index|]
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
literal|'0'
operator|<=
name|digit
operator|&&
name|digit
operator|<=
literal|'7'
condition|)
block|{
name|number
operator|=
name|number
operator|*
literal|8
operator|+
name|digit
operator|-
literal|'0'
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|number
return|;
block|}
comment|//------------------------------------------------------------< Object>--
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|file
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

