begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|ReadOnlyTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|CompiledPermissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * PermissionValidator... TODO  */
end_comment

begin_class
specifier|public
class|class
name|PermissionValidator
implements|implements
name|Validator
block|{
comment|/* TODO      * - special permissions for protected items (versioning, access control, etc.)      * - Renaming nodes or Move with same parent are reflected as remove+add -> needs special handling      * - review usage of OAK_CHILD_ORDER property (in particular if the property was removed      *      */
specifier|private
specifier|final
name|CompiledPermissions
name|compiledPermissions
decl_stmt|;
specifier|private
specifier|final
name|ReadOnlyTree
name|parentBefore
decl_stmt|;
specifier|private
specifier|final
name|ReadOnlyTree
name|parentAfter
decl_stmt|;
name|PermissionValidator
parameter_list|(
name|CompiledPermissions
name|compiledPermissions
parameter_list|,
name|ReadOnlyTree
name|parentBefore
parameter_list|,
name|ReadOnlyTree
name|parentAfter
parameter_list|)
block|{
name|this
operator|.
name|compiledPermissions
operator|=
name|compiledPermissions
expr_stmt|;
name|this
operator|.
name|parentBefore
operator|=
name|parentBefore
expr_stmt|;
name|this
operator|.
name|parentAfter
operator|=
name|parentAfter
expr_stmt|;
block|}
comment|//----------------------------------------------------------< Validator>---
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|int
name|permissions
init|=
name|getPermissions
argument_list|(
name|after
argument_list|,
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|)
decl_stmt|;
name|checkPermissions
argument_list|(
name|getPath
argument_list|(
name|after
argument_list|)
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|int
name|permissions
init|=
name|getPermissions
argument_list|(
name|after
argument_list|,
name|Permissions
operator|.
name|MODIFY_PROPERTY
argument_list|)
decl_stmt|;
name|checkPermissions
argument_list|(
name|getPath
argument_list|(
name|after
argument_list|)
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|int
name|permissions
init|=
name|getPermissions
argument_list|(
name|before
argument_list|,
name|Permissions
operator|.
name|REMOVE_PROPERTY
argument_list|)
decl_stmt|;
name|checkPermissions
argument_list|(
name|getPath
argument_list|(
name|before
argument_list|)
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|ReadOnlyTree
name|child
init|=
operator|new
name|ReadOnlyTree
argument_list|(
name|parentAfter
argument_list|,
name|name
argument_list|,
name|after
argument_list|)
decl_stmt|;
name|int
name|permissions
init|=
name|getPermissions
argument_list|(
name|child
argument_list|,
name|Permissions
operator|.
name|ADD_NODE
argument_list|)
decl_stmt|;
name|checkPermissions
argument_list|(
name|child
operator|.
name|getPath
argument_list|()
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
return|return
operator|new
name|PermissionValidator
argument_list|(
name|compiledPermissions
argument_list|,
literal|null
argument_list|,
name|child
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|ReadOnlyTree
name|childBefore
init|=
operator|new
name|ReadOnlyTree
argument_list|(
name|parentBefore
argument_list|,
name|name
argument_list|,
name|before
argument_list|)
decl_stmt|;
name|ReadOnlyTree
name|childAfter
init|=
operator|new
name|ReadOnlyTree
argument_list|(
name|parentAfter
argument_list|,
name|name
argument_list|,
name|after
argument_list|)
decl_stmt|;
comment|// TODO
return|return
operator|new
name|PermissionValidator
argument_list|(
name|compiledPermissions
argument_list|,
name|childBefore
argument_list|,
name|childAfter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|ReadOnlyTree
name|child
init|=
operator|new
name|ReadOnlyTree
argument_list|(
name|parentBefore
argument_list|,
name|name
argument_list|,
name|before
argument_list|)
decl_stmt|;
name|int
name|permissions
init|=
name|getPermissions
argument_list|(
name|child
argument_list|,
name|Permissions
operator|.
name|REMOVE_NODE
argument_list|)
decl_stmt|;
name|checkPermissions
argument_list|(
name|child
operator|.
name|getPath
argument_list|()
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
return|return
operator|new
name|PermissionValidator
argument_list|(
name|compiledPermissions
argument_list|,
name|child
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
name|void
name|checkPermissions
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|permissions
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
operator|!
name|compiledPermissions
operator|.
name|isGranted
argument_list|(
name|path
argument_list|,
name|permissions
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
operator|new
name|AccessDeniedException
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|int
name|getPermissions
parameter_list|(
name|PropertyState
name|property
parameter_list|,
name|int
name|defaultPermission
parameter_list|)
block|{
if|if
condition|(
name|isProtected
argument_list|(
name|property
argument_list|)
condition|)
block|{
comment|// TODO: identify specific permission depending on type of protection
comment|// - access controlled property
comment|// - lock property
comment|// - version property
comment|// - mixinType/primaryType -> nt-management permission
comment|// - node type definition -> nt-definition-management
comment|// - namespace definition -> namespace management
comment|// - privilege -> privilege management
comment|// - user/group property -> user management
return|return
name|Permissions
operator|.
name|NO_PERMISSION
return|;
block|}
elseif|else
if|if
condition|(
name|PropertyState
operator|.
name|OAK_CHILD_ORDER
operator|.
name|equals
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Permissions
operator|.
name|MODIFY_CHILD_NODE_COLLECTION
return|;
block|}
else|else
block|{
return|return
name|defaultPermission
return|;
block|}
block|}
specifier|private
name|int
name|getPermissions
parameter_list|(
name|ReadOnlyTree
name|tree
parameter_list|,
name|int
name|defaultPermissions
parameter_list|)
block|{
if|if
condition|(
name|isProtected
argument_list|(
name|tree
argument_list|)
condition|)
block|{
comment|// TODO: identify specific permission depending on type of protection
return|return
name|Permissions
operator|.
name|NO_PERMISSION
return|;
block|}
else|else
block|{
return|return
name|defaultPermissions
return|;
block|}
block|}
specifier|private
name|boolean
name|isProtected
parameter_list|(
name|PropertyState
name|property
parameter_list|)
block|{
comment|// TODO
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isProtected
parameter_list|(
name|ReadOnlyTree
name|tree
parameter_list|)
block|{
comment|// TODO
return|return
literal|false
return|;
block|}
specifier|private
name|String
name|getPath
parameter_list|(
name|PropertyState
name|property
parameter_list|)
block|{
name|String
name|parentPath
init|=
operator|(
name|parentAfter
operator|!=
literal|null
operator|)
condition|?
name|parentAfter
operator|.
name|getPath
argument_list|()
else|:
name|parentBefore
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
name|PathUtils
operator|.
name|concat
argument_list|(
name|parentPath
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

