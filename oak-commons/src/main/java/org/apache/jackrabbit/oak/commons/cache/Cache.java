begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_class
specifier|public
class|class
name|Cache
parameter_list|<
name|K
parameter_list|,
name|V
extends|extends
name|Cache
operator|.
name|Value
parameter_list|>
block|{
name|int
name|maxMemoryBytes
decl_stmt|;
name|AtomicInteger
name|memoryUsed
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Backend
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|backend
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
literal|1024
argument_list|,
literal|0.75f
argument_list|,
literal|true
argument_list|)
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|eldest
parameter_list|)
block|{
if|if
condition|(
name|memoryUsed
operator|.
name|get
argument_list|()
operator|<
name|maxMemoryBytes
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|memory
init|=
name|eldest
operator|.
name|getValue
argument_list|()
operator|.
name|getMemory
argument_list|()
decl_stmt|;
name|memoryUsed
operator|.
name|addAndGet
argument_list|(
operator|-
name|memory
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
specifier|private
name|Cache
parameter_list|(
name|Backend
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|backend
parameter_list|,
name|int
name|maxMemoryBytes
parameter_list|)
block|{
name|this
operator|.
name|backend
operator|=
name|backend
expr_stmt|;
name|this
operator|.
name|maxMemoryBytes
operator|=
name|maxMemoryBytes
expr_stmt|;
block|}
specifier|public
name|void
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|int
name|memory
init|=
name|value
operator|.
name|getMemory
argument_list|()
decl_stmt|;
comment|// only add elements that are smaller than half the cache size
if|if
condition|(
name|memory
operator|<
name|maxMemoryBytes
operator|/
literal|2
condition|)
block|{
name|memoryUsed
operator|.
name|addAndGet
argument_list|(
name|memory
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|map
init|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Get the element in the cache if one exists, or add it to the cache if not.      *      * @param key the key      * @param value the value      * @return the cached element      */
specifier|public
name|V
name|replace
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|map
init|)
block|{
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
specifier|public
name|V
name|get
parameter_list|(
name|K
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|map
init|)
block|{
name|V
name|value
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// object was in the cache - good
return|return
name|value
return|;
block|}
block|}
comment|// synchronize on the backend when not in the cache
comment|// to ensure only one thread accessed the backend
comment|// and loads the object
synchronized|synchronized
init|(
name|backend
init|)
block|{
comment|// another thread might have added it in the meantime
name|V
name|value
decl_stmt|;
synchronized|synchronized
init|(
name|map
init|)
block|{
name|value
operator|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|backend
operator|.
name|load
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
block|}
comment|/**      * A cacheable object.      */
specifier|public
specifier|static
interface|interface
name|Value
block|{
comment|/**          * Get the memory required in bytes. The method must always return the          * same value once the element is in the cache.          *          * @return the memory used in bytes          */
name|int
name|getMemory
parameter_list|()
function_decl|;
block|}
comment|/**      * A cache backend that can load objects from persistent storage.      *      * @param<K> the key class      * @param<V> the value class      */
specifier|public
specifier|static
interface|interface
name|Backend
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
comment|/**          * Load the object. The method does not need to be synchronized          * (it is synchronized in the cache)          *          * @param key the key          * @return the value          */
name|V
name|load
parameter_list|(
name|K
name|key
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
extends|extends
name|Cache
operator|.
name|Value
parameter_list|>
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newInstance
parameter_list|(
name|Backend
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|backend
parameter_list|,
name|int
name|maxMemoryBytes
parameter_list|)
block|{
return|return
operator|new
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|backend
argument_list|,
name|maxMemoryBytes
argument_list|)
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
synchronized|synchronized
init|(
name|map
init|)
block|{
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|getMemoryUsed
parameter_list|()
block|{
return|return
name|memoryUsed
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|int
name|getMemoryMax
parameter_list|()
block|{
return|return
name|maxMemoryBytes
return|;
block|}
block|}
end_class

end_unit

