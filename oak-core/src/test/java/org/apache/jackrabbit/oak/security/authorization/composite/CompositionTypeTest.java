begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|composite
operator|.
name|CompositeAuthorizationConfiguration
operator|.
name|CompositionType
operator|.
name|AND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|composite
operator|.
name|CompositeAuthorizationConfiguration
operator|.
name|CompositionType
operator|.
name|OR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_class
specifier|public
class|class
name|CompositionTypeTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testOrFromString
parameter_list|()
block|{
name|String
index|[]
name|orNames
init|=
operator|new
name|String
index|[]
block|{
name|OR
operator|.
name|name
argument_list|()
block|,
name|OR
operator|.
name|toString
argument_list|()
block|,
name|OR
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
block|,
name|OR
operator|.
name|name
argument_list|()
operator|.
name|toUpperCase
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|orNames
control|)
block|{
name|assertSame
argument_list|(
name|OR
argument_list|,
name|CompositeAuthorizationConfiguration
operator|.
name|CompositionType
operator|.
name|fromString
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAndFromString
parameter_list|()
block|{
name|String
index|[]
name|andNames
init|=
operator|new
name|String
index|[]
block|{
name|AND
operator|.
name|name
argument_list|()
block|,
name|AND
operator|.
name|toString
argument_list|()
block|,
name|AND
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
block|,
name|AND
operator|.
name|name
argument_list|()
operator|.
name|toUpperCase
argument_list|()
block|,
literal|"any"
block|,
literal|""
block|}
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|andNames
control|)
block|{
name|assertSame
argument_list|(
name|AND
argument_list|,
name|CompositeAuthorizationConfiguration
operator|.
name|CompositionType
operator|.
name|fromString
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

