begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|FilterProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ImportBehavior
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|PropInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedItemImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ReferenceChangeTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|TextValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ImportUUIDBehavior
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFormatException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|REP_GLOB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|REP_ITEM_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|REP_NODE_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|REP_NT_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|NT_REP_PRINCIPAL_ENTRY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|NT_REP_PRINCIPAL_POLICY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|NT_REP_RESTRICTIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_EFFECTIVE_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_PRINCIPAL_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_PRINCIPAL_POLICY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_PRIVILEGES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_RESTRICTIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|MockUtility
operator|.
name|mockTree
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_READ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|PrincipalPolicyImporterTest
extends|extends
name|AbstractPrincipalBasedTest
block|{
specifier|private
name|FilterProvider
name|filterProvider
decl_stmt|;
specifier|private
name|PrincipalPolicyImporter
name|importer
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|filterProvider
operator|=
name|spy
argument_list|(
name|getFilterProvider
argument_list|()
argument_list|)
expr_stmt|;
name|importer
operator|=
operator|new
name|PrincipalPolicyImporter
argument_list|(
name|filterProvider
argument_list|,
name|getMgrProvider
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ConfigurationParameters
name|getSecurityConfigParameters
parameter_list|()
block|{
name|ConfigurationParameters
name|params
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|ProtectedItemImporter
operator|.
name|PARAM_IMPORT_BEHAVIOR
argument_list|,
name|ImportBehavior
operator|.
name|NAME_BESTEFFORT
argument_list|)
decl_stmt|;
return|return
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|AuthorizationConfiguration
operator|.
name|NAME
argument_list|,
name|params
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|init
parameter_list|(
name|boolean
name|isWorkspaceImport
parameter_list|,
name|int
name|uuidBehavior
parameter_list|)
block|{
return|return
name|importer
operator|.
name|init
argument_list|(
name|mock
argument_list|(
name|Session
operator|.
name|class
argument_list|)
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|,
name|isWorkspaceImport
argument_list|,
name|uuidBehavior
argument_list|,
operator|new
name|ReferenceChangeTracker
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|PropInfo
name|mockPropInfo
parameter_list|(
annotation|@
name|NotNull
name|String
name|jcrName
parameter_list|)
block|{
return|return
name|when
argument_list|(
name|mock
argument_list|(
name|PropInfo
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jcrName
argument_list|)
operator|.
name|getMock
argument_list|()
return|;
block|}
specifier|private
name|PropInfo
name|mockPropInfo
parameter_list|(
annotation|@
name|NotNull
name|Principal
name|principal
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|TextValue
name|tx
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|TextValue
operator|.
name|class
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|PropInfo
name|propInfo
init|=
name|mockPropInfo
argument_list|(
name|getJcrName
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|propInfo
operator|.
name|getTextValue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tx
argument_list|)
expr_stmt|;
return|return
name|propInfo
return|;
block|}
specifier|private
name|List
argument_list|<
name|PropInfo
argument_list|>
name|mockPropInfos
parameter_list|(
annotation|@
name|Nullable
name|String
name|effectivePath
parameter_list|,
annotation|@
name|NotNull
name|String
modifier|...
name|privNames
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|PropInfo
argument_list|>
name|propInfos
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|effectivePath
operator|!=
literal|null
condition|)
block|{
name|TextValue
name|tx
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|TextValue
operator|.
name|class
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|effectivePath
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|PropInfo
name|propInfo
init|=
name|mockPropInfo
argument_list|(
name|getJcrName
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|propInfo
operator|.
name|getTextValue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|propInfo
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyType
operator|.
name|PATH
argument_list|)
expr_stmt|;
name|propInfos
operator|.
name|add
argument_list|(
name|propInfo
argument_list|)
expr_stmt|;
block|}
name|List
name|privTxtValues
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|privName
range|:
name|privNames
control|)
block|{
name|TextValue
name|tx
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|TextValue
operator|.
name|class
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getJcrName
argument_list|(
name|privName
argument_list|)
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|privTxtValues
operator|.
name|add
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|privTxtValues
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PropInfo
name|propInfo
init|=
name|mockPropInfo
argument_list|(
name|getJcrName
argument_list|(
name|REP_PRIVILEGES
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|propInfo
operator|.
name|getTextValues
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|privTxtValues
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|propInfo
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyType
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|propInfos
operator|.
name|add
argument_list|(
name|propInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|propInfos
return|;
block|}
specifier|private
name|List
argument_list|<
name|PropInfo
argument_list|>
name|mockPropInfos
parameter_list|(
annotation|@
name|NotNull
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|restrictions
parameter_list|,
name|int
name|propertyType
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|mockPropInfos
argument_list|(
name|Maps
operator|.
name|transformValues
argument_list|(
name|restrictions
argument_list|,
name|string
lambda|->
block|{
try|try
block|{
return|return
operator|new
name|Value
index|[]
block|{
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
name|string
argument_list|,
name|propertyType
argument_list|)
block|}
empty_stmt|;
block|}
catch|catch
parameter_list|(
name|ValueFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|PropInfo
argument_list|>
name|mockPropInfos
parameter_list|(
annotation|@
name|NotNull
name|Map
argument_list|<
name|String
argument_list|,
name|Value
index|[]
argument_list|>
name|restrictions
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|PropInfo
argument_list|>
name|propInfos
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Value
index|[]
argument_list|>
name|r
range|:
name|restrictions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|jcrName
init|=
name|r
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Value
argument_list|>
name|vs
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|r
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|PropInfo
name|propInfo
init|=
name|mockPropInfo
argument_list|(
name|jcrName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|vs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TextValue
name|first
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|TextValue
operator|.
name|class
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|vs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|propInfo
operator|.
name|getTextValue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|propInfo
operator|.
name|getValues
argument_list|(
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|vs
argument_list|)
expr_stmt|;
block|}
name|propInfos
operator|.
name|add
argument_list|(
name|propInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|propInfos
return|;
block|}
specifier|private
name|PropertyDefinition
name|mockPropertyDefinition
parameter_list|(
annotation|@
name|NotNull
name|String
name|jcrName
parameter_list|)
block|{
name|NodeType
name|nt
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jcrName
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|PropertyDefinition
name|def
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
operator|.
name|getDeclaringNodeType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nt
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
return|return
name|def
return|;
block|}
specifier|private
name|NodeInfo
name|mockNodeInfo
parameter_list|(
annotation|@
name|NotNull
name|String
name|jcrName
parameter_list|,
annotation|@
name|NotNull
name|String
name|jcrPrimaryType
parameter_list|)
block|{
name|NodeInfo
name|ni
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|NodeInfo
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jcrName
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|ni
operator|.
name|getPrimaryTypeName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jcrPrimaryType
argument_list|)
expr_stmt|;
return|return
name|ni
return|;
block|}
specifier|private
name|Tree
name|createPolicyTree
parameter_list|(
annotation|@
name|NotNull
name|User
name|user
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|TreeUtil
operator|.
name|getOrAddChild
argument_list|(
name|t
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|,
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
return|;
block|}
specifier|private
name|String
name|getJcrName
parameter_list|(
annotation|@
name|NotNull
name|String
name|oakName
parameter_list|)
block|{
return|return
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrName
argument_list|(
name|oakName
argument_list|)
return|;
block|}
annotation|@
name|Nullable
specifier|private
specifier|static
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
name|assertPolicy
parameter_list|(
annotation|@
name|NotNull
name|AccessControlPolicy
index|[]
name|policies
parameter_list|,
name|int
name|expectedEntries
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policies
index|[
literal|0
index|]
operator|instanceof
name|PrincipalPolicyImpl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedEntries
argument_list|,
operator|(
operator|(
operator|(
name|PrincipalPolicyImpl
operator|)
name|policies
index|[
literal|0
index|]
operator|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedEntries
operator|>
literal|0
condition|)
block|{
return|return
operator|(
operator|(
name|PrincipalPolicyImpl
operator|)
name|policies
index|[
literal|0
index|]
operator|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitWorkspaceImport
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitSessionImport
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REPLACE_EXISTING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInitTwice
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REMOVE_EXISTING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitResetMgrProviderRoot
parameter_list|()
block|{
name|MgrProvider
name|mp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|MgrProvider
operator|.
name|class
argument_list|)
operator|.
name|getSecurityProvider
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getSecurityProvider
argument_list|()
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|importer
operator|=
operator|new
name|PrincipalPolicyImporter
argument_list|(
name|filterProvider
argument_list|,
name|mp
argument_list|)
expr_stmt|;
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|reset
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitGetsFilter
parameter_list|()
block|{
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|filterProvider
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getFilter
argument_list|(
name|getSecurityProvider
argument_list|()
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcessReferencesIsNop
parameter_list|()
block|{
comment|// no initialization required
name|importer
operator|.
name|processReferences
argument_list|()
expr_stmt|;
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
argument_list|)
expr_stmt|;
name|importer
operator|.
name|processReferences
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testHandlePropInfoNotInitialized
parameter_list|()
throws|throws
name|Exception
block|{
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|PropInfo
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlePropInfoNonExistingTree
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REPLACE_EXISTING
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|tree
argument_list|,
name|mock
argument_list|(
name|PropInfo
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlePropInfoWrongTreeName
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
argument_list|)
expr_stmt|;
comment|// wrong policy name
name|Tree
name|tree
init|=
name|mockTree
argument_list|(
name|AccessControlConstants
operator|.
name|REP_POLICY
argument_list|,
name|NT_REP_PRINCIPAL_POLICY
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|tree
argument_list|,
name|mock
argument_list|(
name|PropInfo
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlePropInfoWrongTreeNt
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
argument_list|)
expr_stmt|;
comment|// wrong nt name
name|Tree
name|tree
init|=
name|mockTree
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|AccessControlConstants
operator|.
name|NT_REP_ACL
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|tree
argument_list|,
name|mock
argument_list|(
name|PropInfo
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlePropInfoInvalidPropInfoName
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mockTree
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|NT_REP_PRINCIPAL_POLICY
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|tree
argument_list|,
name|mockPropInfo
argument_list|(
literal|"wrongName"
argument_list|)
argument_list|,
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlePropInfoNullPropInfoName
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REPLACE_EXISTING
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mockTree
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|NT_REP_PRINCIPAL_POLICY
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|tree
argument_list|,
name|mock
argument_list|(
name|PropInfo
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlePropInfoOakPropInfoName
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REPLACE_EXISTING
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mockTree
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|NT_REP_PRINCIPAL_POLICY
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PropInfo
name|propInfo
init|=
name|mockPropInfo
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|tree
argument_list|,
name|mock
argument_list|(
name|PropInfo
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlePropInfoDefinitionMultiple
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REMOVE_EXISTING
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mockTree
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|NT_REP_PRINCIPAL_POLICY
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PropInfo
name|propInfo
init|=
name|mockPropInfo
argument_list|(
name|getJcrName
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|def
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
operator|.
name|isMultiple
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|tree
argument_list|,
name|propInfo
argument_list|,
name|def
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlePropInfoInvalidDeclaringNtName
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REMOVE_EXISTING
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mockTree
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|NT_REP_PRINCIPAL_POLICY
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PropInfo
name|propInfo
init|=
name|mockPropInfo
argument_list|(
name|getJcrName
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|def
init|=
name|mockPropertyDefinition
argument_list|(
literal|"wrongDeclaringNtName"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|tree
argument_list|,
name|propInfo
argument_list|,
name|def
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlePropInfoOakDeclaringNtName
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REMOVE_EXISTING
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mockTree
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|NT_REP_PRINCIPAL_POLICY
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PropInfo
name|propInfo
init|=
name|mockPropInfo
argument_list|(
name|getJcrName
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|def
init|=
name|mockPropertyDefinition
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|tree
argument_list|,
name|propInfo
argument_list|,
name|def
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlePropInfoUnsupportedPath
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REMOVE_EXISTING
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|mockTree
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|NT_REP_PRINCIPAL_POLICY
argument_list|,
literal|"/some/unsupported/path"
argument_list|)
decl_stmt|;
name|PropInfo
name|propInfo
init|=
name|mockPropInfo
argument_list|(
name|getJcrName
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|def
init|=
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|tree
argument_list|,
name|propInfo
argument_list|,
name|def
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testHandlePropInfoPrincipalNameMismatch
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|)
expr_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|createPolicyTree
argument_list|(
name|getTestSystemUser
argument_list|()
argument_list|)
argument_list|,
name|mockPropInfo
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|"mismatch"
argument_list|)
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlePropInfoPrincipalNotHandled
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REPLACE_EXISTING
argument_list|)
expr_stmt|;
name|User
name|testUser
init|=
name|getTestUser
argument_list|()
decl_stmt|;
name|String
name|wrongUserPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|SUPPORTED_PATH
argument_list|,
literal|"testUser"
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
name|mockTree
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|NT_REP_PRINCIPAL_POLICY
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|wrongUserPath
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|tree
argument_list|,
name|mockPropInfo
argument_list|(
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlePropInfoPrincipalByNameReturnsNull
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
argument_list|)
expr_stmt|;
name|String
name|oakPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|SUPPORTED_PATH
argument_list|,
literal|"unknownSystemUser"
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
name|mockTree
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|,
name|NT_REP_PRINCIPAL_POLICY
argument_list|,
name|oakPath
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|tree
argument_list|,
name|mockPropInfo
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|"notFound"
argument_list|)
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlePropInfoValidPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REMOVE_EXISTING
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|createPolicyTree
argument_list|(
name|user
argument_list|)
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testPropertiesCompletedNotInitialized
parameter_list|()
throws|throws
name|Exception
block|{
name|importer
operator|.
name|propertiesCompleted
argument_list|(
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertiesCompletedNoPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|)
expr_stmt|;
name|importer
operator|.
name|propertiesCompleted
argument_list|(
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|hasPendingChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertiesCompletedWrongTree
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|createPolicyTree
argument_list|(
name|user
argument_list|)
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|propertiesCompleted
argument_list|(
name|mockTree
argument_list|(
literal|"/another/path"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPolicies
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
operator|.
name|hasChild
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertiesCompletedSetsPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|Tree
name|policyTree
init|=
name|createPolicyTree
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|String
name|oakPath
init|=
name|policyTree
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|policyTree
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|propertiesCompleted
argument_list|(
name|policyTree
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|oakPath
argument_list|)
operator|.
name|hasProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPolicies
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartNotInitialized
parameter_list|()
throws|throws
name|Exception
block|{
name|importer
operator|.
name|start
argument_list|(
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartWithoutPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartWithPolicyAndValidTree
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REPLACE_EXISTING
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|Tree
name|policyTree
init|=
name|createPolicyTree
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|policyTree
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|propertiesCompleted
argument_list|(
name|policyTree
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|policyTree
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartInvalidTree
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|Tree
name|policyTree
init|=
name|createPolicyTree
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|policyTree
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|propertiesCompleted
argument_list|(
name|policyTree
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|mockTree
argument_list|(
literal|"/another/path"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEndWithoutPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|importer
operator|.
name|end
argument_list|(
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEndWithInvalidTree
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|Tree
name|policyTree
init|=
name|createPolicyTree
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|policyTree
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|propertiesCompleted
argument_list|(
name|policyTree
argument_list|)
expr_stmt|;
name|importer
operator|.
name|end
argument_list|(
name|mockTree
argument_list|(
literal|"/another/path"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// end-call must have removed the policy due to the mismatch
name|assertFalse
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|policyTree
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEndWithPolicyAndValidTree
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|Tree
name|policyTree
init|=
name|createPolicyTree
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|policyTree
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|propertiesCompleted
argument_list|(
name|policyTree
argument_list|)
expr_stmt|;
name|importer
operator|.
name|end
argument_list|(
name|policyTree
argument_list|)
expr_stmt|;
name|policyTree
operator|=
name|root
operator|.
name|getTree
argument_list|(
name|policyTree
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policyTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policyTree
operator|.
name|hasProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|policyTree
operator|.
name|getChildren
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartChildInfoWithoutPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mock
argument_list|(
name|NodeInfo
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartChildInfoInvalidPrimaryType
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|Tree
name|policyTree
init|=
name|createPolicyTree
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|policyTree
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
literal|"invalidACE"
argument_list|,
name|getJcrName
argument_list|(
name|AccessControlConstants
operator|.
name|NT_REP_GRANT_ACE
argument_list|)
argument_list|)
argument_list|,
name|mock
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartChildInfoOakPrimaryType
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|Tree
name|policyTree
init|=
name|createPolicyTree
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|policyTree
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
literal|"oakName"
argument_list|,
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
argument_list|,
name|mock
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartChildInfoNestedEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|Tree
name|policyTree
init|=
name|createPolicyTree
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|policyTree
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
literal|"entry"
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
argument_list|)
argument_list|,
name|mockPropInfos
argument_list|(
literal|"/anyPath"
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
literal|"anotherEntry"
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
argument_list|)
argument_list|,
name|mockPropInfos
argument_list|(
literal|"/anyPath"
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartChildInfoMissingPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|Tree
name|policyTree
init|=
name|createPolicyTree
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|policyTree
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
literal|"entry"
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
argument_list|)
argument_list|,
name|mockPropInfos
argument_list|(
literal|"/effective/path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartChildInfoRestrictionNotNestedInEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|Tree
name|policyTree
init|=
name|createPolicyTree
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|policyTree
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
name|getJcrName
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_RESTRICTIONS
argument_list|)
argument_list|)
argument_list|,
name|mock
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartChildInfoUnsupportedProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REPLACE_EXISTING
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|Tree
name|policyTree
init|=
name|createPolicyTree
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|policyTree
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PropInfo
argument_list|>
name|propInfos
init|=
name|mockPropInfos
argument_list|(
literal|"/effective/path"
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
decl_stmt|;
name|propInfos
operator|.
name|add
argument_list|(
name|mockPropInfo
argument_list|(
literal|"unsupportedProperty"
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
literal|"entry"
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
argument_list|)
argument_list|,
name|propInfos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartChildInfoWrongEffectivePathPropertyType
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REPLACE_EXISTING
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|Tree
name|policyTree
init|=
name|createPolicyTree
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|policyTree
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PropInfo
argument_list|>
name|propInfos
init|=
name|mockPropInfos
argument_list|(
literal|null
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
decl_stmt|;
comment|// effective path with wrong type
name|TextValue
name|tx
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|TextValue
operator|.
name|class
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"/effective/path"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|PropInfo
name|propInfo
init|=
name|mockPropInfo
argument_list|(
name|getJcrName
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|propInfo
operator|.
name|getTextValue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|propInfo
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|propInfos
operator|.
name|add
argument_list|(
name|propInfo
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
literal|"entry"
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
argument_list|)
argument_list|,
name|propInfos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartChildInfoWrongPrivilegesPropertyType
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REPLACE_EXISTING
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|Tree
name|policyTree
init|=
name|createPolicyTree
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|policyTree
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PropInfo
argument_list|>
name|propInfos
init|=
name|mockPropInfos
argument_list|(
literal|"/effective/path"
argument_list|)
decl_stmt|;
comment|// rep:privileges with wrong type
name|PropInfo
name|propInfo
init|=
name|mockPropInfo
argument_list|(
name|getJcrName
argument_list|(
name|REP_PRIVILEGES
argument_list|)
argument_list|)
decl_stmt|;
name|TextValue
name|tx
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|TextValue
operator|.
name|class
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getJcrName
argument_list|(
name|JCR_READ
argument_list|)
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|List
name|values
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|tx
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|propInfo
operator|.
name|getTextValues
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|propInfo
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|propInfos
operator|.
name|add
argument_list|(
name|propInfo
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
literal|"entry"
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
argument_list|)
argument_list|,
name|propInfos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartChildInfoNestedRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|Tree
name|policyTree
init|=
name|createPolicyTree
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|policyTree
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
literal|"entry"
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
argument_list|)
argument_list|,
name|mockPropInfos
argument_list|(
literal|"/effective/path"
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
name|getJcrName
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_RESTRICTIONS
argument_list|)
argument_list|)
argument_list|,
name|mockPropInfos
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|getJcrName
argument_list|(
name|REP_GLOB
argument_list|)
argument_list|,
literal|"/some/glob"
argument_list|)
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
name|getJcrName
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_RESTRICTIONS
argument_list|)
argument_list|)
argument_list|,
name|mockPropInfos
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartChildInfoNestedMvRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|Tree
name|policyTree
init|=
name|createPolicyTree
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|policyTree
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
literal|"entry"
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
argument_list|)
argument_list|,
name|mockPropInfos
argument_list|(
literal|"/effective/path"
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
name|getJcrName
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_RESTRICTIONS
argument_list|)
argument_list|)
argument_list|,
name|mockPropInfos
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|getJcrName
argument_list|(
name|REP_NT_NAMES
argument_list|)
argument_list|,
operator|new
name|Value
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
name|getJcrName
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_RESTRICTIONS
argument_list|)
argument_list|)
argument_list|,
name|mockPropInfos
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartChildInfoRepNodeRestrictionOverwritesEffectivePath
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|Tree
name|policyTree
init|=
name|createPolicyTree
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|policyTree
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
literal|"entry"
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
argument_list|)
argument_list|,
name|mockPropInfos
argument_list|(
literal|"/effective/path"
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
name|getJcrName
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_RESTRICTIONS
argument_list|)
argument_list|)
argument_list|,
name|mockPropInfos
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|getJcrName
argument_list|(
name|REP_NODE_PATH
argument_list|)
argument_list|,
literal|"/effective/path"
argument_list|)
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartChildInfoRepNodeRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|true
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|Tree
name|policyTree
init|=
name|createPolicyTree
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|policyTree
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|start
argument_list|(
name|policyTree
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
literal|"entry"
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
argument_list|)
argument_list|,
name|mockPropInfos
argument_list|(
literal|null
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
name|getJcrName
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_RESTRICTIONS
argument_list|)
argument_list|)
argument_list|,
name|mockPropInfos
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|getJcrName
argument_list|(
name|REP_NODE_PATH
argument_list|)
argument_list|,
literal|"/effective/path"
argument_list|)
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|endChildInfo
argument_list|()
expr_stmt|;
name|importer
operator|.
name|endChildInfo
argument_list|()
expr_stmt|;
name|importer
operator|.
name|end
argument_list|(
name|policyTree
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
name|entry
init|=
name|assertPolicy
argument_list|(
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPolicies
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/effective/path"
argument_list|,
name|entry
operator|.
name|getEffectivePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartChildInfoMvRestrictions
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|Tree
name|policyTree
init|=
name|createPolicyTree
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|policyTree
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|start
argument_list|(
name|policyTree
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
literal|"entry"
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
argument_list|)
argument_list|,
name|mockPropInfos
argument_list|(
literal|"/effective/path"
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|ValueFactory
name|vf
init|=
name|getValueFactory
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|Value
index|[]
name|nameValues
init|=
operator|new
name|Value
index|[]
block|{
name|vf
operator|.
name|createValue
argument_list|(
name|getJcrName
argument_list|(
literal|"jcr:content"
argument_list|)
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
block|,
name|vf
operator|.
name|createValue
argument_list|(
name|getJcrName
argument_list|(
literal|"jcr:data"
argument_list|)
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
block|}
decl_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
name|getJcrName
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_RESTRICTIONS
argument_list|)
argument_list|)
argument_list|,
name|mockPropInfos
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|getJcrName
argument_list|(
name|REP_ITEM_NAMES
argument_list|)
argument_list|,
name|nameValues
argument_list|,
name|getJcrName
argument_list|(
name|REP_GLOB
argument_list|)
argument_list|,
operator|new
name|Value
index|[]
block|{
name|vf
operator|.
name|createValue
argument_list|(
literal|"/some/*/globbing"
argument_list|)
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|endChildInfo
argument_list|()
expr_stmt|;
name|importer
operator|.
name|endChildInfo
argument_list|()
expr_stmt|;
name|importer
operator|.
name|end
argument_list|(
name|policyTree
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
name|entry
init|=
name|assertPolicy
argument_list|(
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPolicies
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|entry
operator|.
name|getRestrictions
argument_list|(
name|getJcrName
argument_list|(
name|REP_ITEM_NAMES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|entry
operator|.
name|getRestriction
argument_list|(
name|getJcrName
argument_list|(
name|REP_GLOB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartChildInfoUnsupportedRestrictions
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|Tree
name|policyTree
init|=
name|createPolicyTree
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|policyTree
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|start
argument_list|(
name|policyTree
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
literal|"entry"
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
argument_list|)
argument_list|,
name|mockPropInfos
argument_list|(
literal|"/effective/path"
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
name|getJcrName
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_RESTRICTIONS
argument_list|)
argument_list|)
argument_list|,
name|mockPropInfos
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"unsupported"
argument_list|,
literal|"x"
argument_list|)
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
comment|// adding entry to policy must already throw the exception
name|importer
operator|.
name|endChildInfo
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEndChildInfoWithoutPolicyNorEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|importer
operator|.
name|endChildInfo
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEndChildInfoMissingEffectivePath
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|Tree
name|policyTree
init|=
name|createPolicyTree
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|policyTree
argument_list|,
name|mockPropInfo
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|mockPropertyDefinition
argument_list|(
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mockNodeInfo
argument_list|(
literal|"entry"
argument_list|,
name|getJcrName
argument_list|(
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
argument_list|)
argument_list|,
name|mockPropInfos
argument_list|(
literal|null
argument_list|,
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|endChildInfo
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

