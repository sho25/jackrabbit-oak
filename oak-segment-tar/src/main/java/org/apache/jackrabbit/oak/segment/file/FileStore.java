begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MINUTES
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|humanReadableByteCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|DefaultSegmentWriterBuilder
operator|.
name|defaultSegmentWriterBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|PrintableBytes
operator|.
name|newPrintableBytes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|UncheckedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNotFoundExceptionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|ShutDown
operator|.
name|ShutDownCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|GCGeneration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|TarFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|RepositoryLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentNodeStorePersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The storage implementation for tar files.  */
end_comment

begin_class
specifier|public
class|class
name|FileStore
extends|extends
name|AbstractFileStore
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MB
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|SegmentWriter
name|segmentWriter
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|GarbageCollector
name|garbageCollector
decl_stmt|;
specifier|private
specifier|final
name|TarFiles
name|tarFiles
decl_stmt|;
specifier|private
specifier|final
name|RepositoryLock
name|repositoryLock
decl_stmt|;
specifier|private
specifier|volatile
name|TarRevisions
name|revisions
decl_stmt|;
comment|/**      * Scheduler for running<em>short</em> background operations      */
specifier|private
specifier|final
name|Scheduler
name|fileStoreScheduler
init|=
operator|new
name|Scheduler
argument_list|(
literal|"FileStore background tasks"
argument_list|)
decl_stmt|;
comment|/**      * List of old tar file generations that are waiting to be removed. They can      * not be removed immediately, because they first need to be closed, and the      * JVM needs to release the memory mapped file references.      */
specifier|private
specifier|final
name|FileReaper
name|fileReaper
decl_stmt|;
comment|/**      * This flag is periodically updated by calling the {@code SegmentGCOptions}      * at regular intervals.      */
specifier|private
specifier|final
name|AtomicBoolean
name|sufficientDiskSpace
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|/**      * This flag is raised whenever the available memory falls under a specified      * threshold. See {@link GCMemoryBarrier}      */
specifier|private
specifier|final
name|AtomicBoolean
name|sufficientMemory
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|FileStoreStats
name|stats
decl_stmt|;
specifier|private
specifier|final
name|ShutDown
name|shutDown
init|=
operator|new
name|ShutDown
argument_list|()
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|SegmentNotFoundExceptionListener
name|snfeListener
decl_stmt|;
specifier|private
specifier|final
name|GarbageCollectionStrategy
name|garbageCollectionStrategy
init|=
operator|new
name|DefaultGarbageCollectionStrategy
argument_list|()
decl_stmt|;
name|FileStore
parameter_list|(
specifier|final
name|FileStoreBuilder
name|builder
parameter_list|)
throws|throws
name|InvalidFileStoreVersionException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|SegmentNodeStorePersistence
name|persistence
init|=
name|builder
operator|.
name|getPersistence
argument_list|()
decl_stmt|;
name|repositoryLock
operator|=
name|persistence
operator|.
name|lockRepository
argument_list|()
expr_stmt|;
name|this
operator|.
name|segmentWriter
operator|=
name|defaultSegmentWriterBuilder
argument_list|(
literal|"sys"
argument_list|)
operator|.
name|withGeneration
argument_list|(
parameter_list|()
lambda|->
name|getGcGeneration
argument_list|()
operator|.
name|nonGC
argument_list|()
argument_list|)
operator|.
name|withWriterPool
argument_list|()
operator|.
name|with
argument_list|(
name|builder
operator|.
name|getCacheManager
argument_list|()
operator|.
name|withAccessTracking
argument_list|(
literal|"WRITE"
argument_list|,
name|builder
operator|.
name|getStatsProvider
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|newManifestChecker
argument_list|(
name|persistence
argument_list|,
name|builder
operator|.
name|getStrictVersionCheck
argument_list|()
argument_list|)
operator|.
name|checkAndUpdateManifest
argument_list|()
expr_stmt|;
name|this
operator|.
name|stats
operator|=
operator|new
name|FileStoreStats
argument_list|(
name|builder
operator|.
name|getStatsProvider
argument_list|()
argument_list|,
name|this
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|TarFiles
operator|.
name|Builder
name|tarFilesBuilder
init|=
name|TarFiles
operator|.
name|builder
argument_list|()
operator|.
name|withDirectory
argument_list|(
name|directory
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
name|memoryMapping
argument_list|)
operator|.
name|withTarRecovery
argument_list|(
name|recovery
argument_list|)
operator|.
name|withIOMonitor
argument_list|(
name|ioMonitor
argument_list|)
operator|.
name|withFileStoreMonitor
argument_list|(
name|stats
argument_list|)
operator|.
name|withMaxFileSize
argument_list|(
name|builder
operator|.
name|getMaxFileSize
argument_list|()
operator|*
name|MB
argument_list|)
operator|.
name|withPersistence
argument_list|(
name|builder
operator|.
name|getPersistence
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|tarFiles
operator|=
name|tarFilesBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
name|long
name|size
init|=
name|this
operator|.
name|tarFiles
operator|.
name|size
argument_list|()
decl_stmt|;
name|this
operator|.
name|stats
operator|.
name|init
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileReaper
operator|=
name|this
operator|.
name|tarFiles
operator|.
name|createFileReaper
argument_list|()
expr_stmt|;
name|this
operator|.
name|garbageCollector
operator|=
operator|new
name|GarbageCollector
argument_list|(
name|builder
operator|.
name|getGcOptions
argument_list|()
argument_list|,
name|builder
operator|.
name|getGcListener
argument_list|()
argument_list|,
operator|new
name|GCJournal
argument_list|(
name|persistence
operator|.
name|getGCJournalFile
argument_list|()
argument_list|)
argument_list|,
name|sufficientMemory
argument_list|,
name|fileReaper
argument_list|,
name|tarFiles
argument_list|,
name|tracker
argument_list|,
name|segmentReader
argument_list|,
parameter_list|()
lambda|->
name|revisions
argument_list|,
name|getBlobStore
argument_list|()
argument_list|,
name|segmentCache
argument_list|,
name|segmentWriter
argument_list|,
name|stats
argument_list|,
operator|new
name|CancelCompactionSupplier
argument_list|(
parameter_list|()
lambda|->
operator|!
name|sufficientDiskSpace
operator|.
name|get
argument_list|()
argument_list|,
parameter_list|()
lambda|->
operator|!
name|sufficientMemory
operator|.
name|get
argument_list|()
argument_list|,
name|shutDown
operator|::
name|isShutDown
argument_list|)
argument_list|,
name|this
operator|::
name|flush
argument_list|,
name|generation
lambda|->
name|defaultSegmentWriterBuilder
argument_list|(
literal|"c"
argument_list|)
operator|.
name|with
argument_list|(
name|builder
operator|.
name|getCacheManager
argument_list|()
operator|.
name|withAccessTracking
argument_list|(
literal|"COMPACT"
argument_list|,
name|builder
operator|.
name|getStatsProvider
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withGeneration
argument_list|(
name|generation
argument_list|)
operator|.
name|withoutWriterPool
argument_list|()
operator|.
name|build
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|snfeListener
operator|=
name|builder
operator|.
name|getSnfeListener
argument_list|()
expr_stmt|;
name|fileStoreScheduler
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|format
argument_list|(
literal|"TarMK flush [%s]"
argument_list|,
name|directory
argument_list|)
argument_list|,
literal|5
argument_list|,
name|SECONDS
argument_list|,
name|this
operator|::
name|tryFlush
argument_list|)
expr_stmt|;
name|fileStoreScheduler
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|format
argument_list|(
literal|"TarMK filer reaper [%s]"
argument_list|,
name|directory
argument_list|)
argument_list|,
literal|5
argument_list|,
name|SECONDS
argument_list|,
name|fileReaper
operator|::
name|reap
argument_list|)
expr_stmt|;
name|fileStoreScheduler
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|format
argument_list|(
literal|"TarMK disk space check [%s]"
argument_list|,
name|directory
argument_list|)
argument_list|,
literal|1
argument_list|,
name|MINUTES
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
init|(
name|ShutDownCloser
name|ignore
init|=
name|shutDown
operator|.
name|tryKeepAlive
argument_list|()
init|)
block|{
if|if
condition|(
name|shutDown
operator|.
name|isShutDown
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Shut down in progress, skipping disk space check"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkDiskSpace
argument_list|(
name|builder
operator|.
name|getGcOptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"TarMK opened at {}, mmap={}, size={}"
argument_list|,
name|directory
argument_list|,
name|memoryMapping
argument_list|,
name|newPrintableBytes
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"TAR files: {}"
argument_list|,
name|tarFiles
argument_list|)
expr_stmt|;
block|}
name|FileStore
name|bind
parameter_list|(
name|TarRevisions
name|revisions
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
name|this
operator|.
name|revisions
operator|=
name|revisions
expr_stmt|;
name|this
operator|.
name|revisions
operator|.
name|bind
argument_list|(
name|this
argument_list|,
name|tracker
argument_list|,
name|initialNode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
annotation|@
name|Nonnull
specifier|private
name|Supplier
argument_list|<
name|RecordId
argument_list|>
name|initialNode
parameter_list|()
block|{
return|return
operator|new
name|Supplier
argument_list|<
name|RecordId
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RecordId
name|get
parameter_list|()
block|{
try|try
block|{
name|SegmentWriter
name|writer
init|=
name|defaultSegmentWriterBuilder
argument_list|(
literal|"init"
argument_list|)
operator|.
name|build
argument_list|(
name|FileStore
operator|.
name|this
argument_list|)
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"root"
argument_list|,
name|EMPTY_NODE
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|node
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|segmentReader
argument_list|,
name|writer
argument_list|,
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|node
operator|.
name|getRecordId
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Failed to write initial node"
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|GCGeneration
name|getGcGeneration
parameter_list|()
block|{
return|return
name|revisions
operator|.
name|getHead
argument_list|()
operator|.
name|getSegmentId
argument_list|()
operator|.
name|getGcGeneration
argument_list|()
return|;
block|}
comment|/**      * @return  a runnable for running garbage collection      */
specifier|public
name|Runnable
name|getGCRunner
parameter_list|()
block|{
return|return
operator|new
name|SafeRunnable
argument_list|(
name|format
argument_list|(
literal|"TarMK revision gc [%s]"
argument_list|,
name|directory
argument_list|)
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
name|garbageCollector
operator|.
name|run
argument_list|(
name|garbageCollectionStrategy
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error running revision garbage collection"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * @return the currently active gc write monitor      */
specifier|public
name|GCNodeWriteMonitor
name|getGCNodeWriteMonitor
parameter_list|()
block|{
return|return
name|garbageCollector
operator|.
name|getGCNodeWriteMonitor
argument_list|()
return|;
block|}
comment|/**      * @return the size of this store.      */
specifier|private
name|long
name|size
parameter_list|()
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
return|return
name|tarFiles
operator|.
name|size
argument_list|()
return|;
block|}
block|}
specifier|public
name|int
name|readerCount
parameter_list|()
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
return|return
name|tarFiles
operator|.
name|readerCount
argument_list|()
return|;
block|}
block|}
specifier|public
name|FileStoreStats
name|getStats
parameter_list|()
block|{
return|return
name|stats
return|;
block|}
comment|/*      * Callers of this method must hold the shutdown lock      */
specifier|private
name|void
name|doFlush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|revisions
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No TarRevisions available, skipping flush"
argument_list|)
expr_stmt|;
return|return;
block|}
name|revisions
operator|.
name|flush
argument_list|(
parameter_list|()
lambda|->
block|{
name|segmentWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tarFiles
operator|.
name|flush
argument_list|()
expr_stmt|;
name|stats
operator|.
name|flushed
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Flush all pending changes      */
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
name|doFlush
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Try to flush all pending changes to disk if possible without waiting      * for a lock or other resources currently not available.      */
specifier|public
name|void
name|tryFlush
parameter_list|()
block|{
try|try
init|(
name|ShutDownCloser
name|ignore
init|=
name|shutDown
operator|.
name|tryKeepAlive
argument_list|()
init|)
block|{
if|if
condition|(
name|shutDown
operator|.
name|isShutDown
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Shut down in progress, skipping flush"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|revisions
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No TarRevisions available, skipping flush"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|revisions
operator|.
name|tryFlush
argument_list|(
parameter_list|()
lambda|->
block|{
name|segmentWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tarFiles
operator|.
name|flush
argument_list|()
expr_stmt|;
name|stats
operator|.
name|flushed
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to flush the TarMK at {}"
argument_list|,
name|directory
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Run full garbage collection: estimation, compaction, cleanup.      */
specifier|public
name|void
name|fullGC
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
name|garbageCollector
operator|.
name|runFull
argument_list|(
name|garbageCollectionStrategy
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Run tail garbage collection.      */
specifier|public
name|void
name|tailGC
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
name|garbageCollector
operator|.
name|runTail
argument_list|(
name|garbageCollectionStrategy
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Copy every referenced record in data (non-bulk) segments. Bulk segments      * are fully kept (they are only removed in cleanup, if there is no      * reference to them).      * @return {@code true} on success, {@code false} otherwise.      */
specifier|public
name|boolean
name|compactFull
parameter_list|()
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
return|return
name|garbageCollector
operator|.
name|compactFull
argument_list|(
name|garbageCollectionStrategy
argument_list|)
operator|.
name|isSuccess
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to perform full compaction"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|compactTail
parameter_list|()
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
return|return
name|garbageCollector
operator|.
name|compactTail
argument_list|(
name|garbageCollectionStrategy
argument_list|)
operator|.
name|isSuccess
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to perform tail compaction"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Run garbage collection on the segment level: reclaim those data segments      * that are from an old segment generation and those bulk segments that are not      * reachable anymore.      * Those tar files that shrink by at least 25% are rewritten to a new tar generation      * skipping the reclaimed segments.      */
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
name|fileReaper
operator|.
name|add
argument_list|(
name|garbageCollector
operator|.
name|cleanup
argument_list|(
name|garbageCollectionStrategy
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Finds all external blob references that are currently accessible      * in this repository and adds them to the given collector. Useful      * for collecting garbage in an external data store.      *<p>      * Note that this method only collects blob references that are already      * stored in the repository (at the time when this method is called), so      * the garbage collector will need some other mechanism for tracking      * in-memory references and references stored while this method is      * running.      * @param collector  reference collector called back for each blob reference found      */
specifier|public
name|void
name|collectBlobReferences
parameter_list|(
name|Consumer
argument_list|<
name|String
argument_list|>
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
name|garbageCollector
operator|.
name|collectBlobReferences
argument_list|(
name|collector
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Cancel a running revision garbage collection compaction process as soon as possible.      * Does nothing if gc is not running.      */
specifier|public
name|void
name|cancelGC
parameter_list|()
block|{
name|garbageCollector
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|SegmentWriter
name|getWriter
parameter_list|()
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
return|return
name|segmentWriter
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|TarRevisions
name|getRevisions
parameter_list|()
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
return|return
name|revisions
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|shutDown
argument_list|()
init|)
block|{
comment|// avoid deadlocks by closing (and joining) the background
comment|// thread before acquiring the synchronization lock
name|fileStoreScheduler
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|doFlush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to flush the store"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|repositoryLock
operator|::
name|unlock
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|tarFiles
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|revisions
argument_list|)
expr_stmt|;
name|closeAndLogOnFail
argument_list|(
name|closer
argument_list|)
expr_stmt|;
block|}
comment|// Try removing pending files in case the scheduler didn't have a chance to run yet
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
comment|// for any memory-mappings that are no longer used
name|fileReaper
operator|.
name|reap
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"TarMK closed: {}"
argument_list|,
name|directory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsSegment
parameter_list|(
name|SegmentId
name|id
parameter_list|)
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
return|return
name|tarFiles
operator|.
name|containsSegment
argument_list|(
name|id
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Segment
name|readSegment
parameter_list|(
specifier|final
name|SegmentId
name|id
parameter_list|)
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
return|return
name|segmentCache
operator|.
name|getSegment
argument_list|(
name|id
argument_list|,
parameter_list|()
lambda|->
name|readSegmentUncached
argument_list|(
name|tarFiles
argument_list|,
name|id
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
decl||
name|UncheckedExecutionException
name|e
parameter_list|)
block|{
name|SegmentNotFoundException
name|snfe
init|=
name|asSegmentNotFoundException
argument_list|(
name|e
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|snfeListener
operator|.
name|notify
argument_list|(
name|id
argument_list|,
name|snfe
argument_list|)
expr_stmt|;
throw|throw
name|snfe
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeSegment
parameter_list|(
name|SegmentId
name|id
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
name|Segment
name|segment
init|=
literal|null
decl_stmt|;
comment|// If the segment is a data segment, create a new instance of Segment to
comment|// access some internal information stored in the segment and to store
comment|// in an in-memory cache for later use.
name|GCGeneration
name|generation
init|=
name|GCGeneration
operator|.
name|NULL
decl_stmt|;
name|Set
argument_list|<
name|UUID
argument_list|>
name|references
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|binaryReferences
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|isDataSegmentId
argument_list|()
condition|)
block|{
name|ByteBuffer
name|data
decl_stmt|;
if|if
condition|(
name|offset
operator|>
literal|4096
condition|)
block|{
name|data
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|data
operator|.
name|rewind
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|data
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|segment
operator|=
operator|new
name|Segment
argument_list|(
name|tracker
argument_list|,
name|segmentReader
argument_list|,
name|id
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|generation
operator|=
name|segment
operator|.
name|getGcGeneration
argument_list|()
expr_stmt|;
name|references
operator|=
name|readReferences
argument_list|(
name|segment
argument_list|)
expr_stmt|;
name|binaryReferences
operator|=
name|readBinaryReferences
argument_list|(
name|segment
argument_list|)
expr_stmt|;
block|}
name|tarFiles
operator|.
name|writeSegment
argument_list|(
name|id
operator|.
name|asUUID
argument_list|()
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|generation
argument_list|,
name|references
argument_list|,
name|binaryReferences
argument_list|)
expr_stmt|;
comment|// Keep this data segment in memory as it's likely to be accessed soon.
if|if
condition|(
name|segment
operator|!=
literal|null
condition|)
block|{
name|segmentCache
operator|.
name|putSegment
argument_list|(
name|segment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkDiskSpace
parameter_list|(
name|SegmentGCOptions
name|gcOptions
parameter_list|)
block|{
name|long
name|repositoryDiskSpace
init|=
name|size
argument_list|()
decl_stmt|;
name|long
name|availableDiskSpace
init|=
name|directory
operator|.
name|getFreeSpace
argument_list|()
decl_stmt|;
name|boolean
name|updated
init|=
name|SegmentGCOptions
operator|.
name|isDiskSpaceSufficient
argument_list|(
name|repositoryDiskSpace
argument_list|,
name|availableDiskSpace
argument_list|)
decl_stmt|;
name|boolean
name|previous
init|=
name|sufficientDiskSpace
operator|.
name|getAndSet
argument_list|(
name|updated
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|&&
operator|!
name|updated
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Available disk space ({}) is too low, current repository size is approx. {}"
argument_list|,
name|humanReadableByteCount
argument_list|(
name|availableDiskSpace
argument_list|)
argument_list|,
name|humanReadableByteCount
argument_list|(
name|repositoryDiskSpace
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updated
operator|&&
operator|!
name|previous
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Available disk space ({}) is sufficient again for repository operations, current repository size is approx. {}"
argument_list|,
name|humanReadableByteCount
argument_list|(
name|availableDiskSpace
argument_list|)
argument_list|,
name|humanReadableByteCount
argument_list|(
name|repositoryDiskSpace
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

