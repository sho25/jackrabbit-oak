begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|com
operator|.
name|arakelian
operator|.
name|docker
operator|.
name|junit
operator|.
name|DockerRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|arakelian
operator|.
name|docker
operator|.
name|junit
operator|.
name|model
operator|.
name|ImmutableDockerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|spotify
operator|.
name|docker
operator|.
name|client
operator|.
name|DefaultDockerClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|spotify
operator|.
name|docker
operator|.
name|client
operator|.
name|auth
operator|.
name|FixedRegistryAuthSupplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * An Elasticsearch {@link DockerRule}.  */
end_comment

begin_class
class|class
name|ElasticsearchDockerRule
extends|extends
name|DockerRule
block|{
comment|//Mimic following:
comment|// docker run -p 9200:9200 -e "discovery.type=single-node" docker.elastic.co/elasticsearch/elasticsearch:7.1.1
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ElasticsearchDockerRule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_NAME
init|=
literal|"Elasticsearch"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VERSION
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"elasticsearch.version"
argument_list|,
literal|"7.1.1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|IMAGE
init|=
literal|"elasticsearch:"
operator|+
name|VERSION
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|DOCKER_AVAILABLE
decl_stmt|;
static|static
block|{
name|boolean
name|available
init|=
literal|false
decl_stmt|;
try|try
init|(
name|DefaultDockerClient
name|client
init|=
name|DefaultDockerClient
operator|.
name|fromEnv
argument_list|()
operator|.
name|connectTimeoutMillis
argument_list|(
literal|5000L
argument_list|)
operator|.
name|readTimeoutMillis
argument_list|(
literal|20000L
argument_list|)
operator|.
name|registryAuthSupplier
argument_list|(
operator|new
name|FixedRegistryAuthSupplier
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|client
operator|.
name|ping
argument_list|()
expr_stmt|;
name|client
operator|.
name|pull
argument_list|(
name|IMAGE
argument_list|)
expr_stmt|;
name|available
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cannot connect to docker or pull image"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|DOCKER_AVAILABLE
operator|=
name|available
expr_stmt|;
block|}
name|ElasticsearchDockerRule
parameter_list|()
block|{
name|super
argument_list|(
name|ImmutableDockerConfig
operator|.
name|builder
argument_list|()
operator|.
name|name
argument_list|(
name|CONFIG_NAME
argument_list|)
operator|.
name|image
argument_list|(
name|IMAGE
argument_list|)
operator|.
name|ports
argument_list|(
literal|"9200"
argument_list|)
operator|.
name|allowRunningBetweenUnitTests
argument_list|(
literal|true
argument_list|)
operator|.
name|alwaysRemoveContainer
argument_list|(
literal|true
argument_list|)
operator|.
name|addStartedListener
argument_list|(
name|container
lambda|->
name|container
operator|.
name|waitForLog
argument_list|(
literal|"LicenseService"
argument_list|)
argument_list|)
operator|.
name|addContainerConfigurer
argument_list|(
name|builder
lambda|->
name|builder
operator|.
name|env
argument_list|(
literal|"discovery.type=single-node"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|getPort
parameter_list|()
block|{
return|return
name|getContainer
argument_list|()
operator|.
name|getPortBinding
argument_list|(
literal|"9200/tcp"
argument_list|)
operator|.
name|getPort
argument_list|()
return|;
block|}
name|boolean
name|isDockerAvailable
parameter_list|()
block|{
return|return
name|DOCKER_AVAILABLE
return|;
block|}
block|}
end_class

end_unit

