begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|JoinCondition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|QueryObjectModelConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|QueryObjectModelFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Source
import|;
end_import

begin_comment
comment|/**  * Enumeration of the JCR 2.0 join types.  *  * @since Apache Jackrabbit 2.0  */
end_comment

begin_enum
specifier|public
enum|enum
name|JoinType
block|{
name|INNER
argument_list|(
name|QueryObjectModelConstants
operator|.
name|JCR_JOIN_TYPE_INNER
argument_list|,
literal|"INNER JOIN"
argument_list|)
block|,
name|LEFT
argument_list|(
name|QueryObjectModelConstants
operator|.
name|JCR_JOIN_TYPE_LEFT_OUTER
argument_list|,
literal|"LEFT OUTER JOIN"
argument_list|)
block|,
name|RIGHT
argument_list|(
name|QueryObjectModelConstants
operator|.
name|JCR_JOIN_TYPE_RIGHT_OUTER
argument_list|,
literal|"RIGHT OUTER JOIN"
argument_list|)
block|;
comment|/**      * JCR name of this join type.      */
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|String
name|sql
decl_stmt|;
name|JoinType
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|sql
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|sql
operator|=
name|sql
expr_stmt|;
block|}
comment|/**      * Returns the join of the given sources.      *      * @param factory factory for creating the join      * @param left left join source      * @param right right join source      * @param condition join condition      * @return join      * @throws RepositoryException if the join can not be created      */
specifier|public
name|Join
name|join
parameter_list|(
name|QueryObjectModelFactory
name|factory
parameter_list|,
name|Source
name|left
parameter_list|,
name|Source
name|right
parameter_list|,
name|JoinCondition
name|condition
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|factory
operator|.
name|join
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|name
argument_list|,
name|condition
argument_list|)
return|;
block|}
comment|/**      * Formats an SQL join with this join type and the given sources and      * join condition. The sources and condition are simply used as-is,      * without any quoting or escaping.      *      * @param left left source      * @param right right source      * @param condition join condition      * @return SQL join, {@code left join right}      */
specifier|public
name|String
name|formatSql
parameter_list|(
name|Object
name|left
parameter_list|,
name|Object
name|right
parameter_list|,
name|Object
name|condition
parameter_list|)
block|{
return|return
name|left
operator|+
literal|" "
operator|+
name|sql
operator|+
literal|' '
operator|+
name|right
operator|+
literal|" ON "
operator|+
name|condition
return|;
block|}
comment|/**      * Returns the JCR 2.0 name of this join type.      *      * @see QueryObjectModelConstants      * @return JCR name of this join type      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Returns the join type with the given JCR name.      *      * @param name JCR name of a join type      * @return join type with the given name      */
specifier|public
specifier|static
name|JoinType
name|getJoinTypeByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|JoinType
name|type
range|:
name|JoinType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|.
name|name
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|type
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown join type name: "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
end_enum

end_unit

