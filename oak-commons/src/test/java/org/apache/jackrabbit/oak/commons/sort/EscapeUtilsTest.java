begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|sort
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|EscapeUtilsTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|noOp
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|EscapeUtils
operator|.
name|escapeLineBreak
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|EscapeUtils
operator|.
name|escapeLineBreak
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|EscapeUtils
operator|.
name|escapeLineBreak
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"some text with multi byte 田中 characters."
argument_list|,
name|EscapeUtils
operator|.
name|escapeLineBreak
argument_list|(
literal|"some text with multi byte 田中 characters."
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEscape
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"ab\\nc\\r"
argument_list|,
name|EscapeUtils
operator|.
name|escapeLineBreak
argument_list|(
literal|"ab\nc\r"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a\\\\z"
argument_list|,
name|EscapeUtils
operator|.
name|escapeLineBreak
argument_list|(
literal|"a\\z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"some text with multi \\nbyte 田中 characters."
argument_list|,
name|EscapeUtils
operator|.
name|escapeLineBreak
argument_list|(
literal|"some text with multi \nbyte 田中 characters."
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noOpUnEscape
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|EscapeUtils
operator|.
name|unescapeLineBreaks
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|EscapeUtils
operator|.
name|unescapeLineBreaks
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc\b"
argument_list|,
name|EscapeUtils
operator|.
name|unescapeLineBreaks
argument_list|(
literal|"abc\b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|EscapeUtils
operator|.
name|unescapeLineBreaks
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"some text with multi byte 田中 characters."
argument_list|,
name|EscapeUtils
operator|.
name|unescapeLineBreaks
argument_list|(
literal|"some text with multi byte 田中 characters."
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnEscape
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"ab\nc\r"
argument_list|,
name|EscapeUtils
operator|.
name|unescapeLineBreaks
argument_list|(
literal|"ab\\nc\\r"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a\\z"
argument_list|,
name|EscapeUtils
operator|.
name|unescapeLineBreaks
argument_list|(
literal|"a\\\\z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"some text with multi \nbyte 田中 characters."
argument_list|,
name|EscapeUtils
operator|.
name|unescapeLineBreaks
argument_list|(
literal|"some text with multi \\nbyte 田中 characters."
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEscapeUnEscape
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEscape
argument_list|(
literal|"ab\nc\r"
argument_list|)
expr_stmt|;
name|assertEscape
argument_list|(
literal|"a\\z"
argument_list|)
expr_stmt|;
name|assertEscape
argument_list|(
literal|"a\\\\z\nc"
argument_list|)
expr_stmt|;
name|assertEscape
argument_list|(
literal|"some text with multi \nbyte \r田中 characters\\."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|invalidUnEscape
parameter_list|()
throws|throws
name|Exception
block|{
name|EscapeUtils
operator|.
name|unescapeLineBreaks
argument_list|(
literal|"abc\\"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|invalidUnEscape2
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Pass an unescaped string. In an escaped string a literal '\'
comment|// would always be escaped
name|EscapeUtils
operator|.
name|unescapeLineBreaks
argument_list|(
literal|"abc\\k\\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|randomized
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100000
condition|;
name|i
operator|++
control|)
block|{
name|int
name|len
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|len
condition|;
name|j
operator|++
control|)
block|{
switch|switch
condition|(
name|r
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|String
name|s
init|=
literal|"\\\r\nrnRN "
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|s
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|buff
operator|.
name|append
argument_list|(
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|4
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|buff
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|r
operator|.
name|nextInt
argument_list|(
literal|65000
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|String
name|original
init|=
name|buff
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|escaped
init|=
name|EscapeUtils
operator|.
name|escapeLineBreak
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|String
name|unescaped
init|=
name|EscapeUtils
operator|.
name|unescapeLineBreaks
argument_list|(
name|escaped
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|escaped
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|escaped
operator|.
name|indexOf
argument_list|(
literal|'\r'
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|original
argument_list|,
name|unescaped
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertEscape
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|String
name|result
init|=
name|EscapeUtils
operator|.
name|unescapeLineBreaks
argument_list|(
name|EscapeUtils
operator|.
name|escapeLineBreak
argument_list|(
name|text
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

