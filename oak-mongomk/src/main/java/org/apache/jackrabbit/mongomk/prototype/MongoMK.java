begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|prototype
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|blob
operator|.
name|MongoBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|prototype
operator|.
name|Node
operator|.
name|Children
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_comment
comment|/**  * A MicroKernel implementation that stores the data in a MongoDB.  */
end_comment

begin_class
specifier|public
class|class
name|MongoMK
implements|implements
name|MicroKernel
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MongoMK
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The number of documents to cache.      */
specifier|static
specifier|final
name|int
name|CACHE_DOCUMENTS
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.mongoMK.cacheDocs"
argument_list|,
literal|20
operator|*
literal|1024
argument_list|)
decl_stmt|;
comment|/**      * The number of child node list entries to cache.      */
specifier|private
specifier|static
specifier|final
name|int
name|CACHE_CHILDREN
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.mongoMK.cacheChildren"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
comment|/**      * The number of nodes to cache.      */
specifier|private
specifier|static
specifier|final
name|int
name|CACHE_NODES
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.mongoMK.cacheNodes"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|WARN_REVISION_AGE
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.mongoMK.revisionAge"
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MongoMK
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The delay for asynchronous operations (delayed commit propagation and      * cache update).      */
comment|// TODO test observation with multiple Oak instances
specifier|protected
specifier|static
specifier|final
name|long
name|ASYNC_DELAY
init|=
literal|1000
decl_stmt|;
comment|/**      * For revisions that are older than this many seconds, the MongoMK will      * assume the revision is valid. For more recent changes, the MongoMK needs      * to verify it first (by reading the revision root). The default is      * Integer.MAX_VALUE, meaning no revisions are trusted. Once the garbage      * collector removes old revisions, this value is changed.      */
specifier|private
specifier|static
specifier|final
name|int
name|trustedRevisionAge
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|AtomicBoolean
name|isDisposed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
comment|/**      * The MongoDB store (might be used by multiple MongoMKs).      */
specifier|private
specifier|final
name|DocumentStore
name|store
decl_stmt|;
comment|/**      * The MongoDB blob store.      */
specifier|private
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
comment|/**      * The unique cluster id, similar to the unique machine id in MongoDB.      */
specifier|private
specifier|final
name|int
name|clusterId
decl_stmt|;
comment|/**      * The node cache.      *      * Key: path@rev      * Value: node      */
specifier|private
specifier|final
name|Cache
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
name|nodeCache
decl_stmt|;
comment|/**      * Child node cache.      */
specifier|private
specifier|final
name|Cache
argument_list|<
name|String
argument_list|,
name|Node
operator|.
name|Children
argument_list|>
name|nodeChildrenCache
decl_stmt|;
comment|/**      * The unsaved last revisions.      * Key: path, value: revision.      */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Revision
argument_list|>
name|unsavedLastRevisions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Revision
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * The last known head revision. This is the last-known revision.      */
specifier|private
name|Revision
name|headRevision
decl_stmt|;
specifier|private
name|Thread
name|backgroundThread
decl_stmt|;
specifier|private
name|int
name|simpleRevisionCounter
decl_stmt|;
comment|/**      * Maps branch commit revision to revision it is based on      */
specifier|private
specifier|final
name|Map
argument_list|<
name|Revision
argument_list|,
name|Revision
argument_list|>
name|branchCommits
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Revision
argument_list|,
name|Revision
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Create a new in-memory MongoMK used for testing.      */
specifier|public
name|MongoMK
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|MemoryDocumentStore
argument_list|()
argument_list|,
operator|new
name|MemoryBlobStore
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new MongoMK.      *       * @param db the MongoDB connection (null for in-memory)      * @param clusterId the cluster id (must be unique)      */
specifier|public
name|MongoMK
parameter_list|(
name|DB
name|db
parameter_list|,
name|int
name|clusterId
parameter_list|)
block|{
name|this
argument_list|(
name|db
operator|==
literal|null
condition|?
operator|new
name|MemoryDocumentStore
argument_list|()
else|:
operator|new
name|MongoDocumentStore
argument_list|(
name|db
argument_list|)
argument_list|,
name|db
operator|==
literal|null
condition|?
operator|new
name|MemoryBlobStore
argument_list|()
else|:
operator|new
name|MongoBlobStore
argument_list|(
name|db
argument_list|)
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new MongoMK.      *      * @param store the store (might be shared)      * @param blobStore the blob store to use      * @param clusterId the cluster id (must be unique)      */
specifier|public
name|MongoMK
parameter_list|(
name|DocumentStore
name|store
parameter_list|,
name|BlobStore
name|blobStore
parameter_list|,
name|int
name|clusterId
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
comment|//TODO Use size based weigher
name|nodeCache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
name|CACHE_NODES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|nodeChildrenCache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
name|CACHE_CHILDREN
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|backgroundThread
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|BackgroundOperation
argument_list|(
name|this
argument_list|,
name|isDisposed
argument_list|)
argument_list|,
literal|"MongoMK background thread"
argument_list|)
expr_stmt|;
name|backgroundThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|backgroundThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
name|void
name|init
parameter_list|()
block|{
name|headRevision
operator|=
name|newRevision
argument_list|()
expr_stmt|;
name|Node
name|n
init|=
name|readNode
argument_list|(
literal|"/"
argument_list|,
name|headRevision
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
comment|// root node is missing: repository is not initialized
name|Commit
name|commit
init|=
operator|new
name|Commit
argument_list|(
name|this
argument_list|,
literal|null
argument_list|,
name|headRevision
argument_list|)
decl_stmt|;
name|n
operator|=
operator|new
name|Node
argument_list|(
literal|"/"
argument_list|,
name|headRevision
argument_list|)
expr_stmt|;
name|commit
operator|.
name|addNode
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|commit
operator|.
name|applyToDocumentStore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// initialize branchCommits
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nodeMap
init|=
name|store
operator|.
name|find
argument_list|(
name|DocumentStore
operator|.
name|Collection
operator|.
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|nodeMap
operator|.
name|get
argument_list|(
name|UpdateOp
operator|.
name|REVISIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|commit
range|:
name|valueMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|commit
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|Revision
name|r
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|commit
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getClusterId
argument_list|()
operator|==
name|clusterId
condition|)
block|{
name|Revision
name|b
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|commit
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|branchCommits
operator|.
name|put
argument_list|(
name|r
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|void
name|useSimpleRevisions
parameter_list|()
block|{
name|this
operator|.
name|simpleRevisionCounter
operator|=
literal|1
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
name|Revision
name|newRevision
parameter_list|()
block|{
if|if
condition|(
name|simpleRevisionCounter
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|Revision
argument_list|(
name|simpleRevisionCounter
operator|++
argument_list|,
literal|0
argument_list|,
name|clusterId
argument_list|)
return|;
block|}
return|return
name|Revision
operator|.
name|newRevision
argument_list|(
name|clusterId
argument_list|)
return|;
block|}
name|void
name|runBackgroundOperations
parameter_list|()
block|{
comment|// to be implemented
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isDisposed
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|isDisposed
init|)
block|{
name|isDisposed
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|backgroundThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|store
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Get the node for the given path and revision. The returned object might      * not be modified directly.      *      * @param path      * @param rev      * @return the node      */
name|Node
name|getNode
parameter_list|(
name|String
name|path
parameter_list|,
name|Revision
name|rev
parameter_list|)
block|{
name|checkRevisionAge
argument_list|(
name|rev
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|path
operator|+
literal|"@"
operator|+
name|rev
decl_stmt|;
name|Node
name|node
init|=
name|nodeCache
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|node
operator|=
name|readNode
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|nodeCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|node
return|;
block|}
specifier|private
name|void
name|checkRevisionAge
parameter_list|(
name|Revision
name|r
parameter_list|,
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|headRevision
operator|.
name|getTimestamp
argument_list|()
operator|-
name|r
operator|.
name|getTimestamp
argument_list|()
operator|>
name|WARN_REVISION_AGE
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Requesting an old revision for path "
operator|+
name|path
operator|+
literal|", "
operator|+
operator|(
operator|(
name|headRevision
operator|.
name|getTimestamp
argument_list|()
operator|-
name|r
operator|.
name|getTimestamp
argument_list|()
operator|)
operator|/
literal|1000
operator|)
operator|+
literal|" seconds old"
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Requesting an old revision"
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|includeRevision
parameter_list|(
name|Revision
name|x
parameter_list|,
name|Revision
name|requestRevision
parameter_list|)
block|{
if|if
condition|(
name|branchCommits
operator|.
name|containsKey
argument_list|(
name|x
argument_list|)
condition|)
block|{
comment|// only include if requested revision is also a branch revision
comment|// with a history including x
name|Revision
name|rev
init|=
name|requestRevision
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|rev
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|rev
operator|.
name|equals
argument_list|(
name|x
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
comment|// not part of branch identified by requestedRevision
return|return
literal|false
return|;
block|}
name|rev
operator|=
name|branchCommits
operator|.
name|get
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
block|}
comment|// assert: x is not a branch commit
while|while
condition|(
name|branchCommits
operator|.
name|containsKey
argument_list|(
name|requestRevision
argument_list|)
condition|)
block|{
comment|// reset requestRevision to branch base revision to make
comment|// sure we don't include revisions committed after branch
comment|// was created
name|requestRevision
operator|=
name|branchCommits
operator|.
name|get
argument_list|(
name|requestRevision
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|x
operator|.
name|getClusterId
argument_list|()
operator|==
name|this
operator|.
name|clusterId
operator|&&
name|requestRevision
operator|.
name|getClusterId
argument_list|()
operator|==
name|this
operator|.
name|clusterId
condition|)
block|{
comment|// both revisions were created by this cluster node:
comment|// compare timestamps only
return|return
name|requestRevision
operator|.
name|compareRevisionTime
argument_list|(
name|x
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|// TODO currently we only compare the timestamps
return|return
name|requestRevision
operator|.
name|compareRevisionTime
argument_list|(
name|x
argument_list|)
operator|>=
literal|0
return|;
block|}
name|boolean
name|isRevisionNewer
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|x
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|previous
parameter_list|)
block|{
comment|// TODO currently we only compare the timestamps
return|return
name|x
operator|.
name|compareRevisionTime
argument_list|(
name|previous
argument_list|)
operator|>
literal|0
return|;
block|}
comment|/**      * Checks if the revision is valid for the given node map. A revision is      * considered valid if the given node map is the root of the commit, or the      * commit root has the revision set. This method may read further nodes to      * perform this check.      * This method also takes pending branches into consideration.      * The<code>readRevision</code> identifies the read revision used by the      * client, which may be a branch revision logged in {@link #branchCommits}.      * The revision<code>rev</code> is valid if it is part of the branch      * history of<code>readRevision</code>.      *      * @param rev     revision to check.      * @param readRevision the read revision of the client.      * @param nodeMap the node to check.      * @return<code>true</code> if the revision is valid;<code>false</code>      *         otherwise.      */
name|boolean
name|isValidRevision
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|rev
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|readRevision
parameter_list|,
annotation|@
name|Nonnull
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nodeMap
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|revisions
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|nodeMap
operator|.
name|get
argument_list|(
name|UpdateOp
operator|.
name|REVISIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|isCommitted
argument_list|(
name|rev
argument_list|,
name|readRevision
argument_list|,
name|revisions
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// check commit root
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|commitRoot
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|)
name|nodeMap
operator|.
name|get
argument_list|(
name|UpdateOp
operator|.
name|COMMIT_ROOT
argument_list|)
decl_stmt|;
name|String
name|commitRootId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|commitRoot
operator|!=
literal|null
condition|)
block|{
name|Integer
name|depth
init|=
name|commitRoot
operator|.
name|get
argument_list|(
name|rev
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|depth
operator|!=
literal|null
condition|)
block|{
name|String
name|p
init|=
name|Utils
operator|.
name|getPathFromId
argument_list|(
operator|(
name|String
operator|)
name|nodeMap
operator|.
name|get
argument_list|(
name|UpdateOp
operator|.
name|ID
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|depth
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|p
argument_list|,
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|p
argument_list|)
operator|-
name|depth
argument_list|)
argument_list|)
expr_stmt|;
name|commitRootId
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|commitRootId
operator|==
literal|null
condition|)
block|{
comment|// shouldn't happen, either node is commit root for a revision
comment|// or has a reference to the commit root
name|log
operator|.
name|warn
argument_list|(
literal|"Node {} does not have commit root reference for revision {}"
argument_list|,
name|nodeMap
operator|.
name|get
argument_list|(
name|UpdateOp
operator|.
name|ID
argument_list|)
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|nodeMap
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// get root of commit
name|nodeMap
operator|=
name|store
operator|.
name|find
argument_list|(
name|DocumentStore
operator|.
name|Collection
operator|.
name|NODES
argument_list|,
name|commitRootId
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeMap
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rootRevisions
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|nodeMap
operator|.
name|get
argument_list|(
name|UpdateOp
operator|.
name|REVISIONS
argument_list|)
decl_stmt|;
return|return
name|isCommitted
argument_list|(
name|rev
argument_list|,
name|readRevision
argument_list|,
name|rootRevisions
argument_list|)
return|;
block|}
comment|/**      * Returns<code>true</code> if the given revision is set to committed in      * the revisions map. That is, the revision exists in the map and the string      * value is<code>"true"</code> or equals the<code>readRevision</code>.      *      * @param revision  the revision to check.      * @param readRevision the read revision.      * @param revisions the revisions map, or<code>null</code> if none is set.      * @return<code>true</code> if the revision is committed, otherwise      *<code>false</code>.      */
specifier|private
name|boolean
name|isCommitted
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|readRevision
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|revisions
parameter_list|)
block|{
if|if
condition|(
name|revision
operator|.
name|equals
argument_list|(
name|readRevision
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|revisions
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|value
init|=
name|revisions
operator|.
name|get
argument_list|(
name|revision
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
operator|&&
operator|!
name|branchCommits
operator|.
name|containsKey
argument_list|(
name|readRevision
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|includeRevision
argument_list|(
name|revision
argument_list|,
name|readRevision
argument_list|)
return|;
block|}
specifier|public
name|Children
name|getChildren
parameter_list|(
name|String
name|path
parameter_list|,
name|Revision
name|rev
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|checkRevisionAge
argument_list|(
name|rev
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|path
operator|+
literal|"@"
operator|+
name|rev
decl_stmt|;
name|Children
name|children
init|=
name|nodeChildrenCache
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
name|children
operator|=
name|readChildren
argument_list|(
name|path
argument_list|,
name|rev
argument_list|,
name|limit
argument_list|)
expr_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
name|nodeChildrenCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|children
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|children
return|;
block|}
name|Node
operator|.
name|Children
name|readChildren
parameter_list|(
name|String
name|path
parameter_list|,
name|Revision
name|rev
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|String
name|from
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|from
operator|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|from
operator|=
name|from
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|from
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|String
name|to
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
literal|"z"
argument_list|)
decl_stmt|;
name|to
operator|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|to
argument_list|)
expr_stmt|;
name|to
operator|=
name|to
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|to
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
operator|+
literal|"0"
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|list
init|=
name|store
operator|.
name|query
argument_list|(
name|DocumentStore
operator|.
name|Collection
operator|.
name|NODES
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|limit
argument_list|)
decl_stmt|;
name|Children
name|c
init|=
operator|new
name|Children
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|list
control|)
block|{
comment|// filter out deleted children
if|if
condition|(
name|getLiveRevision
argument_list|(
name|e
argument_list|,
name|rev
argument_list|)
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// TODO put the whole node in the cache
name|String
name|id
init|=
name|e
operator|.
name|get
argument_list|(
name|UpdateOp
operator|.
name|ID
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|p
init|=
name|Utils
operator|.
name|getPathFromId
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|c
operator|.
name|children
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
specifier|private
name|Node
name|readNode
parameter_list|(
name|String
name|path
parameter_list|,
name|Revision
name|rev
parameter_list|)
block|{
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|store
operator|.
name|find
argument_list|(
name|DocumentStore
operator|.
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Revision
name|min
init|=
name|getLiveRevision
argument_list|(
name|map
argument_list|,
name|rev
argument_list|)
decl_stmt|;
if|if
condition|(
name|min
operator|==
literal|null
condition|)
block|{
comment|// deleted
return|return
literal|null
return|;
block|}
name|Node
name|n
init|=
operator|new
name|Node
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|Revision
name|lastRevision
init|=
literal|null
decl_stmt|;
name|Revision
name|revision
init|=
name|unsavedLastRevisions
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|revision
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isRevisionNewer
argument_list|(
name|revision
argument_list|,
name|rev
argument_list|)
condition|)
block|{
comment|// at most the read revision
name|revision
operator|=
name|rev
expr_stmt|;
block|}
name|lastRevision
operator|=
name|revision
expr_stmt|;
block|}
for|for
control|(
name|String
name|key
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|UpdateOp
operator|.
name|LAST_REV
argument_list|)
condition|)
block|{
name|Object
name|v
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|v
decl_stmt|;
for|for
control|(
name|String
name|r
range|:
name|valueMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|revision
operator|=
name|Revision
operator|.
name|fromString
argument_list|(
name|valueMap
operator|.
name|get
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRevisionNewer
argument_list|(
name|revision
argument_list|,
name|rev
argument_list|)
condition|)
block|{
comment|// at most the read revision
name|revision
operator|=
name|rev
expr_stmt|;
block|}
if|if
condition|(
name|lastRevision
operator|==
literal|null
operator|||
name|isRevisionNewer
argument_list|(
name|revision
argument_list|,
name|lastRevision
argument_list|)
condition|)
block|{
name|lastRevision
operator|=
name|revision
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|Utils
operator|.
name|isPropertyName
argument_list|(
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Object
name|v
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|v
decl_stmt|;
if|if
condition|(
name|valueMap
operator|!=
literal|null
condition|)
block|{
name|String
name|value
init|=
name|getLatestValue
argument_list|(
name|valueMap
argument_list|,
name|min
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|String
name|propertyName
init|=
name|Utils
operator|.
name|unescapePropertyName
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|n
operator|.
name|setLastRevision
argument_list|(
name|lastRevision
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
comment|/**      * Get the latest property value that is larger or equal the min revision,      * and smaller or equal the max revision.      *       * @param valueMap the revision-value map      * @param min the minimum revision (null meaning unlimited)      * @param max the maximum revision      * @return the value, or null if not found      */
specifier|private
name|String
name|getLatestValue
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|valueMap
parameter_list|,
name|Revision
name|min
parameter_list|,
name|Revision
name|max
parameter_list|)
block|{
name|String
name|value
init|=
literal|null
decl_stmt|;
name|Revision
name|latestRev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|r
range|:
name|valueMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Revision
name|propRev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|min
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isRevisionNewer
argument_list|(
name|min
argument_list|,
name|propRev
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|includeRevision
argument_list|(
name|propRev
argument_list|,
name|max
argument_list|)
condition|)
block|{
if|if
condition|(
name|latestRev
operator|==
literal|null
operator|||
name|isRevisionNewer
argument_list|(
name|propRev
argument_list|,
name|latestRev
argument_list|)
condition|)
block|{
name|latestRev
operator|=
name|propRev
expr_stmt|;
name|value
operator|=
name|valueMap
operator|.
name|get
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHeadRevision
parameter_list|()
throws|throws
name|MicroKernelException
block|{
return|return
name|headRevision
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRevisionHistory
parameter_list|(
name|long
name|since
parameter_list|,
name|int
name|maxEntries
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// not currently called by oak-core
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|waitForCommit
parameter_list|(
name|String
name|oldHeadRevisionId
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|MicroKernelException
throws|,
name|InterruptedException
block|{
comment|// not currently called by oak-core
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getJournal
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// not currently called by oak-core
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|diff
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|fromRevisionId
operator|.
name|equals
argument_list|(
name|toRevisionId
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
if|if
condition|(
name|depth
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Only depth 0 is supported, depth is "
operator|+
name|depth
argument_list|)
throw|;
block|}
name|fromRevisionId
operator|=
name|stripBranchRevMarker
argument_list|(
name|fromRevisionId
argument_list|)
expr_stmt|;
name|toRevisionId
operator|=
name|stripBranchRevMarker
argument_list|(
name|toRevisionId
argument_list|)
expr_stmt|;
name|Node
name|from
init|=
name|getNode
argument_list|(
name|path
argument_list|,
name|Revision
operator|.
name|fromString
argument_list|(
name|fromRevisionId
argument_list|)
argument_list|)
decl_stmt|;
name|Node
name|to
init|=
name|getNode
argument_list|(
name|path
argument_list|,
name|Revision
operator|.
name|fromString
argument_list|(
name|toRevisionId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|from
operator|==
literal|null
operator|||
name|to
operator|==
literal|null
condition|)
block|{
comment|// TODO implement correct behavior if the node does't/didn't exist
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Diff is only supported if the node exists in both cases"
argument_list|)
throw|;
block|}
name|JsopWriter
name|w
init|=
operator|new
name|JsopStream
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|from
operator|.
name|getPropertyNames
argument_list|()
control|)
block|{
comment|// changed or removed properties
name|String
name|fromValue
init|=
name|from
operator|.
name|getProperty
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|String
name|toValue
init|=
name|to
operator|.
name|getProperty
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fromValue
operator|.
name|equals
argument_list|(
name|toValue
argument_list|)
condition|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|p
argument_list|)
operator|.
name|value
argument_list|(
name|toValue
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|p
range|:
name|to
operator|.
name|getPropertyNames
argument_list|()
control|)
block|{
comment|// added properties
if|if
condition|(
name|from
operator|.
name|getProperty
argument_list|(
name|p
argument_list|)
operator|==
literal|null
condition|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|p
argument_list|)
operator|.
name|value
argument_list|(
name|to
operator|.
name|getProperty
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
name|Revision
name|fromRev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|fromRevisionId
argument_list|)
decl_stmt|;
name|Revision
name|toRev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|toRevisionId
argument_list|)
decl_stmt|;
comment|// TODO this does not work well for large child node lists
comment|// use a MongoDB index instead
name|Children
name|fromChildren
init|=
name|getChildren
argument_list|(
name|path
argument_list|,
name|fromRev
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|Children
name|toChildren
init|=
name|getChildren
argument_list|(
name|path
argument_list|,
name|toRev
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|childrenSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|toChildren
operator|.
name|children
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|fromChildren
operator|.
name|children
control|)
block|{
if|if
condition|(
operator|!
name|childrenSet
operator|.
name|contains
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'-'
argument_list|)
operator|.
name|key
argument_list|(
name|n
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Node
name|n1
init|=
name|getNode
argument_list|(
name|n
argument_list|,
name|fromRev
argument_list|)
decl_stmt|;
name|Node
name|n2
init|=
name|getNode
argument_list|(
name|n
argument_list|,
name|toRev
argument_list|)
decl_stmt|;
comment|// this is not fully correct:
comment|// a change is detected if the node changed recently,
comment|// even if the revisions are well in the past
comment|// if this is a problem it would need to be changed
if|if
condition|(
operator|!
name|n1
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|n2
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|n
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|childrenSet
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|fromChildren
operator|.
name|children
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|n
range|:
name|toChildren
operator|.
name|children
control|)
block|{
if|if
condition|(
operator|!
name|childrenSet
operator|.
name|contains
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
name|n
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|w
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|nodeExists
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|revisionId
operator|=
name|revisionId
operator|!=
literal|null
condition|?
name|revisionId
else|:
name|headRevision
operator|.
name|toString
argument_list|()
expr_stmt|;
name|Revision
name|rev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|stripBranchRevMarker
argument_list|(
name|revisionId
argument_list|)
argument_list|)
decl_stmt|;
name|Node
name|n
init|=
name|getNode
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
decl_stmt|;
return|return
name|n
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// not currently called by oak-core
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
name|getNodes
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|int
name|depth
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|maxChildNodes
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|depth
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Only depth 0 is supported, depth is "
operator|+
name|depth
argument_list|)
throw|;
block|}
name|revisionId
operator|=
name|revisionId
operator|!=
literal|null
condition|?
name|revisionId
else|:
name|headRevision
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|revisionId
operator|.
name|startsWith
argument_list|(
literal|"b"
argument_list|)
condition|)
block|{
comment|// reading from the branch is reading from the trunk currently
name|revisionId
operator|=
name|revisionId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
literal|'+'
argument_list|,
literal|' '
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|Revision
name|rev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
name|Node
name|n
init|=
name|getNode
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
comment|// throw new MicroKernelException("Node not found at path " + path);
block|}
name|JsopStream
name|json
init|=
operator|new
name|JsopStream
argument_list|()
decl_stmt|;
name|boolean
name|includeId
init|=
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|contains
argument_list|(
literal|":id"
argument_list|)
decl_stmt|;
name|includeId
operator||=
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|contains
argument_list|(
literal|":hash"
argument_list|)
expr_stmt|;
name|json
operator|.
name|object
argument_list|()
expr_stmt|;
name|n
operator|.
name|append
argument_list|(
name|json
argument_list|,
name|includeId
argument_list|)
expr_stmt|;
comment|// FIXME: must not read all children!
name|Children
name|c
init|=
name|getChildren
argument_list|(
name|path
argument_list|,
name|rev
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
name|offset
init|;
name|i
operator|<
name|c
operator|.
name|children
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|maxChildNodes
operator|--
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
name|String
name|name
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|c
operator|.
name|children
operator|.
name|get
argument_list|(
operator|(
name|int
operator|)
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|json
operator|.
name|key
argument_list|(
name|name
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|json
operator|.
name|key
argument_list|(
literal|":childNodeCount"
argument_list|)
operator|.
name|value
argument_list|(
name|c
operator|.
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|String
name|result
init|=
name|json
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// if (filter != null&& filter.contains(":hash")) {
comment|//     result = result.replaceAll("\":id\"", "\":hash\"");
comment|// }
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
name|commit
parameter_list|(
name|String
name|rootPath
parameter_list|,
name|String
name|json
parameter_list|,
name|String
name|baseRevId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|Revision
name|baseRev
decl_stmt|;
if|if
condition|(
name|baseRevId
operator|==
literal|null
condition|)
block|{
name|baseRev
operator|=
name|headRevision
expr_stmt|;
name|baseRevId
operator|=
name|baseRev
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|baseRev
operator|=
name|Revision
operator|.
name|fromString
argument_list|(
name|stripBranchRevMarker
argument_list|(
name|baseRevId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|JsopReader
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|Revision
name|rev
init|=
name|newRevision
argument_list|()
decl_stmt|;
name|Commit
name|commit
init|=
operator|new
name|Commit
argument_list|(
name|this
argument_list|,
name|baseRev
argument_list|,
name|rev
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|r
init|=
name|t
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|JsopReader
operator|.
name|END
condition|)
block|{
break|break;
block|}
name|String
name|path
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|rootPath
argument_list|,
name|t
operator|.
name|readString
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|r
condition|)
block|{
case|case
literal|'+'
case|:
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|parseAddNode
argument_list|(
name|commit
argument_list|,
name|t
argument_list|,
name|path
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'-'
case|:
name|commit
operator|.
name|removeNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|markAsDeleted
argument_list|(
name|path
argument_list|,
name|commit
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|commit
operator|.
name|removeNodeDiff
argument_list|(
name|path
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'^'
case|:
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|value
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|NULL
argument_list|)
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
name|commit
operator|.
name|getDiff
argument_list|()
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|path
argument_list|)
operator|.
name|value
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|t
operator|.
name|readRawValue
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|commit
operator|.
name|getDiff
argument_list|()
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|path
argument_list|)
operator|.
name|value
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|String
name|p
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|propertyName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|commit
operator|.
name|updateProperty
argument_list|(
name|p
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|commit
operator|.
name|updatePropertyDiff
argument_list|(
name|p
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'>'
case|:
block|{
comment|// TODO support moving nodes that were modified within this commit
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|sourcePath
init|=
name|path
decl_stmt|;
name|String
name|targetPath
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
name|targetPath
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|rootPath
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
block|}
name|commit
operator|.
name|moveNode
argument_list|(
name|sourcePath
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
name|moveNode
argument_list|(
name|sourcePath
argument_list|,
name|targetPath
argument_list|,
name|baseRev
argument_list|,
name|commit
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'*'
case|:
block|{
comment|// TODO support copying nodes that were modified within this commit
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|sourcePath
init|=
name|path
decl_stmt|;
name|String
name|targetPath
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
name|targetPath
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|rootPath
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
block|}
name|commit
operator|.
name|copyNode
argument_list|(
name|sourcePath
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
name|copyNode
argument_list|(
name|sourcePath
argument_list|,
name|targetPath
argument_list|,
name|baseRev
argument_list|,
name|commit
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"token: "
operator|+
operator|(
name|char
operator|)
name|t
operator|.
name|getTokenType
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|baseRevId
operator|.
name|startsWith
argument_list|(
literal|"b"
argument_list|)
condition|)
block|{
comment|// remember branch commit
name|branchCommits
operator|.
name|put
argument_list|(
name|rev
argument_list|,
name|baseRev
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// prepare commit
name|commit
operator|.
name|prepare
argument_list|(
name|baseRev
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|branchCommits
operator|.
name|remove
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|"b"
operator|+
name|rev
operator|.
name|toString
argument_list|()
return|;
comment|// String jsonBranch = branchCommits.remove(revisionId);
comment|// jsonBranch += commit.getDiff().toString();
comment|// String branchRev = revisionId + "+";
comment|// branchCommits.put(branchRev, jsonBranch);
comment|// return branchRev;
block|}
name|commit
operator|.
name|apply
argument_list|()
expr_stmt|;
name|headRevision
operator|=
name|commit
operator|.
name|getRevision
argument_list|()
expr_stmt|;
return|return
name|rev
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|copyNode
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|targetPath
parameter_list|,
name|Revision
name|baseRev
parameter_list|,
name|Commit
name|commit
parameter_list|)
block|{
name|moveOrCopyNode
argument_list|(
literal|false
argument_list|,
name|sourcePath
argument_list|,
name|targetPath
argument_list|,
name|baseRev
argument_list|,
name|commit
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|moveNode
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|targetPath
parameter_list|,
name|Revision
name|baseRev
parameter_list|,
name|Commit
name|commit
parameter_list|)
block|{
name|moveOrCopyNode
argument_list|(
literal|true
argument_list|,
name|sourcePath
argument_list|,
name|targetPath
argument_list|,
name|baseRev
argument_list|,
name|commit
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|moveOrCopyNode
parameter_list|(
name|boolean
name|move
parameter_list|,
name|String
name|sourcePath
parameter_list|,
name|String
name|targetPath
parameter_list|,
name|Revision
name|baseRev
parameter_list|,
name|Commit
name|commit
parameter_list|)
block|{
comment|// TODO Optimize - Move logic would not work well with very move of very large subtrees
comment|// At minimum we can optimize by traversing breadth wise and collect node id
comment|// and fetch them via '$in' queries
comment|// TODO Transient Node - Current logic does not account for operations which are part
comment|// of this commit i.e. transient nodes. If its required it would need to be looked
comment|// into
name|Node
name|n
init|=
name|getNode
argument_list|(
name|sourcePath
argument_list|,
name|baseRev
argument_list|)
decl_stmt|;
comment|// Node might be deleted already
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Node
name|newNode
init|=
operator|new
name|Node
argument_list|(
name|targetPath
argument_list|,
name|commit
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
name|n
operator|.
name|copyTo
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
name|commit
operator|.
name|addNode
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|move
condition|)
block|{
name|markAsDeleted
argument_list|(
name|sourcePath
argument_list|,
name|commit
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Node
operator|.
name|Children
name|c
init|=
name|getChildren
argument_list|(
name|sourcePath
argument_list|,
name|baseRev
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|srcChildPath
range|:
name|c
operator|.
name|children
control|)
block|{
name|String
name|childName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|srcChildPath
argument_list|)
decl_stmt|;
name|String
name|destChildPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|targetPath
argument_list|,
name|childName
argument_list|)
decl_stmt|;
name|moveOrCopyNode
argument_list|(
name|move
argument_list|,
name|srcChildPath
argument_list|,
name|destChildPath
argument_list|,
name|baseRev
argument_list|,
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|markAsDeleted
parameter_list|(
name|String
name|path
parameter_list|,
name|Commit
name|commit
parameter_list|,
name|boolean
name|subTreeAlso
parameter_list|)
block|{
name|Revision
name|rev
init|=
name|commit
operator|.
name|getRevision
argument_list|()
decl_stmt|;
name|commit
operator|.
name|removeNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|subTreeAlso
condition|)
block|{
comment|// recurse down the tree
comment|// TODO causes issue with large number of children
name|Node
name|n
init|=
name|getNode
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
decl_stmt|;
comment|// remove from the cache
name|nodeCache
operator|.
name|invalidate
argument_list|(
name|path
operator|+
literal|"@"
operator|+
name|rev
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
name|Node
operator|.
name|Children
name|c
init|=
name|getChildren
argument_list|(
name|path
argument_list|,
name|rev
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|childPath
range|:
name|c
operator|.
name|children
control|)
block|{
name|markAsDeleted
argument_list|(
name|childPath
argument_list|,
name|commit
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|nodeChildrenCache
operator|.
name|invalidate
argument_list|(
name|n
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Remove the node from the cache
name|nodeCache
operator|.
name|invalidate
argument_list|(
name|path
operator|+
literal|"@"
operator|+
name|rev
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the latest revision where the node was alive at or before the      * provided revision.      *       * @param nodeMap the node map      * @param maxRev the maximum revision to return      * @return the earliest revision, or null if the node is deleted at the      *         given revision      */
specifier|private
name|Revision
name|getLiveRevision
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nodeMap
parameter_list|,
name|Revision
name|maxRev
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|nodeMap
operator|.
name|get
argument_list|(
name|UpdateOp
operator|.
name|DELETED
argument_list|)
decl_stmt|;
name|Revision
name|firstRev
init|=
literal|null
decl_stmt|;
name|String
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valueMap
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|String
name|r
range|:
name|valueMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Revision
name|propRev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRevisionNewer
argument_list|(
name|propRev
argument_list|,
name|maxRev
argument_list|)
operator|||
operator|!
name|isValidRevision
argument_list|(
name|propRev
argument_list|,
name|maxRev
argument_list|,
name|nodeMap
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|firstRev
operator|==
literal|null
operator|||
name|isRevisionNewer
argument_list|(
name|propRev
argument_list|,
name|firstRev
argument_list|)
condition|)
block|{
name|firstRev
operator|=
name|propRev
expr_stmt|;
name|value
operator|=
name|valueMap
operator|.
name|get
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|firstRev
return|;
block|}
comment|/**      * Get the revision of the latest change made to this node.      *       * @param nodeMap the document      * @param before the returned value is guaranteed to be older than this revision      * @param onlyCommitted whether only committed changes should be considered      * @return the revision, or null if deleted      */
annotation|@
name|Nullable
name|Revision
name|getNewestRevision
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nodeMap
parameter_list|,
name|Revision
name|before
parameter_list|,
name|boolean
name|onlyCommitted
parameter_list|)
block|{
if|if
condition|(
name|nodeMap
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|nodeMap
operator|.
name|get
argument_list|(
name|UpdateOp
operator|.
name|DELETED
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueMap
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Revision
name|newestRev
init|=
literal|null
decl_stmt|;
name|String
name|newestValue
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|r
range|:
name|valueMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Revision
name|propRev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|newestRev
operator|==
literal|null
operator|||
name|isRevisionNewer
argument_list|(
name|propRev
argument_list|,
name|newestRev
argument_list|)
condition|)
block|{
if|if
condition|(
name|isRevisionNewer
argument_list|(
name|before
argument_list|,
name|propRev
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|onlyCommitted
operator|||
name|isValidRevision
argument_list|(
name|propRev
argument_list|,
name|before
argument_list|,
name|nodeMap
argument_list|)
condition|)
block|{
name|newestRev
operator|=
name|propRev
expr_stmt|;
name|newestValue
operator|=
name|valueMap
operator|.
name|get
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|newestValue
argument_list|)
condition|)
block|{
comment|// deleted in the newest revision
return|return
literal|null
return|;
block|}
return|return
name|newestRev
return|;
block|}
specifier|private
specifier|static
name|String
name|stripBranchRevMarker
parameter_list|(
name|String
name|revisionId
parameter_list|)
block|{
if|if
condition|(
name|revisionId
operator|.
name|startsWith
argument_list|(
literal|"b"
argument_list|)
condition|)
block|{
return|return
name|revisionId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
return|return
name|revisionId
return|;
block|}
specifier|public
specifier|static
name|void
name|parseAddNode
parameter_list|(
name|Commit
name|commit
parameter_list|,
name|JsopReader
name|t
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|Node
name|n
init|=
operator|new
name|Node
argument_list|(
name|path
argument_list|,
name|commit
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|.
name|matches
argument_list|(
literal|'}'
argument_list|)
condition|)
block|{
do|do
block|{
name|String
name|key
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|'{'
argument_list|)
condition|)
block|{
name|String
name|childPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|parseAddNode
argument_list|(
name|commit
argument_list|,
name|t
argument_list|,
name|childPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|value
init|=
name|t
operator|.
name|readRawValue
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
condition|)
do|;
name|t
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
name|commit
operator|.
name|addNode
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|commit
operator|.
name|addNodeDiff
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|branch
parameter_list|(
annotation|@
name|Nullable
name|String
name|trunkRevisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// nothing is written when the branch is created, the returned
comment|// revision simply acts as a reference to the branch base revision
name|String
name|revisionId
init|=
name|trunkRevisionId
operator|!=
literal|null
condition|?
name|trunkRevisionId
else|:
name|headRevision
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
literal|"b"
operator|+
name|revisionId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|merge
parameter_list|(
name|String
name|branchRevisionId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// TODO improve implementation if needed
if|if
condition|(
operator|!
name|branchRevisionId
operator|.
name|startsWith
argument_list|(
literal|"b"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Not a branch: "
operator|+
name|branchRevisionId
argument_list|)
throw|;
block|}
comment|// reading from the branch is reading from the trunk currently
name|String
name|revisionId
init|=
name|branchRevisionId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
literal|'+'
argument_list|,
literal|' '
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// make branch commits visible
name|List
argument_list|<
name|Revision
argument_list|>
name|branchRevisions
init|=
operator|new
name|ArrayList
argument_list|<
name|Revision
argument_list|>
argument_list|()
decl_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
literal|"/"
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Revision
name|baseRevId
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
while|while
condition|(
name|baseRevId
operator|!=
literal|null
condition|)
block|{
name|branchRevisions
operator|.
name|add
argument_list|(
name|baseRevId
argument_list|)
expr_stmt|;
name|op
operator|.
name|set
argument_list|(
name|UpdateOp
operator|.
name|REVISIONS
operator|+
literal|"."
operator|+
name|baseRevId
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|baseRevId
operator|=
name|branchCommits
operator|.
name|get
argument_list|(
name|baseRevId
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|createOrUpdate
argument_list|(
name|DocumentStore
operator|.
name|Collection
operator|.
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
comment|// remove from branchCommits map after successful update
for|for
control|(
name|Revision
name|r
range|:
name|branchRevisions
control|)
block|{
name|branchCommits
operator|.
name|remove
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|headRevision
operator|=
name|newRevision
argument_list|()
expr_stmt|;
return|return
name|headRevision
operator|.
name|toString
argument_list|()
return|;
comment|// TODO improve implementation if needed
comment|// if (!branchRevisionId.startsWith("b")) {
comment|//     throw new MicroKernelException("Not a branch: " + branchRevisionId);
comment|// }
comment|//
comment|// String commit = branchCommits.remove(branchRevisionId);
comment|// return commit("", commit, null, null);
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|String
name|rebase
parameter_list|(
name|String
name|branchRevisionId
parameter_list|,
name|String
name|newBaseRevisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// TODO improve implementation if needed
return|return
name|branchRevisionId
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
try|try
block|{
return|return
name|blobStore
operator|.
name|getBlobLength
argument_list|(
name|blobId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|MicroKernelException
block|{
try|try
block|{
return|return
name|blobStore
operator|.
name|readBlob
argument_list|(
name|blobId
argument_list|,
name|pos
argument_list|,
name|buff
argument_list|,
name|off
argument_list|,
name|length
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|write
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|MicroKernelException
block|{
try|try
block|{
return|return
name|blobStore
operator|.
name|writeBlob
argument_list|(
name|in
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|DocumentStore
name|getDocumentStore
parameter_list|()
block|{
return|return
name|store
return|;
block|}
comment|/**      * A background thread.      */
specifier|static
class|class
name|BackgroundOperation
implements|implements
name|Runnable
block|{
specifier|final
name|WeakReference
argument_list|<
name|MongoMK
argument_list|>
name|ref
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|isDisposed
decl_stmt|;
name|BackgroundOperation
parameter_list|(
name|MongoMK
name|mk
parameter_list|,
name|AtomicBoolean
name|isDisposed
parameter_list|)
block|{
name|ref
operator|=
operator|new
name|WeakReference
argument_list|<
name|MongoMK
argument_list|>
argument_list|(
name|mk
argument_list|)
expr_stmt|;
name|this
operator|.
name|isDisposed
operator|=
name|isDisposed
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|isDisposed
operator|.
name|get
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|isDisposed
init|)
block|{
try|try
block|{
name|isDisposed
operator|.
name|wait
argument_list|(
name|ASYNC_DELAY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|MongoMK
name|mk
init|=
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|mk
operator|!=
literal|null
condition|)
block|{
name|mk
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|applyChanges
parameter_list|(
name|Revision
name|rev
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|isNew
parameter_list|,
name|boolean
name|isDelete
parameter_list|,
name|boolean
name|isWritten
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|added
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|removed
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isWritten
condition|)
block|{
name|unsavedLastRevisions
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unsavedLastRevisions
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|Children
name|c
init|=
name|nodeChildrenCache
operator|.
name|getIfPresent
argument_list|(
name|path
operator|+
literal|"@"
operator|+
name|rev
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNew
operator|||
operator|(
operator|!
name|isDelete
operator|&&
name|c
operator|!=
literal|null
operator|)
condition|)
block|{
name|String
name|key
init|=
name|path
operator|+
literal|"@"
operator|+
name|rev
decl_stmt|;
name|Children
name|c2
init|=
operator|new
name|Children
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|set
operator|.
name|addAll
argument_list|(
name|c
operator|.
name|children
argument_list|)
expr_stmt|;
block|}
name|set
operator|.
name|removeAll
argument_list|(
name|removed
argument_list|)
expr_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|added
argument_list|)
expr_stmt|;
name|c2
operator|.
name|children
operator|.
name|addAll
argument_list|(
name|set
argument_list|)
expr_stmt|;
name|nodeChildrenCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|c2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

