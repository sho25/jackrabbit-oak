begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|testing
operator|.
name|mock
operator|.
name|osgi
operator|.
name|MockOsgi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|testing
operator|.
name|mock
operator|.
name|osgi
operator|.
name|junit
operator|.
name|OsgiContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|IndexInfoServiceImplTest
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|OsgiContext
name|context
init|=
operator|new
name|OsgiContext
argument_list|()
decl_stmt|;
specifier|private
name|IndexInfoServiceImpl
name|service
init|=
operator|new
name|IndexInfoServiceImpl
argument_list|()
decl_stmt|;
specifier|private
name|NodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
specifier|private
name|SimpleIndexPathService
name|pathService
init|=
operator|new
name|SimpleIndexPathService
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|context
operator|.
name|registerService
argument_list|(
name|NodeStore
operator|.
name|class
argument_list|,
name|store
argument_list|)
expr_stmt|;
name|context
operator|.
name|registerService
argument_list|(
name|IndexPathService
operator|.
name|class
argument_list|,
name|pathService
argument_list|)
expr_stmt|;
name|MockOsgi
operator|.
name|injectServices
argument_list|(
name|service
argument_list|,
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexInfo
parameter_list|()
throws|throws
name|Exception
block|{
comment|//1. Test Empty
name|assertNull
argument_list|(
name|service
operator|.
name|getInfo
argument_list|(
literal|"/nonExistingPath"
argument_list|)
argument_list|)
expr_stmt|;
comment|//2. Test when no backing InfoProvider
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|child
argument_list|(
literal|"fooIndex"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"type"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|IndexInfo
name|info
init|=
name|service
operator|.
name|getInfo
argument_list|(
literal|"/oak:index/fooIndex"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/oak:index/fooIndex"
argument_list|,
name|info
operator|.
name|getIndexPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|info
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|//3. Test when backing InfoProvider
name|IndexInfo
name|testInfo
init|=
name|mock
argument_list|(
name|IndexInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|testInfo
operator|.
name|getIndexPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"/some/other/path"
argument_list|)
expr_stmt|;
name|IndexInfoProvider
name|infoProvider
init|=
name|mock
argument_list|(
name|IndexInfoProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|infoProvider
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|infoProvider
operator|.
name|getInfo
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|testInfo
argument_list|)
expr_stmt|;
name|service
operator|.
name|bindInfoProviders
argument_list|(
name|infoProvider
argument_list|)
expr_stmt|;
name|IndexInfo
name|info2
init|=
name|service
operator|.
name|getInfo
argument_list|(
literal|"/oak:index/fooIndex"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|info2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/some/other/path"
argument_list|,
name|info2
operator|.
name|getIndexPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|allIndexInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|pathService
operator|.
name|paths
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"/oak:index/a"
argument_list|,
literal|"/oak:index/b"
argument_list|,
literal|"/oak:index/c"
argument_list|,
literal|"/oak:index/d"
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
comment|//Index with no type
name|builder
operator|.
name|child
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"type"
argument_list|,
literal|"type-b"
argument_list|)
expr_stmt|;
comment|//No backing info provider
name|builder
operator|.
name|child
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"type"
argument_list|,
literal|"type-c"
argument_list|)
expr_stmt|;
comment|//Info provider throws exception
name|builder
operator|.
name|child
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|child
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"type"
argument_list|,
literal|"type-d"
argument_list|)
expr_stmt|;
comment|//Info provider returns result
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|IndexInfoProvider
name|type_c
init|=
name|mock
argument_list|(
name|IndexInfoProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|type_c
operator|.
name|getInfo
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|type_c
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"type-c"
argument_list|)
expr_stmt|;
name|IndexInfo
name|infod
init|=
name|mock
argument_list|(
name|IndexInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|infod
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"type-d"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|infod
operator|.
name|getAsyncLaneName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"async-d"
argument_list|)
expr_stmt|;
name|IndexInfoProvider
name|type_d
init|=
name|mock
argument_list|(
name|IndexInfoProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|type_d
operator|.
name|getInfo
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|infod
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|type_d
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"type-d"
argument_list|)
expr_stmt|;
name|service
operator|.
name|bindInfoProviders
argument_list|(
name|type_c
argument_list|)
expr_stmt|;
name|service
operator|.
name|bindInfoProviders
argument_list|(
name|type_d
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexInfo
argument_list|>
name|infos
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|service
operator|.
name|getAllIndexInfo
argument_list|()
argument_list|)
decl_stmt|;
comment|//Result would only have 2 entries. One throwing exception would be ignored
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|infos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexInfo
name|info
range|:
name|infos
control|)
block|{
if|if
condition|(
name|info
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"type-d"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"async-d"
argument_list|,
name|info
operator|.
name|getAsyncLaneName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|SimpleIndexPathService
implements|implements
name|IndexPathService
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getIndexPaths
parameter_list|()
block|{
return|return
name|paths
return|;
block|}
block|}
block|}
end_class

end_unit

