begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
operator|.
name|KernelNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|TimingDocumentStoreWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CompositeHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|DefaultEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
operator|.
name|CONSTRAINT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|MODIFIED_IN_SECS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|MODIFIED_IN_SECS_RESOLUTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|DocumentNodeStoreTest
block|{
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|Revision
operator|.
name|resetClockToDefault
argument_list|()
expr_stmt|;
block|}
comment|// OAK-1254
annotation|@
name|Test
specifier|public
name|void
name|backgroundRead
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Semaphore
name|semaphore
init|=
operator|new
name|Semaphore
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentStore
name|testStore
init|=
operator|new
name|TimingDocumentStoreWrapper
argument_list|(
name|docStore
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|invalidateCache
parameter_list|()
block|{
name|super
operator|.
name|invalidateCache
argument_list|()
expr_stmt|;
name|semaphore
operator|.
name|acquireUninterruptibly
argument_list|()
expr_stmt|;
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|DocumentNodeStore
name|store1
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|testStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|1
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|store2
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|2
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"node2"
argument_list|)
expr_stmt|;
name|store2
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// force update of _lastRevs
name|store2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// at this point only node2 must not be visible
name|assertFalse
argument_list|(
name|store1
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|store1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"node1"
argument_list|)
expr_stmt|;
name|NodeState
name|root
init|=
name|store1
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|semaphore
operator|.
name|acquireUninterruptibly
argument_list|()
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|store1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// sleep until 'background thread' invalidated cache
comment|// and is waiting for semaphore
while|while
condition|(
operator|!
name|semaphore
operator|.
name|hasQueuedThreads
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|// must still not be visible at this state
try|try
block|{
name|assertFalse
argument_list|(
name|root
operator|.
name|hasChildNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// background operations completed
name|root
operator|=
name|store1
operator|.
name|getRoot
argument_list|()
expr_stmt|;
comment|// now node2 is visible
name|assertTrue
argument_list|(
name|root
operator|.
name|hasChildNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
expr_stmt|;
name|store1
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|store2
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|childNodeCache
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentNodeStore
name|store
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|int
name|max
init|=
call|(
name|int
call|)
argument_list|(
name|KernelNodeState
operator|.
name|MAX_CHILD_NAMES
operator|*
literal|1.5
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|children
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|max
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
literal|"c"
operator|+
name|i
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|String
name|name
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|children
argument_list|)
operator|.
name|get
argument_list|(
name|KernelNodeState
operator|.
name|MAX_CHILD_NAMES
operator|/
literal|2
argument_list|)
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
name|name
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|int
name|numEntries
init|=
name|Iterables
operator|.
name|size
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNodeEntries
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|max
operator|-
literal|1
argument_list|,
name|numEntries
argument_list|)
expr_stmt|;
name|store
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|childNodeEntries
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|DocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|fromKey
parameter_list|,
name|String
name|toKey
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|query
argument_list|(
name|collection
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
name|limit
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DocumentNodeStore
name|store
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|root
operator|.
name|child
argument_list|(
literal|"node-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|merge
argument_list|(
name|root
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|counter
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// the following should just make one call to DocumentStore.query()
for|for
control|(
name|ChildNodeEntry
name|e
range|:
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|e
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|counter
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// now the child node entries are cached and no call should happen
for|for
control|(
name|ChildNodeEntry
name|e
range|:
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|e
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rollback
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|Thread
argument_list|,
name|Semaphore
argument_list|>
name|locks
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Thread
argument_list|,
name|Semaphore
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Semaphore
name|created
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|boolean
name|create
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|updateOps
parameter_list|)
block|{
name|Semaphore
name|semaphore
init|=
name|locks
operator|.
name|get
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
name|super
operator|.
name|create
argument_list|(
name|collection
argument_list|,
name|updateOps
argument_list|)
decl_stmt|;
if|if
condition|(
name|semaphore
operator|!=
literal|null
condition|)
block|{
name|created
operator|.
name|release
argument_list|()
expr_stmt|;
name|semaphore
operator|.
name|acquireUninterruptibly
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Exception
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|DocumentMK
name|mk
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|open
argument_list|()
decl_stmt|;
specifier|final
name|DocumentNodeStore
name|store
init|=
name|mk
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
specifier|final
name|String
name|head
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}+\"bar\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Thread
name|writer
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Revision
name|r
init|=
name|store
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|Commit
name|c
init|=
operator|new
name|Commit
argument_list|(
name|store
argument_list|,
name|Revision
operator|.
name|fromString
argument_list|(
name|head
argument_list|)
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|c
operator|.
name|addNode
argument_list|(
operator|new
name|DocumentNodeState
argument_list|(
name|store
argument_list|,
literal|"/foo/node"
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|addNode
argument_list|(
operator|new
name|DocumentNodeState
argument_list|(
name|store
argument_list|,
literal|"/bar/node"
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|apply
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Semaphore
name|s
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|locks
operator|.
name|put
argument_list|(
name|writer
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|// will block in DocumentStore.create()
name|writer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for writer to create nodes
name|created
operator|.
name|acquireUninterruptibly
argument_list|()
expr_stmt|;
comment|// commit will succeed and add collision marker to writer commit
name|Revision
name|r
init|=
name|store
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|Commit
name|c
init|=
operator|new
name|Commit
argument_list|(
name|store
argument_list|,
name|Revision
operator|.
name|fromString
argument_list|(
name|head
argument_list|)
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|c
operator|.
name|addNode
argument_list|(
operator|new
name|DocumentNodeState
argument_list|(
name|store
argument_list|,
literal|"/foo/node"
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|addNode
argument_list|(
operator|new
name|DocumentNodeState
argument_list|(
name|store
argument_list|,
literal|"/bar/node"
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|apply
argument_list|()
expr_stmt|;
comment|// allow writer to continue
name|s
operator|.
name|release
argument_list|()
expr_stmt|;
name|writer
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected exception"
argument_list|,
literal|1
argument_list|,
name|exceptions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo/node"
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|docStore
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"document with id "
operator|+
name|id
operator|+
literal|" does not exist"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|doc
operator|.
name|getLastRev
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|id
operator|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/bar/node"
argument_list|)
expr_stmt|;
name|doc
operator|=
name|docStore
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"document with id "
operator|+
name|id
operator|+
literal|" does not exist"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|doc
operator|.
name|getLastRev
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|mk
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
comment|// OAK-1662
annotation|@
name|Test
specifier|public
name|void
name|getNewestRevision
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns1
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|1
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|ns1
operator|.
name|getRoot
argument_list|()
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|DocumentNodeStore
name|ns2
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|2
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|ns2
operator|.
name|getRoot
argument_list|()
expr_stmt|;
name|NodeBuilder
name|b1
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NodeDocument
operator|.
name|NUM_REVS_THRESHOLD
condition|;
name|i
operator|++
control|)
block|{
name|b1
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|merge
argument_list|(
name|b1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|NodeBuilder
name|b2
init|=
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b2
operator|.
name|setProperty
argument_list|(
literal|"q"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|merge
argument_list|(
name|b2
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|ns2
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|commitHookChangesOnBranch
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM_NODES
init|=
name|DocumentRootBuilder
operator|.
name|UPDATE_LIMIT
operator|/
literal|2
decl_stmt|;
specifier|final
name|int
name|NUM_PROPS
init|=
literal|10
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NODES
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|c
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_PROPS
condition|;
name|j
operator|++
control|)
block|{
name|c
operator|.
name|setProperty
argument_list|(
literal|"q"
operator|+
name|j
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setProperty
argument_list|(
literal|"p"
operator|+
name|j
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|ns
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|CompositeHook
operator|.
name|compose
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|TestHook
argument_list|(
literal|"p"
argument_list|)
argument_list|,
operator|new
name|TestHook
argument_list|(
literal|"q"
argument_list|)
argument_list|,
name|FAILING_HOOK
argument_list|)
argument_list|)
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"merge must fail and reset changes done by commit hooks"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NODES
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|c
init|=
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_PROPS
condition|;
name|j
operator|++
control|)
block|{
name|PropertyState
name|p
init|=
name|c
operator|.
name|getProperty
argument_list|(
literal|"p"
operator|+
name|j
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// must still see initial values before failed merge
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
comment|// same for property 'qX'
name|p
operator|=
name|c
operator|.
name|getProperty
argument_list|(
literal|"q"
operator|+
name|j
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// must still see initial values before failed merge
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ns
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|CompositeHook
operator|.
name|compose
argument_list|(
name|Arrays
operator|.
expr|<
name|CommitHook
operator|>
name|asList
argument_list|(
operator|new
name|TestHook
argument_list|(
literal|"p"
argument_list|)
argument_list|,
operator|new
name|TestHook
argument_list|(
literal|"q"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|builder
operator|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
comment|// must see properties changed by commit hook
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NODES
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|c
init|=
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_PROPS
condition|;
name|j
operator|++
control|)
block|{
name|PropertyState
name|p
init|=
name|c
operator|.
name|getProperty
argument_list|(
literal|"p"
operator|+
name|j
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|=
name|c
operator|.
name|getProperty
argument_list|(
literal|"q"
operator|+
name|j
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
comment|// OAK-1814
annotation|@
name|Test
specifier|public
name|void
name|visibilityAfterRevisionComparatorPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|Clock
name|clock
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|MemoryDocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|nodeStore1
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|1
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|nodeStore1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|DocumentNodeStore
name|nodeStore2
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|2
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|nodeStore3
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|3
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|docStore
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Revision
name|created
init|=
name|doc
operator|.
name|getLocalDeleted
argument_list|()
operator|.
name|firstKey
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|created
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|DocumentNodeStore
operator|.
name|REMEMBER_REVISION_ORDER_MILLIS
operator|/
literal|2
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|nodeStore2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|nodeStore2
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|nodeStore2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|DocumentNodeStore
operator|.
name|REMEMBER_REVISION_ORDER_MILLIS
operator|+
literal|1000
argument_list|)
expr_stmt|;
name|nodeStore3
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|doc
operator|=
name|docStore
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|NodeState
name|state
init|=
name|doc
operator|.
name|getNodeAtRevision
argument_list|(
name|nodeStore3
argument_list|,
name|nodeStore3
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|nodeStore1
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|nodeStore2
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|nodeStore3
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
comment|// OAK-1820
annotation|@
name|Test
specifier|public
name|void
name|setLastRevOnCommitForNewNode
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentNodeStore
name|ns
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
comment|// add a first child node. this will set the children flag on root
comment|// and move the commit root to the root
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|ns
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// the second time, the added node is also the commit root, this
comment|// is the case we are interested in
name|builder
operator|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|ns
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|ns
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|getLastRev
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"OAK-1822"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|modifiedReset
parameter_list|()
throws|throws
name|Exception
block|{
name|Clock
name|clock
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|MemoryDocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns1
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|1
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder1
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder1
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|merge
argument_list|(
name|builder1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|DocumentNodeStore
name|ns2
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|2
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder2
init|=
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder2
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
operator|.
name|child
argument_list|(
literal|"child-2"
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|merge
argument_list|(
name|builder2
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// wait at least _modified resolution. in reality the wait may
comment|// not be necessary. e.g. when the clock passes the resolution boundary
comment|// exactly at this time
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|MODIFIED_IN_SECS_RESOLUTION
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|builder1
operator|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder1
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
operator|.
name|child
argument_list|(
literal|"child-1"
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|merge
argument_list|(
name|builder1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// get current _modified timestamp on /node
name|NodeDocument
name|doc
init|=
name|docStore
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/node"
argument_list|)
argument_list|)
decl_stmt|;
name|Long
name|mod1
init|=
operator|(
name|Long
operator|)
name|doc
operator|.
name|get
argument_list|(
name|MODIFIED_IN_SECS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mod1
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|doc
operator|=
name|docStore
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/node"
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|mod2
init|=
operator|(
name|Long
operator|)
name|doc
operator|.
name|get
argument_list|(
name|MODIFIED_IN_SECS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|""
operator|+
name|mod2
operator|+
literal|"< "
operator|+
name|mod1
argument_list|,
name|mod2
operator|>=
name|mod1
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|ns2
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"OAK-1822"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|modifiedResetWithDiff
parameter_list|()
throws|throws
name|Exception
block|{
name|Clock
name|clock
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|MemoryDocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns1
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|1
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
comment|// use a no-op diff cache to simulate a cache miss
comment|// when the diff is made later in the test
operator|.
name|setDiffCache
argument_list|(
name|AmnesiaDiffCache
operator|.
name|INSTANCE
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder1
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder1
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DocumentMK
operator|.
name|MANY_CHILDREN_THRESHOLD
condition|;
name|i
operator|++
control|)
block|{
name|builder1
operator|.
name|child
argument_list|(
literal|"node-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|ns1
operator|.
name|merge
argument_list|(
name|builder1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// make sure commit is visible to other node store instance
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|DocumentNodeStore
name|ns2
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|docStore
argument_list|)
operator|.
name|setClusterId
argument_list|(
literal|2
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder2
init|=
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder2
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
operator|.
name|child
argument_list|(
literal|"child-a"
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|merge
argument_list|(
name|builder2
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// wait at least _modified resolution. in reality the wait may
comment|// not be necessary. e.g. when the clock passes the resolution boundary
comment|// exactly at this time
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|MODIFIED_IN_SECS_RESOLUTION
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|builder1
operator|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder1
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
operator|.
name|child
argument_list|(
literal|"child-b"
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|merge
argument_list|(
name|builder1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// remember root for diff
name|DocumentNodeState
name|root1
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|builder1
operator|=
name|root1
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder1
operator|.
name|child
argument_list|(
literal|"node"
argument_list|)
operator|.
name|child
argument_list|(
literal|"child-c"
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|merge
argument_list|(
name|builder1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// remember root for diff
name|DocumentNodeState
name|root2
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|String
name|diff
init|=
name|ns1
operator|.
name|diffChildren
argument_list|(
name|root2
argument_list|,
name|root1
argument_list|)
decl_stmt|;
comment|// must report /node as changed
name|assertEquals
argument_list|(
literal|"^\"node\":{}"
argument_list|,
name|diff
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|ns2
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|TestHook
extends|extends
name|EditorHook
block|{
name|TestHook
parameter_list|(
specifier|final
name|String
name|prefix
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|EditorProvider
argument_list|()
block|{
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|Editor
name|getRootEditor
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
operator|new
name|TestEditor
argument_list|(
name|builder
argument_list|,
name|prefix
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|CommitHook
name|FAILING_HOOK
init|=
operator|new
name|CommitHook
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|processCommit
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|CONSTRAINT
argument_list|,
literal|0
argument_list|,
literal|"fail"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
class|class
name|TestEditor
extends|extends
name|DefaultEditor
block|{
specifier|private
specifier|final
name|NodeBuilder
name|builder
decl_stmt|;
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
name|TestEditor
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
operator|new
name|TestEditor
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|name
argument_list|)
argument_list|,
name|prefix
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|after
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

