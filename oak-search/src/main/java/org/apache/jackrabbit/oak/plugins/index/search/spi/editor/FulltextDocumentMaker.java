begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|spi
operator|.
name|editor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|util
operator|.
name|FunctionIndexProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|StringPropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|util
operator|.
name|ConfigUtil
operator|.
name|getPrimaryTypeName
import|;
end_import

begin_comment
comment|/**  * Abstract implementation of a {@link DocumentMaker}.  *  * @param<D> the type of documents to be indexed specific to subclasses implementations  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|FulltextDocumentMaker
parameter_list|<
name|D
parameter_list|>
implements|implements
name|DocumentMaker
argument_list|<
name|D
argument_list|>
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|FulltextBinaryTextExtractor
name|textExtractor
decl_stmt|;
specifier|private
name|IndexDefinition
name|definition
decl_stmt|;
specifier|private
name|IndexDefinition
operator|.
name|IndexingRule
name|indexingRule
decl_stmt|;
specifier|private
name|String
name|path
decl_stmt|;
specifier|protected
specifier|abstract
name|D
name|initDoc
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|D
name|finalizeDoc
parameter_list|(
name|D
name|fields
parameter_list|,
name|boolean
name|dirty
parameter_list|,
name|boolean
name|facet
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|StringPropertyState
name|createNodeNamePS
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|isFacetingEnabled
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|isNodeName
parameter_list|(
name|String
name|pname
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|indexTypeOrderedFields
parameter_list|(
name|String
name|pname
parameter_list|,
name|int
name|tag
parameter_list|,
name|PropertyState
name|property
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|addBinary
parameter_list|(
name|D
name|doc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|binaryMap
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|indexFacetProperty
parameter_list|(
name|D
name|doc
parameter_list|,
name|int
name|tag
parameter_list|,
name|PropertyState
name|property
parameter_list|,
name|String
name|pname
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|indexAnalyzedProperty
parameter_list|(
name|D
name|doc
parameter_list|,
name|String
name|pname
parameter_list|,
name|String
name|value
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|indexSuggestValue
parameter_list|(
name|D
name|doc
parameter_list|,
name|String
name|value
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|indexSpellcheckValue
parameter_list|(
name|D
name|doc
parameter_list|,
name|String
name|value
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|indexFulltextValue
parameter_list|(
name|D
name|doc
parameter_list|,
name|String
name|value
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|indexTypedProperty
parameter_list|(
name|D
name|doc
parameter_list|,
name|PropertyState
name|property
parameter_list|,
name|String
name|pname
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|indexNotNullProperty
parameter_list|(
name|D
name|doc
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|indexNullProperty
parameter_list|(
name|D
name|doc
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|indexAggregateValue
parameter_list|(
name|D
name|doc
parameter_list|,
name|Aggregate
operator|.
name|NodeIncludeResult
name|result
parameter_list|,
name|String
name|value
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|indexNodeName
parameter_list|(
name|D
name|doc
parameter_list|,
name|String
name|value
parameter_list|)
function_decl|;
annotation|@
name|Nullable
specifier|public
name|D
name|makeDocument
parameter_list|(
name|NodeState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|makeDocument
argument_list|(
name|state
argument_list|,
literal|false
argument_list|,
name|Collections
operator|.
expr|<
name|PropertyState
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|D
name|makeDocument
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|boolean
name|isUpdate
parameter_list|,
name|List
argument_list|<
name|PropertyState
argument_list|>
name|propertiesModified
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|facet
init|=
literal|false
decl_stmt|;
name|D
name|document
init|=
name|initDoc
argument_list|()
decl_stmt|;
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
comment|//We 'intentionally' are indexing node names only on root state as we don't support indexing relative or
comment|//regex for node name indexing
name|PropertyState
name|nodenamePS
init|=
name|createNodeNamePS
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyState
name|property
range|:
name|Iterables
operator|.
name|concat
argument_list|(
name|state
operator|.
name|getProperties
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|nodenamePS
argument_list|)
argument_list|)
control|)
block|{
name|String
name|pname
init|=
name|property
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isVisible
argument_list|(
name|pname
argument_list|)
operator|&&
operator|!
name|isNodeName
argument_list|(
name|pname
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|PropertyDefinition
name|pd
init|=
name|indexingRule
operator|.
name|getConfig
argument_list|(
name|pname
argument_list|)
decl_stmt|;
if|if
condition|(
name|pd
operator|==
literal|null
operator|||
operator|!
name|pd
operator|.
name|index
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|pd
operator|.
name|ordered
condition|)
block|{
name|dirty
operator||=
name|addTypedOrderedFields
argument_list|(
name|document
argument_list|,
name|property
argument_list|,
name|pname
argument_list|,
name|pd
argument_list|)
expr_stmt|;
block|}
name|dirty
operator||=
name|indexProperty
argument_list|(
name|path
argument_list|,
name|document
argument_list|,
name|state
argument_list|,
name|property
argument_list|,
name|pname
argument_list|,
name|pd
argument_list|)
expr_stmt|;
name|facet
operator||=
name|pd
operator|.
name|facet
expr_stmt|;
block|}
name|boolean
index|[]
name|dirties
init|=
name|indexAggregates
argument_list|(
name|path
argument_list|,
name|document
argument_list|,
name|state
argument_list|)
decl_stmt|;
name|dirty
operator||=
name|dirties
index|[
literal|0
index|]
expr_stmt|;
comment|// any (aggregate) indexing happened
name|facet
operator||=
name|dirties
index|[
literal|1
index|]
expr_stmt|;
comment|// facet indexing during (index-time) aggregation
name|dirty
operator||=
name|indexNullCheckEnabledProps
argument_list|(
name|path
argument_list|,
name|document
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|dirty
operator||=
name|indexFunctionRestrictions
argument_list|(
name|path
argument_list|,
name|document
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|dirty
operator||=
name|indexNotNullCheckEnabledProps
argument_list|(
name|path
argument_list|,
name|document
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|dirty
operator||=
name|augmentCustomFields
argument_list|(
name|path
argument_list|,
name|document
argument_list|,
name|state
argument_list|)
expr_stmt|;
comment|// Check if a node having a single property was modified/deleted
if|if
condition|(
operator|!
name|dirty
condition|)
block|{
name|dirty
operator|=
name|indexIfSinglePropertyRemoved
argument_list|(
name|propertiesModified
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isUpdate
operator|&&
operator|!
name|dirty
condition|)
block|{
comment|// updated the state but had no relevant changes
return|return
literal|null
return|;
block|}
name|String
name|name
init|=
name|getName
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexingRule
operator|.
name|isNodeNameIndexed
argument_list|()
condition|)
block|{
name|addNodeNameField
argument_list|(
name|document
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
comment|//For property index no use making an empty document if
comment|//none of the properties are indexed
if|if
condition|(
operator|!
name|indexingRule
operator|.
name|indexesAllNodesOfMatchingType
argument_list|()
operator|&&
operator|!
name|dirty
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|finalizeDoc
argument_list|(
name|document
argument_list|,
name|dirty
argument_list|,
name|facet
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|indexFacets
parameter_list|(
name|D
name|doc
parameter_list|,
name|PropertyState
name|property
parameter_list|,
name|String
name|pname
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
name|int
name|tag
init|=
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
decl_stmt|;
name|int
name|idxDefinedTag
init|=
name|pd
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// Try converting type to the defined type in the index definition
if|if
condition|(
name|tag
operator|!=
name|idxDefinedTag
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] Facet property defined with type {} differs from property {} with type {} in "
operator|+
literal|"path {}"
argument_list|,
name|getIndexName
argument_list|()
argument_list|,
name|Type
operator|.
name|fromTag
argument_list|(
name|idxDefinedTag
argument_list|,
literal|false
argument_list|)
argument_list|,
name|property
operator|.
name|toString
argument_list|()
argument_list|,
name|Type
operator|.
name|fromTag
argument_list|(
name|tag
argument_list|,
literal|false
argument_list|)
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|tag
operator|=
name|idxDefinedTag
expr_stmt|;
block|}
return|return
name|indexFacetProperty
argument_list|(
name|doc
argument_list|,
name|tag
argument_list|,
name|property
argument_list|,
name|pname
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|indexProperty
parameter_list|(
name|String
name|path
parameter_list|,
name|D
name|doc
parameter_list|,
name|NodeState
name|state
parameter_list|,
name|PropertyState
name|property
parameter_list|,
name|String
name|pname
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
name|boolean
name|includeTypeForFullText
init|=
name|indexingRule
operator|.
name|includePropertyType
argument_list|(
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|Type
operator|.
name|BINARY
operator|.
name|tag
argument_list|()
operator|==
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
operator|&&
name|includeTypeForFullText
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|binaryMap
init|=
name|newBinary
argument_list|(
name|property
argument_list|,
name|state
argument_list|,
literal|null
argument_list|,
name|path
operator|+
literal|"@"
operator|+
name|pname
argument_list|)
decl_stmt|;
name|addBinary
argument_list|(
name|doc
argument_list|,
name|binaryMap
argument_list|)
expr_stmt|;
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|pd
operator|.
name|propertyIndex
operator|&&
name|pd
operator|.
name|includePropertyType
argument_list|(
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
argument_list|)
condition|)
block|{
name|dirty
operator||=
name|addTypedFields
argument_list|(
name|doc
argument_list|,
name|property
argument_list|,
name|pname
argument_list|,
name|pd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pd
operator|.
name|fulltextEnabled
argument_list|()
operator|&&
name|includeTypeForFullText
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|includePropertyValue
argument_list|(
name|value
argument_list|,
name|pd
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|pd
operator|.
name|analyzed
operator|&&
name|pd
operator|.
name|includePropertyType
argument_list|(
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
argument_list|)
condition|)
block|{
name|indexAnalyzedProperty
argument_list|(
name|doc
argument_list|,
name|pname
argument_list|,
name|value
argument_list|,
name|pd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pd
operator|.
name|useInSuggest
condition|)
block|{
name|indexSuggestValue
argument_list|(
name|doc
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pd
operator|.
name|useInSpellcheck
condition|)
block|{
name|indexSpellcheckValue
argument_list|(
name|doc
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pd
operator|.
name|nodeScopeIndex
condition|)
block|{
name|indexFulltextValue
argument_list|(
name|doc
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pd
operator|.
name|facet
operator|&&
name|isFacetingEnabled
argument_list|()
condition|)
block|{
name|dirty
operator||=
name|indexFacets
argument_list|(
name|doc
argument_list|,
name|property
argument_list|,
name|pname
argument_list|,
name|pd
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dirty
return|;
block|}
specifier|private
name|boolean
name|addTypedFields
parameter_list|(
name|D
name|doc
parameter_list|,
name|PropertyState
name|property
parameter_list|,
name|String
name|pname
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
return|return
name|indexTypedProperty
argument_list|(
name|doc
argument_list|,
name|property
argument_list|,
name|pname
argument_list|,
name|pd
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|addTypedOrderedFields
parameter_list|(
name|D
name|doc
parameter_list|,
name|PropertyState
name|property
parameter_list|,
name|String
name|pname
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
comment|// Ignore and warn if property multi-valued as not supported
if|if
condition|(
name|property
operator|.
name|getType
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"[{}] Ignoring ordered property {} of type {} for path {} as multivalued ordered property not supported"
argument_list|,
name|getIndexName
argument_list|()
argument_list|,
name|pname
argument_list|,
name|Type
operator|.
name|fromTag
argument_list|(
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|tag
init|=
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
decl_stmt|;
name|int
name|idxDefinedTag
init|=
name|pd
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// Try converting type to the defined type in the index definition
if|if
condition|(
name|tag
operator|!=
name|idxDefinedTag
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] Ordered property defined with type {} differs from property {} with type {} in "
operator|+
literal|"path {}"
argument_list|,
name|getIndexName
argument_list|()
argument_list|,
name|Type
operator|.
name|fromTag
argument_list|(
name|idxDefinedTag
argument_list|,
literal|false
argument_list|)
argument_list|,
name|property
operator|.
name|toString
argument_list|()
argument_list|,
name|Type
operator|.
name|fromTag
argument_list|(
name|tag
argument_list|,
literal|false
argument_list|)
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|tag
operator|=
name|idxDefinedTag
expr_stmt|;
block|}
return|return
name|indexTypeOrderedFields
argument_list|(
name|pname
argument_list|,
name|tag
argument_list|,
name|property
argument_list|,
name|pd
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|includePropertyValue
parameter_list|(
name|PropertyState
name|property
parameter_list|,
name|int
name|i
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
if|if
condition|(
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
operator|==
name|PropertyType
operator|.
name|BINARY
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|pd
operator|.
name|valuePattern
operator|.
name|matchesAll
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|includePropertyValue
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|i
argument_list|)
argument_list|,
name|pd
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|includePropertyValue
parameter_list|(
name|String
name|value
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
return|return
name|pd
operator|.
name|valuePattern
operator|.
name|matches
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isVisible
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|':'
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newBinary
parameter_list|(
name|PropertyState
name|property
parameter_list|,
name|NodeState
name|state
parameter_list|,
name|String
name|nodePath
parameter_list|,
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|textExtractor
operator|==
literal|null
condition|)
block|{
comment|//Skip text extraction for sync indexing
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
return|return
name|textExtractor
operator|.
name|newBinary
argument_list|(
name|property
argument_list|,
name|state
argument_list|,
name|nodePath
argument_list|,
name|path
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|augmentCustomFields
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|D
name|doc
parameter_list|,
specifier|final
name|NodeState
name|document
parameter_list|)
block|{
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
comment|// TODO : extract more generic SPI for augmentor factory
comment|//        if (augmentorFactory != null) {
comment|//            Iterable<Field> augmentedFields = augmentorFactory
comment|//                    .getIndexFieldProvider(indexingRule.getNodeTypeName())
comment|//                    .getAugmentedFields(path, document, definition.getDefinitionNodeState());
comment|//
comment|//            for (Field field : augmentedFields) {
comment|//                fields.add(field);
comment|//                dirty = true;
comment|//            }
comment|//        }
return|return
name|dirty
return|;
block|}
comment|//~-------------------------------------------------------< NullCheck Support>
specifier|private
name|boolean
name|indexNotNullCheckEnabledProps
parameter_list|(
name|String
name|path
parameter_list|,
name|D
name|doc
parameter_list|,
name|NodeState
name|state
parameter_list|)
block|{
name|boolean
name|fieldAdded
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PropertyDefinition
name|pd
range|:
name|indexingRule
operator|.
name|getNotNullCheckEnabledProperties
argument_list|()
control|)
block|{
if|if
condition|(
name|isPropertyNotNull
argument_list|(
name|state
argument_list|,
name|pd
argument_list|)
condition|)
block|{
name|fieldAdded
operator|=
name|indexNotNullProperty
argument_list|(
name|doc
argument_list|,
name|pd
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fieldAdded
return|;
block|}
specifier|private
name|boolean
name|indexNullCheckEnabledProps
parameter_list|(
name|String
name|path
parameter_list|,
name|D
name|doc
parameter_list|,
name|NodeState
name|state
parameter_list|)
block|{
name|boolean
name|fieldAdded
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PropertyDefinition
name|pd
range|:
name|indexingRule
operator|.
name|getNullCheckEnabledProperties
argument_list|()
control|)
block|{
if|if
condition|(
name|isPropertyNull
argument_list|(
name|state
argument_list|,
name|pd
argument_list|)
condition|)
block|{
name|fieldAdded
operator|=
name|indexNullProperty
argument_list|(
name|doc
argument_list|,
name|pd
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fieldAdded
return|;
block|}
specifier|private
name|boolean
name|indexFunctionRestrictions
parameter_list|(
name|String
name|path
parameter_list|,
name|D
name|fields
parameter_list|,
name|NodeState
name|state
parameter_list|)
block|{
name|boolean
name|fieldAdded
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PropertyDefinition
name|pd
range|:
name|indexingRule
operator|.
name|getFunctionRestrictions
argument_list|()
control|)
block|{
name|PropertyState
name|functionValue
init|=
name|calculateValue
argument_list|(
name|path
argument_list|,
name|state
argument_list|,
name|pd
operator|.
name|functionCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|functionValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|pd
operator|.
name|ordered
condition|)
block|{
name|addTypedOrderedFields
argument_list|(
name|fields
argument_list|,
name|functionValue
argument_list|,
name|pd
operator|.
name|function
argument_list|,
name|pd
argument_list|)
expr_stmt|;
block|}
name|addTypedFields
argument_list|(
name|fields
argument_list|,
name|functionValue
argument_list|,
name|pd
operator|.
name|function
argument_list|,
name|pd
argument_list|)
expr_stmt|;
name|fieldAdded
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|fieldAdded
return|;
block|}
specifier|private
name|PropertyState
name|calculateValue
parameter_list|(
name|String
name|path
parameter_list|,
name|NodeState
name|state
parameter_list|,
name|String
index|[]
name|functionCode
parameter_list|)
block|{
try|try
block|{
return|return
name|FunctionIndexProcessor
operator|.
name|tryCalculateValue
argument_list|(
name|path
argument_list|,
name|state
argument_list|,
name|functionCode
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to calculate function value for {} at {}"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|functionCode
argument_list|)
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|boolean
name|indexIfSinglePropertyRemoved
parameter_list|(
name|List
argument_list|<
name|PropertyState
argument_list|>
name|propertiesModified
parameter_list|)
block|{
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PropertyState
name|ps
range|:
name|propertiesModified
control|)
block|{
name|PropertyDefinition
name|pd
init|=
name|indexingRule
operator|.
name|getConfig
argument_list|(
name|ps
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pd
operator|!=
literal|null
operator|&&
name|pd
operator|.
name|index
operator|&&
operator|(
name|pd
operator|.
name|includePropertyType
argument_list|(
name|ps
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
argument_list|)
operator|||
name|indexingRule
operator|.
name|includePropertyType
argument_list|(
name|ps
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|dirty
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|dirty
return|;
block|}
comment|/**      * Determine if the property as defined by PropertyDefinition exists or not.      *      *<p>For relative property if the intermediate nodes do not exist then property is      *<bold>not</bold> considered to be null</p>      *      * @return true if the property does not exist      */
specifier|private
name|boolean
name|isPropertyNull
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
name|NodeState
name|propertyNode
init|=
name|getPropertyNode
argument_list|(
name|state
argument_list|,
name|pd
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propertyNode
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|!
name|propertyNode
operator|.
name|hasProperty
argument_list|(
name|pd
operator|.
name|nonRelativeName
argument_list|)
return|;
block|}
comment|/**      * Determine if the property as defined by PropertyDefinition exists or not.      *      *<p>For relative property if the intermediate nodes do not exist then property is      * considered to be null</p>      *      * @return true if the property exists      */
specifier|private
name|boolean
name|isPropertyNotNull
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
name|NodeState
name|propertyNode
init|=
name|getPropertyNode
argument_list|(
name|state
argument_list|,
name|pd
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propertyNode
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|propertyNode
operator|.
name|hasProperty
argument_list|(
name|pd
operator|.
name|nonRelativeName
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|NodeState
name|getPropertyNode
parameter_list|(
name|NodeState
name|nodeState
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
if|if
condition|(
operator|!
name|pd
operator|.
name|relative
condition|)
block|{
return|return
name|nodeState
return|;
block|}
name|NodeState
name|node
init|=
name|nodeState
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|pd
operator|.
name|ancestors
control|)
block|{
name|node
operator|=
name|node
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
comment|/**      * index aggregates on a certain path      * @param path the path of the node      * @param fields the list of fields      * @param state the node state      * @return an array of booleans whose first element is {@code true} if any indexing has happened      * and the second element is {@code true} if facets on any (aggregate) property have been indexed      */
specifier|private
name|boolean
index|[]
name|indexAggregates
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|D
name|fields
parameter_list|,
specifier|final
name|NodeState
name|state
parameter_list|)
block|{
specifier|final
name|AtomicBoolean
name|dirtyFlag
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|facetFlag
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|indexingRule
operator|.
name|getAggregate
argument_list|()
operator|.
name|collectAggregates
argument_list|(
name|state
argument_list|,
operator|new
name|Aggregate
operator|.
name|ResultCollector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResult
parameter_list|(
name|Aggregate
operator|.
name|NodeIncludeResult
name|result
parameter_list|)
block|{
name|boolean
name|dirty
init|=
name|indexAggregatedNode
argument_list|(
name|path
argument_list|,
name|fields
argument_list|,
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirty
condition|)
block|{
name|dirtyFlag
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onResult
parameter_list|(
name|Aggregate
operator|.
name|PropertyIncludeResult
name|result
parameter_list|)
block|{
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|pd
operator|.
name|ordered
condition|)
block|{
name|dirty
operator||=
name|addTypedOrderedFields
argument_list|(
name|fields
argument_list|,
name|result
operator|.
name|propertyState
argument_list|,
name|result
operator|.
name|propertyPath
argument_list|,
name|result
operator|.
name|pd
argument_list|)
expr_stmt|;
block|}
name|dirty
operator||=
name|indexProperty
argument_list|(
name|path
argument_list|,
name|fields
argument_list|,
name|state
argument_list|,
name|result
operator|.
name|propertyState
argument_list|,
name|result
operator|.
name|propertyPath
argument_list|,
name|result
operator|.
name|pd
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|pd
operator|.
name|facet
condition|)
block|{
name|facetFlag
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dirty
condition|)
block|{
name|dirtyFlag
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
operator|new
name|boolean
index|[]
block|{
name|dirtyFlag
operator|.
name|get
argument_list|()
block|,
name|facetFlag
operator|.
name|get
argument_list|()
block|}
return|;
block|}
comment|/**      * Create the fulltext field from the aggregated nodes. If result is for aggregate for a relative node      * include then      * @param path current node path      * @param doc document      * @param result aggregate result      * @return true if a field was created for passed node result      */
specifier|private
name|boolean
name|indexAggregatedNode
parameter_list|(
name|String
name|path
parameter_list|,
name|D
name|doc
parameter_list|,
name|Aggregate
operator|.
name|NodeIncludeResult
name|result
parameter_list|)
block|{
comment|//rule for node being aggregated might be null if such nodes
comment|//are not indexed on there own. In such cases we rely in current
comment|//rule for some checks
name|IndexDefinition
operator|.
name|IndexingRule
name|ruleAggNode
init|=
name|definition
operator|.
name|getApplicableIndexingRule
argument_list|(
name|getPrimaryTypeName
argument_list|(
name|result
operator|.
name|nodeState
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PropertyState
name|property
range|:
name|result
operator|.
name|nodeState
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|pname
init|=
name|property
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|propertyPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|result
operator|.
name|nodePath
argument_list|,
name|pname
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isVisible
argument_list|(
name|pname
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|//Check if type is indexed
name|int
name|type
init|=
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
decl_stmt|;
if|if
condition|(
name|ruleAggNode
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|ruleAggNode
operator|.
name|includePropertyType
argument_list|(
name|type
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|indexingRule
operator|.
name|includePropertyType
argument_list|(
name|type
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|//Check if any explicit property defn is defined via relative path
comment|// and is marked to exclude this property from being indexed. We exclude
comment|//it from aggregation if
comment|// 1. Its not to be indexed i.e. index=false
comment|// 2. Its explicitly excluded from aggregation i.e. excludeFromAggregation=true
name|PropertyDefinition
name|pdForRootNode
init|=
name|indexingRule
operator|.
name|getConfig
argument_list|(
name|propertyPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|pdForRootNode
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|pdForRootNode
operator|.
name|index
operator|||
name|pdForRootNode
operator|.
name|excludeFromAggregate
operator|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|Type
operator|.
name|BINARY
operator|==
name|property
operator|.
name|getType
argument_list|()
condition|)
block|{
name|String
name|aggreagtedNodePath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|result
operator|.
name|nodePath
argument_list|)
decl_stmt|;
comment|//Here the fulltext is being created for aggregate root hence nodePath passed
comment|//should be null
name|String
name|nodePath
init|=
name|result
operator|.
name|isRelativeNode
argument_list|()
condition|?
name|result
operator|.
name|rootIncludePath
else|:
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|stringStringMap
init|=
name|newBinary
argument_list|(
name|property
argument_list|,
name|result
operator|.
name|nodeState
argument_list|,
name|nodePath
argument_list|,
name|aggreagtedNodePath
operator|+
literal|"@"
operator|+
name|pname
argument_list|)
decl_stmt|;
name|addBinary
argument_list|(
name|doc
argument_list|,
name|stringStringMap
argument_list|)
expr_stmt|;
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|PropertyDefinition
name|pd
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ruleAggNode
operator|!=
literal|null
condition|)
block|{
name|pd
operator|=
name|ruleAggNode
operator|.
name|getConfig
argument_list|(
name|pname
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pd
operator|!=
literal|null
operator|&&
operator|!
name|pd
operator|.
name|nodeScopeIndex
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|String
name|value
range|:
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
control|)
block|{
name|dirty
operator|=
name|indexAggregateValue
argument_list|(
name|doc
argument_list|,
name|result
argument_list|,
name|value
argument_list|,
name|pd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|dirty
return|;
block|}
specifier|private
name|String
name|getIndexName
parameter_list|()
block|{
return|return
name|definition
operator|.
name|getIndexName
argument_list|()
return|;
block|}
comment|/**      * Extracts the local name of the current node ignoring any namespace prefix      *      * @param name node name      */
specifier|private
name|void
name|addNodeNameField
parameter_list|(
name|D
name|doc
parameter_list|,
name|String
name|name
parameter_list|)
block|{
comment|//TODO Need to check if it covers all cases
name|int
name|colon
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|colon
operator|<
literal|0
condition|?
name|name
else|:
name|name
operator|.
name|substring
argument_list|(
name|colon
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|//For now just add a single term. Later we can look into using different analyzer
comment|//to analyze the node name and add multiple terms. Like add multiple terms for a
comment|//cameCase file name to allow faster like search
name|indexNodeName
argument_list|(
name|doc
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

