begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|parser
operator|.
name|JSONParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_comment
comment|/**  * Base class for {@code MongoDB} tests that need the MongoMK.  */
end_comment

begin_class
specifier|public
class|class
name|BaseMongoMicroKernelTest
extends|extends
name|AbstractMongoConnectionTest
block|{
specifier|public
name|MicroKernel
name|mk
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|DB
name|db
init|=
name|mongoConnection
operator|.
name|getDB
argument_list|()
decl_stmt|;
name|mk
operator|=
operator|new
name|MongoMK
operator|.
name|Builder
argument_list|()
operator|.
name|setMongoDB
argument_list|(
name|db
argument_list|)
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|JSONObject
name|getObjectArrayEntry
parameter_list|(
name|JSONArray
name|array
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|pos
operator|>=
literal|0
operator|&&
name|pos
operator|<
name|array
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|entry
init|=
name|array
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|instanceof
name|JSONObject
condition|)
block|{
return|return
operator|(
name|JSONObject
operator|)
name|entry
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"failed to resolve JSONObject array entry at pos "
operator|+
name|pos
operator|+
literal|": "
operator|+
name|entry
argument_list|)
throw|;
block|}
specifier|protected
name|JSONArray
name|parseJSONArray
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|AssertionError
block|{
name|JSONParser
name|parser
init|=
operator|new
name|JSONParser
argument_list|()
decl_stmt|;
try|try
block|{
name|Object
name|obj
init|=
name|parser
operator|.
name|parse
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|JSONArray
argument_list|)
expr_stmt|;
return|return
operator|(
name|JSONArray
operator|)
name|obj
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"not a valid JSON array: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|JSONObject
name|parseJSONObject
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|AssertionError
block|{
name|JSONParser
name|parser
init|=
operator|new
name|JSONParser
argument_list|()
decl_stmt|;
try|try
block|{
name|Object
name|obj
init|=
name|parser
operator|.
name|parse
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|JSONObject
argument_list|)
expr_stmt|;
return|return
operator|(
name|JSONObject
operator|)
name|obj
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"not a valid JSON object: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|assertNodesExist
parameter_list|(
name|String
name|revision
parameter_list|,
name|String
modifier|...
name|paths
parameter_list|)
block|{
name|doAssertNodes
argument_list|(
literal|true
argument_list|,
name|revision
argument_list|,
name|paths
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertNodesNotExist
parameter_list|(
name|String
name|revision
parameter_list|,
name|String
modifier|...
name|paths
parameter_list|)
block|{
name|doAssertNodes
argument_list|(
literal|false
argument_list|,
name|revision
argument_list|,
name|paths
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertPropExists
parameter_list|(
name|String
name|rev
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|property
parameter_list|)
block|{
name|String
name|nodes
init|=
name|mk
operator|.
name|getNodes
argument_list|(
name|path
argument_list|,
name|rev
argument_list|,
literal|0
comment|/*depth*/
argument_list|,
literal|0
comment|/*offset*/
argument_list|,
operator|-
literal|1
comment|/*maxChildNodes*/
argument_list|,
literal|null
comment|/*filter*/
argument_list|)
decl_stmt|;
name|JSONObject
name|obj
init|=
name|parseJSONObject
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
name|assertPropertyExists
argument_list|(
name|obj
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertPropNotExists
parameter_list|(
name|String
name|rev
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|property
parameter_list|)
block|{
name|String
name|nodes
init|=
name|mk
operator|.
name|getNodes
argument_list|(
name|path
argument_list|,
name|rev
argument_list|,
literal|0
comment|/*depth*/
argument_list|,
literal|0
comment|/*offset*/
argument_list|,
operator|-
literal|1
comment|/*maxChildNodes*/
argument_list|,
literal|null
comment|/*filter*/
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|JSONObject
name|obj
init|=
name|parseJSONObject
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
name|assertPropertyNotExists
argument_list|(
name|obj
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertPropValue
parameter_list|(
name|String
name|rev
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|property
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|String
name|nodes
init|=
name|mk
operator|.
name|getNodes
argument_list|(
name|path
argument_list|,
name|rev
argument_list|,
literal|0
comment|/*depth*/
argument_list|,
literal|0
comment|/*offset*/
argument_list|,
operator|-
literal|1
comment|/*maxChildNodes*/
argument_list|,
literal|null
comment|/*filter*/
argument_list|)
decl_stmt|;
name|JSONObject
name|obj
init|=
name|parseJSONObject
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertPropertyExists
parameter_list|(
name|JSONObject
name|obj
parameter_list|,
name|String
name|relPath
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
throws|throws
name|AssertionError
block|{
name|Object
name|val
init|=
name|resolveValue
argument_list|(
name|obj
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"not found: "
operator|+
name|relPath
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|type
operator|.
name|isInstance
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertPropertyExists
parameter_list|(
name|JSONObject
name|obj
parameter_list|,
name|String
name|relPath
parameter_list|)
throws|throws
name|AssertionError
block|{
name|Object
name|val
init|=
name|resolveValue
argument_list|(
name|obj
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"not found: "
operator|+
name|relPath
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertPropertyNotExists
parameter_list|(
name|JSONObject
name|obj
parameter_list|,
name|String
name|relPath
parameter_list|)
throws|throws
name|AssertionError
block|{
name|Object
name|val
init|=
name|resolveValue
argument_list|(
name|obj
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertPropertyValue
parameter_list|(
name|JSONObject
name|obj
parameter_list|,
name|String
name|relPath
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|AssertionError
block|{
name|Object
name|val
init|=
name|resolveValue
argument_list|(
name|obj
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"not found: "
operator|+
name|relPath
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertPropertyValue
parameter_list|(
name|JSONObject
name|obj
parameter_list|,
name|String
name|relPath
parameter_list|,
name|Double
name|expected
parameter_list|)
throws|throws
name|AssertionError
block|{
name|Object
name|val
init|=
name|resolveValue
argument_list|(
name|obj
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"not found: "
operator|+
name|relPath
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertPropertyValue
parameter_list|(
name|JSONObject
name|obj
parameter_list|,
name|String
name|relPath
parameter_list|,
name|Long
name|expected
parameter_list|)
throws|throws
name|AssertionError
block|{
name|Object
name|val
init|=
name|resolveValue
argument_list|(
name|obj
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"not found: "
operator|+
name|relPath
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertPropertyValue
parameter_list|(
name|JSONObject
name|obj
parameter_list|,
name|String
name|relPath
parameter_list|,
name|Boolean
name|expected
parameter_list|)
throws|throws
name|AssertionError
block|{
name|Object
name|val
init|=
name|resolveValue
argument_list|(
name|obj
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"not found: "
operator|+
name|relPath
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doAssertNodes
parameter_list|(
name|boolean
name|checkExists
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
modifier|...
name|paths
parameter_list|)
block|{
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|boolean
name|exists
init|=
name|mk
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|,
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkExists
condition|)
block|{
name|assertTrue
argument_list|(
name|path
operator|+
literal|" does not exist"
argument_list|,
name|exists
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|path
operator|+
literal|" should not exist"
argument_list|,
name|exists
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|JSONObject
name|resolveObjectValue
parameter_list|(
name|JSONObject
name|obj
parameter_list|,
name|String
name|relPath
parameter_list|)
block|{
name|Object
name|val
init|=
name|resolveValue
argument_list|(
name|obj
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|JSONObject
condition|)
block|{
return|return
operator|(
name|JSONObject
operator|)
name|val
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"failed to resolve JSONObject value at "
operator|+
name|relPath
operator|+
literal|": "
operator|+
name|val
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|Object
name|resolveValue
parameter_list|(
name|JSONObject
name|obj
parameter_list|,
name|String
name|relPath
parameter_list|)
block|{
name|String
index|[]
name|names
init|=
name|relPath
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|obj
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|val
operator|instanceof
name|JSONObject
operator|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"not found: "
operator|+
name|relPath
argument_list|)
throw|;
block|}
name|val
operator|=
operator|(
operator|(
name|JSONObject
operator|)
name|val
operator|)
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
block|}
end_class

end_unit

