begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_comment
comment|/**  *<h3>TreeTypeProvider</h3>  * Allows to distinguish different types of trees based on their name, ancestry  * or primary type. Currently the following types are supported:  *  *<ul>  *<li>{@link #TYPE_HIDDEN}: a hidden tree whose name starts with ":".  *     Please note that the whole subtree of a hidden node is considered hidden.</li>  *<li>{@link #TYPE_AC}: A tree that stores access control content  *     and requires special access {@link org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions#READ_ACCESS_CONTROL permissions}.</li>  *<li>{@link #TYPE_VERSION}: if a given tree is located within  *     any of the version related stores defined by JSR 283. Depending on the  *     permission evaluation implementation those items require special treatment.</li>  *<li>{@link #TYPE_INTERNAL}: repository internal content that is not hidden (e.g. permission store)</li>  *<li>{@link #TYPE_DEFAULT}: the default type for trees that don't  *     match any of the upper types.</li>  *</ul>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|TreeTypeProvider
block|{
comment|// regular trees
specifier|public
specifier|static
specifier|final
name|int
name|TYPE_DEFAULT
init|=
literal|1
decl_stmt|;
comment|// version store(s) content
specifier|public
specifier|static
specifier|final
name|int
name|TYPE_VERSION
init|=
literal|2
decl_stmt|;
comment|// repository internal content such as e.g. permissions store
specifier|public
specifier|static
specifier|final
name|int
name|TYPE_INTERNAL
init|=
literal|4
decl_stmt|;
comment|// access control content
specifier|public
specifier|static
specifier|final
name|int
name|TYPE_AC
init|=
literal|8
decl_stmt|;
comment|// hidden trees
specifier|public
specifier|static
specifier|final
name|int
name|TYPE_HIDDEN
init|=
literal|16
decl_stmt|;
specifier|private
specifier|final
name|Context
name|authorizationContext
decl_stmt|;
specifier|public
name|TreeTypeProvider
parameter_list|(
annotation|@
name|Nonnull
name|Context
name|authorizationContext
parameter_list|)
block|{
name|this
operator|.
name|authorizationContext
operator|=
name|authorizationContext
expr_stmt|;
block|}
specifier|public
name|int
name|getType
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|)
block|{
if|if
condition|(
name|tree
operator|.
name|isRoot
argument_list|()
condition|)
block|{
return|return
name|TYPE_DEFAULT
return|;
block|}
else|else
block|{
name|Tree
name|t
init|=
name|tree
decl_stmt|;
while|while
condition|(
operator|!
name|t
operator|.
name|isRoot
argument_list|()
condition|)
block|{
name|int
name|type
init|=
name|getType
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|,
name|t
argument_list|)
decl_stmt|;
comment|// stop walking up the hierarchy as soon as a special type is found
if|if
condition|(
name|TYPE_DEFAULT
operator|!=
name|type
condition|)
block|{
return|return
name|type
return|;
block|}
name|t
operator|=
name|t
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
name|TYPE_DEFAULT
return|;
block|}
block|}
specifier|public
name|int
name|getType
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|,
name|int
name|parentType
parameter_list|)
block|{
if|if
condition|(
name|tree
operator|.
name|isRoot
argument_list|()
condition|)
block|{
return|return
name|TYPE_DEFAULT
return|;
block|}
name|int
name|type
decl_stmt|;
switch|switch
condition|(
name|parentType
condition|)
block|{
case|case
name|TYPE_HIDDEN
case|:
name|type
operator|=
name|TYPE_HIDDEN
expr_stmt|;
break|break;
case|case
name|TYPE_VERSION
case|:
name|type
operator|=
name|TYPE_VERSION
expr_stmt|;
break|break;
case|case
name|TYPE_INTERNAL
case|:
name|type
operator|=
name|TYPE_INTERNAL
expr_stmt|;
break|break;
case|case
name|TYPE_AC
case|:
name|type
operator|=
name|TYPE_AC
expr_stmt|;
break|break;
default|default:
name|type
operator|=
name|getType
argument_list|(
name|tree
operator|.
name|getName
argument_list|()
argument_list|,
name|tree
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
specifier|private
name|int
name|getType
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|,
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|)
block|{
name|int
name|type
decl_stmt|;
if|if
condition|(
name|NodeStateUtils
operator|.
name|isHidden
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|type
operator|=
name|TYPE_HIDDEN
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|VersionConstants
operator|.
name|VERSION_STORE_ROOT_NAMES
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|type
operator|=
operator|(
name|JcrConstants
operator|.
name|JCR_SYSTEM
operator|.
name|equals
argument_list|(
name|tree
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|?
name|TYPE_VERSION
else|:
name|TYPE_DEFAULT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PermissionConstants
operator|.
name|REP_PERMISSION_STORE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|type
operator|=
name|TYPE_INTERNAL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|authorizationContext
operator|.
name|definesContextRoot
argument_list|(
name|tree
argument_list|)
condition|)
block|{
name|type
operator|=
name|TYPE_AC
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|TYPE_DEFAULT
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
block|}
end_class

end_unit

