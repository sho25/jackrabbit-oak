begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|AbstractLazyIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_class
specifier|final
class|class
name|EntryIterator
extends|extends
name|AbstractLazyIterator
argument_list|<
name|PermissionEntry
argument_list|>
block|{
specifier|private
specifier|final
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|predicate
decl_stmt|;
specifier|private
specifier|final
name|EntryCache
name|entryCache
decl_stmt|;
comment|// initially set to empty-iterator to trigger reading entries from the cache
specifier|private
name|Iterator
argument_list|<
name|PermissionEntry
argument_list|>
name|nextEntries
init|=
name|Collections
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
comment|// the next oak path for which to retrieve permission entries
specifier|private
name|String
name|nextPath
decl_stmt|;
name|EntryIterator
parameter_list|(
annotation|@
name|NotNull
name|String
name|path
parameter_list|,
annotation|@
name|NotNull
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|predicate
parameter_list|,
annotation|@
name|NotNull
name|EntryCache
name|entryCache
parameter_list|)
block|{
name|this
operator|.
name|nextPath
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|predicate
operator|=
name|predicate
expr_stmt|;
name|this
operator|.
name|entryCache
operator|=
name|entryCache
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|PermissionEntry
name|getNext
parameter_list|()
block|{
name|PermissionEntry
name|next
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|next
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|nextEntries
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PermissionEntry
name|pe
init|=
name|nextEntries
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|predicate
operator|.
name|apply
argument_list|(
name|pe
argument_list|)
condition|)
block|{
name|next
operator|=
name|pe
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// stop the iteration if entries for the root node have already been processed
if|if
condition|(
name|nextPath
operator|==
literal|null
condition|)
block|{
break|break;
block|}
comment|// obtain entries from the next path in the hierarchy
name|nextEntries
operator|=
name|entryCache
operator|.
name|getEntries
argument_list|(
name|nextPath
argument_list|)
expr_stmt|;
name|nextPath
operator|=
name|getParentPathOrNull
argument_list|(
name|nextPath
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|next
return|;
block|}
annotation|@
name|Nullable
specifier|private
specifier|static
name|String
name|getParentPathOrNull
parameter_list|(
annotation|@
name|NotNull
name|String
name|path
parameter_list|)
block|{
name|String
name|parentPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
operator|(
name|path
operator|.
name|equals
argument_list|(
name|parentPath
argument_list|)
operator|)
condition|?
literal|null
else|:
name|parentPath
return|;
block|}
block|}
end_class

end_unit

