begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|large
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|MultiMkTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_comment
comment|/**  * Test moving nodes.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|LargeNodeTest
extends|extends
name|MultiMkTestBase
block|{
specifier|private
name|String
name|head
decl_stmt|;
specifier|public
name|LargeNodeTest
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|super
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|head
operator|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
expr_stmt|;
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"t\": {\"a\":{}, \"b\":{}, \"c\":{}}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|isSimpleKernel
argument_list|(
name|mk
argument_list|)
condition|)
block|{
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/:root/head/config"
argument_list|,
literal|"^ \"maxMemoryChildren\": "
operator|+
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/:root/head/config"
argument_list|,
literal|"^ \"maxMemoryChildren\": null"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getNodes
parameter_list|()
block|{
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"x0\" : {\"x\": 0, \"x1\":{\"x\":1, \"x2\": {\"x\": -3}}}"
argument_list|,
name|head
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/x0"
argument_list|,
name|head
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\"x\":0,\":childNodeCount\":1,\"x1\":{\"x\":1,\":childNodeCount\":1,\"x2\":{}}}"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/x0"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\"x\":0,\":childNodeCount\":1,\"x1\":{\"x\":1,\":childNodeCount\":1,\"x2\":{}}}"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/x0"
argument_list|,
name|head
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\"x\":0,\":childNodeCount\":1,\"x1\":{}}"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/x0"
argument_list|,
name|head
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\"x\":0,\":childNodeCount\":1}"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"x0\""
argument_list|,
name|head
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|largeNodeListAndGetNodes
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSimpleKernel
argument_list|(
name|mk
argument_list|)
condition|)
block|{
return|return;
block|}
name|int
name|max
init|=
literal|90
decl_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/:root/head/config"
argument_list|,
literal|"^ \"maxMemoryChildren\":"
operator|+
name|max
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\"maxMemoryChildren\":"
operator|+
name|max
operator|+
literal|",\":childNodeCount\":0}"
argument_list|,
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/:root/head/config"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"test\": {}"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"test/"
operator|+
name|i
operator|+
literal|"\": {\"x\":"
operator|+
name|i
operator|+
literal|"}\n"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/test"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test"
argument_list|,
name|head
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|veryLargeNodeList
parameter_list|()
block|{
if|if
condition|(
name|isSimpleKernel
argument_list|(
name|mk
argument_list|)
condition|)
block|{
name|int
name|max
init|=
literal|2000
decl_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/:root/head/config"
argument_list|,
literal|"^ \"maxMemoryChildren\":"
operator|+
name|max
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\"maxMemoryChildren\":"
operator|+
name|max
operator|+
literal|",\":childNodeCount\":0}"
argument_list|,
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/:root/head/config"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"test\": {}"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// added 1000000 nodes 33.93 seconds (1000000 ops; 29471 op/s)
comment|// int count = 1000000;
name|int
name|count
init|=
literal|5000
decl_stmt|;
name|StopWatch
name|timer
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
operator|&&
name|timer
operator|.
name|log
argument_list|()
condition|)
block|{
name|log
argument_list|(
literal|"added "
operator|+
name|i
operator|+
literal|" nodes "
operator|+
name|timer
operator|.
name|operationsPerSecond
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|"+ \"test/"
operator|+
name|i
operator|+
literal|"\": {\"x\":"
operator|+
name|i
operator|+
literal|"}\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
name|buff
operator|.
name|toString
argument_list|()
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|buff
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|log
argument_list|(
literal|"added "
operator|+
name|count
operator|+
literal|" nodes "
operator|+
name|timer
operator|.
name|operationsPerSecond
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|buff
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
name|buff
operator|.
name|toString
argument_list|()
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\":childNodeCount\":"
operator|+
name|count
operator|+
literal|"}"
argument_list|,
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|log
parameter_list|(
name|String
name|s
parameter_list|)
block|{
comment|// System.out.println(url + " " + s);
block|}
annotation|@
name|Test
specifier|public
name|void
name|largeNodeList
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSimpleKernel
argument_list|(
name|mk
argument_list|)
condition|)
block|{
return|return;
block|}
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/:root/head/config"
argument_list|,
literal|"^ \"maxMemoryChildren\": 10"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\"maxMemoryChildren\":10,\":childNodeCount\":0}"
argument_list|,
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/:root/head/config"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"t"
operator|+
name|i
operator|+
literal|"\": {\"x\":"
operator|+
name|i
operator|+
literal|"}"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|boolean
name|largeChildNodeListsAreSorted
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|largeChildNodeListsAreSorted
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\":childNodeCount\":101,\"t\":{\":childNodeCount\":3,\"a\":{},\"b\":{},\"c\":{}},"
operator|+
literal|"\"t0\":{\"x\":0,\":childNodeCount\":0},"
operator|+
literal|"\"t1\":{\"x\":1,\":childNodeCount\":0},"
operator|+
literal|"\"t10\":{\"x\":10,\":childNodeCount\":0},"
operator|+
literal|"\"t11\":{\"x\":11,\":childNodeCount\":0},"
operator|+
literal|"\"t12\":{\"x\":12,\":childNodeCount\":0},"
operator|+
literal|"\"t13\":{\"x\":13,\":childNodeCount\":0},"
operator|+
literal|"\"t14\":{\"x\":14,\":childNodeCount\":0},"
operator|+
literal|"\"t15\":{\"x\":15,\":childNodeCount\":0},"
operator|+
literal|"\"t16\":{\"x\":16,\":childNodeCount\":0}}"
argument_list|,
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\":childNodeCount\":101,"
operator|+
literal|"\"t0\":{\"x\":0,\":childNodeCount\":0},"
operator|+
literal|"\"t1\":{\"x\":1,\":childNodeCount\":0}}"
argument_list|,
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\":childNodeCount\":101,"
operator|+
literal|"\"t17\":{\"x\":17,\":childNodeCount\":0},"
operator|+
literal|"\"t18\":{\"x\":18,\":childNodeCount\":0}}"
argument_list|,
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\":childNodeCount\":101,"
operator|+
literal|"\"t26\":{\"x\":26,\":childNodeCount\":0},"
operator|+
literal|"\"t27\":{\"x\":27,\":childNodeCount\":0}}"
argument_list|,
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\":childNodeCount\":101,"
operator|+
literal|"\"t44\":{\"x\":44,\":childNodeCount\":0},"
operator|+
literal|"\"t45\":{\"x\":45,\":childNodeCount\":0}}"
argument_list|,
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|40
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\":childNodeCount\":101,"
operator|+
literal|"\"t9\":{\"x\":9,\":childNodeCount\":0},"
operator|+
literal|"\"t90\":{\"x\":90,\":childNodeCount\":0}}"
argument_list|,
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|90
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\":childNodeCount\":101,\"t\":{\":childNodeCount\":3,\"a\":{},\"b\":{},\"c\":{}},"
operator|+
literal|"\"t0\":{\"x\":0,\":childNodeCount\":0},"
operator|+
literal|"\"t1\":{\"x\":1,\":childNodeCount\":0},"
operator|+
literal|"\"t2\":{\"x\":2,\":childNodeCount\":0},"
operator|+
literal|"\"t3\":{\"x\":3,\":childNodeCount\":0},"
operator|+
literal|"\"t4\":{\"x\":4,\":childNodeCount\":0},"
operator|+
literal|"\"t5\":{\"x\":5,\":childNodeCount\":0},"
operator|+
literal|"\"t6\":{\"x\":6,\":childNodeCount\":0},"
operator|+
literal|"\"t7\":{\"x\":7,\":childNodeCount\":0},"
operator|+
literal|"\"t8\":{\"x\":8,\":childNodeCount\":0}}"
argument_list|,
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\":childNodeCount\":101,"
operator|+
literal|"\"t0\":{\"x\":0,\":childNodeCount\":0},"
operator|+
literal|"\"t1\":{\"x\":1,\":childNodeCount\":0}}"
argument_list|,
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\":childNodeCount\":101,"
operator|+
literal|"\"t9\":{\"x\":9,\":childNodeCount\":0},"
operator|+
literal|"\"t10\":{\"x\":10,\":childNodeCount\":0}}"
argument_list|,
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\":childNodeCount\":101,"
operator|+
literal|"\"t19\":{\"x\":19,\":childNodeCount\":0},"
operator|+
literal|"\"t20\":{\"x\":20,\":childNodeCount\":0}}"
argument_list|,
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\":childNodeCount\":101,"
operator|+
literal|"\"t39\":{\"x\":39,\":childNodeCount\":0},"
operator|+
literal|"\"t40\":{\"x\":40,\":childNodeCount\":0}}"
argument_list|,
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|40
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\":childNodeCount\":101,"
operator|+
literal|"\"t89\":{\"x\":89,\":childNodeCount\":0},"
operator|+
literal|"\"t90\":{\"x\":90,\":childNodeCount\":0}}"
argument_list|,
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|90
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|offsetLimit
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSimpleKernel
argument_list|(
name|mk
argument_list|)
condition|)
block|{
comment|// TODO fix test since it incorrectly expects a specific order of child nodes
return|return;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{a,b,c}"
argument_list|,
name|getNode
argument_list|(
literal|"/t"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{b,c}"
argument_list|,
name|getNode
argument_list|(
literal|"/t"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{c}"
argument_list|,
name|getNode
argument_list|(
literal|"/t"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{a}"
argument_list|,
name|getNode
argument_list|(
literal|"/t"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{a,b}"
argument_list|,
name|getNode
argument_list|(
literal|"/t"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{b}"
argument_list|,
name|getNode
argument_list|(
literal|"/t"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|commit
parameter_list|(
name|String
name|root
parameter_list|,
name|String
name|diff
parameter_list|)
block|{
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
name|root
argument_list|,
name|diff
argument_list|,
name|head
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getNode
parameter_list|(
name|String
name|node
parameter_list|,
name|int
name|depth
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|String
name|s
init|=
name|mk
operator|.
name|getNodes
argument_list|(
name|node
argument_list|,
name|mk
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
name|depth
argument_list|,
name|offset
argument_list|,
name|count
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|s
operator|=
name|s
operator|.
name|replaceAll
argument_list|(
literal|"\""
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|":childNodeCount:."
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|replaceAll
argument_list|(
literal|"\\{\\,"
argument_list|,
literal|"\\{"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\,\\}"
argument_list|,
literal|"\\}"
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|replaceAll
argument_list|(
literal|"\\:\\{\\}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
block|}
end_class

end_unit

