begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|FileStoreHelper
operator|.
name|openFileStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionParser
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|compaction
operator|.
name|CompactionStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|JournalReader
import|;
end_import

begin_class
class|class
name|CompactCommand
implements|implements
name|Command
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|OptionParser
name|parser
init|=
operator|new
name|OptionParser
argument_list|()
decl_stmt|;
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|directoryArg
init|=
name|parser
operator|.
name|nonOptions
argument_list|(
literal|"Path to segment store (required)"
argument_list|)
operator|.
name|ofType
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|Void
argument_list|>
name|forceFlag
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"force"
argument_list|,
literal|"Force compaction and ignore non matching segment version"
argument_list|)
decl_stmt|;
name|OptionSet
name|options
init|=
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|directoryArg
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Compact a file store. Usage: compact [path]<options>"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|Stopwatch
name|watch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|FileStore
name|store
init|=
name|openFileStore
argument_list|(
name|path
argument_list|,
name|options
operator|.
name|has
argument_list|(
name|forceFlag
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|boolean
name|persistCM
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"tar.PersistCompactionMap"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Compacting "
operator|+
name|directory
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    before "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|directory
operator|.
name|list
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|sizeBefore
init|=
name|FileUtils
operator|.
name|sizeOfDirectory
argument_list|(
name|directory
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    size "
operator|+
name|IOUtils
operator|.
name|humanReadableByteCount
argument_list|(
name|sizeBefore
argument_list|)
operator|+
literal|" ("
operator|+
name|sizeBefore
operator|+
literal|" bytes)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    -> compacting"
argument_list|)
expr_stmt|;
name|CompactionStrategy
name|compactionStrategy
init|=
operator|new
name|CompactionStrategy
argument_list|(
literal|false
argument_list|,
name|CompactionStrategy
operator|.
name|CLONE_BINARIES_DEFAULT
argument_list|,
name|CompactionStrategy
operator|.
name|CleanupType
operator|.
name|CLEAN_ALL
argument_list|,
literal|0
argument_list|,
name|CompactionStrategy
operator|.
name|MEMORY_THRESHOLD_DEFAULT
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|compacted
parameter_list|(
name|Callable
argument_list|<
name|Boolean
argument_list|>
name|setHead
parameter_list|)
throws|throws
name|Exception
block|{
comment|// oak-run is doing compaction single-threaded
comment|// hence no guarding needed - go straight ahead
comment|// and call setHead
return|return
name|setHead
operator|.
name|call
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|compactionStrategy
operator|.
name|setOfflineCompaction
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|compactionStrategy
operator|.
name|setPersistCompactionMap
argument_list|(
name|persistCM
argument_list|)
expr_stmt|;
name|store
operator|.
name|setCompactionStrategy
argument_list|(
name|compactionStrategy
argument_list|)
expr_stmt|;
name|store
operator|.
name|compact
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    -> cleaning up"
argument_list|)
expr_stmt|;
name|store
operator|=
name|openFileStore
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|File
name|file
range|:
name|store
operator|.
name|cleanup
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|||
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    -> removed old file "
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    -> failed to remove old file "
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|head
decl_stmt|;
name|File
name|journal
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
literal|"journal.log"
argument_list|)
decl_stmt|;
name|JournalReader
name|journalReader
init|=
operator|new
name|JournalReader
argument_list|(
name|journal
argument_list|)
decl_stmt|;
try|try
block|{
name|head
operator|=
name|journalReader
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|+
literal|" root "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|"\n"
expr_stmt|;
block|}
finally|finally
block|{
name|journalReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|RandomAccessFile
name|journalFile
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|journal
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    -> writing new "
operator|+
name|journal
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|head
argument_list|)
expr_stmt|;
name|journalFile
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|journalFile
operator|.
name|writeBytes
argument_list|(
name|head
argument_list|)
expr_stmt|;
name|journalFile
operator|.
name|getChannel
argument_list|()
operator|.
name|force
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|journalFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|watch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    after  "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|directory
operator|.
name|list
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|sizeAfter
init|=
name|FileUtils
operator|.
name|sizeOfDirectory
argument_list|(
name|directory
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    size "
operator|+
name|IOUtils
operator|.
name|humanReadableByteCount
argument_list|(
name|sizeAfter
argument_list|)
operator|+
literal|" ("
operator|+
name|sizeAfter
operator|+
literal|" bytes)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    duration  "
operator|+
name|watch
operator|.
name|toString
argument_list|()
operator|+
literal|" ("
operator|+
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|+
literal|"s)."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

