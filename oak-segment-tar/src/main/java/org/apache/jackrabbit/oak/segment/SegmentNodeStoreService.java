begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
operator|.
name|isNullOrEmpty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|closeQuietly
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
operator|.
name|toBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
operator|.
name|toInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
operator|.
name|toLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiUtil
operator|.
name|lookupConfigurationThenFramework
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreUtils
operator|.
name|isShared
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|identifier
operator|.
name|ClusterRepositoryInfo
operator|.
name|getOrCreateId
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|CachingSegmentReader
operator|.
name|DEFAULT_STRING_CACHE_MB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|CachingSegmentReader
operator|.
name|DEFAULT_TEMPLATE_CACHE_MB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentCache
operator|.
name|DEFAULT_SEGMENT_CACHE_MB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|BACKUP_DIRECTORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|COMPACTION_DISABLE_ESTIMATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|COMPACTION_FORCE_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|COMPACTION_RETRY_COUNT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|COMPACTION_SIZE_DELTA_ESTIMATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|CUSTOM_BLOB_STORE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|DEFAULT_BLOB_GC_MAX_AGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|DEFAULT_BLOB_SNAPSHOT_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|DIRECTORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|GC_PROGRESS_LOG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|MEMORY_THRESHOLD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|MODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|NODE_DEDUPLICATION_CACHE_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|PAUSE_COMPACTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|PROP_BLOB_GC_MAX_AGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|PROP_BLOB_SNAPSHOT_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|RETAINED_GENERATIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|SEGMENT_CACHE_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|STANDBY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|STRING_CACHE_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|STRING_DEDUPLICATION_CACHE_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|TEMPLATE_CACHE_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreService
operator|.
name|TEMPLATE_DEDUPLICATION_CACHE_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNotFoundExceptionListener
operator|.
name|IGNORE_SNFE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|WriterCacheManager
operator|.
name|DEFAULT_NODE_CACHE_SIZE_OSGi
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|WriterCacheManager
operator|.
name|DEFAULT_STRING_CACHE_SIZE_OSGi
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|WriterCacheManager
operator|.
name|DEFAULT_TEMPLATE_CACHE_SIZE_OSGi
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|DISABLE_ESTIMATION_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|FORCE_TIMEOUT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|GC_PROGRESS_LOG_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|MEMORY_THRESHOLD_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|PAUSE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|RETAINED_GENERATIONS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|RETRY_COUNT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|SIZE_DELTA_ESTIMATION_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
operator|.
name|DEFAULT_MAX_FILE_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|osgi
operator|.
name|SplitBlobStoreService
operator|.
name|ONLY_STANDALONE_TARGET
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|SimpleValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CacheStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CheckpointMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|FileStoreBackupRestoreMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|backup
operator|.
name|impl
operator|.
name|FileStoreBackupRestoreImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|ObserverTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobGC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobGCMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobGarbageCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobTrackingStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|MarkSweepGarbageCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|SharedDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|BlobIdTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreUtils
operator|.
name|SharedStoreRecordType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|identifier
operator|.
name|ClusterRepositoryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentRevisionGC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentRevisionGCMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreGCMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|InvalidFileStoreVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|gc
operator|.
name|GCMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|gc
operator|.
name|GCMonitorTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|RevisionGC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|RevisionGCMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|AbstractServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|GenericDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * An OSGi wrapper for the segment node store.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"Oak Segment Tar NodeStore service"
argument_list|,
name|description
operator|=
literal|"Apache Jackrabbit Oak NodeStore implementation based on the segment model. "
operator|+
literal|"For configuration refer to http://jackrabbit.apache.org/oak/docs/osgi_config.html#SegmentNodeStore. "
operator|+
literal|"Note that for system stability purpose it is advisable to not change these settings "
operator|+
literal|"at runtime. Instead the config change should be done via file system based config "
operator|+
literal|"file and this view should ONLY be used to determine which options are supported."
argument_list|)
specifier|public
class|class
name|SegmentNodeStoreService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SegmentNodeStoreService
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Directory"
argument_list|,
name|description
operator|=
literal|"Directory for storing the tar files. Defaults to the value of the framework "
operator|+
literal|"property 'repository.home' or to 'repository' if that is neither specified."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|DIRECTORY
init|=
literal|"repository.home"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Mode"
argument_list|,
name|description
operator|=
literal|"TarMK mode (64 for memory mapped file access, 32 for normal file access). "
operator|+
literal|"Default value is taken from the 'sun.arch.data.model' system property."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|MODE
init|=
literal|"tarmk.mode"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|DEFAULT_MAX_FILE_SIZE
argument_list|,
name|label
operator|=
literal|"Maximum tar file size (MB)"
argument_list|,
name|description
operator|=
literal|"The maximum size of the tar files in megabytes. "
operator|+
literal|"Default value is '"
operator|+
name|DEFAULT_MAX_FILE_SIZE
operator|+
literal|"'."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|SIZE
init|=
literal|"tarmk.size"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|DEFAULT_SEGMENT_CACHE_MB
argument_list|,
name|label
operator|=
literal|"Segment cache size (MB)"
argument_list|,
name|description
operator|=
literal|"Cache size for storing most recently used segments in megabytes. "
operator|+
literal|"Default value is '"
operator|+
name|DEFAULT_SEGMENT_CACHE_MB
operator|+
literal|"'."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|SEGMENT_CACHE_SIZE
init|=
literal|"segmentCache.size"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|DEFAULT_STRING_CACHE_MB
argument_list|,
name|label
operator|=
literal|"String cache size (MB)"
argument_list|,
name|description
operator|=
literal|"Cache size for storing most recently used strings in megabytes. "
operator|+
literal|"Default value is '"
operator|+
name|DEFAULT_STRING_CACHE_MB
operator|+
literal|"'."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|STRING_CACHE_SIZE
init|=
literal|"stringCache.size"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|DEFAULT_TEMPLATE_CACHE_MB
argument_list|,
name|label
operator|=
literal|"Template cache size (MB)"
argument_list|,
name|description
operator|=
literal|"Cache size for storing most recently used templates in megabytes. "
operator|+
literal|"Default value is '"
operator|+
name|DEFAULT_TEMPLATE_CACHE_MB
operator|+
literal|"'."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|TEMPLATE_CACHE_SIZE
init|=
literal|"templateCache.size"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|DEFAULT_STRING_CACHE_SIZE_OSGi
argument_list|,
name|label
operator|=
literal|"String deduplication cache size (#items)"
argument_list|,
name|description
operator|=
literal|"Maximum number of strings to keep in the deduplication cache. "
operator|+
literal|"Default value is '"
operator|+
name|DEFAULT_STRING_CACHE_SIZE_OSGi
operator|+
literal|"'."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|STRING_DEDUPLICATION_CACHE_SIZE
init|=
literal|"stringDeduplicationCache.size"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|DEFAULT_TEMPLATE_CACHE_SIZE_OSGi
argument_list|,
name|label
operator|=
literal|"Template deduplication cache size (#items)"
argument_list|,
name|description
operator|=
literal|"Maximum number of templates to keep in the deduplication cache. "
operator|+
literal|"Default value is '"
operator|+
name|DEFAULT_TEMPLATE_CACHE_SIZE_OSGi
operator|+
literal|"'."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|TEMPLATE_DEDUPLICATION_CACHE_SIZE
init|=
literal|"templateDeduplicationCache.size"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|DEFAULT_NODE_CACHE_SIZE_OSGi
argument_list|,
name|label
operator|=
literal|"Node deduplication cache size (#items)"
argument_list|,
name|description
operator|=
literal|"Maximum number of node to keep in the deduplication cache. If the supplied "
operator|+
literal|"value is not a power of 2, it will be rounded up to the next power of 2. "
operator|+
literal|"Default value is '"
operator|+
name|DEFAULT_NODE_CACHE_SIZE_OSGi
operator|+
literal|"'."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|NODE_DEDUPLICATION_CACHE_SIZE
init|=
literal|"nodeDeduplicationCache.size"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
name|PAUSE_DEFAULT
argument_list|,
name|label
operator|=
literal|"Pause compaction"
argument_list|,
name|description
operator|=
literal|"When set to true the compaction phase is skipped during garbage collection. "
operator|+
literal|"Default value is '"
operator|+
name|PAUSE_DEFAULT
operator|+
literal|"'."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PAUSE_COMPACTION
init|=
literal|"pauseCompaction"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|RETRY_COUNT_DEFAULT
argument_list|,
name|label
operator|=
literal|"Compaction retries"
argument_list|,
name|description
operator|=
literal|"Number of tries to compact concurrent commits on top of already "
operator|+
literal|"compacted commits. "
operator|+
literal|"Default value is '"
operator|+
name|RETRY_COUNT_DEFAULT
operator|+
literal|"'."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|COMPACTION_RETRY_COUNT
init|=
literal|"compaction.retryCount"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|FORCE_TIMEOUT_DEFAULT
argument_list|,
name|label
operator|=
literal|"Force compaction timeout"
argument_list|,
name|description
operator|=
literal|"Number of seconds to attempt to force compact concurrent commits on top "
operator|+
literal|"of already compacted commits after the maximum number of retries has been "
operator|+
literal|"reached. Forced compaction tries to acquire an exclusive write lock on the "
operator|+
literal|"node store, blocking concurrent write access as long as the lock is held. "
operator|+
literal|"Default value is '"
operator|+
name|FORCE_TIMEOUT_DEFAULT
operator|+
literal|"'."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|COMPACTION_FORCE_TIMEOUT
init|=
literal|"compaction.force.timeout"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|longValue
operator|=
name|SIZE_DELTA_ESTIMATION_DEFAULT
argument_list|,
name|label
operator|=
literal|"Garbage collection repository size threshold"
argument_list|,
name|description
operator|=
literal|"Garbage collection will be skipped unless the repository grew at least by "
operator|+
literal|"the number of bytes specified. "
operator|+
literal|"Default value is '"
operator|+
name|SIZE_DELTA_ESTIMATION_DEFAULT
operator|+
literal|"'."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|COMPACTION_SIZE_DELTA_ESTIMATION
init|=
literal|"compaction.sizeDeltaEstimation"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
name|DISABLE_ESTIMATION_DEFAULT
argument_list|,
name|label
operator|=
literal|"Disable estimation phase"
argument_list|,
name|description
operator|=
literal|"Disables the estimation phase allowing garbage collection to run unconditionally. "
operator|+
literal|"Default value is '"
operator|+
name|DISABLE_ESTIMATION_DEFAULT
operator|+
literal|"'."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|COMPACTION_DISABLE_ESTIMATION
init|=
literal|"compaction.disableEstimation"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|RETAINED_GENERATIONS_DEFAULT
argument_list|,
name|label
operator|=
literal|"Compaction retained generations"
argument_list|,
name|description
operator|=
literal|"Number of segment generations to retain during garbage collection. "
operator|+
literal|"Must be set to at least 2. "
operator|+
literal|"Default value is '"
operator|+
name|RETAINED_GENERATIONS_DEFAULT
operator|+
literal|"'."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|RETAINED_GENERATIONS
init|=
literal|"compaction.retainedGenerations"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|MEMORY_THRESHOLD_DEFAULT
argument_list|,
name|label
operator|=
literal|"Compaction memory threshold"
argument_list|,
name|description
operator|=
literal|"Threshold of available heap memory in percent of total heap memory below "
operator|+
literal|"which the compaction phase is canceled. 0 disables heap memory monitoring. "
operator|+
literal|"Default value is '"
operator|+
name|MEMORY_THRESHOLD_DEFAULT
operator|+
literal|"'."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|MEMORY_THRESHOLD
init|=
literal|"compaction.memoryThreshold"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|longValue
operator|=
name|GC_PROGRESS_LOG_DEFAULT
argument_list|,
name|label
operator|=
literal|"Compaction progress log"
argument_list|,
name|description
operator|=
literal|"The number of nodes compacted after which a status message is logged. "
operator|+
literal|"-1 disables progress logging. "
operator|+
literal|"Default value is '"
operator|+
name|GC_PROGRESS_LOG_DEFAULT
operator|+
literal|"'."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|GC_PROGRESS_LOG
init|=
literal|"compaction.progressLog"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
literal|false
argument_list|,
name|label
operator|=
literal|"Standby mode"
argument_list|,
name|description
operator|=
literal|"Flag indicating this component will not register as a NodeStore but as a "
operator|+
literal|"NodeStoreProvider instead. "
operator|+
literal|"Default value is 'false'."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|STANDBY
init|=
literal|"standby"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
literal|false
argument_list|,
name|label
operator|=
literal|"Custom blob store"
argument_list|,
name|description
operator|=
literal|"Boolean value indicating that a custom BlobStore is used for storing "
operator|+
literal|"large binary values. "
operator|+
literal|"Default value is 'false'."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_BLOB_STORE
init|=
literal|"customBlobStore"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Backup directory"
argument_list|,
name|description
operator|=
literal|"Directory (relative to current working directory) for storing repository backups. "
operator|+
literal|"Defaults to 'repository.home/segmentstore-backup'."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|BACKUP_DIRECTORY
init|=
literal|"repository.backup.dir"
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|STATIC
argument_list|,
name|policyOption
operator|=
name|ReferencePolicyOption
operator|.
name|GREEDY
argument_list|,
name|target
operator|=
name|ONLY_STANDALONE_TARGET
argument_list|)
specifier|private
specifier|volatile
name|BlobStore
name|blobStore
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|StatisticsProvider
name|statisticsProvider
init|=
name|StatisticsProvider
operator|.
name|NOOP
decl_stmt|;
specifier|private
name|Closer
name|closer
decl_stmt|;
comment|/**      * Blob modified before this time duration would be considered for Blob GC      */
specifier|static
specifier|final
name|long
name|DEFAULT_BLOB_GC_MAX_AGE
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|longValue
operator|=
name|DEFAULT_BLOB_GC_MAX_AGE
argument_list|,
name|label
operator|=
literal|"Blob gc max age (in secs)"
argument_list|,
name|description
operator|=
literal|"The blob garbage collection logic will only consider those blobs which "
operator|+
literal|"are not accessed recently (currentTime - lastModifiedTime> blobGcMaxAgeInSecs). "
operator|+
literal|"For example with the default setting only those blobs which have been created "
operator|+
literal|"at least 24 hours ago will be considered for garbage collection. "
operator|+
literal|"Default value is '"
operator|+
name|DEFAULT_BLOB_GC_MAX_AGE
operator|+
literal|"'."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PROP_BLOB_GC_MAX_AGE
init|=
literal|"blobGcMaxAgeInSecs"
decl_stmt|;
comment|/**      * Default interval for taking snapshots of locally tracked blob ids.      */
specifier|static
specifier|final
name|long
name|DEFAULT_BLOB_SNAPSHOT_INTERVAL
init|=
literal|12
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|longValue
operator|=
name|DEFAULT_BLOB_SNAPSHOT_INTERVAL
argument_list|,
name|label
operator|=
literal|"Blob tracking snapshot interval"
argument_list|,
name|description
operator|=
literal|"Interval in seconds in which snapshots of locally tracked blob ids are "
operator|+
literal|"taken and synchronized with the blob store. This should be configured to be "
operator|+
literal|"less than the frequency of blob garbage collection so that deletions during blob "
operator|+
literal|"garbage collection can be accounted for in the next garbage collection execution. "
operator|+
literal|"Default value is '"
operator|+
name|DEFAULT_BLOB_SNAPSHOT_INTERVAL
operator|+
literal|"'."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PROP_BLOB_SNAPSHOT_INTERVAL
init|=
literal|"blobTrackSnapshotIntervalInSecs"
decl_stmt|;
annotation|@
name|Activate
specifier|public
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|blobStore
operator|==
literal|null
operator|&&
name|configuration
operator|.
name|hasCustomBlobStore
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"BlobStore enabled. SegmentNodeStore will be initialized once the blob "
operator|+
literal|"store becomes available"
argument_list|)
expr_stmt|;
return|return;
block|}
name|closer
operator|=
name|Closer
operator|.
name|create
argument_list|()
expr_stmt|;
name|OsgiWhiteboard
name|whiteboard
init|=
operator|new
name|OsgiWhiteboard
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|)
decl_stmt|;
name|registerSegmentStore
argument_list|(
name|context
argument_list|,
name|blobStore
argument_list|,
name|statisticsProvider
argument_list|,
name|closer
argument_list|,
name|whiteboard
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Configures and registers a new SegmentNodeStore instance together will      * all required components. Anything that must be disposed of (like      * registered services or MBeans) will be registered via the      * {@code registration} parameter.      *      * @param context            An instance of {@link ComponentContext}.      * @param blobStore          An instance of {@link BlobStore}. It can be      *                           {@code null}.      * @param statisticsProvider An instance of {@link StatisticsProvider}.      * @param closer             An instance of {@link Closer}. It will be used      *                           to track every registered service or      *                           component.      * @param whiteboard         An instance of {@link Whiteboard}. It will be      *                           used to register services in the OSGi      *                           framework.      * @param role               The role of this component. It can be {@code      *                           null}.      * @param descriptors        Determines if repository descriptors related to      *                           discovery services should be registered.      * @return A configured {@link SegmentNodeStore}, or {@code null} if the      * setup failed.      * @throws IOException In case an unrecoverable error occurs.      */
specifier|static
name|SegmentNodeStore
name|registerSegmentStore
parameter_list|(
annotation|@
name|Nonnull
name|ComponentContext
name|context
parameter_list|,
annotation|@
name|Nullable
name|BlobStore
name|blobStore
parameter_list|,
annotation|@
name|Nonnull
name|StatisticsProvider
name|statisticsProvider
parameter_list|,
annotation|@
name|Nonnull
name|Closer
name|closer
parameter_list|,
annotation|@
name|Nonnull
name|Whiteboard
name|whiteboard
parameter_list|,
annotation|@
name|Nullable
name|String
name|role
parameter_list|,
name|boolean
name|descriptors
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|(
name|context
argument_list|,
name|role
argument_list|)
decl_stmt|;
name|Closeables
name|closeables
init|=
operator|new
name|Closeables
argument_list|(
name|closer
argument_list|)
decl_stmt|;
name|Registrations
name|registrations
init|=
operator|new
name|Registrations
argument_list|(
name|whiteboard
argument_list|,
name|role
argument_list|)
decl_stmt|;
comment|// Listen for GCMonitor services
name|GCMonitor
name|gcMonitor
init|=
name|GCMonitor
operator|.
name|EMPTY
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|isPrimarySegmentStore
argument_list|()
condition|)
block|{
name|GCMonitorTracker
name|tracker
init|=
operator|new
name|GCMonitorTracker
argument_list|()
decl_stmt|;
name|tracker
operator|.
name|start
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
name|closeables
operator|.
name|add
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
name|gcMonitor
operator|=
name|tracker
expr_stmt|;
block|}
comment|// Create the gc options
if|if
condition|(
name|configuration
operator|.
name|getCompactionGainThreshold
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Detected deprecated flag 'compaction.gainThreshold'. "
operator|+
literal|"Please use 'compaction.sizeDeltaEstimation' instead and "
operator|+
literal|"'compaction.disableEstimation' to disable estimation."
argument_list|)
expr_stmt|;
block|}
name|SegmentGCOptions
name|gcOptions
init|=
operator|new
name|SegmentGCOptions
argument_list|(
name|configuration
operator|.
name|getPauseCompaction
argument_list|()
argument_list|,
name|configuration
operator|.
name|getRetryCount
argument_list|()
argument_list|,
name|configuration
operator|.
name|getForceCompactionTimeout
argument_list|()
argument_list|)
operator|.
name|setRetainedGenerations
argument_list|(
name|configuration
operator|.
name|getRetainedGenerations
argument_list|()
argument_list|)
operator|.
name|setGcSizeDeltaEstimation
argument_list|(
name|configuration
operator|.
name|getSizeDeltaEstimation
argument_list|()
argument_list|)
operator|.
name|setMemoryThreshold
argument_list|(
name|configuration
operator|.
name|getMemoryThreshold
argument_list|()
argument_list|)
operator|.
name|setEstimationDisabled
argument_list|(
name|configuration
operator|.
name|getDisableEstimation
argument_list|()
argument_list|)
operator|.
name|withGCNodeWriteMonitor
argument_list|(
name|configuration
operator|.
name|getGCProcessLog
argument_list|()
argument_list|)
decl_stmt|;
comment|// Build the FileStore
name|FileStoreBuilder
name|builder
init|=
name|fileStoreBuilder
argument_list|(
name|configuration
operator|.
name|getDirectory
argument_list|()
argument_list|)
operator|.
name|withSegmentCacheSize
argument_list|(
name|configuration
operator|.
name|getSegmentCacheSize
argument_list|()
argument_list|)
operator|.
name|withStringCacheSize
argument_list|(
name|configuration
operator|.
name|getStringCacheSize
argument_list|()
argument_list|)
operator|.
name|withTemplateCacheSize
argument_list|(
name|configuration
operator|.
name|getTemplateCacheSize
argument_list|()
argument_list|)
operator|.
name|withStringDeduplicationCacheSize
argument_list|(
name|configuration
operator|.
name|getStringDeduplicationCacheSize
argument_list|()
argument_list|)
operator|.
name|withTemplateDeduplicationCacheSize
argument_list|(
name|configuration
operator|.
name|getTemplateDeduplicationCacheSize
argument_list|()
argument_list|)
operator|.
name|withNodeDeduplicationCacheSize
argument_list|(
name|configuration
operator|.
name|getNodeDeduplicationCacheSize
argument_list|()
argument_list|)
operator|.
name|withMaxFileSize
argument_list|(
name|configuration
operator|.
name|getMaxFileSize
argument_list|()
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
name|configuration
operator|.
name|getMemoryMapping
argument_list|()
argument_list|)
operator|.
name|withGCMonitor
argument_list|(
name|gcMonitor
argument_list|)
operator|.
name|withStatisticsProvider
argument_list|(
name|statisticsProvider
argument_list|)
operator|.
name|withGCOptions
argument_list|(
name|gcOptions
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|hasCustomBlobStore
argument_list|()
operator|&&
name|blobStore
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Initializing SegmentNodeStore with BlobStore [{}]"
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withBlobStore
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|configuration
operator|.
name|isStandbyInstance
argument_list|()
condition|)
block|{
name|builder
operator|.
name|withSnfeListener
argument_list|(
name|IGNORE_SNFE
argument_list|)
expr_stmt|;
block|}
specifier|final
name|FileStore
name|store
decl_stmt|;
try|try
block|{
name|store
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidFileStoreVersionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"The storage format is not compatible with this version of Oak Segment Tar"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// store should be closed last
name|closeables
operator|.
name|add
argument_list|(
name|store
argument_list|)
expr_stmt|;
comment|// Listen for Executor services on the whiteboard
name|WhiteboardExecutor
name|executor
init|=
operator|new
name|WhiteboardExecutor
argument_list|()
decl_stmt|;
name|executor
operator|.
name|start
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
name|closeables
operator|.
name|add
argument_list|(
name|executor
argument_list|)
expr_stmt|;
comment|// Expose stats about the segment cache
name|CacheStatsMBean
name|segmentCacheStats
init|=
name|store
operator|.
name|getSegmentCacheStats
argument_list|()
decl_stmt|;
name|closeables
operator|.
name|add
argument_list|(
name|registrations
operator|.
name|registerMBean
argument_list|(
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|segmentCacheStats
argument_list|,
name|CacheStats
operator|.
name|TYPE
argument_list|,
name|segmentCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Expose stats about the string and template caches
name|CacheStatsMBean
name|stringCacheStats
init|=
name|store
operator|.
name|getStringCacheStats
argument_list|()
decl_stmt|;
name|closeables
operator|.
name|add
argument_list|(
name|registrations
operator|.
name|registerMBean
argument_list|(
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|stringCacheStats
argument_list|,
name|CacheStats
operator|.
name|TYPE
argument_list|,
name|stringCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|CacheStatsMBean
name|templateCacheStats
init|=
name|store
operator|.
name|getTemplateCacheStats
argument_list|()
decl_stmt|;
name|closeables
operator|.
name|add
argument_list|(
name|registrations
operator|.
name|registerMBean
argument_list|(
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|templateCacheStats
argument_list|,
name|CacheStats
operator|.
name|TYPE
argument_list|,
name|templateCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|CacheStatsMBean
name|stringDeduplicationCacheStats
init|=
name|store
operator|.
name|getStringDeduplicationCacheStats
argument_list|()
decl_stmt|;
if|if
condition|(
name|stringDeduplicationCacheStats
operator|!=
literal|null
condition|)
block|{
name|closeables
operator|.
name|add
argument_list|(
name|registrations
operator|.
name|registerMBean
argument_list|(
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|stringDeduplicationCacheStats
argument_list|,
name|CacheStats
operator|.
name|TYPE
argument_list|,
name|stringDeduplicationCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CacheStatsMBean
name|templateDeduplicationCacheStats
init|=
name|store
operator|.
name|getTemplateDeduplicationCacheStats
argument_list|()
decl_stmt|;
if|if
condition|(
name|templateDeduplicationCacheStats
operator|!=
literal|null
condition|)
block|{
name|closeables
operator|.
name|add
argument_list|(
name|registrations
operator|.
name|registerMBean
argument_list|(
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|templateDeduplicationCacheStats
argument_list|,
name|CacheStats
operator|.
name|TYPE
argument_list|,
name|templateDeduplicationCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CacheStatsMBean
name|nodeDeduplicationCacheStats
init|=
name|store
operator|.
name|getNodeDeduplicationCacheStats
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeDeduplicationCacheStats
operator|!=
literal|null
condition|)
block|{
name|closeables
operator|.
name|add
argument_list|(
name|registrations
operator|.
name|registerMBean
argument_list|(
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|nodeDeduplicationCacheStats
argument_list|,
name|CacheStats
operator|.
name|TYPE
argument_list|,
name|nodeDeduplicationCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Expose an MBean to managing and monitoring garbage collection
if|if
condition|(
name|configuration
operator|.
name|isPrimarySegmentStore
argument_list|()
condition|)
block|{
specifier|final
name|FileStoreGCMonitor
name|monitor
init|=
operator|new
name|FileStoreGCMonitor
argument_list|(
name|Clock
operator|.
name|SIMPLE
argument_list|)
decl_stmt|;
name|closeables
operator|.
name|add
argument_list|(
name|registrations
operator|.
name|register
argument_list|(
name|GCMonitor
operator|.
name|class
argument_list|,
name|monitor
argument_list|)
argument_list|)
expr_stmt|;
name|closeables
operator|.
name|add
argument_list|(
name|registrations
operator|.
name|registerMBean
argument_list|(
name|SegmentRevisionGC
operator|.
name|class
argument_list|,
operator|new
name|SegmentRevisionGCMBean
argument_list|(
name|store
argument_list|,
name|gcOptions
argument_list|,
name|monitor
argument_list|)
argument_list|,
name|SegmentRevisionGC
operator|.
name|TYPE
argument_list|,
literal|"Segment node store revision garbage collection"
argument_list|)
argument_list|)
expr_stmt|;
name|Runnable
name|cancelGC
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|store
operator|.
name|cancelGC
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Supplier
argument_list|<
name|String
argument_list|>
name|statusMessage
init|=
operator|new
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|()
block|{
return|return
name|monitor
operator|.
name|getStatus
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|closeables
operator|.
name|add
argument_list|(
name|registrations
operator|.
name|registerMBean
argument_list|(
name|RevisionGCMBean
operator|.
name|class
argument_list|,
operator|new
name|RevisionGC
argument_list|(
name|store
operator|.
name|getGCRunner
argument_list|()
argument_list|,
name|cancelGC
argument_list|,
name|statusMessage
argument_list|,
name|executor
argument_list|)
argument_list|,
name|RevisionGCMBean
operator|.
name|TYPE
argument_list|,
literal|"Revision garbage collection"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Expose statistics about the FileStore
name|closeables
operator|.
name|add
argument_list|(
name|registrations
operator|.
name|registerMBean
argument_list|(
name|FileStoreStatsMBean
operator|.
name|class
argument_list|,
name|store
operator|.
name|getStats
argument_list|()
argument_list|,
name|FileStoreStatsMBean
operator|.
name|TYPE
argument_list|,
literal|"FileStore statistics"
argument_list|)
argument_list|)
expr_stmt|;
comment|// register segment node store
name|SegmentNodeStore
operator|.
name|SegmentNodeStoreBuilder
name|segmentNodeStoreBuilder
init|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|store
argument_list|)
operator|.
name|withStatisticsProvider
argument_list|(
name|statisticsProvider
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|isStandbyInstance
argument_list|()
operator|||
operator|!
name|configuration
operator|.
name|isPrimarySegmentStore
argument_list|()
condition|)
block|{
name|segmentNodeStoreBuilder
operator|.
name|dispatchChanges
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|SegmentNodeStore
name|segmentNodeStore
init|=
name|segmentNodeStoreBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|isPrimarySegmentStore
argument_list|()
condition|)
block|{
name|ObserverTracker
name|observerTracker
init|=
operator|new
name|ObserverTracker
argument_list|(
name|segmentNodeStore
argument_list|)
decl_stmt|;
name|observerTracker
operator|.
name|start
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|)
expr_stmt|;
name|closeables
operator|.
name|add
argument_list|(
name|observerTracker
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|isPrimarySegmentStore
argument_list|()
condition|)
block|{
name|closeables
operator|.
name|add
argument_list|(
name|registrations
operator|.
name|registerMBean
argument_list|(
name|CheckpointMBean
operator|.
name|class
argument_list|,
operator|new
name|SegmentCheckpointMBean
argument_list|(
name|segmentNodeStore
argument_list|)
argument_list|,
name|CheckpointMBean
operator|.
name|TYPE
argument_list|,
literal|"Segment node store checkpoint management"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|descriptors
condition|)
block|{
comment|// ensure a clusterId is initialized
comment|// and expose it as 'oak.clusterid' repository descriptor
name|GenericDescriptors
name|clusterIdDesc
init|=
operator|new
name|GenericDescriptors
argument_list|()
decl_stmt|;
name|clusterIdDesc
operator|.
name|put
argument_list|(
name|ClusterRepositoryInfo
operator|.
name|OAK_CLUSTERID_REPOSITORY_DESCRIPTOR_KEY
argument_list|,
operator|new
name|SimpleValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|getOrCreateId
argument_list|(
name|segmentNodeStore
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|closeables
operator|.
name|add
argument_list|(
name|registrations
operator|.
name|register
argument_list|(
name|Descriptors
operator|.
name|class
argument_list|,
name|clusterIdDesc
argument_list|)
argument_list|)
expr_stmt|;
comment|// Register "discovery lite" descriptors
name|closeables
operator|.
name|add
argument_list|(
name|registrations
operator|.
name|register
argument_list|(
name|Descriptors
operator|.
name|class
argument_list|,
operator|new
name|SegmentDiscoveryLiteDescriptors
argument_list|(
name|segmentNodeStore
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// If a shared data store register the repo id in the data store
if|if
condition|(
name|configuration
operator|.
name|isPrimarySegmentStore
argument_list|()
operator|&&
name|isShared
argument_list|(
name|blobStore
argument_list|)
condition|)
block|{
name|SharedDataStore
name|sharedDataStore
init|=
operator|(
name|SharedDataStore
operator|)
name|blobStore
decl_stmt|;
try|try
block|{
name|sharedDataStore
operator|.
name|addMetadataRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|SharedStoreRecordType
operator|.
name|REPOSITORY
operator|.
name|getNameFromId
argument_list|(
name|getOrCreateId
argument_list|(
name|segmentNodeStore
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not register a unique repositoryId"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|blobStore
operator|instanceof
name|BlobTrackingStore
condition|)
block|{
name|BlobTrackingStore
name|trackingStore
init|=
operator|(
name|BlobTrackingStore
operator|)
name|blobStore
decl_stmt|;
if|if
condition|(
name|trackingStore
operator|.
name|getTracker
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|trackingStore
operator|.
name|getTracker
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|trackingStore
operator|.
name|addTracker
argument_list|(
operator|new
name|BlobIdTracker
argument_list|(
name|configuration
operator|.
name|getRootDirectory
argument_list|()
argument_list|,
name|getOrCreateId
argument_list|(
name|segmentNodeStore
argument_list|)
argument_list|,
name|configuration
operator|.
name|getBlobSnapshotInterval
argument_list|()
argument_list|,
name|sharedDataStore
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|configuration
operator|.
name|isPrimarySegmentStore
argument_list|()
operator|&&
name|blobStore
operator|instanceof
name|GarbageCollectableBlobStore
condition|)
block|{
name|BlobGarbageCollector
name|gc
init|=
operator|new
name|MarkSweepGarbageCollector
argument_list|(
operator|new
name|SegmentBlobReferenceRetriever
argument_list|(
name|store
argument_list|)
argument_list|,
operator|(
name|GarbageCollectableBlobStore
operator|)
name|blobStore
argument_list|,
name|executor
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|configuration
operator|.
name|getBlobGcMaxAge
argument_list|()
argument_list|)
argument_list|,
name|getOrCreateId
argument_list|(
name|segmentNodeStore
argument_list|)
argument_list|)
decl_stmt|;
name|closeables
operator|.
name|add
argument_list|(
name|registrations
operator|.
name|registerMBean
argument_list|(
name|BlobGCMBean
operator|.
name|class
argument_list|,
operator|new
name|BlobGC
argument_list|(
name|gc
argument_list|,
name|executor
argument_list|)
argument_list|,
name|BlobGCMBean
operator|.
name|TYPE
argument_list|,
literal|"Segment node store blob garbage collection"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Expose an MBean for backup/restore operations
name|closeables
operator|.
name|add
argument_list|(
name|registrations
operator|.
name|registerMBean
argument_list|(
name|FileStoreBackupRestoreMBean
operator|.
name|class
argument_list|,
operator|new
name|FileStoreBackupRestoreImpl
argument_list|(
name|segmentNodeStore
argument_list|,
name|store
operator|.
name|getRevisions
argument_list|()
argument_list|,
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|configuration
operator|.
name|getBackupDirectory
argument_list|()
argument_list|,
name|executor
argument_list|)
argument_list|,
name|FileStoreBackupRestoreMBean
operator|.
name|TYPE
argument_list|,
literal|"Segment node store backup/restore"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Expose statistics about the SegmentNodeStore
name|closeables
operator|.
name|add
argument_list|(
name|registrations
operator|.
name|registerMBean
argument_list|(
name|SegmentNodeStoreStatsMBean
operator|.
name|class
argument_list|,
name|segmentNodeStore
operator|.
name|getStats
argument_list|()
argument_list|,
name|SegmentNodeStoreStatsMBean
operator|.
name|TYPE
argument_list|,
literal|"SegmentNodeStore statistics"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|isPrimarySegmentStore
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Primary SegmentNodeStore initialized"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Secondary SegmentNodeStore initialized, role={}"
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
comment|// Register a factory service to expose the FileStore
name|closeables
operator|.
name|add
argument_list|(
name|registrations
operator|.
name|register
argument_list|(
name|SegmentStoreProvider
operator|.
name|class
argument_list|,
operator|new
name|DefaultSegmentStoreProvider
argument_list|(
name|store
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|isStandbyInstance
argument_list|()
condition|)
block|{
return|return
name|segmentNodeStore
return|;
block|}
if|if
condition|(
name|configuration
operator|.
name|isPrimarySegmentStore
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
name|SegmentNodeStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"oak.nodestore.description"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"nodeStoreType=segment"
block|}
argument_list|)
expr_stmt|;
name|closeables
operator|.
name|add
argument_list|(
name|registrations
operator|.
name|register
argument_list|(
name|NodeStore
operator|.
name|class
argument_list|,
name|segmentNodeStore
argument_list|,
name|props
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|segmentNodeStore
return|;
block|}
annotation|@
name|Deactivate
specifier|public
name|void
name|deactivate
parameter_list|()
block|{
name|closeQuietly
argument_list|(
name|closer
argument_list|)
expr_stmt|;
name|closer
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**  * Encapsulates a {@link Closer} and makes it easier to track the lifecycle  * of entities that can be disposed.  */
end_comment

begin_class
class|class
name|Closeables
implements|implements
name|Closeable
block|{
specifier|private
specifier|final
name|Closer
name|closer
decl_stmt|;
name|Closeables
parameter_list|(
name|Closer
name|closer
parameter_list|)
block|{
name|this
operator|.
name|closer
operator|=
name|closer
expr_stmt|;
block|}
name|void
name|add
parameter_list|(
name|Closeable
name|c
parameter_list|)
block|{
name|closer
operator|.
name|register
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|void
name|add
parameter_list|(
specifier|final
name|AbstractServiceTracker
argument_list|<
name|?
argument_list|>
name|t
parameter_list|)
block|{
name|add
argument_list|(
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|t
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|void
name|add
parameter_list|(
specifier|final
name|Registration
name|r
parameter_list|)
block|{
name|add
argument_list|(
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|r
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|void
name|add
parameter_list|(
specifier|final
name|ObserverTracker
name|t
parameter_list|)
block|{
name|add
argument_list|(
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|t
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**  * Allows simple access to the configuration of this component. Provides  * default values for unspecified properties and type conversion.  */
end_comment

begin_class
class|class
name|Configuration
block|{
specifier|private
specifier|static
name|int
name|roundToNextPowerOfTwo
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
literal|1
operator|<<
operator|(
literal|32
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
argument_list|)
operator|)
return|;
block|}
specifier|private
specifier|final
name|ComponentContext
name|context
decl_stmt|;
specifier|private
specifier|final
name|String
name|role
decl_stmt|;
name|Configuration
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|this
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|Configuration
parameter_list|(
name|ComponentContext
name|context
parameter_list|,
name|String
name|role
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|role
operator|=
name|role
expr_stmt|;
block|}
name|String
name|property
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|lookupConfigurationThenFramework
argument_list|(
name|context
argument_list|,
name|name
argument_list|)
return|;
block|}
name|String
name|getRootDirectory
parameter_list|()
block|{
name|String
name|root
init|=
name|property
argument_list|(
name|DIRECTORY
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|root
argument_list|)
condition|)
block|{
return|return
literal|"repository"
return|;
block|}
return|return
name|root
return|;
block|}
name|File
name|getDirectory
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|getBaseDirectory
argument_list|()
argument_list|,
name|appendRole
argument_list|(
literal|"segmentstore"
argument_list|)
argument_list|)
return|;
block|}
name|File
name|getBackupDirectory
parameter_list|()
block|{
name|String
name|backupDirectory
init|=
name|property
argument_list|(
name|BACKUP_DIRECTORY
argument_list|)
decl_stmt|;
if|if
condition|(
name|backupDirectory
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|backupDirectory
argument_list|)
return|;
block|}
return|return
operator|new
name|File
argument_list|(
name|getBaseDirectory
argument_list|()
argument_list|,
name|appendRole
argument_list|(
literal|"segmentstore-backup"
argument_list|)
argument_list|)
return|;
block|}
name|int
name|getSegmentCacheSize
parameter_list|()
block|{
return|return
name|toInteger
argument_list|(
name|getCacheSize
argument_list|(
name|SEGMENT_CACHE_SIZE
argument_list|)
argument_list|,
name|DEFAULT_SEGMENT_CACHE_MB
argument_list|)
return|;
block|}
name|int
name|getStringCacheSize
parameter_list|()
block|{
return|return
name|toInteger
argument_list|(
name|getCacheSize
argument_list|(
name|STRING_CACHE_SIZE
argument_list|)
argument_list|,
name|DEFAULT_STRING_CACHE_MB
argument_list|)
return|;
block|}
name|int
name|getTemplateCacheSize
parameter_list|()
block|{
return|return
name|toInteger
argument_list|(
name|getCacheSize
argument_list|(
name|TEMPLATE_CACHE_SIZE
argument_list|)
argument_list|,
name|DEFAULT_TEMPLATE_CACHE_MB
argument_list|)
return|;
block|}
name|int
name|getStringDeduplicationCacheSize
parameter_list|()
block|{
return|return
name|toInteger
argument_list|(
name|getCacheSize
argument_list|(
name|STRING_DEDUPLICATION_CACHE_SIZE
argument_list|)
argument_list|,
name|DEFAULT_STRING_CACHE_SIZE_OSGi
argument_list|)
return|;
block|}
name|int
name|getTemplateDeduplicationCacheSize
parameter_list|()
block|{
return|return
name|toInteger
argument_list|(
name|getCacheSize
argument_list|(
name|TEMPLATE_DEDUPLICATION_CACHE_SIZE
argument_list|)
argument_list|,
name|DEFAULT_TEMPLATE_CACHE_SIZE_OSGi
argument_list|)
return|;
block|}
name|int
name|getNodeDeduplicationCacheSize
parameter_list|()
block|{
return|return
name|roundToNextPowerOfTwo
argument_list|(
name|toInteger
argument_list|(
name|getCacheSize
argument_list|(
name|NODE_DEDUPLICATION_CACHE_SIZE
argument_list|)
argument_list|,
name|DEFAULT_NODE_CACHE_SIZE_OSGi
argument_list|)
argument_list|)
return|;
block|}
name|boolean
name|getPauseCompaction
parameter_list|()
block|{
return|return
name|toBoolean
argument_list|(
name|property
argument_list|(
name|PAUSE_COMPACTION
argument_list|)
argument_list|,
name|PAUSE_DEFAULT
argument_list|)
return|;
block|}
name|int
name|getRetryCount
parameter_list|()
block|{
return|return
name|toInteger
argument_list|(
name|property
argument_list|(
name|COMPACTION_RETRY_COUNT
argument_list|)
argument_list|,
name|RETRY_COUNT_DEFAULT
argument_list|)
return|;
block|}
name|int
name|getForceCompactionTimeout
parameter_list|()
block|{
return|return
name|toInteger
argument_list|(
name|property
argument_list|(
name|COMPACTION_FORCE_TIMEOUT
argument_list|)
argument_list|,
name|FORCE_TIMEOUT_DEFAULT
argument_list|)
return|;
block|}
name|int
name|getRetainedGenerations
parameter_list|()
block|{
return|return
name|toInteger
argument_list|(
name|property
argument_list|(
name|RETAINED_GENERATIONS
argument_list|)
argument_list|,
name|RETAINED_GENERATIONS_DEFAULT
argument_list|)
return|;
block|}
name|long
name|getSizeDeltaEstimation
parameter_list|()
block|{
return|return
name|toLong
argument_list|(
name|property
argument_list|(
name|COMPACTION_SIZE_DELTA_ESTIMATION
argument_list|)
argument_list|,
name|SIZE_DELTA_ESTIMATION_DEFAULT
argument_list|)
return|;
block|}
name|int
name|getMemoryThreshold
parameter_list|()
block|{
return|return
name|toInteger
argument_list|(
name|property
argument_list|(
name|MEMORY_THRESHOLD
argument_list|)
argument_list|,
name|MEMORY_THRESHOLD_DEFAULT
argument_list|)
return|;
block|}
name|boolean
name|getDisableEstimation
parameter_list|()
block|{
return|return
name|toBoolean
argument_list|(
name|property
argument_list|(
name|COMPACTION_DISABLE_ESTIMATION
argument_list|)
argument_list|,
name|DISABLE_ESTIMATION_DEFAULT
argument_list|)
return|;
block|}
name|String
name|getCompactionGainThreshold
parameter_list|()
block|{
return|return
name|property
argument_list|(
literal|"compaction.gainThreshold"
argument_list|)
return|;
block|}
name|long
name|getGCProcessLog
parameter_list|()
block|{
return|return
name|toLong
argument_list|(
name|property
argument_list|(
name|GC_PROGRESS_LOG
argument_list|)
argument_list|,
name|GC_PROGRESS_LOG_DEFAULT
argument_list|)
return|;
block|}
name|int
name|getMaxFileSize
parameter_list|()
block|{
return|return
name|toInteger
argument_list|(
name|property
argument_list|(
name|SIZE
argument_list|)
argument_list|,
name|DEFAULT_MAX_FILE_SIZE
argument_list|)
return|;
block|}
name|String
name|getMode
parameter_list|()
block|{
name|String
name|mode
init|=
name|property
argument_list|(
name|MODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|!=
literal|null
condition|)
block|{
return|return
name|mode
return|;
block|}
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|MODE
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"sun.arch.data.model"
argument_list|,
literal|"32"
argument_list|)
argument_list|)
return|;
block|}
name|boolean
name|getMemoryMapping
parameter_list|()
block|{
return|return
name|getMode
argument_list|()
operator|.
name|equals
argument_list|(
literal|"64"
argument_list|)
return|;
block|}
name|long
name|getBlobSnapshotInterval
parameter_list|()
block|{
return|return
name|toLong
argument_list|(
name|property
argument_list|(
name|PROP_BLOB_SNAPSHOT_INTERVAL
argument_list|)
argument_list|,
name|DEFAULT_BLOB_SNAPSHOT_INTERVAL
argument_list|)
return|;
block|}
name|boolean
name|isStandbyInstance
parameter_list|()
block|{
return|return
name|toBoolean
argument_list|(
name|property
argument_list|(
name|STANDBY
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|boolean
name|hasCustomBlobStore
parameter_list|()
block|{
return|return
name|toBoolean
argument_list|(
name|property
argument_list|(
name|CUSTOM_BLOB_STORE
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|long
name|getBlobGcMaxAge
parameter_list|()
block|{
return|return
name|toLong
argument_list|(
name|property
argument_list|(
name|PROP_BLOB_GC_MAX_AGE
argument_list|)
argument_list|,
name|DEFAULT_BLOB_GC_MAX_AGE
argument_list|)
return|;
block|}
name|boolean
name|isPrimarySegmentStore
parameter_list|()
block|{
return|return
name|role
operator|==
literal|null
return|;
block|}
specifier|private
name|String
name|appendRole
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|role
operator|==
literal|null
condition|)
block|{
return|return
name|name
return|;
block|}
else|else
block|{
return|return
name|name
operator|+
literal|"-"
operator|+
name|role
return|;
block|}
block|}
specifier|private
name|File
name|getBaseDirectory
parameter_list|()
block|{
name|String
name|directory
init|=
name|property
argument_list|(
name|DIRECTORY
argument_list|)
decl_stmt|;
if|if
condition|(
name|directory
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|directory
argument_list|)
return|;
block|}
return|return
operator|new
name|File
argument_list|(
literal|"tarmk"
argument_list|)
return|;
block|}
specifier|private
name|String
name|getCacheSize
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
name|String
name|cacheSize
init|=
name|property
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheSize
operator|!=
literal|null
condition|)
block|{
return|return
name|cacheSize
return|;
block|}
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|/**  * Performs registrations of services and MBean in a uniform way. Augments  * the metadata of services and MBeans with an optionally provided role  * name.  */
end_comment

begin_class
class|class
name|Registrations
block|{
specifier|private
specifier|final
name|Whiteboard
name|whiteboard
decl_stmt|;
specifier|private
specifier|final
name|String
name|role
decl_stmt|;
name|Registrations
parameter_list|(
name|Whiteboard
name|whiteboard
parameter_list|,
name|String
name|role
parameter_list|)
block|{
name|this
operator|.
name|whiteboard
operator|=
name|whiteboard
expr_stmt|;
name|this
operator|.
name|role
operator|=
name|role
expr_stmt|;
block|}
parameter_list|<
name|T
parameter_list|>
name|Registration
name|registerMBean
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|T
name|bean
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|registerMBean
argument_list|(
name|clazz
argument_list|,
name|bean
argument_list|,
name|type
argument_list|,
name|name
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
parameter_list|<
name|T
parameter_list|>
name|Registration
name|registerMBean
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|T
name|bean
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
parameter_list|)
block|{
return|return
name|WhiteboardUtils
operator|.
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|clazz
argument_list|,
name|bean
argument_list|,
name|type
argument_list|,
name|maybeAppendRole
argument_list|(
name|name
argument_list|)
argument_list|,
name|maybePutRoleAttribute
argument_list|(
name|attributes
argument_list|)
argument_list|)
return|;
block|}
parameter_list|<
name|T
parameter_list|>
name|Registration
name|register
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|T
name|service
parameter_list|)
block|{
return|return
name|register
argument_list|(
name|clazz
argument_list|,
name|service
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
parameter_list|<
name|T
parameter_list|>
name|Registration
name|register
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|T
name|service
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
return|return
name|whiteboard
operator|.
name|register
argument_list|(
name|clazz
argument_list|,
name|service
argument_list|,
name|maybePutRoleProperty
argument_list|(
name|properties
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|maybeAppendRole
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|role
operator|!=
literal|null
condition|)
block|{
return|return
name|name
operator|+
literal|" - "
operator|+
name|role
return|;
block|}
return|return
name|name
return|;
block|}
specifier|private
name|String
name|jmxRole
parameter_list|()
block|{
return|return
name|role
operator|.
name|replaceAll
argument_list|(
literal|":"
argument_list|,
literal|"-"
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|maybePutRoleAttribute
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
parameter_list|)
block|{
if|if
condition|(
name|role
operator|!=
literal|null
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
literal|"role"
argument_list|,
name|jmxRole
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|attributes
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|maybePutRoleProperty
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attributes
parameter_list|)
block|{
if|if
condition|(
name|role
operator|!=
literal|null
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
literal|"role"
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
return|return
name|attributes
return|;
block|}
block|}
end_class

end_unit

