begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobStoreBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|scheduler
operator|.
name|Commit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|scheduler
operator|.
name|LockBasedScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|scheduler
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ConflictAnnotatingRebaseDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The top level class for the segment store.  *<p>  * The root node of the JCR content tree is actually stored in the node "/root",  * and checkpoints are stored under "/checkpoints".  */
end_comment

begin_class
specifier|public
class|class
name|SegmentNodeStore
implements|implements
name|NodeStore
implements|,
name|Observable
block|{
specifier|public
specifier|static
class|class
name|SegmentNodeStoreBuilder
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SegmentNodeStoreBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|Revisions
name|revisions
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|SegmentReader
name|reader
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|SegmentWriter
name|writer
decl_stmt|;
annotation|@
name|CheckForNull
specifier|private
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
specifier|private
name|boolean
name|isCreated
decl_stmt|;
specifier|private
name|boolean
name|dispatchChanges
init|=
literal|true
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
name|StatisticsProvider
name|statsProvider
init|=
name|StatisticsProvider
operator|.
name|NOOP
decl_stmt|;
specifier|private
name|SegmentNodeStoreBuilder
parameter_list|(
annotation|@
name|Nonnull
name|Revisions
name|revisions
parameter_list|,
annotation|@
name|Nonnull
name|SegmentReader
name|reader
parameter_list|,
annotation|@
name|Nonnull
name|SegmentWriter
name|writer
parameter_list|,
annotation|@
name|Nullable
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|this
operator|.
name|revisions
operator|=
name|revisions
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
block|}
annotation|@
name|Nonnull
specifier|public
name|SegmentNodeStoreBuilder
name|dispatchChanges
parameter_list|(
name|boolean
name|dispatchChanges
parameter_list|)
block|{
name|this
operator|.
name|dispatchChanges
operator|=
name|dispatchChanges
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * {@link StatisticsProvider} for collecting statistics related to SegmentStore          * @param statisticsProvider          * @return this instance          */
annotation|@
name|Nonnull
specifier|public
name|SegmentNodeStoreBuilder
name|withStatisticsProvider
parameter_list|(
annotation|@
name|Nonnull
name|StatisticsProvider
name|statisticsProvider
parameter_list|)
block|{
name|this
operator|.
name|statsProvider
operator|=
name|checkNotNull
argument_list|(
name|statisticsProvider
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|SegmentNodeStore
name|build
parameter_list|()
block|{
name|checkState
argument_list|(
operator|!
name|isCreated
argument_list|)
expr_stmt|;
name|isCreated
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating segment node store {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
operator|new
name|SegmentNodeStore
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|private
specifier|static
name|String
name|getString
parameter_list|(
annotation|@
name|CheckForNull
name|BlobStore
name|blobStore
parameter_list|)
block|{
return|return
literal|"blobStore="
operator|+
operator|(
name|blobStore
operator|==
literal|null
condition|?
literal|"inline"
else|:
name|blobStore
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SegmentNodeStoreBuilder{"
operator|+
name|getString
argument_list|(
name|blobStore
argument_list|)
operator|+
literal|'}'
return|;
block|}
block|}
annotation|@
name|Nonnull
specifier|public
specifier|static
name|SegmentNodeStoreBuilder
name|builder
parameter_list|(
annotation|@
name|Nonnull
name|Revisions
name|revisions
parameter_list|,
annotation|@
name|Nonnull
name|SegmentReader
name|reader
parameter_list|,
annotation|@
name|Nonnull
name|SegmentWriter
name|writer
parameter_list|,
annotation|@
name|Nullable
name|BlobStore
name|blobStore
parameter_list|)
block|{
return|return
operator|new
name|SegmentNodeStoreBuilder
argument_list|(
name|checkNotNull
argument_list|(
name|revisions
argument_list|)
argument_list|,
name|checkNotNull
argument_list|(
name|reader
argument_list|)
argument_list|,
name|checkNotNull
argument_list|(
name|writer
argument_list|)
argument_list|,
name|blobStore
argument_list|)
return|;
block|}
specifier|static
specifier|final
name|String
name|ROOT
init|=
literal|"root"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CHECKPOINTS
init|=
literal|"checkpoints"
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|SegmentWriter
name|writer
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|Scheduler
name|scheduler
decl_stmt|;
annotation|@
name|CheckForNull
specifier|private
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
specifier|private
specifier|final
name|SegmentNodeStoreStats
name|stats
decl_stmt|;
specifier|private
name|SegmentNodeStore
parameter_list|(
name|SegmentNodeStoreBuilder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|builder
operator|.
name|writer
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|builder
operator|.
name|blobStore
expr_stmt|;
name|this
operator|.
name|stats
operator|=
operator|new
name|SegmentNodeStoreStats
argument_list|(
name|builder
operator|.
name|statsProvider
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|LockBasedScheduler
operator|.
name|builder
argument_list|(
name|builder
operator|.
name|revisions
argument_list|,
name|builder
operator|.
name|reader
argument_list|,
name|stats
argument_list|)
operator|.
name|dispatchChanges
argument_list|(
name|builder
operator|.
name|dispatchChanges
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Closeable
name|addObserver
parameter_list|(
name|Observer
name|observer
parameter_list|)
block|{
if|if
condition|(
name|scheduler
operator|instanceof
name|Observable
condition|)
block|{
return|return
operator|(
operator|(
name|Observable
operator|)
name|scheduler
operator|)
operator|.
name|addObserver
argument_list|(
name|observer
argument_list|)
return|;
block|}
return|return
parameter_list|()
lambda|->
block|{}
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|NodeState
name|getRoot
parameter_list|()
block|{
return|return
name|scheduler
operator|.
name|getHeadNodeState
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|ROOT
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|merge
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|builder
parameter_list|,
annotation|@
name|Nonnull
name|CommitHook
name|commitHook
parameter_list|,
annotation|@
name|Nonnull
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|checkArgument
argument_list|(
name|builder
operator|instanceof
name|SegmentNodeBuilder
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
operator|(
operator|(
name|SegmentNodeBuilder
operator|)
name|builder
operator|)
operator|.
name|isRootBuilder
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|scheduler
operator|.
name|schedule
argument_list|(
operator|new
name|Commit
argument_list|(
name|builder
argument_list|,
name|commitHook
argument_list|,
name|info
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|NodeState
name|rebase
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|builder
operator|instanceof
name|SegmentNodeBuilder
argument_list|)
expr_stmt|;
name|SegmentNodeBuilder
name|snb
init|=
operator|(
name|SegmentNodeBuilder
operator|)
name|builder
decl_stmt|;
name|NodeState
name|root
init|=
name|getRoot
argument_list|()
decl_stmt|;
name|NodeState
name|before
init|=
name|snb
operator|.
name|getBaseState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|SegmentNodeState
operator|.
name|fastEquals
argument_list|(
name|before
argument_list|,
name|root
argument_list|)
condition|)
block|{
name|SegmentNodeState
name|after
init|=
name|snb
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|snb
operator|.
name|reset
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|ConflictAnnotatingRebaseDiff
argument_list|(
name|snb
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|snb
operator|.
name|getNodeState
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|NodeState
name|reset
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|builder
operator|instanceof
name|SegmentNodeBuilder
argument_list|)
expr_stmt|;
name|SegmentNodeBuilder
name|snb
init|=
operator|(
name|SegmentNodeBuilder
operator|)
name|builder
decl_stmt|;
name|NodeState
name|root
init|=
name|getRoot
argument_list|()
decl_stmt|;
name|snb
operator|.
name|reset
argument_list|(
name|root
argument_list|)
expr_stmt|;
return|return
name|root
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Blob
name|createBlob
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SegmentBlob
argument_list|(
name|blobStore
argument_list|,
name|writer
operator|.
name|writeStream
argument_list|(
name|stream
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Blob
name|getBlob
parameter_list|(
annotation|@
name|Nonnull
name|String
name|reference
parameter_list|)
block|{
comment|//Use of 'reference' here is bit overloaded. In terms of NodeStore API
comment|//a blob reference refers to the secure reference obtained from Blob#getReference()
comment|//However in SegmentStore terminology a blob is referred via 'external reference'
comment|//That 'external reference' would map to blobId obtained from BlobStore#getBlobId
if|if
condition|(
name|blobStore
operator|!=
literal|null
condition|)
block|{
name|String
name|blobId
init|=
name|blobStore
operator|.
name|getBlobId
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|blobId
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|BlobStoreBlob
argument_list|(
name|blobStore
argument_list|,
name|blobId
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Attempt to read external blob with blobId ["
operator|+
name|reference
operator|+
literal|"] "
operator|+
literal|"without specifying BlobStore"
argument_list|)
throw|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|checkpoint
parameter_list|(
name|long
name|lifetime
parameter_list|,
annotation|@
name|Nonnull
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
return|return
name|scheduler
operator|.
name|checkpoint
argument_list|(
name|lifetime
argument_list|,
name|properties
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
specifier|synchronized
name|String
name|checkpoint
parameter_list|(
name|long
name|lifetime
parameter_list|)
block|{
return|return
name|checkpoint
argument_list|(
name|lifetime
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|checkpointInfo
parameter_list|(
annotation|@
name|Nonnull
name|String
name|checkpoint
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|checkNotNull
argument_list|(
name|checkpoint
argument_list|)
expr_stmt|;
name|NodeState
name|cp
init|=
name|scheduler
operator|.
name|getHeadNodeState
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"checkpoints"
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|checkpoint
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"properties"
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyState
name|prop
range|:
name|cp
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|,
name|prop
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|checkpoints
parameter_list|()
block|{
return|return
name|getCheckpoints
argument_list|()
operator|.
name|getChildNodeNames
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|public
name|NodeState
name|retrieve
parameter_list|(
annotation|@
name|Nonnull
name|String
name|checkpoint
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|checkpoint
argument_list|)
expr_stmt|;
name|NodeState
name|cp
init|=
name|scheduler
operator|.
name|getHeadNodeState
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"checkpoints"
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|checkpoint
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|cp
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|cp
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|release
parameter_list|(
annotation|@
name|Nonnull
name|String
name|checkpoint
parameter_list|)
block|{
return|return
name|scheduler
operator|.
name|removeCheckpoint
argument_list|(
name|checkpoint
argument_list|)
return|;
block|}
name|NodeState
name|getCheckpoints
parameter_list|()
block|{
return|return
name|scheduler
operator|.
name|getHeadNodeState
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|CHECKPOINTS
argument_list|)
return|;
block|}
specifier|public
name|SegmentNodeStoreStats
name|getStats
parameter_list|()
block|{
return|return
name|stats
return|;
block|}
block|}
end_class

end_unit

