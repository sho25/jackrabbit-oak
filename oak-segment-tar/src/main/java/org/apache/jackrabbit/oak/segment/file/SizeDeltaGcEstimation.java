begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|humanReadableByteCount
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|GCJournal
operator|.
name|GCJournalEntry
import|;
end_import

begin_class
class|class
name|SizeDeltaGcEstimation
implements|implements
name|GCEstimation
block|{
specifier|private
specifier|final
name|long
name|delta
decl_stmt|;
specifier|private
specifier|final
name|GCJournal
name|gcJournal
decl_stmt|;
specifier|private
specifier|final
name|long
name|currentSize
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|full
decl_stmt|;
name|SizeDeltaGcEstimation
parameter_list|(
name|long
name|delta
parameter_list|,
annotation|@
name|Nonnull
name|GCJournal
name|gcJournal
parameter_list|,
name|long
name|currentSize
parameter_list|,
name|boolean
name|full
parameter_list|)
block|{
name|this
operator|.
name|delta
operator|=
name|delta
expr_stmt|;
name|this
operator|.
name|gcJournal
operator|=
name|checkNotNull
argument_list|(
name|gcJournal
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentSize
operator|=
name|currentSize
expr_stmt|;
name|this
operator|.
name|full
operator|=
name|full
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|GCEstimationResult
name|estimate
parameter_list|()
block|{
if|if
condition|(
name|delta
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|GCEstimationResult
argument_list|(
literal|true
argument_list|,
literal|"Estimation skipped because the size delta value equals 0"
argument_list|)
return|;
block|}
name|long
name|previousSize
init|=
name|readPreviousSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|previousSize
operator|<
literal|0
condition|)
block|{
return|return
operator|new
name|GCEstimationResult
argument_list|(
literal|true
argument_list|,
literal|"Estimation skipped because of missing gc journal data (expected on first run)"
argument_list|)
return|;
block|}
name|long
name|gain
init|=
name|currentSize
operator|-
name|previousSize
decl_stmt|;
name|boolean
name|gcNeeded
init|=
name|gain
operator|>
name|delta
decl_stmt|;
name|String
name|gcInfo
init|=
name|format
argument_list|(
literal|"Segmentstore size has increased since the last %s garbage collection from %s (%s bytes) to %s (%s bytes), an increase of %s (%s bytes) or %s%%. "
argument_list|,
name|full
condition|?
literal|"full"
else|:
literal|"tail"
argument_list|,
name|humanReadableByteCount
argument_list|(
name|previousSize
argument_list|)
argument_list|,
name|previousSize
argument_list|,
name|humanReadableByteCount
argument_list|(
name|currentSize
argument_list|)
argument_list|,
name|currentSize
argument_list|,
name|humanReadableByteCount
argument_list|(
name|gain
argument_list|)
argument_list|,
name|gain
argument_list|,
literal|100
operator|*
name|gain
operator|/
name|previousSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|gcNeeded
condition|)
block|{
name|gcInfo
operator|=
name|gcInfo
operator|+
name|format
argument_list|(
literal|"This is greater than sizeDeltaEstimation=%s (%s bytes), so running garbage collection"
argument_list|,
name|humanReadableByteCount
argument_list|(
name|delta
argument_list|)
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gcInfo
operator|=
name|gcInfo
operator|+
name|format
argument_list|(
literal|"This is less than sizeDeltaEstimation=%s (%s bytes), so skipping garbage collection"
argument_list|,
name|humanReadableByteCount
argument_list|(
name|delta
argument_list|)
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|GCEstimationResult
argument_list|(
name|gcNeeded
argument_list|,
name|gcInfo
argument_list|)
return|;
block|}
specifier|private
name|long
name|readPreviousSize
parameter_list|()
block|{
if|if
condition|(
name|full
condition|)
block|{
return|return
name|readPreviousFullCleanupSize
argument_list|()
return|;
block|}
return|return
name|readPreviousTailCleanupSize
argument_list|()
return|;
block|}
specifier|private
name|long
name|readPreviousFullCleanupSize
parameter_list|()
block|{
name|List
argument_list|<
name|GCJournalEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|gcJournal
operator|.
name|readAll
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|entries
operator|.
name|sort
argument_list|(
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|a
operator|.
name|getGcGeneration
argument_list|()
operator|.
name|getFullGeneration
argument_list|()
operator|>
name|b
operator|.
name|getGcGeneration
argument_list|()
operator|.
name|getFullGeneration
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|a
operator|.
name|getGcGeneration
argument_list|()
operator|.
name|getFullGeneration
argument_list|()
operator|<
name|b
operator|.
name|getGcGeneration
argument_list|()
operator|.
name|getFullGeneration
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getGcGeneration
argument_list|()
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|b
operator|.
name|getGcGeneration
argument_list|()
operator|.
name|getGeneration
argument_list|()
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|entries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getRepoSize
argument_list|()
return|;
block|}
specifier|private
name|long
name|readPreviousTailCleanupSize
parameter_list|()
block|{
return|return
name|gcJournal
operator|.
name|read
argument_list|()
operator|.
name|getRepoSize
argument_list|()
return|;
block|}
block|}
end_class

end_unit

