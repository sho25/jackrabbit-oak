begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionParser
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|OakFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|commons
operator|.
name|Command
import|;
end_import

begin_class
class|class
name|ServerCommand
implements|implements
name|Command
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_URI
init|=
literal|"http://localhost:8080/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MB
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|static
name|void
name|startOakServer
parameter_list|(
name|OakFixture
name|oakFixture
parameter_list|,
name|String
name|uri
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|cIds
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|Oak
argument_list|,
name|String
argument_list|>
name|m
decl_stmt|;
if|if
condition|(
name|cIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting "
operator|+
name|oakFixture
operator|.
name|toString
argument_list|()
operator|+
literal|" repository -> "
operator|+
name|uri
argument_list|)
expr_stmt|;
name|m
operator|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|oakFixture
operator|.
name|getOak
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting a clustered repository "
operator|+
name|oakFixture
operator|.
name|toString
argument_list|()
operator|+
literal|" -> "
operator|+
name|uri
argument_list|)
expr_stmt|;
name|m
operator|=
operator|new
name|HashMap
argument_list|<
name|Oak
argument_list|,
name|String
argument_list|>
argument_list|(
name|cIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cIds
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|m
operator|.
name|put
argument_list|(
name|oakFixture
operator|.
name|getOak
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"/node"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
operator|new
name|HttpServer
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|uri
argument_list|)
operator|.
name|getPort
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|OptionParser
name|parser
init|=
operator|new
name|OptionParser
argument_list|()
decl_stmt|;
name|OptionSpec
argument_list|<
name|Integer
argument_list|>
name|cache
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"cache"
argument_list|,
literal|"cache size (MB)"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
literal|100
argument_list|)
decl_stmt|;
comment|// tar/h2 specific option
name|OptionSpec
argument_list|<
name|File
argument_list|>
name|base
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"base"
argument_list|,
literal|"Base directory"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|File
operator|.
name|class
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|Boolean
argument_list|>
name|mmap
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"mmap"
argument_list|,
literal|"TarMK memory mapping"
argument_list|)
operator|.
name|withOptionalArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
literal|"64"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"sun.arch.data.model"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// mongo specific options:
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|host
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"host"
argument_list|,
literal|"MongoDB host"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|defaultsTo
argument_list|(
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"port"
argument_list|,
literal|"MongoDB port"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
literal|27017
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|dbName
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"db"
argument_list|,
literal|"MongoDB database"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
decl_stmt|;
name|OptionSpec
argument_list|<
name|Integer
argument_list|>
name|clusterIds
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"clusterIds"
argument_list|,
literal|"Cluster Ids"
argument_list|)
operator|.
name|withOptionalArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|withValuesSeparatedBy
argument_list|(
literal|','
argument_list|)
decl_stmt|;
comment|// RDB specific options
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|rdbjdbcuri
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"rdbjdbcuri"
argument_list|,
literal|"RDB JDBC URI"
argument_list|)
operator|.
name|withOptionalArg
argument_list|()
operator|.
name|defaultsTo
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|rdbjdbcuser
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"rdbjdbcuser"
argument_list|,
literal|"RDB JDBC user"
argument_list|)
operator|.
name|withOptionalArg
argument_list|()
operator|.
name|defaultsTo
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|rdbjdbcpasswd
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"rdbjdbcpasswd"
argument_list|,
literal|"RDB JDBC password"
argument_list|)
operator|.
name|withOptionalArg
argument_list|()
operator|.
name|defaultsTo
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|rdbjdbctableprefix
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"rdbjdbctableprefix"
argument_list|,
literal|"RDB JDBC table prefix"
argument_list|)
operator|.
name|withOptionalArg
argument_list|()
operator|.
name|defaultsTo
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|nonOption
init|=
name|parser
operator|.
name|nonOptions
argument_list|()
decl_stmt|;
name|OptionSpec
argument_list|<
name|?
argument_list|>
name|help
init|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|asList
argument_list|(
literal|"h"
argument_list|,
literal|"?"
argument_list|,
literal|"help"
argument_list|)
argument_list|,
literal|"show help"
argument_list|)
operator|.
name|forHelp
argument_list|()
decl_stmt|;
name|OptionSet
name|options
init|=
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|help
argument_list|)
condition|)
block|{
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|OakFixture
name|oakFixture
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|arglist
init|=
name|nonOption
operator|.
name|values
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
operator|(
name|arglist
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|DEFAULT_URI
else|:
name|arglist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|fix
init|=
operator|(
name|arglist
operator|.
name|size
argument_list|()
operator|<=
literal|1
operator|)
condition|?
name|OakFixture
operator|.
name|OAK_MEMORY
else|:
name|arglist
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|cacheSize
init|=
name|cache
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|cIds
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
if|if
condition|(
name|fix
operator|.
name|startsWith
argument_list|(
name|OakFixture
operator|.
name|OAK_MEMORY
argument_list|)
condition|)
block|{
if|if
condition|(
name|OakFixture
operator|.
name|OAK_MEMORY_NS
operator|.
name|equals
argument_list|(
name|fix
argument_list|)
condition|)
block|{
name|oakFixture
operator|=
name|OakFixture
operator|.
name|getMemoryNS
argument_list|(
name|cacheSize
operator|*
name|MB
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|oakFixture
operator|=
name|OakFixture
operator|.
name|getMemory
argument_list|(
name|cacheSize
operator|*
name|MB
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fix
operator|.
name|startsWith
argument_list|(
name|OakFixture
operator|.
name|OAK_MONGO
argument_list|)
condition|)
block|{
name|cIds
operator|=
name|clusterIds
operator|.
name|values
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|String
name|db
init|=
name|dbName
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Required argument db missing"
argument_list|)
throw|;
block|}
if|if
condition|(
name|OakFixture
operator|.
name|OAK_MONGO_NS
operator|.
name|equals
argument_list|(
name|fix
argument_list|)
condition|)
block|{
name|oakFixture
operator|=
name|OakFixture
operator|.
name|getMongoNS
argument_list|(
name|host
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|,
name|port
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|,
name|db
argument_list|,
literal|false
argument_list|,
name|cacheSize
operator|*
name|MB
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|oakFixture
operator|=
name|OakFixture
operator|.
name|getMongo
argument_list|(
name|host
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|,
name|port
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|,
name|db
argument_list|,
literal|false
argument_list|,
name|cacheSize
operator|*
name|MB
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fix
operator|.
name|equals
argument_list|(
name|OakFixture
operator|.
name|OAK_SEGMENT_TAR
argument_list|)
condition|)
block|{
name|File
name|baseFile
init|=
name|base
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Required argument base missing."
argument_list|)
throw|;
block|}
name|oakFixture
operator|=
name|OakFixture
operator|.
name|getVanillaSegmentTar
argument_list|(
name|baseFile
argument_list|,
literal|256
argument_list|,
name|cacheSize
argument_list|,
name|mmap
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fix
operator|.
name|equals
argument_list|(
name|OakFixture
operator|.
name|OAK_RDB
argument_list|)
condition|)
block|{
name|oakFixture
operator|=
name|OakFixture
operator|.
name|getRDB
argument_list|(
name|OakFixture
operator|.
name|OAK_RDB
argument_list|,
name|rdbjdbcuri
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|,
name|rdbjdbcuser
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|,
name|rdbjdbcpasswd
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|,
name|rdbjdbctableprefix
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|,
literal|false
argument_list|,
name|cacheSize
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported repository setup "
operator|+
name|fix
argument_list|)
throw|;
block|}
name|startOakServer
argument_list|(
name|oakFixture
argument_list|,
name|uri
argument_list|,
name|cIds
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

