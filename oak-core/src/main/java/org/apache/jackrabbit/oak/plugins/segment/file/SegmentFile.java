begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_class
specifier|abstract
class|class
name|SegmentFile
block|{
specifier|protected
specifier|static
class|class
name|Entry
block|{
name|int
name|position
decl_stmt|;
name|int
name|length
decl_stmt|;
name|Entry
parameter_list|(
name|int
name|position
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|position
operator|=
name|position
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
block|}
specifier|private
specifier|volatile
name|Map
argument_list|<
name|UUID
argument_list|,
name|Entry
argument_list|>
name|entries
init|=
name|emptyMap
argument_list|()
decl_stmt|;
name|ByteBuffer
name|readEntry
parameter_list|(
name|UUID
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|Entry
name|entry
init|=
name|entries
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
return|return
name|read
argument_list|(
name|entry
operator|.
name|position
argument_list|,
name|entry
operator|.
name|length
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
specifier|abstract
name|int
name|length
parameter_list|()
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|ByteBuffer
name|read
parameter_list|(
name|int
name|position
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{     }
block|}
end_class

end_unit

