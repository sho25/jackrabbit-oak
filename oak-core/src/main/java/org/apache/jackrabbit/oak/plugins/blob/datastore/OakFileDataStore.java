begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|BaseEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|FileDataStore
import|;
end_import

begin_comment
comment|/**  *  Oak specific extension of JR2 FileDataStore which enables  *  provisioning the signing key via OSGi config  */
end_comment

begin_class
specifier|public
class|class
name|OakFileDataStore
extends|extends
name|FileDataStore
block|{
specifier|private
name|byte
index|[]
name|referenceKey
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|byte
index|[]
name|getOrCreateReferenceKey
parameter_list|()
throws|throws
name|DataStoreException
block|{
if|if
condition|(
name|referenceKey
operator|!=
literal|null
condition|)
block|{
return|return
name|referenceKey
return|;
block|}
return|return
name|super
operator|.
name|getOrCreateReferenceKey
argument_list|()
return|;
block|}
comment|/**      * Set Base64 encoded signing key      */
specifier|public
name|void
name|setReferenceKeyEncoded
parameter_list|(
name|String
name|encodedKey
parameter_list|)
block|{
name|this
operator|.
name|referenceKey
operator|=
name|BaseEncoding
operator|.
name|base64
argument_list|()
operator|.
name|decode
argument_list|(
name|encodedKey
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the referenceKey from plain text. Key content would be      * UTF-8 encoding of the string.      *      *<p>This is useful when setting key via generic      *  bean property manipulation from string properties. User can specify the      *  key in plain text and that would be passed on this object via      *  {@link org.apache.jackrabbit.oak.commons.PropertiesUtil#populate(Object, java.util.Map, boolean)}      *      * @param textKey base64 encoded key      * @see org.apache.jackrabbit.oak.commons.PropertiesUtil#populate(Object, java.util.Map, boolean)      */
specifier|public
name|void
name|setReferenceKeyPlainText
parameter_list|(
name|String
name|textKey
parameter_list|)
block|{
name|this
operator|.
name|referenceKey
operator|=
name|textKey
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setReferenceKey
parameter_list|(
name|byte
index|[]
name|referenceKey
parameter_list|)
block|{
name|this
operator|.
name|referenceKey
operator|=
name|referenceKey
expr_stmt|;
block|}
block|}
end_class

end_unit

