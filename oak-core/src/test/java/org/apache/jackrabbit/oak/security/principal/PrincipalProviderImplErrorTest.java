begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|principal
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|withSettings
import|;
end_import

begin_class
specifier|public
class|class
name|PrincipalProviderImplErrorTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|User
name|testUser
decl_stmt|;
specifier|private
name|UserManager
name|umMock
decl_stmt|;
specifier|private
name|PrincipalProviderImpl
name|principalProvider
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|testUser
operator|=
name|getTestUser
argument_list|()
expr_stmt|;
name|Answer
name|throwingAnswer
init|=
operator|(
name|Answer
argument_list|<
name|Object
argument_list|>
operator|)
name|invocation
lambda|->
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|()
throw|;
block|}
decl_stmt|;
name|umMock
operator|=
name|mock
argument_list|(
name|UserManager
operator|.
name|class
argument_list|,
name|throwingAnswer
argument_list|)
expr_stmt|;
name|principalProvider
operator|=
name|createPrincipalProvider
argument_list|(
name|umMock
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PrincipalProviderImpl
name|createPrincipalProvider
parameter_list|(
annotation|@
name|NotNull
name|UserManager
name|um
parameter_list|)
block|{
name|UserConfiguration
name|uc
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getUserManager
argument_list|(
name|any
argument_list|(
name|Root
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|NamePathMapper
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|um
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
return|return
operator|new
name|PrincipalProviderImpl
argument_list|(
name|root
argument_list|,
name|uc
argument_list|,
name|DEFAULT
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|principalName
init|=
name|testUser
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|principalProvider
operator|.
name|getPrincipal
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|umMock
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
name|principalName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalFailsOnUser
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|principalName
init|=
name|testUser
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Principal
name|p
init|=
operator|new
name|PrincipalImpl
argument_list|(
name|principalName
argument_list|)
decl_stmt|;
name|User
name|userMock
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|User
operator|.
name|class
argument_list|)
operator|.
name|getPrincipal
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RepositoryException
argument_list|()
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|UserManager
name|um
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|UserManager
operator|.
name|class
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|userMock
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|createPrincipalProvider
argument_list|(
name|um
argument_list|)
operator|.
name|getPrincipal
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|um
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|userMock
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEveryone
parameter_list|()
throws|throws
name|Exception
block|{
name|assertSame
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|principalProvider
operator|.
name|getPrincipal
argument_list|(
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|umMock
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetItemBasedPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|jcrPath
init|=
name|getTestUser
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|oakPath
init|=
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|jcrPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|oakPath
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|principalProvider
operator|.
name|getItemBasedPrincipal
argument_list|(
name|oakPath
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|umMock
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getAuthorizableByPath
argument_list|(
name|jcrPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMembershipPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|principalProvider
operator|.
name|getMembershipPrincipals
argument_list|(
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|umMock
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMembershipPrincipalsFailsOnUser
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|p
init|=
name|testUser
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|User
name|userMock
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|User
operator|.
name|class
argument_list|)
operator|.
name|memberOf
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RepositoryException
argument_list|()
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|UserManager
name|um
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|UserManager
operator|.
name|class
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|userMock
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|,
name|createPrincipalProvider
argument_list|(
name|um
argument_list|)
operator|.
name|getMembershipPrincipals
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|um
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|userMock
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|memberOf
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|principalProvider
operator|.
name|getPrincipals
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|umMock
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindByTypeUser
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|principalProvider
operator|.
name|findPrincipals
argument_list|(
name|PrincipalManager
operator|.
name|SEARCH_TYPE_NOT_GROUP
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|umMock
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|findAuthorizables
argument_list|(
name|any
argument_list|(
name|Query
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindByTypeGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|principalProvider
operator|.
name|findPrincipals
argument_list|(
name|PrincipalManager
operator|.
name|SEARCH_TYPE_GROUP
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|umMock
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|findAuthorizables
argument_list|(
name|any
argument_list|(
name|Query
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFind
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|principalProvider
operator|.
name|findPrincipals
argument_list|(
name|testUser
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
name|PrincipalManager
operator|.
name|SEARCH_TYPE_NOT_GROUP
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|umMock
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|findAuthorizables
argument_list|(
name|any
argument_list|(
name|Query
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindFailsOnUser
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|p
init|=
name|testUser
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|User
name|userMock
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|User
operator|.
name|class
argument_list|)
operator|.
name|getPrincipal
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RepositoryException
argument_list|()
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|UserManager
name|um
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|UserManager
operator|.
name|class
argument_list|)
operator|.
name|findAuthorizables
argument_list|(
name|any
argument_list|(
name|Query
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Iterators
operator|.
name|singletonIterator
argument_list|(
name|userMock
argument_list|)
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|createPrincipalProvider
argument_list|(
name|um
argument_list|)
operator|.
name|findPrincipals
argument_list|(
name|PrincipalManager
operator|.
name|SEARCH_TYPE_NOT_GROUP
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|userMock
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

