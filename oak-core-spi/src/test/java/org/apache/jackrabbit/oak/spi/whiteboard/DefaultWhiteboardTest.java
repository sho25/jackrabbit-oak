begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultWhiteboardTest
block|{
specifier|private
name|Whiteboard
name|whiteboard
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createWhiteboard
parameter_list|()
block|{
name|whiteboard
operator|=
operator|new
name|DefaultWhiteboard
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|filteredTracker
parameter_list|()
block|{
name|whiteboard
operator|.
name|register
argument_list|(
name|Service1
operator|.
name|class
argument_list|,
operator|new
name|Service1
argument_list|(
literal|"s1"
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|whiteboard
operator|.
name|register
argument_list|(
name|Service2
operator|.
name|class
argument_list|,
operator|new
name|Service2
argument_list|(
literal|"s2"
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"role"
argument_list|,
literal|"myrole"
argument_list|)
argument_list|)
expr_stmt|;
name|whiteboard
operator|.
name|register
argument_list|(
name|Service3
operator|.
name|class
argument_list|,
operator|new
name|Service3
argument_list|(
literal|"s3_1"
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|whiteboard
operator|.
name|register
argument_list|(
name|Service3
operator|.
name|class
argument_list|,
operator|new
name|Service3
argument_list|(
literal|"s3_2"
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"role"
argument_list|,
literal|"myrole"
argument_list|)
argument_list|)
expr_stmt|;
name|whiteboard
operator|.
name|register
argument_list|(
name|Service3
operator|.
name|class
argument_list|,
operator|new
name|Service3
argument_list|(
literal|"s3_3"
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"role"
argument_list|,
literal|"myotherrole"
argument_list|,
literal|"id"
argument_list|,
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
literal|"s1"
argument_list|)
argument_list|,
name|track
argument_list|(
name|Service1
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
literal|"s1"
argument_list|)
argument_list|,
name|track
argument_list|(
name|Service1
operator|.
name|class
argument_list|,
name|singletonMap
argument_list|(
literal|"role"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|()
argument_list|,
name|track
argument_list|(
name|Service1
operator|.
name|class
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"role"
argument_list|,
literal|"myrole"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
literal|"s2"
argument_list|)
argument_list|,
name|track
argument_list|(
name|Service2
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|()
argument_list|,
name|track
argument_list|(
name|Service2
operator|.
name|class
argument_list|,
name|singletonMap
argument_list|(
literal|"role"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
literal|"s2"
argument_list|)
argument_list|,
name|track
argument_list|(
name|Service2
operator|.
name|class
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"role"
argument_list|,
literal|"myrole"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
literal|"s3_1"
argument_list|,
literal|"s3_2"
argument_list|,
literal|"s3_3"
argument_list|)
argument_list|,
name|track
argument_list|(
name|Service3
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
literal|"s3_1"
argument_list|)
argument_list|,
name|track
argument_list|(
name|Service3
operator|.
name|class
argument_list|,
name|singletonMap
argument_list|(
literal|"role"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
literal|"s3_2"
argument_list|)
argument_list|,
name|track
argument_list|(
name|Service3
operator|.
name|class
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"role"
argument_list|,
literal|"myrole"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
literal|"s3_3"
argument_list|)
argument_list|,
name|track
argument_list|(
name|Service3
operator|.
name|class
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"role"
argument_list|,
literal|"myotherrole"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
literal|"s3_3"
argument_list|)
argument_list|,
name|track
argument_list|(
name|Service3
operator|.
name|class
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"role"
argument_list|,
literal|"myotherrole"
argument_list|,
literal|"id"
argument_list|,
literal|"1024"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
literal|"s3_3"
argument_list|)
argument_list|,
name|track
argument_list|(
name|Service3
operator|.
name|class
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"id"
argument_list|,
literal|"1024"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|()
argument_list|,
name|track
argument_list|(
name|Service3
operator|.
name|class
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"id"
argument_list|,
literal|"2048"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sameServiceRegisteredAgain
parameter_list|()
block|{
name|Service1
name|s1
init|=
operator|new
name|Service1
argument_list|(
literal|"s1"
argument_list|)
decl_stmt|;
name|whiteboard
operator|.
name|register
argument_list|(
name|Service1
operator|.
name|class
argument_list|,
name|s1
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|whiteboard
operator|.
name|register
argument_list|(
name|Service1
operator|.
name|class
argument_list|,
name|s1
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|whiteboard
operator|.
name|register
argument_list|(
name|Service1
operator|.
name|class
argument_list|,
name|s1
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
literal|"s1"
argument_list|)
argument_list|,
name|track
argument_list|(
name|Service1
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|unregister
parameter_list|()
block|{
name|Registration
name|r1
init|=
name|whiteboard
operator|.
name|register
argument_list|(
name|Service1
operator|.
name|class
argument_list|,
operator|new
name|Service1
argument_list|(
literal|"s1"
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|Registration
name|r2
init|=
name|whiteboard
operator|.
name|register
argument_list|(
name|Service2
operator|.
name|class
argument_list|,
operator|new
name|Service2
argument_list|(
literal|"s2"
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"role"
argument_list|,
literal|"myrole"
argument_list|)
argument_list|)
decl_stmt|;
name|Registration
name|r3_1
init|=
name|whiteboard
operator|.
name|register
argument_list|(
name|Service3
operator|.
name|class
argument_list|,
operator|new
name|Service3
argument_list|(
literal|"s3_1"
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|Registration
name|r3_2
init|=
name|whiteboard
operator|.
name|register
argument_list|(
name|Service3
operator|.
name|class
argument_list|,
operator|new
name|Service3
argument_list|(
literal|"s3_2"
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"role"
argument_list|,
literal|"myrole"
argument_list|)
argument_list|)
decl_stmt|;
name|Registration
name|r3_3
init|=
name|whiteboard
operator|.
name|register
argument_list|(
name|Service3
operator|.
name|class
argument_list|,
operator|new
name|Service3
argument_list|(
literal|"s3_3"
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"role"
argument_list|,
literal|"myotherrole"
argument_list|,
literal|"id"
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
literal|"s1"
argument_list|)
argument_list|,
name|track
argument_list|(
name|Service1
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|r1
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|()
argument_list|,
name|track
argument_list|(
name|Service1
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
literal|"s2"
argument_list|)
argument_list|,
name|track
argument_list|(
name|Service2
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|r2
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|()
argument_list|,
name|track
argument_list|(
name|Service2
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
literal|"s3_1"
argument_list|,
literal|"s3_2"
argument_list|,
literal|"s3_3"
argument_list|)
argument_list|,
name|track
argument_list|(
name|Service3
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|r3_1
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
literal|"s3_2"
argument_list|,
literal|"s3_3"
argument_list|)
argument_list|,
name|track
argument_list|(
name|Service3
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|r3_2
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
literal|"s3_3"
argument_list|)
argument_list|,
name|track
argument_list|(
name|Service3
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|r3_3
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|()
argument_list|,
name|track
argument_list|(
name|Service3
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|Service
parameter_list|>
name|Set
argument_list|<
name|String
argument_list|>
name|track
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|track
argument_list|(
name|clazz
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|Service
parameter_list|>
name|Set
argument_list|<
name|String
argument_list|>
name|track
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
specifier|final
name|Tracker
argument_list|<
name|T
argument_list|>
name|tracker
decl_stmt|;
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|tracker
operator|=
name|whiteboard
operator|.
name|track
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tracker
operator|=
name|whiteboard
operator|.
name|track
argument_list|(
name|clazz
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|tracker
operator|.
name|getServices
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Service
operator|::
name|getId
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|tracker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|abstract
specifier|static
class|class
name|Service
block|{
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
specifier|private
name|Service
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
block|}
specifier|private
specifier|final
specifier|static
class|class
name|Service1
extends|extends
name|Service
block|{
specifier|private
name|Service1
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
specifier|static
class|class
name|Service2
extends|extends
name|Service
block|{
specifier|private
name|Service2
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
specifier|static
class|class
name|Service3
extends|extends
name|Service
block|{
specifier|private
name|Service3
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

