begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|lock
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|lock
operator|.
name|LockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
operator|.
name|SessionDelegate
import|;
end_import

begin_comment
comment|/**  * Simple lock manager implementation that just keeps track of a set of lock  * tokens and delegates all locking operations back to the {@link Session}  * and {@link Node} implementations.  */
end_comment

begin_class
specifier|public
class|class
name|LockManagerImpl
implements|implements
name|LockManager
block|{
specifier|private
specifier|final
name|SessionDelegate
name|sessionDelegate
decl_stmt|;
specifier|private
specifier|final
name|SessionContext
name|sessionContext
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|tokens
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|LockManagerImpl
parameter_list|(
name|SessionDelegate
name|sessionDelegate
parameter_list|,
name|SessionContext
name|sessionContext
parameter_list|)
block|{
name|this
operator|.
name|sessionDelegate
operator|=
name|sessionDelegate
expr_stmt|;
name|this
operator|.
name|sessionContext
operator|=
name|sessionContext
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getLockTokens
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
index|[]
name|array
init|=
name|tokens
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|tokens
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|array
argument_list|)
expr_stmt|;
return|return
name|array
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addLockToken
parameter_list|(
name|String
name|lockToken
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|tokens
operator|.
name|add
argument_list|(
name|lockToken
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeLockToken
parameter_list|(
name|String
name|lockToken
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
operator|!
name|tokens
operator|.
name|remove
argument_list|(
name|lockToken
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Lock token "
operator|+
name|lockToken
operator|+
literal|" is not held by this session"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLocked
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|getSession
argument_list|()
operator|.
name|getNode
argument_list|(
name|absPath
argument_list|)
operator|.
name|isLocked
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|boolean
name|holdsLock
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|getSession
argument_list|()
operator|.
name|getNode
argument_list|(
name|absPath
argument_list|)
operator|.
name|holdsLock
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|Lock
name|getLock
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|getSession
argument_list|()
operator|.
name|getNode
argument_list|(
name|absPath
argument_list|)
operator|.
name|getLock
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|Lock
name|lock
parameter_list|(
name|String
name|absPath
parameter_list|,
name|boolean
name|isDeep
parameter_list|,
name|boolean
name|isSessionScoped
parameter_list|,
name|long
name|timeoutHint
parameter_list|,
name|String
name|ownerInfo
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|getSession
argument_list|()
operator|.
name|getNode
argument_list|(
name|absPath
argument_list|)
operator|.
name|lock
argument_list|(
name|isDeep
argument_list|,
name|isSessionScoped
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|void
name|unlock
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|getSession
argument_list|()
operator|.
name|getNode
argument_list|(
name|absPath
argument_list|)
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Nonnull
specifier|private
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|sessionContext
operator|.
name|getSession
argument_list|()
return|;
block|}
block|}
end_class

end_unit

