begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdateProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|IndexDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|NodeStateNodeTypeInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryEngineSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|NodeTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|NodeTypeInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|SelectorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|FilterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_BASE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
operator|.
name|EMPTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|LuceneIndexPathRestrictionTest
block|{
specifier|private
specifier|static
specifier|final
name|EditorHook
name|HOOK
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|IndexUpdateProvider
argument_list|(
operator|new
name|LuceneIndexEditorProvider
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|NodeState
name|root
decl_stmt|;
specifier|private
name|NodeBuilder
name|rootBuilder
decl_stmt|;
specifier|private
name|IndexTracker
name|tracker
decl_stmt|;
specifier|private
name|LucenePropertyIndex
name|index
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|root
operator|=
name|InitialContentHelper
operator|.
name|INITIAL_CONTENT
expr_stmt|;
name|rootBuilder
operator|=
name|root
operator|.
name|builder
argument_list|()
expr_stmt|;
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|LucenePropertyIndex
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
comment|// remove any indexes (that cause commits to fail due to missing provider)
name|rootBuilder
operator|.
name|child
argument_list|(
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pathTranformationWithNoPathRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinitionBuilder
name|idxBuilder
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|rootBuilder
operator|.
name|child
argument_list|(
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|child
argument_list|(
literal|"fooIndex"
argument_list|)
argument_list|)
operator|.
name|noAsync
argument_list|()
operator|.
name|evaluatePathRestrictions
argument_list|()
decl_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|idxBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|NodeBuilder
name|testRootBuilder
init|=
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|testRootBuilder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"j:c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|testRootBuilder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|testRootBuilder
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
operator|.
name|child
argument_list|(
literal|"d"
argument_list|)
operator|.
name|child
argument_list|(
literal|"j:c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|FilterImpl
name|f
decl_stmt|;
comment|// //*[j:c/foo = 'bar'] -> foo:bar -> transform 1 level up
name|f
operator|=
name|createFilter
argument_list|(
name|root
argument_list|,
name|NT_BASE
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"j:c/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|f
argument_list|,
name|of
argument_list|(
literal|"/test"
argument_list|,
literal|"/test/a"
argument_list|,
literal|"/test/c/d"
argument_list|)
argument_list|)
expr_stmt|;
comment|// //*[*/foo = 'bar'] -> foo:bar -> transform 1 level up
name|f
operator|=
name|createFilter
argument_list|(
name|root
argument_list|,
name|NT_BASE
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"*/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|f
argument_list|,
name|of
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test"
argument_list|,
literal|"/test/c/d"
argument_list|)
argument_list|)
expr_stmt|;
comment|// //*[d/*/foo = 'bar'] -> foo:bar -> transform 2 level up
name|f
operator|=
name|createFilter
argument_list|(
name|root
argument_list|,
name|NT_BASE
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"d/*/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|f
argument_list|,
name|of
argument_list|(
literal|"/"
argument_list|,
literal|"/test"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pathTranformationWithAllChildrenPathRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinitionBuilder
name|idxBuilder
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|rootBuilder
operator|.
name|child
argument_list|(
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|child
argument_list|(
literal|"fooIndex"
argument_list|)
argument_list|)
operator|.
name|noAsync
argument_list|()
operator|.
name|evaluatePathRestrictions
argument_list|()
decl_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|idxBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|NodeBuilder
name|testRootBuilder
init|=
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|testRootBuilder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"j:c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|testRootBuilder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|testRootBuilder
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
operator|.
name|child
argument_list|(
literal|"d"
argument_list|)
operator|.
name|child
argument_list|(
literal|"j:c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|FilterImpl
name|f
decl_stmt|;
comment|// /jcr:root/test//*[j:c/foo = 'bar'] -> foo:bar :ancestors:/test -> transform 1 level up
name|f
operator|=
name|createFilter
argument_list|(
name|root
argument_list|,
name|NT_BASE
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"j:c/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictPath
argument_list|(
literal|"/test"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|f
argument_list|,
name|of
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/c/d"
argument_list|)
argument_list|)
expr_stmt|;
comment|// /jcr:root/test//*[*/foo = 'bar'] -> foo:bar :ancestors:/test -> transform 1 level up
name|f
operator|=
name|createFilter
argument_list|(
name|root
argument_list|,
name|NT_BASE
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"*/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictPath
argument_list|(
literal|"/test"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|f
argument_list|,
name|of
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/c/d"
argument_list|)
argument_list|)
expr_stmt|;
comment|// /jcr:root/test//*[d/*/foo = 'bar'] -> foo:bar :ancestors:/test -> transform 2 level up
name|f
operator|=
name|createFilter
argument_list|(
name|root
argument_list|,
name|NT_BASE
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"d/*/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictPath
argument_list|(
literal|"/test"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|f
argument_list|,
name|of
argument_list|(
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pathTranformationWithDirectChildrenPathRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinitionBuilder
name|idxBuilder
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|rootBuilder
operator|.
name|child
argument_list|(
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|child
argument_list|(
literal|"fooIndex"
argument_list|)
argument_list|)
operator|.
name|noAsync
argument_list|()
operator|.
name|evaluatePathRestrictions
argument_list|()
decl_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|idxBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|NodeBuilder
name|testRootBuilder
init|=
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|testRootBuilder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"j:c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|testRootBuilder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|testRootBuilder
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
operator|.
name|child
argument_list|(
literal|"d"
argument_list|)
operator|.
name|child
argument_list|(
literal|"j:c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|FilterImpl
name|f
decl_stmt|;
comment|// /jcr:root/test/*[j:c/foo = 'bar'] -> foo:bar :ancestors:/test :depth:[3 TO 3] -> transform 1 level up
name|f
operator|=
name|createFilter
argument_list|(
name|root
argument_list|,
name|NT_BASE
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"j:c/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictPath
argument_list|(
literal|"/test"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|DIRECT_CHILDREN
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|f
argument_list|,
name|of
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
comment|// /jcr:root/test/*[*/foo = 'bar'] -> foo:bar :ancestors:/test :depth:[3 TO 3] -> transform 1 level up
name|f
operator|=
name|createFilter
argument_list|(
name|root
argument_list|,
name|NT_BASE
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"*/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictPath
argument_list|(
literal|"/test"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|DIRECT_CHILDREN
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|f
argument_list|,
name|of
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
comment|// /jcr:root/test/*[d/*/foo = 'bar'] -> foo:bar :ancestors:/test :depth:[4 TO 4] -> transform 2 level up
name|f
operator|=
name|createFilter
argument_list|(
name|root
argument_list|,
name|NT_BASE
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"d/*/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictPath
argument_list|(
literal|"/test"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|DIRECT_CHILDREN
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|f
argument_list|,
name|of
argument_list|(
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pathTranformationWithExactPathRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinitionBuilder
name|idxBuilder
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|rootBuilder
operator|.
name|child
argument_list|(
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|child
argument_list|(
literal|"fooIndex"
argument_list|)
argument_list|)
operator|.
name|noAsync
argument_list|()
operator|.
name|evaluatePathRestrictions
argument_list|()
decl_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|idxBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|NodeBuilder
name|testRootBuilder
init|=
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|testRootBuilder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"j:c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|testRootBuilder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|testRootBuilder
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
operator|.
name|child
argument_list|(
literal|"d"
argument_list|)
operator|.
name|child
argument_list|(
literal|"j:c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|FilterImpl
name|f
decl_stmt|;
comment|// /jcr:root/test/a[j:c/foo = 'bar'] -> foo:bar :path:/test/a/j:c -> transform 1 level up
name|f
operator|=
name|createFilter
argument_list|(
name|root
argument_list|,
name|NT_BASE
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"j:c/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictPath
argument_list|(
literal|"/test/a"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|EXACT
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|f
argument_list|,
name|of
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
comment|// /jcr:root/test/a[*/foo = 'bar'] -> foo:bar -> transform 1 level up + filter path restriction
name|f
operator|=
name|createFilter
argument_list|(
name|root
argument_list|,
name|NT_BASE
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"*/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictPath
argument_list|(
literal|"/test/a"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|EXACT
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|f
argument_list|,
name|of
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
comment|// /jcr:root/test/c[d/*/foo = 'bar'] -> foo:bar -> transform 2 level up + filter path restriction
name|f
operator|=
name|createFilter
argument_list|(
name|root
argument_list|,
name|NT_BASE
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"d/*/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictPath
argument_list|(
literal|"/test/c"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|EXACT
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|f
argument_list|,
name|of
argument_list|(
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pathTranformationWithParentFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDefinitionBuilder
name|idxBuilder
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|rootBuilder
operator|.
name|child
argument_list|(
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|child
argument_list|(
literal|"fooIndex"
argument_list|)
argument_list|)
operator|.
name|noAsync
argument_list|()
operator|.
name|evaluatePathRestrictions
argument_list|()
decl_stmt|;
name|idxBuilder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|idxBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|NodeBuilder
name|testRootBuilder
init|=
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|testRootBuilder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"j:c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|testRootBuilder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|testRootBuilder
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
operator|.
name|child
argument_list|(
literal|"d"
argument_list|)
operator|.
name|child
argument_list|(
literal|"j:c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|FilterImpl
name|f
decl_stmt|;
comment|// /jcr:root/test/a/b/j:c/..[j:c/foo = 'bar'] -> foo:bar :path:/test/a/b/j:c -> transform 1 level up
name|f
operator|=
name|createFilter
argument_list|(
name|root
argument_list|,
name|NT_BASE
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"j:c/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictPath
argument_list|(
literal|"/test/c/d/j:c"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|PARENT
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|f
argument_list|,
name|of
argument_list|(
literal|"/test/c/d"
argument_list|)
argument_list|)
expr_stmt|;
comment|// /jcr:root/test/a/b/j:c/..[*/foo = 'bar'] -> foo:bar -> transform 1 level up
name|f
operator|=
name|createFilter
argument_list|(
name|root
argument_list|,
name|NT_BASE
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"*/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictPath
argument_list|(
literal|"/test/a/b/j:c"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|PARENT
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|f
argument_list|,
name|of
argument_list|(
literal|"/test"
argument_list|,
literal|"/test/a"
argument_list|,
literal|"/test/c/d"
argument_list|)
argument_list|)
expr_stmt|;
comment|// /jcr:root/test/c/d/..[d/*/foo = 'bar'] -> foo:bar -> transform 2 level up
name|f
operator|=
name|createFilter
argument_list|(
name|root
argument_list|,
name|NT_BASE
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"d/*/foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictPath
argument_list|(
literal|"/test/c/d"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|PARENT
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|f
argument_list|,
name|of
argument_list|(
literal|"/"
argument_list|,
literal|"/test"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateResult
parameter_list|(
name|Filter
name|f
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|expected
parameter_list|)
block|{
name|List
argument_list|<
name|QueryIndex
operator|.
name|IndexPlan
argument_list|>
name|plans
init|=
name|index
operator|.
name|getPlans
argument_list|(
name|f
argument_list|,
literal|null
argument_list|,
name|root
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Only one plan must show up"
argument_list|,
literal|1
argument_list|,
name|plans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QueryIndex
operator|.
name|IndexPlan
name|plan
init|=
name|plans
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Cursor
name|cursor
init|=
name|index
operator|.
name|query
argument_list|(
name|plan
argument_list|,
name|root
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
while|while
condition|(
name|cursor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|cursor
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
argument_list|,
name|paths
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|commit
parameter_list|()
throws|throws
name|Exception
block|{
name|root
operator|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|rootBuilder
operator|.
name|getBaseState
argument_list|()
argument_list|,
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|EMPTY
argument_list|)
expr_stmt|;
name|rootBuilder
operator|=
name|root
operator|.
name|builder
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|FilterImpl
name|createFilter
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|String
name|nodeTypeName
parameter_list|)
block|{
name|NodeTypeInfoProvider
name|nodeTypes
init|=
operator|new
name|NodeStateNodeTypeInfoProvider
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|NodeTypeInfo
name|type
init|=
name|nodeTypes
operator|.
name|getNodeTypeInfo
argument_list|(
name|nodeTypeName
argument_list|)
decl_stmt|;
name|SelectorImpl
name|selector
init|=
operator|new
name|SelectorImpl
argument_list|(
name|type
argument_list|,
name|nodeTypeName
argument_list|)
decl_stmt|;
return|return
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
literal|"SELECT * FROM ["
operator|+
name|nodeTypeName
operator|+
literal|"]"
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

