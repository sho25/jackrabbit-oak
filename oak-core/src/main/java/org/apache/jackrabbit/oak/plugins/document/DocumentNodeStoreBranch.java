begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
operator|.
name|MERGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
operator|.
name|OAK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
operator|.
name|STATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|COLLISIONS
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ConflictAnnotatingRebaseDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStoreBranch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of a DocumentMK based node store branch.  */
end_comment

begin_class
class|class
name|DocumentNodeStoreBranch
implements|implements
name|NodeStoreBranch
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DocumentNodeStoreBranch
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PerfLogger
name|perfLogger
init|=
operator|new
name|PerfLogger
argument_list|(
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DocumentNodeStoreBranch
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".perf"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_LOCK_TRY_TIME_MULTIPLIER
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.maxLockTryTimeMultiplier"
argument_list|,
literal|30
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ConcurrentMap
argument_list|<
name|Thread
argument_list|,
name|DocumentNodeStoreBranch
argument_list|>
name|BRANCHES
init|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|MIN_BACKOFF
init|=
literal|50
decl_stmt|;
comment|/** The underlying store to which this branch belongs */
specifier|protected
specifier|final
name|DocumentNodeStore
name|store
decl_stmt|;
specifier|protected
specifier|final
name|long
name|maximumBackoff
decl_stmt|;
comment|/** The maximum time in milliseconds to wait for the merge lock. */
specifier|protected
specifier|final
name|long
name|maxLockTryTimeMS
decl_stmt|;
comment|/** Lock for coordinating concurrent merge operations */
specifier|private
specifier|final
name|ReadWriteLock
name|mergeLock
decl_stmt|;
comment|/**      * State of the this branch. Either {@link Unmodified}, {@link InMemory}, {@link Persisted},      * {@link ResetFailed} or {@link Merged}.      * @see BranchState      */
specifier|private
name|BranchState
name|branchState
decl_stmt|;
name|DocumentNodeStoreBranch
parameter_list|(
name|DocumentNodeStore
name|store
parameter_list|,
name|DocumentNodeState
name|base
parameter_list|,
name|ReadWriteLock
name|mergeLock
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|checkNotNull
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|this
operator|.
name|branchState
operator|=
operator|new
name|Unmodified
argument_list|(
name|checkNotNull
argument_list|(
name|base
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|maximumBackoff
operator|=
name|Math
operator|.
name|max
argument_list|(
operator|(
name|long
operator|)
name|store
operator|.
name|getMaxBackOffMillis
argument_list|()
argument_list|,
name|MIN_BACKOFF
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxLockTryTimeMS
operator|=
call|(
name|long
call|)
argument_list|(
name|store
operator|.
name|getMaxBackOffMillis
argument_list|()
operator|*
name|MAX_LOCK_TRY_TIME_MULTIPLIER
argument_list|)
expr_stmt|;
name|this
operator|.
name|mergeLock
operator|=
name|mergeLock
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|getBase
parameter_list|()
block|{
return|return
name|branchState
operator|.
name|getBase
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|getHead
parameter_list|()
block|{
return|return
name|branchState
operator|.
name|getHead
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRoot
parameter_list|(
name|NodeState
name|newRoot
parameter_list|)
block|{
name|branchState
operator|.
name|setRoot
argument_list|(
name|checkNotNull
argument_list|(
name|newRoot
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|merge
parameter_list|(
annotation|@
name|Nonnull
name|CommitHook
name|hook
parameter_list|,
annotation|@
name|Nonnull
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
try|try
block|{
return|return
name|merge0
argument_list|(
name|hook
argument_list|,
name|info
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|isOfType
argument_list|(
name|MERGE
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
comment|// retry with exclusive lock, blocking other
comment|// concurrent writes
return|return
name|merge0
argument_list|(
name|hook
argument_list|,
name|info
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rebase
parameter_list|()
block|{
name|branchState
operator|.
name|rebase
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|branchState
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//------------------------------< internal>--------------------------------
comment|/**      * For test purposes only!      */
annotation|@
name|Nonnull
name|ReadWriteLock
name|getMergeLock
parameter_list|()
block|{
return|return
name|mergeLock
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|NodeState
name|merge0
parameter_list|(
annotation|@
name|Nonnull
name|CommitHook
name|hook
parameter_list|,
annotation|@
name|Nonnull
name|CommitInfo
name|info
parameter_list|,
name|boolean
name|exclusive
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|CommitFailedException
name|ex
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|Revision
argument_list|>
name|conflictRevisions
init|=
operator|new
name|HashSet
argument_list|<
name|Revision
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|numRetries
init|=
literal|0
decl_stmt|;
name|boolean
name|suspended
init|=
literal|false
decl_stmt|;
for|for
control|(
name|long
name|backoff
init|=
name|MIN_BACKOFF
init|;
name|backoff
operator|<=
name|maximumBackoff
condition|;
name|backoff
operator|*=
literal|2
control|)
block|{
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|numRetries
operator|++
expr_stmt|;
specifier|final
name|long
name|start
init|=
name|perfLogger
operator|.
name|start
argument_list|()
decl_stmt|;
comment|// suspend until conflict revision is visible
comment|// or as a fallback sleep for a while
if|if
condition|(
operator|!
name|conflictRevisions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// suspend until conflicting revision is visible
name|LOG
operator|.
name|debug
argument_list|(
literal|"Suspending until {} is visible. Current head {}."
argument_list|,
name|conflictRevisions
argument_list|,
name|store
operator|.
name|getHeadRevision
argument_list|()
argument_list|)
expr_stmt|;
name|suspended
operator|=
literal|true
expr_stmt|;
name|store
operator|.
name|suspendUntilAll
argument_list|(
name|conflictRevisions
argument_list|)
expr_stmt|;
name|conflictRevisions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resumed. Current head {}."
argument_list|,
name|store
operator|.
name|getHeadRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|backoff
operator|+
name|RANDOM
operator|.
name|nextInt
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|backoff
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|perfLogger
operator|.
name|end
argument_list|(
name|start
argument_list|,
literal|1
argument_list|,
literal|"Merge - Retry attempt [{}]"
argument_list|,
name|numRetries
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|MERGE
argument_list|,
literal|3
argument_list|,
literal|"Merge interrupted"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|NodeState
name|result
init|=
name|branchState
operator|.
name|merge
argument_list|(
name|checkNotNull
argument_list|(
name|hook
argument_list|)
argument_list|,
name|checkNotNull
argument_list|(
name|info
argument_list|)
argument_list|,
name|exclusive
argument_list|)
decl_stmt|;
name|store
operator|.
name|getStatsCollector
argument_list|()
operator|.
name|doneMerge
argument_list|(
name|numRetries
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
argument_list|,
name|suspended
argument_list|,
name|exclusive
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|FailedWithConflictException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|conflictRevisions
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getConflictRevisions
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Merge Error"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
comment|// only retry on merge failures. these may be caused by
comment|// changes introduce by a commit hook and may be resolved
comment|// by a rebase and running the hook again
if|if
condition|(
operator|!
name|ex
operator|.
name|isOfType
argument_list|(
name|MERGE
argument_list|)
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
comment|// if we get here retrying failed
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
name|store
operator|.
name|getStatsCollector
argument_list|()
operator|.
name|failedMerge
argument_list|(
name|numRetries
argument_list|,
name|time
argument_list|,
name|suspended
argument_list|,
name|exclusive
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|" (retries "
operator|+
name|numRetries
operator|+
literal|", "
operator|+
name|time
operator|+
literal|" ms)"
decl_stmt|;
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|ex
operator|.
name|getSource
argument_list|()
argument_list|,
name|ex
operator|.
name|getType
argument_list|()
argument_list|,
name|ex
operator|.
name|getCode
argument_list|()
argument_list|,
name|msg
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
comment|/**      * Acquires the merge lock either exclusive or shared.      *      * @param exclusive whether to acquire the merge lock exclusive.      * @return the acquired merge lock or {@code null} if the operation timed      * out.      * @throws CommitFailedException if the current thread is interrupted while      *                               acquiring the lock      */
annotation|@
name|CheckForNull
specifier|private
name|Lock
name|acquireMergeLock
parameter_list|(
name|boolean
name|exclusive
parameter_list|)
throws|throws
name|CommitFailedException
block|{
specifier|final
name|long
name|start
init|=
name|perfLogger
operator|.
name|start
argument_list|()
decl_stmt|;
name|Lock
name|lock
decl_stmt|;
if|if
condition|(
name|exclusive
condition|)
block|{
name|lock
operator|=
name|mergeLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|lock
operator|=
name|mergeLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
block|}
name|boolean
name|acquired
decl_stmt|;
try|try
block|{
name|acquired
operator|=
name|lock
operator|.
name|tryLock
argument_list|(
name|maxLockTryTimeMS
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|OAK
argument_list|,
literal|1
argument_list|,
literal|"Unable to acquire merge lock"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|String
name|mode
init|=
name|exclusive
condition|?
literal|"exclusive"
else|:
literal|"shared"
decl_stmt|;
if|if
condition|(
name|acquired
condition|)
block|{
name|perfLogger
operator|.
name|end
argument_list|(
name|start
argument_list|,
literal|1
argument_list|,
literal|"Merge - Acquired lock ({})"
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Time out while acquiring merge lock ({})"
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|lock
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|lock
return|;
block|}
specifier|private
interface|interface
name|Changes
block|{
name|void
name|with
parameter_list|(
name|Commit
name|c
parameter_list|)
function_decl|;
block|}
comment|/**      * Persists the changes between {@code toPersist} and {@code base}      * to the underlying store.      *<p>      * While this method does not declare any exceptions to be thrown, an      * implementation may still throw a runtime exception specific to the      * concrete implementation of this node store branch.      *      * @param toPersist the state with the changes on top of {@code base}.      * @param base the base state.      * @param info the commit info or {@code null} if there is none.      * @return the state with the persisted changes.      */
specifier|private
name|DocumentNodeState
name|persist
parameter_list|(
specifier|final
name|NodeState
name|toPersist
parameter_list|,
specifier|final
name|DocumentNodeState
name|base
parameter_list|,
specifier|final
name|CommitInfo
name|info
parameter_list|)
block|{
return|return
name|persist
argument_list|(
operator|new
name|Changes
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|with
parameter_list|(
name|Commit
name|c
parameter_list|)
block|{
name|toPersist
operator|.
name|compareAgainstBaseState
argument_list|(
name|base
argument_list|,
operator|new
name|CommitDiff
argument_list|(
name|store
argument_list|,
name|c
argument_list|,
name|store
operator|.
name|getBlobSerializer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|base
argument_list|,
name|info
argument_list|)
return|;
block|}
comment|/**      * Persist some changes on top of the given base state.      *      * @param op the changes to persist.      * @param base the base state.      * @param info the commit info.      * @return the result state.      */
specifier|private
name|DocumentNodeState
name|persist
parameter_list|(
name|Changes
name|op
parameter_list|,
name|DocumentNodeState
name|base
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Commit
name|c
init|=
name|store
operator|.
name|newCommit
argument_list|(
name|base
operator|.
name|getRevision
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|RevisionVector
name|rev
decl_stmt|;
try|try
block|{
name|op
operator|.
name|with
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no changes to persist. return base state and let
comment|// finally clause cancel the commit
return|return
name|base
return|;
block|}
name|c
operator|.
name|apply
argument_list|()
expr_stmt|;
name|rev
operator|=
name|store
operator|.
name|done
argument_list|(
name|c
argument_list|,
name|base
operator|.
name|getRevision
argument_list|()
operator|.
name|isBranch
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|store
operator|.
name|canceled
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|store
operator|.
name|getRoot
argument_list|(
name|rev
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|withCurrentBranch
parameter_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
throws|throws
name|Exception
block|{
name|Thread
name|t
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
name|Object
name|previous
init|=
name|BRANCHES
operator|.
name|putIfAbsent
argument_list|(
name|t
argument_list|,
name|this
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|callable
operator|.
name|call
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|BRANCHES
operator|.
name|remove
argument_list|(
name|t
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns the branch instance in use by the current thread or      * {@code null} if there is none.      *<p>      * See also {@link #withCurrentBranch(Callable)}.      *      */
annotation|@
name|CheckForNull
specifier|static
name|DocumentNodeStoreBranch
name|getCurrentBranch
parameter_list|()
block|{
return|return
name|BRANCHES
operator|.
name|get
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Sub classes of this class represent a state a branch can be in. See the individual      * sub classes for permissible state transitions.      */
specifier|private
specifier|abstract
class|class
name|BranchState
block|{
comment|/** Root state of the base revision of this branch */
specifier|protected
name|DocumentNodeState
name|base
decl_stmt|;
specifier|protected
name|BranchState
parameter_list|(
name|DocumentNodeState
name|base
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
block|}
comment|/**          * Persist this branch to an underlying branch in the {@code NodeStore}.          */
name|Persisted
name|persist
parameter_list|()
block|{
name|Persisted
name|p
init|=
operator|new
name|Persisted
argument_list|(
name|base
argument_list|)
decl_stmt|;
name|p
operator|.
name|persistTransientHead
argument_list|(
name|getHead
argument_list|()
argument_list|)
expr_stmt|;
name|branchState
operator|=
name|p
expr_stmt|;
return|return
name|p
return|;
block|}
name|DocumentNodeState
name|getBase
parameter_list|()
block|{
return|return
name|base
return|;
block|}
annotation|@
name|Nonnull
specifier|abstract
name|NodeState
name|getHead
parameter_list|()
function_decl|;
specifier|abstract
name|void
name|setRoot
parameter_list|(
name|NodeState
name|root
parameter_list|)
function_decl|;
specifier|abstract
name|void
name|rebase
parameter_list|()
function_decl|;
comment|/**          * Runs the commit hook on the changes tracked with this branch state          * merges the result.          *<p>          * In addition to the {@link CommitFailedException}, an implementation          * may also throw an unchecked exception when an error occurs while          * persisting the changes. This exception is implementation specific          * and it is the responsibility of the caller to convert it into a          * {@link CommitFailedException}.          *          * @param hook the commit hook to run.          * @param info the associated commit info.          * @param exclusive whether the merge lock must be acquired exclusively          *                  or shared while performing the merge.          * @return the result of the merge.          * @throws CommitFailedException if a commit hook rejected the changes          *          or the actual merge operation failed. An implementation must          *          use the appropriate type in {@code CommitFailedException} to          *          indicate the cause of the exception.          */
annotation|@
name|Nonnull
specifier|abstract
name|NodeState
name|merge
parameter_list|(
annotation|@
name|Nonnull
name|CommitHook
name|hook
parameter_list|,
annotation|@
name|Nonnull
name|CommitInfo
name|info
parameter_list|,
name|boolean
name|exclusive
parameter_list|)
throws|throws
name|CommitFailedException
function_decl|;
block|}
comment|/**      * Instances of this class represent a branch whose base and head are the same.      *<p>      * Transitions to:      *<ul>      *<li>{@link InMemory} on {@link #setRoot(NodeState)} if the new root differs      *         from the current base</li>.      *<li>{@link Merged} on {@link BranchState#merge(CommitHook, CommitInfo, boolean)}</li>      *</ul>      */
specifier|private
class|class
name|Unmodified
extends|extends
name|BranchState
block|{
name|Unmodified
parameter_list|(
name|DocumentNodeState
name|base
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Unmodified["
operator|+
name|base
operator|+
literal|']'
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
name|NodeState
name|getHead
parameter_list|()
block|{
return|return
name|base
return|;
block|}
annotation|@
name|Override
name|void
name|setRoot
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
if|if
condition|(
operator|!
name|base
operator|.
name|equals
argument_list|(
name|root
argument_list|)
condition|)
block|{
name|branchState
operator|=
operator|new
name|InMemory
argument_list|(
name|base
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|rebase
parameter_list|()
block|{
name|base
operator|=
name|store
operator|.
name|getRoot
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
name|NodeState
name|merge
parameter_list|(
annotation|@
name|Nonnull
name|CommitHook
name|hook
parameter_list|,
annotation|@
name|Nonnull
name|CommitInfo
name|info
parameter_list|,
name|boolean
name|exclusive
parameter_list|)
block|{
name|branchState
operator|=
operator|new
name|Merged
argument_list|(
name|base
argument_list|)
expr_stmt|;
return|return
name|base
return|;
block|}
block|}
comment|/**      * Instances of this class represent a branch whose base and head differ.      * All changes are kept in memory.      *<p>      * Transitions to:      *<ul>      *<li>{@link Unmodified} on {@link #setRoot(NodeState)} if the new root is the same      *         as the base of this branch or      *<li>{@link Persisted} otherwise.      *<li>{@link Merged} on {@link BranchState#merge(CommitHook, CommitInfo, boolean)}</li>      *</ul>      */
specifier|private
class|class
name|InMemory
extends|extends
name|BranchState
block|{
comment|/** Root state of the transient head. */
specifier|private
name|NodeState
name|head
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"InMemory["
operator|+
name|base
operator|+
literal|", "
operator|+
name|head
operator|+
literal|']'
return|;
block|}
name|InMemory
parameter_list|(
name|DocumentNodeState
name|base
parameter_list|,
name|NodeState
name|head
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|this
operator|.
name|head
operator|=
name|head
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
name|NodeState
name|getHead
parameter_list|()
block|{
return|return
name|head
return|;
block|}
annotation|@
name|Override
name|void
name|setRoot
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
if|if
condition|(
name|base
operator|.
name|equals
argument_list|(
name|root
argument_list|)
condition|)
block|{
name|branchState
operator|=
operator|new
name|Unmodified
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|head
operator|.
name|equals
argument_list|(
name|root
argument_list|)
condition|)
block|{
name|head
operator|=
name|root
expr_stmt|;
name|persist
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|rebase
parameter_list|()
block|{
name|DocumentNodeState
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|head
operator|.
name|compareAgainstBaseState
argument_list|(
name|base
argument_list|,
operator|new
name|ConflictAnnotatingRebaseDiff
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
name|head
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|base
operator|=
name|root
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
name|NodeState
name|merge
parameter_list|(
annotation|@
name|Nonnull
name|CommitHook
name|hook
parameter_list|,
annotation|@
name|Nonnull
name|CommitInfo
name|info
parameter_list|,
name|boolean
name|exclusive
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|checkNotNull
argument_list|(
name|hook
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|Lock
name|lock
init|=
name|acquireMergeLock
argument_list|(
name|exclusive
argument_list|)
decl_stmt|;
try|try
block|{
name|rebase
argument_list|()
expr_stmt|;
name|NodeState
name|toCommit
init|=
name|hook
operator|.
name|processCommit
argument_list|(
name|base
argument_list|,
name|head
argument_list|,
name|info
argument_list|)
decl_stmt|;
try|try
block|{
name|NodeState
name|newHead
init|=
name|DocumentNodeStoreBranch
operator|.
name|this
operator|.
name|persist
argument_list|(
name|toCommit
argument_list|,
name|base
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|branchState
operator|=
operator|new
name|Merged
argument_list|(
name|base
argument_list|)
expr_stmt|;
return|return
name|newHead
return|;
block|}
catch|catch
parameter_list|(
name|ConflictException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|asCommitFailedException
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|DocumentStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|MERGE
argument_list|,
literal|1
argument_list|,
literal|"Failed to merge changes to the underlying store"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|OAK
argument_list|,
literal|1
argument_list|,
literal|"Failed to merge changes to the underlying store"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Instances of this class represent a branch whose head is persisted to an      * underlying branch in the {@code NodeStore}.      *<p>      * Transitions to:      *<ul>      *<li>{@link ResetFailed} on failed reset in {@link BranchState#merge(CommitHook, CommitInfo, boolean)}</li>      *<li>{@link Merged} on successful {@link BranchState#merge(CommitHook, CommitInfo, boolean)}</li>      *</ul>      */
specifier|private
class|class
name|Persisted
extends|extends
name|BranchState
block|{
comment|/** Root state of the transient head, top of persisted branch. */
specifier|private
name|DocumentNodeState
name|head
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Persisted["
operator|+
name|base
operator|+
literal|", "
operator|+
name|head
operator|+
literal|']'
return|;
block|}
name|Persisted
parameter_list|(
name|DocumentNodeState
name|base
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|this
operator|.
name|head
operator|=
name|createBranch
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
comment|/**          * Create a new branch state from the given state.          *          * @param state the state from where to create a branch from.          * @return the branch state.          */
specifier|final
name|DocumentNodeState
name|createBranch
parameter_list|(
name|DocumentNodeState
name|state
parameter_list|)
block|{
return|return
name|store
operator|.
name|getRoot
argument_list|(
name|state
operator|.
name|getRevision
argument_list|()
operator|.
name|asBranchRevision
argument_list|(
name|store
operator|.
name|getClusterId
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
name|NodeState
name|getHead
parameter_list|()
block|{
return|return
name|head
return|;
block|}
annotation|@
name|Override
name|void
name|setRoot
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
if|if
condition|(
operator|!
name|head
operator|.
name|equals
argument_list|(
name|root
argument_list|)
condition|)
block|{
name|persistTransientHead
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|rebase
parameter_list|()
block|{
name|DocumentNodeState
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
decl_stmt|;
comment|// perform rebase in store
name|head
operator|=
name|store
operator|.
name|getRoot
argument_list|(
name|store
operator|.
name|rebase
argument_list|(
name|head
operator|.
name|getRevision
argument_list|()
argument_list|,
name|root
operator|.
name|getRevision
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|base
operator|=
name|root
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
name|NodeState
name|merge
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|CommitHook
name|hook
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|CommitInfo
name|info
parameter_list|,
name|boolean
name|exclusive
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|DocumentNodeState
name|previousHead
init|=
name|head
decl_stmt|;
name|Lock
name|lock
init|=
name|acquireMergeLock
argument_list|(
name|exclusive
argument_list|)
decl_stmt|;
try|try
block|{
name|rebase
argument_list|()
expr_stmt|;
name|previousHead
operator|=
name|head
expr_stmt|;
name|DocumentNodeState
name|newRoot
init|=
name|withCurrentBranch
argument_list|(
operator|new
name|Callable
argument_list|<
name|DocumentNodeState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DocumentNodeState
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|checkForConflicts
argument_list|()
expr_stmt|;
name|NodeState
name|toCommit
init|=
name|checkNotNull
argument_list|(
name|hook
argument_list|)
operator|.
name|processCommit
argument_list|(
name|base
argument_list|,
name|head
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|head
operator|=
name|DocumentNodeStoreBranch
operator|.
name|this
operator|.
name|persist
argument_list|(
name|toCommit
argument_list|,
name|head
argument_list|,
name|info
argument_list|)
expr_stmt|;
return|return
name|store
operator|.
name|getRoot
argument_list|(
name|store
operator|.
name|merge
argument_list|(
name|head
operator|.
name|getRevision
argument_list|()
argument_list|,
name|info
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|branchState
operator|=
operator|new
name|Merged
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|newRoot
return|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|ConflictException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|asCommitFailedException
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|MERGE
argument_list|,
literal|1
argument_list|,
literal|"Failed to merge changes to the underlying store"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|resetBranch
argument_list|(
name|head
argument_list|,
name|previousHead
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|persistTransientHead
parameter_list|(
name|NodeState
name|newHead
parameter_list|)
block|{
name|head
operator|=
name|DocumentNodeStoreBranch
operator|.
name|this
operator|.
name|persist
argument_list|(
name|newHead
argument_list|,
name|head
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|resetBranch
parameter_list|(
name|DocumentNodeState
name|branchHead
parameter_list|,
name|DocumentNodeState
name|ancestor
parameter_list|)
block|{
try|try
block|{
name|head
operator|=
name|store
operator|.
name|getRoot
argument_list|(
name|store
operator|.
name|reset
argument_list|(
name|branchHead
operator|.
name|getRevision
argument_list|()
argument_list|,
name|ancestor
operator|.
name|getRevision
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|CommitFailedException
name|ex
init|=
operator|new
name|CommitFailedException
argument_list|(
name|OAK
argument_list|,
literal|100
argument_list|,
literal|"Branch reset failed"
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|branchState
operator|=
operator|new
name|ResetFailed
argument_list|(
name|base
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Checks if any of the commits on this branch have a collision marker          * set.          *          * @throws CommitFailedException if a collision marker is set for one          *          of the commits on this branch.          */
specifier|private
name|void
name|checkForConflicts
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|Branch
name|b
init|=
name|store
operator|.
name|getBranches
argument_list|()
operator|.
name|getBranch
argument_list|(
name|head
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|NodeDocument
name|doc
init|=
name|Utils
operator|.
name|getRootDocument
argument_list|(
name|store
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Revision
argument_list|>
name|collisions
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|doc
operator|.
name|getLocalMap
argument_list|(
name|COLLISIONS
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Revision
argument_list|>
name|commits
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|b
operator|.
name|getCommits
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|Revision
argument_list|,
name|Revision
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Revision
name|apply
parameter_list|(
name|Revision
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|asTrunkRevision
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Revision
argument_list|>
name|conflicts
init|=
name|Sets
operator|.
name|intersection
argument_list|(
name|collisions
argument_list|,
name|commits
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|conflicts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|STATE
argument_list|,
literal|2
argument_list|,
literal|"Conflicting concurrent change on branch commits "
operator|+
name|conflicts
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Instances of this class represent a branch that has already been merged.      * All methods throw an {@code IllegalStateException}.      *<p>      * Transitions to: none.      */
specifier|private
class|class
name|Merged
extends|extends
name|BranchState
block|{
specifier|protected
name|Merged
parameter_list|(
name|DocumentNodeState
name|base
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Merged["
operator|+
name|base
operator|+
literal|']'
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
name|NodeState
name|getHead
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Branch has already been merged"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|void
name|setRoot
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Branch has already been merged"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|void
name|rebase
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Branch has already been merged"
argument_list|)
throw|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
name|NodeState
name|merge
parameter_list|(
annotation|@
name|Nonnull
name|CommitHook
name|hook
parameter_list|,
annotation|@
name|Nonnull
name|CommitInfo
name|info
parameter_list|,
name|boolean
name|exclusive
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Branch has already been merged"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Instances of this class represent a branch with persisted changes and      * a failed attempt to reset changes.      *<p>      * Transitions to: none.      */
specifier|private
class|class
name|ResetFailed
extends|extends
name|BranchState
block|{
comment|/**          * The exception of the failed reset.          */
specifier|private
specifier|final
name|CommitFailedException
name|ex
decl_stmt|;
specifier|protected
name|ResetFailed
parameter_list|(
name|DocumentNodeState
name|base
parameter_list|,
name|CommitFailedException
name|e
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|this
operator|.
name|ex
operator|=
name|e
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
name|NodeState
name|getHead
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Branch with failed reset"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|void
name|setRoot
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Branch with failed reset"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|void
name|rebase
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Branch with failed reset"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
comment|/**          * Always throws the {@code CommitFailedException} passed to the          * constructor of this branch state.          *          * @throws CommitFailedException the exception of the failed reset.          */
annotation|@
name|Nonnull
annotation|@
name|Override
name|NodeState
name|merge
parameter_list|(
annotation|@
name|Nonnull
name|CommitHook
name|hook
parameter_list|,
annotation|@
name|Nonnull
name|CommitInfo
name|info
parameter_list|,
name|boolean
name|exclusive
parameter_list|)
throws|throws
name|CommitFailedException
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
end_class

end_unit

