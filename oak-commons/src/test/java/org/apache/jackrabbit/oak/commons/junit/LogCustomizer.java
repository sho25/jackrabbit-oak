begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|junit
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|slf4j
operator|.
name|Logger
operator|.
name|ROOT_LOGGER_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|LoggerContext
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|spi
operator|.
name|ILoggingEvent
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|core
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|core
operator|.
name|AppenderBase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * The LogCustomizer allows to enable log level for a specific logger and/or  * filter the received logs this logger on a dedicated log level  *   *<pre>  * public class ConflictResolutionTest {  *   *     private final LogCustomizer customLogs = LogCustomizer  *             .forLogger(  *&quot;org.apache.jackrabbit.oak.plugins.commit.MergingNodeStateDiff&quot;)  *             .enable(Level.DEBUG).create();  *   *&#064;Before  *     public void setup() throws RepositoryException {  *         customLogs.starting();  *     }  *   *&#064;After  *     public void after() {  *         customLogs.finished();  *     }  *   *&#064;Test  *     public void test() {  *         List&lt;String&gt; myLogs = customLogs.getLogs();  *         assertTrue(myLogs.size() == 1);  *     }  *   * }  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|LogCustomizer
block|{
specifier|public
specifier|static
name|LogCustomizerBuilder
name|forRootLogger
parameter_list|()
block|{
return|return
name|forLogger
argument_list|(
name|ROOT_LOGGER_NAME
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|LogCustomizerBuilder
name|forLogger
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|LogCustomizerBuilder
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|LogCustomizerBuilder
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
name|Level
name|enableLevel
decl_stmt|;
specifier|private
name|Level
name|filterLevel
decl_stmt|;
specifier|private
name|LogCustomizerBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|LogCustomizerBuilder
name|enable
parameter_list|(
name|Level
name|level
parameter_list|)
block|{
name|this
operator|.
name|enableLevel
operator|=
name|level
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|LogCustomizerBuilder
name|filter
parameter_list|(
name|Level
name|level
parameter_list|)
block|{
name|this
operator|.
name|filterLevel
operator|=
name|level
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|LogCustomizer
name|create
parameter_list|()
block|{
return|return
operator|new
name|LogCustomizer
argument_list|(
name|name
argument_list|,
name|enableLevel
argument_list|,
name|filterLevel
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|final
name|Logger
name|logger
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|logs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Level
name|enableLevel
decl_stmt|;
specifier|private
specifier|final
name|Level
name|originalLevel
decl_stmt|;
specifier|private
specifier|final
name|Appender
argument_list|<
name|ILoggingEvent
argument_list|>
name|customLogger
decl_stmt|;
specifier|private
name|LogCustomizer
parameter_list|(
name|String
name|name
parameter_list|,
name|Level
name|enableLevel
parameter_list|,
specifier|final
name|Level
name|filterLevel
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|getLogger
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|enableLevel
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|enableLevel
operator|=
name|enableLevel
expr_stmt|;
name|this
operator|.
name|originalLevel
operator|=
name|logger
operator|.
name|getLevel
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|enableLevel
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|originalLevel
operator|=
literal|null
expr_stmt|;
block|}
name|customLogger
operator|=
operator|new
name|AppenderBase
argument_list|<
name|ILoggingEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|append
parameter_list|(
name|ILoggingEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|filterLevel
operator|==
literal|null
condition|)
block|{
name|logs
operator|.
name|add
argument_list|(
name|e
operator|.
name|getFormattedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getLevel
argument_list|()
operator|.
name|isGreaterOrEqual
argument_list|(
name|filterLevel
argument_list|)
condition|)
block|{
name|logs
operator|.
name|add
argument_list|(
name|e
operator|.
name|getFormattedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
block|}
specifier|private
specifier|static
name|Logger
name|getLogger
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
operator|(
name|LoggerContext
operator|)
name|LoggerFactory
operator|.
name|getILoggerFactory
argument_list|()
operator|)
operator|.
name|getLogger
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLogs
parameter_list|()
block|{
return|return
name|logs
return|;
block|}
specifier|public
name|void
name|starting
parameter_list|()
block|{
name|customLogger
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|enableLevel
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|setLevel
argument_list|(
name|enableLevel
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|addAppender
argument_list|(
name|customLogger
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|finished
parameter_list|()
block|{
if|if
condition|(
name|originalLevel
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|setLevel
argument_list|(
name|originalLevel
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|detachAppender
argument_list|(
name|customLogger
argument_list|)
expr_stmt|;
name|customLogger
operator|.
name|stop
argument_list|()
expr_stmt|;
name|logs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

