begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|TypeCodesTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testEncode
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"str:foo"
argument_list|,
name|TypeCodes
operator|.
name|encode
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bin:"
argument_list|,
name|TypeCodes
operator|.
name|encode
argument_list|(
name|PropertyType
operator|.
name|BINARY
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"und:foo"
argument_list|,
name|TypeCodes
operator|.
name|encode
argument_list|(
name|PropertyType
operator|.
name|UNDEFINED
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplit
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|TypeCodes
operator|.
name|split
argument_list|(
literal|"str:foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|TypeCodes
operator|.
name|split
argument_list|(
literal|"str:"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|TypeCodes
operator|.
name|split
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|TypeCodes
operator|.
name|split
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDecodeType
parameter_list|()
block|{
name|String
name|strFoo
init|=
literal|"str:foo"
decl_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|TypeCodes
operator|.
name|decodeType
argument_list|(
name|TypeCodes
operator|.
name|split
argument_list|(
name|strFoo
argument_list|)
argument_list|,
name|strFoo
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|str
init|=
literal|"str:"
decl_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|TypeCodes
operator|.
name|decodeType
argument_list|(
name|TypeCodes
operator|.
name|split
argument_list|(
name|str
argument_list|)
argument_list|,
name|str
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|any
init|=
literal|"any"
decl_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|UNDEFINED
argument_list|,
name|TypeCodes
operator|.
name|decodeType
argument_list|(
name|TypeCodes
operator|.
name|split
argument_list|(
name|any
argument_list|)
argument_list|,
name|any
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|empty
init|=
literal|""
decl_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|UNDEFINED
argument_list|,
name|TypeCodes
operator|.
name|decodeType
argument_list|(
name|TypeCodes
operator|.
name|split
argument_list|(
name|empty
argument_list|)
argument_list|,
name|empty
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDecodeName
parameter_list|()
block|{
name|String
name|strFoo
init|=
literal|"str:foo"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|TypeCodes
operator|.
name|decodeName
argument_list|(
name|TypeCodes
operator|.
name|split
argument_list|(
name|strFoo
argument_list|)
argument_list|,
name|strFoo
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|str
init|=
literal|"str:"
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|TypeCodes
operator|.
name|decodeName
argument_list|(
name|TypeCodes
operator|.
name|split
argument_list|(
name|str
argument_list|)
argument_list|,
name|str
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|any
init|=
literal|"any"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"any"
argument_list|,
name|TypeCodes
operator|.
name|decodeName
argument_list|(
name|TypeCodes
operator|.
name|split
argument_list|(
name|any
argument_list|)
argument_list|,
name|any
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|empty
init|=
literal|""
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|TypeCodes
operator|.
name|decodeName
argument_list|(
name|TypeCodes
operator|.
name|split
argument_list|(
name|empty
argument_list|)
argument_list|,
name|empty
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

