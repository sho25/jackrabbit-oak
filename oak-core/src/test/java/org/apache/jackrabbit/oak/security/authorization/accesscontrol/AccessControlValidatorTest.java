begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|ProviderCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|composite
operator|.
name|CompositeAuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProviderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|internal
operator|.
name|SecurityProviderHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|Restriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_READ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|AccessControlValidatorTest
extends|extends
name|AbstractSecurityTest
implements|implements
name|AccessControlConstants
block|{
specifier|private
specifier|final
name|String
name|testName
init|=
literal|"testRoot"
decl_stmt|;
specifier|private
specifier|final
name|String
name|testPath
init|=
literal|'/'
operator|+
name|testName
decl_stmt|;
specifier|private
specifier|final
name|String
name|aceName
init|=
literal|"validAce"
decl_stmt|;
specifier|private
name|Principal
name|testPrincipal
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|,
name|testName
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testPrincipal
operator|=
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|testRoot
init|=
name|root
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|testRoot
operator|.
name|exists
argument_list|()
condition|)
block|{
name|testRoot
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|NotNull
specifier|private
name|Tree
name|getTestTree
parameter_list|()
block|{
return|return
name|root
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|AccessControlValidatorProvider
name|createValidatorProvider
parameter_list|()
block|{
name|CompositeAuthorizationConfiguration
name|cac
init|=
operator|(
name|CompositeAuthorizationConfiguration
operator|)
name|getConfig
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|AccessControlValidatorProvider
argument_list|(
operator|(
name|AuthorizationConfigurationImpl
operator|)
name|cac
operator|.
name|getDefaultConfig
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|AccessControlValidatorProvider
name|createValidatorProvider
parameter_list|(
annotation|@
name|NotNull
name|RestrictionProvider
name|restrictionProvider
parameter_list|,
annotation|@
name|NotNull
name|PrivilegeConfiguration
name|privilegeConfiguration
parameter_list|)
block|{
name|ProviderCtx
name|ctx
init|=
name|mock
argument_list|(
name|ProviderCtx
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ctx
operator|.
name|getRootProvider
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getRootProvider
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ctx
operator|.
name|getTreeProvider
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getTreeProvider
argument_list|()
argument_list|)
expr_stmt|;
name|SecurityProvider
name|sp
init|=
name|mock
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|sp
operator|.
name|getConfiguration
argument_list|(
name|PrivilegeConfiguration
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|privilegeConfiguration
argument_list|)
expr_stmt|;
name|AuthorizationConfiguration
name|ac
init|=
name|mock
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ac
operator|.
name|getRestrictionProvider
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|restrictionProvider
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ac
operator|.
name|getContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getConfig
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sp
operator|.
name|getConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ac
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ctx
operator|.
name|getSecurityProvider
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sp
argument_list|)
expr_stmt|;
return|return
operator|new
name|AccessControlValidatorProvider
argument_list|(
name|ctx
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|Validator
name|createRootValidator
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|rootTree
parameter_list|)
block|{
name|NodeState
name|ns
init|=
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|rootTree
argument_list|)
decl_stmt|;
return|return
name|createValidatorProvider
argument_list|()
operator|.
name|getRootValidator
argument_list|(
name|ns
argument_list|,
name|ns
argument_list|,
operator|new
name|CommitInfo
argument_list|(
literal|"sid"
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|Tree
name|createPolicy
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|,
name|boolean
name|createRestrictionNode
parameter_list|)
throws|throws
name|AccessDeniedException
block|{
name|tree
operator|.
name|setProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|MIX_REP_ACCESS_CONTROLLABLE
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|Tree
name|acl
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|tree
argument_list|,
name|REP_POLICY
argument_list|,
name|NT_REP_ACL
argument_list|)
decl_stmt|;
name|acl
operator|.
name|setOrderableChildren
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|ace
init|=
name|createACE
argument_list|(
name|acl
argument_list|,
name|aceName
argument_list|,
name|NT_REP_GRANT_ACE
argument_list|,
name|testPrincipal
operator|.
name|getName
argument_list|()
argument_list|,
name|JCR_READ
argument_list|)
decl_stmt|;
if|if
condition|(
name|createRestrictionNode
condition|)
block|{
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|ace
argument_list|,
name|REP_RESTRICTIONS
argument_list|,
name|NT_REP_RESTRICTIONS
argument_list|)
expr_stmt|;
block|}
return|return
name|acl
return|;
block|}
annotation|@
name|NotNull
specifier|private
specifier|static
name|Tree
name|createACE
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|acl
parameter_list|,
annotation|@
name|NotNull
name|String
name|aceName
parameter_list|,
annotation|@
name|NotNull
name|String
name|ntName
parameter_list|,
annotation|@
name|NotNull
name|String
name|principalName
parameter_list|,
annotation|@
name|NotNull
name|String
modifier|...
name|privilegeNames
parameter_list|)
throws|throws
name|AccessDeniedException
block|{
name|Tree
name|ace
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|acl
argument_list|,
name|aceName
argument_list|,
name|ntName
argument_list|)
decl_stmt|;
name|ace
operator|.
name|setProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
name|principalName
argument_list|)
expr_stmt|;
name|ace
operator|.
name|setProperty
argument_list|(
name|REP_PRIVILEGES
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|privilegeNames
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
return|return
name|ace
return|;
block|}
specifier|private
specifier|static
name|CommitFailedException
name|assertCommitFailedException
parameter_list|(
annotation|@
name|NotNull
name|CommitFailedException
name|e
parameter_list|,
annotation|@
name|NotNull
name|String
name|type
parameter_list|,
name|int
name|expectedCode
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|isOfType
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCode
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|e
return|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testPolicyWithOutChildOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|testRoot
init|=
name|getTestTree
argument_list|()
decl_stmt|;
name|testRoot
operator|.
name|setProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|MIX_REP_ACCESS_CONTROLLABLE
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|testRoot
argument_list|,
name|REP_POLICY
argument_list|,
name|NT_REP_ACL
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|ACCESS_CONTROL
argument_list|,
literal|4
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testOnlyRootIsRepoAccessControllable
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|testRoot
init|=
name|getTestTree
argument_list|()
decl_stmt|;
name|testRoot
operator|.
name|setProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|MIX_REP_REPO_ACCESS_CONTROLLABLE
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|ACCESS_CONTROL
argument_list|,
literal|12
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddInvalidRepoPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|testRoot
init|=
name|getTestTree
argument_list|()
decl_stmt|;
name|testRoot
operator|.
name|setProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|MIX_REP_ACCESS_CONTROLLABLE
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|testRoot
argument_list|,
name|REP_REPO_POLICY
argument_list|,
name|NT_REP_ACL
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|ACCESS_CONTROL
argument_list|,
literal|6
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPolicyWithAcl
parameter_list|()
throws|throws
name|Exception
block|{
name|addPolicyWithAcContent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPolicyWithAce
parameter_list|()
throws|throws
name|Exception
block|{
name|addPolicyWithAcContent
argument_list|(
name|aceName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPolicyWithRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|addPolicyWithAcContent
argument_list|(
name|aceName
argument_list|,
name|REP_RESTRICTIONS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addPolicyWithAcContent
parameter_list|(
annotation|@
name|NotNull
name|String
modifier|...
name|childNames
parameter_list|)
throws|throws
name|Exception
block|{
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|Tree
name|policy
init|=
name|createPolicy
argument_list|(
name|rootTree
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Tree
name|acContent
init|=
name|policy
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|childNames
control|)
block|{
name|acContent
operator|=
name|acContent
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|acContent
argument_list|,
name|REP_POLICY
argument_list|,
name|NT_REP_ACL
argument_list|)
expr_stmt|;
name|TreeProvider
name|tp
init|=
name|getTreeProvider
argument_list|()
decl_stmt|;
name|Validator
name|v
init|=
name|createRootValidator
argument_list|(
name|rootTree
argument_list|)
decl_stmt|;
try|try
block|{
name|v
operator|=
name|v
operator|.
name|childNodeAdded
argument_list|(
name|policy
operator|.
name|getName
argument_list|()
argument_list|,
name|tp
operator|.
name|asNodeState
argument_list|(
name|policy
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|t
init|=
name|policy
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|childNames
control|)
block|{
name|t
operator|=
name|t
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|v
operator|=
name|v
operator|.
name|childNodeAdded
argument_list|(
name|name
argument_list|,
name|tp
operator|.
name|asNodeState
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|v
operator|.
name|childNodeAdded
argument_list|(
name|REP_POLICY
argument_list|,
name|tp
operator|.
name|asNodeState
argument_list|(
name|t
operator|.
name|getChild
argument_list|(
name|REP_POLICY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|ACCESS_CONTROL
argument_list|,
literal|5
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|tesAddIsolatedRepPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|addIsolatedPolicy
argument_list|(
name|REP_POLICY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|tesAddIsolatedRepRepoPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|addIsolatedPolicy
argument_list|(
name|REP_REPO_POLICY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|tesAddIsolatedUnknownPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|addIsolatedPolicy
argument_list|(
literal|"isolatedPolicy"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addIsolatedPolicy
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|getTestTree
argument_list|()
argument_list|,
name|name
argument_list|,
name|NT_REP_ACL
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|ACCESS_CONTROL
argument_list|,
literal|6
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddIsolatedGrantAce
parameter_list|()
throws|throws
name|Exception
block|{
name|createACE
argument_list|(
name|getTestTree
argument_list|()
argument_list|,
literal|"isolatedACE"
argument_list|,
name|NT_REP_GRANT_ACE
argument_list|,
name|testPrincipal
operator|.
name|getName
argument_list|()
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|ACCESS_CONTROL
argument_list|,
literal|7
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddIsolatedDenyAce
parameter_list|()
throws|throws
name|Exception
block|{
name|createACE
argument_list|(
name|getTestTree
argument_list|()
argument_list|,
literal|"isolatedACE"
argument_list|,
name|NT_REP_DENY_ACE
argument_list|,
name|testPrincipal
operator|.
name|getName
argument_list|()
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|ACCESS_CONTROL
argument_list|,
literal|7
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddIsolatedRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|getTestTree
argument_list|()
argument_list|,
literal|"isolatedRestriction"
argument_list|,
name|NT_REP_RESTRICTIONS
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|ACCESS_CONTROL
argument_list|,
literal|2
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInvalidPrivilege
parameter_list|()
throws|throws
name|Exception
block|{
name|createACE
argument_list|(
name|createPolicy
argument_list|(
name|getTestTree
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"aceWithInvalidPrivilege"
argument_list|,
name|NT_REP_GRANT_ACE
argument_list|,
name|testPrincipal
operator|.
name|getName
argument_list|()
argument_list|,
literal|"invalidPrivilegeName"
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|ACCESS_CONTROL
argument_list|,
literal|10
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAbstractPrivilege
parameter_list|()
throws|throws
name|Exception
block|{
name|PrivilegeManager
name|pMgr
init|=
name|getPrivilegeManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|pMgr
operator|.
name|registerPrivilege
argument_list|(
literal|"abstractPrivilege"
argument_list|,
literal|true
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|createACE
argument_list|(
name|createPolicy
argument_list|(
name|getTestTree
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"invalid"
argument_list|,
name|NT_REP_GRANT_ACE
argument_list|,
name|testPrincipal
operator|.
name|getName
argument_list|()
argument_list|,
literal|"abstractPrivilege"
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|ACCESS_CONTROL
argument_list|,
literal|11
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testValidatingPrivilegesCausesInternalError
parameter_list|()
throws|throws
name|Exception
block|{
name|PrivilegeManager
name|privMgr
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PrivilegeManager
operator|.
name|class
argument_list|)
operator|.
name|getPrivilege
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RepositoryException
argument_list|()
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|PrivilegeConfiguration
name|pc
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PrivilegeConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getPrivilegeManager
argument_list|(
name|any
argument_list|(
name|Root
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|NamePathMapper
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|privMgr
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|Tree
name|policy
init|=
name|createPolicy
argument_list|(
name|rootTree
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|TreeProvider
name|tp
init|=
name|getTreeProvider
argument_list|()
decl_stmt|;
name|AccessControlValidatorProvider
name|provider
init|=
name|createValidatorProvider
argument_list|(
name|getConfig
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getRestrictionProvider
argument_list|()
argument_list|,
name|pc
argument_list|)
decl_stmt|;
name|NodeState
name|ns
init|=
name|tp
operator|.
name|asNodeState
argument_list|(
name|rootTree
argument_list|)
decl_stmt|;
name|Validator
name|v
init|=
name|provider
operator|.
name|getRootValidator
argument_list|(
name|ns
argument_list|,
name|ns
argument_list|,
operator|new
name|CommitInfo
argument_list|(
literal|"sid"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|v
operator|.
name|childNodeAdded
argument_list|(
name|policy
operator|.
name|getName
argument_list|()
argument_list|,
name|tp
operator|.
name|asNodeState
argument_list|(
name|policy
argument_list|)
argument_list|)
operator|.
name|childNodeAdded
argument_list|(
name|aceName
argument_list|,
name|tp
operator|.
name|asNodeState
argument_list|(
name|policy
operator|.
name|getChild
argument_list|(
name|aceName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInvalidRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|restriction
init|=
name|createPolicy
argument_list|(
name|getTestTree
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|getChild
argument_list|(
name|aceName
argument_list|)
operator|.
name|getChild
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
decl_stmt|;
name|restriction
operator|.
name|setProperty
argument_list|(
literal|"invalid"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|ACCESS_CONTROL
argument_list|,
literal|1
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRestrictionWithInvalidType
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|restriction
init|=
name|createPolicy
argument_list|(
name|getTestTree
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|getChild
argument_list|(
name|aceName
argument_list|)
operator|.
name|getChild
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
decl_stmt|;
name|restriction
operator|.
name|setProperty
argument_list|(
name|REP_GLOB
argument_list|,
literal|"rep:glob"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|ACCESS_CONTROL
argument_list|,
literal|1
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testValidatingRestrictionsCausesInternalError
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionProvider
name|rp
init|=
name|spy
argument_list|(
name|getConfig
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getRestrictionProvider
argument_list|()
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|()
throw|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|rp
argument_list|)
operator|.
name|validateRestrictions
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|Tree
name|policy
init|=
name|createPolicy
argument_list|(
name|rootTree
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Tree
name|entry
init|=
name|policy
operator|.
name|getChild
argument_list|(
name|aceName
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setProperty
argument_list|(
name|REP_GLOB
argument_list|,
literal|"any"
argument_list|)
expr_stmt|;
name|TreeProvider
name|tp
init|=
name|getTreeProvider
argument_list|()
decl_stmt|;
name|AccessControlValidatorProvider
name|provider
init|=
name|createValidatorProvider
argument_list|(
name|rp
argument_list|,
name|getConfig
argument_list|(
name|PrivilegeConfiguration
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|NodeState
name|ns
init|=
name|tp
operator|.
name|asNodeState
argument_list|(
name|rootTree
argument_list|)
decl_stmt|;
name|Validator
name|v
init|=
name|provider
operator|.
name|getRootValidator
argument_list|(
name|ns
argument_list|,
name|ns
argument_list|,
operator|new
name|CommitInfo
argument_list|(
literal|"sid"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|v
operator|.
name|childNodeAdded
argument_list|(
name|policy
operator|.
name|getName
argument_list|()
argument_list|,
name|tp
operator|.
name|asNodeState
argument_list|(
name|policy
argument_list|)
argument_list|)
operator|.
name|childNodeAdded
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|tp
operator|.
name|asNodeState
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|OAK
argument_list|,
literal|13
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDuplicateAce
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|testPath
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
comment|// add duplicate ac-entry on OAK-API
name|Tree
name|policy
init|=
name|root
operator|.
name|getTree
argument_list|(
name|testPath
operator|+
literal|"/rep:policy"
argument_list|)
decl_stmt|;
name|Tree
name|ace
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|policy
argument_list|,
literal|"duplicateAce"
argument_list|,
name|NT_REP_GRANT_ACE
argument_list|)
decl_stmt|;
name|ace
operator|.
name|setProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
name|testPrincipal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ace
operator|.
name|setProperty
argument_list|(
name|AccessControlConstants
operator|.
name|REP_PRIVILEGES
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|ACCESS_CONTROL
argument_list|,
literal|13
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAceDifferentByAllowStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|policy
init|=
name|createPolicy
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Tree
name|entry
init|=
name|policy
operator|.
name|getChild
argument_list|(
name|aceName
argument_list|)
decl_stmt|;
name|Tree
name|entry2
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|policy
argument_list|,
literal|"second"
argument_list|,
name|NT_REP_DENY_ACE
argument_list|)
decl_stmt|;
name|entry2
operator|.
name|setProperty
argument_list|(
name|entry
operator|.
name|getProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|entry2
operator|.
name|setProperty
argument_list|(
name|entry
operator|.
name|getProperty
argument_list|(
name|REP_PRIVILEGES
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAceDifferentByRestrictionValue
parameter_list|()
throws|throws
name|Exception
block|{
name|ValueFactory
name|vf
init|=
name|getValueFactory
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|testPath
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|,
literal|true
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AccessControlConstants
operator|.
name|REP_NT_NAMES
argument_list|,
operator|new
name|Value
index|[]
block|{
name|vf
operator|.
name|createValue
argument_list|(
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// add ac-entry that only differs by the value of the restriction
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|,
literal|true
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AccessControlConstants
operator|.
name|REP_NT_NAMES
argument_list|,
operator|new
name|Value
index|[]
block|{
name|vf
operator|.
name|createValue
argument_list|(
name|NodeTypeConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
comment|// persisting changes must succeed; the 2 ac-entries must not be treated as equal.
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|hiddenNodeAdded
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|AccessControlValidatorProvider
name|provider
init|=
name|createValidatorProvider
argument_list|()
decl_stmt|;
name|MemoryNodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|NodeState
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|test
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|hidden
init|=
name|test
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
decl_stmt|;
name|Validator
name|validator
init|=
name|provider
operator|.
name|getRootValidator
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|Validator
name|childValidator
init|=
name|validator
operator|.
name|childNodeAdded
argument_list|(
literal|"test"
argument_list|,
name|test
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|childValidator
argument_list|)
expr_stmt|;
name|Validator
name|hiddenValidator
init|=
name|childValidator
operator|.
name|childNodeAdded
argument_list|(
literal|":hidden"
argument_list|,
name|hidden
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|hiddenValidator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|hiddenNodeChanged
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|AccessControlValidatorProvider
name|provider
init|=
name|createValidatorProvider
argument_list|()
decl_stmt|;
name|MemoryNodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
expr_stmt|;
name|NodeState
name|root
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeBuilder
name|test
init|=
name|root
operator|.
name|builder
argument_list|()
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|hidden
init|=
name|test
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
decl_stmt|;
name|hidden
operator|.
name|child
argument_list|(
literal|"added"
argument_list|)
expr_stmt|;
name|Validator
name|validator
init|=
name|provider
operator|.
name|getRootValidator
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|Validator
name|childValidator
init|=
name|validator
operator|.
name|childNodeChanged
argument_list|(
literal|"test"
argument_list|,
name|root
operator|.
name|getChildNode
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|test
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|childValidator
argument_list|)
expr_stmt|;
name|Validator
name|hiddenValidator
init|=
name|childValidator
operator|.
name|childNodeChanged
argument_list|(
literal|":hidden"
argument_list|,
name|root
operator|.
name|getChildNode
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|":hidden"
argument_list|)
argument_list|,
name|hidden
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|hiddenValidator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|hiddenNodeDeleted
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|AccessControlValidatorProvider
name|provider
init|=
name|createValidatorProvider
argument_list|()
decl_stmt|;
name|MemoryNodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
expr_stmt|;
name|NodeState
name|root
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|=
name|root
operator|.
name|builder
argument_list|()
expr_stmt|;
name|NodeBuilder
name|test
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|Validator
name|validator
init|=
name|provider
operator|.
name|getRootValidator
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|Validator
name|childValidator
init|=
name|validator
operator|.
name|childNodeChanged
argument_list|(
literal|"test"
argument_list|,
name|root
operator|.
name|getChildNode
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|test
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|childValidator
argument_list|)
expr_stmt|;
name|Validator
name|hiddenValidator
init|=
name|childValidator
operator|.
name|childNodeDeleted
argument_list|(
literal|":hidden"
argument_list|,
name|root
operator|.
name|getChildNode
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|":hidden"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|hiddenValidator
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case illustrating OAK-8081      */
annotation|@
name|Test
specifier|public
name|void
name|testRestrictionsUsedByOtherModule
parameter_list|()
throws|throws
name|Exception
block|{
name|AuthorizationConfiguration
name|sc
init|=
name|mock
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// new acNode is covered by Context.definesTree
name|when
argument_list|(
name|sc
operator|.
name|getContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Context
operator|.
name|Default
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|definesTree
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|)
block|{
return|return
literal|"differentAccessControl"
operator|.
name|equals
argument_list|(
name|tree
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sc
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|SecurityProviderHelper
operator|.
name|updateConfig
argument_list|(
name|getSecurityProvider
argument_list|()
argument_list|,
name|sc
argument_list|,
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|Tree
name|acNode
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|,
literal|"differentAccessControl"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|RestrictionProvider
name|rp
init|=
operator|new
name|RestrictionProviderImpl
argument_list|()
decl_stmt|;
name|Restriction
name|r
init|=
name|rp
operator|.
name|createRestriction
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|REP_ITEM_NAMES
argument_list|,
operator|new
name|Value
index|[]
block|{
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
literal|"someName"
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|rp
operator|.
name|writeRestrictions
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|acNode
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test case illustrating OAK-8081, where a given 'aceTree' is not covered by the authorization-context and thus      * the AccessControlValidator will still fail.      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRestrictionsUsedByOtherModule2
parameter_list|()
throws|throws
name|Exception
block|{
name|AuthorizationConfiguration
name|sc
init|=
name|mock
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// new acNode is not covered by Context.definesTree
name|when
argument_list|(
name|sc
operator|.
name|getContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Context
operator|.
name|Default
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sc
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|SecurityProviderHelper
operator|.
name|updateConfig
argument_list|(
name|getSecurityProvider
argument_list|()
argument_list|,
name|sc
argument_list|,
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|Tree
name|acNode
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|,
literal|"notCoveredByContext"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|RestrictionProvider
name|rp
init|=
operator|new
name|RestrictionProviderImpl
argument_list|()
decl_stmt|;
name|Restriction
name|r
init|=
name|rp
operator|.
name|createRestriction
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|REP_ITEM_NAMES
argument_list|,
operator|new
name|Value
index|[]
block|{
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
literal|"someName"
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|rp
operator|.
name|writeRestrictions
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|acNode
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|ACCESS_CONTROL
argument_list|,
literal|2
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPolicyTreeWithInvalidName
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|rootTree
operator|.
name|setProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|MIX_REP_ACCESS_CONTROLLABLE
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|rootTree
argument_list|,
literal|"invalidName"
argument_list|,
name|NT_REP_ACL
argument_list|)
expr_stmt|;
name|Validator
name|v
init|=
name|createRootValidator
argument_list|(
name|rootTree
argument_list|)
decl_stmt|;
try|try
block|{
name|v
operator|.
name|childNodeAdded
argument_list|(
literal|"invalidName"
argument_list|,
name|mock
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|ACCESS_CONTROL
argument_list|,
literal|3
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddEntyWithEmptyPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|Tree
name|policy
init|=
name|createPolicy
argument_list|(
name|rootTree
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Tree
name|entry
init|=
name|policy
operator|.
name|getChild
argument_list|(
name|aceName
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setProperty
argument_list|(
name|REP_PRIVILEGES
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|Validator
name|v
init|=
name|createRootValidator
argument_list|(
name|rootTree
argument_list|)
decl_stmt|;
try|try
block|{
name|v
operator|.
name|childNodeAdded
argument_list|(
name|policy
operator|.
name|getName
argument_list|()
argument_list|,
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|policy
argument_list|)
argument_list|)
operator|.
name|childNodeAdded
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|ACCESS_CONTROL
argument_list|,
literal|9
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddEntyWithNullrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|Tree
name|policy
init|=
name|createPolicy
argument_list|(
name|rootTree
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Tree
name|entry
init|=
name|policy
operator|.
name|getChild
argument_list|(
name|aceName
argument_list|)
decl_stmt|;
name|entry
operator|.
name|removeProperty
argument_list|(
name|REP_PRIVILEGES
argument_list|)
expr_stmt|;
name|Validator
name|v
init|=
name|createRootValidator
argument_list|(
name|rootTree
argument_list|)
decl_stmt|;
try|try
block|{
name|v
operator|.
name|childNodeAdded
argument_list|(
name|policy
operator|.
name|getName
argument_list|()
argument_list|,
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|policy
argument_list|)
argument_list|)
operator|.
name|childNodeAdded
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|ACCESS_CONTROL
argument_list|,
literal|9
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddEntyWithEmptyPrincipalName
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|Tree
name|policy
init|=
name|createPolicy
argument_list|(
name|rootTree
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Tree
name|entry
init|=
name|policy
operator|.
name|getChild
argument_list|(
name|aceName
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Validator
name|v
init|=
name|createRootValidator
argument_list|(
name|rootTree
argument_list|)
decl_stmt|;
try|try
block|{
name|v
operator|.
name|childNodeAdded
argument_list|(
name|policy
operator|.
name|getName
argument_list|()
argument_list|,
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|policy
argument_list|)
argument_list|)
operator|.
name|childNodeAdded
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|ACCESS_CONTROL
argument_list|,
literal|8
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddEntyWithNullPrincipalName
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|Tree
name|policy
init|=
name|createPolicy
argument_list|(
name|rootTree
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Tree
name|entry
init|=
name|policy
operator|.
name|getChild
argument_list|(
name|aceName
argument_list|)
decl_stmt|;
name|entry
operator|.
name|removeProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
expr_stmt|;
name|Validator
name|v
init|=
name|createRootValidator
argument_list|(
name|rootTree
argument_list|)
decl_stmt|;
try|try
block|{
name|v
operator|.
name|childNodeAdded
argument_list|(
name|policy
operator|.
name|getName
argument_list|()
argument_list|,
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|policy
argument_list|)
argument_list|)
operator|.
name|childNodeAdded
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|ACCESS_CONTROL
argument_list|,
literal|8
argument_list|)
throw|;
block|}
block|}
comment|//---< additional tests verifying the that type-editor spots invalid sequences of access controlled nodes>---------
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddRepoPolicyWithAcl
parameter_list|()
throws|throws
name|Exception
block|{
name|addRepoPolicyWithAcContent
argument_list|(
name|createPolicy
argument_list|(
name|getTestTree
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddRepoPolicyWithAce
parameter_list|()
throws|throws
name|Exception
block|{
name|addRepoPolicyWithAcContent
argument_list|(
name|createPolicy
argument_list|(
name|getTestTree
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|addChild
argument_list|(
name|aceName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddRepoPolicyWithRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|ace
init|=
name|createPolicy
argument_list|(
name|getTestTree
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|getChild
argument_list|(
name|aceName
argument_list|)
decl_stmt|;
name|addRepoPolicyWithAcContent
argument_list|(
name|ace
operator|.
name|getChild
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addRepoPolicyWithAcContent
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|acContent
parameter_list|)
throws|throws
name|Exception
block|{
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|acContent
argument_list|,
name|REP_REPO_POLICY
argument_list|,
name|NT_REP_ACL
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Adding an ACL below access control content should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|CONSTRAINT
argument_list|,
literal|25
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddAceWithAce
parameter_list|()
throws|throws
name|Exception
block|{
name|addAceWithAcContent
argument_list|(
name|createPolicy
argument_list|(
name|getTestTree
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|getChild
argument_list|(
name|aceName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddAceWithRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|ace
init|=
name|createPolicy
argument_list|(
name|getTestTree
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|getChild
argument_list|(
name|aceName
argument_list|)
decl_stmt|;
name|addAceWithAcContent
argument_list|(
name|ace
operator|.
name|getChild
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addAceWithAcContent
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|acContent
parameter_list|)
throws|throws
name|Exception
block|{
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|acContent
argument_list|,
literal|"invalidACE"
argument_list|,
name|NT_REP_DENY_ACE
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|CONSTRAINT
argument_list|,
literal|25
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddRestrictionWithAcl
parameter_list|()
throws|throws
name|Exception
block|{
name|addRestrictionWithAcContent
argument_list|(
name|createPolicy
argument_list|(
name|getTestTree
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddRestrictionWithRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|ace
init|=
name|createPolicy
argument_list|(
name|getTestTree
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|getChild
argument_list|(
name|aceName
argument_list|)
decl_stmt|;
name|addRestrictionWithAcContent
argument_list|(
name|ace
operator|.
name|getChild
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addRestrictionWithAcContent
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|acContent
parameter_list|)
throws|throws
name|Exception
block|{
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|acContent
argument_list|,
name|REP_RESTRICTIONS
argument_list|,
name|NT_REP_RESTRICTIONS
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|CONSTRAINT
argument_list|,
literal|25
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInvalidRestrictionWithACE
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|ace
init|=
name|createPolicy
argument_list|(
name|getTestTree
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|getChild
argument_list|(
name|aceName
argument_list|)
decl_stmt|;
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|ace
argument_list|,
literal|"invalidRestriction"
argument_list|,
name|NT_REP_RESTRICTIONS
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|assertCommitFailedException
argument_list|(
name|e
argument_list|,
name|CommitFailedException
operator|.
name|CONSTRAINT
argument_list|,
literal|25
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

