begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
operator|.
name|toBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
operator|.
name|toInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
operator|.
name|toLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiUtil
operator|.
name|lookupConfigurationThenFramework
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNotFoundExceptionListener
operator|.
name|IGNORE_SNFE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|FORCE_TIMEOUT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|MEMORY_THRESHOLD_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|PAUSE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|RETAINED_GENERATIONS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|RETRY_COUNT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|SIZE_DELTA_ESTIMATION_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|DISABLE_ESTIMATION_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|osgi
operator|.
name|SplitBlobStoreService
operator|.
name|ONLY_STANDALONE_TARGET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|registerMBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|SimpleValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CacheStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CheckpointMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|FileStoreBackupRestoreMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|backup
operator|.
name|impl
operator|.
name|FileStoreBackupRestoreImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|ObserverTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobGC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobGCMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobGarbageCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobTrackingStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|MarkSweepGarbageCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|SharedDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|BlobIdTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreUtils
operator|.
name|SharedStoreRecordType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|identifier
operator|.
name|ClusterRepositoryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentRevisionGC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentRevisionGCMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreGCMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|InvalidFileStoreVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|gc
operator|.
name|GCMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|gc
operator|.
name|GCMonitorTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ProxyNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|RevisionGC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|RevisionGCMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|CompositeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|GenericDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * An OSGi wrapper for the segment node store.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"Apache Jackrabbit Oak Segment NodeStore Service"
argument_list|,
name|description
operator|=
literal|"NodeStore implementation based on Segment model. For configuration option refer "
operator|+
literal|"to http://jackrabbit.apache.org/oak/docs/osgi_config.html#SegmentNodeStore. Note that for system "
operator|+
literal|"stability purpose it is advisable to not change these settings at runtime. Instead the config change "
operator|+
literal|"should be done via file system based config file and this view should ONLY be used to determine which "
operator|+
literal|"options are supported"
argument_list|)
specifier|public
class|class
name|SegmentNodeStoreService
extends|extends
name|ProxyNodeStore
implements|implements
name|Observable
implements|,
name|SegmentStoreProvider
block|{
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Directory"
argument_list|,
name|description
operator|=
literal|"Directory location used to store the segment tar files. If not specified then looks "
operator|+
literal|"for framework property 'repository.home' otherwise use a subdirectory with name 'tarmk'"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|DIRECTORY
init|=
literal|"repository.home"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Mode"
argument_list|,
name|description
operator|=
literal|"TarMK mode (64 for memory mapping, 32 for normal file access)"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|MODE
init|=
literal|"tarmk.mode"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
literal|256
argument_list|,
name|label
operator|=
literal|"Maximum Tar File Size (MB)"
argument_list|,
name|description
operator|=
literal|"TarMK maximum file size (MB)"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|SIZE
init|=
literal|"tarmk.size"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
literal|256
argument_list|,
name|label
operator|=
literal|"Segment cache size (MB)"
argument_list|,
name|description
operator|=
literal|"Cache size for storing most recently used segments"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|SEGMENT_CACHE_SIZE
init|=
literal|"segmentCache.size"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
literal|256
argument_list|,
name|label
operator|=
literal|"String cache size (MB)"
argument_list|,
name|description
operator|=
literal|"Cache size for storing most recently used strings"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|STRING_CACHE_SIZE
init|=
literal|"stringCache.size"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
literal|64
argument_list|,
name|label
operator|=
literal|"Template cache size (MB)"
argument_list|,
name|description
operator|=
literal|"Cache size for storing most recently used templates"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|TEMPLATE_CACHE_SIZE
init|=
literal|"templateCache.size"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
literal|15000
argument_list|,
name|label
operator|=
literal|"String deduplication cache size (#items)"
argument_list|,
name|description
operator|=
literal|"Maximum number of strings to keep in the deduplication cache"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|STRING_DEDUPLICATION_CACHE_SIZE
init|=
literal|"stringDeduplicationCache.size"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
literal|3000
argument_list|,
name|label
operator|=
literal|"Template deduplication cache size (#items)"
argument_list|,
name|description
operator|=
literal|"Maximum number of templates to keep in the deduplication cache"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|TEMPLATE_DEDUPLICATION_CACHE_SIZE
init|=
literal|"templateDeduplicationCache.size"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
literal|8388608
argument_list|,
name|label
operator|=
literal|"Node deduplication cache size (#items)"
argument_list|,
name|description
operator|=
literal|"Maximum number of node to keep in the deduplication cache. If the supplied"
operator|+
literal|" value is not a power of 2, it will be rounded up to the next power of 2."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|NODE_DEDUPLICATION_CACHE_SIZE
init|=
literal|"nodeDeduplicationCache.size"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
name|PAUSE_DEFAULT
argument_list|,
name|label
operator|=
literal|"Pause Compaction"
argument_list|,
name|description
operator|=
literal|"When enabled compaction would not be performed"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PAUSE_COMPACTION
init|=
literal|"pauseCompaction"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|RETRY_COUNT_DEFAULT
argument_list|,
name|label
operator|=
literal|"Compaction Retries"
argument_list|,
name|description
operator|=
literal|"Number of tries to compact concurrent commits on top of already "
operator|+
literal|"compacted commits"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|COMPACTION_RETRY_COUNT
init|=
literal|"compaction.retryCount"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|FORCE_TIMEOUT_DEFAULT
argument_list|,
name|label
operator|=
literal|"Force Compaction Timeout"
argument_list|,
name|description
operator|=
literal|"Number of seconds to attempt to force compact concurrent commits on top "
operator|+
literal|"of already compacted commits after the maximum number of retries has been "
operator|+
literal|"reached. Forced compaction tries to acquire an exclusive write lock on the "
operator|+
literal|"node store."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|COMPACTION_FORCE_TIMEOUT
init|=
literal|"compaction.force.timeout"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|longValue
operator|=
name|SIZE_DELTA_ESTIMATION_DEFAULT
argument_list|,
name|label
operator|=
literal|"Compaction Repository Size Delta"
argument_list|,
name|description
operator|=
literal|"Amount of increase in repository size that will trigger compaction (bytes)"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|COMPACTION_SIZE_DELTA_ESTIMATION
init|=
literal|"compaction.sizeDeltaEstimation"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
name|DISABLE_ESTIMATION_DEFAULT
argument_list|,
name|label
operator|=
literal|"Disable Compaction Estimation Phase"
argument_list|,
name|description
operator|=
literal|"Disables compaction estimation phase, thus allowing compaction to run every time."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|COMPACTION_DISABLE_ESTIMATION
init|=
literal|"compaction.disableEstimation"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|RETAINED_GENERATIONS_DEFAULT
argument_list|,
name|label
operator|=
literal|"Compaction retained generations"
argument_list|,
name|description
operator|=
literal|"Number of segment generations to retain."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|RETAINED_GENERATIONS
init|=
literal|"compaction.retainedGenerations"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|MEMORY_THRESHOLD_DEFAULT
argument_list|,
name|label
operator|=
literal|"Compaction Memory Threshold"
argument_list|,
name|description
operator|=
literal|"Set the available memory threshold beyond which revision gc will be canceled. "
operator|+
literal|"Value represents a percentage so an input between 0 and 100 is expected. "
operator|+
literal|"Setting this to 0 will disable the check."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|MEMORY_THRESHOLD
init|=
literal|"compaction.memoryThreshold"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
literal|false
argument_list|,
name|label
operator|=
literal|"Standby Mode"
argument_list|,
name|description
operator|=
literal|"Flag indicating that this component will not register as a NodeStore but just as a NodeStoreProvider"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|STANDBY
init|=
literal|"standby"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
literal|false
argument_list|,
name|label
operator|=
literal|"Custom BlobStore"
argument_list|,
name|description
operator|=
literal|"Boolean value indicating that a custom BlobStore is to be used. "
operator|+
literal|"By default large binary content would be stored within segment tar files"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_BLOB_STORE
init|=
literal|"customBlobStore"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Backup Directory"
argument_list|,
name|description
operator|=
literal|"Directory location for storing repository backups. If not set, defaults to"
operator|+
literal|" 'segmentstore-backup' subdirectory under 'repository.home'."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|BACKUP_DIRECTORY
init|=
literal|"repository.backup.dir"
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|FileStore
name|store
decl_stmt|;
specifier|private
specifier|volatile
name|SegmentNodeStore
name|segmentNodeStore
decl_stmt|;
specifier|private
name|ObserverTracker
name|observerTracker
decl_stmt|;
specifier|private
name|GCMonitorTracker
name|gcMonitor
decl_stmt|;
specifier|private
name|ComponentContext
name|context
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|target
operator|=
name|ONLY_STANDALONE_TARGET
argument_list|)
specifier|private
specifier|volatile
name|BlobStore
name|blobStore
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|StatisticsProvider
name|statisticsProvider
init|=
name|StatisticsProvider
operator|.
name|NOOP
decl_stmt|;
specifier|private
name|ServiceRegistration
name|storeRegistration
decl_stmt|;
specifier|private
name|ServiceRegistration
name|providerRegistration
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Registration
argument_list|>
name|registrations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|WhiteboardExecutor
name|executor
decl_stmt|;
specifier|private
name|boolean
name|customBlobStore
decl_stmt|;
comment|/**      * Blob modified before this time duration would be considered for Blob GC      */
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_BLOB_GC_MAX_AGE
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|longValue
operator|=
name|DEFAULT_BLOB_GC_MAX_AGE
argument_list|,
name|label
operator|=
literal|"Blob GC Max Age (in secs)"
argument_list|,
name|description
operator|=
literal|"Blob Garbage Collector (GC) logic will only consider those blobs for GC which "
operator|+
literal|"are not accessed recently (currentTime - lastModifiedTime> blobGcMaxAgeInSecs). For "
operator|+
literal|"example as per default only those blobs which have been created 24 hrs ago will be "
operator|+
literal|"considered for GC"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PROP_BLOB_GC_MAX_AGE
init|=
literal|"blobGcMaxAgeInSecs"
decl_stmt|;
comment|/**      * Default interval for taking snapshots of locally tracked blob ids.      */
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_BLOB_SNAPSHOT_INTERVAL
init|=
literal|12
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|longValue
operator|=
name|DEFAULT_BLOB_SNAPSHOT_INTERVAL
argument_list|,
name|label
operator|=
literal|"Blob tracking snapshot interval (in secs)"
argument_list|,
name|description
operator|=
literal|"This is the default interval in which the snapshots of locally tracked blob ids will"
operator|+
literal|"be taken and synchronized with the blob store. This should be configured to be less than the "
operator|+
literal|"frequency of blob GC so that deletions during blob GC can be accounted for "
operator|+
literal|"in the next GC execution."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PROP_BLOB_SNAPSHOT_INTERVAL
init|=
literal|"blobTrackSnapshotIntervalInSecs"
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|SegmentNodeStore
name|getNodeStore
parameter_list|()
block|{
name|checkState
argument_list|(
name|segmentNodeStore
operator|!=
literal|null
argument_list|,
literal|"service must be activated when used"
argument_list|)
expr_stmt|;
return|return
name|segmentNodeStore
return|;
block|}
annotation|@
name|Activate
specifier|public
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|customBlobStore
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|property
argument_list|(
name|CUSTOM_BLOB_STORE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|blobStore
operator|==
literal|null
operator|&&
name|customBlobStore
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"BlobStore use enabled. SegmentNodeStore would be initialized when BlobStore would be available"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|registerNodeStore
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|bindBlobStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
name|registerNodeStore
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|unbindBlobStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|this
operator|.
name|blobStore
operator|=
literal|null
expr_stmt|;
name|unregisterNodeStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|public
name|void
name|deactivate
parameter_list|()
block|{
name|unregisterNodeStore
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|observerTracker
operator|!=
literal|null
condition|)
block|{
name|observerTracker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|gcMonitor
operator|!=
literal|null
condition|)
block|{
name|gcMonitor
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|segmentNodeStore
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
name|store
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|synchronized
name|void
name|registerNodeStore
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|registerSegmentStore
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|toBoolean
argument_list|(
name|property
argument_list|(
name|STANDBY
argument_list|)
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
name|SegmentNodeStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"oak.nodestore.description"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"nodeStoreType=segment"
block|}
argument_list|)
expr_stmt|;
name|storeRegistration
operator|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|registerService
argument_list|(
name|NodeStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|this
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|registerSegmentStore
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Component still not activated. Ignoring the initialization call"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|OsgiWhiteboard
name|whiteboard
init|=
operator|new
name|OsgiWhiteboard
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|)
decl_stmt|;
comment|// Listen for GCMonitor services
name|gcMonitor
operator|=
operator|new
name|GCMonitorTracker
argument_list|()
expr_stmt|;
name|gcMonitor
operator|.
name|start
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
comment|// Create the gc options
name|SegmentGCOptions
name|gcOptions
init|=
name|newGCOptions
argument_list|()
decl_stmt|;
comment|// Build the FileStore
name|FileStoreBuilder
name|builder
init|=
name|fileStoreBuilder
argument_list|(
name|getDirectory
argument_list|()
argument_list|)
operator|.
name|withSegmentCacheSize
argument_list|(
name|getSegmentCacheSize
argument_list|()
argument_list|)
operator|.
name|withStringCacheSize
argument_list|(
name|getStringCacheSize
argument_list|()
argument_list|)
operator|.
name|withTemplateCacheSize
argument_list|(
name|getTemplateCacheSize
argument_list|()
argument_list|)
operator|.
name|withStringDeduplicationCacheSize
argument_list|(
name|getStringDeduplicationCacheSize
argument_list|()
argument_list|)
operator|.
name|withTemplateDeduplicationCacheSize
argument_list|(
name|getTemplateDeduplicationCacheSize
argument_list|()
argument_list|)
operator|.
name|withNodeDeduplicationCacheSize
argument_list|(
name|getNodeDeduplicationCacheSize
argument_list|()
argument_list|)
operator|.
name|withMaxFileSize
argument_list|(
name|getMaxFileSize
argument_list|()
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
name|getMode
argument_list|()
operator|.
name|equals
argument_list|(
literal|"64"
argument_list|)
argument_list|)
operator|.
name|withGCMonitor
argument_list|(
name|gcMonitor
argument_list|)
operator|.
name|withStatisticsProvider
argument_list|(
name|statisticsProvider
argument_list|)
operator|.
name|withGCOptions
argument_list|(
name|gcOptions
argument_list|)
decl_stmt|;
if|if
condition|(
name|customBlobStore
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Initializing SegmentNodeStore with BlobStore [{}]"
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withBlobStore
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toBoolean
argument_list|(
name|property
argument_list|(
name|STANDBY
argument_list|)
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|builder
operator|.
name|withSnfeListener
argument_list|(
name|IGNORE_SNFE
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|store
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidFileStoreVersionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"The segment store data is not compatible with the current version. Please use oak-segment or a different version of oak-segment-tar."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Expose stats about the segment cache
name|CacheStatsMBean
name|segmentCacheStats
init|=
name|store
operator|.
name|getSegmentCacheStats
argument_list|()
decl_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|segmentCacheStats
argument_list|,
name|CacheStats
operator|.
name|TYPE
argument_list|,
name|segmentCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Expose stats about the string and template caches
name|CacheStatsMBean
name|stringCacheStats
init|=
name|store
operator|.
name|getStringCacheStats
argument_list|()
decl_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|stringCacheStats
argument_list|,
name|CacheStats
operator|.
name|TYPE
argument_list|,
name|stringCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|CacheStatsMBean
name|templateCacheStats
init|=
name|store
operator|.
name|getTemplateCacheStats
argument_list|()
decl_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|templateCacheStats
argument_list|,
name|CacheStats
operator|.
name|TYPE
argument_list|,
name|templateCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|CacheStatsMBean
name|stringDeduplicationCacheStats
init|=
name|store
operator|.
name|getStringDeduplicationCacheStats
argument_list|()
decl_stmt|;
if|if
condition|(
name|stringDeduplicationCacheStats
operator|!=
literal|null
condition|)
block|{
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|stringDeduplicationCacheStats
argument_list|,
name|CacheStats
operator|.
name|TYPE
argument_list|,
name|stringDeduplicationCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CacheStatsMBean
name|templateDeduplicationCacheStats
init|=
name|store
operator|.
name|getTemplateDeduplicationCacheStats
argument_list|()
decl_stmt|;
if|if
condition|(
name|templateDeduplicationCacheStats
operator|!=
literal|null
condition|)
block|{
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|templateDeduplicationCacheStats
argument_list|,
name|CacheStats
operator|.
name|TYPE
argument_list|,
name|templateDeduplicationCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CacheStatsMBean
name|nodeDeduplicationCacheStats
init|=
name|store
operator|.
name|getNodeDeduplicationCacheStats
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeDeduplicationCacheStats
operator|!=
literal|null
condition|)
block|{
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|nodeDeduplicationCacheStats
argument_list|,
name|CacheStats
operator|.
name|TYPE
argument_list|,
name|nodeDeduplicationCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Listen for Executor services on the whiteboard
name|executor
operator|=
operator|new
name|WhiteboardExecutor
argument_list|()
expr_stmt|;
name|executor
operator|.
name|start
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
comment|// Expose an MBean to managing and monitoring garbage collection
specifier|final
name|FileStoreGCMonitor
name|fsgcm
init|=
operator|new
name|FileStoreGCMonitor
argument_list|(
name|Clock
operator|.
name|SIMPLE
argument_list|)
decl_stmt|;
name|registrations
operator|.
name|add
argument_list|(
operator|new
name|CompositeRegistration
argument_list|(
name|whiteboard
operator|.
name|register
argument_list|(
name|GCMonitor
operator|.
name|class
argument_list|,
name|fsgcm
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
argument_list|,
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|SegmentRevisionGC
operator|.
name|class
argument_list|,
operator|new
name|SegmentRevisionGCMBean
argument_list|(
name|store
argument_list|,
name|gcOptions
argument_list|,
name|fsgcm
argument_list|)
argument_list|,
name|SegmentRevisionGC
operator|.
name|TYPE
argument_list|,
literal|"Segment node store revision garbage collection"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Runnable
name|cancelGC
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|store
operator|.
name|cancelGC
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Supplier
argument_list|<
name|String
argument_list|>
name|statusMessage
init|=
operator|new
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|()
block|{
return|return
name|fsgcm
operator|.
name|getStatus
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|RevisionGCMBean
operator|.
name|class
argument_list|,
operator|new
name|RevisionGC
argument_list|(
name|store
operator|.
name|getGCRunner
argument_list|()
argument_list|,
name|cancelGC
argument_list|,
name|statusMessage
argument_list|,
name|executor
argument_list|)
argument_list|,
name|RevisionGCMBean
operator|.
name|TYPE
argument_list|,
literal|"Revision garbage collection"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Expose statistics about the FileStore
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|FileStoreStatsMBean
operator|.
name|class
argument_list|,
name|store
operator|.
name|getStats
argument_list|()
argument_list|,
name|FileStoreStatsMBean
operator|.
name|TYPE
argument_list|,
literal|"FileStore statistics"
argument_list|)
argument_list|)
expr_stmt|;
comment|// register segment node store
name|Dictionary
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|properties
init|=
name|context
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|name
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|properties
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|blobGcMaxAgeInSecs
init|=
name|toLong
argument_list|(
name|property
argument_list|(
name|PROP_BLOB_GC_MAX_AGE
argument_list|)
argument_list|,
name|DEFAULT_BLOB_GC_MAX_AGE
argument_list|)
decl_stmt|;
name|SegmentNodeStore
operator|.
name|SegmentNodeStoreBuilder
name|segmentNodeStoreBuilder
init|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|store
argument_list|)
decl_stmt|;
if|if
condition|(
name|toBoolean
argument_list|(
name|property
argument_list|(
name|STANDBY
argument_list|)
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|segmentNodeStoreBuilder
operator|.
name|dispatchChanges
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|segmentNodeStore
operator|=
name|segmentNodeStoreBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
name|observerTracker
operator|=
operator|new
name|ObserverTracker
argument_list|(
name|segmentNodeStore
argument_list|)
expr_stmt|;
name|observerTracker
operator|.
name|start
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|)
expr_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|CheckpointMBean
operator|.
name|class
argument_list|,
operator|new
name|SegmentCheckpointMBean
argument_list|(
name|segmentNodeStore
argument_list|)
argument_list|,
name|CheckpointMBean
operator|.
name|TYPE
argument_list|,
literal|"Segment node store checkpoint management"
argument_list|)
argument_list|)
expr_stmt|;
comment|// ensure a clusterId is initialized
comment|// and expose it as 'oak.clusterid' repository descriptor
name|GenericDescriptors
name|clusterIdDesc
init|=
operator|new
name|GenericDescriptors
argument_list|()
decl_stmt|;
name|clusterIdDesc
operator|.
name|put
argument_list|(
name|ClusterRepositoryInfo
operator|.
name|OAK_CLUSTERID_REPOSITORY_DESCRIPTOR_KEY
argument_list|,
operator|new
name|SimpleValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|ClusterRepositoryInfo
operator|.
name|getOrCreateId
argument_list|(
name|segmentNodeStore
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|whiteboard
operator|.
name|register
argument_list|(
name|Descriptors
operator|.
name|class
argument_list|,
name|clusterIdDesc
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Register "discovery lite" descriptors
name|registrations
operator|.
name|add
argument_list|(
name|whiteboard
operator|.
name|register
argument_list|(
name|Descriptors
operator|.
name|class
argument_list|,
operator|new
name|SegmentDiscoveryLiteDescriptors
argument_list|(
name|segmentNodeStore
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// If a shared data store register the repo id in the data store
name|String
name|repoId
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|SharedDataStoreUtils
operator|.
name|isShared
argument_list|(
name|blobStore
argument_list|)
condition|)
block|{
try|try
block|{
name|repoId
operator|=
name|ClusterRepositoryInfo
operator|.
name|getOrCreateId
argument_list|(
name|segmentNodeStore
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SharedDataStore
operator|)
name|blobStore
operator|)
operator|.
name|addMetadataRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|SharedStoreRecordType
operator|.
name|REPOSITORY
operator|.
name|getNameFromId
argument_list|(
name|repoId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not register a unique repositoryId"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|blobStore
operator|instanceof
name|BlobTrackingStore
condition|)
block|{
specifier|final
name|long
name|trackSnapshotInterval
init|=
name|toLong
argument_list|(
name|property
argument_list|(
name|PROP_BLOB_SNAPSHOT_INTERVAL
argument_list|)
argument_list|,
name|DEFAULT_BLOB_SNAPSHOT_INTERVAL
argument_list|)
decl_stmt|;
name|String
name|root
init|=
name|property
argument_list|(
name|DIRECTORY
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|root
argument_list|)
condition|)
block|{
name|root
operator|=
literal|"repository"
expr_stmt|;
block|}
name|BlobTrackingStore
name|trackingStore
init|=
operator|(
name|BlobTrackingStore
operator|)
name|blobStore
decl_stmt|;
if|if
condition|(
name|trackingStore
operator|.
name|getTracker
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|trackingStore
operator|.
name|getTracker
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|BlobTrackingStore
operator|)
name|blobStore
operator|)
operator|.
name|addTracker
argument_list|(
operator|new
name|BlobIdTracker
argument_list|(
name|root
argument_list|,
name|repoId
argument_list|,
name|trackSnapshotInterval
argument_list|,
operator|(
name|SharedDataStore
operator|)
name|blobStore
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|store
operator|.
name|getBlobStore
argument_list|()
operator|instanceof
name|GarbageCollectableBlobStore
condition|)
block|{
name|BlobGarbageCollector
name|gc
init|=
operator|new
name|MarkSweepGarbageCollector
argument_list|(
operator|new
name|SegmentBlobReferenceRetriever
argument_list|(
name|store
argument_list|)
argument_list|,
operator|(
name|GarbageCollectableBlobStore
operator|)
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|executor
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|blobGcMaxAgeInSecs
argument_list|)
argument_list|,
name|repoId
argument_list|)
decl_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|BlobGCMBean
operator|.
name|class
argument_list|,
operator|new
name|BlobGC
argument_list|(
name|gc
argument_list|,
name|executor
argument_list|)
argument_list|,
name|BlobGCMBean
operator|.
name|TYPE
argument_list|,
literal|"Segment node store blob garbage collection"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Expose an MBean for backup/restore operations
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|FileStoreBackupRestoreMBean
operator|.
name|class
argument_list|,
operator|new
name|FileStoreBackupRestoreImpl
argument_list|(
name|segmentNodeStore
argument_list|,
name|store
operator|.
name|getRevisions
argument_list|()
argument_list|,
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|getBackupDirectory
argument_list|()
argument_list|,
name|executor
argument_list|)
argument_list|,
name|FileStoreBackupRestoreMBean
operator|.
name|TYPE
argument_list|,
literal|"Segment node store backup/restore"
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"SegmentNodeStore initialized"
argument_list|)
expr_stmt|;
comment|// Register a factory service to expose the FileStore
name|providerRegistration
operator|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|registerService
argument_list|(
name|SegmentStoreProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|SegmentGCOptions
name|newGCOptions
parameter_list|()
block|{
name|boolean
name|pauseCompaction
init|=
name|toBoolean
argument_list|(
name|property
argument_list|(
name|PAUSE_COMPACTION
argument_list|)
argument_list|,
name|PAUSE_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|retryCount
init|=
name|toInteger
argument_list|(
name|property
argument_list|(
name|COMPACTION_RETRY_COUNT
argument_list|)
argument_list|,
name|RETRY_COUNT_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|forceTimeout
init|=
name|toInteger
argument_list|(
name|property
argument_list|(
name|COMPACTION_FORCE_TIMEOUT
argument_list|)
argument_list|,
name|FORCE_TIMEOUT_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|retainedGenerations
init|=
name|toInteger
argument_list|(
name|property
argument_list|(
name|RETAINED_GENERATIONS
argument_list|)
argument_list|,
name|RETAINED_GENERATIONS_DEFAULT
argument_list|)
decl_stmt|;
name|long
name|sizeDeltaEstimation
init|=
name|toLong
argument_list|(
name|property
argument_list|(
name|COMPACTION_SIZE_DELTA_ESTIMATION
argument_list|)
argument_list|,
name|SIZE_DELTA_ESTIMATION_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|memoryThreshold
init|=
name|toInteger
argument_list|(
name|property
argument_list|(
name|MEMORY_THRESHOLD
argument_list|)
argument_list|,
name|MEMORY_THRESHOLD_DEFAULT
argument_list|)
decl_stmt|;
name|boolean
name|disableEstimation
init|=
name|toBoolean
argument_list|(
name|property
argument_list|(
name|COMPACTION_DISABLE_ESTIMATION
argument_list|)
argument_list|,
name|DISABLE_ESTIMATION_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
argument_list|(
literal|"compaction.gainThreshold"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Deprecated property compaction.gainThreshold was detected. In order to configure compaction please use the new property "
operator|+
literal|"compaction.sizeDeltaEstimation. For turning off estimation, the new property compaction.disableEstimation should be used."
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SegmentGCOptions
argument_list|(
name|pauseCompaction
argument_list|,
name|retryCount
argument_list|,
name|forceTimeout
argument_list|)
operator|.
name|setRetainedGenerations
argument_list|(
name|retainedGenerations
argument_list|)
operator|.
name|setGcSizeDeltaEstimation
argument_list|(
name|sizeDeltaEstimation
argument_list|)
operator|.
name|setMemoryThreshold
argument_list|(
name|memoryThreshold
argument_list|)
operator|.
name|setEstimationDisabled
argument_list|(
name|disableEstimation
argument_list|)
return|;
block|}
specifier|private
name|void
name|unregisterNodeStore
parameter_list|()
block|{
operator|new
name|CompositeRegistration
argument_list|(
name|registrations
argument_list|)
operator|.
name|unregister
argument_list|()
expr_stmt|;
if|if
condition|(
name|providerRegistration
operator|!=
literal|null
condition|)
block|{
name|providerRegistration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|providerRegistration
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|storeRegistration
operator|!=
literal|null
condition|)
block|{
name|storeRegistration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|storeRegistration
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
name|executor
operator|.
name|stop
argument_list|()
expr_stmt|;
name|executor
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|File
name|getBaseDirectory
parameter_list|()
block|{
name|String
name|directory
init|=
name|property
argument_list|(
name|DIRECTORY
argument_list|)
decl_stmt|;
if|if
condition|(
name|directory
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|directory
argument_list|)
return|;
block|}
return|return
operator|new
name|File
argument_list|(
literal|"tarmk"
argument_list|)
return|;
block|}
specifier|private
name|File
name|getDirectory
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|getBaseDirectory
argument_list|()
argument_list|,
literal|"segmentstore"
argument_list|)
return|;
block|}
specifier|private
name|File
name|getBackupDirectory
parameter_list|()
block|{
name|String
name|backupDirectory
init|=
name|property
argument_list|(
name|BACKUP_DIRECTORY
argument_list|)
decl_stmt|;
if|if
condition|(
name|backupDirectory
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|backupDirectory
argument_list|)
return|;
block|}
return|return
operator|new
name|File
argument_list|(
name|getBaseDirectory
argument_list|()
argument_list|,
literal|"segmentstore-backup"
argument_list|)
return|;
block|}
specifier|private
name|String
name|getMode
parameter_list|()
block|{
name|String
name|mode
init|=
name|property
argument_list|(
name|MODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|!=
literal|null
condition|)
block|{
return|return
name|mode
return|;
block|}
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|MODE
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"sun.arch.data.model"
argument_list|,
literal|"32"
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|getCacheSize
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
name|String
name|cacheSize
init|=
name|property
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheSize
operator|!=
literal|null
condition|)
block|{
return|return
name|cacheSize
return|;
block|}
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
specifier|private
name|int
name|getSegmentCacheSize
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|getCacheSize
argument_list|(
name|SEGMENT_CACHE_SIZE
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|int
name|getStringCacheSize
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|getCacheSize
argument_list|(
name|STRING_CACHE_SIZE
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|int
name|getTemplateCacheSize
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|getCacheSize
argument_list|(
name|TEMPLATE_CACHE_SIZE
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|int
name|getStringDeduplicationCacheSize
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|getCacheSize
argument_list|(
name|STRING_DEDUPLICATION_CACHE_SIZE
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|int
name|getTemplateDeduplicationCacheSize
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|getCacheSize
argument_list|(
name|TEMPLATE_DEDUPLICATION_CACHE_SIZE
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|int
name|getNodeDeduplicationCacheSize
parameter_list|()
block|{
comment|// Round to the next power of 2
name|int
name|size
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|getCacheSize
argument_list|(
name|NODE_DEDUPLICATION_CACHE_SIZE
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
literal|1
operator|<<
operator|(
literal|32
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|size
operator|-
literal|1
argument_list|)
operator|)
return|;
block|}
specifier|private
name|String
name|getMaxFileSizeProperty
parameter_list|()
block|{
name|String
name|size
init|=
name|property
argument_list|(
name|SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
return|return
name|size
return|;
block|}
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|SIZE
argument_list|,
literal|"256"
argument_list|)
return|;
block|}
specifier|private
name|int
name|getMaxFileSize
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|getMaxFileSizeProperty
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|String
name|property
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|lookupConfigurationThenFramework
argument_list|(
name|context
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/**      * needed for situations where you have to unwrap the      * SegmentNodeStoreService, to get the SegmentStore, like the failover      */
annotation|@
name|Override
specifier|public
name|SegmentStore
name|getSegmentStore
parameter_list|()
block|{
return|return
name|store
return|;
block|}
comment|//------------------------------------------------------------< Observable>---
annotation|@
name|Override
specifier|public
name|Closeable
name|addObserver
parameter_list|(
name|Observer
name|observer
parameter_list|)
block|{
return|return
name|getNodeStore
argument_list|()
operator|.
name|addObserver
argument_list|(
name|observer
argument_list|)
return|;
block|}
comment|//------------------------------------------------------------< Object>--
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
operator|+
literal|": "
operator|+
name|segmentNodeStore
return|;
block|}
block|}
end_class

end_unit

