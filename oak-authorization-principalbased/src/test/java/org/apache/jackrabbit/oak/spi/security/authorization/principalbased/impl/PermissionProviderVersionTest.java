begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|identifier
operator|.
name|IdentifierManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_READ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_BASEVERSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_ISCHECKEDOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_VERSIONHISTORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_LOCK_MANAGEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_READ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_VERSION_MANAGEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|PermissionProviderVersionTest
extends|extends
name|AbstractPrincipalBasedTest
block|{
specifier|private
name|Principal
name|testPrincipal
decl_stmt|;
specifier|private
name|PrincipalBasedPermissionProvider
name|permissionProvider
decl_stmt|;
specifier|private
name|String
name|contentPath
decl_stmt|;
specifier|private
name|String
name|childPath
decl_stmt|;
specifier|private
name|String
name|grandchildPath
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|testPrincipal
operator|=
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
name|setupContentTrees
argument_list|(
name|TEST_OAK_PATH
argument_list|)
expr_stmt|;
name|contentPath
operator|=
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|TEST_OAK_PATH
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|childPath
operator|=
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|TEST_OAK_PATH
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|grandchildPath
operator|=
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|TEST_OAK_PATH
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// setup permissions on childPath + TEST_OAK_PATH
name|PrincipalPolicyImpl
name|policy
init|=
name|setupPrincipalBasedAccessControl
argument_list|(
name|testPrincipal
argument_list|,
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrPath
argument_list|(
name|childPath
argument_list|)
argument_list|,
name|JCR_READ
argument_list|)
decl_stmt|;
name|addPrincipalBasedEntry
argument_list|(
name|policy
argument_list|,
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrPath
argument_list|(
name|TEST_OAK_PATH
argument_list|)
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|)
expr_stmt|;
comment|// versionabel nodes: contentPath + grandChildPath + TEST_OAK_PATH
comment|// -> 1 TEST_OAK_PATH node hold policy, grandchildPath get it inherited and contentPath has no permissions granted
name|Tree
name|typeRoot
init|=
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
operator|new
name|String
index|[]
block|{
name|contentPath
block|,
name|grandchildPath
block|,
name|TEST_OAK_PATH
block|}
control|)
block|{
name|Tree
name|versionable
init|=
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
argument_list|,
name|NodeTypeConstants
operator|.
name|MIX_VERSIONABLE
argument_list|,
name|typeRoot
argument_list|,
literal|"uid"
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// force creation of a new version for grandchildPath, TEST_OAK_PATH but not for contentPath
comment|// removing tree for contentPath will then also result in removal of VH upon removal.
for|for
control|(
name|String
name|path
range|:
operator|new
name|String
index|[]
block|{
name|grandchildPath
block|,
name|TEST_OAK_PATH
block|}
control|)
block|{
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_ISCHECKEDOUT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_ISCHECKEDOUT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|permissionProvider
operator|=
name|createPermissionProvider
argument_list|(
name|root
argument_list|,
name|testPrincipal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|NamePathMapper
name|getNamePathMapper
parameter_list|()
block|{
return|return
name|NamePathMapper
operator|.
name|DEFAULT
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|String
name|getVersionPath
parameter_list|(
annotation|@
name|NotNull
name|String
name|versionablePath
parameter_list|,
name|boolean
name|history
parameter_list|)
block|{
name|Tree
name|versionable
init|=
name|root
operator|.
name|getTree
argument_list|(
name|versionablePath
argument_list|)
decl_stmt|;
name|String
name|path
decl_stmt|;
if|if
condition|(
name|history
condition|)
block|{
name|path
operator|=
operator|new
name|IdentifierManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPath
argument_list|(
name|versionable
operator|.
name|getProperty
argument_list|(
name|JCR_VERSIONHISTORY
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
operator|new
name|IdentifierManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPath
argument_list|(
name|versionable
operator|.
name|getProperty
argument_list|(
name|JCR_BASEVERSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|Tree
name|getVersionTree
parameter_list|(
annotation|@
name|NotNull
name|String
name|versionablePath
parameter_list|,
name|boolean
name|history
parameter_list|)
block|{
name|Tree
name|versionable
init|=
name|root
operator|.
name|getTree
argument_list|(
name|versionablePath
argument_list|)
decl_stmt|;
name|PropertyState
name|reference
decl_stmt|;
if|if
condition|(
name|history
condition|)
block|{
name|reference
operator|=
name|versionable
operator|.
name|getProperty
argument_list|(
name|JCR_VERSIONHISTORY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reference
operator|=
name|versionable
operator|.
name|getProperty
argument_list|(
name|JCR_BASEVERSION
argument_list|)
expr_stmt|;
block|}
name|Tree
name|t
init|=
operator|new
name|IdentifierManager
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
name|reference
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
decl_stmt|;
name|checkNotNull
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTreePermission
parameter_list|()
block|{
name|Tree
name|tree
init|=
name|getRootProvider
argument_list|()
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|TreePermission
name|tp
init|=
name|permissionProvider
operator|.
name|getTreePermission
argument_list|(
name|tree
argument_list|,
name|TreePermission
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|elem
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|getVersionPath
argument_list|(
name|TEST_OAK_PATH
argument_list|,
literal|false
argument_list|)
argument_list|)
control|)
block|{
name|tree
operator|=
name|tree
operator|.
name|getChild
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|tp
operator|=
name|permissionProvider
operator|.
name|getTreePermission
argument_list|(
name|tree
argument_list|,
name|tp
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|tp
operator|instanceof
name|AbstractTreePermission
argument_list|)
expr_stmt|;
name|AbstractTreePermission
name|atp
init|=
operator|(
name|AbstractTreePermission
operator|)
name|tp
decl_stmt|;
name|assertSame
argument_list|(
name|TreeType
operator|.
name|VERSION
argument_list|,
name|atp
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// tree must point to versionable node and NOT to the version tree
name|assertNotSame
argument_list|(
name|tree
argument_list|,
name|atp
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_OAK_PATH
argument_list|,
name|atp
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTreePermissionVersionableNodeRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|versionPath
init|=
name|getVersionPath
argument_list|(
name|TEST_OAK_PATH
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|root
operator|.
name|getTree
argument_list|(
name|TEST_OAK_PATH
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|permissionProvider
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|tree
init|=
name|getRootProvider
argument_list|()
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|TreePermission
name|tp
init|=
name|permissionProvider
operator|.
name|getTreePermission
argument_list|(
name|tree
argument_list|,
name|TreePermission
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|elem
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|versionPath
argument_list|)
control|)
block|{
name|tree
operator|=
name|tree
operator|.
name|getChild
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|tp
operator|=
name|permissionProvider
operator|.
name|getTreePermission
argument_list|(
name|tree
argument_list|,
name|tp
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|tp
operator|instanceof
name|AbstractTreePermission
argument_list|)
expr_stmt|;
name|AbstractTreePermission
name|atp
init|=
operator|(
name|AbstractTreePermission
operator|)
name|tp
decl_stmt|;
name|assertSame
argument_list|(
name|TreeType
operator|.
name|VERSION
argument_list|,
name|atp
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// tree must point to non-existing versionable node and NOT to the version tree
name|assertNotSame
argument_list|(
name|tree
argument_list|,
name|atp
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|atp
operator|.
name|getTree
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_OAK_PATH
argument_list|,
name|atp
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTreePermissionVersionHistoryRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|vhPath
init|=
name|getVersionPath
argument_list|(
name|contentPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|root
operator|.
name|getTree
argument_list|(
name|contentPath
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|permissionProvider
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|tree
init|=
name|getRootProvider
argument_list|()
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|TreePermission
name|tp
init|=
name|permissionProvider
operator|.
name|getTreePermission
argument_list|(
name|tree
argument_list|,
name|TreePermission
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|elem
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|vhPath
argument_list|)
control|)
block|{
name|tree
operator|=
name|tree
operator|.
name|getChild
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|tp
operator|=
name|permissionProvider
operator|.
name|getTreePermission
argument_list|(
name|tree
argument_list|,
name|tp
argument_list|)
expr_stmt|;
block|}
name|assertSame
argument_list|(
name|TreePermission
operator|.
name|EMPTY
argument_list|,
name|tp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGranted
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|getVersionTree
argument_list|(
name|contentPath
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|getVersionTree
argument_list|(
name|grandchildPath
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|getVersionTree
argument_list|(
name|TEST_OAK_PATH
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|getVersionTree
argument_list|(
name|grandchildPath
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|getVersionTree
argument_list|(
name|TEST_OAK_PATH
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedWithProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|t
init|=
name|getVersionTree
argument_list|(
name|contentPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|t
argument_list|,
name|t
operator|.
name|getProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|getVersionTree
argument_list|(
name|grandchildPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|t
argument_list|,
name|t
operator|.
name|getProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|getVersionTree
argument_list|(
name|TEST_OAK_PATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|t
argument_list|,
name|t
operator|.
name|getProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
operator||
name|Permissions
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|getVersionTree
argument_list|(
name|grandchildPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|t
argument_list|,
name|t
operator|.
name|getProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|getVersionTree
argument_list|(
name|TEST_OAK_PATH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|t
argument_list|,
name|t
operator|.
name|getProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedVersionableTreeRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|versionPath
init|=
name|getVersionPath
argument_list|(
name|TEST_OAK_PATH
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|root
operator|.
name|getTree
argument_list|(
name|TEST_OAK_PATH
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|permissionProvider
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|versionTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|versionPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|versionTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// permissions not affected as they are stored with the principal.
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|versionTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedVersionHistoryRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|vhPath
init|=
name|getVersionPath
argument_list|(
name|contentPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|root
operator|.
name|getTree
argument_list|(
name|contentPath
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|permissionProvider
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|vhTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|vhPath
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|vhTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// permissions affected because unable to resolve versionable tree
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|vhTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedTreeLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|TreeLocation
name|tl
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
name|getVersionPath
argument_list|(
name|contentPath
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|tl
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|tl
operator|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
name|getVersionPath
argument_list|(
name|grandchildPath
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|tl
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|tl
operator|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
name|getVersionPath
argument_list|(
name|TEST_OAK_PATH
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|tl
argument_list|,
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedByPath
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|getVersionPath
argument_list|(
name|contentPath
argument_list|,
literal|false
argument_list|)
argument_list|,
name|ACTION_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|getVersionPath
argument_list|(
name|grandchildPath
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Permissions
operator|.
name|getString
argument_list|(
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|getVersionPath
argument_list|(
name|TEST_OAK_PATH
argument_list|,
literal|false
argument_list|)
argument_list|,
name|Permissions
operator|.
name|getString
argument_list|(
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|WRITE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|getVersionPath
argument_list|(
name|grandchildPath
argument_list|,
literal|false
argument_list|)
argument_list|,
name|ACTION_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|getVersionPath
argument_list|(
name|TEST_OAK_PATH
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Permissions
operator|.
name|getString
argument_list|(
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|getPrivileges
argument_list|(
name|getVersionTree
argument_list|(
name|contentPath
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|JCR_READ
argument_list|)
argument_list|,
name|permissionProvider
operator|.
name|getPrivileges
argument_list|(
name|getVersionTree
argument_list|(
name|grandchildPath
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|,
name|permissionProvider
operator|.
name|getPrivileges
argument_list|(
name|getVersionTree
argument_list|(
name|TEST_OAK_PATH
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesVersionableTreeRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|versionPath
init|=
name|getVersionPath
argument_list|(
name|TEST_OAK_PATH
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|versionHPath
init|=
name|getVersionPath
argument_list|(
name|TEST_OAK_PATH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|versionPath
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|getTree
argument_list|(
name|TEST_OAK_PATH
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|permissionProvider
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|versionTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|versionPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|versionTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// permissions not affected (as long as no restrictions involved) due to the fact that permissions are not
comment|// stored with the versionable node.
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|,
name|permissionProvider
operator|.
name|getPrivileges
argument_list|(
name|versionTree
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesVersionHistoryRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|vhPath
init|=
name|getVersionPath
argument_list|(
name|contentPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|vhPath
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|getTree
argument_list|(
name|contentPath
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|permissionProvider
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|vhTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|vhPath
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|vhTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|getPrivileges
argument_list|(
name|vhTree
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|hasPrivileges
argument_list|(
name|getVersionTree
argument_list|(
name|contentPath
argument_list|,
literal|false
argument_list|)
argument_list|,
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|hasPrivileges
argument_list|(
name|getVersionTree
argument_list|(
name|grandchildPath
argument_list|,
literal|true
argument_list|)
argument_list|,
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|hasPrivileges
argument_list|(
name|getVersionTree
argument_list|(
name|TEST_OAK_PATH
argument_list|,
literal|false
argument_list|)
argument_list|,
name|JCR_READ
argument_list|,
name|JCR_LOCK_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|hasPrivileges
argument_list|(
name|getVersionTree
argument_list|(
name|grandchildPath
argument_list|,
literal|false
argument_list|)
argument_list|,
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|hasPrivileges
argument_list|(
name|getVersionTree
argument_list|(
name|TEST_OAK_PATH
argument_list|,
literal|true
argument_list|)
argument_list|,
name|JCR_READ
argument_list|,
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

