begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ResultRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|AbstractQueryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|PropertyValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_class
specifier|public
class|class
name|OrderedPropertyIndexQueryTest
extends|extends
name|AbstractQueryTest
block|{
comment|/**      * the property used by the index      */
specifier|public
specifier|static
specifier|final
name|String
name|ORDERED_PROPERTY
init|=
literal|"foo"
decl_stmt|;
comment|/**      * number of nodes to create for testing.      *       * It has been found during development that in some cases the order of the nodes creation within the persistence      * where the actual expected order.      *       * The higher the value the lower the chance for this to happen.      */
specifier|private
specifier|static
specifier|final
name|int
name|NUMBER_OF_NODES
init|=
literal|50
decl_stmt|;
comment|/**      * convenience orderable object that represents a tuple of values and paths      *       * where the values are the indexed keys from the index and the paths are the path which hold the key      */
specifier|private
class|class
name|ValuePathTuple
implements|implements
name|Comparable
argument_list|<
name|ValuePathTuple
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
name|ValuePathTuple
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|getOuterType
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|path
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|path
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|value
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ValuePathTuple
name|other
init|=
operator|(
name|ValuePathTuple
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|getOuterType
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getOuterType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|path
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|other
operator|.
name|path
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|value
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|other
operator|.
name|value
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|ValuePathTuple
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|this
operator|.
name|value
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|value
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|this
operator|.
name|value
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|value
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|this
operator|.
name|path
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|path
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|this
operator|.
name|path
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|path
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|OrderedPropertyIndexQueryTest
name|getOuterType
parameter_list|()
block|{
return|return
name|OrderedPropertyIndexQueryTest
operator|.
name|this
return|;
block|}
block|}
comment|/**      * testing for asserting the right comparison behaviour of the custom class      */
annotation|@
name|Test
specifier|public
name|void
name|valuePathTupleComparison
parameter_list|()
block|{
try|try
block|{
operator|new
name|ValuePathTuple
argument_list|(
literal|"value"
argument_list|,
literal|"path"
argument_list|)
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"It should have raised a NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// so far so good
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value"
argument_list|,
literal|"path"
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value"
argument_list|,
literal|"path"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
operator|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value"
argument_list|,
literal|"path"
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value1"
argument_list|,
literal|"path"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
operator|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value1"
argument_list|,
literal|"path"
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value1"
argument_list|,
literal|"path1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value1"
argument_list|,
literal|"path"
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value"
argument_list|,
literal|"path"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value1"
argument_list|,
literal|"path1"
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value1"
argument_list|,
literal|"path"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
operator|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value000"
argument_list|,
literal|"/test/n1"
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value001"
argument_list|,
literal|"/test/n0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value001"
argument_list|,
literal|"/test/n0"
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value000"
argument_list|,
literal|"/test/n1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
return|return
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
comment|// .with(new PropertyIndexProvider())
comment|// .with(new PropertyIndexEditorProvider())
operator|.
name|with
argument_list|(
operator|new
name|OrderedPropertyIndexProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OrderedPropertyIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
comment|/**      * create a child node for the provided father      *       * @param father      * @param name      *            the name of the node to create      * @param propName      *            the name of the property to assign      * @param propValue      *            the value of the property to assign      * @return      */
specifier|private
specifier|static
name|Tree
name|child
parameter_list|(
name|Tree
name|father
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|propName
parameter_list|,
name|String
name|propValue
parameter_list|)
block|{
name|Tree
name|child
init|=
name|father
operator|.
name|addChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
comment|/**      * generate a list of values to be used as ordered set. Will return something like      * {@code value000, value001, value002, ...}      *       *       * @param amount      * @return      */
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|generateOrderedValues
parameter_list|(
name|int
name|amount
parameter_list|)
block|{
if|if
condition|(
name|amount
operator|>
literal|1000
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"amount cannot be greater than 100"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|amount
argument_list|)
decl_stmt|;
name|NumberFormat
name|nf
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"000"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|amount
condition|;
name|i
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"value%s"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|nf
operator|.
name|format
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
comment|/**      * convenience method that adds a bunch of nodes in random order and return the order in which they should be      * presented by the OrderedIndex      *       * @param values      *            the values of the property that will be indexed      * @param father      *            the father under which add the nodes      * @return      */
specifier|private
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|addChildNodes
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|,
specifier|final
name|Tree
name|father
parameter_list|)
block|{
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<
name|ValuePathTuple
argument_list|>
argument_list|()
decl_stmt|;
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|v
init|=
name|values
operator|.
name|remove
argument_list|(
name|rnd
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|t
init|=
name|child
argument_list|(
name|father
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"n%s"
argument_list|,
name|counter
operator|++
argument_list|)
argument_list|,
name|ORDERED_PROPERTY
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
operator|new
name|ValuePathTuple
argument_list|(
name|v
argument_list|,
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
return|return
name|nodes
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|createTestIndexNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|index
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|IndexUtils
operator|.
name|createIndexDefinition
argument_list|(
operator|new
name|NodeUtil
argument_list|(
name|index
operator|.
name|getChild
argument_list|(
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|)
argument_list|,
name|TEST_INDEX_NAME
argument_list|,
literal|false
argument_list|,
operator|new
name|String
index|[]
block|{
name|ORDERED_PROPERTY
block|}
argument_list|,
literal|null
argument_list|,
name|OrderedIndex
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|/**      * assert the right order of the returned resultset      *       * @param orderedSequence      *            the right order in which the resultset should be returned      * @param resultset      *            the resultset      */
specifier|private
name|void
name|assertRightOrder
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|orderedSequence
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|resultset
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"No results returned"
argument_list|,
name|resultset
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|resultset
operator|.
name|hasNext
argument_list|()
operator|&&
name|counter
operator|<
name|orderedSequence
operator|.
name|size
argument_list|()
condition|)
block|{
name|ResultRow
name|row
init|=
name|resultset
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Wrong path at the element '%d'"
argument_list|,
name|counter
argument_list|)
argument_list|,
name|orderedSequence
operator|.
name|get
argument_list|(
name|counter
argument_list|)
operator|.
name|path
argument_list|,
name|row
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
block|}
comment|/**      * Query the index for retrieving all the entries      *       * @throws CommitFailedException      * @throws ParseException      * @throws RepositoryException      */
annotation|@
name|Test
specifier|public
name|void
name|queryAllEntries
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|ParseException
throws|,
name|RepositoryException
block|{
name|setTravesalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// index automatically created by the framework:
comment|// {@code createTestIndexNode()}
name|Tree
name|rTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|rTree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|addChildNodes
argument_list|(
name|generateOrderedValues
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
argument_list|,
name|test
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// querying
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|results
decl_stmt|;
name|results
operator|=
name|executeQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"SELECT * from [%s] WHERE foo IS NOT NULL"
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
argument_list|,
name|SQL2
argument_list|,
literal|null
argument_list|)
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertRightOrder
argument_list|(
name|nodes
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|setTravesalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * test the index for returning the items related to a single key      *       * @throws CommitFailedException      * @throws ParseException      */
annotation|@
name|Test
specifier|public
name|void
name|queryOneKey
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|ParseException
block|{
name|setTravesalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// index automatically created by the framework:
comment|// {@code createTestIndexNode()}
name|Tree
name|rTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|rTree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|addChildNodes
argument_list|(
name|generateOrderedValues
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
argument_list|,
name|test
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ValuePathTuple
name|searchfor
init|=
name|nodes
operator|.
name|get
argument_list|(
name|NUMBER_OF_NODES
operator|/
literal|2
argument_list|)
decl_stmt|;
comment|// getting the middle of the random list of
comment|// nodes.
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyValue
argument_list|>
name|filter
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|ORDERED_PROPERTY
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
name|searchfor
operator|.
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"SELECT * FROM [%s] WHERE %s=$%s"
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|results
init|=
name|executeQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|query
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|ORDERED_PROPERTY
argument_list|,
name|ORDERED_PROPERTY
argument_list|)
argument_list|,
name|SQL2
argument_list|,
name|filter
argument_list|)
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"one element is expected"
argument_list|,
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong path returned"
argument_list|,
name|searchfor
operator|.
name|path
argument_list|,
name|results
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"there should be not any more items"
argument_list|,
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|setTravesalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

