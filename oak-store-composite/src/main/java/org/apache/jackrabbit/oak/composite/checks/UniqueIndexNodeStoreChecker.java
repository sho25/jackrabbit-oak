begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
operator|.
name|checks
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_CONTENT_NODE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|UNIQUE_PROPERTY_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
operator|.
name|MountedNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|Multiplexers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|IndexEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|UniqueEntryStoreStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * Checker that ensures the consistency of unique entries in the various mounts  *   *<p>For all unique indexes, it checks that the uniqueness constraint holds when  * taking into account the combined index from all the mounts, including the global one.</p>  *   *<p>Being a one-off check, it does not strictly implement the {@link #check(MountedNodeStore, Tree, ErrorHolder, Context)}  * contract in terms of navigating the specified tree, but instead accesses the index definitions node directly  * on first access and skips all subsequent executions.</p>  *  */
end_comment

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|MountedNodeStoreChecker
operator|.
name|class
argument_list|)
specifier|public
class|class
name|UniqueIndexNodeStoreChecker
implements|implements
name|MountedNodeStoreChecker
argument_list|<
name|UniqueIndexNodeStoreChecker
operator|.
name|Context
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UniqueIndexNodeStoreChecker
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Context
name|createContext
parameter_list|(
name|NodeStore
name|globalStore
parameter_list|,
name|MountInfoProvider
name|mip
parameter_list|)
block|{
name|Context
name|ctx
init|=
operator|new
name|Context
argument_list|(
name|mip
argument_list|)
decl_stmt|;
comment|// read definitions from oak:index, and pick all unique indexes
name|NodeState
name|indexDefs
init|=
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|indexDef
range|:
name|indexDefs
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|indexDef
operator|.
name|getNodeState
argument_list|()
operator|.
name|hasProperty
argument_list|(
name|UNIQUE_PROPERTY_NAME
argument_list|)
operator|&&
name|indexDef
operator|.
name|getNodeState
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|UNIQUE_PROPERTY_NAME
argument_list|)
condition|)
block|{
name|ctx
operator|.
name|add
argument_list|(
name|indexDef
argument_list|,
name|mip
operator|.
name|getDefaultMount
argument_list|()
argument_list|,
name|indexDefs
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|track
argument_list|(
operator|new
name|MountedNodeStore
argument_list|(
name|mip
operator|.
name|getDefaultMount
argument_list|()
argument_list|,
name|globalStore
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ctx
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|MountedNodeStore
name|mountedStore
parameter_list|,
name|Tree
name|tree
parameter_list|,
name|ErrorHolder
name|errorHolder
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
name|context
operator|.
name|track
argument_list|(
name|mountedStore
argument_list|)
expr_stmt|;
comment|// gather index definitions owned by this mount
name|NodeState
name|indexDefs
init|=
name|mountedStore
operator|.
name|getNodeStore
argument_list|()
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|indexDef
range|:
name|indexDefs
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|indexDef
operator|.
name|getNodeState
argument_list|()
operator|.
name|hasProperty
argument_list|(
name|UNIQUE_PROPERTY_NAME
argument_list|)
operator|&&
name|indexDef
operator|.
name|getNodeState
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|UNIQUE_PROPERTY_NAME
argument_list|)
condition|)
block|{
name|String
name|mountIndexDefName
init|=
name|Multiplexers
operator|.
name|getNodeForMount
argument_list|(
name|mountedStore
operator|.
name|getMount
argument_list|()
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
decl_stmt|;
name|NodeState
name|mountIndexDef
init|=
name|indexDef
operator|.
name|getNodeState
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|mountIndexDefName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mountIndexDef
operator|.
name|exists
argument_list|()
condition|)
block|{
name|context
operator|.
name|add
argument_list|(
name|indexDef
argument_list|,
name|mountedStore
operator|.
name|getMount
argument_list|()
argument_list|,
name|indexDefs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// execute checks
name|context
operator|.
name|runChecks
argument_list|(
name|context
argument_list|,
name|errorHolder
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|static
class|class
name|Context
block|{
specifier|private
specifier|final
name|MountInfoProvider
name|mip
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|IndexCombination
argument_list|>
name|combinations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MountedNodeStore
argument_list|>
name|mountedNodeStoresByName
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Context
parameter_list|(
name|MountInfoProvider
name|mip
parameter_list|)
block|{
name|this
operator|.
name|mip
operator|=
name|mip
expr_stmt|;
block|}
specifier|public
name|void
name|track
parameter_list|(
name|MountedNodeStore
name|mountedNodeStore
parameter_list|)
block|{
name|mountedNodeStoresByName
operator|.
name|put
argument_list|(
name|mountedNodeStore
operator|.
name|getMount
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|mountedNodeStore
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|ChildNodeEntry
name|rootIndexDef
parameter_list|,
name|Mount
name|mount
parameter_list|,
name|NodeState
name|indexDef
parameter_list|)
block|{
name|IndexCombination
name|combination
init|=
name|combinations
operator|.
name|get
argument_list|(
name|rootIndexDef
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|combination
operator|==
literal|null
condition|)
block|{
name|combination
operator|=
operator|new
name|IndexCombination
argument_list|(
name|rootIndexDef
argument_list|)
expr_stmt|;
name|combinations
operator|.
name|put
argument_list|(
name|rootIndexDef
operator|.
name|getName
argument_list|()
argument_list|,
name|combination
argument_list|)
expr_stmt|;
block|}
name|combination
operator|.
name|addEntry
argument_list|(
name|mount
argument_list|,
name|indexDef
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MountInfoProvider
name|getMountInfoProvider
parameter_list|()
block|{
return|return
name|mip
return|;
block|}
specifier|public
name|void
name|runChecks
parameter_list|(
name|Context
name|context
parameter_list|,
name|ErrorHolder
name|errorHolder
parameter_list|)
block|{
for|for
control|(
name|IndexCombination
name|combination
range|:
name|combinations
operator|.
name|values
argument_list|()
control|)
block|{
name|combination
operator|.
name|runCheck
argument_list|(
name|context
argument_list|,
name|errorHolder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
class|class
name|IndexCombination
block|{
specifier|private
specifier|final
name|ChildNodeEntry
name|rootIndexDef
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Mount
argument_list|,
name|NodeState
argument_list|>
name|indexEntries
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Mount
index|[]
argument_list|>
name|checked
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// bounded as the ErrorHolder has a reasonable limit of entries before it fails immediately
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|reportedConflictingValues
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|IndexCombination
parameter_list|(
name|ChildNodeEntry
name|rootIndexDef
parameter_list|)
block|{
name|this
operator|.
name|rootIndexDef
operator|=
name|rootIndexDef
expr_stmt|;
block|}
specifier|public
name|void
name|addEntry
parameter_list|(
name|Mount
name|mount
parameter_list|,
name|NodeState
name|indexDef
parameter_list|)
block|{
if|if
condition|(
operator|!
name|indexEntries
operator|.
name|containsKey
argument_list|(
name|mount
argument_list|)
condition|)
name|indexEntries
operator|.
name|put
argument_list|(
name|mount
argument_list|,
name|indexDef
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|runCheck
parameter_list|(
name|Context
name|context
parameter_list|,
name|ErrorHolder
name|errorHolder
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Mount
argument_list|,
name|NodeState
argument_list|>
name|indexEntry
range|:
name|indexEntries
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Mount
argument_list|,
name|NodeState
argument_list|>
name|indexEntry2
range|:
name|indexEntries
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// same entry, skip
if|if
condition|(
name|indexEntry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|indexEntry2
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// ensure we don't check twice
if|if
condition|(
name|wasChecked
argument_list|(
name|indexEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|indexEntry2
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|check
argument_list|(
name|indexEntry
argument_list|,
name|indexEntry2
argument_list|,
name|context
argument_list|,
name|errorHolder
argument_list|)
expr_stmt|;
name|recordChecked
argument_list|(
name|indexEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|indexEntry2
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|wasChecked
parameter_list|(
name|Mount
name|first
parameter_list|,
name|Mount
name|second
parameter_list|)
block|{
for|for
control|(
name|Mount
index|[]
name|checkedEntry
range|:
name|checked
control|)
block|{
if|if
condition|(
operator|(
name|checkedEntry
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|first
argument_list|)
operator|&&
name|checkedEntry
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|second
argument_list|)
operator|)
operator|||
operator|(
name|checkedEntry
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|first
argument_list|)
operator|&&
name|checkedEntry
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|second
argument_list|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|recordChecked
parameter_list|(
name|Mount
name|first
parameter_list|,
name|Mount
name|second
parameter_list|)
block|{
name|checked
operator|.
name|add
argument_list|(
operator|new
name|Mount
index|[]
block|{
name|first
block|,
name|second
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|check
parameter_list|(
name|Entry
argument_list|<
name|Mount
argument_list|,
name|NodeState
argument_list|>
name|indexEntry
parameter_list|,
name|Entry
argument_list|<
name|Mount
argument_list|,
name|NodeState
argument_list|>
name|indexEntry2
parameter_list|,
name|Context
name|ctx
parameter_list|,
name|ErrorHolder
name|errorHolder
parameter_list|)
block|{
name|String
name|indexName
init|=
name|rootIndexDef
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// optimisation: sort strategies to ensuer that we query all the entries from the mount and check them
comment|// against the default. this way we'll run a significantly smaller number of checks. The assumption is
comment|// that the non-default mount will always hold a larger number of entries
name|TreeSet
argument_list|<
name|StrategyWrapper
argument_list|>
name|wrappers
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|wrappers
operator|.
name|add
argument_list|(
name|getWrapper
argument_list|(
name|indexEntry
argument_list|,
name|indexName
argument_list|,
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|wrappers
operator|.
name|add
argument_list|(
name|getWrapper
argument_list|(
name|indexEntry2
argument_list|,
name|indexName
argument_list|,
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|StrategyWrapper
name|wrapper
init|=
name|wrappers
operator|.
name|first
argument_list|()
decl_stmt|;
name|StrategyWrapper
name|wrapper2
init|=
name|wrappers
operator|.
name|last
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking index definitions for {} between mounts {} and {}"
argument_list|,
name|indexName
argument_list|,
name|wrapper
operator|.
name|mount
operator|.
name|getName
argument_list|()
argument_list|,
name|wrapper2
operator|.
name|mount
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexEntry
name|hit
range|:
name|wrapper
operator|.
name|queryAll
argument_list|()
control|)
block|{
name|Optional
argument_list|<
name|IndexEntry
argument_list|>
name|result
init|=
name|wrapper2
operator|.
name|queryOne
argument_list|(
name|hit
operator|.
name|getPropertyValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|IndexEntry
name|hit2
init|=
name|result
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|reportedConflictingValues
operator|.
name|add
argument_list|(
name|hit
operator|.
name|getPropertyValue
argument_list|()
argument_list|)
condition|)
block|{
name|errorHolder
operator|.
name|report
argument_list|(
name|wrapper
operator|.
name|nodeStore
argument_list|,
name|hit
operator|.
name|getPath
argument_list|()
argument_list|,
name|wrapper2
operator|.
name|nodeStore
argument_list|,
name|hit2
operator|.
name|getPath
argument_list|()
argument_list|,
name|hit
operator|.
name|getPropertyValue
argument_list|()
argument_list|,
literal|"duplicate unique index entry"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|StrategyWrapper
name|getWrapper
parameter_list|(
name|Entry
argument_list|<
name|Mount
argument_list|,
name|NodeState
argument_list|>
name|indexEntry
parameter_list|,
name|String
name|indexName
parameter_list|,
name|Context
name|ctx
parameter_list|)
block|{
name|NodeState
name|indexNode
init|=
name|indexEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Mount
name|mount
init|=
name|indexEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|MountedNodeStore
name|mountedNodeStore
init|=
name|ctx
operator|.
name|mountedNodeStoresByName
operator|.
name|get
argument_list|(
name|mount
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|UniqueEntryStoreStrategy
name|strategy
init|=
name|mount
operator|.
name|isDefault
argument_list|()
condition|?
operator|new
name|UniqueEntryStoreStrategy
argument_list|()
else|:
operator|new
name|UniqueEntryStoreStrategy
argument_list|(
name|Multiplexers
operator|.
name|getNodeForMount
argument_list|(
name|mount
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|StrategyWrapper
argument_list|(
name|strategy
argument_list|,
name|indexNode
operator|.
name|getChildNode
argument_list|(
name|indexName
argument_list|)
argument_list|,
name|indexName
argument_list|,
name|mountedNodeStore
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StrategyWrapper
implements|implements
name|Comparable
argument_list|<
name|StrategyWrapper
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|int
name|PRIORITY_DEFAULT
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PRIORITY_MOUNT
init|=
literal|100
decl_stmt|;
specifier|private
specifier|final
name|UniqueEntryStoreStrategy
name|strategy
decl_stmt|;
specifier|private
specifier|final
name|int
name|priority
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|indexNode
decl_stmt|;
specifier|private
specifier|final
name|Mount
name|mount
decl_stmt|;
specifier|private
specifier|final
name|MountedNodeStore
name|nodeStore
decl_stmt|;
specifier|private
specifier|final
name|String
name|indexName
decl_stmt|;
specifier|private
name|StrategyWrapper
parameter_list|(
name|UniqueEntryStoreStrategy
name|strategy
parameter_list|,
name|NodeState
name|indexNode
parameter_list|,
name|String
name|indexName
parameter_list|,
name|MountedNodeStore
name|nodeStore
parameter_list|)
block|{
name|this
operator|.
name|strategy
operator|=
name|strategy
expr_stmt|;
name|this
operator|.
name|mount
operator|=
name|nodeStore
operator|.
name|getMount
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexNode
operator|=
name|indexNode
expr_stmt|;
name|this
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|this
operator|.
name|indexName
operator|=
name|indexName
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|mount
operator|.
name|isDefault
argument_list|()
condition|?
name|PRIORITY_MOUNT
else|:
name|PRIORITY_DEFAULT
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|StrategyWrapper
name|o
parameter_list|)
block|{
name|int
name|prioCmp
init|=
name|Integer
operator|.
name|compare
argument_list|(
name|priority
argument_list|,
name|o
operator|.
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|prioCmp
operator|!=
literal|0
condition|)
block|{
return|return
name|prioCmp
return|;
block|}
return|return
name|mount
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|mount
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Iterable
argument_list|<
name|IndexEntry
argument_list|>
name|queryAll
parameter_list|()
block|{
return|return
name|strategy
operator|.
name|queryEntries
argument_list|(
name|Filter
operator|.
name|EMPTY_FILTER
argument_list|,
name|indexName
argument_list|,
name|indexNode
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Optional
argument_list|<
name|IndexEntry
argument_list|>
name|queryOne
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|Iterable
argument_list|<
name|IndexEntry
argument_list|>
name|results
init|=
name|strategy
operator|.
name|queryEntries
argument_list|(
name|Filter
operator|.
name|EMPTY_FILTER
argument_list|,
name|indexName
argument_list|,
name|indexNode
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
name|results
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

