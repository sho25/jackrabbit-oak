begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  *<code>PermissionEntryCache</code> caches the permission entries of principals. The cache is held globally and contains  * a version of the principal permission entries of the session that read them last. each session gets a lazy copy of  * the cache and needs to verify if each cached principal permission set still reflects the state that the session sees.  * every newly loaded principal permission set can be pushed down to the base cache if it does not exist there yet, or  * if it's newer.  */
end_comment

begin_class
specifier|public
class|class
name|PermissionEntryCache
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PrincipalPermissionEntries
argument_list|>
name|base
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|PrincipalPermissionEntries
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|Local
name|createLocalCache
parameter_list|()
block|{
return|return
operator|new
name|Local
argument_list|()
return|;
block|}
specifier|public
name|void
name|flush
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|principalNames
parameter_list|)
block|{
name|base
operator|.
name|keySet
argument_list|()
operator|.
name|removeAll
argument_list|(
name|principalNames
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|Local
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PrincipalPermissionEntries
argument_list|>
name|entries
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PrincipalPermissionEntries
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|verified
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|Local
parameter_list|()
block|{
name|entries
operator|.
name|putAll
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PrincipalPermissionEntries
name|getEntries
parameter_list|(
name|PermissionStore
name|store
parameter_list|,
name|String
name|principalName
parameter_list|)
block|{
name|PrincipalPermissionEntries
name|ppe
init|=
name|entries
operator|.
name|get
argument_list|(
name|principalName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ppe
operator|==
literal|null
condition|)
block|{
name|ppe
operator|=
name|store
operator|.
name|load
argument_list|(
name|principalName
argument_list|)
expr_stmt|;
name|entries
operator|.
name|put
argument_list|(
name|principalName
argument_list|,
name|ppe
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|verified
operator|.
name|contains
argument_list|(
name|principalName
argument_list|)
condition|)
block|{
if|if
condition|(
name|store
operator|.
name|getTimestamp
argument_list|(
name|principalName
argument_list|)
operator|!=
name|ppe
operator|.
name|getTimestamp
argument_list|()
condition|)
block|{
name|ppe
operator|=
name|store
operator|.
name|load
argument_list|(
name|principalName
argument_list|)
expr_stmt|;
name|entries
operator|.
name|put
argument_list|(
name|principalName
argument_list|,
name|ppe
argument_list|)
expr_stmt|;
block|}
name|verified
operator|.
name|add
argument_list|(
name|principalName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check if base cache has the entries
name|PrincipalPermissionEntries
name|baseppe
init|=
name|base
operator|.
name|get
argument_list|(
name|principalName
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseppe
operator|==
literal|null
operator|||
name|ppe
operator|.
name|getTimestamp
argument_list|()
operator|>
name|baseppe
operator|.
name|getTimestamp
argument_list|()
condition|)
block|{
name|base
operator|.
name|put
argument_list|(
name|principalName
argument_list|,
name|ppe
argument_list|)
expr_stmt|;
block|}
return|return
name|ppe
return|;
block|}
specifier|public
name|boolean
name|hasEntries
parameter_list|(
name|PermissionStore
name|store
parameter_list|,
name|String
name|principalName
parameter_list|)
block|{
return|return
name|getNumEntries
argument_list|(
name|store
argument_list|,
name|principalName
argument_list|)
operator|>
literal|0
return|;
block|}
specifier|public
name|long
name|getNumEntries
parameter_list|(
name|PermissionStore
name|store
parameter_list|,
name|String
name|principalName
parameter_list|)
block|{
return|return
name|getEntries
argument_list|(
name|store
argument_list|,
name|principalName
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|flush
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|principalNames
parameter_list|)
block|{
name|verified
operator|.
name|removeAll
argument_list|(
name|principalNames
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

