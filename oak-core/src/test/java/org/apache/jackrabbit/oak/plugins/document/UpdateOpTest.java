begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests for UpdateOp  */
end_comment

begin_class
specifier|public
class|class
name|UpdateOpTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|keyEquals
parameter_list|()
block|{
name|Revision
name|r1
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r2
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|UpdateOp
operator|.
name|Key
name|k1
init|=
operator|new
name|UpdateOp
operator|.
name|Key
argument_list|(
literal|"foo"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|UpdateOp
operator|.
name|Key
name|k2
init|=
operator|new
name|UpdateOp
operator|.
name|Key
argument_list|(
literal|"bar"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|k1
operator|.
name|equals
argument_list|(
name|k2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|k2
operator|.
name|equals
argument_list|(
name|k1
argument_list|)
argument_list|)
expr_stmt|;
name|UpdateOp
operator|.
name|Key
name|k3
init|=
operator|new
name|UpdateOp
operator|.
name|Key
argument_list|(
literal|"foo"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|k1
operator|.
name|equals
argument_list|(
name|k3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|k3
operator|.
name|equals
argument_list|(
name|k1
argument_list|)
argument_list|)
expr_stmt|;
name|UpdateOp
operator|.
name|Key
name|k4
init|=
operator|new
name|UpdateOp
operator|.
name|Key
argument_list|(
literal|"foo"
argument_list|,
name|r1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|k4
operator|.
name|equals
argument_list|(
name|k3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|k3
operator|.
name|equals
argument_list|(
name|k4
argument_list|)
argument_list|)
expr_stmt|;
name|UpdateOp
operator|.
name|Key
name|k5
init|=
operator|new
name|UpdateOp
operator|.
name|Key
argument_list|(
literal|"foo"
argument_list|,
name|r2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|k5
operator|.
name|equals
argument_list|(
name|k4
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|k4
operator|.
name|equals
argument_list|(
name|k5
argument_list|)
argument_list|)
expr_stmt|;
name|UpdateOp
operator|.
name|Key
name|k6
init|=
operator|new
name|UpdateOp
operator|.
name|Key
argument_list|(
literal|"foo"
argument_list|,
name|r1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|k6
operator|.
name|equals
argument_list|(
name|k4
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|k4
operator|.
name|equals
argument_list|(
name|k6
argument_list|)
argument_list|)
expr_stmt|;
name|UpdateOp
operator|.
name|Key
name|k7
init|=
operator|new
name|UpdateOp
operator|.
name|Key
argument_list|(
literal|"bar"
argument_list|,
name|r1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|k7
operator|.
name|equals
argument_list|(
name|k6
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|k6
operator|.
name|equals
argument_list|(
name|k7
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

