begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|user
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|AuthInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenLoginModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenLoginModuleTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|internal
operator|.
name|SecurityProviderBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|UserAuthenticationFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|AbstractLoginModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|AuthInfoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|Authentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|ConfigurationUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|ImpersonationCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|PreAuthenticatedLogin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|callback
operator|.
name|CredentialsCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|callback
operator|.
name|RepositoryCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserAuthenticationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|util
operator|.
name|UserUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|GuestCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|AbstractLoginModule
operator|.
name|SHARED_KEY_PRE_AUTH_LOGIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|LoginModuleImplTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|USER_ID
init|=
literal|"test"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USER_ID_CASED
init|=
literal|"TeSt"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USER_PW
init|=
literal|"pw"
decl_stmt|;
specifier|private
name|User
name|user
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|user
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|ConfigurationUtil
operator|.
name|getDefaultConfiguration
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
return|;
block|}
specifier|private
name|void
name|createTestUser
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|CommitFailedException
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|UserManager
name|userManager
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|user
operator|=
name|userManager
operator|.
name|createUser
argument_list|(
name|USER_ID
argument_list|,
name|USER_PW
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|LoginException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullLogin
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
literal|null
argument_list|)
init|)
block|{
name|fail
argument_list|(
literal|"Null login should fail"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGuestLogin
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|)
init|)
block|{
name|AuthInfo
name|authInfo
init|=
name|cs
operator|.
name|getAuthInfo
argument_list|()
decl_stmt|;
name|String
name|anonymousID
init|=
name|UserUtil
operator|.
name|getAnonymousId
argument_list|(
name|getUserConfiguration
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|anonymousID
argument_list|,
name|authInfo
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|LoginException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAnonymousLogin
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|anonymousID
init|=
name|UserUtil
operator|.
name|getAnonymousId
argument_list|(
name|getUserConfiguration
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
name|UserManager
name|userMgr
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
comment|// verify initial user-content looks like expected
name|Authorizable
name|anonymous
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|anonymousID
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|anonymous
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|anonymous
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|hasProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PASSWORD
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|anonymousID
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
argument_list|)
init|)
block|{
name|fail
argument_list|(
literal|"Login with anonymousID should fail since the initial setup doesn't provide a password."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserLogin
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestUser
argument_list|()
expr_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|USER_ID
argument_list|,
name|USER_PW
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|AuthInfo
name|authInfo
init|=
name|cs
operator|.
name|getAuthInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|USER_ID
argument_list|,
name|authInfo
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAuthInfoContainsUserId
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestUser
argument_list|()
expr_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|USER_ID_CASED
argument_list|,
name|USER_PW
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|AuthInfo
name|authInfo
init|=
name|cs
operator|.
name|getAuthInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|,
name|authInfo
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserLoginIsCaseInsensitive
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestUser
argument_list|()
expr_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|USER_ID_CASED
argument_list|,
name|USER_PW
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|AuthInfo
name|authInfo
init|=
name|cs
operator|.
name|getAuthInfo
argument_list|()
decl_stmt|;
name|UserManager
name|userMgr
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|Authorizable
name|auth
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|authInfo
operator|.
name|getUserID
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|auth
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|auth
operator|.
name|getID
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|USER_ID_CASED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserLoginIsCaseInsensitive2
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestUser
argument_list|()
expr_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|USER_ID_CASED
argument_list|,
name|USER_PW
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|AuthInfo
name|authInfo
init|=
name|cs
operator|.
name|getAuthInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|,
name|authInfo
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|USER_ID_CASED
operator|.
name|equalsIgnoreCase
argument_list|(
name|authInfo
operator|.
name|getUserID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|LoginException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testUnknownUserLogin
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"unknown"
argument_list|,
literal|""
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|fail
argument_list|(
literal|"Unknown user must not be able to login"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelfImpersonation
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestUser
argument_list|()
expr_stmt|;
name|AuthInfo
name|authInfo
decl_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|USER_ID
argument_list|,
name|USER_PW
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|authInfo
operator|=
name|cs
operator|.
name|getAuthInfo
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|USER_ID
argument_list|,
name|authInfo
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SimpleCredentials
name|sc
init|=
operator|new
name|SimpleCredentials
argument_list|(
name|USER_ID
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|ImpersonationCredentials
name|ic
init|=
operator|new
name|ImpersonationCredentials
argument_list|(
name|sc
argument_list|,
name|authInfo
argument_list|)
decl_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
name|ic
argument_list|)
init|)
block|{
name|authInfo
operator|=
name|cs
operator|.
name|getAuthInfo
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|USER_ID
argument_list|,
name|authInfo
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|LoginException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInvalidImpersonation
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestUser
argument_list|()
expr_stmt|;
name|AuthInfo
name|authInfo
decl_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|USER_ID
argument_list|,
name|USER_PW
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|authInfo
operator|=
name|cs
operator|.
name|getAuthInfo
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|USER_ID
argument_list|,
name|authInfo
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ConfigurationParameters
name|config
init|=
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|String
name|adminId
init|=
name|UserUtil
operator|.
name|getAdminId
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|SimpleCredentials
name|sc
init|=
operator|new
name|SimpleCredentials
argument_list|(
name|adminId
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|ImpersonationCredentials
name|ic
init|=
operator|new
name|ImpersonationCredentials
argument_list|(
name|sc
argument_list|,
name|authInfo
argument_list|)
decl_stmt|;
comment|// test-user should not be allowed to impersonate admin -> exception expected
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
name|ic
argument_list|)
init|)
block|{
name|fail
argument_list|(
literal|"User 'test' should not be allowed to impersonate "
operator|+
name|adminId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoginWithAttributes
parameter_list|( )
throws|throws
name|Exception
block|{
name|createTestUser
argument_list|()
expr_stmt|;
name|SimpleCredentials
name|sc
init|=
operator|new
name|SimpleCredentials
argument_list|(
name|USER_ID
argument_list|,
name|USER_PW
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|sc
operator|.
name|setAttribute
argument_list|(
literal|"attr"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
name|sc
argument_list|)
init|)
block|{
name|AuthInfo
name|authInfo
init|=
name|cs
operator|.
name|getAuthInfo
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|authInfo
operator|.
name|getAttributeNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"attr"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|authInfo
operator|.
name|getAttribute
argument_list|(
literal|"attr"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImpersonationWithAttributes
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestUser
argument_list|()
expr_stmt|;
name|AuthInfo
name|authInfo
decl_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|USER_ID
argument_list|,
name|USER_PW
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|authInfo
operator|=
name|cs
operator|.
name|getAuthInfo
argument_list|()
expr_stmt|;
block|}
name|SimpleCredentials
name|sc
init|=
operator|new
name|SimpleCredentials
argument_list|(
name|USER_ID
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|sc
operator|.
name|setAttribute
argument_list|(
literal|"attr"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|ImpersonationCredentials
name|ic
init|=
operator|new
name|ImpersonationCredentials
argument_list|(
name|sc
argument_list|,
name|authInfo
argument_list|)
decl_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
name|ic
argument_list|)
init|)
block|{
name|authInfo
operator|=
name|cs
operator|.
name|getAuthInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|authInfo
operator|.
name|getAttributeNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"attr"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|authInfo
operator|.
name|getAttribute
argument_list|(
literal|"attr"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|LoginException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testImpersonationWithUnsupportedBaseCredentials
parameter_list|()
throws|throws
name|Exception
block|{
name|Credentials
name|baseCredentials
init|=
name|mock
argument_list|(
name|Credentials
operator|.
name|class
argument_list|)
decl_stmt|;
name|ImpersonationCredentials
name|ic
init|=
operator|new
name|ImpersonationCredentials
argument_list|(
name|baseCredentials
argument_list|,
operator|new
name|AuthInfoImpl
argument_list|(
name|USER_ID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
name|ic
argument_list|)
init|)
block|{
name|fail
argument_list|(
literal|"Base credentials of ImpersonationCredentials can only be SimpleCredentials."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|LoginUnsupportedCredentials
parameter_list|()
throws|throws
name|Exception
block|{
name|Credentials
name|unsupportedCredentials
init|=
name|mock
argument_list|(
name|Credentials
operator|.
name|class
argument_list|)
decl_stmt|;
name|CallbackHandler
name|cbh
init|=
name|callbacks
lambda|->
block|{
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|RepositoryCallback
condition|)
block|{
operator|(
operator|(
name|RepositoryCallback
operator|)
name|callback
operator|)
operator|.
name|setSecurityProvider
argument_list|(
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|RepositoryCallback
operator|)
name|callback
operator|)
operator|.
name|setContentRepository
argument_list|(
name|getContentRepository
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|CredentialsCallback
condition|)
block|{
operator|(
operator|(
name|CredentialsCallback
operator|)
name|callback
operator|)
operator|.
name|setCredentials
argument_list|(
name|unsupportedCredentials
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|callback
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|(
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|unsupportedCredentials
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|LoginModuleImpl
name|lm
init|=
operator|new
name|LoginModuleImpl
argument_list|()
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
name|cbh
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|()
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lm
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoginPreAuthenticated
parameter_list|()
throws|throws
name|Exception
block|{
name|Authentication
name|authentication
init|=
name|mock
argument_list|(
name|Authentication
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|authentication
operator|.
name|authenticate
argument_list|(
name|any
argument_list|(
name|Credentials
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|getMock
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|authentication
operator|.
name|getUserId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"uid"
argument_list|)
expr_stmt|;
comment|// but getUserPrincipal returns null
name|UserAuthenticationFactory
name|uaf
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|UserAuthenticationFactory
operator|.
name|class
argument_list|)
operator|.
name|getAuthentication
argument_list|(
name|any
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Root
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|authentication
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sharedState
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|sharedState
operator|.
name|put
argument_list|(
name|SHARED_KEY_PRE_AUTH_LOGIN
argument_list|,
operator|new
name|PreAuthenticatedLogin
argument_list|(
literal|"uid"
argument_list|)
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|LoginModuleImpl
name|lm
init|=
operator|new
name|LoginModuleImpl
argument_list|()
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
name|uaf
argument_list|)
argument_list|,
name|sharedState
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// no other public credentials than the AuthInfo
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|subject
operator|.
name|getPublicCredentials
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify AuthInfo
name|Set
argument_list|<
name|AuthInfo
argument_list|>
name|authInfos
init|=
name|subject
operator|.
name|getPublicCredentials
argument_list|(
name|AuthInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|authInfos
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"uid"
argument_list|,
name|authInfos
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoginPreAuthenticatedWithReadOnlySubject
parameter_list|()
throws|throws
name|Exception
block|{
name|Authentication
name|authentication
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|Authentication
operator|.
name|class
argument_list|)
operator|.
name|authenticate
argument_list|(
name|any
argument_list|(
name|Credentials
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|UserAuthenticationFactory
name|uaf
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|UserAuthenticationFactory
operator|.
name|class
argument_list|)
operator|.
name|getAuthentication
argument_list|(
name|any
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Root
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|authentication
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sharedState
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|sharedState
operator|.
name|put
argument_list|(
name|SHARED_KEY_PRE_AUTH_LOGIN
argument_list|,
operator|new
name|PreAuthenticatedLogin
argument_list|(
literal|"uid"
argument_list|)
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|subject
operator|.
name|setReadOnly
argument_list|()
expr_stmt|;
name|LoginModuleImpl
name|lm
init|=
operator|new
name|LoginModuleImpl
argument_list|()
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
name|uaf
argument_list|)
argument_list|,
name|sharedState
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subject
operator|.
name|getPublicCredentials
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullUserAuthentication
parameter_list|()
throws|throws
name|Exception
block|{
name|LoginModuleImpl
name|loginModule
init|=
operator|new
name|LoginModuleImpl
argument_list|()
decl_stmt|;
name|CallbackHandler
name|cbh
init|=
operator|new
name|TestCallbackHandler
argument_list|(
name|mock
argument_list|(
name|UserAuthenticationFactory
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|loginModule
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
name|cbh
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|()
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|loginModule
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|loginModule
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingUserAuthenticationFactory
parameter_list|()
throws|throws
name|Exception
block|{
name|CallbackHandler
name|cbh
init|=
name|callbacks
lambda|->
block|{
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|RepositoryCallback
condition|)
block|{
name|UserConfiguration
name|uc
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|SecurityProvider
name|sp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
operator|.
name|getConfiguration
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|uc
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
operator|(
operator|(
name|RepositoryCallback
operator|)
name|callback
operator|)
operator|.
name|setSecurityProvider
argument_list|(
name|sp
argument_list|)
expr_stmt|;
operator|(
operator|(
name|RepositoryCallback
operator|)
name|callback
operator|)
operator|.
name|setContentRepository
argument_list|(
name|getContentRepository
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|callback
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|LoginModuleImpl
name|loginModule
init|=
operator|new
name|LoginModuleImpl
argument_list|()
decl_stmt|;
name|loginModule
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
name|cbh
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|()
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|loginModule
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|loginModule
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingSecurityProviderGuestLogin
parameter_list|()
throws|throws
name|Exception
block|{
name|CallbackHandler
name|cbh
init|=
name|callbacks
lambda|->
block|{
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|RepositoryCallback
condition|)
block|{
operator|(
operator|(
name|RepositoryCallback
operator|)
name|callback
operator|)
operator|.
name|setSecurityProvider
argument_list|(
literal|null
argument_list|)
expr_stmt|;
operator|(
operator|(
name|RepositoryCallback
operator|)
name|callback
operator|)
operator|.
name|setContentRepository
argument_list|(
name|getContentRepository
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|callback
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|LoginModuleImpl
name|loginModule
init|=
operator|new
name|LoginModuleImpl
argument_list|()
decl_stmt|;
name|loginModule
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|(
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
argument_list|,
name|cbh
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|()
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|loginModule
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|loginModule
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingSecurityProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|CallbackHandler
name|cbh
init|=
name|callbacks
lambda|->
block|{
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|RepositoryCallback
condition|)
block|{
operator|(
operator|(
name|RepositoryCallback
operator|)
name|callback
operator|)
operator|.
name|setSecurityProvider
argument_list|(
literal|null
argument_list|)
expr_stmt|;
operator|(
operator|(
name|RepositoryCallback
operator|)
name|callback
operator|)
operator|.
name|setContentRepository
argument_list|(
name|getContentRepository
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|callback
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|LoginModuleImpl
name|loginModule
init|=
operator|new
name|LoginModuleImpl
argument_list|()
decl_stmt|;
name|loginModule
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
name|cbh
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|()
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|loginModule
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|loginModule
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|CallbackHandler
name|cbh
init|=
name|callbacks
lambda|->
block|{
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|RepositoryCallback
condition|)
block|{
operator|(
operator|(
name|RepositoryCallback
operator|)
name|callback
operator|)
operator|.
name|setSecurityProvider
argument_list|(
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|RepositoryCallback
operator|)
name|callback
operator|)
operator|.
name|setContentRepository
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|callback
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|LoginModuleImpl
name|loginModule
init|=
operator|new
name|LoginModuleImpl
argument_list|()
decl_stmt|;
name|loginModule
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
name|cbh
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|()
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|loginModule
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|loginModule
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingCallbackHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|LoginModuleImpl
name|loginModule
init|=
operator|new
name|LoginModuleImpl
argument_list|()
decl_stmt|;
name|loginModule
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|()
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|loginModule
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|loginModule
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoginCustomUserAuthenticationFactory
parameter_list|()
throws|throws
name|Exception
block|{
name|UserAuthenticationFactory
name|factory
init|=
parameter_list|(
name|configuration
parameter_list|,
name|root
parameter_list|,
name|userId
parameter_list|)
lambda|->
operator|new
name|Authentication
argument_list|()
block|{
block|@Override             public boolean authenticate(@Nullable Credentials credentials
init|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|getUserId
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
empty_stmt|;
name|CallbackHandler
name|cbh
init|=
operator|new
name|TestCallbackHandler
argument_list|(
name|factory
argument_list|)
decl_stmt|;
name|SimpleCredentials
name|creds
init|=
operator|new
name|SimpleCredentials
argument_list|(
literal|"loginId"
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|(
literal|false
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|creds
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|()
argument_list|)
decl_stmt|;
name|LoginModuleImpl
name|loginModule
init|=
operator|new
name|LoginModuleImpl
argument_list|()
decl_stmt|;
name|loginModule
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
name|cbh
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|()
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loginModule
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loginModule
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// authinfo falls back to loginId because Authentication.getUserId returned null
name|AuthInfo
name|authInfo
init|=
name|subject
operator|.
name|getPublicCredentials
argument_list|(
name|AuthInfo
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"loginId"
argument_list|,
name|authInfo
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_class

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testMissingUserId
parameter_list|()
throws|throws
name|Exception
block|{
name|UserAuthenticationFactory
name|factory
init|=
parameter_list|(
name|configuration
parameter_list|,
name|root
parameter_list|,
name|userId
parameter_list|)
lambda|->
operator|new
name|Authentication
argument_list|()
block|{
block|@Override             public boolean authenticate(@Nullable Credentials credentials
init|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|getUserId
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|CallbackHandler
name|cbh
init|=
operator|new
name|TestCallbackHandler
argument_list|(
name|factory
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|(
literal|false
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|()
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|LoginModuleImpl
name|loginModule
init|=
operator|new
name|LoginModuleImpl
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|loginModule
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
name|cbh
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|()
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|loginModule
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|loginModule
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|AuthInfo
name|authInfo
init|=
name|subject
operator|.
name|getPublicCredentials
argument_list|(
name|AuthInfo
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|assertNull
argument_list|(
name|authInfo
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      @
name|Test
specifier|public
name|void
name|testCommitReadOnlySubject
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|principal
init|=
operator|new
name|PrincipalImpl
argument_list|(
literal|"subjetPrincipal"
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|(
literal|true
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|principal
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|shared
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|shared
operator|.
name|put
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
operator|new
name|SimpleCredentials
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LoginModuleImpl
name|loginModule
init|=
operator|new
name|LoginModuleImpl
argument_list|()
decl_stmt|;
name|loginModule
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
operator|new
name|UserAuthenticationFactoryImpl
argument_list|()
argument_list|)
argument_list|,
name|shared
argument_list|,
name|Maps
operator|.
name|newHashMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loginModule
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loginModule
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// auth-Info field must not be cleared by successful commit
name|Field
name|f
init|=
name|LoginModuleImpl
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"authInfo"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|AuthInfo
name|ai
init|=
operator|(
name|AuthInfo
operator|)
name|f
operator|.
name|get
argument_list|(
name|loginModule
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ai
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ai
operator|.
name|getPrincipals
argument_list|()
operator|.
name|contains
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ai
operator|.
name|getPrincipals
argument_list|()
operator|.
name|contains
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
specifier|private
class|class
name|TestCallbackHandler
implements|implements
name|CallbackHandler
block|{
specifier|private
specifier|final
name|SecurityProvider
name|sp
decl_stmt|;
specifier|private
name|TestCallbackHandler
parameter_list|(
annotation|@
name|NotNull
name|UserAuthenticationFactory
name|authenticationFactory
parameter_list|)
block|{
name|ConfigurationParameters
name|params
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserConfiguration
operator|.
name|NAME
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|PARAM_USER_AUTHENTICATION_FACTORY
argument_list|,
name|authenticationFactory
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|sp
operator|=
name|SecurityProviderBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|with
argument_list|(
name|params
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|UnsupportedCallbackException
block|{
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|RepositoryCallback
condition|)
block|{
operator|(
operator|(
name|RepositoryCallback
operator|)
name|callback
operator|)
operator|.
name|setSecurityProvider
argument_list|(
name|sp
argument_list|)
expr_stmt|;
operator|(
operator|(
name|RepositoryCallback
operator|)
name|callback
operator|)
operator|.
name|setContentRepository
argument_list|(
name|getContentRepository
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|callback
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

unit|}
end_unit

