begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|MemoryNodeBuilderTest
block|{
specifier|private
name|NodeState
name|base
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"a"
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"b"
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"c"
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
operator|.
name|child
argument_list|(
literal|"q"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|base
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnectOnAddProperty
parameter_list|()
block|{
name|NodeBuilder
name|root
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|childA
init|=
name|root
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|childB
init|=
name|root
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|childA
operator|.
name|hasProperty
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|childB
operator|.
name|setProperty
argument_list|(
literal|"test"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|childA
operator|.
name|hasProperty
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnectOnUpdateProperty
parameter_list|()
block|{
name|NodeBuilder
name|root
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|childA
init|=
name|root
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|childB
init|=
name|root
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|childB
operator|.
name|setProperty
argument_list|(
literal|"test"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|childA
operator|.
name|setProperty
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|childA
operator|.
name|getProperty
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|childB
operator|.
name|getProperty
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnectOnRemoveProperty
parameter_list|()
block|{
name|NodeBuilder
name|root
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|childA
init|=
name|root
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|childB
init|=
name|root
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|childB
operator|.
name|setProperty
argument_list|(
literal|"test"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|childA
operator|.
name|removeProperty
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|childA
operator|.
name|hasProperty
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|childB
operator|.
name|hasProperty
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|childA
operator|.
name|setProperty
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|childA
operator|.
name|getProperty
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|childB
operator|.
name|getProperty
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnectOnAddNode
parameter_list|()
block|{
name|NodeBuilder
name|root
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|childA
init|=
name|root
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|childB
init|=
name|root
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|childA
operator|.
name|hasChildNode
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|childB
operator|.
name|hasChildNode
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|childB
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|childA
operator|.
name|hasChildNode
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|childB
operator|.
name|hasChildNode
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteOnRemoveNode
parameter_list|()
block|{
for|for
control|(
name|String
name|name
range|:
operator|new
name|String
index|[]
block|{
literal|"x"
block|,
literal|"new"
block|}
control|)
block|{
name|NodeBuilder
name|root
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|child
init|=
name|root
operator|.
name|child
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|root
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
name|child
operator|.
name|setProperty
argument_list|(
literal|"q"
argument_list|,
literal|"w"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|root
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|child
operator|.
name|getChildNodeCount
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// reconnect!
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddRemovedNodeAgain
parameter_list|()
block|{
name|NodeBuilder
name|root
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|root
operator|.
name|getChildNode
argument_list|(
literal|"x"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|NodeBuilder
name|x
init|=
name|root
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|x
operator|.
name|child
argument_list|(
literal|"q"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|x
operator|.
name|hasChildNode
argument_list|(
literal|"q"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReset
parameter_list|()
block|{
name|NodeBuilder
name|root
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|child
init|=
name|root
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|child
operator|.
name|child
argument_list|(
literal|"new"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|child
operator|.
name|hasChildNode
argument_list|(
literal|"new"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"new"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MemoryNodeBuilder
operator|)
name|root
operator|)
operator|.
name|reset
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|child
operator|.
name|hasChildNode
argument_list|(
literal|"new"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"new"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReset2
parameter_list|()
block|{
name|NodeBuilder
name|root
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|x
init|=
name|root
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|x
operator|.
name|child
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MemoryNodeBuilder
operator|)
name|root
operator|)
operator|.
name|reset
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|hasChildNode
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|x
operator|.
name|hasChildNode
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnmodifiedEqualsBase
parameter_list|()
block|{
name|NodeBuilder
name|root
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|x
init|=
name|root
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|x
operator|.
name|getBaseState
argument_list|()
argument_list|,
name|x
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|transitiveRemove
parameter_list|()
block|{
name|NodeBuilder
name|root
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|x
init|=
name|root
operator|.
name|getChildNode
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|q
init|=
name|x
operator|.
name|getChildNode
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|x
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|getChildNode
argument_list|(
literal|"x"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|q
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|x
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExistingStatus
parameter_list|()
block|{
name|NodeBuilder
name|root
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|x
init|=
name|root
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|x
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|x
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|x
operator|.
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModifiedStatus
parameter_list|()
block|{
name|NodeBuilder
name|root
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|x
init|=
name|root
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|x
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"pValue"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|x
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|x
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|x
operator|.
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovedStatus
parameter_list|()
block|{
name|NodeBuilder
name|root
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|x
init|=
name|root
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|root
operator|.
name|getChildNode
argument_list|(
literal|"x"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|x
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|x
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|x
operator|.
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNewStatus
parameter_list|()
block|{
name|NodeBuilder
name|root
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|n
init|=
name|root
operator|.
name|child
argument_list|(
literal|"n"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|n
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|n
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|n
operator|.
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getExistingChildTest
parameter_list|()
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|x
init|=
name|rootBuilder
operator|.
name|getChildNode
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|x
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|x
operator|.
name|getNodeState
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getNonExistingChildTest
parameter_list|()
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|any
init|=
name|rootBuilder
operator|.
name|getChildNode
argument_list|(
literal|"any"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|any
operator|.
name|getChildNode
argument_list|(
literal|"other"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|any
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|any
operator|.
name|setChildNode
argument_list|(
literal|"any"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addExistingChildTest
parameter_list|()
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|x
init|=
name|rootBuilder
operator|.
name|setChildNode
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|x
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|x
operator|.
name|getBaseState
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addNewChildTest
parameter_list|()
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|x
init|=
name|rootBuilder
operator|.
name|setChildNode
argument_list|(
literal|"any"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|x
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|x
operator|.
name|getNodeState
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|existingChildTest
parameter_list|()
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|x
init|=
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|x
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|x
operator|.
name|getBaseState
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|newChildTest
parameter_list|()
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|x
init|=
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"any"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|x
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|x
operator|.
name|getNodeState
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setNodeTest
parameter_list|()
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// +"/a":{"c":{"c"="cValue"}}
name|rootBuilder
operator|.
name|setChildNode
argument_list|(
literal|"a"
argument_list|,
name|createBC
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|c
init|=
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|hasProperty
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"c2"
argument_list|,
literal|"c2Value"
argument_list|)
expr_stmt|;
name|c
operator|=
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|hasProperty
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|hasProperty
argument_list|(
literal|"c2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMove
parameter_list|()
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rootBuilder
operator|.
name|getChildNode
argument_list|(
literal|"y"
argument_list|)
operator|.
name|moveTo
argument_list|(
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
argument_list|,
literal|"yy"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|newRoot
init|=
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|newRoot
operator|.
name|hasChildNode
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newRoot
operator|.
name|hasChildNode
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newRoot
operator|.
name|getChildNode
argument_list|(
literal|"x"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"q"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newRoot
operator|.
name|getChildNode
argument_list|(
literal|"x"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"yy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRename
parameter_list|()
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rootBuilder
operator|.
name|getChildNode
argument_list|(
literal|"y"
argument_list|)
operator|.
name|moveTo
argument_list|(
name|rootBuilder
argument_list|,
literal|"yy"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|newRoot
init|=
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|newRoot
operator|.
name|hasChildNode
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newRoot
operator|.
name|hasChildNode
argument_list|(
literal|"yy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveToSelf
parameter_list|()
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|rootBuilder
operator|.
name|getChildNode
argument_list|(
literal|"y"
argument_list|)
operator|.
name|moveTo
argument_list|(
name|rootBuilder
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|newRoot
init|=
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|newRoot
operator|.
name|hasChildNode
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveToDescendant
parameter_list|()
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rootBuilder
operator|.
name|getChildNode
argument_list|(
literal|"x"
argument_list|)
operator|.
name|moveTo
argument_list|(
name|rootBuilder
operator|.
name|getChildNode
argument_list|(
literal|"x"
argument_list|)
argument_list|,
literal|"xx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rootBuilder
operator|.
name|hasChildNode
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCopy
parameter_list|()
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rootBuilder
operator|.
name|getChildNode
argument_list|(
literal|"y"
argument_list|)
operator|.
name|copyTo
argument_list|(
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
argument_list|,
literal|"yy"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|newRoot
init|=
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|newRoot
operator|.
name|hasChildNode
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newRoot
operator|.
name|hasChildNode
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newRoot
operator|.
name|getChildNode
argument_list|(
literal|"x"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"q"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newRoot
operator|.
name|getChildNode
argument_list|(
literal|"x"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"yy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDuplicate
parameter_list|()
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rootBuilder
operator|.
name|getChildNode
argument_list|(
literal|"y"
argument_list|)
operator|.
name|copyTo
argument_list|(
name|rootBuilder
argument_list|,
literal|"yy"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|newRoot
init|=
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|newRoot
operator|.
name|hasChildNode
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newRoot
operator|.
name|hasChildNode
argument_list|(
literal|"yy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCopyToSelf
parameter_list|()
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rootBuilder
operator|.
name|getChildNode
argument_list|(
literal|"y"
argument_list|)
operator|.
name|copyTo
argument_list|(
name|rootBuilder
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCopyToDescendant
parameter_list|()
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rootBuilder
operator|.
name|getChildNode
argument_list|(
literal|"x"
argument_list|)
operator|.
name|copyTo
argument_list|(
name|rootBuilder
operator|.
name|getChildNode
argument_list|(
literal|"x"
argument_list|)
argument_list|,
literal|"xx"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|newRoot
init|=
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rootBuilder
operator|.
name|hasChildNode
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rootBuilder
operator|.
name|getChildNode
argument_list|(
literal|"x"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"xx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|assertion_OAK781
parameter_list|()
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"b"
argument_list|,
name|createBC
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|r
init|=
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|a
init|=
name|r
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|NodeState
name|b
init|=
name|a
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|NodeState
name|c
init|=
name|b
operator|.
name|getChildNode
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|b
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// No assertion must fail in .child("c")
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|rootBuilder
operator|=
operator|new
name|MemoryNodeBuilder
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|// No assertion must fail in .child("c")
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|modifyChildNodeOfNonExistingNode
parameter_list|()
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// +"/a":{"b":{"c":{"c"="cValue"}}} where b.exists() == false
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"b"
argument_list|,
name|createBC
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|r
init|=
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|a
init|=
name|r
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|NodeState
name|b
init|=
name|a
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|NodeState
name|c
init|=
name|b
operator|.
name|getChildNode
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|b
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|hasProperty
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"c2"
argument_list|,
literal|"c2Value"
argument_list|)
expr_stmt|;
name|r
operator|=
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|a
operator|=
name|r
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|c
operator|=
name|b
operator|.
name|getChildNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|b
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Node c is modified
name|assertTrue
argument_list|(
name|c
operator|.
name|hasProperty
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|hasProperty
argument_list|(
literal|"c2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shadowNonExistingNode1
parameter_list|()
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// +"/a":{"b":{"c":{"c"="cValue"}}} where b.exists() == false
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"b"
argument_list|,
name|createBC
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|r
init|=
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|a
init|=
name|r
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|NodeState
name|b
init|=
name|a
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|NodeState
name|c
init|=
name|b
operator|.
name|getChildNode
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|b
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|hasProperty
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"b"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"c2"
argument_list|,
literal|"c2Value"
argument_list|)
expr_stmt|;
name|r
operator|=
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|a
operator|=
name|r
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|c
operator|=
name|b
operator|.
name|getChildNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|b
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// node b is shadowed by above child("b")
name|assertTrue
argument_list|(
name|c
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// node c is shadowed by subtree b
name|assertFalse
argument_list|(
name|c
operator|.
name|hasProperty
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|hasProperty
argument_list|(
literal|"c2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shadowNonExistingNode2
parameter_list|()
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// +"/a":{"b":{"c":{"c":"cValue"}}} where b.exists() == false
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"b"
argument_list|,
name|createBC
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|r
init|=
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|a
init|=
name|r
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|NodeState
name|b
init|=
name|a
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|NodeState
name|c
init|=
name|b
operator|.
name|getChildNode
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|b
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|hasProperty
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"c2"
argument_list|,
literal|"c2Value"
argument_list|)
expr_stmt|;
name|r
operator|=
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|a
operator|=
name|r
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|c
operator|=
name|b
operator|.
name|getChildNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|b
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// node b is shadowed by above child("b")
name|assertTrue
argument_list|(
name|c
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// node c is shadowed by subtree b
name|assertFalse
argument_list|(
name|c
operator|.
name|hasProperty
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|hasProperty
argument_list|(
literal|"c2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|navigateNonExistingNode
parameter_list|()
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// +"/a":{"b":{"c":{"c":"cValue"}}} where b.exists() == false
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"b"
argument_list|,
name|createBC
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|r
init|=
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|a
init|=
name|r
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|NodeState
name|b
init|=
name|a
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|NodeState
name|c
init|=
name|b
operator|.
name|getChildNode
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|b
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|hasProperty
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeBuilder
name|aBuilder
init|=
name|rootBuilder
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|bBuilder
init|=
name|aBuilder
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|cBuilder
init|=
name|bBuilder
operator|.
name|getChildNode
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|aBuilder
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cBuilder
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|cBuilder
operator|.
name|setProperty
argument_list|(
literal|"c2"
argument_list|,
literal|"c2Value"
argument_list|)
expr_stmt|;
name|r
operator|=
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|a
operator|=
name|r
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|c
operator|=
name|b
operator|.
name|getChildNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|b
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|hasProperty
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|hasProperty
argument_list|(
literal|"c2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeRoot
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|base
operator|.
name|builder
argument_list|()
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|NodeState
name|createBC
parameter_list|(
specifier|final
name|boolean
name|exists
parameter_list|)
block|{
specifier|final
name|NodeState
name|C
init|=
operator|new
name|MemoryNodeBuilder
argument_list|(
name|EmptyNodeState
operator|.
name|EMPTY_NODE
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"c"
argument_list|,
literal|"cValue"
argument_list|)
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
return|return
operator|new
name|AbstractNodeState
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
name|exists
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
literal|"c"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|C
return|;
block|}
else|else
block|{
return|return
name|EmptyNodeState
operator|.
name|MISSING_NODE
return|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|()
block|{
if|if
condition|(
name|exists
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|MemoryChildNodeEntry
argument_list|(
literal|"c"
argument_list|,
name|C
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeBuilder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|MemoryNodeBuilder
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

