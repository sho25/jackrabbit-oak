begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
operator|.
name|toStringHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|DEEP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|NODE_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|NO_LOCAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|ReadOnlyNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * TODO document  */
end_comment

begin_class
class|class
name|EventFilter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EventFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|eventTypes
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|deep
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|uuid
decl_stmt|;
comment|// TODO implement filtering by uuid
specifier|private
specifier|final
name|String
index|[]
name|nodeTypeNames
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|noLocal
decl_stmt|;
comment|// TODO implement filtering by noLocal
specifier|public
name|EventFilter
parameter_list|(
name|int
name|eventTypes
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|deep
parameter_list|,
name|String
index|[]
name|uuid
parameter_list|,
name|String
index|[]
name|nodeTypeName
parameter_list|,
name|boolean
name|noLocal
parameter_list|)
block|{
name|this
operator|.
name|eventTypes
operator|=
name|eventTypes
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|deep
operator|=
name|deep
expr_stmt|;
name|this
operator|.
name|uuid
operator|=
name|uuid
expr_stmt|;
name|this
operator|.
name|nodeTypeNames
operator|=
name|nodeTypeName
expr_stmt|;
name|this
operator|.
name|noLocal
operator|=
name|noLocal
expr_stmt|;
block|}
specifier|public
name|boolean
name|include
parameter_list|(
name|int
name|eventType
parameter_list|,
name|String
name|path
parameter_list|,
annotation|@
name|Nullable
name|String
index|[]
name|associatedType
parameter_list|,
name|ReadOnlyNodeTypeManager
name|ntMgr
parameter_list|)
block|{
return|return
name|includeEventType
argument_list|(
name|eventType
argument_list|)
operator|&&
name|includePath
argument_list|(
name|path
argument_list|)
operator|&&
name|includeNodeType
argument_list|(
name|associatedType
argument_list|,
name|ntMgr
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toStringHelper
argument_list|(
name|this
argument_list|)
operator|.
name|add
argument_list|(
literal|"types"
argument_list|,
name|eventTypes
argument_list|)
operator|.
name|add
argument_list|(
literal|"path"
argument_list|,
name|path
argument_list|)
operator|.
name|add
argument_list|(
literal|"deep"
argument_list|,
name|deep
argument_list|)
operator|.
name|add
argument_list|(
literal|"uuids"
argument_list|,
name|uuid
argument_list|)
operator|.
name|add
argument_list|(
literal|"node types"
argument_list|,
name|nodeTypeNames
argument_list|)
operator|.
name|add
argument_list|(
literal|"noLocal"
argument_list|,
name|noLocal
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//-----------------------------< internal>---------------------------------
specifier|private
name|boolean
name|includeEventType
parameter_list|(
name|int
name|eventType
parameter_list|)
block|{
return|return
operator|(
name|this
operator|.
name|eventTypes
operator|&
name|eventType
operator|)
operator|!=
literal|0
return|;
block|}
specifier|private
name|boolean
name|includePath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|String
name|app
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|boolean
name|equalPaths
init|=
name|this
operator|.
name|path
operator|.
name|equals
argument_list|(
name|app
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|deep
operator|&&
operator|!
name|equalPaths
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|deep
operator|&&
operator|!
operator|(
name|PathUtils
operator|.
name|isAncestor
argument_list|(
name|this
operator|.
name|path
argument_list|,
name|app
argument_list|)
operator|||
name|equalPaths
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|includeNodeType
parameter_list|(
name|String
index|[]
name|associatedParentTypes
parameter_list|,
name|ReadOnlyNodeTypeManager
name|ntMgr
parameter_list|)
block|{
if|if
condition|(
name|nodeTypeNames
operator|==
literal|null
operator|||
name|associatedParentTypes
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|String
name|type
range|:
name|nodeTypeNames
control|)
block|{
for|for
control|(
name|String
name|apt
range|:
name|associatedParentTypes
control|)
block|{
if|if
condition|(
name|ntMgr
operator|.
name|isNodeType
argument_list|(
name|apt
argument_list|,
name|type
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
name|void
name|persist
parameter_list|(
name|Tree
name|tree
parameter_list|)
block|{
name|tree
operator|.
name|setProperty
argument_list|(
name|TYPE
argument_list|,
name|eventTypes
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
name|PATH
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
name|DEEP
argument_list|,
name|deep
argument_list|)
expr_stmt|;
if|if
condition|(
name|uuid
operator|!=
literal|null
condition|)
block|{
name|tree
operator|.
name|setProperty
argument_list|(
name|UUID
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|uuid
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeTypeNames
operator|!=
literal|null
condition|)
block|{
name|tree
operator|.
name|setProperty
argument_list|(
name|NODE_TYPES
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|nodeTypeNames
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
block|}
name|tree
operator|.
name|setProperty
argument_list|(
name|NO_LOCAL
argument_list|,
name|noLocal
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

