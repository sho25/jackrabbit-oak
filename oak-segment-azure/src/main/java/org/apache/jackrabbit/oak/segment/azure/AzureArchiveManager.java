begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlobListingDetails
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobDirectory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlockBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CopyStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentArchiveManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|FileStoreMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|IOMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentArchiveReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentArchiveWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|AzureUtilities
operator|.
name|getName
import|;
end_import

begin_class
specifier|public
class|class
name|AzureArchiveManager
implements|implements
name|SegmentArchiveManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AzureSegmentArchiveReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CloudBlobDirectory
name|cloudBlobDirectory
decl_stmt|;
specifier|private
specifier|final
name|IOMonitor
name|ioMonitor
decl_stmt|;
specifier|private
specifier|final
name|FileStoreMonitor
name|monitor
decl_stmt|;
specifier|public
name|AzureArchiveManager
parameter_list|(
name|CloudBlobDirectory
name|cloudBlobDirectory
parameter_list|,
name|IOMonitor
name|ioMonitor
parameter_list|,
name|FileStoreMonitor
name|fileStoreMonitor
parameter_list|)
block|{
name|this
operator|.
name|cloudBlobDirectory
operator|=
name|cloudBlobDirectory
expr_stmt|;
name|this
operator|.
name|ioMonitor
operator|=
name|ioMonitor
expr_stmt|;
name|this
operator|.
name|monitor
operator|=
name|fileStoreMonitor
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listArchives
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|cloudBlobDirectory
operator|.
name|listBlobs
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|BlobListingDetails
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|filter
argument_list|(
name|i
lambda|->
name|i
operator|instanceof
name|CloudBlobDirectory
argument_list|)
operator|.
name|map
argument_list|(
name|i
lambda|->
operator|(
name|CloudBlobDirectory
operator|)
name|i
argument_list|)
operator|.
name|filter
argument_list|(
name|i
lambda|->
name|getName
argument_list|(
name|i
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|".tar"
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|CloudBlobDirectory
operator|::
name|getPrefix
argument_list|)
operator|.
name|map
argument_list|(
name|Paths
operator|::
name|get
argument_list|)
operator|.
name|map
argument_list|(
name|Path
operator|::
name|getFileName
argument_list|)
operator|.
name|map
argument_list|(
name|Path
operator|::
name|toString
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
decl||
name|StorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SegmentArchiveReader
name|open
parameter_list|(
name|String
name|archiveName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|CloudBlobDirectory
name|archiveDirectory
init|=
name|getDirectory
argument_list|(
name|archiveName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|archiveDirectory
operator|.
name|getBlockBlobReference
argument_list|(
literal|"closed"
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The archive "
operator|+
name|archiveName
operator|+
literal|" hasn't been closed correctly."
argument_list|)
throw|;
block|}
return|return
operator|new
name|AzureSegmentArchiveReader
argument_list|(
name|archiveDirectory
argument_list|,
name|ioMonitor
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|StorageException
decl||
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SegmentArchiveReader
name|forceOpen
parameter_list|(
name|String
name|archiveName
parameter_list|)
throws|throws
name|IOException
block|{
name|CloudBlobDirectory
name|archiveDirectory
init|=
name|getDirectory
argument_list|(
name|archiveName
argument_list|)
decl_stmt|;
return|return
operator|new
name|AzureSegmentArchiveReader
argument_list|(
name|archiveDirectory
argument_list|,
name|ioMonitor
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SegmentArchiveWriter
name|create
parameter_list|(
name|String
name|archiveName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|AzureSegmentArchiveWriter
argument_list|(
name|getDirectory
argument_list|(
name|archiveName
argument_list|)
argument_list|,
name|ioMonitor
argument_list|,
name|monitor
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|delete
parameter_list|(
name|String
name|archiveName
parameter_list|)
block|{
try|try
block|{
name|getBlobs
argument_list|(
name|archiveName
argument_list|)
operator|.
name|forEach
argument_list|(
name|cloudBlob
lambda|->
block|{
try|try
block|{
name|cloudBlob
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't delete segment {}"
argument_list|,
name|cloudBlob
operator|.
name|getUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't delete archive {}"
argument_list|,
name|archiveName
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|renameTo
parameter_list|(
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
block|{
try|try
block|{
name|CloudBlobDirectory
name|targetDirectory
init|=
name|getDirectory
argument_list|(
name|to
argument_list|)
decl_stmt|;
name|getBlobs
argument_list|(
name|from
argument_list|)
operator|.
name|forEach
argument_list|(
name|cloudBlob
lambda|->
block|{
try|try
block|{
name|renameBlob
argument_list|(
name|cloudBlob
argument_list|,
name|targetDirectory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't rename segment {}"
argument_list|,
name|cloudBlob
operator|.
name|getUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't rename archive {} to {}"
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|copyFile
parameter_list|(
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
throws|throws
name|IOException
block|{
name|CloudBlobDirectory
name|targetDirectory
init|=
name|getDirectory
argument_list|(
name|to
argument_list|)
decl_stmt|;
name|getBlobs
argument_list|(
name|from
argument_list|)
operator|.
name|forEach
argument_list|(
name|cloudBlob
lambda|->
block|{
try|try
block|{
name|copyBlob
argument_list|(
name|cloudBlob
argument_list|,
name|targetDirectory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't copy segment {}"
argument_list|,
name|cloudBlob
operator|.
name|getUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|(
name|String
name|archiveName
parameter_list|)
block|{
try|try
block|{
return|return
name|getBlobs
argument_list|(
name|archiveName
argument_list|)
operator|.
name|findAny
argument_list|()
operator|.
name|isPresent
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't check the existence of {}"
argument_list|,
name|archiveName
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|recoverEntries
parameter_list|(
name|String
name|archiveName
parameter_list|,
name|LinkedHashMap
argument_list|<
name|UUID
argument_list|,
name|byte
index|[]
argument_list|>
name|entries
parameter_list|)
throws|throws
name|IOException
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|AzureUtilities
operator|.
name|SEGMENT_FILE_NAME_PATTERN
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RecoveredEntry
argument_list|>
name|entryList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CloudBlob
name|b
range|:
name|getBlobList
argument_list|(
name|archiveName
argument_list|)
control|)
block|{
name|String
name|name
init|=
name|getName
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|int
name|position
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|UUID
name|uuid
init|=
name|UUID
operator|.
name|fromString
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|length
init|=
name|b
operator|.
name|getProperties
argument_list|()
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|length
index|]
decl_stmt|;
try|try
block|{
name|b
operator|.
name|downloadToByteArray
argument_list|(
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|entryList
operator|.
name|add
argument_list|(
operator|new
name|RecoveredEntry
argument_list|(
name|position
argument_list|,
name|uuid
argument_list|,
name|data
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|entryList
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RecoveredEntry
name|e
range|:
name|entryList
control|)
block|{
if|if
condition|(
name|e
operator|.
name|position
operator|!=
name|i
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Missing entry {}.??? when recovering {}. No more segments will be read."
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%04X"
argument_list|,
name|i
argument_list|)
argument_list|,
name|archiveName
argument_list|)
expr_stmt|;
break|break;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Recovering segment {}/{}"
argument_list|,
name|archiveName
argument_list|,
name|e
operator|.
name|fileName
argument_list|)
expr_stmt|;
name|entries
operator|.
name|put
argument_list|(
name|e
operator|.
name|uuid
argument_list|,
name|e
operator|.
name|data
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
specifier|private
name|CloudBlobDirectory
name|getDirectory
parameter_list|(
name|String
name|archiveName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|cloudBlobDirectory
operator|.
name|getDirectoryReference
argument_list|(
name|archiveName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Stream
argument_list|<
name|CloudBlob
argument_list|>
name|getBlobs
parameter_list|(
name|String
name|archiveName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|AzureUtilities
operator|.
name|getBlobs
argument_list|(
name|getDirectory
argument_list|(
name|archiveName
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|CloudBlob
argument_list|>
name|getBlobList
parameter_list|(
name|String
name|archiveName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBlobs
argument_list|(
name|archiveName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|renameBlob
parameter_list|(
name|CloudBlob
name|blob
parameter_list|,
name|CloudBlobDirectory
name|newParent
parameter_list|)
throws|throws
name|IOException
block|{
name|copyBlob
argument_list|(
name|blob
argument_list|,
name|newParent
argument_list|)
expr_stmt|;
try|try
block|{
name|blob
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|copyBlob
parameter_list|(
name|CloudBlob
name|blob
parameter_list|,
name|CloudBlobDirectory
name|newParent
parameter_list|)
throws|throws
name|IOException
block|{
name|checkArgument
argument_list|(
name|blob
operator|instanceof
name|CloudBlockBlob
argument_list|,
literal|"Only page blobs are supported for the rename"
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|blobName
init|=
name|getName
argument_list|(
name|blob
argument_list|)
decl_stmt|;
name|CloudBlockBlob
name|newBlob
init|=
name|newParent
operator|.
name|getBlockBlobReference
argument_list|(
name|blobName
argument_list|)
decl_stmt|;
name|newBlob
operator|.
name|startCopy
argument_list|(
name|blob
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|isStatusPending
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|isStatusPending
condition|)
block|{
name|newBlob
operator|.
name|downloadAttributes
argument_list|()
expr_stmt|;
if|if
condition|(
name|newBlob
operator|.
name|getCopyState
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|CopyStatus
operator|.
name|PENDING
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|isStatusPending
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|CopyStatus
name|finalStatus
init|=
name|newBlob
operator|.
name|getCopyState
argument_list|()
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|newBlob
operator|.
name|getCopyState
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|!=
name|CopyStatus
operator|.
name|SUCCESS
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid copy status for "
operator|+
name|blob
operator|.
name|getUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|": "
operator|+
name|finalStatus
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|StorageException
decl||
name|InterruptedException
decl||
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|RecoveredEntry
implements|implements
name|Comparable
argument_list|<
name|RecoveredEntry
argument_list|>
block|{
specifier|private
specifier|final
name|byte
index|[]
name|data
decl_stmt|;
specifier|private
specifier|final
name|UUID
name|uuid
decl_stmt|;
specifier|private
specifier|final
name|int
name|position
decl_stmt|;
specifier|private
specifier|final
name|String
name|fileName
decl_stmt|;
specifier|public
name|RecoveredEntry
parameter_list|(
name|int
name|position
parameter_list|,
name|UUID
name|uuid
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|uuid
operator|=
name|uuid
expr_stmt|;
name|this
operator|.
name|position
operator|=
name|position
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|RecoveredEntry
name|o
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|this
operator|.
name|position
argument_list|,
name|o
operator|.
name|position
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

