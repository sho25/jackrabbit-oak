begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tests for system {@code User} creation.  *  * @since Oak 1.1  */
end_comment

begin_class
specifier|public
class|class
name|SystemUserTest
extends|extends
name|AbstractUserTest
block|{
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SystemUserTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|uid
decl_stmt|;
specifier|private
name|User
name|user
decl_stmt|;
annotation|@
name|Before
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|uid
operator|=
name|getTestPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|superuser
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// remove all created groups again
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|user
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to remove User "
operator|+
name|user
operator|.
name|getID
argument_list|()
operator|+
literal|" during tearDown."
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|private
name|User
name|createUser
parameter_list|(
name|String
name|uid
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|createUser
argument_list|(
name|uid
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|User
name|createUser
parameter_list|(
name|String
name|uid
parameter_list|,
name|String
name|intermediatePath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|User
name|u
init|=
name|userMgr
operator|.
name|createSystemUser
argument_list|(
name|uid
argument_list|,
name|intermediatePath
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
return|return
name|u
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateUser
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|user
operator|=
name|createUser
argument_list|(
name|uid
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|user
operator|.
name|isSystemUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|user
operator|.
name|isAdmin
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|user
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateUserWithNullUserID
parameter_list|()
throws|throws
name|RepositoryException
block|{
try|try
block|{
name|user
operator|=
name|createUser
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"A User cannot be built with 'null' userID"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateUserWithEmptyUserID
parameter_list|()
throws|throws
name|RepositoryException
block|{
try|try
block|{
name|user
operator|=
name|createUser
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"A User cannot be built with \"\" userID"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTwiceWithSameUserID
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|user
operator|=
name|createUser
argument_list|(
name|uid
argument_list|)
expr_stmt|;
try|try
block|{
name|User
name|user2
init|=
name|createUser
argument_list|(
name|uid
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Creating 2 users with the same UserID should throw AuthorizableExistsException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizableExistsException
name|e
parameter_list|)
block|{
comment|// success.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetUserByID
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|user
operator|=
name|createUser
argument_list|(
name|uid
argument_list|)
expr_stmt|;
name|Authorizable
name|authorizable
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|authorizable
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|authorizable
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|User
operator|)
name|authorizable
operator|)
operator|.
name|isAdmin
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|User
operator|)
name|authorizable
operator|)
operator|.
name|isSystemUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetUserByPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|user
operator|=
name|createUser
argument_list|(
name|uid
argument_list|)
expr_stmt|;
name|Authorizable
name|authorizable
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|authorizable
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|authorizable
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|User
operator|)
name|authorizable
operator|)
operator|.
name|isAdmin
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|User
operator|)
name|authorizable
operator|)
operator|.
name|isSystemUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetUserByPath
parameter_list|()
throws|throws
name|Exception
block|{
name|user
operator|=
name|createUser
argument_list|(
name|uid
argument_list|)
expr_stmt|;
name|Authorizable
name|authorizable
init|=
name|userMgr
operator|.
name|getAuthorizableByPath
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|authorizable
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|authorizable
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|User
operator|)
name|authorizable
operator|)
operator|.
name|isAdmin
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|User
operator|)
name|authorizable
operator|)
operator|.
name|isSystemUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|,
name|authorizable
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindAuthorizable
parameter_list|()
throws|throws
name|Exception
block|{
name|user
operator|=
name|createUser
argument_list|(
name|uid
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|iterator
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
name|UserConstants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|,
name|user
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Authorizable
name|authorizable
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|authorizable
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|authorizable
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|User
operator|)
name|authorizable
operator|)
operator|.
name|isSystemUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangePassword
parameter_list|()
throws|throws
name|Exception
block|{
name|user
operator|=
name|createUser
argument_list|(
name|uid
argument_list|)
expr_stmt|;
try|try
block|{
name|user
operator|.
name|changePassword
argument_list|(
literal|"pw"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedRepositoryOperationException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangePassword2
parameter_list|()
throws|throws
name|Exception
block|{
name|user
operator|=
name|createUser
argument_list|(
name|uid
argument_list|)
expr_stmt|;
try|try
block|{
name|user
operator|.
name|changePassword
argument_list|(
literal|"old"
argument_list|,
literal|"pw"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedRepositoryOperationException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisable
parameter_list|()
throws|throws
name|Exception
block|{
name|user
operator|=
name|createUser
argument_list|(
name|uid
argument_list|)
expr_stmt|;
name|user
operator|.
name|disable
argument_list|(
literal|"gone"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|user
operator|.
name|isDisabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"gone"
argument_list|,
name|user
operator|.
name|getDisabledReason
argument_list|()
argument_list|)
expr_stmt|;
name|user
operator|.
name|disable
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|user
operator|.
name|isDisabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

