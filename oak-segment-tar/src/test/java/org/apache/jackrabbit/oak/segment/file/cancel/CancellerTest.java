begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|cancel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|mutable
operator|.
name|MutableBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CancellerTest
block|{
specifier|private
specifier|static
name|void
name|assertNotCancelled
parameter_list|(
name|Cancellation
name|c
parameter_list|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|c
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|c
operator|.
name|getReason
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertCancelled
parameter_list|(
name|Cancellation
name|c
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|c
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c
operator|.
name|getReason
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|reason
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|emptyCancellerShouldNotCancel
parameter_list|()
block|{
name|Cancellation
name|c
init|=
name|Canceller
operator|.
name|newCanceller
argument_list|()
operator|.
name|check
argument_list|()
decl_stmt|;
name|assertNotCancelled
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|trueConditionShouldCancel
parameter_list|()
block|{
name|Cancellation
name|c
init|=
name|Canceller
operator|.
name|newCanceller
argument_list|()
operator|.
name|withCondition
argument_list|(
literal|"reason"
argument_list|,
parameter_list|()
lambda|->
literal|true
argument_list|)
operator|.
name|check
argument_list|()
decl_stmt|;
name|assertCancelled
argument_list|(
name|c
argument_list|,
literal|"reason"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|falseConditionShouldNotCancel
parameter_list|()
block|{
name|Cancellation
name|c
init|=
name|Canceller
operator|.
name|newCanceller
argument_list|()
operator|.
name|withCondition
argument_list|(
literal|"reason"
argument_list|,
parameter_list|()
lambda|->
literal|false
argument_list|)
operator|.
name|check
argument_list|()
decl_stmt|;
name|assertNotCancelled
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|falseConditionShouldCheckParent
parameter_list|()
block|{
name|Cancellation
name|c
init|=
name|Canceller
operator|.
name|newCanceller
argument_list|()
operator|.
name|withCondition
argument_list|(
literal|"parent"
argument_list|,
parameter_list|()
lambda|->
literal|true
argument_list|)
operator|.
name|withCondition
argument_list|(
literal|"child"
argument_list|,
parameter_list|()
lambda|->
literal|false
argument_list|)
operator|.
name|check
argument_list|()
decl_stmt|;
name|assertCancelled
argument_list|(
name|c
argument_list|,
literal|"parent"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|expiredTimeoutShouldCancel
parameter_list|()
throws|throws
name|Exception
block|{
name|Canceller
name|canceller
init|=
name|Canceller
operator|.
name|newCanceller
argument_list|()
operator|.
name|withTimeout
argument_list|(
literal|"reason"
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|Cancellation
name|c
init|=
name|canceller
operator|.
name|check
argument_list|()
decl_stmt|;
name|assertCancelled
argument_list|(
name|c
argument_list|,
literal|"reason"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|validTimeoutShouldNotCancel
parameter_list|()
block|{
name|Cancellation
name|c
init|=
name|Canceller
operator|.
name|newCanceller
argument_list|()
operator|.
name|withTimeout
argument_list|(
literal|"reason"
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
operator|.
name|check
argument_list|()
decl_stmt|;
name|assertNotCancelled
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|validTimeoutShouldCheckParent
parameter_list|()
block|{
name|Cancellation
name|c
init|=
name|Canceller
operator|.
name|newCanceller
argument_list|()
operator|.
name|withCondition
argument_list|(
literal|"parent"
argument_list|,
parameter_list|()
lambda|->
literal|true
argument_list|)
operator|.
name|withTimeout
argument_list|(
literal|"child"
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
operator|.
name|check
argument_list|()
decl_stmt|;
name|assertCancelled
argument_list|(
name|c
argument_list|,
literal|"parent"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shortCircuitShouldCancelWhenParentCancel
parameter_list|()
block|{
name|Cancellation
name|c
init|=
name|Canceller
operator|.
name|newCanceller
argument_list|()
operator|.
name|withCondition
argument_list|(
literal|"reason"
argument_list|,
parameter_list|()
lambda|->
literal|true
argument_list|)
operator|.
name|withShortCircuit
argument_list|()
operator|.
name|check
argument_list|()
decl_stmt|;
name|assertCancelled
argument_list|(
name|c
argument_list|,
literal|"reason"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shortCircuitShouldNotCancelWhenParentDoesNotCancel
parameter_list|()
block|{
name|Cancellation
name|c
init|=
name|Canceller
operator|.
name|newCanceller
argument_list|()
operator|.
name|withCondition
argument_list|(
literal|"reason"
argument_list|,
parameter_list|()
lambda|->
literal|false
argument_list|)
operator|.
name|withShortCircuit
argument_list|()
operator|.
name|check
argument_list|()
decl_stmt|;
name|assertNotCancelled
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shortCircuitShouldBreakCircuitWithParentOnFailure
parameter_list|()
block|{
name|MutableBoolean
name|b
init|=
operator|new
name|MutableBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Canceller
name|c
init|=
name|Canceller
operator|.
name|newCanceller
argument_list|()
operator|.
name|withCondition
argument_list|(
literal|"reason"
argument_list|,
name|b
operator|::
name|booleanValue
argument_list|)
operator|.
name|withShortCircuit
argument_list|()
decl_stmt|;
name|assertNotCancelled
argument_list|(
name|c
operator|.
name|check
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertCancelled
argument_list|(
name|c
operator|.
name|check
argument_list|()
argument_list|,
literal|"reason"
argument_list|)
expr_stmt|;
name|b
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertCancelled
argument_list|(
name|c
operator|.
name|check
argument_list|()
argument_list|,
literal|"reason"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

