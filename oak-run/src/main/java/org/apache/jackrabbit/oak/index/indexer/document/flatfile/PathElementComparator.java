begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|flatfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_class
specifier|public
class|class
name|PathElementComparator
implements|implements
name|Comparator
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|preferred
decl_stmt|;
specifier|public
name|PathElementComparator
parameter_list|()
block|{
name|this
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PathElementComparator
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|preferredPathElements
parameter_list|)
block|{
name|this
operator|.
name|preferred
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|preferredPathElements
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|p1
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|p2
parameter_list|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|i1
init|=
name|p1
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|i2
init|=
name|p2
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|//Shorter paths come first i.e. first parent then children
comment|//Also Rank jcr:content higher i.e. first child
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
operator|||
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|i1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
name|String
name|pe1
init|=
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|pe2
init|=
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|pe1Preferred
init|=
name|preferred
operator|.
name|contains
argument_list|(
name|pe1
argument_list|)
decl_stmt|;
name|boolean
name|pe2Preferred
init|=
name|preferred
operator|.
name|contains
argument_list|(
name|pe2
argument_list|)
decl_stmt|;
if|if
condition|(
name|pe1Preferred
operator|&&
operator|!
name|pe2Preferred
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|pe2Preferred
operator|&&
operator|!
name|pe1Preferred
condition|)
block|{
return|return
literal|1
return|;
block|}
name|int
name|compare
init|=
name|pe1
operator|.
name|compareTo
argument_list|(
name|pe2
argument_list|)
decl_stmt|;
if|if
condition|(
name|compare
operator|!=
literal|0
condition|)
block|{
return|return
name|compare
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

