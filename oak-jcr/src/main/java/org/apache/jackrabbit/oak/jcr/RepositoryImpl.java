begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|AbstractRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NoSuchWorkspaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  *<code>RepositoryImpl</code>...  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryImpl
extends|extends
name|AbstractRepository
block|{
comment|/**      * logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RepositoryImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Value
index|[]
argument_list|>
name|descriptors
decl_stmt|;
comment|//---------------------------------------------------------< Repository>---
comment|/**      * @see javax.jcr.Repository#getDescriptorKeys()      */
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getDescriptorKeys
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|getDescriptors
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
name|keys
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|keys
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Repository#getDescriptor(String)      */
annotation|@
name|Override
specifier|public
name|String
name|getDescriptor
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|Value
name|v
init|=
name|getDescriptorValue
argument_list|(
name|key
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|(
name|v
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|v
operator|.
name|getString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"corrupt descriptor value: "
operator|+
name|key
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      * @see javax.jcr.Repository#getDescriptorValue(String)      */
annotation|@
name|Override
specifier|public
name|Value
name|getDescriptorValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|Value
index|[]
name|vs
init|=
name|getDescriptorValues
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|vs
operator|==
literal|null
operator|||
name|vs
operator|.
name|length
operator|!=
literal|1
operator|)
condition|?
literal|null
else|:
name|vs
index|[
literal|0
index|]
return|;
block|}
comment|/**      * @see javax.jcr.Repository#getDescriptorValues(String)      */
annotation|@
name|Override
specifier|public
name|Value
index|[]
name|getDescriptorValues
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Value
index|[]
argument_list|>
name|descriptors
init|=
name|getDescriptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|descriptors
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|descriptors
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * @see javax.jcr.Repository#isSingleValueDescriptor(String)      */
annotation|@
name|Override
specifier|public
name|boolean
name|isSingleValueDescriptor
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|Value
index|[]
name|vs
init|=
name|getDescriptors
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|vs
operator|!=
literal|null
operator|&&
name|vs
operator|.
name|length
operator|==
literal|1
operator|)
return|;
block|}
comment|/**      * @see javax.jcr.Repository#login(javax.jcr.Credentials, String)      */
annotation|@
name|Override
specifier|public
name|Session
name|login
parameter_list|(
name|Credentials
name|credentials
parameter_list|,
name|String
name|workspaceName
parameter_list|)
throws|throws
name|LoginException
throws|,
name|NoSuchWorkspaceException
throws|,
name|RepositoryException
block|{
comment|// TODO -> SPI
return|return
literal|null
return|;
block|}
comment|//------------------------------------------------------------< private>---
comment|/**      * Returns the descriptor map.      *      * @return the descriptor map.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Value
index|[]
argument_list|>
name|getDescriptors
parameter_list|()
block|{
comment|// TODO
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

