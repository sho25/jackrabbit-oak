begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|sort
operator|.
name|StringSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|ChangeSetBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|closeQuietly
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|JournalEntry
operator|.
name|fillExternalChanges
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|JournalEntry
operator|.
name|newSorter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|alignWithExternalRevisions
import|;
end_import

begin_comment
comment|/**  * Utility class to pull in external changes in the DocumentNodeStore and  * process journal entries.  */
end_comment

begin_class
specifier|abstract
class|class
name|ExternalChange
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExternalChange
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|DocumentNodeStore
name|store
decl_stmt|;
specifier|protected
specifier|final
name|BackgroundReadStats
name|stats
decl_stmt|;
specifier|private
name|ChangeSetBuilder
name|changeSetBuilder
decl_stmt|;
specifier|private
specifier|final
name|JournalPropertyHandler
name|journalPropertyHandler
decl_stmt|;
name|ExternalChange
parameter_list|(
name|DocumentNodeStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|stats
operator|=
operator|new
name|BackgroundReadStats
argument_list|()
expr_stmt|;
name|this
operator|.
name|journalPropertyHandler
operator|=
name|store
operator|.
name|getJournalPropertyHandlerFactory
argument_list|()
operator|.
name|newHandler
argument_list|()
expr_stmt|;
block|}
comment|/**      * Called when when cache entries related to nodes with the given paths      * must be invalidated.      *      * @param paths the paths of affected nodes.      */
specifier|abstract
name|void
name|invalidateCache
parameter_list|(
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|)
function_decl|;
comment|/**      * Called when all cache entries must be invalidated.      */
specifier|abstract
name|void
name|invalidateCache
parameter_list|()
function_decl|;
comment|/**      * Called when the current head should be updated with revisions of external      * changes.      *      * @param externalChanges the head revision of other cluster nodes that      *                        changed and should now be considered visible.      * @param changedPaths paths of nodes that are affected by those external      *                     changes.      */
specifier|abstract
name|void
name|updateHead
parameter_list|(
annotation|@
name|Nonnull
name|Set
argument_list|<
name|Revision
argument_list|>
name|externalChanges
parameter_list|,
annotation|@
name|Nullable
name|Iterable
argument_list|<
name|String
argument_list|>
name|changedPaths
parameter_list|)
function_decl|;
comment|/**      * Processes external changes if there are any.      *      * @return statistics about the background read operation.      */
name|BackgroundReadStats
name|process
parameter_list|()
block|{
name|Clock
name|clock
init|=
name|store
operator|.
name|getClock
argument_list|()
decl_stmt|;
name|int
name|clusterId
init|=
name|store
operator|.
name|getClusterId
argument_list|()
decl_stmt|;
name|long
name|time
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|,
name|store
operator|.
name|getAsyncDelay
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
return|return
name|stats
return|;
block|}
try|try
block|{
name|alignWithExternalRevisions
argument_list|(
name|doc
argument_list|,
name|clock
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Background read interrupted"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|StringSort
name|externalSort
init|=
name|newSorter
argument_list|()
decl_stmt|;
name|StringSort
name|invalidate
init|=
name|newSorter
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Revision
argument_list|>
name|lastRevMap
init|=
name|doc
operator|.
name|getLastRev
argument_list|()
decl_stmt|;
try|try
block|{
name|changeSetBuilder
operator|=
operator|new
name|ChangeSetBuilder
argument_list|(
name|store
operator|.
name|getChangeSetMaxItems
argument_list|()
argument_list|,
name|store
operator|.
name|getChangeSetMaxDepth
argument_list|()
argument_list|)
expr_stmt|;
name|RevisionVector
name|headRevision
init|=
name|store
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Revision
argument_list|>
name|externalChanges
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Revision
argument_list|>
name|e
range|:
name|lastRevMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|machineId
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|machineId
operator|==
name|clusterId
condition|)
block|{
comment|// ignore own lastRev
continue|continue;
block|}
name|Revision
name|r
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Revision
name|last
init|=
name|headRevision
operator|.
name|getRevision
argument_list|(
name|machineId
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|==
literal|null
condition|)
block|{
comment|// make sure we see all changes when a cluster node joins
name|last
operator|=
operator|new
name|Revision
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|machineId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|compareRevisionTime
argument_list|(
name|last
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|// OAK-2345
comment|// only consider as external change if
comment|// the revision changed for the machineId
name|externalChanges
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|// collect external changes
if|if
condition|(
name|externalSort
operator|!=
literal|null
condition|)
block|{
comment|// add changes for this particular clusterId to the externalSort
try|try
block|{
name|fillExternalChanges
argument_list|(
name|externalSort
argument_list|,
name|invalidate
argument_list|,
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|last
argument_list|,
name|r
argument_list|,
name|store
operator|.
name|getDocumentStore
argument_list|()
argument_list|,
name|changeSetBuilder
argument_list|,
name|journalPropertyHandler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"backgroundRead: Exception while reading external changes from journal: "
operator|+
name|e1
argument_list|,
name|e1
argument_list|)
expr_stmt|;
name|closeQuietly
argument_list|(
name|externalSort
argument_list|)
expr_stmt|;
name|closeQuietly
argument_list|(
name|invalidate
argument_list|)
expr_stmt|;
name|externalSort
operator|=
literal|null
expr_stmt|;
name|invalidate
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
name|stats
operator|.
name|readHead
operator|=
name|clock
operator|.
name|getTime
argument_list|()
operator|-
name|time
expr_stmt|;
name|time
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
comment|// invalidate cache
if|if
condition|(
name|cacheInvalidationNeeded
argument_list|(
name|externalSort
argument_list|,
name|invalidate
argument_list|)
condition|)
block|{
comment|// invalidate caches
if|if
condition|(
name|externalSort
operator|==
literal|null
condition|)
block|{
comment|// if no externalSort available, then invalidate everything
name|invalidateCache
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|stats
operator|.
name|numExternalChanges
operator|=
name|externalSort
operator|.
name|getSize
argument_list|()
expr_stmt|;
try|try
block|{
name|sortAndInvalidate
argument_list|(
name|externalSort
argument_list|)
expr_stmt|;
name|sortAndInvalidate
argument_list|(
name|invalidate
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"backgroundRead: got IOException during external sorting/cache invalidation (as a result, invalidating entire cache): "
operator|+
name|ioe
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|invalidateCache
argument_list|()
expr_stmt|;
block|}
block|}
name|stats
operator|.
name|cacheInvalidationTime
operator|=
name|clock
operator|.
name|getTime
argument_list|()
operator|-
name|time
expr_stmt|;
block|}
comment|// update head
if|if
condition|(
operator|!
name|externalChanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|updateHead
argument_list|(
name|externalChanges
argument_list|,
name|externalSort
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|closeQuietly
argument_list|(
name|externalSort
argument_list|)
expr_stmt|;
name|closeQuietly
argument_list|(
name|invalidate
argument_list|)
expr_stmt|;
block|}
return|return
name|stats
return|;
block|}
name|ChangeSetBuilder
name|getChangeSetBuilder
parameter_list|()
block|{
return|return
name|changeSetBuilder
return|;
block|}
name|JournalPropertyHandler
name|getJournalPropertyHandler
parameter_list|()
block|{
return|return
name|journalPropertyHandler
return|;
block|}
comment|//-------------------------< internal>-------------------------------------
specifier|private
name|boolean
name|cacheInvalidationNeeded
parameter_list|(
name|StringSort
name|externalSort
parameter_list|,
name|StringSort
name|invalidate
parameter_list|)
block|{
return|return
name|externalSort
operator|==
literal|null
operator|||
name|invalidate
operator|==
literal|null
operator|||
operator|!
name|externalSort
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|invalidate
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|private
name|void
name|sortAndInvalidate
parameter_list|(
name|StringSort
name|paths
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|paths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|paths
operator|.
name|sort
argument_list|()
expr_stmt|;
name|invalidateCache
argument_list|(
name|paths
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

