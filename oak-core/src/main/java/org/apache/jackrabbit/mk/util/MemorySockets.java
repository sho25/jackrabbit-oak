begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PipedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PipedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ServerSocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_comment
comment|/**  * Memory sockets.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|MemorySockets
block|{
comment|/** Sockets queue */
specifier|static
specifier|final
name|BlockingQueue
argument_list|<
name|Socket
argument_list|>
name|QUEUE
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Socket
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Sentinel socket, used to signal a closed queue */
specifier|static
specifier|final
name|Socket
name|SENTINEL
init|=
operator|new
name|Socket
argument_list|()
decl_stmt|;
comment|/**      * Return the server socket factory.      *       * @return server socket factory      */
specifier|public
specifier|static
name|ServerSocketFactory
name|getServerSocketFactory
parameter_list|()
block|{
return|return
operator|new
name|ServerSocketFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ServerSocket
name|createServerSocket
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ServerSocket
argument_list|()
block|{
comment|/** Closed flag */
specifier|private
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Socket
name|accept
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"closed"
argument_list|)
throw|;
block|}
try|try
block|{
name|Socket
name|socket
init|=
name|QUEUE
operator|.
name|take
argument_list|()
decl_stmt|;
if|if
condition|(
name|socket
operator|==
name|SENTINEL
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"closed"
argument_list|)
throw|;
block|}
return|return
name|socket
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|QUEUE
operator|.
name|add
argument_list|(
name|SENTINEL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerSocket
name|createServerSocket
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createServerSocket
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerSocket
name|createServerSocket
parameter_list|(
name|int
name|port
parameter_list|,
name|int
name|backlog
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createServerSocket
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerSocket
name|createServerSocket
parameter_list|(
name|int
name|port
parameter_list|,
name|int
name|backlog
parameter_list|,
name|InetAddress
name|ifAddress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createServerSocket
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/**      * Return the socket factory.      *       * @return socket factory      */
specifier|public
specifier|static
name|SocketFactory
name|getSocketFactory
parameter_list|()
block|{
return|return
operator|new
name|SocketFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Socket
name|createSocket
parameter_list|()
throws|throws
name|IOException
block|{
name|PipedSocket
name|socket
init|=
operator|new
name|PipedSocket
argument_list|()
decl_stmt|;
name|QUEUE
operator|.
name|add
argument_list|(
operator|new
name|PipedSocket
argument_list|(
name|socket
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|socket
return|;
block|}
annotation|@
name|Override
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|InetAddress
name|host
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createSocket
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnknownHostException
block|{
return|return
name|createSocket
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|InetAddress
name|localHost
parameter_list|,
name|int
name|localPort
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnknownHostException
block|{
return|return
name|createSocket
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|InetAddress
name|address
parameter_list|,
name|int
name|port
parameter_list|,
name|InetAddress
name|localAddress
parameter_list|,
name|int
name|localPort
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createSocket
argument_list|()
return|;
block|}
block|}
return|;
block|}
empty_stmt|;
comment|/**      * Socket implementation, using pipes to exchange information between a      * pair of sockets.      */
specifier|static
class|class
name|PipedSocket
extends|extends
name|Socket
block|{
comment|/** Input stream */
specifier|protected
specifier|final
name|PipedInputStream
name|in
decl_stmt|;
comment|/** Output stream */
specifier|protected
specifier|final
name|PipedOutputStream
name|out
decl_stmt|;
comment|/**          * Used to initialize the socket on the client side.          */
name|PipedSocket
parameter_list|()
block|{
name|in
operator|=
operator|new
name|PipedInputStream
argument_list|(
literal|8192
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|PipedOutputStream
argument_list|()
expr_stmt|;
block|}
comment|/**          * Used to initialize the socket on the server side.          */
name|PipedSocket
parameter_list|(
name|PipedSocket
name|client
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|=
operator|new
name|PipedInputStream
argument_list|(
name|client
operator|.
name|out
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|PipedOutputStream
argument_list|(
name|client
operator|.
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
return|;
block|}
annotation|@
name|Override
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|out
return|;
block|}
block|}
block|}
end_class

end_unit

