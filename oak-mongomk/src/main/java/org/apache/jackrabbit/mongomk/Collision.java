begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * A<code>Collision</code> happens when a commit modifies a node, which was  * also modified in a branch commit, but the branch commit is not yet merged.  */
end_comment

begin_class
class|class
name|Collision
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|document
decl_stmt|;
specifier|private
specifier|final
name|String
name|theirRev
decl_stmt|;
specifier|private
specifier|final
name|UpdateOp
name|ourOp
decl_stmt|;
specifier|private
specifier|final
name|String
name|ourRev
decl_stmt|;
name|Collision
parameter_list|(
annotation|@
name|Nonnull
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|document
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|theirRev
parameter_list|,
annotation|@
name|Nonnull
name|UpdateOp
name|ourOp
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|ourRev
parameter_list|)
block|{
name|this
operator|.
name|document
operator|=
name|checkNotNull
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|this
operator|.
name|theirRev
operator|=
name|checkNotNull
argument_list|(
name|theirRev
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|ourOp
operator|=
name|checkNotNull
argument_list|(
name|ourOp
argument_list|)
expr_stmt|;
name|this
operator|.
name|ourRev
operator|=
name|checkNotNull
argument_list|(
name|ourRev
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|boolean
name|mark
parameter_list|(
name|DocumentStore
name|store
parameter_list|)
block|{
if|if
condition|(
name|markCommitRoot
argument_list|(
name|document
argument_list|,
name|theirRev
argument_list|,
name|store
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|revisions
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|document
operator|.
name|get
argument_list|(
name|UpdateOp
operator|.
name|REVISIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|revisions
operator|.
name|containsKey
argument_list|(
name|theirRev
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|revisions
operator|.
name|get
argument_list|(
name|theirRev
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
comment|// their commit wins, we have to mark ourRev
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|newDoc
init|=
name|Utils
operator|.
name|newMap
argument_list|()
decl_stmt|;
name|Utils
operator|.
name|deepCopyMap
argument_list|(
name|document
argument_list|,
name|newDoc
argument_list|)
expr_stmt|;
name|MemoryDocumentStore
operator|.
name|applyChanges
argument_list|(
name|newDoc
argument_list|,
name|ourOp
argument_list|)
expr_stmt|;
if|if
condition|(
name|markCommitRoot
argument_list|(
name|newDoc
argument_list|,
name|ourRev
argument_list|,
name|store
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
comment|// TODO: detect concurrent commit of previously un-merged changes
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|boolean
name|markCommitRoot
parameter_list|(
annotation|@
name|Nonnull
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|document
parameter_list|,
annotation|@
name|Nonnull
name|String
name|revision
parameter_list|,
annotation|@
name|Nonnull
name|DocumentStore
name|store
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|commitRoots
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|)
name|document
operator|.
name|get
argument_list|(
name|UpdateOp
operator|.
name|COMMIT_ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|commitRoots
operator|!=
literal|null
condition|)
block|{
name|Integer
name|depth
init|=
name|commitRoots
operator|.
name|get
argument_list|(
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|depth
operator|!=
literal|null
condition|)
block|{
name|String
name|p
init|=
name|Utils
operator|.
name|getPathFromId
argument_list|(
operator|(
name|String
operator|)
name|document
operator|.
name|get
argument_list|(
name|UpdateOp
operator|.
name|ID
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|commitRootPath
init|=
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|p
argument_list|,
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|p
argument_list|)
operator|-
name|depth
argument_list|)
decl_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|commitRootPath
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|commitRootPath
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|op
operator|.
name|setMapEntry
argument_list|(
name|UpdateOp
operator|.
name|COLLISIONS
argument_list|,
name|revision
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|createOrUpdate
argument_list|(
name|DocumentStore
operator|.
name|Collection
operator|.
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

