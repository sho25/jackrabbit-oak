begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Builder of a ChangeSet - only used by ChangeCollectorProvider (and tests..)  */
end_comment

begin_class
specifier|public
class|class
name|ChangeSetBuilder
block|{
specifier|private
specifier|final
name|int
name|maxItems
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxPathDepth
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|parentPaths
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|parentNodeNames
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|parentNodeTypes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|propertyNames
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|parentPathOverflow
decl_stmt|;
specifier|private
name|boolean
name|parentNodeNameOverflow
decl_stmt|;
specifier|private
name|boolean
name|parentNodeTypeOverflow
decl_stmt|;
specifier|private
name|boolean
name|propertyNameOverflow
decl_stmt|;
specifier|public
name|ChangeSetBuilder
parameter_list|(
name|int
name|maxItems
parameter_list|,
name|int
name|maxPathDepth
parameter_list|)
block|{
name|this
operator|.
name|maxItems
operator|=
name|maxItems
expr_stmt|;
name|this
operator|.
name|maxPathDepth
operator|=
name|maxPathDepth
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ChangeSetBuilder{paths[maxDepth:"
operator|+
name|maxPathDepth
operator|+
literal|"]="
operator|+
name|parentPaths
operator|+
literal|", propertyNames="
operator|+
name|propertyNames
operator|+
literal|", nodeNames="
operator|+
name|parentNodeNames
operator|+
literal|", nodeTypes="
operator|+
name|parentNodeTypes
operator|+
literal|"}"
return|;
block|}
specifier|public
name|boolean
name|getParentPathOverflown
parameter_list|()
block|{
return|return
name|parentPathOverflow
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getParentPaths
parameter_list|()
block|{
if|if
condition|(
name|parentPathOverflow
operator|||
name|parentPaths
operator|.
name|size
argument_list|()
operator|>
name|maxItems
condition|)
block|{
comment|// if already overflown, reset the buffers anyway
name|parentPathOverflow
operator|=
literal|true
expr_stmt|;
name|parentPaths
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|parentPaths
return|;
block|}
specifier|public
name|boolean
name|getParentNodeNameOverflown
parameter_list|()
block|{
return|return
name|parentNodeNameOverflow
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getParentNodeNames
parameter_list|()
block|{
if|if
condition|(
name|parentNodeNameOverflow
operator|||
name|parentNodeNames
operator|.
name|size
argument_list|()
operator|>
name|maxItems
condition|)
block|{
comment|// if already overflown, reset the buffers anyway
name|parentNodeNameOverflow
operator|=
literal|true
expr_stmt|;
name|parentNodeNames
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|parentNodeNames
return|;
block|}
specifier|public
name|boolean
name|getParentNodeTypeOverflown
parameter_list|()
block|{
return|return
name|parentNodeTypeOverflow
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getParentNodeTypes
parameter_list|()
block|{
if|if
condition|(
name|parentNodeTypeOverflow
operator|||
name|parentNodeTypes
operator|.
name|size
argument_list|()
operator|>
name|maxItems
condition|)
block|{
comment|// if already overflown, reset the buffers anyway
name|parentNodeTypeOverflow
operator|=
literal|true
expr_stmt|;
name|parentNodeTypes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|parentNodeTypes
return|;
block|}
specifier|public
name|boolean
name|getPropertyNameOverflown
parameter_list|()
block|{
return|return
name|propertyNameOverflow
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPropertyNames
parameter_list|()
block|{
if|if
condition|(
name|propertyNameOverflow
operator|||
name|propertyNames
operator|.
name|size
argument_list|()
operator|>
name|maxItems
condition|)
block|{
comment|// if already overflown, reset the buffers anyway
name|propertyNameOverflow
operator|=
literal|true
expr_stmt|;
name|propertyNames
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|propertyNames
return|;
block|}
specifier|public
name|int
name|getMaxPrefilterPathDepth
parameter_list|()
block|{
return|return
name|maxPathDepth
return|;
block|}
specifier|public
name|ChangeSet
name|build
parameter_list|()
block|{
comment|// invoke accessors to get overflow evaluated one last time
name|getParentPaths
argument_list|()
expr_stmt|;
name|getParentNodeNames
argument_list|()
expr_stmt|;
name|getParentNodeTypes
argument_list|()
expr_stmt|;
name|getPropertyNames
argument_list|()
expr_stmt|;
return|return
operator|new
name|ChangeSet
argument_list|(
name|maxPathDepth
argument_list|,
name|parentPathOverflow
condition|?
literal|null
else|:
name|parentPaths
argument_list|,
name|parentNodeNameOverflow
condition|?
literal|null
else|:
name|parentNodeNames
argument_list|,
name|parentNodeTypeOverflow
condition|?
literal|null
else|:
name|parentNodeTypes
argument_list|,
name|propertyNameOverflow
condition|?
literal|null
else|:
name|propertyNames
argument_list|)
return|;
block|}
block|}
end_class

end_unit

