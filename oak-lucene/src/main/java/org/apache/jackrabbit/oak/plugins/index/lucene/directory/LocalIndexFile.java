begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexCopier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FilterDirectory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|humanReadableByteCount
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|LocalIndexFile
block|{
specifier|final
name|File
name|dir
decl_stmt|;
specifier|final
name|String
name|name
decl_stmt|;
specifier|final
name|long
name|size
decl_stmt|;
specifier|final
name|boolean
name|copyFromRemote
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|deleteAttemptCount
decl_stmt|;
specifier|final
name|long
name|creationTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|public
name|LocalIndexFile
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|fileName
parameter_list|,
name|long
name|size
parameter_list|,
name|boolean
name|copyFromRemote
parameter_list|)
block|{
name|this
operator|.
name|copyFromRemote
operator|=
name|copyFromRemote
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|getFSDir
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|fileName
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
specifier|public
name|LocalIndexFile
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
name|this
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|,
name|DirectoryUtils
operator|.
name|getFileLength
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getKey
parameter_list|()
block|{
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|name
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
return|return
name|name
return|;
block|}
specifier|public
name|boolean
name|isCopyFromRemote
parameter_list|()
block|{
return|return
name|copyFromRemote
return|;
block|}
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
specifier|public
name|void
name|incrementAttemptToDelete
parameter_list|()
block|{
name|deleteAttemptCount
operator|++
expr_stmt|;
block|}
specifier|public
name|int
name|getDeleteAttemptCount
parameter_list|()
block|{
return|return
name|deleteAttemptCount
return|;
block|}
specifier|public
name|String
name|deleteLog
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s (%s, %d attempts, %d s)"
argument_list|,
name|name
argument_list|,
name|humanReadableByteCount
argument_list|(
name|size
argument_list|)
argument_list|,
name|deleteAttemptCount
argument_list|,
name|timeTaken
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|copyLog
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s (%s, %1.1f%%, %s, %d s)"
argument_list|,
name|name
argument_list|,
name|humanReadableByteCount
argument_list|(
name|actualSize
argument_list|()
argument_list|)
argument_list|,
name|copyProgress
argument_list|()
argument_list|,
name|humanReadableByteCount
argument_list|(
name|size
argument_list|)
argument_list|,
name|timeTaken
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|LocalIndexFile
name|localIndexFile
init|=
operator|(
name|LocalIndexFile
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|dir
operator|!=
literal|null
condition|?
operator|!
name|dir
operator|.
name|equals
argument_list|(
name|localIndexFile
operator|.
name|dir
argument_list|)
else|:
name|localIndexFile
operator|.
name|dir
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|name
operator|.
name|equals
argument_list|(
name|localIndexFile
operator|.
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|dir
operator|!=
literal|null
condition|?
name|dir
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|name
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|long
name|timeTaken
parameter_list|()
block|{
return|return
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|creationTime
argument_list|)
return|;
block|}
specifier|private
name|float
name|copyProgress
parameter_list|()
block|{
return|return
name|actualSize
argument_list|()
operator|*
literal|1.0f
operator|/
name|size
operator|*
literal|100
return|;
block|}
specifier|private
name|long
name|actualSize
parameter_list|()
block|{
return|return
name|dir
operator|!=
literal|null
condition|?
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|name
argument_list|)
operator|.
name|length
argument_list|()
else|:
literal|0
return|;
block|}
specifier|public
specifier|static
name|File
name|getFSDir
parameter_list|(
name|Directory
name|dir
parameter_list|)
block|{
if|if
condition|(
name|dir
operator|instanceof
name|FilterDirectory
condition|)
block|{
name|dir
operator|=
operator|(
operator|(
name|FilterDirectory
operator|)
name|dir
operator|)
operator|.
name|getDelegate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dir
operator|instanceof
name|FSDirectory
condition|)
block|{
return|return
operator|(
operator|(
name|FSDirectory
operator|)
name|dir
operator|)
operator|.
name|getDirectory
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

