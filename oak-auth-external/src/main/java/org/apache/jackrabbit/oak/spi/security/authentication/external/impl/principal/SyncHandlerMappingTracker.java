begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|principal
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|SyncHandlerMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|SyncHandlerMapping
operator|.
name|PARAM_IDP_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|SyncHandlerMapping
operator|.
name|PARAM_SYNC_HANDLER_NAME
import|;
end_import

begin_comment
comment|/**  * {@code ServiceTracker} to detect any {@link SyncHandler} that has  * dynamic membership enabled.  */
end_comment

begin_class
specifier|final
class|class
name|SyncHandlerMappingTracker
extends|extends
name|ServiceTracker
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SyncHandlerMappingTracker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ServiceReference
argument_list|,
name|Mapping
argument_list|>
name|referenceMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|SyncHandlerMappingTracker
parameter_list|(
annotation|@
name|NotNull
name|BundleContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|SyncHandlerMapping
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|addingService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|)
block|{
name|addMapping
argument_list|(
name|reference
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|addingService
argument_list|(
name|reference
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifiedService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|Object
name|service
parameter_list|)
block|{
name|addMapping
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|super
operator|.
name|modifiedService
argument_list|(
name|reference
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|Object
name|service
parameter_list|)
block|{
name|referenceMap
operator|.
name|remove
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|super
operator|.
name|removedService
argument_list|(
name|reference
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addMapping
parameter_list|(
name|ServiceReference
name|reference
parameter_list|)
block|{
name|String
name|idpName
init|=
name|PropertiesUtil
operator|.
name|toString
argument_list|(
name|reference
operator|.
name|getProperty
argument_list|(
name|PARAM_IDP_NAME
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|syncHandlerName
init|=
name|PropertiesUtil
operator|.
name|toString
argument_list|(
name|reference
operator|.
name|getProperty
argument_list|(
name|PARAM_SYNC_HANDLER_NAME
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|idpName
operator|!=
literal|null
operator|&&
name|syncHandlerName
operator|!=
literal|null
condition|)
block|{
name|referenceMap
operator|.
name|put
argument_list|(
name|reference
argument_list|,
operator|new
name|Mapping
argument_list|(
name|syncHandlerName
argument_list|,
name|idpName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Ignoring SyncHandlerMapping with incomplete mapping of IDP '{}' and SyncHandler '{}'"
argument_list|,
name|idpName
argument_list|,
name|syncHandlerName
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterable
argument_list|<
name|String
argument_list|>
name|getIdpNames
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|String
name|syncHandlerName
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|filter
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|referenceMap
operator|.
name|values
argument_list|()
argument_list|,
name|mapping
lambda|->
block|{
if|if
condition|(
name|syncHandlerName
operator|.
name|equals
argument_list|(
name|mapping
operator|.
name|syncHandlerName
argument_list|)
condition|)
block|{
return|return
name|mapping
operator|.
name|idpName
return|;
block|}
else|else
block|{
comment|// different synchandler name
return|return
literal|null
return|;
block|}
block|}
argument_list|)
argument_list|,
name|Predicates
operator|.
name|notNull
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|Mapping
block|{
specifier|private
specifier|final
name|String
name|syncHandlerName
decl_stmt|;
specifier|private
specifier|final
name|String
name|idpName
decl_stmt|;
specifier|private
name|Mapping
parameter_list|(
annotation|@
name|NotNull
name|String
name|syncHandlerName
parameter_list|,
annotation|@
name|NotNull
name|String
name|idpName
parameter_list|)
block|{
name|this
operator|.
name|syncHandlerName
operator|=
name|syncHandlerName
expr_stmt|;
name|this
operator|.
name|idpName
operator|=
name|idpName
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

