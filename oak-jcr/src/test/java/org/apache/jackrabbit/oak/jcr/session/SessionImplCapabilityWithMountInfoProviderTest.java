begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|session
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
operator|.
name|CompositeNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|DefaultWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SessionImplCapabilityWithMountInfoProviderTest
block|{
specifier|private
name|Session
name|adminSession
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
name|MountInfoProvider
name|mip
init|=
name|Mounts
operator|.
name|newBuilder
argument_list|()
operator|.
name|readOnlyMount
argument_list|(
literal|"ro"
argument_list|,
literal|"/private"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MemoryNodeStore
name|roStore
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
block|{
name|NodeBuilder
name|builder
init|=
name|roStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"private"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|roStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
name|MemoryNodeStore
name|globalStore
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
block|{
name|NodeBuilder
name|builder
init|=
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|globalStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
name|CompositeNodeStore
name|store
init|=
operator|new
name|CompositeNodeStore
operator|.
name|Builder
argument_list|(
name|mip
argument_list|,
name|globalStore
argument_list|)
operator|.
name|addMount
argument_list|(
literal|"ro"
argument_list|,
name|roStore
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Whiteboard
name|whiteboard
init|=
operator|new
name|DefaultWhiteboard
argument_list|()
decl_stmt|;
name|whiteboard
operator|.
name|register
argument_list|(
name|MountInfoProvider
operator|.
name|class
argument_list|,
name|mip
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|Jcr
name|jcr
init|=
operator|new
name|Jcr
argument_list|(
name|store
argument_list|)
operator|.
name|with
argument_list|(
name|whiteboard
argument_list|)
decl_stmt|;
name|jcr
operator|.
name|createContentRepository
argument_list|()
expr_stmt|;
name|Repository
name|repository
init|=
name|jcr
operator|.
name|createRepository
argument_list|()
decl_stmt|;
name|adminSession
operator|=
name|repository
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addNode
parameter_list|()
throws|throws
name|Exception
block|{
comment|// unable to add nodes in the read-only mount
name|assertFalse
argument_list|(
literal|"Must not be able to add a child not under the private mount root"
argument_list|,
name|adminSession
operator|.
name|hasCapability
argument_list|(
literal|"addNode"
argument_list|,
name|adminSession
operator|.
name|getNode
argument_list|(
literal|"/private"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Must not be able to add a child not under the private mount"
argument_list|,
name|adminSession
operator|.
name|hasCapability
argument_list|(
literal|"addNode"
argument_list|,
name|adminSession
operator|.
name|getNode
argument_list|(
literal|"/private/foo"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bar"
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// able to add nodes outside the read-only mount
name|assertTrue
argument_list|(
literal|"Must be able to add a child node under the root"
argument_list|,
name|adminSession
operator|.
name|hasCapability
argument_list|(
literal|"addNode"
argument_list|,
name|adminSession
operator|.
name|getNode
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"not-private"
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// unable to add node at the root of the read-only mount ( even though it already exists )
name|assertFalse
argument_list|(
literal|"Must not be able to add a child node in place of the private mount"
argument_list|,
name|adminSession
operator|.
name|hasCapability
argument_list|(
literal|"addNode"
argument_list|,
name|adminSession
operator|.
name|getNode
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"private"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|orderBefore
parameter_list|()
throws|throws
name|Exception
block|{
comment|// able to order the root of the mount since the operation is performed on the parent
name|assertTrue
argument_list|(
name|adminSession
operator|.
name|hasCapability
argument_list|(
literal|"orderBefore"
argument_list|,
name|adminSession
operator|.
name|getNode
argument_list|(
literal|"/private"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|adminSession
operator|.
name|hasCapability
argument_list|(
literal|"orderBefore"
argument_list|,
name|adminSession
operator|.
name|getNode
argument_list|(
literal|"/private/foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|simpleNodeOperations
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|operation
range|:
operator|new
name|String
index|[]
block|{
literal|"setPrimaryType"
block|,
literal|"addMixin"
block|,
literal|"removeMixin"
block|,
literal|"setProperty"
block|,
literal|"remove"
block|}
control|)
block|{
for|for
control|(
name|String
name|privateMountNode
range|:
operator|new
name|String
index|[]
block|{
literal|"/private"
block|,
literal|"/private/foo"
block|}
control|)
block|{
name|assertFalse
argument_list|(
literal|"Unexpected return value for hasCapability("
operator|+
name|operation
operator|+
literal|") on node '"
operator|+
name|privateMountNode
operator|+
literal|"' from the private mount"
argument_list|,
name|adminSession
operator|.
name|hasCapability
argument_list|(
name|operation
argument_list|,
name|adminSession
operator|.
name|getNode
argument_list|(
name|privateMountNode
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|globalMountNode
init|=
literal|"/foo"
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected return value for hasCapability("
operator|+
name|operation
operator|+
literal|") on node '"
operator|+
name|globalMountNode
operator|+
literal|"' from the global mount"
argument_list|,
name|adminSession
operator|.
name|hasCapability
argument_list|(
name|operation
argument_list|,
name|adminSession
operator|.
name|getNode
argument_list|(
name|globalMountNode
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|itemOperations
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|operation
range|:
operator|new
name|String
index|[]
block|{
literal|"setValue"
block|,
literal|"remove"
block|}
control|)
block|{
name|String
name|privateMountProp
init|=
literal|"/private/prop"
decl_stmt|;
name|String
name|globalMountProp
init|=
literal|"/foo/prop"
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Unexpected return value for hasCapability("
operator|+
name|operation
operator|+
literal|") on item '"
operator|+
name|privateMountProp
operator|+
literal|"' from the private mount"
argument_list|,
name|adminSession
operator|.
name|hasCapability
argument_list|(
name|operation
argument_list|,
name|adminSession
operator|.
name|getItem
argument_list|(
name|privateMountProp
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected return value for hasCapability("
operator|+
name|operation
operator|+
literal|") on item '"
operator|+
name|globalMountProp
operator|+
literal|"' from the global mount"
argument_list|,
name|adminSession
operator|.
name|hasCapability
argument_list|(
name|operation
argument_list|,
name|adminSession
operator|.
name|getItem
argument_list|(
name|globalMountProp
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

