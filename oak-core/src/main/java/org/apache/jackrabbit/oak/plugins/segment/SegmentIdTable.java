begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMapWithExpectedSize
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|nCopies
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Hash table of weak references to segment identifiers.  */
end_comment

begin_class
specifier|public
class|class
name|SegmentIdTable
block|{
comment|/**      * Hash table of weak references to segment identifiers that are currently      * being accessed. The size of the table is always a power of two, which      * optimizes the {@link #expand()} operation. The table is indexed by the      * random identifier bits, which guarantees uniform distribution of entries.      * Each table entry is either {@code null} (when there are no matching      * identifiers) or a list of weak references to the matching identifiers.      *<p>      * Actually, this is a array. It's not a hash map, to conserve memory (maps      * need much more memory).      *<p>      * The list is not sorted (we could; lookup would be faster, but adding and      * removing entries would be slower).      */
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|WeakReference
argument_list|<
name|SegmentId
argument_list|>
argument_list|>
name|references
init|=
name|newArrayList
argument_list|(
name|nCopies
argument_list|(
literal|1024
argument_list|,
operator|(
name|WeakReference
argument_list|<
name|SegmentId
argument_list|>
operator|)
literal|null
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SegmentTracker
name|tracker
decl_stmt|;
name|SegmentIdTable
parameter_list|(
name|SegmentTracker
name|tracker
parameter_list|)
block|{
name|this
operator|.
name|tracker
operator|=
name|tracker
expr_stmt|;
block|}
comment|/**      * Get the segment id, and reference it in the weak references map.      *       * @param msb      * @param lsb      * @return the segment id      */
specifier|synchronized
name|SegmentId
name|getSegmentId
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
block|{
name|int
name|first
init|=
name|getIndex
argument_list|(
name|lsb
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|first
decl_stmt|;
name|WeakReference
argument_list|<
name|SegmentId
argument_list|>
name|reference
init|=
name|references
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
while|while
condition|(
name|reference
operator|!=
literal|null
condition|)
block|{
name|SegmentId
name|id
init|=
name|reference
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
name|id
operator|.
name|getMostSignificantBits
argument_list|()
operator|==
name|msb
operator|&&
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
operator|==
name|lsb
condition|)
block|{
return|return
name|id
return|;
block|}
name|index
operator|=
operator|(
name|index
operator|+
literal|1
operator|)
operator|%
name|references
operator|.
name|size
argument_list|()
expr_stmt|;
name|reference
operator|=
name|references
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|SegmentId
name|id
init|=
operator|new
name|SegmentId
argument_list|(
name|tracker
argument_list|,
name|msb
argument_list|,
name|lsb
argument_list|)
decl_stmt|;
name|references
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|WeakReference
argument_list|<
name|SegmentId
argument_list|>
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|!=
name|first
condition|)
block|{
name|refresh
argument_list|()
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
comment|/**      * Returns all segment identifiers that are currently referenced in memory.      *      * @return referenced segment identifiers      */
name|void
name|collectReferencedIds
parameter_list|(
name|Collection
argument_list|<
name|SegmentId
argument_list|>
name|ids
parameter_list|)
block|{
name|ids
operator|.
name|addAll
argument_list|(
name|refresh
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|Collection
argument_list|<
name|SegmentId
argument_list|>
name|refresh
parameter_list|()
block|{
name|int
name|size
init|=
name|references
operator|.
name|size
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|SegmentId
argument_list|,
name|WeakReference
argument_list|<
name|SegmentId
argument_list|>
argument_list|>
name|ids
init|=
name|newHashMapWithExpectedSize
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|boolean
name|hashCollisions
init|=
literal|false
decl_stmt|;
name|boolean
name|emptyReferences
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|WeakReference
argument_list|<
name|SegmentId
argument_list|>
name|reference
init|=
name|references
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|reference
operator|!=
literal|null
condition|)
block|{
name|SegmentId
name|id
init|=
name|reference
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|ids
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|hashCollisions
operator|=
name|hashCollisions
operator|||
operator|(
name|i
operator|!=
name|getIndex
argument_list|(
name|id
argument_list|)
operator|)
expr_stmt|;
block|}
else|else
block|{
name|references
operator|.
name|set
argument_list|(
name|i
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|emptyReferences
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
while|while
condition|(
literal|2
operator|*
name|ids
operator|.
name|size
argument_list|()
operator|>
name|size
condition|)
block|{
name|size
operator|*=
literal|2
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|hashCollisions
operator|&&
name|emptyReferences
operator|)
operator|||
name|size
operator|!=
name|references
operator|.
name|size
argument_list|()
condition|)
block|{
name|references
operator|.
name|clear
argument_list|()
expr_stmt|;
name|references
operator|.
name|addAll
argument_list|(
name|nCopies
argument_list|(
name|size
argument_list|,
operator|(
name|WeakReference
argument_list|<
name|SegmentId
argument_list|>
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SegmentId
argument_list|,
name|WeakReference
argument_list|<
name|SegmentId
argument_list|>
argument_list|>
name|entry
range|:
name|ids
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|index
init|=
name|getIndex
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|references
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|index
operator|=
operator|(
name|index
operator|+
literal|1
operator|)
operator|%
name|size
expr_stmt|;
block|}
name|references
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ids
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|private
name|int
name|getIndex
parameter_list|(
name|SegmentId
name|id
parameter_list|)
block|{
return|return
name|getIndex
argument_list|(
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|int
name|getIndex
parameter_list|(
name|long
name|lsb
parameter_list|)
block|{
return|return
operator|(
operator|(
name|int
operator|)
name|lsb
operator|)
operator|&
operator|(
name|references
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
block|}
end_class

end_unit

