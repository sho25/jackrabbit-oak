begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|synchronizedList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|JournalTest
extends|extends
name|AbstractJournalTest
block|{
specifier|private
name|MemoryDocumentStore
name|ds
decl_stmt|;
specifier|private
name|MemoryBlobStore
name|bs
decl_stmt|;
class|class
name|DiffingObserver
implements|implements
name|Observer
implements|,
name|Runnable
implements|,
name|NodeStateDiff
block|{
specifier|final
name|List
argument_list|<
name|DocumentNodeState
argument_list|>
name|incomingRootStates1
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DocumentNodeState
argument_list|>
name|diffedRootStates1
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|DocumentNodeState
name|oldRoot
init|=
literal|null
decl_stmt|;
name|DiffingObserver
parameter_list|(
name|boolean
name|startInBackground
parameter_list|)
block|{
if|if
condition|(
name|startInBackground
condition|)
block|{
comment|// start the diffing in the background - so as to not
comment|// interfere with the contentChanged call
name|Thread
name|th
init|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|th
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|th
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
synchronized|synchronized
init|(
name|incomingRootStates1
init|)
block|{
name|incomingRootStates1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|diffedRootStates1
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|contentChanged
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
synchronized|synchronized
init|(
name|incomingRootStates1
init|)
block|{
name|incomingRootStates1
operator|.
name|add
argument_list|(
operator|(
name|DocumentNodeState
operator|)
name|root
argument_list|)
expr_stmt|;
name|incomingRootStates1
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|processAll
parameter_list|()
block|{
while|while
condition|(
name|processOne
argument_list|()
condition|)
block|{
comment|// continue
block|}
block|}
specifier|public
name|boolean
name|processOne
parameter_list|()
block|{
name|DocumentNodeState
name|newRoot
decl_stmt|;
synchronized|synchronized
init|(
name|incomingRootStates1
init|)
block|{
if|if
condition|(
name|incomingRootStates1
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|newRoot
operator|=
name|incomingRootStates1
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldRoot
operator|!=
literal|null
condition|)
block|{
name|newRoot
operator|.
name|compareAgainstBaseState
argument_list|(
name|oldRoot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|oldRoot
operator|=
name|newRoot
expr_stmt|;
synchronized|synchronized
init|(
name|incomingRootStates1
init|)
block|{
name|diffedRootStates1
operator|.
name|add
argument_list|(
name|newRoot
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|DocumentNodeState
name|newRoot
decl_stmt|;
synchronized|synchronized
init|(
name|incomingRootStates1
init|)
block|{
while|while
condition|(
name|incomingRootStates1
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
try|try
block|{
name|incomingRootStates1
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|newRoot
operator|=
name|incomingRootStates1
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldRoot
operator|!=
literal|null
condition|)
block|{
name|newRoot
operator|.
name|compareAgainstBaseState
argument_list|(
name|oldRoot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|oldRoot
operator|=
name|newRoot
expr_stmt|;
synchronized|synchronized
init|(
name|incomingRootStates1
init|)
block|{
name|diffedRootStates1
operator|.
name|add
argument_list|(
name|newRoot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|getTotal
parameter_list|()
block|{
synchronized|synchronized
init|(
name|incomingRootStates1
init|)
block|{
return|return
name|incomingRootStates1
operator|.
name|size
argument_list|()
operator|+
name|diffedRootStates1
operator|.
name|size
argument_list|()
return|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|cleanupTest
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentMK
name|mk1
init|=
name|createMK
argument_list|(
literal|0
comment|/* clusterId: 0 => uses clusterNodes collection */
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DocumentNodeStore
name|ns1
init|=
name|mk1
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
comment|// make sure we're visible and marked as active
name|ns1
operator|.
name|renewClusterIdLease
argument_list|()
expr_stmt|;
name|JournalGarbageCollector
name|gc
init|=
operator|new
name|JournalGarbageCollector
argument_list|(
name|ns1
argument_list|)
decl_stmt|;
comment|// first clean up
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// OAK-2979 : wait 100ms before doing the cleanup
name|gc
operator|.
name|gc
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// sleep just quickly
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|gc
operator|.
name|gc
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|gc
operator|.
name|gc
argument_list|(
literal|6
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|gc
operator|.
name|gc
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|gc
operator|.
name|gc
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|gc
operator|.
name|gc
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|gc
operator|.
name|gc
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|gc
operator|.
name|gc
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// create some entries that can be deleted thereupon
name|mk1
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"regular1\": {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk1
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"regular2\": {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk1
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"regular3\": {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk1
operator|.
name|commit
argument_list|(
literal|"/regular2"
argument_list|,
literal|"+\"regular4\": {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// sleep 100millis
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|gc
operator|.
name|gc
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|gc
operator|.
name|gc
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|mk1
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"regular5\": {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|mk1
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"regular6\": {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// sleep 100millis
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|gc
operator|.
name|gc
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|gc
operator|.
name|gc
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|journalTest
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentMK
name|mk1
init|=
name|createMK
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DocumentNodeStore
name|ns1
init|=
name|mk1
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|CountingDocumentStore
name|countingDocStore1
init|=
name|builder
operator|.
name|actualStore
decl_stmt|;
name|CountingTieredDiffCache
name|countingDiffCache1
init|=
name|builder
operator|.
name|actualDiffCache
decl_stmt|;
name|DocumentMK
name|mk2
init|=
name|createMK
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DocumentNodeStore
name|ns2
init|=
name|mk2
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|CountingDocumentStore
name|countingDocStore2
init|=
name|builder
operator|.
name|actualStore
decl_stmt|;
name|CountingTieredDiffCache
name|countingDiffCache2
init|=
name|builder
operator|.
name|actualDiffCache
decl_stmt|;
specifier|final
name|DiffingObserver
name|observer
init|=
operator|new
name|DiffingObserver
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ns1
operator|.
name|addObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|observer
operator|.
name|processAll
argument_list|()
expr_stmt|;
comment|// to make sure we have an 'oldRoot'
name|observer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|countingDocStore1
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
name|countingDocStore2
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
comment|// countingDocStore1.printStacks = true;
name|countingDiffCache1
operator|.
name|resetLoadCounter
argument_list|()
expr_stmt|;
name|countingDiffCache2
operator|.
name|resetLoadCounter
argument_list|()
expr_stmt|;
name|mk2
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"regular1\": {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk2
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"regular2\": {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk2
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"regular3\": {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk2
operator|.
name|commit
argument_list|(
literal|"/regular2"
argument_list|,
literal|"+\"regular4\": {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// flush to journal
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// nothing notified yet
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|observer
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countingDocStore1
operator|.
name|getNumFindCalls
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countingDocStore1
operator|.
name|getNumQueryCalls
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countingDocStore1
operator|.
name|getNumRemoveCalls
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countingDocStore1
operator|.
name|getNumCreateOrUpdateCalls
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countingDiffCache1
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// let node 1 read those changes
comment|// System.err.println("run background ops");
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|mk2
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"regular5\": {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// and let the observer process everything
name|observer
operator|.
name|processAll
argument_list|()
expr_stmt|;
name|countingDocStore1
operator|.
name|printStacks
operator|=
literal|false
expr_stmt|;
comment|// now expect 1 entry in rootStates
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|observer
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countingDiffCache1
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countingDocStore1
operator|.
name|getNumRemoveCalls
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countingDocStore1
operator|.
name|getNumCreateOrUpdateCalls
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countingDocStore1
operator|.
name|getNumQueryCalls
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
argument_list|)
expr_stmt|;
comment|//        assertEquals(0, countingDocStore1.getNumFindCalls(Collection.NODES));
block|}
annotation|@
name|Test
specifier|public
name|void
name|externalBranchChange
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentMK
name|mk1
init|=
name|createMK
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DocumentNodeStore
name|ns1
init|=
name|mk1
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|DocumentMK
name|mk2
init|=
name|createMK
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DocumentNodeStore
name|ns2
init|=
name|mk2
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|mk1
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"regular1\": {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// flush to journal
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|mk1
operator|.
name|commit
argument_list|(
literal|"/regular1"
argument_list|,
literal|"+\"regular1child\": {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// flush to journal
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|mk1
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"regular2\": {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// flush to journal
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|mk1
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"regular3\": {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// flush to journal
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|mk1
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"regular4\": {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// flush to journal
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|mk1
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"regular5\": {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// flush to journal
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|String
name|b1
init|=
name|mk1
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|b1
operator|=
name|mk1
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"branchVisible\": {}"
argument_list|,
name|b1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk1
operator|.
name|merge
argument_list|(
name|b1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// to flush the branch commit either dispose of mk1
comment|// or run the background operations explicitly
comment|// (as that will propagate the lastRev to the root)
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|String
name|nodes
init|=
name|mk2
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"branchVisible\":{},\"regular1\":{},\"regular2\":{},\"regular3\":{},\"regular4\":{},\"regular5\":{},\":childNodeCount\":6}"
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
block|}
comment|/** Inspired by LastRevRecoveryTest.testRecover() - simplified and extended with journal related asserts **/
annotation|@
name|Test
specifier|public
name|void
name|lastRevRecoveryJournalTest
parameter_list|()
throws|throws
name|Exception
block|{
name|doLastRevRecoveryJournalTest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** Inspired by LastRevRecoveryTest.testRecover() - simplified and extended with journal related asserts **/
annotation|@
name|Test
specifier|public
name|void
name|lastRevRecoveryJournalTestWithConcurrency
parameter_list|()
throws|throws
name|Exception
block|{
name|doLastRevRecoveryJournalTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doLastRevRecoveryJournalTest
parameter_list|(
name|boolean
name|testConcurrency
parameter_list|)
throws|throws
name|Exception
block|{
name|DocumentMK
name|mk1
init|=
name|createMK
argument_list|(
literal|0
comment|/*clusterId via clusterNodes collection*/
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DocumentNodeStore
name|ds1
init|=
name|mk1
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|int
name|c1Id
init|=
name|ds1
operator|.
name|getClusterId
argument_list|()
decl_stmt|;
name|DocumentMK
name|mk2
init|=
name|createMK
argument_list|(
literal|0
comment|/*clusterId via clusterNodes collection*/
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DocumentNodeStore
name|ds2
init|=
name|mk2
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
specifier|final
name|int
name|c2Id
init|=
name|ds2
operator|.
name|getClusterId
argument_list|()
decl_stmt|;
comment|// should have 1 each with just the root changed
name|assertJournalEntries
argument_list|(
name|ds1
argument_list|,
literal|"{}"
argument_list|)
expr_stmt|;
name|assertJournalEntries
argument_list|(
name|ds2
argument_list|,
literal|"{}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countJournalEntries
argument_list|(
name|ds1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countJournalEntries
argument_list|(
name|ds2
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|//1. Create base structure /x/y
name|NodeBuilder
name|b1
init|=
name|ds1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
operator|.
name|child
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|ds1
operator|.
name|merge
argument_list|(
name|b1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|ds1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|//lastRev are persisted directly for new nodes. In case of
comment|// updates they are persisted via background jobs
comment|//1.2 Get last rev populated for root node for ds2
name|ds2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|NodeBuilder
name|b2
init|=
name|ds2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b2
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"f1"
argument_list|,
literal|"b1"
argument_list|)
expr_stmt|;
name|ds2
operator|.
name|merge
argument_list|(
name|b2
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|ds2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|//2. Add a new node /x/y/z
name|b2
operator|=
name|ds2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|b2
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
operator|.
name|child
argument_list|(
literal|"y"
argument_list|)
operator|.
name|child
argument_list|(
literal|"z"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|ds2
operator|.
name|merge
argument_list|(
name|b2
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|//Refresh DS1
name|ds1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
specifier|final
name|NodeDocument
name|z1
init|=
name|getDocument
argument_list|(
name|ds1
argument_list|,
literal|"/x/y/z"
argument_list|)
decl_stmt|;
name|NodeDocument
name|y1
init|=
name|getDocument
argument_list|(
name|ds1
argument_list|,
literal|"/x/y"
argument_list|)
decl_stmt|;
specifier|final
name|NodeDocument
name|x1
init|=
name|getDocument
argument_list|(
name|ds1
argument_list|,
literal|"/x"
argument_list|)
decl_stmt|;
name|Revision
name|zlastRev2
init|=
name|z1
operator|.
name|getLastRev
argument_list|()
operator|.
name|get
argument_list|(
name|c2Id
argument_list|)
decl_stmt|;
comment|// /x/y/z is a new node and does not have a _lastRev
name|assertNull
argument_list|(
name|zlastRev2
argument_list|)
expr_stmt|;
name|Revision
name|head2
init|=
name|ds2
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
comment|//lastRev should not be updated for C #2
name|assertNull
argument_list|(
name|y1
operator|.
name|getLastRev
argument_list|()
operator|.
name|get
argument_list|(
name|c2Id
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|LastRevRecoveryAgent
name|recovery
init|=
operator|new
name|LastRevRecoveryAgent
argument_list|(
name|ds1
argument_list|)
decl_stmt|;
comment|// besides the former root change, now 1 also has
specifier|final
name|String
name|change1
init|=
literal|"{\"x\":{\"y\":{}}}"
decl_stmt|;
name|assertJournalEntries
argument_list|(
name|ds1
argument_list|,
literal|"{}"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|change2
init|=
literal|"{\"x\":{}}"
decl_stmt|;
name|assertJournalEntries
argument_list|(
name|ds2
argument_list|,
literal|"{}"
argument_list|,
name|change2
argument_list|)
expr_stmt|;
name|String
name|change2b
init|=
literal|"{\"x\":{\"y\":{\"z\":{}}}}"
decl_stmt|;
if|if
condition|(
operator|!
name|testConcurrency
condition|)
block|{
comment|//Do not pass y1 but still y1 should be updated
name|recovery
operator|.
name|recover
argument_list|(
name|Iterators
operator|.
name|forArray
argument_list|(
name|x1
argument_list|,
name|z1
argument_list|)
argument_list|,
name|c2Id
argument_list|)
expr_stmt|;
comment|//Post recovery the lastRev should be updated for /x/y and /x
name|assertEquals
argument_list|(
name|head2
argument_list|,
name|getDocument
argument_list|(
name|ds1
argument_list|,
literal|"/x/y"
argument_list|)
operator|.
name|getLastRev
argument_list|()
operator|.
name|get
argument_list|(
name|c2Id
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|head2
argument_list|,
name|getDocument
argument_list|(
name|ds1
argument_list|,
literal|"/x"
argument_list|)
operator|.
name|getLastRev
argument_list|()
operator|.
name|get
argument_list|(
name|c2Id
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|head2
argument_list|,
name|getDocument
argument_list|(
name|ds1
argument_list|,
literal|"/"
argument_list|)
operator|.
name|getLastRev
argument_list|()
operator|.
name|get
argument_list|(
name|c2Id
argument_list|)
argument_list|)
expr_stmt|;
comment|// now 1 is unchanged, but 2 was recovered now, so has one more:
name|assertJournalEntries
argument_list|(
name|ds1
argument_list|,
literal|"{}"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// unchanged
name|assertJournalEntries
argument_list|(
name|ds2
argument_list|,
literal|"{}"
argument_list|,
name|change2
argument_list|,
name|change2b
argument_list|)
expr_stmt|;
comment|// just some no-ops:
name|recovery
operator|.
name|recover
argument_list|(
name|c2Id
argument_list|)
expr_stmt|;
name|recovery
operator|.
name|recover
argument_list|(
name|Iterators
operator|.
expr|<
name|NodeDocument
operator|>
name|emptyIterator
argument_list|()
argument_list|,
name|c2Id
argument_list|)
expr_stmt|;
name|assertJournalEntries
argument_list|(
name|ds1
argument_list|,
literal|"{}"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// unchanged
name|assertJournalEntries
argument_list|(
name|ds2
argument_list|,
literal|"{}"
argument_list|,
name|change2
argument_list|,
name|change2b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// do some concurrency testing as well to check if
specifier|final
name|int
name|NUM_THREADS
init|=
literal|200
decl_stmt|;
specifier|final
name|CountDownLatch
name|ready
init|=
operator|new
name|CountDownLatch
argument_list|(
name|NUM_THREADS
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|start
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|end
init|=
operator|new
name|CountDownLatch
argument_list|(
name|NUM_THREADS
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Exception
argument_list|>
name|exceptions
init|=
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Exception
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|th
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|ready
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|start
operator|.
name|await
argument_list|()
expr_stmt|;
name|recovery
operator|.
name|recover
argument_list|(
name|Iterators
operator|.
name|forArray
argument_list|(
name|x1
argument_list|,
name|z1
argument_list|)
argument_list|,
name|c2Id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|end
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|th
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|ready
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|start
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|end
operator|.
name|await
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournalEntries
argument_list|(
name|ds1
argument_list|,
literal|"{}"
argument_list|,
name|change1
argument_list|)
expr_stmt|;
comment|// unchanged
name|assertJournalEntries
argument_list|(
name|ds2
argument_list|,
literal|"{}"
argument_list|,
name|change2
argument_list|,
name|change2b
argument_list|)
expr_stmt|;
for|for
control|(
name|Exception
name|ex
range|:
name|exceptions
control|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
specifier|private
name|DocumentMK
name|createMK
parameter_list|(
name|int
name|clusterId
parameter_list|,
name|int
name|asyncDelay
parameter_list|)
block|{
if|if
condition|(
name|ds
operator|==
literal|null
condition|)
block|{
name|ds
operator|=
operator|new
name|MemoryDocumentStore
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bs
operator|==
literal|null
condition|)
block|{
name|bs
operator|=
operator|new
name|MemoryBlobStore
argument_list|()
expr_stmt|;
block|}
return|return
name|createMK
argument_list|(
name|clusterId
argument_list|,
name|asyncDelay
argument_list|,
name|ds
argument_list|,
name|bs
argument_list|)
return|;
block|}
block|}
end_class

end_unit

