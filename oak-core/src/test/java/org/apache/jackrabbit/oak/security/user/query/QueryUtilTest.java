begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|QueryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|impl
operator|.
name|LocalNameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|impl
operator|.
name|NamePathMapperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|value
operator|.
name|jcr
operator|.
name|PartialValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_class
specifier|public
class|class
name|QueryUtilTest
block|{
specifier|private
name|PartialValueFactory
name|valueFactory
init|=
operator|new
name|PartialValueFactory
argument_list|(
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|void
name|assertSearchRoot
parameter_list|(
annotation|@
name|NotNull
name|Map
argument_list|<
name|AuthorizableType
argument_list|,
name|String
argument_list|>
name|mapping
parameter_list|,
annotation|@
name|NotNull
name|ConfigurationParameters
name|params
parameter_list|)
block|{
for|for
control|(
name|AuthorizableType
name|type
range|:
name|mapping
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|s
init|=
name|mapping
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
operator|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|s
argument_list|)
operator|)
condition|?
name|QueryConstants
operator|.
name|SEARCH_ROOT_PATH
else|:
name|QueryConstants
operator|.
name|SEARCH_ROOT_PATH
operator|+
name|s
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|QueryUtil
operator|.
name|getSearchRoot
argument_list|(
name|type
argument_list|,
name|params
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSearchRootDefault
parameter_list|()
block|{
name|Map
argument_list|<
name|AuthorizableType
argument_list|,
name|String
argument_list|>
name|defaultPaths
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AuthorizableType
operator|.
name|USER
argument_list|,
name|UserConstants
operator|.
name|DEFAULT_USER_PATH
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|,
name|UserConstants
operator|.
name|DEFAULT_GROUP_PATH
argument_list|,
name|AuthorizableType
operator|.
name|AUTHORIZABLE
argument_list|,
literal|"/rep:security/rep:authorizables"
argument_list|)
decl_stmt|;
name|assertSearchRoot
argument_list|(
name|defaultPaths
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSearchRootSingleConfiguredPath
parameter_list|()
block|{
name|String
name|path
init|=
literal|"/configured/user_and_group/path"
decl_stmt|;
for|for
control|(
name|AuthorizableType
name|type
range|:
name|AuthorizableType
operator|.
name|values
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|QueryConstants
operator|.
name|SEARCH_ROOT_PATH
operator|+
name|path
argument_list|,
name|QueryUtil
operator|.
name|getSearchRoot
argument_list|(
name|type
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|PARAM_USER_PATH
argument_list|,
name|path
argument_list|,
name|UserConstants
operator|.
name|PARAM_GROUP_PATH
argument_list|,
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSearchRootUserPathParentOfGroup
parameter_list|()
block|{
name|ConfigurationParameters
name|params
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|PARAM_USER_PATH
argument_list|,
literal|"/configured/users"
argument_list|,
name|UserConstants
operator|.
name|PARAM_GROUP_PATH
argument_list|,
literal|"/configured/users/groups"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|AuthorizableType
argument_list|,
name|String
argument_list|>
name|paths
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AuthorizableType
operator|.
name|USER
argument_list|,
literal|"/configured/users"
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|,
literal|"/configured/users/groups"
argument_list|,
name|AuthorizableType
operator|.
name|AUTHORIZABLE
argument_list|,
literal|"/configured/users"
argument_list|)
decl_stmt|;
name|assertSearchRoot
argument_list|(
name|paths
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSearchRootGroupPathParentOfUser
parameter_list|()
block|{
name|ConfigurationParameters
name|params
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|PARAM_USER_PATH
argument_list|,
literal|"/configured/groups/users"
argument_list|,
name|UserConstants
operator|.
name|PARAM_GROUP_PATH
argument_list|,
literal|"/configured/groups"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|AuthorizableType
argument_list|,
name|String
argument_list|>
name|paths
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AuthorizableType
operator|.
name|USER
argument_list|,
literal|"/configured/groups/users"
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|,
literal|"/configured/groups"
argument_list|,
name|AuthorizableType
operator|.
name|AUTHORIZABLE
argument_list|,
literal|"/configured/groups"
argument_list|)
decl_stmt|;
name|assertSearchRoot
argument_list|(
name|paths
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSearchRootNoCommonAncestor
parameter_list|()
block|{
name|ConfigurationParameters
name|params
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|PARAM_USER_PATH
argument_list|,
literal|"/users"
argument_list|,
name|UserConstants
operator|.
name|PARAM_GROUP_PATH
argument_list|,
literal|"/groups"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|AuthorizableType
argument_list|,
name|String
argument_list|>
name|paths
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AuthorizableType
operator|.
name|USER
argument_list|,
literal|"/users"
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|,
literal|"/groups"
argument_list|,
name|AuthorizableType
operator|.
name|AUTHORIZABLE
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|assertSearchRoot
argument_list|(
name|paths
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSearchRootConfiguredPathDenotesRoot
parameter_list|()
block|{
name|ConfigurationParameters
name|params
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|PARAM_USER_PATH
argument_list|,
literal|"/users"
argument_list|,
name|UserConstants
operator|.
name|PARAM_GROUP_PATH
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|AuthorizableType
argument_list|,
name|String
argument_list|>
name|paths
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AuthorizableType
operator|.
name|USER
argument_list|,
literal|"/users"
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|,
literal|"/"
argument_list|,
name|AuthorizableType
operator|.
name|AUTHORIZABLE
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|assertSearchRoot
argument_list|(
name|paths
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSearchRoot
parameter_list|()
block|{
name|ConfigurationParameters
name|params
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|PARAM_USER_PATH
argument_list|,
literal|"/configured/user/path"
argument_list|,
name|UserConstants
operator|.
name|PARAM_GROUP_PATH
argument_list|,
literal|"/configured/group/path"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|AuthorizableType
argument_list|,
name|String
argument_list|>
name|paths
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AuthorizableType
operator|.
name|USER
argument_list|,
literal|"/configured/user/path"
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|,
literal|"/configured/group/path"
argument_list|,
name|AuthorizableType
operator|.
name|AUTHORIZABLE
argument_list|,
literal|"/configured"
argument_list|)
decl_stmt|;
name|assertSearchRoot
argument_list|(
name|paths
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNodeTypeName
parameter_list|()
block|{
name|Map
argument_list|<
name|AuthorizableType
argument_list|,
name|String
argument_list|>
name|ntNames
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AuthorizableType
operator|.
name|USER
argument_list|,
name|UserConstants
operator|.
name|NT_REP_USER
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|,
name|UserConstants
operator|.
name|NT_REP_GROUP
argument_list|,
name|AuthorizableType
operator|.
name|AUTHORIZABLE
argument_list|,
name|UserConstants
operator|.
name|NT_REP_AUTHORIZABLE
argument_list|)
decl_stmt|;
for|for
control|(
name|AuthorizableType
name|type
range|:
name|ntNames
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|ntNames
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|,
name|QueryUtil
operator|.
name|getNodeTypeName
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEscapeNodeName
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"name"
argument_list|,
name|JcrConstants
operator|.
name|JCR_CREATED
argument_list|,
literal|"%name"
argument_list|,
literal|"a%name"
argument_list|,
literal|"name%"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|assertEquals
argument_list|(
name|QueryUtils
operator|.
name|escapeNodeName
argument_list|(
name|name
argument_list|)
argument_list|,
name|QueryUtil
operator|.
name|escapeNodeName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFormatString
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|value
init|=
literal|"'string\\value"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|QueryUtils
operator|.
name|escapeForQuery
argument_list|(
name|value
argument_list|)
operator|+
literal|"'"
argument_list|,
name|QueryUtil
operator|.
name|format
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFormatBoolean
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|,
name|QueryUtil
operator|.
name|format
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFormatLong
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|longV
init|=
name|valueFactory
operator|.
name|createValue
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|QueryUtil
operator|.
name|format
argument_list|(
name|longV
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFormatDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|doubleV
init|=
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|2.3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
literal|2.3
argument_list|)
argument_list|,
name|QueryUtil
operator|.
name|format
argument_list|(
name|doubleV
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFormatDate
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|dateV
init|=
name|valueFactory
operator|.
name|createValue
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|dateString
init|=
name|dateV
operator|.
name|getString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"xs:dateTime('"
operator|+
name|dateString
operator|+
literal|"')"
argument_list|,
name|QueryUtil
operator|.
name|format
argument_list|(
name|dateV
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testFormatOtherTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|nameValue
init|=
name|valueFactory
operator|.
name|createValue
argument_list|(
name|JcrConstants
operator|.
name|JCR_CREATED
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|QueryUtil
operator|.
name|format
argument_list|(
name|nameValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEscapeForQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|NamePathMapper
name|namePathMapper
init|=
operator|new
name|NamePathMapperImpl
argument_list|(
operator|new
name|LocalNameMapper
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NamespaceRegistry
operator|.
name|PREFIX_JCR
argument_list|,
name|NamespaceRegistry
operator|.
name|NAMESPACE_JCR
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"myPrefix"
argument_list|,
name|NamespaceRegistry
operator|.
name|NAMESPACE_JCR
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|value
init|=
literal|"'string\\value"
decl_stmt|;
name|assertEquals
argument_list|(
name|QueryUtils
operator|.
name|escapeForQuery
argument_list|(
literal|"myPrefix:"
operator|+
name|value
argument_list|)
argument_list|,
name|QueryUtil
operator|.
name|escapeForQuery
argument_list|(
literal|"jcr:"
operator|+
name|value
argument_list|,
name|namePathMapper
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetCollation
parameter_list|()
throws|throws
name|Exception
block|{
name|assertSame
argument_list|(
name|RelationOp
operator|.
name|LT
argument_list|,
name|QueryUtil
operator|.
name|getCollation
argument_list|(
name|QueryBuilder
operator|.
name|Direction
operator|.
name|DESCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|RelationOp
operator|.
name|GT
argument_list|,
name|QueryUtil
operator|.
name|getCollation
argument_list|(
name|QueryBuilder
operator|.
name|Direction
operator|.
name|ASCENDING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

