begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexDefinition
operator|.
name|IndexingRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextContains
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextTerm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SCORE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getAncestorPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getDepth
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getParentPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
operator|.
name|PropertyRestriction
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|IndexPlan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|OrderEntry
import|;
end_import

begin_class
class|class
name|IndexPlanner
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IndexPlanner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|IndexDefinition
name|definition
decl_stmt|;
specifier|private
specifier|final
name|Filter
name|filter
decl_stmt|;
specifier|private
specifier|final
name|String
name|indexPath
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|sortOrder
decl_stmt|;
specifier|private
name|IndexNode
name|indexNode
decl_stmt|;
specifier|private
name|PlanResult
name|result
decl_stmt|;
specifier|public
name|IndexPlanner
parameter_list|(
name|IndexNode
name|indexNode
parameter_list|,
name|String
name|indexPath
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|sortOrder
parameter_list|)
block|{
name|this
operator|.
name|indexNode
operator|=
name|indexNode
expr_stmt|;
name|this
operator|.
name|indexPath
operator|=
name|indexPath
expr_stmt|;
name|this
operator|.
name|definition
operator|=
name|indexNode
operator|.
name|getDefinition
argument_list|()
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|sortOrder
operator|=
name|sortOrder
expr_stmt|;
block|}
name|IndexPlan
name|getPlan
parameter_list|()
block|{
name|IndexPlan
operator|.
name|Builder
name|builder
init|=
name|getPlanBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|definition
operator|.
name|isTestMode
argument_list|()
condition|)
block|{
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|notSupportedFeature
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"No plan found for filter [%s] "
operator|+
literal|"while using definition [%s] and testMode is found to be enabled"
argument_list|,
name|filter
argument_list|,
name|definition
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
else|else
block|{
name|builder
operator|.
name|setEstimatedEntryCount
argument_list|(
literal|1
argument_list|)
operator|.
name|setCostPerExecution
argument_list|(
literal|1e-3
argument_list|)
operator|.
name|setCostPerEntry
argument_list|(
literal|1e-3
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|!=
literal|null
condition|?
name|builder
operator|.
name|build
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"IndexPlanner{"
operator|+
literal|"indexPath='"
operator|+
name|indexPath
operator|+
literal|'\''
operator|+
literal|", filter="
operator|+
name|filter
operator|+
literal|", sortOrder="
operator|+
name|sortOrder
operator|+
literal|'}'
return|;
block|}
specifier|private
name|IndexPlan
operator|.
name|Builder
name|getPlanBuilder
parameter_list|()
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Evaluating plan with index definition {}"
argument_list|,
name|definition
argument_list|)
expr_stmt|;
name|FullTextExpression
name|ft
init|=
name|filter
operator|.
name|getFullTextConstraint
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|definition
operator|.
name|getVersion
argument_list|()
operator|.
name|isAtLeast
argument_list|(
name|IndexFormatVersion
operator|.
name|V2
argument_list|)
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Index is old format. Not supported"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|//Query Fulltext and Index does not support fulltext
if|if
condition|(
name|ft
operator|!=
literal|null
operator|&&
operator|!
name|definition
operator|.
name|isFullTextEnabled
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|IndexingRule
name|indexingRule
init|=
name|getApplicableRule
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexingRule
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|//Query Fulltext and indexing rule does not support fulltext
if|if
condition|(
name|ft
operator|!=
literal|null
operator|&&
operator|!
name|indexingRule
operator|.
name|isFulltextEnabled
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|checkForQueryPaths
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Opting out due mismatch between path restriction {} and query paths {}"
argument_list|,
name|filter
operator|.
name|getPath
argument_list|()
argument_list|,
name|definition
operator|.
name|getQueryPaths
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|result
operator|=
operator|new
name|PlanResult
argument_list|(
name|indexPath
argument_list|,
name|definition
argument_list|,
name|indexingRule
argument_list|)
expr_stmt|;
if|if
condition|(
name|definition
operator|.
name|hasFunctionDefined
argument_list|()
operator|&&
name|filter
operator|.
name|getPropertyRestriction
argument_list|(
name|definition
operator|.
name|getFunctionName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|//If native function is handled by this index then ensure
comment|// that lowest cost if returned
return|return
name|defaultPlan
argument_list|()
operator|.
name|setEstimatedEntryCount
argument_list|(
literal|1
argument_list|)
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|indexedProps
init|=
name|newArrayListWithCapacity
argument_list|(
name|filter
operator|.
name|getPropertyRestrictions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|//Optimization - Go further only if any of the property is configured
comment|//for property index
if|if
condition|(
name|indexingRule
operator|.
name|propertyIndexEnabled
condition|)
block|{
for|for
control|(
name|PropertyRestriction
name|pr
range|:
name|filter
operator|.
name|getPropertyRestrictions
argument_list|()
control|)
block|{
name|PropertyDefinition
name|pd
init|=
name|indexingRule
operator|.
name|getConfig
argument_list|(
name|pr
operator|.
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pd
operator|!=
literal|null
operator|&&
name|pd
operator|.
name|propertyIndexEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|pr
operator|.
name|isNullRestriction
argument_list|()
operator|&&
operator|!
name|pd
operator|.
name|nullCheckEnabled
condition|)
block|{
continue|continue;
block|}
name|indexedProps
operator|.
name|add
argument_list|(
name|pr
operator|.
name|propertyName
argument_list|)
expr_stmt|;
name|result
operator|.
name|propDefns
operator|.
name|put
argument_list|(
name|pr
operator|.
name|propertyName
argument_list|,
name|pd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|evalNodeTypeRestrictions
init|=
name|canEvalNodeTypeRestrictions
argument_list|(
name|indexingRule
argument_list|)
decl_stmt|;
name|boolean
name|evalPathRestrictions
init|=
name|canEvalPathRestrictions
argument_list|(
name|indexingRule
argument_list|)
decl_stmt|;
name|boolean
name|canEvalAlFullText
init|=
name|canEvalAllFullText
argument_list|(
name|indexingRule
argument_list|,
name|ft
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|!=
literal|null
operator|&&
operator|!
name|canEvalAlFullText
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|//Fulltext expression can also be like jcr:contains(jcr:content/metadata/@format, 'image')
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|sortOrder
init|=
name|createSortOrder
argument_list|(
name|indexingRule
argument_list|)
decl_stmt|;
name|boolean
name|canSort
init|=
name|canSortByProperty
argument_list|(
name|sortOrder
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|indexedProps
operator|.
name|isEmpty
argument_list|()
operator|||
name|canSort
operator|||
name|ft
operator|!=
literal|null
operator|||
name|evalPathRestrictions
operator|||
name|evalNodeTypeRestrictions
condition|)
block|{
comment|//TODO Need a way to have better cost estimate to indicate that
comment|//this index can evaluate more propertyRestrictions natively (if more props are indexed)
comment|//For now we reduce cost per entry
name|int
name|costPerEntryFactor
init|=
name|indexedProps
operator|.
name|size
argument_list|()
decl_stmt|;
name|costPerEntryFactor
operator|+=
name|sortOrder
operator|.
name|size
argument_list|()
expr_stmt|;
comment|//this index can evaluate more propertyRestrictions natively (if more props are indexed)
comment|//For now we reduce cost per entry
name|IndexPlan
operator|.
name|Builder
name|plan
init|=
name|defaultPlan
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sortOrder
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|plan
operator|.
name|setSortOrder
argument_list|(
name|sortOrder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|costPerEntryFactor
operator|==
literal|0
condition|)
block|{
name|costPerEntryFactor
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|enableNonFullTextConstraints
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|evalNodeTypeRestrictions
condition|)
block|{
name|result
operator|.
name|enableNodeTypeEvaluation
argument_list|()
expr_stmt|;
block|}
return|return
name|plan
operator|.
name|setCostPerEntry
argument_list|(
name|definition
operator|.
name|getCostPerEntry
argument_list|()
operator|/
name|costPerEntryFactor
argument_list|)
return|;
block|}
comment|//TODO Support for property existence queries
comment|//TODO support for nodeName queries
return|return
literal|null
return|;
block|}
comment|/**      * Check if there is a mismatch between QueryPaths associated with index      * and path restriction specified in query       * @return true if QueryPaths and path restrictions do not have any conflict      */
specifier|private
name|boolean
name|checkForQueryPaths
parameter_list|()
block|{
name|String
index|[]
name|queryPaths
init|=
name|definition
operator|.
name|getQueryPaths
argument_list|()
decl_stmt|;
if|if
condition|(
name|queryPaths
operator|==
literal|null
condition|)
block|{
comment|//No explicit value specified. Assume '/' which results in true
return|return
literal|true
return|;
block|}
name|String
name|pathRestriction
init|=
name|filter
operator|.
name|getPath
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|queryPath
range|:
name|queryPaths
control|)
block|{
if|if
condition|(
name|queryPath
operator|.
name|equals
argument_list|(
name|pathRestriction
argument_list|)
operator|||
name|PathUtils
operator|.
name|isAncestor
argument_list|(
name|queryPath
argument_list|,
name|pathRestriction
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|canSortByProperty
parameter_list|(
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|sortOrder
parameter_list|)
block|{
if|if
condition|(
name|sortOrder
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// If jcr:score is the only sort order then opt out
if|if
condition|(
name|sortOrder
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|JCR_SCORE
operator|.
name|equals
argument_list|(
name|sortOrder
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPropertyName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|canEvalAllFullText
parameter_list|(
specifier|final
name|IndexingRule
name|indexingRule
parameter_list|,
name|FullTextExpression
name|ft
parameter_list|)
block|{
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|relPaths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|nonIndexedPaths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|relativeParentsFound
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|ft
operator|.
name|accept
argument_list|(
operator|new
name|FullTextVisitor
operator|.
name|FullTextVisitorBase
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|FullTextContains
name|contains
parameter_list|)
block|{
name|visitTerm
argument_list|(
name|contains
operator|.
name|getPropertyName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|FullTextTerm
name|term
parameter_list|)
block|{
name|visitTerm
argument_list|(
name|term
operator|.
name|getPropertyName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|visitTerm
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
name|String
name|p
init|=
name|propertyName
decl_stmt|;
name|String
name|propertyPath
init|=
literal|null
decl_stmt|;
name|String
name|nodePath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|relPaths
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
literal|"../"
argument_list|)
operator|||
name|p
operator|.
name|startsWith
argument_list|(
literal|"./"
argument_list|)
condition|)
block|{
name|relPaths
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|relativeParentsFound
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getDepth
argument_list|(
name|p
argument_list|)
operator|>
literal|1
condition|)
block|{
name|String
name|parent
init|=
name|getParentPath
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|LucenePropertyIndex
operator|.
name|isNodePath
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|nodePath
operator|=
name|parent
expr_stmt|;
block|}
else|else
block|{
name|propertyPath
operator|=
name|p
expr_stmt|;
block|}
name|relPaths
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|propertyPath
operator|=
name|p
expr_stmt|;
name|relPaths
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodePath
operator|!=
literal|null
operator|&&
operator|!
name|indexingRule
operator|.
name|isAggregated
argument_list|(
name|nodePath
argument_list|)
condition|)
block|{
name|nonIndexedPaths
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyPath
operator|!=
literal|null
operator|&&
operator|!
name|indexingRule
operator|.
name|isIndexed
argument_list|(
name|propertyPath
argument_list|)
condition|)
block|{
name|nonIndexedPaths
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|relativeParentsFound
operator|.
name|get
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Relative parents found {} which are not supported"
argument_list|,
name|relPaths
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|nonIndexedPaths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|relPaths
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Following relative  property paths are not index"
argument_list|,
name|relPaths
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|result
operator|.
name|setParentPath
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|relPaths
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|//Such path translation would only work if index contains
comment|//all the nodes
return|return
name|definition
operator|.
name|indexesAllTypes
argument_list|()
return|;
block|}
else|else
block|{
name|result
operator|.
name|setParentPath
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|canEvalPathRestrictions
parameter_list|(
name|IndexingRule
name|rule
parameter_list|)
block|{
comment|//Opt out if one is looking for all children for '/' as its equivalent to
comment|//NO_RESTRICTION
if|if
condition|(
name|filter
operator|.
name|getPathRestriction
argument_list|()
operator|==
name|Filter
operator|.
name|PathRestriction
operator|.
name|NO_RESTRICTION
operator|||
operator|(
name|filter
operator|.
name|getPathRestriction
argument_list|()
operator|==
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
operator|&&
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|filter
operator|.
name|getPath
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//If no other restrictions is provided and query is pure
comment|//path restriction based then need to be sure that index definition at least
comment|//allows indexing all the path for given nodeType
return|return
name|definition
operator|.
name|evaluatePathRestrictions
argument_list|()
operator|&&
name|rule
operator|.
name|indexesAllNodesOfMatchingType
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|canEvalNodeTypeRestrictions
parameter_list|(
name|IndexingRule
name|rule
parameter_list|)
block|{
comment|//No need to handle nt:base
if|if
condition|(
name|filter
operator|.
name|matchesAllTypes
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//Only opt in if rule is not derived from nt:base otherwise it would
comment|//get used when there a full text index on all nodes
return|return
name|rule
operator|.
name|indexesAllNodesOfMatchingType
argument_list|()
operator|&&
operator|!
name|rule
operator|.
name|isBasedOnNtBase
argument_list|()
return|;
block|}
specifier|private
name|IndexPlan
operator|.
name|Builder
name|defaultPlan
parameter_list|()
block|{
return|return
operator|new
name|IndexPlan
operator|.
name|Builder
argument_list|()
operator|.
name|setCostPerExecution
argument_list|(
name|definition
operator|.
name|getCostPerExecution
argument_list|()
argument_list|)
operator|.
name|setCostPerEntry
argument_list|(
name|definition
operator|.
name|getCostPerEntry
argument_list|()
argument_list|)
operator|.
name|setFulltextIndex
argument_list|(
name|definition
operator|.
name|isFullTextEnabled
argument_list|()
argument_list|)
operator|.
name|setIncludesNodeData
argument_list|(
literal|false
argument_list|)
comment|// we should not include node data
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
operator|.
name|setPathPrefix
argument_list|(
name|getPathPrefix
argument_list|()
argument_list|)
operator|.
name|setDelayed
argument_list|(
literal|true
argument_list|)
comment|//Lucene is always async
operator|.
name|setAttribute
argument_list|(
name|LucenePropertyIndex
operator|.
name|ATTR_PLAN_RESULT
argument_list|,
name|result
argument_list|)
operator|.
name|setEstimatedEntryCount
argument_list|(
name|estimatedEntryCount
argument_list|()
argument_list|)
operator|.
name|setPlanName
argument_list|(
name|indexPath
argument_list|)
return|;
block|}
specifier|private
name|long
name|estimatedEntryCount
parameter_list|()
block|{
comment|//Other index only compete in case of property indexes. For fulltext
comment|//index return true count so as to allow multiple property indexes
comment|//to be compared fairly
name|FullTextExpression
name|ft
init|=
name|filter
operator|.
name|getFullTextConstraint
argument_list|()
decl_stmt|;
if|if
condition|(
name|ft
operator|!=
literal|null
operator|&&
name|definition
operator|.
name|isFullTextEnabled
argument_list|()
condition|)
block|{
return|return
name|definition
operator|.
name|getFulltextEntryCount
argument_list|(
name|getReader
argument_list|()
operator|.
name|numDocs
argument_list|()
argument_list|)
return|;
block|}
return|return
name|Math
operator|.
name|min
argument_list|(
name|definition
operator|.
name|getEntryCount
argument_list|()
argument_list|,
name|getReader
argument_list|()
operator|.
name|numDocs
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|String
name|getPathPrefix
parameter_list|()
block|{
comment|// 2 = /oak:index/<index name>
name|String
name|parentPath
init|=
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|indexPath
argument_list|,
literal|2
argument_list|)
decl_stmt|;
return|return
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|parentPath
argument_list|)
condition|?
literal|""
else|:
name|parentPath
return|;
block|}
specifier|private
name|IndexReader
name|getReader
parameter_list|()
block|{
return|return
name|indexNode
operator|.
name|getSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
return|;
block|}
specifier|private
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|createSortOrder
parameter_list|(
name|IndexingRule
name|rule
parameter_list|)
block|{
if|if
condition|(
name|sortOrder
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|orderEntries
init|=
name|newArrayListWithCapacity
argument_list|(
name|sortOrder
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|OrderEntry
name|o
range|:
name|sortOrder
control|)
block|{
name|PropertyDefinition
name|pd
init|=
name|rule
operator|.
name|getConfig
argument_list|(
name|o
operator|.
name|getPropertyName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pd
operator|!=
literal|null
operator|&&
name|pd
operator|.
name|ordered
operator|&&
name|o
operator|.
name|getPropertyType
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|o
operator|.
name|getPropertyType
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|orderEntries
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
comment|//Lucene can manage any order desc/asc
name|result
operator|.
name|sortedProperties
operator|.
name|add
argument_list|(
name|pd
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|.
name|getPropertyName
argument_list|()
operator|.
name|equals
argument_list|(
name|IndexDefinition
operator|.
name|NATIVE_SORT_ORDER
operator|.
name|getPropertyName
argument_list|()
argument_list|)
condition|)
block|{
comment|// Supports jcr:score descending natively
name|orderEntries
operator|.
name|add
argument_list|(
name|IndexDefinition
operator|.
name|NATIVE_SORT_ORDER
argument_list|)
expr_stmt|;
block|}
block|}
comment|//TODO Should we return order entries only when all order clauses are satisfied
return|return
name|orderEntries
return|;
block|}
annotation|@
name|CheckForNull
specifier|private
name|IndexingRule
name|getApplicableRule
parameter_list|()
block|{
if|if
condition|(
name|filter
operator|.
name|matchesAllTypes
argument_list|()
condition|)
block|{
return|return
name|definition
operator|.
name|getApplicableIndexingRule
argument_list|(
name|JcrConstants
operator|.
name|NT_BASE
argument_list|)
return|;
block|}
else|else
block|{
comment|//TODO May be better if filter.getSuperTypes returned a list which maintains
comment|//inheritance order and then we iterate over that
for|for
control|(
name|IndexingRule
name|rule
range|:
name|definition
operator|.
name|getDefinedRules
argument_list|()
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|getSupertypes
argument_list|()
operator|.
name|contains
argument_list|(
name|rule
operator|.
name|getNodeTypeName
argument_list|()
argument_list|)
condition|)
block|{
comment|//Theoretically there may be multiple rules for same nodeType with
comment|//some condition defined. So again find a rule which applies
name|IndexingRule
name|matchingRule
init|=
name|definition
operator|.
name|getApplicableIndexingRule
argument_list|(
name|rule
operator|.
name|getNodeTypeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchingRule
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Applicable IndexingRule found {}"
argument_list|,
name|matchingRule
argument_list|)
expr_stmt|;
return|return
name|rule
return|;
block|}
block|}
comment|//nt:base is applicable for all. This specific condition is
comment|//required to support mixin case as filter.getSupertypes() for mixin based
comment|//query only includes the mixin type and not nt:base
if|if
condition|(
name|rule
operator|.
name|getNodeTypeName
argument_list|()
operator|.
name|equals
argument_list|(
name|JcrConstants
operator|.
name|NT_BASE
argument_list|)
condition|)
block|{
return|return
name|rule
return|;
block|}
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"No applicable IndexingRule found for any of the superTypes {}"
argument_list|,
name|filter
operator|.
name|getSupertypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|notSupportedFeature
parameter_list|()
block|{
if|if
condition|(
name|filter
operator|.
name|getPathRestriction
argument_list|()
operator|==
name|Filter
operator|.
name|PathRestriction
operator|.
name|NO_RESTRICTION
operator|&&
name|filter
operator|.
name|matchesAllTypes
argument_list|()
operator|&&
name|filter
operator|.
name|getPropertyRestrictions
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//This mode includes name(), localname() queries
comment|//OrImpl [a/name] = 'Hello' or [b/name] = 'World'
comment|//Relative parent properties where [../foo1] is not null
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|//~--------------------------------------------------------< PlanResult>
specifier|public
specifier|static
class|class
name|PlanResult
block|{
specifier|final
name|String
name|indexPath
decl_stmt|;
specifier|final
name|IndexDefinition
name|indexDefinition
decl_stmt|;
specifier|final
name|IndexingRule
name|indexingRule
decl_stmt|;
specifier|private
name|List
argument_list|<
name|PropertyDefinition
argument_list|>
name|sortedProperties
init|=
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyDefinition
argument_list|>
name|propDefns
init|=
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|nonFullTextConstraints
decl_stmt|;
specifier|private
name|int
name|parentDepth
decl_stmt|;
specifier|private
name|String
name|parentPathSegment
decl_stmt|;
specifier|private
name|boolean
name|relativize
decl_stmt|;
specifier|private
name|boolean
name|nodeTypeRestrictions
decl_stmt|;
specifier|public
name|PlanResult
parameter_list|(
name|String
name|indexPath
parameter_list|,
name|IndexDefinition
name|defn
parameter_list|,
name|IndexingRule
name|indexingRule
parameter_list|)
block|{
name|this
operator|.
name|indexPath
operator|=
name|indexPath
expr_stmt|;
name|this
operator|.
name|indexDefinition
operator|=
name|defn
expr_stmt|;
name|this
operator|.
name|indexingRule
operator|=
name|indexingRule
expr_stmt|;
block|}
specifier|public
name|PropertyDefinition
name|getPropDefn
parameter_list|(
name|PropertyRestriction
name|pr
parameter_list|)
block|{
return|return
name|propDefns
operator|.
name|get
argument_list|(
name|pr
operator|.
name|propertyName
argument_list|)
return|;
block|}
specifier|public
name|PropertyDefinition
name|getOrderedProperty
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|sortedProperties
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isPathTransformed
parameter_list|()
block|{
return|return
name|relativize
return|;
block|}
comment|/**          * Transforms the given path if the query involved relative properties and index          * is not making use of aggregated properties. If the path          *          * @param path path to transform          * @return transformed path. Returns null if the path does not confirm to relative          * path requirements          */
annotation|@
name|CheckForNull
specifier|public
name|String
name|transformPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|isPathTransformed
argument_list|()
condition|)
block|{
comment|// get the base path
comment|// ensure the path ends with the given
comment|// relative path
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
name|parentPathSegment
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getAncestorPath
argument_list|(
name|path
argument_list|,
name|parentDepth
argument_list|)
return|;
block|}
return|return
name|path
return|;
block|}
specifier|public
name|boolean
name|evaluateNonFullTextConstraints
parameter_list|()
block|{
return|return
name|nonFullTextConstraints
return|;
block|}
specifier|public
name|boolean
name|evaluateNodeTypeRestriction
parameter_list|()
block|{
return|return
name|nodeTypeRestrictions
return|;
block|}
specifier|private
name|void
name|setParentPath
parameter_list|(
name|String
name|relativePath
parameter_list|)
block|{
name|parentPathSegment
operator|=
literal|"/"
operator|+
name|relativePath
expr_stmt|;
if|if
condition|(
name|relativePath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// we only restrict non-full-text conditions if there is
comment|// no relative property in the full-text constraint
name|enableNonFullTextConstraints
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|relativize
operator|=
literal|true
expr_stmt|;
name|parentDepth
operator|=
name|getDepth
argument_list|(
name|relativePath
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|enableNonFullTextConstraints
parameter_list|()
block|{
name|nonFullTextConstraints
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|enableNodeTypeEvaluation
parameter_list|()
block|{
name|nodeTypeRestrictions
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

