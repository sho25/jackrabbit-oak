begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|SimpleExcerptProvider
operator|.
name|highlight
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SimpleExcerptProviderTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|simpleTest
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"<div><span><strong>fox</strong> is jumping</span></div>"
argument_list|,
name|highlight
argument_list|(
name|sb
argument_list|(
literal|"fox is jumping"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"fox"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<div><span>fox is<strong>jumping</strong></span></div>"
argument_list|,
name|highlight
argument_list|(
name|sb
argument_list|(
literal|"fox is jumping"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"jump*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|highlightWithWildCard
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"<div><span><strong>fox</strong> is jumping</span></div>"
argument_list|,
name|highlight
argument_list|(
name|sb
argument_list|(
literal|"fox is jumping"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"fox *"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|highlightIgnoreStar
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"<div><span>10 * 10</span></div>"
argument_list|,
name|highlight
argument_list|(
name|sb
argument_list|(
literal|"10 * 10"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"fox *"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|randomized
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|set
init|=
literal|"abc*\'\"<> "
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|highlight
argument_list|(
name|sb
argument_list|(
name|randomString
argument_list|(
name|r
argument_list|,
name|set
argument_list|)
argument_list|)
argument_list|,
name|of
argument_list|(
name|randomString
argument_list|(
name|r
argument_list|,
name|set
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|hightlightCompleteWordOnly
parameter_list|()
block|{
name|String
index|[]
name|whitespaces
init|=
operator|new
name|String
index|[]
block|{
literal|" "
block|,
literal|"\t"
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|simpleCheck
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
comment|// highlight "of"
comment|// simple ones
name|simpleCheck
operator|.
name|put
argument_list|(
literal|"official conflict of interest"
argument_list|,
literal|"<div><span>official conflict<strong>of</strong> interest</span></div>"
argument_list|)
expr_stmt|;
name|simpleCheck
operator|.
name|put
argument_list|(
literal|"of to new city"
argument_list|,
literal|"<div><span><strong>of</strong> to new city</span></div>"
argument_list|)
expr_stmt|;
name|simpleCheck
operator|.
name|put
argument_list|(
literal|"out of the roof"
argument_list|,
literal|"<div><span>out<strong>of</strong> the roof</span></div>"
argument_list|)
expr_stmt|;
name|simpleCheck
operator|.
name|put
argument_list|(
literal|"well this is of"
argument_list|,
literal|"<div><span>well this is<strong>of</strong></span></div>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|simple
range|:
name|simpleCheck
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|text
init|=
name|simple
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|expect
init|=
name|simple
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|whitespace
range|:
name|whitespaces
control|)
block|{
name|text
operator|=
name|text
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
name|whitespace
argument_list|)
expr_stmt|;
name|expect
operator|=
name|expect
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
name|whitespace
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"highlighting '"
operator|+
name|text
operator|+
literal|"' for 'of' (whitespace - '"
operator|+
name|whitespace
operator|+
literal|"')"
argument_list|,
name|expect
argument_list|,
name|highlight
argument_list|(
name|sb
argument_list|(
name|text
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"of"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|wildcardCheck
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
comment|// highlight "of*"
name|wildcardCheck
operator|.
name|put
argument_list|(
literal|"office room"
argument_list|,
literal|"<div><span><strong>office</strong> room</span></div>"
argument_list|)
expr_stmt|;
name|wildcardCheck
operator|.
name|put
argument_list|(
literal|"office room off"
argument_list|,
literal|"<div><span><strong>office</strong> room<strong>off</strong></span></div>"
argument_list|)
expr_stmt|;
name|wildcardCheck
operator|.
name|put
argument_list|(
literal|"big office room"
argument_list|,
literal|"<div><span>big<strong>office</strong> room</span></div>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|wildcard
range|:
name|wildcardCheck
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|text
init|=
name|wildcard
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|expect
init|=
name|wildcard
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|whitespace
range|:
name|whitespaces
control|)
block|{
name|text
operator|=
name|text
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
name|whitespace
argument_list|)
expr_stmt|;
name|expect
operator|=
name|expect
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
name|whitespace
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"highlighting '"
operator|+
name|text
operator|+
literal|"' for 'of*' (whitespace - '"
operator|+
name|whitespace
operator|+
literal|"')"
argument_list|,
name|expect
argument_list|,
name|highlight
argument_list|(
name|sb
argument_list|(
name|text
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"of*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|randomString
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|set
parameter_list|)
block|{
name|int
name|len
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
name|set
operator|.
name|charAt
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|set
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|StringBuilder
name|sb
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
name|text
argument_list|)
return|;
block|}
block|}
end_class

end_unit

