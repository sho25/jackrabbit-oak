begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Workspace
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * NodeTypeDefinitionManagementTest... TODO  *  * copied from jr2x RepositoryOperationTest  */
end_comment

begin_class
annotation|@
name|Ignore
argument_list|(
literal|"OAK-51"
argument_list|)
specifier|public
class|class
name|NodeTypeDefinitionManagementTest
extends|extends
name|AbstractEvaluationTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|JCR_NODE_TYPE_DEFINITION_MANAGEMENT
init|=
literal|"jcr:nodeTypeDefinitionManagement"
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|assertPrivilege
argument_list|(
literal|null
argument_list|,
name|JCR_NODE_TYPE_DEFINITION_MANAGEMENT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
for|for
control|(
name|AccessControlPolicy
name|policy
range|:
name|acMgr
operator|.
name|getPolicies
argument_list|(
literal|null
argument_list|)
control|)
block|{
name|acMgr
operator|.
name|removePolicy
argument_list|(
literal|null
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegisterNodeType
parameter_list|()
throws|throws
name|Exception
block|{
name|Workspace
name|testWsp
init|=
name|getTestSession
argument_list|()
operator|.
name|getWorkspace
argument_list|()
decl_stmt|;
name|NodeTypeManager
name|ntm
init|=
name|testWsp
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|NodeTypeTemplate
name|ntd
init|=
name|ntm
operator|.
name|createNodeTypeTemplate
argument_list|()
decl_stmt|;
name|ntd
operator|.
name|setName
argument_list|(
literal|"testNodeType"
argument_list|)
expr_stmt|;
name|ntd
operator|.
name|setMixin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|ntm
operator|.
name|registerNodeType
argument_list|(
name|ntd
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Node type registration should be denied."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|ntm
operator|.
name|registerNodeType
argument_list|(
name|ntd
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Node type registration should be denied."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
name|NodeTypeTemplate
index|[]
name|ntds
init|=
operator|new
name|NodeTypeTemplate
index|[
literal|2
index|]
decl_stmt|;
name|ntds
index|[
literal|0
index|]
operator|=
name|ntd
expr_stmt|;
name|ntds
index|[
literal|1
index|]
operator|=
name|ntm
operator|.
name|createNodeTypeTemplate
argument_list|()
expr_stmt|;
name|ntds
index|[
literal|1
index|]
operator|.
name|setName
argument_list|(
literal|"anotherNodeType"
argument_list|)
expr_stmt|;
name|ntds
index|[
literal|1
index|]
operator|.
name|setDeclaredSuperTypeNames
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"nt:file"
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|ntm
operator|.
name|registerNodeTypes
argument_list|(
name|ntds
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Node type registration should be denied."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|ntm
operator|.
name|registerNodeTypes
argument_list|(
name|ntds
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Node type registration should be denied."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegisterNodeTypeWithPrivilege
parameter_list|()
throws|throws
name|Exception
block|{
name|modify
argument_list|(
literal|null
argument_list|,
name|JCR_NODE_TYPE_DEFINITION_MANAGEMENT
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPrivilege
argument_list|(
literal|null
argument_list|,
name|JCR_NODE_TYPE_DEFINITION_MANAGEMENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|Workspace
name|testWsp
init|=
name|getTestSession
argument_list|()
operator|.
name|getWorkspace
argument_list|()
decl_stmt|;
name|NodeTypeManager
name|ntm
init|=
name|testWsp
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|NodeTypeTemplate
name|ntd
init|=
name|ntm
operator|.
name|createNodeTypeTemplate
argument_list|()
decl_stmt|;
name|ntd
operator|.
name|setName
argument_list|(
literal|"testNodeType"
argument_list|)
expr_stmt|;
name|ntd
operator|.
name|setMixin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ntm
operator|.
name|registerNodeType
argument_list|(
name|ntd
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NodeTypeTemplate
index|[]
name|ntds
init|=
operator|new
name|NodeTypeTemplate
index|[
literal|2
index|]
decl_stmt|;
name|ntds
index|[
literal|0
index|]
operator|=
name|ntd
expr_stmt|;
name|ntds
index|[
literal|1
index|]
operator|=
name|ntm
operator|.
name|createNodeTypeTemplate
argument_list|()
expr_stmt|;
name|ntds
index|[
literal|1
index|]
operator|.
name|setName
argument_list|(
literal|"anotherNodeType"
argument_list|)
expr_stmt|;
name|ntds
index|[
literal|1
index|]
operator|.
name|setDeclaredSuperTypeNames
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"nt:file"
block|}
argument_list|)
expr_stmt|;
name|ntm
operator|.
name|registerNodeTypes
argument_list|(
name|ntds
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|modify
argument_list|(
literal|null
argument_list|,
name|JCR_NODE_TYPE_DEFINITION_MANAGEMENT
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|assertPrivilege
argument_list|(
literal|null
argument_list|,
name|JCR_NODE_TYPE_DEFINITION_MANAGEMENT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnRegisterNodeType
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeTypeManager
name|ntm
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|NodeTypeTemplate
name|ntd
init|=
name|ntm
operator|.
name|createNodeTypeTemplate
argument_list|()
decl_stmt|;
name|ntd
operator|.
name|setName
argument_list|(
literal|"testNodeType"
argument_list|)
expr_stmt|;
name|ntd
operator|.
name|setMixin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ntm
operator|.
name|registerNodeType
argument_list|(
name|ntd
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Workspace
name|testWsp
init|=
name|getTestSession
argument_list|()
operator|.
name|getWorkspace
argument_list|()
decl_stmt|;
try|try
block|{
try|try
block|{
name|NodeTypeManager
name|testNtm
init|=
name|testWsp
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|testNtm
operator|.
name|unregisterNodeType
argument_list|(
name|ntd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Namespace unregistration should be denied."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|NodeTypeManager
name|testNtm
init|=
name|testWsp
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|testNtm
operator|.
name|unregisterNodeTypes
argument_list|(
operator|new
name|String
index|[]
block|{
name|ntd
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Namespace unregistration should be denied."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
finally|finally
block|{
comment|// clean up (not supported by jackrabbit-core)
try|try
block|{
name|ntm
operator|.
name|unregisterNodeType
argument_list|(
name|ntd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ns unregistration is not supported by jackrabbit-core.
block|}
block|}
block|}
block|}
end_class

end_unit

