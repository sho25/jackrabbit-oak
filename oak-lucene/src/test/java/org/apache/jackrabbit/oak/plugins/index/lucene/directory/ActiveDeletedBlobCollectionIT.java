begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|FileDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|MongoConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|MongoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|MongoConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexCopier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|ActiveDeletedBlobCollectorFactory
operator|.
name|ActiveDeletedBlobCollectorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|ExtractedTextCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FulltextIndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|DefaultValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ValidatorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ActiveDeletedBlobCollectionIT
extends|extends
name|AbstractActiveDeletedBlobTest
block|{
annotation|@
name|Rule
specifier|public
name|MongoConnectionFactory
name|connectionFactory
init|=
operator|new
name|MongoConnectionFactory
argument_list|()
decl_stmt|;
specifier|private
name|MongoConnection
name|mongoConnection
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|DataStoreType
name|dataStoreType
decl_stmt|;
specifier|private
name|FailOnDemandValidatorProvider
name|failOnDemandValidatorProvider
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|assumeMongo
parameter_list|()
block|{
name|assumeTrue
argument_list|(
name|MongoUtils
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
block|}
enum|enum
name|DataStoreType
block|{
name|WITH_FDS
block|,
name|WITHOUT_FDS
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|fixtures
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|DataStoreType
operator|.
name|WITHOUT_FDS
block|}
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|DataStoreType
operator|.
name|WITH_FDS
block|}
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|ActiveDeletedBlobCollectionIT
parameter_list|(
name|DataStoreType
name|dataStoreType
parameter_list|)
block|{
name|this
operator|.
name|dataStoreType
operator|=
name|dataStoreType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
name|File
name|deletedBlobsDir
init|=
operator|new
name|File
argument_list|(
name|blobCollectionRoot
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"deleted-blobs"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|deletedBlobsDir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|adbc
operator|=
operator|new
name|ActiveDeletedBlobCollectorImpl
argument_list|(
name|clock
argument_list|,
name|deletedBlobsDir
argument_list|,
name|executorService
argument_list|)
expr_stmt|;
name|IndexCopier
name|copier
init|=
name|createIndexCopier
argument_list|()
decl_stmt|;
name|editorProvider
operator|=
operator|new
name|LuceneIndexEditorProvider
argument_list|(
name|copier
argument_list|,
literal|null
argument_list|,
operator|new
name|ExtractedTextCache
argument_list|(
literal|10
operator|*
name|FileUtils
operator|.
name|ONE_MB
argument_list|,
literal|100
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Mounts
operator|.
name|defaultMountInfoProvider
argument_list|()
argument_list|,
name|adbc
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|provider
operator|=
operator|new
name|LuceneIndexProvider
argument_list|(
name|copier
argument_list|)
expr_stmt|;
name|mongoConnection
operator|=
name|connectionFactory
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|MongoUtils
operator|.
name|dropCollections
argument_list|(
name|mongoConnection
operator|.
name|getDatabase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataStoreType
operator|==
name|DataStoreType
operator|.
name|WITHOUT_FDS
condition|)
block|{
name|MongoBlobStore
name|blobStore
init|=
operator|new
name|MongoBlobStore
argument_list|(
name|mongoConnection
operator|.
name|getDatabase
argument_list|()
argument_list|)
decl_stmt|;
name|blobStore
operator|.
name|setBlockSize
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|blobStore
operator|.
name|setBlockSizeMin
argument_list|(
literal|48
argument_list|)
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
operator|new
name|CountingBlobStore
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileDataStore
name|fds
init|=
operator|new
name|FileDataStore
argument_list|()
decl_stmt|;
name|fds
operator|.
name|init
argument_list|(
name|fileDataStoreRoot
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|DataStoreBlobStore
name|dsbs
init|=
operator|new
name|DataStoreBlobStore
argument_list|(
name|fds
argument_list|)
decl_stmt|;
name|dsbs
operator|.
name|setBlockSize
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
operator|new
name|CountingBlobStore
argument_list|(
name|dsbs
argument_list|)
expr_stmt|;
block|}
name|nodeStore
operator|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setMongoDB
argument_list|(
name|mongoConnection
operator|.
name|getMongoClient
argument_list|()
argument_list|,
name|mongoConnection
operator|.
name|getDBName
argument_list|()
argument_list|)
operator|.
name|setBlobStore
argument_list|(
name|this
operator|.
name|blobStore
argument_list|)
operator|.
name|getNodeStore
argument_list|()
expr_stmt|;
name|failOnDemandValidatorProvider
operator|=
operator|new
name|FailOnDemandValidatorProvider
argument_list|()
expr_stmt|;
name|asyncIndexUpdate
operator|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|nodeStore
argument_list|,
name|editorProvider
argument_list|)
expr_stmt|;
name|asyncIndexUpdate
operator|.
name|setValidatorProviders
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|failOnDemandValidatorProvider
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|Oak
argument_list|(
name|nodeStore
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|QueryIndexProvider
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|Observer
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
name|editorProvider
argument_list|)
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|String
name|dbName
init|=
name|mongoConnection
operator|.
name|getDBName
argument_list|()
decl_stmt|;
operator|(
operator|(
name|DocumentNodeStore
operator|)
name|nodeStore
operator|)
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|MongoUtils
operator|.
name|dropCollections
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|simpleAsyncIndexUpdateBasedBlobCollection
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|getTree
argument_list|(
literal|"/oak:index/counter"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|asyncIndexUpdate
operator|.
name|run
argument_list|()
expr_stmt|;
name|long
name|initialNumChunks
init|=
name|blobStore
operator|.
name|numChunks
decl_stmt|;
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|asyncIndexUpdate
operator|.
name|run
argument_list|()
expr_stmt|;
name|long
name|firstCommitNumChunks
init|=
name|blobStore
operator|.
name|numChunks
decl_stmt|;
name|adbc
operator|.
name|purgeBlobsDeleted
argument_list|(
literal|0
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
comment|//hack to purge file
name|long
name|time
init|=
name|clock
operator|.
name|getTimeIncreasing
argument_list|()
decl_stmt|;
name|long
name|hackPurgeNumChunks
init|=
name|blobStore
operator|.
name|numChunks
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hack purge must not purge any blob (first commit)"
argument_list|,
name|firstCommitNumChunks
argument_list|,
name|hackPurgeNumChunks
argument_list|)
expr_stmt|;
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo1"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|asyncIndexUpdate
operator|.
name|run
argument_list|()
expr_stmt|;
name|long
name|secondCommitNumChunks
init|=
name|blobStore
operator|.
name|numChunks
decl_stmt|;
name|adbc
operator|.
name|purgeBlobsDeleted
argument_list|(
literal|0
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
comment|//hack to purge file
name|hackPurgeNumChunks
operator|=
name|blobStore
operator|.
name|numChunks
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hack purge must not purge any blob (second commit)"
argument_list|,
name|secondCommitNumChunks
argument_list|,
name|hackPurgeNumChunks
argument_list|)
expr_stmt|;
name|adbc
operator|.
name|purgeBlobsDeleted
argument_list|(
name|time
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
name|long
name|firstGCNumChunks
init|=
name|blobStore
operator|.
name|numChunks
decl_stmt|;
name|adbc
operator|.
name|purgeBlobsDeleted
argument_list|(
name|clock
operator|.
name|getTimeIncreasing
argument_list|()
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
name|long
name|secondGCNumChunks
init|=
name|blobStore
operator|.
name|numChunks
decl_stmt|;
name|assertTrue
argument_list|(
literal|"First commit must create some chunks"
argument_list|,
name|firstCommitNumChunks
operator|>
name|initialNumChunks
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"First commit must create some chunks"
argument_list|,
name|secondCommitNumChunks
operator|>
name|firstCommitNumChunks
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"First GC should delete some chunks"
argument_list|,
name|firstGCNumChunks
operator|<
name|secondCommitNumChunks
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Second GC should delete some chunks too"
argument_list|,
name|secondGCNumChunks
operator|<
name|firstGCNumChunks
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dontDeleteIfIndexingFailed
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|getTree
argument_list|(
literal|"/oak:index/counter"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|asyncIndexUpdate
operator|.
name|run
argument_list|()
expr_stmt|;
name|long
name|initialNumChunks
init|=
name|blobStore
operator|.
name|numChunks
decl_stmt|;
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|asyncIndexUpdate
operator|.
name|run
argument_list|()
expr_stmt|;
name|long
name|firstCommitNumChunks
init|=
name|blobStore
operator|.
name|numChunks
decl_stmt|;
name|adbc
operator|.
name|purgeBlobsDeleted
argument_list|(
literal|0
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
comment|//hack to purge file
name|long
name|time
init|=
name|clock
operator|.
name|getTimeIncreasing
argument_list|()
decl_stmt|;
name|long
name|hackPurgeNumChunks
init|=
name|blobStore
operator|.
name|numChunks
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hack purge must not purge any blob (first commit)"
argument_list|,
name|firstCommitNumChunks
argument_list|,
name|hackPurgeNumChunks
argument_list|)
expr_stmt|;
name|failOnDemandValidatorProvider
operator|.
name|shouldFail
operator|=
literal|true
expr_stmt|;
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo1"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|asyncIndexUpdate
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Indexing must have failed"
argument_list|,
name|asyncIndexUpdate
operator|.
name|isFailing
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|secondCommitNumChunks
init|=
name|blobStore
operator|.
name|numChunks
decl_stmt|;
name|adbc
operator|.
name|purgeBlobsDeleted
argument_list|(
literal|0
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
comment|//hack to purge file
name|hackPurgeNumChunks
operator|=
name|blobStore
operator|.
name|numChunks
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hack purge must not purge any blob (second commit)"
argument_list|,
name|secondCommitNumChunks
argument_list|,
name|hackPurgeNumChunks
argument_list|)
expr_stmt|;
name|adbc
operator|.
name|purgeBlobsDeleted
argument_list|(
name|time
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
name|long
name|firstGCNumChunks
init|=
name|blobStore
operator|.
name|numChunks
decl_stmt|;
name|adbc
operator|.
name|purgeBlobsDeleted
argument_list|(
name|clock
operator|.
name|getTimeIncreasing
argument_list|()
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
name|long
name|secondGCNumChunks
init|=
name|blobStore
operator|.
name|numChunks
decl_stmt|;
name|assertTrue
argument_list|(
literal|"First commit must create some chunks"
argument_list|,
name|firstCommitNumChunks
operator|>
name|initialNumChunks
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Second commit must create some chunks"
argument_list|,
name|secondCommitNumChunks
operator|>
name|firstCommitNumChunks
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"First GC should delete some chunks"
argument_list|,
name|firstGCNumChunks
operator|<
name|secondCommitNumChunks
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Second GC must not delete chunks as commit failed"
argument_list|,
name|firstGCNumChunks
argument_list|,
name|secondGCNumChunks
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|FailOnDemandValidatorProvider
extends|extends
name|ValidatorProvider
block|{
name|boolean
name|shouldFail
decl_stmt|;
annotation|@
name|Override
specifier|protected
annotation|@
name|Nullable
name|Validator
name|getRootValidator
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
return|return
operator|new
name|DefaultValidator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|shouldFail
operator|&&
name|FulltextIndexConstants
operator|.
name|INDEX_DATA_CHILD_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"failing-validator"
argument_list|,
literal|1
argument_list|,
literal|"Failed commit as requested"
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

