begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|oak
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|tool
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|tool
operator|.
name|ToolUtils
operator|.
name|newFileStore
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|tool
operator|.
name|ToolUtils
operator|.
name|newSegmentNodeStorePersistence
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|AzurePersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|AzuriteDockerRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|tool
operator|.
name|SegmentCopy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|tool
operator|.
name|ToolUtils
operator|.
name|SegmentStoreType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|FileStoreMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|FileStoreMonitorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|IOMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|IOMonitorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|GCJournalFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|JournalFileReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|ManifestFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentArchiveManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentArchiveReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentNodeStorePersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|SegmentCopyTestBase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|AZURE_DIRECTORY
init|=
literal|"repository"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|AZURE_CONTAINER
init|=
literal|"oak-test"
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
name|AzuriteDockerRule
name|azurite
init|=
operator|new
name|AzuriteDockerRule
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|protected
specifier|abstract
name|SegmentNodeStorePersistence
name|getSrcPersistence
parameter_list|()
throws|throws
name|Exception
function_decl|;
specifier|protected
specifier|abstract
name|SegmentNodeStorePersistence
name|getDestPersistence
parameter_list|()
throws|throws
name|Exception
function_decl|;
specifier|protected
specifier|abstract
name|String
name|getSrcPathOrUri
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|String
name|getDestPathOrUri
parameter_list|()
function_decl|;
annotation|@
name|Test
specifier|public
name|void
name|testSegmentCopy
parameter_list|()
throws|throws
name|Exception
block|{
name|SegmentNodeStorePersistence
name|srcPersistence
init|=
name|getSrcPersistence
argument_list|()
decl_stmt|;
name|SegmentNodeStorePersistence
name|destPersistence
init|=
name|getDestPersistence
argument_list|()
decl_stmt|;
name|String
name|srcPathOrUri
init|=
name|getSrcPathOrUri
argument_list|()
decl_stmt|;
name|String
name|destPathOrUri
init|=
name|getDestPathOrUri
argument_list|()
decl_stmt|;
name|int
name|code
init|=
name|runSegmentCopy
argument_list|(
name|srcPersistence
argument_list|,
name|destPersistence
argument_list|,
name|srcPathOrUri
argument_list|,
name|destPathOrUri
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|IOMonitor
name|ioMonitor
init|=
operator|new
name|IOMonitorAdapter
argument_list|()
decl_stmt|;
name|FileStoreMonitor
name|fileStoreMonitor
init|=
operator|new
name|FileStoreMonitorAdapter
argument_list|()
decl_stmt|;
name|SegmentArchiveManager
name|srcArchiveManager
init|=
name|srcPersistence
operator|.
name|createArchiveManager
argument_list|(
literal|false
argument_list|,
name|ioMonitor
argument_list|,
name|fileStoreMonitor
argument_list|)
decl_stmt|;
name|SegmentArchiveManager
name|destArchiveManager
init|=
name|destPersistence
operator|.
name|createArchiveManager
argument_list|(
literal|false
argument_list|,
name|ioMonitor
argument_list|,
name|fileStoreMonitor
argument_list|)
decl_stmt|;
name|checkArchives
argument_list|(
name|srcArchiveManager
argument_list|,
name|destArchiveManager
argument_list|)
expr_stmt|;
name|checkJournal
argument_list|(
name|srcPersistence
argument_list|,
name|destPersistence
argument_list|)
expr_stmt|;
name|checkGCJournal
argument_list|(
name|srcPersistence
argument_list|,
name|destPersistence
argument_list|)
expr_stmt|;
name|checkManifest
argument_list|(
name|srcPersistence
argument_list|,
name|destPersistence
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|runSegmentCopy
parameter_list|(
name|SegmentNodeStorePersistence
name|srcPersistence
parameter_list|,
name|SegmentNodeStorePersistence
name|destPersistence
parameter_list|,
name|String
name|srcPathOrUri
parameter_list|,
name|String
name|destPathOrUri
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Repeatedly add content and close FileStore to obtain a new tar file each time
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
try|try
init|(
name|FileStore
name|fileStore
init|=
name|newFileStore
argument_list|(
name|srcPersistence
argument_list|,
name|folder
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|true
argument_list|,
name|SegmentCache
operator|.
name|DEFAULT_SEGMENT_CACHE_MB
argument_list|,
literal|150_000L
argument_list|)
init|)
block|{
name|SegmentNodeStore
name|sns
init|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|fileStore
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addContent
argument_list|(
name|sns
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|9
condition|)
block|{
name|boolean
name|gcSuccess
init|=
name|fileStore
operator|.
name|compactFull
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|gcSuccess
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|PrintWriter
name|outWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|System
operator|.
name|out
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PrintWriter
name|errWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|System
operator|.
name|err
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SegmentCopy
name|segmentCopy
init|=
name|SegmentCopy
operator|.
name|builder
argument_list|()
operator|.
name|withSrcPersistencee
argument_list|(
name|srcPersistence
argument_list|)
operator|.
name|withDestPersistence
argument_list|(
name|destPersistence
argument_list|)
operator|.
name|withSource
argument_list|(
name|srcPathOrUri
argument_list|)
operator|.
name|withDestination
argument_list|(
name|destPathOrUri
argument_list|)
operator|.
name|withOutWriter
argument_list|(
name|outWriter
argument_list|)
operator|.
name|withErrWriter
argument_list|(
name|errWriter
argument_list|)
operator|.
name|withVerbose
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|segmentCopy
operator|.
name|run
argument_list|()
return|;
block|}
specifier|private
name|void
name|addContent
parameter_list|(
name|SegmentNodeStore
name|nodeStore
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|Exception
block|{
name|NodeBuilder
name|extra
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|content
init|=
name|extra
operator|.
name|child
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|c
init|=
name|content
operator|.
name|child
argument_list|(
literal|"c"
operator|+
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|c
operator|.
name|setProperty
argument_list|(
literal|"p"
operator|+
name|i
argument_list|,
literal|"v"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|nodeStore
operator|.
name|merge
argument_list|(
name|extra
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkArchives
parameter_list|(
name|SegmentArchiveManager
name|srcArchiveManager
parameter_list|,
name|SegmentArchiveManager
name|destArchiveManager
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check archives
name|List
argument_list|<
name|String
argument_list|>
name|srcArchives
init|=
name|srcArchiveManager
operator|.
name|listArchives
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|destArchives
init|=
name|destArchiveManager
operator|.
name|listArchives
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|srcArchives
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|destArchives
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|srcArchives
operator|.
name|equals
argument_list|(
name|destArchives
argument_list|)
argument_list|)
expr_stmt|;
comment|// check archives contents
for|for
control|(
name|String
name|archive
range|:
name|srcArchives
control|)
block|{
name|assertEquals
argument_list|(
name|srcArchiveManager
operator|.
name|exists
argument_list|(
name|archive
argument_list|)
argument_list|,
name|destArchiveManager
operator|.
name|exists
argument_list|(
name|archive
argument_list|)
argument_list|)
expr_stmt|;
name|SegmentArchiveReader
name|srcArchiveReader
init|=
name|srcArchiveManager
operator|.
name|open
argument_list|(
name|archive
argument_list|)
decl_stmt|;
name|SegmentArchiveReader
name|destArchiveReader
init|=
name|destArchiveManager
operator|.
name|open
argument_list|(
name|archive
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SegmentArchiveEntry
argument_list|>
name|srcSegments
init|=
name|srcArchiveReader
operator|.
name|listSegments
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SegmentArchiveEntry
argument_list|>
name|destSegments
init|=
name|destArchiveReader
operator|.
name|listSegments
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcSegments
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SegmentArchiveEntry
name|srcSegment
init|=
name|srcSegments
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SegmentArchiveEntry
name|destSegment
init|=
name|destSegments
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|srcSegment
operator|.
name|getMsb
argument_list|()
argument_list|,
name|destSegment
operator|.
name|getMsb
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|srcSegment
operator|.
name|getLsb
argument_list|()
argument_list|,
name|destSegment
operator|.
name|getLsb
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|srcSegment
operator|.
name|getLength
argument_list|()
argument_list|,
name|destSegment
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|srcSegment
operator|.
name|getFullGeneration
argument_list|()
argument_list|,
name|destSegment
operator|.
name|getFullGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|srcSegment
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|destSegment
operator|.
name|getFullGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|ByteBuffer
name|srcDataBuffer
init|=
name|srcArchiveReader
operator|.
name|readSegment
argument_list|(
name|srcSegment
operator|.
name|getMsb
argument_list|()
argument_list|,
name|srcSegment
operator|.
name|getLsb
argument_list|()
argument_list|)
decl_stmt|;
name|ByteBuffer
name|destDataBuffer
init|=
name|destArchiveReader
operator|.
name|readSegment
argument_list|(
name|destSegment
operator|.
name|getMsb
argument_list|()
argument_list|,
name|destSegment
operator|.
name|getLsb
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|srcDataBuffer
argument_list|,
name|destDataBuffer
argument_list|)
expr_stmt|;
block|}
name|ByteBuffer
name|srcBinRefBuffer
init|=
name|srcArchiveReader
operator|.
name|getBinaryReferences
argument_list|()
decl_stmt|;
name|ByteBuffer
name|destBinRefBuffer
init|=
name|destArchiveReader
operator|.
name|getBinaryReferences
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|srcBinRefBuffer
argument_list|,
name|destBinRefBuffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|srcArchiveReader
operator|.
name|hasGraph
argument_list|()
argument_list|,
name|destArchiveReader
operator|.
name|hasGraph
argument_list|()
argument_list|)
expr_stmt|;
name|ByteBuffer
name|srcGraphBuffer
init|=
name|srcArchiveReader
operator|.
name|getGraph
argument_list|()
decl_stmt|;
name|ByteBuffer
name|destGraphBuffer
init|=
name|destArchiveReader
operator|.
name|getGraph
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|srcGraphBuffer
argument_list|,
name|destGraphBuffer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkJournal
parameter_list|(
name|SegmentNodeStorePersistence
name|srcPersistence
parameter_list|,
name|SegmentNodeStorePersistence
name|destPersistence
parameter_list|)
throws|throws
name|IOException
block|{
name|JournalFileReader
name|srcJournalFileReader
init|=
name|srcPersistence
operator|.
name|getJournalFile
argument_list|()
operator|.
name|openJournalReader
argument_list|()
decl_stmt|;
name|JournalFileReader
name|destJournalFileReader
init|=
name|destPersistence
operator|.
name|getJournalFile
argument_list|()
operator|.
name|openJournalReader
argument_list|()
decl_stmt|;
name|String
name|srcJournalLine
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|srcJournalLine
operator|=
name|srcJournalFileReader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|String
name|destJournalLine
init|=
name|destJournalFileReader
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|srcJournalLine
argument_list|,
name|destJournalLine
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkGCJournal
parameter_list|(
name|SegmentNodeStorePersistence
name|srcPersistence
parameter_list|,
name|SegmentNodeStorePersistence
name|destPersistence
parameter_list|)
throws|throws
name|IOException
block|{
name|GCJournalFile
name|srcGCJournalFile
init|=
name|srcPersistence
operator|.
name|getGCJournalFile
argument_list|()
decl_stmt|;
name|GCJournalFile
name|destGCJournalFile
init|=
name|destPersistence
operator|.
name|getGCJournalFile
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|srcGCJournalFile
operator|.
name|readLines
argument_list|()
argument_list|,
name|destGCJournalFile
operator|.
name|readLines
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkManifest
parameter_list|(
name|SegmentNodeStorePersistence
name|srcPersistence
parameter_list|,
name|SegmentNodeStorePersistence
name|destPersistence
parameter_list|)
throws|throws
name|IOException
block|{
name|ManifestFile
name|srcManifestFile
init|=
name|srcPersistence
operator|.
name|getManifestFile
argument_list|()
decl_stmt|;
name|ManifestFile
name|destManifestFile
init|=
name|destPersistence
operator|.
name|getManifestFile
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|srcManifestFile
operator|.
name|load
argument_list|()
argument_list|,
name|destManifestFile
operator|.
name|load
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|SegmentNodeStorePersistence
name|getTarPersistence
parameter_list|()
block|{
return|return
name|newSegmentNodeStorePersistence
argument_list|(
name|SegmentStoreType
operator|.
name|TAR
argument_list|,
name|folder
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|SegmentNodeStorePersistence
name|getAzurePersistence
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|AzurePersistence
argument_list|(
name|azurite
operator|.
name|getContainer
argument_list|(
name|AZURE_CONTAINER
argument_list|)
operator|.
name|getDirectoryReference
argument_list|(
name|AZURE_DIRECTORY
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getTarPersistencePathOrUri
parameter_list|()
block|{
return|return
name|folder
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
specifier|protected
name|String
name|getAzurePersistencePathOrUri
parameter_list|()
block|{
name|StringBuilder
name|uri
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"az:"
argument_list|)
decl_stmt|;
name|uri
operator|.
name|append
argument_list|(
literal|"http://127.0.0.1:"
argument_list|)
expr_stmt|;
name|uri
operator|.
name|append
argument_list|(
name|azurite
operator|.
name|getMappedPort
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|uri
operator|.
name|append
argument_list|(
name|AZURE_CONTAINER
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|uri
operator|.
name|append
argument_list|(
name|AZURE_DIRECTORY
argument_list|)
expr_stmt|;
return|return
name|uri
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

