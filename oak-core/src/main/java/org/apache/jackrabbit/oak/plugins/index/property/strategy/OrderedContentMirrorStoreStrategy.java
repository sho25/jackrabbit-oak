begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|ENTRY_COUNT_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_CONTENT_NODE_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|OrderedIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|OrderedIndex
operator|.
name|OrderDirection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
operator|.
name|PropertyRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_comment
comment|/**  * Same as for {@link ContentMirrorStoreStrategy} but the order of the keys is kept by using the  * following structure  *   *<code>  *  :index : {  *      :start : { :next = n1 },  *      n0 : { /content/foo/bar(match=true), :next=n3 },  *      n1 : { /content/foo1/bar(match=true), :next=n0 },  *      n2 : { /content/foo2/bar(match=true), :next= }, //this is the end of the list  *      n3 : { /content/foo3/bar(match=true), :next=n2 }  *  }  *</code>  */
end_comment

begin_class
specifier|public
class|class
name|OrderedContentMirrorStoreStrategy
extends|extends
name|ContentMirrorStoreStrategy
block|{
comment|/**      * the property linking to the next node      */
specifier|public
specifier|static
specifier|final
name|String
name|NEXT
init|=
literal|":next"
decl_stmt|;
comment|/**      * node that works as root of the index (start point or 0 element)      */
specifier|public
specifier|static
specifier|final
name|String
name|START
init|=
literal|":start"
decl_stmt|;
comment|/**      * a NodeState used for easy creating of an empty :start      */
specifier|public
specifier|static
specifier|final
name|NodeState
name|EMPTY_START_NODE
init|=
name|EmptyNodeState
operator|.
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
operator|.
name|setProperty
argument_list|(
name|NEXT
argument_list|,
literal|""
argument_list|)
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OrderedContentMirrorStoreStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * the direction of the index.      */
specifier|private
name|OrderDirection
name|direction
init|=
name|OrderedIndex
operator|.
name|DEFAULT_DIRECTION
decl_stmt|;
specifier|public
name|OrderedContentMirrorStoreStrategy
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|OrderedContentMirrorStoreStrategy
parameter_list|(
name|OrderDirection
name|direction
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|direction
operator|=
name|direction
expr_stmt|;
block|}
annotation|@
name|Override
name|NodeBuilder
name|fetchKeyNode
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|index
parameter_list|,
annotation|@
name|Nonnull
name|String
name|key
parameter_list|)
block|{
name|NodeBuilder
name|localkey
init|=
literal|null
decl_stmt|;
name|NodeBuilder
name|start
init|=
name|index
operator|.
name|child
argument_list|(
name|START
argument_list|)
decl_stmt|;
comment|// identifying the right place for insert
name|String
name|n
init|=
name|start
operator|.
name|getString
argument_list|(
name|NEXT
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|n
argument_list|)
condition|)
block|{
comment|// new/empty index
name|localkey
operator|=
name|index
operator|.
name|child
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|localkey
operator|.
name|setProperty
argument_list|(
name|NEXT
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|start
operator|.
name|setProperty
argument_list|(
name|NEXT
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// specific use-case where the item has to be added as first of the list
name|String
name|nextKey
init|=
name|n
decl_stmt|;
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|children
init|=
name|getChildNodeEntries
argument_list|(
name|index
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|child
range|:
name|children
control|)
block|{
name|nextKey
operator|=
name|child
operator|.
name|getNodeState
argument_list|()
operator|.
name|getString
argument_list|(
name|NEXT
argument_list|)
expr_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|nextKey
argument_list|)
condition|)
block|{
comment|// we're at the last element, therefore our 'key' has to be appended
name|index
operator|.
name|getChildNode
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setProperty
argument_list|(
name|NEXT
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|localkey
operator|=
name|index
operator|.
name|child
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|localkey
operator|.
name|setProperty
argument_list|(
name|NEXT
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isInsertHere
argument_list|(
name|key
argument_list|,
name|nextKey
argument_list|)
condition|)
block|{
name|index
operator|.
name|getChildNode
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setProperty
argument_list|(
name|NEXT
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|localkey
operator|=
name|index
operator|.
name|child
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|localkey
operator|.
name|setProperty
argument_list|(
name|NEXT
argument_list|,
name|nextKey
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|localkey
return|;
block|}
comment|/**      * tells whether or not the is right to insert here a new item.      *       * @param newItemKey the new item key to be added      * @param existingItemKey the 'here' of the existing index      * @return true for green light on insert false otherwise.      */
specifier|private
name|boolean
name|isInsertHere
parameter_list|(
annotation|@
name|Nonnull
name|String
name|newItemKey
parameter_list|,
annotation|@
name|Nonnull
name|String
name|existingItemKey
parameter_list|)
block|{
if|if
condition|(
name|OrderDirection
operator|.
name|ASC
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
condition|)
block|{
return|return
name|newItemKey
operator|.
name|compareTo
argument_list|(
name|existingItemKey
argument_list|)
operator|<
literal|0
return|;
block|}
else|else
block|{
return|return
name|newItemKey
operator|.
name|compareTo
argument_list|(
name|existingItemKey
argument_list|)
operator|>
literal|0
return|;
block|}
block|}
annotation|@
name|Override
name|void
name|prune
parameter_list|(
specifier|final
name|NodeBuilder
name|index
parameter_list|,
specifier|final
name|Deque
argument_list|<
name|NodeBuilder
argument_list|>
name|builders
parameter_list|)
block|{
for|for
control|(
name|NodeBuilder
name|node
range|:
name|builders
control|)
block|{
if|if
condition|(
name|node
operator|.
name|hasProperty
argument_list|(
literal|"match"
argument_list|)
operator|||
name|node
operator|.
name|getChildNodeCount
argument_list|(
literal|1
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|hasProperty
argument_list|(
name|NEXT
argument_list|)
condition|)
block|{
comment|// it's an index key and we have to relink the list
comment|// (1) find the previous element
name|ChildNodeEntry
name|previous
init|=
name|findPrevious
argument_list|(
name|index
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|node
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"previous not found. Already deleted in the meanwhile. Skipping re-link"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"previous: {}"
argument_list|,
name|previous
argument_list|)
expr_stmt|;
comment|// (2) find the next element
name|String
name|next
init|=
name|node
operator|.
name|getString
argument_list|(
name|NEXT
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|next
operator|=
literal|""
expr_stmt|;
block|}
comment|// (3) re-link the previous to the next
name|index
operator|.
name|getChildNode
argument_list|(
name|previous
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setProperty
argument_list|(
name|NEXT
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
block|}
name|node
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * find the previous item (ChildNodeEntry) in the index given the provided NodeState for      * comparison      *       * in an index sorted in ascending manner where we have @{code [1, 2, 3, 4, 5]} if we ask for       * a previous given 4 it will be 3. previous(4)=3.      *       * in an index sorted in descending manner where we have @{code [5, 4, 3, 2, 1]} if we as for      * a previous given 4 it will be 5. previous(4)=5.      *       * @param index the index we want to look into ({@code :index})      * @param node the node we want to compare      * @return the previous item or null if not found.      */
annotation|@
name|Nullable
name|ChildNodeEntry
name|findPrevious
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeState
name|index
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|NodeState
name|node
parameter_list|)
block|{
name|ChildNodeEntry
name|previous
init|=
literal|null
decl_stmt|;
name|ChildNodeEntry
name|current
init|=
literal|null
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|it
init|=
name|getChildNodeEntries
argument_list|(
name|index
argument_list|,
literal|true
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|found
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|current
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
comment|// first iteration
name|previous
operator|=
name|current
expr_stmt|;
block|}
else|else
block|{
name|found
operator|=
name|node
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|previous
operator|=
name|current
expr_stmt|;
block|}
block|}
block|}
return|return
name|found
condition|?
name|previous
else|:
literal|null
return|;
block|}
comment|/**      * retrieve an Iterable for going through the index in the right order without the :start node      *       * @param index the root of the index (:index)      * @return the iterable      */
annotation|@
name|Override
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeState
name|index
parameter_list|)
block|{
return|return
name|getChildNodeEntries
argument_list|(
name|index
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Retrieve an Iterable for going through the index in the right order with potentially the      * :start node      *       * @param index the root of the index (:index)      * @param includeStart true if :start should be included as first element      * @return      */
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeState
name|index
parameter_list|,
specifier|final
name|boolean
name|includeStart
parameter_list|)
block|{
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|cne
init|=
literal|null
decl_stmt|;
specifier|final
name|NodeState
name|start
init|=
name|index
operator|.
name|getChildNode
argument_list|(
name|START
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|start
operator|.
name|exists
argument_list|()
operator|||
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|start
operator|.
name|getString
argument_list|(
name|NEXT
argument_list|)
argument_list|)
operator|)
operator|&&
operator|!
name|includeStart
condition|)
block|{
comment|// if the property is not there or is empty it means we're empty
name|cne
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cne
operator|=
operator|new
name|FullIterable
argument_list|(
name|index
argument_list|,
name|includeStart
argument_list|)
expr_stmt|;
block|}
return|return
name|cne
return|;
block|}
comment|/**      * search the index for the provided PropertyRestriction      *       * @param filter      * @param indexName      * @param indexMeta      * @param pr      * @return the iterable      */
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|query
parameter_list|(
specifier|final
name|Filter
name|filter
parameter_list|,
specifier|final
name|String
name|indexName
parameter_list|,
specifier|final
name|NodeState
name|indexMeta
parameter_list|,
specifier|final
name|PropertyRestriction
name|pr
parameter_list|)
block|{
return|return
name|query
argument_list|(
name|filter
argument_list|,
name|indexName
argument_list|,
name|indexMeta
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|,
name|pr
argument_list|)
return|;
block|}
comment|/**      * queries through the index as other query() but provides the PropertyRestriction to be applied      * for advanced cases like range queries      *       * @param filter      * @param indexName      * @param indexMeta      * @param indexStorageNodeName      * @param pr      * @return the iterable      */
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|query
parameter_list|(
specifier|final
name|Filter
name|filter
parameter_list|,
specifier|final
name|String
name|indexName
parameter_list|,
specifier|final
name|NodeState
name|indexMeta
parameter_list|,
specifier|final
name|String
name|indexStorageNodeName
parameter_list|,
specifier|final
name|PropertyRestriction
name|pr
parameter_list|)
block|{
specifier|final
name|NodeState
name|index
init|=
name|indexMeta
operator|.
name|getChildNode
argument_list|(
name|indexStorageNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
operator|&&
operator|!
name|pr
operator|.
name|first
operator|.
name|equals
argument_list|(
name|pr
operator|.
name|last
argument_list|)
condition|)
block|{
comment|// '>'& '>=' use case
name|ChildNodeEntry
name|firstValueableItem
init|=
name|seek
argument_list|(
name|index
argument_list|,
operator|new
name|PredicateGreaterThan
argument_list|(
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|,
name|pr
operator|.
name|firstIncluding
argument_list|)
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|it
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstValueableItem
operator|!=
literal|null
condition|)
block|{
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
name|childrenIterable
init|=
operator|(
name|pr
operator|.
name|last
operator|==
literal|null
operator|)
condition|?
operator|new
name|SeekedIterable
argument_list|(
name|index
argument_list|,
name|firstValueableItem
argument_list|)
else|:
operator|new
name|BetweenIterable
argument_list|(
name|index
argument_list|,
name|firstValueableItem
argument_list|,
name|pr
operator|.
name|last
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|,
name|pr
operator|.
name|lastIncluding
argument_list|)
decl_stmt|;
name|it
operator|=
operator|new
name|QueryResultsWrapper
argument_list|(
name|filter
argument_list|,
name|indexName
argument_list|,
name|childrenIterable
argument_list|)
expr_stmt|;
block|}
return|return
name|it
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|last
operator|!=
literal|null
operator|&&
operator|!
name|pr
operator|.
name|last
operator|.
name|equals
argument_list|(
name|pr
operator|.
name|first
argument_list|)
condition|)
block|{
comment|// '<'& '<=' use case
name|ChildNodeEntry
name|firstValueableItem
init|=
name|seek
argument_list|(
name|index
argument_list|,
operator|new
name|PredicateLessThan
argument_list|(
name|pr
operator|.
name|last
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|,
name|pr
operator|.
name|lastIncluding
argument_list|)
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|it
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstValueableItem
operator|!=
literal|null
condition|)
block|{
name|it
operator|=
operator|new
name|QueryResultsWrapper
argument_list|(
name|filter
argument_list|,
name|indexName
argument_list|,
operator|new
name|SeekedIterable
argument_list|(
name|index
argument_list|,
name|firstValueableItem
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|it
return|;
block|}
else|else
block|{
comment|// property is not null. AKA "open query"
name|Iterable
argument_list|<
name|String
argument_list|>
name|values
init|=
literal|null
decl_stmt|;
return|return
name|query
argument_list|(
name|filter
argument_list|,
name|indexName
argument_list|,
name|indexMeta
argument_list|,
name|values
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|convert
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|replaceAll
argument_list|(
literal|"%3A"
argument_list|,
literal|":"
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|OrderedChildNodeEntry
extends|extends
name|AbstractChildNodeEntry
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|state
decl_stmt|;
specifier|public
name|OrderedChildNodeEntry
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|name
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|NodeState
name|state
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|NodeState
name|getNodeState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
block|}
comment|/**      * estimate the number of nodes given the provided PropertyRestriction      *       * @param indexMeta      * @param pr      * @param max      * @return the estimated number of nodes      */
specifier|public
name|long
name|count
parameter_list|(
name|NodeState
name|indexMeta
parameter_list|,
name|Filter
operator|.
name|PropertyRestriction
name|pr
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|long
name|count
init|=
literal|0
decl_stmt|;
name|NodeState
name|content
init|=
name|indexMeta
operator|.
name|getChildNode
argument_list|(
name|INDEX_CONTENT_NODE_NAME
argument_list|)
decl_stmt|;
name|Filter
operator|.
name|PropertyRestriction
name|lpr
init|=
name|pr
decl_stmt|;
if|if
condition|(
name|content
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|lpr
operator|==
literal|null
condition|)
block|{
comment|// it means we have no restriction and we should return the whole lot
name|lpr
operator|=
operator|new
name|Filter
operator|.
name|PropertyRestriction
argument_list|()
expr_stmt|;
block|}
comment|// the index is not empty
name|String
name|value
decl_stmt|;
if|if
condition|(
name|lpr
operator|.
name|firstIncluding
operator|&&
name|lpr
operator|.
name|lastIncluding
operator|&&
name|lpr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|lpr
operator|.
name|first
operator|.
name|equals
argument_list|(
name|lpr
operator|.
name|last
argument_list|)
condition|)
block|{
comment|// property==value case
name|value
operator|=
name|lpr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|NodeState
name|n
init|=
name|content
operator|.
name|getChildNode
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|exists
argument_list|()
condition|)
block|{
name|CountingNodeVisitor
name|v
init|=
operator|new
name|CountingNodeVisitor
argument_list|(
name|max
argument_list|)
decl_stmt|;
name|v
operator|.
name|visit
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|count
operator|=
name|v
operator|.
name|getEstimatedCount
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|lpr
operator|.
name|first
operator|==
literal|null
operator|&&
name|lpr
operator|.
name|last
operator|==
literal|null
condition|)
block|{
comment|// property not null case
name|PropertyState
name|ec
init|=
name|indexMeta
operator|.
name|getProperty
argument_list|(
name|ENTRY_COUNT_PROPERTY_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|ec
operator|!=
literal|null
condition|)
block|{
name|count
operator|=
name|ec
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CountingNodeVisitor
name|v
init|=
operator|new
name|CountingNodeVisitor
argument_list|(
name|max
argument_list|)
decl_stmt|;
name|v
operator|.
name|visit
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|count
operator|=
name|v
operator|.
name|getEstimatedCount
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|lpr
operator|.
name|first
operator|!=
literal|null
operator|&&
operator|!
name|lpr
operator|.
name|first
operator|.
name|equals
argument_list|(
name|lpr
operator|.
name|last
argument_list|)
operator|&&
name|OrderDirection
operator|.
name|ASC
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
condition|)
block|{
comment|//>&>= in ascending index
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|children
init|=
name|getChildNodeEntries
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|CountingNodeVisitor
name|v
decl_stmt|;
name|value
operator|=
name|lpr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|int
name|depthTotal
init|=
literal|0
decl_stmt|;
comment|// seeking the right starting point
for|for
control|(
name|ChildNodeEntry
name|child
range|:
name|children
control|)
block|{
name|String
name|converted
init|=
name|convert
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|compareTo
argument_list|(
name|converted
argument_list|)
operator|<
literal|0
operator|||
operator|(
name|lpr
operator|.
name|firstIncluding
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|converted
argument_list|)
operator|)
condition|)
block|{
comment|// here we are let's start counting
name|v
operator|=
operator|new
name|CountingNodeVisitor
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|v
operator|.
name|visit
argument_list|(
name|content
operator|.
name|getChildNode
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|+=
name|v
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|depthTotal
operator|+=
name|v
operator|.
name|depthTotal
expr_stmt|;
if|if
condition|(
name|count
operator|>
name|max
condition|)
block|{
break|break;
block|}
block|}
block|}
comment|// small hack for having a common way of counting
name|v
operator|=
operator|new
name|CountingNodeVisitor
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|v
operator|.
name|depthTotal
operator|=
name|depthTotal
expr_stmt|;
name|v
operator|.
name|count
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|count
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|count
operator|=
name|v
operator|.
name|getEstimatedCount
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lpr
operator|.
name|last
operator|!=
literal|null
operator|&&
operator|!
name|lpr
operator|.
name|last
operator|.
name|equals
argument_list|(
name|lpr
operator|.
name|first
argument_list|)
operator|&&
name|OrderDirection
operator|.
name|DESC
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
condition|)
block|{
comment|//>&>= in ascending index
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|children
init|=
name|getChildNodeEntries
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|CountingNodeVisitor
name|v
decl_stmt|;
name|value
operator|=
name|lpr
operator|.
name|last
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|int
name|depthTotal
init|=
literal|0
decl_stmt|;
comment|// seeking the right starting point
for|for
control|(
name|ChildNodeEntry
name|child
range|:
name|children
control|)
block|{
name|String
name|converted
init|=
name|convert
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|compareTo
argument_list|(
name|converted
argument_list|)
operator|>
literal|0
operator|||
operator|(
name|lpr
operator|.
name|lastIncluding
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|converted
argument_list|)
operator|)
condition|)
block|{
comment|// here we are let's start counting
name|v
operator|=
operator|new
name|CountingNodeVisitor
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|v
operator|.
name|visit
argument_list|(
name|content
operator|.
name|getChildNode
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|+=
name|v
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|depthTotal
operator|+=
name|v
operator|.
name|depthTotal
expr_stmt|;
if|if
condition|(
name|count
operator|>
name|max
condition|)
block|{
break|break;
block|}
block|}
block|}
comment|// small hack for having a common way of counting
name|v
operator|=
operator|new
name|CountingNodeVisitor
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|v
operator|.
name|depthTotal
operator|=
name|depthTotal
expr_stmt|;
name|v
operator|.
name|count
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|count
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|count
operator|=
name|v
operator|.
name|getEstimatedCount
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
comment|/**      * wrap an {@code Iterable<ChildNodeEntry>} in something that can be understood by the Query      * Engine      */
specifier|private
specifier|static
class|class
name|QueryResultsWrapper
implements|implements
name|Iterable
argument_list|<
name|String
argument_list|>
block|{
specifier|private
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
name|children
decl_stmt|;
specifier|private
name|String
name|indexName
decl_stmt|;
specifier|private
name|Filter
name|filter
decl_stmt|;
specifier|public
name|QueryResultsWrapper
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|String
name|indexName
parameter_list|,
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
name|children
parameter_list|)
block|{
name|this
operator|.
name|children
operator|=
name|children
expr_stmt|;
name|this
operator|.
name|indexName
operator|=
name|indexName
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
name|PathIterator
name|pi
init|=
operator|new
name|PathIterator
argument_list|(
name|filter
argument_list|,
name|indexName
argument_list|)
decl_stmt|;
name|pi
operator|.
name|setPathContainsValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pi
operator|.
name|enqueue
argument_list|(
name|children
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pi
return|;
block|}
block|}
comment|/**      * iterating throughout the index in the correct order. Externalised as class for easy      * overloading.      */
specifier|private
specifier|static
class|class
name|FullIterator
implements|implements
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
block|{
specifier|private
name|boolean
name|includeStart
decl_stmt|;
specifier|private
name|NodeState
name|start
decl_stmt|;
specifier|private
name|NodeState
name|current
decl_stmt|;
specifier|private
name|NodeState
name|index
decl_stmt|;
specifier|private
name|String
name|currentName
decl_stmt|;
specifier|public
name|FullIterator
parameter_list|(
name|NodeState
name|index
parameter_list|,
name|NodeState
name|start
parameter_list|,
name|boolean
name|includeStart
parameter_list|,
name|NodeState
name|current
parameter_list|)
block|{
name|this
operator|.
name|includeStart
operator|=
name|includeStart
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|current
operator|=
name|current
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|(
name|includeStart
operator|&&
name|start
operator|.
name|equals
argument_list|(
name|current
argument_list|)
operator|)
operator|||
operator|(
operator|!
name|includeStart
operator|&&
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|current
operator|.
name|getString
argument_list|(
name|NEXT
argument_list|)
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ChildNodeEntry
name|next
parameter_list|()
block|{
name|ChildNodeEntry
name|entry
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|includeStart
operator|&&
name|start
operator|.
name|equals
argument_list|(
name|current
argument_list|)
condition|)
block|{
name|entry
operator|=
operator|new
name|OrderedChildNodeEntry
argument_list|(
name|START
argument_list|,
name|current
argument_list|)
expr_stmt|;
comment|// let's set it to false. We just included it.
name|includeStart
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|hasNext
argument_list|()
condition|)
block|{
name|currentName
operator|=
name|current
operator|.
name|getString
argument_list|(
name|NEXT
argument_list|)
expr_stmt|;
name|current
operator|=
name|index
operator|.
name|getChildNode
argument_list|(
name|currentName
argument_list|)
expr_stmt|;
name|entry
operator|=
operator|new
name|OrderedChildNodeEntry
argument_list|(
name|currentName
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
return|return
name|entry
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**          * @return the name of the current node. May be null in some cases.          */
annotation|@
name|Nullable
name|String
name|getCurrentName
parameter_list|()
block|{
return|return
name|currentName
return|;
block|}
block|}
comment|/**      * Convenience class for iterating throughout the index in the correct order      */
specifier|private
specifier|static
class|class
name|FullIterable
implements|implements
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
block|{
specifier|private
name|boolean
name|includeStart
decl_stmt|;
name|NodeState
name|index
decl_stmt|;
name|NodeState
name|start
decl_stmt|;
name|NodeState
name|current
decl_stmt|;
comment|/**          * @param index the current index content state. The {@code :index} node          * @param includeStart whether include {@code :start} or not.          */
specifier|public
name|FullIterable
parameter_list|(
name|NodeState
name|index
parameter_list|,
name|boolean
name|includeStart
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|includeStart
operator|=
name|includeStart
expr_stmt|;
name|NodeState
name|s
init|=
name|index
operator|.
name|getChildNode
argument_list|(
name|START
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeStart
operator|&&
operator|!
name|s
operator|.
name|exists
argument_list|()
condition|)
block|{
name|start
operator|=
name|EMPTY_START_NODE
expr_stmt|;
block|}
else|else
block|{
name|start
operator|=
name|s
expr_stmt|;
block|}
name|current
operator|=
name|start
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|FullIterator
argument_list|(
name|index
argument_list|,
name|start
argument_list|,
name|includeStart
argument_list|,
name|current
argument_list|)
return|;
block|}
block|}
comment|/**      * Iterator that allows to start iterating from a given position      */
specifier|private
specifier|static
class|class
name|SeekedIterator
extends|extends
name|FullIterator
block|{
comment|/**          * whether the seekeed item has been returned already or not.          */
specifier|private
name|boolean
name|firstReturned
decl_stmt|;
comment|/**          * the seeked item          */
specifier|private
name|ChildNodeEntry
name|first
decl_stmt|;
specifier|public
name|SeekedIterator
parameter_list|(
name|NodeState
name|index
parameter_list|,
name|NodeState
name|start
parameter_list|,
name|ChildNodeEntry
name|first
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|start
argument_list|,
literal|false
argument_list|,
name|first
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|first
operator|=
name|first
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|!
name|firstReturned
operator|||
name|super
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ChildNodeEntry
name|next
parameter_list|()
block|{
if|if
condition|(
name|firstReturned
condition|)
block|{
return|return
name|super
operator|.
name|next
argument_list|()
return|;
block|}
else|else
block|{
name|firstReturned
operator|=
literal|true
expr_stmt|;
return|return
name|first
return|;
block|}
block|}
block|}
comment|/**      * iterable that starts at a provided position ({@code ChildNodeEntry})      */
specifier|private
specifier|static
class|class
name|SeekedIterable
extends|extends
name|FullIterable
block|{
name|ChildNodeEntry
name|first
decl_stmt|;
specifier|public
name|SeekedIterable
parameter_list|(
name|NodeState
name|index
parameter_list|,
name|ChildNodeEntry
name|first
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|first
operator|=
name|first
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|SeekedIterator
argument_list|(
name|index
argument_list|,
name|start
argument_list|,
name|first
argument_list|)
return|;
block|}
block|}
comment|/**      * seek for an element in the index given the provided Predicate      *       * @param index the index content node {@code :index}      * @param condition the predicate to evaluate      * @return the entry or null if not found      */
specifier|static
name|ChildNodeEntry
name|seek
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|index
parameter_list|,
annotation|@
name|Nonnull
name|Predicate
argument_list|<
name|ChildNodeEntry
argument_list|>
name|condition
parameter_list|)
block|{
comment|// TODO the FullIterable will have to be replaced with something else once we'll have the
comment|// Skip part of the list implemented.
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
name|children
init|=
operator|new
name|FullIterable
argument_list|(
name|index
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ChildNodeEntry
name|entry
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|condition
operator|.
name|apply
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|entry
operator|=
name|child
expr_stmt|;
break|break;
block|}
block|}
return|return
name|entry
return|;
block|}
comment|/**      * predicate for evaluating 'key' equality across index       */
specifier|static
class|class
name|PredicateEquals
implements|implements
name|Predicate
argument_list|<
name|ChildNodeEntry
argument_list|>
block|{
specifier|private
name|String
name|searchfor
decl_stmt|;
specifier|public
name|PredicateEquals
parameter_list|(
annotation|@
name|Nonnull
name|String
name|searchfor
parameter_list|)
block|{
name|this
operator|.
name|searchfor
operator|=
name|searchfor
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|ChildNodeEntry
name|arg0
parameter_list|)
block|{
return|return
name|arg0
operator|!=
literal|null
operator|&&
name|searchfor
operator|.
name|equals
argument_list|(
name|arg0
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * evaluates when the current element is greater than (>) and greater than equal      * {@code searchfor}      */
specifier|static
class|class
name|PredicateGreaterThan
implements|implements
name|Predicate
argument_list|<
name|ChildNodeEntry
argument_list|>
block|{
specifier|private
name|String
name|searchfor
decl_stmt|;
specifier|private
name|boolean
name|include
decl_stmt|;
specifier|public
name|PredicateGreaterThan
parameter_list|(
annotation|@
name|Nonnull
name|String
name|searchfor
parameter_list|)
block|{
name|this
argument_list|(
name|searchfor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PredicateGreaterThan
parameter_list|(
annotation|@
name|Nonnull
name|String
name|searchfor
parameter_list|,
name|boolean
name|include
parameter_list|)
block|{
name|this
operator|.
name|searchfor
operator|=
name|searchfor
expr_stmt|;
name|this
operator|.
name|include
operator|=
name|include
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|ChildNodeEntry
name|arg0
parameter_list|)
block|{
name|boolean
name|b
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|arg0
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|convert
argument_list|(
name|arg0
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|=
name|searchfor
operator|.
name|compareTo
argument_list|(
name|name
argument_list|)
operator|<
literal|0
operator|||
operator|(
name|include
operator|&&
name|searchfor
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
block|}
comment|/**      * evaluates when the current element is less than (<) and less than equal {@code searchfor}      */
specifier|static
class|class
name|PredicateLessThan
implements|implements
name|Predicate
argument_list|<
name|ChildNodeEntry
argument_list|>
block|{
specifier|private
name|String
name|searchfor
decl_stmt|;
specifier|private
name|boolean
name|include
decl_stmt|;
specifier|public
name|PredicateLessThan
parameter_list|(
annotation|@
name|Nonnull
name|String
name|searchfor
parameter_list|)
block|{
name|this
argument_list|(
name|searchfor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PredicateLessThan
parameter_list|(
annotation|@
name|Nonnull
name|String
name|searchfor
parameter_list|,
name|boolean
name|include
parameter_list|)
block|{
name|this
operator|.
name|searchfor
operator|=
name|searchfor
expr_stmt|;
name|this
operator|.
name|include
operator|=
name|include
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|ChildNodeEntry
name|arg0
parameter_list|)
block|{
name|boolean
name|b
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|arg0
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|convert
argument_list|(
name|arg0
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|=
name|searchfor
operator|.
name|compareTo
argument_list|(
name|name
argument_list|)
operator|>
literal|0
operator|||
operator|(
name|include
operator|&&
name|searchfor
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
block|}
comment|/**      * iterable for going through a set of data in the case of BETWEEN queries. We don't have to      * return more data for having the Query Engine to skip them later.      */
specifier|private
specifier|static
class|class
name|BetweenIterable
extends|extends
name|SeekedIterable
block|{
specifier|private
name|String
name|lastKey
decl_stmt|;
specifier|private
name|boolean
name|lastInclude
decl_stmt|;
specifier|public
name|BetweenIterable
parameter_list|(
name|NodeState
name|index
parameter_list|,
name|ChildNodeEntry
name|first
parameter_list|,
name|String
name|lastKey
parameter_list|,
name|boolean
name|lastInclude
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastKey
operator|=
name|lastKey
expr_stmt|;
name|this
operator|.
name|lastInclude
operator|=
name|lastInclude
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|BetweenIterator
argument_list|(
name|index
argument_list|,
name|start
argument_list|,
name|first
argument_list|,
name|lastKey
argument_list|,
name|lastInclude
argument_list|)
return|;
block|}
block|}
comment|/**      * iterator for iterating in the cases of BETWEEN queries.      */
specifier|private
specifier|static
class|class
name|BetweenIterator
extends|extends
name|SeekedIterator
block|{
specifier|private
name|String
name|lastKey
decl_stmt|;
specifier|private
name|boolean
name|lastInclude
decl_stmt|;
comment|/**          * @param index the current index content {@code :index}          * @param start the {@code :start} node          * @param first the first valuable options for starting iterating from.          * @param lastKey the last key to be returned          * @param lastInclude whether including the last key or not.           */
specifier|public
name|BetweenIterator
parameter_list|(
name|NodeState
name|index
parameter_list|,
name|NodeState
name|start
parameter_list|,
name|ChildNodeEntry
name|first
parameter_list|,
name|String
name|lastKey
parameter_list|,
name|boolean
name|lastInclude
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|start
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastInclude
operator|=
name|lastInclude
expr_stmt|;
name|this
operator|.
name|lastKey
operator|=
name|lastKey
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|boolean
name|next
init|=
name|super
operator|.
name|hasNext
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|getCurrentName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|next
condition|)
block|{
name|name
operator|=
name|convert
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|next
operator|=
name|next
operator|&&
operator|(
name|lastKey
operator|.
name|compareTo
argument_list|(
name|name
argument_list|)
operator|>
literal|0
operator|||
operator|(
name|lastInclude
operator|&&
name|lastKey
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|)
operator|)
expr_stmt|;
block|}
return|return
name|next
return|;
block|}
block|}
block|}
end_class

end_unit

