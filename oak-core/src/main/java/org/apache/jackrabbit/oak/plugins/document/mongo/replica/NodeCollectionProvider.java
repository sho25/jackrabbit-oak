begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|replica
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|copyOf
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|difference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoCredential
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|ServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoClientURI
import|;
end_import

begin_comment
comment|/**  * This class connects to Mongo instances and returns the NODES collection.  * Connections are cached.  */
end_comment

begin_class
specifier|public
class|class
name|NodeCollectionProvider
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NodeCollectionProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|DBCollection
argument_list|>
name|collections
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|DBCollection
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|originalMongoUri
decl_stmt|;
specifier|private
specifier|final
name|String
name|dbName
decl_stmt|;
specifier|public
name|NodeCollectionProvider
parameter_list|(
name|String
name|originalMongoUri
parameter_list|,
name|String
name|dbName
parameter_list|)
block|{
name|this
operator|.
name|originalMongoUri
operator|=
name|originalMongoUri
expr_stmt|;
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
block|}
specifier|public
name|void
name|retain
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|hostNames
parameter_list|)
block|{
name|close
argument_list|(
name|copyOf
argument_list|(
name|difference
argument_list|(
name|collections
operator|.
name|keySet
argument_list|()
argument_list|,
name|hostNames
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|close
argument_list|(
name|collections
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|close
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|hostNames
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|DBCollection
argument_list|>
argument_list|>
name|it
init|=
name|collections
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|DBCollection
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|hostNames
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getDB
argument_list|()
operator|.
name|getMongo
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MongoClientException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't close Mongo client"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|DBCollection
name|get
parameter_list|(
name|String
name|hostname
parameter_list|)
throws|throws
name|UnknownHostException
block|{
if|if
condition|(
name|collections
operator|.
name|containsKey
argument_list|(
name|hostname
argument_list|)
condition|)
block|{
return|return
name|collections
operator|.
name|get
argument_list|(
name|hostname
argument_list|)
return|;
block|}
name|MongoClient
name|client
decl_stmt|;
if|if
condition|(
name|originalMongoUri
operator|==
literal|null
condition|)
block|{
name|MongoClientURI
name|uri
init|=
operator|new
name|MongoClientURI
argument_list|(
literal|"mongodb://"
operator|+
name|hostname
argument_list|)
decl_stmt|;
name|client
operator|=
operator|new
name|MongoClient
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|client
operator|=
name|prepareClientForHostname
argument_list|(
name|hostname
argument_list|)
expr_stmt|;
block|}
name|DB
name|db
init|=
name|client
operator|.
name|getDB
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|db
operator|.
name|getMongo
argument_list|()
operator|.
name|slaveOk
argument_list|()
expr_stmt|;
name|DBCollection
name|collection
init|=
name|db
operator|.
name|getCollection
argument_list|(
name|Collection
operator|.
name|NODES
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|collections
operator|.
name|put
argument_list|(
name|hostname
argument_list|,
name|collection
argument_list|)
expr_stmt|;
return|return
name|collection
return|;
block|}
specifier|private
name|MongoClient
name|prepareClientForHostname
parameter_list|(
name|String
name|hostname
parameter_list|)
throws|throws
name|UnknownHostException
block|{
name|ServerAddress
name|address
decl_stmt|;
if|if
condition|(
name|hostname
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|String
index|[]
name|hostSplit
init|=
name|hostname
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostSplit
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a valid hostname: "
operator|+
name|hostname
argument_list|)
throw|;
block|}
name|address
operator|=
operator|new
name|ServerAddress
argument_list|(
name|hostSplit
index|[
literal|0
index|]
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|hostSplit
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|address
operator|=
operator|new
name|ServerAddress
argument_list|(
name|hostname
argument_list|)
expr_stmt|;
block|}
name|MongoClientURI
name|originalUri
init|=
operator|new
name|MongoClientURI
argument_list|(
name|originalMongoUri
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MongoCredential
argument_list|>
name|credentialList
init|=
operator|new
name|ArrayList
argument_list|<
name|MongoCredential
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|originalUri
operator|.
name|getCredentials
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|credentialList
operator|.
name|add
argument_list|(
name|originalUri
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MongoClient
argument_list|(
name|address
argument_list|,
name|credentialList
argument_list|,
name|originalUri
operator|.
name|getOptions
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

