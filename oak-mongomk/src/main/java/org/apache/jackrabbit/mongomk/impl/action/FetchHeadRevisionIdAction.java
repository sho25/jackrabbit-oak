begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|action
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|MongoNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|MongoCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|MongoSync
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_comment
comment|/**  * An action for fetching the head revision.  */
end_comment

begin_class
specifier|public
class|class
name|FetchHeadRevisionIdAction
extends|extends
name|BaseAction
argument_list|<
name|Long
argument_list|>
block|{
specifier|private
name|boolean
name|includeBranchCommits
init|=
literal|true
decl_stmt|;
comment|/**      * Constructs a new {@code FetchHeadRevisionIdAction}.      *      * @param nodeStore Node store.      */
specifier|public
name|FetchHeadRevisionIdAction
parameter_list|(
name|MongoNodeStore
name|nodeStore
parameter_list|)
block|{
name|super
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets whether the branch commits are included in the query.      *      * @param includeBranchCommits Whether the branch commits are included.      */
specifier|public
name|void
name|includeBranchCommits
parameter_list|(
name|boolean
name|includeBranchCommits
parameter_list|)
block|{
name|this
operator|.
name|includeBranchCommits
operator|=
name|includeBranchCommits
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|DBCollection
name|headCollection
init|=
name|nodeStore
operator|.
name|getSyncCollection
argument_list|()
decl_stmt|;
name|MongoSync
name|syncMongo
init|=
operator|(
name|MongoSync
operator|)
name|headCollection
operator|.
name|findOne
argument_list|()
decl_stmt|;
name|long
name|headRevisionId
init|=
name|syncMongo
operator|.
name|getHeadRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeBranchCommits
condition|)
block|{
return|return
name|headRevisionId
return|;
block|}
comment|// Otherwise, find the first revision id that's not part of a branch.
name|long
name|revisionId
init|=
name|headRevisionId
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|MongoCommit
name|commitMongo
init|=
operator|new
name|FetchCommitAction
argument_list|(
name|nodeStore
argument_list|,
name|revisionId
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|commitMongo
operator|.
name|getBranchId
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|revisionId
return|;
block|}
name|revisionId
operator|=
name|commitMongo
operator|.
name|getBaseRevisionId
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

