begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|GuestCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NoSuchWorkspaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|DefaultConflictHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryValueFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|dataformat
operator|.
name|smile
operator|.
name|SmileFactory
import|;
end_import

begin_class
specifier|public
class|class
name|OakServlet
extends|extends
name|HttpServlet
block|{
specifier|private
specifier|static
specifier|final
name|JsonFactory
name|JSON_FACTORY
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|JsonFactory
name|SMILE_FACTORY
init|=
operator|new
name|SmileFactory
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ContentRepository
name|repository
decl_stmt|;
specifier|public
name|OakServlet
parameter_list|(
name|ContentRepository
name|repository
parameter_list|)
block|{
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|service
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
try|try
block|{
name|ContentSession
name|session
init|=
name|repository
operator|.
name|login
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|Root
name|root
init|=
name|session
operator|.
name|getCurrentRoot
argument_list|()
decl_stmt|;
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|request
operator|.
name|getPathInfo
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"root"
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"tree"
argument_list|,
name|tree
argument_list|)
expr_stmt|;
name|super
operator|.
name|service
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchWorkspaceException
name|e
parameter_list|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|Tree
name|tree
init|=
operator|(
name|Tree
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"tree"
argument_list|)
decl_stmt|;
name|render
argument_list|(
name|tree
argument_list|,
name|getDepth
argument_list|(
name|request
argument_list|)
argument_list|,
name|getRenderer
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doPost
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
try|try
block|{
name|Root
name|root
init|=
operator|(
name|Root
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
operator|(
name|Tree
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"tree"
argument_list|)
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|node
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|request
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|isObject
argument_list|()
condition|)
block|{
name|post
argument_list|(
name|node
argument_list|,
name|tree
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|OURS
argument_list|)
expr_stmt|;
name|doGet
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|post
parameter_list|(
name|JsonNode
name|node
parameter_list|,
name|Tree
name|tree
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|iterator
init|=
name|node
operator|.
name|fields
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonNode
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|isObject
argument_list|()
condition|)
block|{
if|if
condition|(
name|tree
operator|.
name|hasProperty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|tree
operator|.
name|removeProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|Tree
name|child
init|=
name|tree
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
name|child
operator|=
name|tree
operator|.
name|addChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|post
argument_list|(
name|value
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|tree
operator|.
name|hasChild
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|tree
operator|.
name|removeChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|CoreValueFactory
name|vf
init|=
name|MemoryValueFactory
operator|.
name|INSTANCE
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|tree
operator|.
name|removeProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|isBoolean
argument_list|()
condition|)
block|{
name|tree
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
name|value
operator|.
name|asBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|isLong
argument_list|()
condition|)
block|{
name|tree
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
name|value
operator|.
name|asLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|isDouble
argument_list|()
condition|)
block|{
name|tree
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
name|value
operator|.
name|asDouble
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|isBigDecimal
argument_list|()
condition|)
block|{
name|tree
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
name|value
operator|.
name|decimalValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tree
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
name|value
operator|.
name|asText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doDelete
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
try|try
block|{
name|Root
name|root
init|=
operator|(
name|Root
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
operator|(
name|Tree
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"tree"
argument_list|)
decl_stmt|;
name|Tree
name|parent
init|=
name|tree
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|removeChild
argument_list|(
name|tree
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|OURS
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Can't remove the root node
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|int
name|getDepth
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|String
name|d
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"depth"
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
name|d
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|d
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
literal|1
return|;
block|}
specifier|private
name|JsonGenerator
name|getRenderer
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|AcceptHeader
name|accept
init|=
operator|new
name|AcceptHeader
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
literal|"Accept"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|accept
operator|.
name|resolve
argument_list|(
literal|"application/json"
argument_list|,
literal|"application/x-jackson-smile"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"application/x-jackson-smile"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"application/x-jackson-smile"
argument_list|)
expr_stmt|;
return|return
name|SMILE_FACTORY
operator|.
name|createJsonGenerator
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
return|return
name|JSON_FACTORY
operator|.
name|createJsonGenerator
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|render
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|int
name|depth
parameter_list|,
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|JsonGenerationException
throws|,
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|depth
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|PropertyState
name|property
range|:
name|tree
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|render
argument_list|(
name|property
argument_list|,
name|generator
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Tree
name|child
range|:
name|tree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|generator
operator|.
name|writeFieldName
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|render
argument_list|(
name|child
argument_list|,
name|depth
operator|-
literal|1
argument_list|,
name|generator
argument_list|)
expr_stmt|;
block|}
block|}
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|render
parameter_list|(
name|PropertyState
name|property
parameter_list|,
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|JsonGenerationException
throws|,
name|IOException
block|{
name|generator
operator|.
name|writeFieldName
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|property
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|generator
operator|.
name|writeStartArray
argument_list|()
expr_stmt|;
for|for
control|(
name|CoreValue
name|value
range|:
name|property
operator|.
name|getValues
argument_list|()
control|)
block|{
name|render
argument_list|(
name|value
argument_list|,
name|generator
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|render
argument_list|(
name|property
operator|.
name|getValue
argument_list|()
argument_list|,
name|generator
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|render
parameter_list|(
name|CoreValue
name|value
parameter_list|,
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|JsonGenerationException
throws|,
name|IOException
block|{
comment|// TODO: Type info?
if|if
condition|(
name|value
operator|.
name|getType
argument_list|()
operator|==
name|PropertyType
operator|.
name|BOOLEAN
condition|)
block|{
name|generator
operator|.
name|writeBoolean
argument_list|(
name|value
operator|.
name|getBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|getType
argument_list|()
operator|==
name|PropertyType
operator|.
name|DECIMAL
condition|)
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
operator|.
name|getDecimal
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|getType
argument_list|()
operator|==
name|PropertyType
operator|.
name|DOUBLE
condition|)
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
operator|.
name|getDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|getType
argument_list|()
operator|==
name|PropertyType
operator|.
name|LONG
condition|)
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|getType
argument_list|()
operator|==
name|PropertyType
operator|.
name|BINARY
condition|)
block|{
name|ByteArrayOutputStream
name|buffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
name|value
operator|.
name|getNewStream
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|n
init|=
name|stream
operator|.
name|read
argument_list|(
name|b
argument_list|)
decl_stmt|;
while|while
condition|(
name|n
operator|!=
operator|-
literal|1
condition|)
block|{
name|buffer
operator|.
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|n
operator|=
name|stream
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|generator
operator|.
name|writeBinary
argument_list|(
name|buffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

