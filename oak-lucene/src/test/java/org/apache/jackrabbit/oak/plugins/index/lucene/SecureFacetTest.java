begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
operator|.
name|ExecutorCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|IndexDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|facet
operator|.
name|FacetResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|facet
operator|.
name|FacetResult
operator|.
name|Facet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|JcrUtils
operator|.
name|getOrCreateByPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContentHelper
operator|.
name|INITIAL_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NODE_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FulltextIndexConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|SecureFacetTest
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|Closer
name|closer
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|Node
name|indexNode
decl_stmt|;
specifier|private
name|QueryManager
name|qe
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_LEAF_NODES
init|=
name|STATISTICAL_FACET_SAMPLE_SIZE_DEFAULT
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_LABELS
init|=
literal|4
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|actualLabelCount
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|actualAclLabelCount
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|actualAclPar1LabelCount
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|closer
operator|=
name|Closer
operator|.
name|create
argument_list|()
expr_stmt|;
name|createRepository
argument_list|()
expr_stmt|;
name|createIndex
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createRepository
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|ExecutorCloser
argument_list|(
name|executorService
argument_list|)
argument_list|)
expr_stmt|;
name|IndexCopier
name|copier
init|=
operator|new
name|IndexCopier
argument_list|(
name|executorService
argument_list|,
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|LuceneIndexEditorProvider
name|editorProvider
init|=
operator|new
name|LuceneIndexEditorProvider
argument_list|(
name|copier
argument_list|)
decl_stmt|;
name|LuceneIndexProvider
name|queryIndexProvider
init|=
operator|new
name|LuceneIndexProvider
argument_list|(
name|copier
argument_list|)
decl_stmt|;
name|NodeStore
name|nodeStore
init|=
operator|new
name|MemoryNodeStore
argument_list|(
name|INITIAL_CONTENT
argument_list|)
decl_stmt|;
name|Oak
name|oak
init|=
operator|new
name|Oak
argument_list|(
name|nodeStore
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|QueryIndexProvider
operator|)
name|queryIndexProvider
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|Observer
operator|)
name|queryIndexProvider
argument_list|)
operator|.
name|with
argument_list|(
name|editorProvider
argument_list|)
decl_stmt|;
name|Jcr
name|jcr
init|=
operator|new
name|Jcr
argument_list|(
name|oak
argument_list|)
decl_stmt|;
annotation|@
name|NotNull
name|Repository
name|repository
init|=
name|jcr
operator|.
name|createRepository
argument_list|()
decl_stmt|;
name|session
operator|=
name|repository
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|session
operator|::
name|logout
argument_list|)
expr_stmt|;
comment|// we'd always query anonymously
name|Session
name|anonSession
init|=
name|repository
operator|.
name|login
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|anonSession
operator|::
name|logout
argument_list|)
expr_stmt|;
name|qe
operator|=
name|anonSession
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|IOException
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexDefinition
operator|.
name|setDisableStoredIndexDefinition
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createIndex
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|IndexDefinitionBuilder
name|idxBuilder
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|idxBuilder
operator|.
name|noAsync
argument_list|()
operator|.
name|evaluatePathRestrictions
argument_list|()
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"cons"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|setProperty
argument_list|(
name|PROP_FACETS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|indexNode
operator|=
name|getOrCreateByPath
argument_list|(
literal|"/oak:index"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"index"
argument_list|,
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|)
expr_stmt|;
name|idxBuilder
operator|.
name|build
argument_list|(
name|indexNode
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createLargeDataset
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Random
name|rGen
init|=
operator|new
name|Random
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|int
index|[]
name|labelCount
init|=
operator|new
name|int
index|[
name|NUM_LABELS
index|]
decl_stmt|;
name|int
index|[]
name|aclLabelCount
init|=
operator|new
name|int
index|[
name|NUM_LABELS
index|]
decl_stmt|;
name|int
index|[]
name|aclPar1LabelCount
init|=
operator|new
name|int
index|[
name|NUM_LABELS
index|]
decl_stmt|;
name|Node
name|par
init|=
name|allow
argument_list|(
name|getOrCreateByPath
argument_list|(
literal|"/parent"
argument_list|,
literal|"oak:Unstructured"
argument_list|,
name|session
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|subPar
init|=
name|par
operator|.
name|addNode
argument_list|(
literal|"par"
operator|+
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_LEAF_NODES
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|child
init|=
name|subPar
operator|.
name|addNode
argument_list|(
literal|"c"
operator|+
name|j
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"cons"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
comment|// Add a random label out of "l0", "l1", "l2", "l3"
name|int
name|labelNum
init|=
name|rGen
operator|.
name|nextInt
argument_list|(
name|NUM_LABELS
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"l"
operator|+
name|labelNum
argument_list|)
expr_stmt|;
name|labelCount
index|[
name|labelNum
index|]
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|aclLabelCount
index|[
name|labelNum
index|]
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|aclPar1LabelCount
index|[
name|labelNum
index|]
operator|++
expr_stmt|;
block|}
block|}
comment|// deny access for one sub-parent
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|deny
argument_list|(
name|subPar
argument_list|)
expr_stmt|;
block|}
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|labelCount
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|actualLabelCount
operator|.
name|put
argument_list|(
literal|"l"
operator|+
name|i
argument_list|,
name|labelCount
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|actualAclLabelCount
operator|.
name|put
argument_list|(
literal|"l"
operator|+
name|i
argument_list|,
name|aclLabelCount
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|actualAclPar1LabelCount
operator|.
name|put
argument_list|(
literal|"l"
operator|+
name|i
argument_list|,
name|aclPar1LabelCount
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertNotEquals
argument_list|(
literal|"Acl-ed and actual counts mustn't be same"
argument_list|,
name|actualLabelCount
argument_list|,
name|actualAclLabelCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|secureFacets
parameter_list|()
throws|throws
name|Exception
block|{
name|createLargeDataset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|actualAclLabelCount
argument_list|,
name|getFacets
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|secureFacets_withOneLabelInaccessible
parameter_list|()
throws|throws
name|Exception
block|{
name|createLargeDataset
argument_list|()
expr_stmt|;
name|Node
name|inaccessibleChild
init|=
name|deny
argument_list|(
name|session
operator|.
name|getNode
argument_list|(
literal|"/parent"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"par4"
argument_list|)
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"c0"
argument_list|)
decl_stmt|;
name|inaccessibleChild
operator|.
name|setProperty
argument_list|(
literal|"cons"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|inaccessibleChild
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"l4"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|actualAclLabelCount
argument_list|,
name|getFacets
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insecureFacets
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|facetConfig
init|=
name|getOrCreateByPath
argument_list|(
name|indexNode
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
name|FACETS
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
decl_stmt|;
name|facetConfig
operator|.
name|setProperty
argument_list|(
name|PROP_SECURE_FACETS
argument_list|,
name|PROP_SECURE_FACETS_VALUE_INSECURE
argument_list|)
expr_stmt|;
name|indexNode
operator|.
name|setProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|createLargeDataset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|actualLabelCount
argument_list|,
name|getFacets
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|statisticalFacets
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|facetConfig
init|=
name|getOrCreateByPath
argument_list|(
name|indexNode
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
name|FACETS
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
decl_stmt|;
name|facetConfig
operator|.
name|setProperty
argument_list|(
name|PROP_SECURE_FACETS
argument_list|,
name|PROP_SECURE_FACETS_VALUE_STATISTICAL
argument_list|)
expr_stmt|;
name|indexNode
operator|.
name|setProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|createLargeDataset
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|facets
init|=
name|getFacets
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of facets"
argument_list|,
name|actualAclLabelCount
operator|.
name|size
argument_list|()
argument_list|,
name|facets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|facet
range|:
name|actualAclLabelCount
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|facetLabel
init|=
name|facet
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|facetCount
init|=
name|facets
operator|.
name|get
argument_list|(
name|facetLabel
argument_list|)
decl_stmt|;
name|float
name|ratio
init|=
operator|(
operator|(
name|float
operator|)
name|facetCount
operator|)
operator|/
name|facet
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Facet count for label: "
operator|+
name|facetLabel
operator|+
literal|" is outside of 10% margin of error. "
operator|+
literal|"Expected: "
operator|+
name|facet
operator|.
name|getValue
argument_list|()
operator|+
literal|"; Got: "
operator|+
name|facetCount
operator|+
literal|"; Ratio: "
operator|+
name|ratio
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|ratio
operator|-
literal|1
argument_list|)
operator|<
literal|0.1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|statisticalFacets_withHitCountSameAsSampleSize
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|facetConfig
init|=
name|getOrCreateByPath
argument_list|(
name|indexNode
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
name|FACETS
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
decl_stmt|;
name|facetConfig
operator|.
name|setProperty
argument_list|(
name|PROP_SECURE_FACETS
argument_list|,
name|PROP_SECURE_FACETS_VALUE_STATISTICAL
argument_list|)
expr_stmt|;
name|indexNode
operator|.
name|setProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|createLargeDataset
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|facets
init|=
name|getFacets
argument_list|(
literal|"/parent/par1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of facets"
argument_list|,
name|actualAclPar1LabelCount
operator|.
name|size
argument_list|()
argument_list|,
name|facets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|facet
range|:
name|actualAclPar1LabelCount
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|facetLabel
init|=
name|facet
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|facetCount
init|=
name|facets
operator|.
name|get
argument_list|(
name|facetLabel
argument_list|)
decl_stmt|;
name|float
name|ratio
init|=
operator|(
operator|(
name|float
operator|)
name|facetCount
operator|)
operator|/
name|facet
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Facet count for label: "
operator|+
name|facetLabel
operator|+
literal|" is outside of 10% margin of error. "
operator|+
literal|"Expected: "
operator|+
name|facet
operator|.
name|getValue
argument_list|()
operator|+
literal|"; Got: "
operator|+
name|facetCount
operator|+
literal|"; Ratio: "
operator|+
name|ratio
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|ratio
operator|-
literal|1
argument_list|)
operator|<
literal|0.1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|statisticalFacets_withOneLabelInaccessible
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|facetConfig
init|=
name|getOrCreateByPath
argument_list|(
name|indexNode
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
name|FACETS
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
decl_stmt|;
name|facetConfig
operator|.
name|setProperty
argument_list|(
name|PROP_SECURE_FACETS
argument_list|,
name|PROP_SECURE_FACETS_VALUE_STATISTICAL
argument_list|)
expr_stmt|;
name|indexNode
operator|.
name|setProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|createLargeDataset
argument_list|()
expr_stmt|;
name|Node
name|inaccessibleChild
init|=
name|deny
argument_list|(
name|session
operator|.
name|getNode
argument_list|(
literal|"/parent"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"par4"
argument_list|)
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"c0"
argument_list|)
decl_stmt|;
name|inaccessibleChild
operator|.
name|setProperty
argument_list|(
literal|"cons"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|inaccessibleChild
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"l4"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|facets
init|=
name|getFacets
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of facets"
argument_list|,
name|actualAclLabelCount
operator|.
name|size
argument_list|()
argument_list|,
name|facets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|facet
range|:
name|actualAclLabelCount
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|facetLabel
init|=
name|facet
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|facetCount
init|=
name|facets
operator|.
name|get
argument_list|(
name|facetLabel
argument_list|)
decl_stmt|;
name|float
name|ratio
init|=
operator|(
operator|(
name|float
operator|)
name|facetCount
operator|)
operator|/
name|facet
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Facet count for label: "
operator|+
name|facetLabel
operator|+
literal|" is outside of 10% margin of error. "
operator|+
literal|"Expected: "
operator|+
name|facet
operator|.
name|getValue
argument_list|()
operator|+
literal|"; Got: "
operator|+
name|facetCount
operator|+
literal|"; Ratio: "
operator|+
name|ratio
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|ratio
operator|-
literal|1
argument_list|)
operator|<
literal|0.1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|secureFacets_withAdminSession
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|facetConfig
init|=
name|getOrCreateByPath
argument_list|(
name|indexNode
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
name|FACETS
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
decl_stmt|;
name|facetConfig
operator|.
name|setProperty
argument_list|(
name|PROP_SECURE_FACETS
argument_list|,
name|PROP_SECURE_FACETS_VALUE_INSECURE
argument_list|)
expr_stmt|;
name|indexNode
operator|.
name|setProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|createLargeDataset
argument_list|()
expr_stmt|;
name|qe
operator|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|actualLabelCount
argument_list|,
name|getFacets
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|statisticalFacets_withAdminSession
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|facetConfig
init|=
name|getOrCreateByPath
argument_list|(
name|indexNode
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
name|FACETS
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
decl_stmt|;
name|facetConfig
operator|.
name|setProperty
argument_list|(
name|PROP_SECURE_FACETS
argument_list|,
name|PROP_SECURE_FACETS_VALUE_STATISTICAL
argument_list|)
expr_stmt|;
name|indexNode
operator|.
name|setProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|createLargeDataset
argument_list|()
expr_stmt|;
name|qe
operator|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|facets
init|=
name|getFacets
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of facets"
argument_list|,
name|actualLabelCount
operator|.
name|size
argument_list|()
argument_list|,
name|facets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|facet
range|:
name|actualLabelCount
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|facetLabel
init|=
name|facet
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|facetCount
init|=
name|facets
operator|.
name|get
argument_list|(
name|facetLabel
argument_list|)
decl_stmt|;
name|float
name|ratio
init|=
operator|(
operator|(
name|float
operator|)
name|facetCount
operator|)
operator|/
name|facet
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Facet count for label: "
operator|+
name|facetLabel
operator|+
literal|" is outside of 5% margin of error. "
operator|+
literal|"Expected: "
operator|+
name|facet
operator|.
name|getValue
argument_list|()
operator|+
literal|"; Got: "
operator|+
name|facetCount
operator|+
literal|"; Ratio: "
operator|+
name|ratio
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|ratio
operator|-
literal|1
argument_list|)
operator|<
literal|0.05
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getFacets
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getFacets
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getFacets
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|String
name|pathCons
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|pathCons
operator|=
literal|" AND ISDESCENDANTNODE('"
operator|+
name|path
operator|+
literal|"')"
expr_stmt|;
block|}
name|String
name|query
init|=
literal|"SELECT [rep:facet(foo)] FROM [nt:base] WHERE [cons] = 'val'"
operator|+
name|pathCons
decl_stmt|;
name|Query
name|q
init|=
name|qe
operator|.
name|createQuery
argument_list|(
name|query
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
name|QueryResult
name|queryResult
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|FacetResult
name|facetResult
init|=
operator|new
name|FacetResult
argument_list|(
name|queryResult
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|dims
init|=
name|facetResult
operator|.
name|getDimensions
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dim
range|:
name|dims
control|)
block|{
name|List
argument_list|<
name|Facet
argument_list|>
name|facets
init|=
name|facetResult
operator|.
name|getFacets
argument_list|(
name|dim
argument_list|)
decl_stmt|;
for|for
control|(
name|Facet
name|facet
range|:
name|facets
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|facet
operator|.
name|getLabel
argument_list|()
argument_list|,
name|facet
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedReturnValue"
argument_list|)
specifier|private
name|Node
name|deny
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|AccessControlUtils
operator|.
name|deny
argument_list|(
name|node
argument_list|,
literal|"anonymous"
argument_list|,
name|Privilege
operator|.
name|JCR_ALL
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|private
name|Node
name|allow
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|AccessControlUtils
operator|.
name|allow
argument_list|(
name|node
argument_list|,
literal|"anonymous"
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
block|}
end_class

end_unit

