begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|federated
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * This map wraps around the passed argument and caches all the returned values.  * It is meant to be wrapped around the result of  * {@link com.google.common.collect.Maps#transformValues(Map, Function)} method  * or its variant. This allows to preserve the laziness of map transformation and  * at the same time to avoid re-calculating the same values.  *<br>  * It's immutable and used IdentityHashMap for caching values.  *  * @param<K> - the type of keys maintained by this map  * @param<V> - the type of mapped values  */
end_comment

begin_class
class|class
name|CopyOnReadIdentityMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|private
name|Integer
name|cachedSize
decl_stmt|;
specifier|private
name|Boolean
name|cachedIsEmpty
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cachedValues
decl_stmt|;
specifier|private
name|boolean
name|allValuesCached
decl_stmt|;
specifier|public
name|CopyOnReadIdentityMap
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|wrappedMap
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|wrappedMap
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
if|if
condition|(
name|allValuesCached
condition|)
block|{
return|return
name|cachedValues
operator|.
name|size
argument_list|()
return|;
block|}
if|if
condition|(
name|cachedSize
operator|==
literal|null
condition|)
block|{
name|cachedSize
operator|=
name|map
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|cachedSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
if|if
condition|(
name|allValuesCached
condition|)
block|{
return|return
name|cachedValues
operator|.
name|isEmpty
argument_list|()
return|;
block|}
if|if
condition|(
name|cachedIsEmpty
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|cachedSize
operator|==
literal|null
condition|)
block|{
name|cachedIsEmpty
operator|=
name|map
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cachedIsEmpty
operator|=
name|cachedSize
operator|>
literal|0
expr_stmt|;
block|}
block|}
return|return
name|cachedIsEmpty
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|allValuesCached
condition|)
block|{
return|return
name|cachedValues
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
if|if
condition|(
name|cachedValues
operator|!=
literal|null
operator|&&
name|cachedValues
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|allValuesCached
condition|)
block|{
return|return
name|cachedValues
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
return|;
block|}
for|for
control|(
name|K
name|k
range|:
name|keySet
argument_list|()
control|)
block|{
name|V
name|v
init|=
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|&&
name|v
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|v
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|cachedValues
operator|==
literal|null
condition|)
block|{
name|cachedValues
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
name|allValuesCached
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|allValuesCached
condition|)
block|{
return|return
name|cachedValues
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
if|if
condition|(
name|cachedValues
operator|!=
literal|null
operator|&&
name|cachedValues
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|cachedValues
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|initCachedValues
argument_list|()
expr_stmt|;
name|V
name|v
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|cachedValues
operator|.
name|put
argument_list|(
operator|(
name|K
operator|)
name|key
argument_list|,
name|v
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|m
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
name|map
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
name|readAll
argument_list|()
expr_stmt|;
return|return
name|cachedValues
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
name|readAll
argument_list|()
expr_stmt|;
return|return
name|cachedValues
operator|.
name|entrySet
argument_list|()
return|;
block|}
specifier|private
name|void
name|readAll
parameter_list|()
block|{
if|if
condition|(
name|allValuesCached
condition|)
block|{
return|return;
block|}
name|initCachedValues
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|cachedValues
operator|.
name|containsKey
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|cachedValues
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|allValuesCached
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|initCachedValues
parameter_list|()
block|{
if|if
condition|(
name|cachedValues
operator|==
literal|null
condition|)
block|{
name|cachedValues
operator|=
operator|new
name|IdentityHashMap
argument_list|<>
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

