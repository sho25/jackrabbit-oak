begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_comment
comment|/**  * Interface used to verify if a given {@code restriction} applies to a given  * item or path.  */
end_comment

begin_interface
specifier|public
interface|interface
name|RestrictionPattern
block|{
comment|/**      * Returns {@code true} if the underlying restriction matches the specified      * tree or property state.      *      * @param tree The target tree or the parent of the target property.      * @param property The target property state or {@code null} if the target      * item is a tree.      * @return {@code true} if the underlying restriction matches the specified      * tree or property state; {@code false} otherwise.      */
name|boolean
name|matches
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|)
function_decl|;
comment|/**      * Returns {@code true} if the underlying restriction matches the specified      * path.      *      * @param path The path of the target item.      * @return {@code true} if the underlying restriction matches the specified      * path; {@code false} otherwise.      */
name|boolean
name|matches
parameter_list|(
annotation|@
name|Nonnull
name|String
name|path
parameter_list|)
function_decl|;
comment|/**      * Returns {@code true} if the underlying restriction matches for repository      * level permissions.      *      * @return {@code true} if the underlying restriction matches for repository      * level permissions that are not associated with a path or a dedicated item;      * {@code false} otherwise.      */
name|boolean
name|matches
parameter_list|()
function_decl|;
comment|/**      * Default implementation of the {@code RestrictionPattern} that always      * returns {@code true} and thus matches all items or paths.      */
name|RestrictionPattern
name|EMPTY
init|=
operator|new
name|RestrictionPattern
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
annotation|@
name|Nonnull
name|String
name|path
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"RestrictionPattern.EMPTY"
return|;
block|}
block|}
decl_stmt|;
block|}
end_interface

end_unit

