begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2004-2011 H2 Group. Multiple-Licensed under the H2 License,  * Version 1.0, and under the Eclipse Public License, Version 1.0  * (http://h2database.com/html/license.html).  * Initial Developer: H2 Group  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_comment
comment|/**  * Allows to read from a file channel like an input stream.  */
end_comment

begin_class
specifier|public
class|class
name|FileChannelInputStream
extends|extends
name|InputStream
block|{
specifier|private
specifier|final
name|FileChannel
name|channel
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|buffer
init|=
block|{
literal|0
block|}
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|closeChannel
decl_stmt|;
comment|/**      * Create a new file object input stream from the file channel.      *      * @param channel the file channel      * @param closeChannel close the channel when done      */
specifier|public
name|FileChannelInputStream
parameter_list|(
name|FileChannel
name|channel
parameter_list|,
name|boolean
name|closeChannel
parameter_list|)
block|{
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|this
operator|.
name|closeChannel
operator|=
name|closeChannel
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|channel
operator|.
name|position
argument_list|()
operator|>=
name|channel
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|FileUtils
operator|.
name|readFully
argument_list|(
name|channel
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buffer
index|[
literal|0
index|]
operator|&
literal|0xff
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|channel
operator|.
name|position
argument_list|()
operator|+
name|len
operator|<
name|channel
operator|.
name|size
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|readFully
argument_list|(
name|channel
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|len
return|;
block|}
return|return
name|super
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|n
operator|=
name|Math
operator|.
name|min
argument_list|(
name|channel
operator|.
name|size
argument_list|()
operator|-
name|channel
operator|.
name|position
argument_list|()
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|channel
operator|.
name|position
argument_list|(
name|channel
operator|.
name|position
argument_list|()
operator|+
name|n
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closeChannel
condition|)
block|{
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

