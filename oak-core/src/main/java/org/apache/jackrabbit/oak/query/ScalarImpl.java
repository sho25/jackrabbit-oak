begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_class
specifier|public
class|class
name|ScalarImpl
implements|implements
name|Comparable
argument_list|<
name|ScalarImpl
argument_list|>
block|{
specifier|private
specifier|final
name|Object
name|value
decl_stmt|;
specifier|private
specifier|final
name|int
name|type
decl_stmt|;
specifier|public
name|ScalarImpl
parameter_list|(
name|Object
name|value
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|String
name|getString
parameter_list|()
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|long
name|getLong
parameter_list|()
block|{
comment|// TODO convert?
return|return
operator|(
operator|(
name|Long
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
specifier|public
name|double
name|getDouble
parameter_list|()
block|{
comment|// TODO convert?
return|return
operator|(
operator|(
name|Double
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|getBoolean
parameter_list|()
block|{
comment|// TODO convert?
return|return
operator|(
operator|(
name|Boolean
operator|)
name|value
operator|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|BigDecimal
name|getDecimal
parameter_list|()
block|{
comment|// TODO convert?
return|return
operator|(
name|BigDecimal
operator|)
name|value
return|;
block|}
specifier|public
name|String
name|getBinary
parameter_list|()
block|{
comment|// TODO convert?
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getDate
parameter_list|()
block|{
comment|// TODO convert?
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|type
operator|^
name|value
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|ScalarImpl
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ScalarImpl
name|v
init|=
operator|(
name|ScalarImpl
operator|)
name|o
decl_stmt|;
return|return
name|type
operator|==
name|v
operator|.
name|type
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|v
operator|.
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|ScalarImpl
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|type
operator|!=
name|o
operator|.
name|type
condition|)
block|{
comment|// TODO convert?
return|return
name|type
operator|-
name|o
operator|.
name|type
return|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|ScalarType
operator|.
name|LONG
case|:
return|return
operator|(
operator|(
name|Long
operator|)
name|value
operator|)
operator|.
name|compareTo
argument_list|(
operator|(
name|Long
operator|)
name|o
operator|.
name|value
argument_list|)
return|;
case|case
name|ScalarType
operator|.
name|DOUBLE
case|:
return|return
operator|(
operator|(
name|Double
operator|)
name|value
operator|)
operator|.
name|compareTo
argument_list|(
operator|(
name|Double
operator|)
name|o
operator|.
name|value
argument_list|)
return|;
case|case
name|ScalarType
operator|.
name|DECIMAL
case|:
return|return
operator|(
operator|(
name|BigDecimal
operator|)
name|value
operator|)
operator|.
name|compareTo
argument_list|(
operator|(
name|BigDecimal
operator|)
name|o
operator|.
name|value
argument_list|)
return|;
case|case
name|ScalarType
operator|.
name|BOOLEAN
case|:
return|return
operator|(
operator|(
name|Boolean
operator|)
name|value
operator|)
operator|.
name|compareTo
argument_list|(
operator|(
name|Boolean
operator|)
name|o
operator|.
name|value
argument_list|)
return|;
block|}
return|return
name|value
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

