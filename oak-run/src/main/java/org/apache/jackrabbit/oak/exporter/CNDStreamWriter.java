begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exporter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopWriter
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_class
class|class
name|CNDStreamWriter
implements|implements
name|JsopWriter
implements|,
name|Closeable
block|{
specifier|private
enum|enum
name|State
block|{
name|NONE
block|,
name|STARTED
block|,
name|BEGIN
block|,
name|END
block|}
specifier|private
specifier|final
name|PrintWriter
name|w
decl_stmt|;
specifier|private
name|State
name|arrayState
init|=
name|State
operator|.
name|NONE
decl_stmt|;
specifier|private
name|int
name|depth
init|=
literal|0
decl_stmt|;
specifier|private
name|String
name|deferredName
decl_stmt|;
specifier|private
name|String
name|indent
init|=
literal|"  "
decl_stmt|;
specifier|public
name|CNDStreamWriter
parameter_list|(
name|PrintWriter
name|w
parameter_list|)
block|{
name|this
operator|.
name|w
operator|=
name|w
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|JsopWriter
name|object
parameter_list|()
block|{
if|if
condition|(
name|deferredName
operator|!=
literal|null
condition|)
block|{
name|w
operator|.
name|println
argument_list|()
expr_stmt|;
name|space
argument_list|()
expr_stmt|;
name|w
operator|.
name|print
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
name|w
operator|.
name|print
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|w
operator|.
name|print
argument_list|(
name|deferredName
argument_list|)
expr_stmt|;
name|deferredName
operator|=
literal|null
expr_stmt|;
block|}
name|depth
operator|++
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|JsopWriter
name|endObject
parameter_list|()
block|{
name|optionalResetArrayState
argument_list|()
expr_stmt|;
name|depth
operator|--
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|JsopWriter
name|array
parameter_list|()
block|{
name|checkState
argument_list|(
name|arrayState
operator|==
name|State
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|optionalKey
argument_list|()
expr_stmt|;
name|arrayState
operator|=
name|State
operator|.
name|BEGIN
expr_stmt|;
name|w
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|JsopWriter
name|endArray
parameter_list|()
block|{
name|checkState
argument_list|(
name|arrayState
operator|==
name|State
operator|.
name|BEGIN
operator|||
name|arrayState
operator|==
name|State
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|arrayState
operator|=
name|State
operator|.
name|END
expr_stmt|;
name|w
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|JsopWriter
name|key
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|optionalResetArrayState
argument_list|()
expr_stmt|;
name|deferredName
operator|=
name|key
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|JsopWriter
name|encodedValue
parameter_list|(
name|String
name|raw
parameter_list|)
block|{
name|optionalKey
argument_list|()
expr_stmt|;
name|optionalComma
argument_list|()
expr_stmt|;
name|w
operator|.
name|print
argument_list|(
name|raw
argument_list|)
expr_stmt|;
name|optionalChangeArrayState
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|JsopWriter
name|value
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|encodedValue
argument_list|(
name|JsopBuilder
operator|.
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|JsopWriter
name|value
parameter_list|(
name|long
name|x
parameter_list|)
block|{
return|return
name|encodedValue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|JsopWriter
name|value
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
return|return
name|encodedValue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|b
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|checkState
argument_list|(
name|depth
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|optionalComma
parameter_list|()
block|{
if|if
condition|(
name|arrayState
operator|==
name|State
operator|.
name|STARTED
condition|)
block|{
name|w
operator|.
name|print
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|optionalChangeArrayState
parameter_list|()
block|{
if|if
condition|(
name|arrayState
operator|==
name|State
operator|.
name|BEGIN
condition|)
block|{
name|arrayState
operator|=
name|State
operator|.
name|STARTED
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|optionalKey
parameter_list|()
block|{
if|if
condition|(
name|arrayState
operator|==
name|State
operator|.
name|BEGIN
operator|||
name|arrayState
operator|==
name|State
operator|.
name|STARTED
condition|)
block|{
return|return;
block|}
name|checkNotNull
argument_list|(
name|deferredName
argument_list|)
expr_stmt|;
name|w
operator|.
name|println
argument_list|()
expr_stmt|;
name|space
argument_list|()
expr_stmt|;
name|w
operator|.
name|print
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|w
operator|.
name|print
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|w
operator|.
name|print
argument_list|(
name|deferredName
argument_list|)
expr_stmt|;
name|w
operator|.
name|print
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
name|deferredName
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|space
parameter_list|()
block|{
name|w
operator|.
name|print
argument_list|(
name|Strings
operator|.
name|repeat
argument_list|(
name|indent
argument_list|,
name|depth
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|optionalResetArrayState
parameter_list|()
block|{
name|checkState
argument_list|(
name|arrayState
operator|==
name|State
operator|.
name|END
operator|||
name|arrayState
operator|==
name|State
operator|.
name|NONE
argument_list|)
expr_stmt|;
if|if
condition|(
name|arrayState
operator|==
name|State
operator|.
name|END
condition|)
block|{
name|arrayState
operator|=
name|State
operator|.
name|NONE
expr_stmt|;
block|}
block|}
comment|//Unsupported operation. These are also not used by JsonSerializer
annotation|@
name|Override
specifier|public
name|JsopWriter
name|tag
parameter_list|(
name|char
name|tag
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|JsopWriter
name|append
parameter_list|(
name|JsopWriter
name|diff
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|JsopWriter
name|newline
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetWriter
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLineLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

