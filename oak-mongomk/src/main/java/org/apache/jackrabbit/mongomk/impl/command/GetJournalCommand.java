begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|tree
operator|.
name|DiffBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|MongoNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|action
operator|.
name|FetchCommitsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|action
operator|.
name|FetchHeadRevisionIdAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|json
operator|.
name|JsopParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|json
operator|.
name|NormalizingJsopHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|MongoCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|tree
operator|.
name|SimpleMongoNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|util
operator|.
name|MongoUtil
import|;
end_import

begin_comment
comment|/**  * A {@code Command} for {@code MongoMicroKernel#getJournal(String, String, String)}  */
end_comment

begin_class
specifier|public
class|class
name|GetJournalCommand
extends|extends
name|BaseCommand
argument_list|<
name|String
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|fromRevisionId
decl_stmt|;
specifier|private
specifier|final
name|String
name|toRevisionId
decl_stmt|;
specifier|private
name|String
name|path
decl_stmt|;
comment|/**      * Constructs a {@code GetJournalCommandMongo}      *      * @param nodeStore Node store.      * @param fromRevisionId From revision.      * @param toRevisionId To revision.      * @param path Path.      */
specifier|public
name|GetJournalCommand
parameter_list|(
name|MongoNodeStore
name|nodeStore
parameter_list|,
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
name|this
operator|.
name|fromRevisionId
operator|=
name|fromRevisionId
expr_stmt|;
name|this
operator|.
name|toRevisionId
operator|=
name|toRevisionId
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|path
operator|=
name|MongoUtil
operator|.
name|adjustPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|long
name|fromRevision
init|=
name|MongoUtil
operator|.
name|toMongoRepresentation
argument_list|(
name|fromRevisionId
argument_list|)
decl_stmt|;
name|long
name|toRevision
decl_stmt|;
if|if
condition|(
name|toRevisionId
operator|==
literal|null
condition|)
block|{
name|toRevision
operator|=
operator|new
name|FetchHeadRevisionIdAction
argument_list|(
name|nodeStore
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|toRevision
operator|=
name|MongoUtil
operator|.
name|toMongoRepresentation
argument_list|(
name|toRevisionId
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MongoCommit
argument_list|>
name|commits
init|=
name|getCommits
argument_list|(
name|fromRevision
argument_list|,
name|toRevision
argument_list|)
decl_stmt|;
name|MongoCommit
name|toCommit
init|=
name|extractCommit
argument_list|(
name|commits
argument_list|,
name|toRevision
argument_list|)
decl_stmt|;
name|MongoCommit
name|fromCommit
decl_stmt|;
if|if
condition|(
name|toRevision
operator|==
name|fromRevision
condition|)
block|{
name|fromCommit
operator|=
name|toCommit
expr_stmt|;
block|}
else|else
block|{
name|fromCommit
operator|=
name|extractCommit
argument_list|(
name|commits
argument_list|,
name|fromRevision
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fromCommit
operator|!=
literal|null
operator|&&
name|fromCommit
operator|.
name|getBranchId
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|fromCommit
operator|.
name|getBranchId
argument_list|()
operator|.
name|equals
argument_list|(
name|toCommit
operator|.
name|getBranchId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Inconsistent range specified: fromRevision denotes a private branch while toRevision denotes a head or another private branch"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|fromCommit
operator|!=
literal|null
operator|&&
name|fromCommit
operator|.
name|getTimestamp
argument_list|()
operator|>
name|toCommit
operator|.
name|getTimestamp
argument_list|()
condition|)
block|{
comment|// negative range, return empty journal
return|return
literal|"[]"
return|;
block|}
name|JsopBuilder
name|commitBuff
init|=
operator|new
name|JsopBuilder
argument_list|()
operator|.
name|array
argument_list|()
decl_stmt|;
comment|// Iterate over commits in chronological order, starting with oldest commit
for|for
control|(
name|int
name|i
init|=
name|commits
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|MongoCommit
name|commit
init|=
name|commits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|diff
init|=
name|commit
operator|.
name|getDiff
argument_list|()
decl_stmt|;
if|if
condition|(
name|MongoUtil
operator|.
name|isFiltered
argument_list|(
name|path
argument_list|)
condition|)
block|{
try|try
block|{
name|diff
operator|=
operator|new
name|DiffBuilder
argument_list|(
name|MongoUtil
operator|.
name|wrap
argument_list|(
name|getNode
argument_list|(
literal|"/"
argument_list|,
name|commit
operator|.
name|getBaseRevisionId
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|MongoUtil
operator|.
name|wrap
argument_list|(
name|getNode
argument_list|(
literal|"/"
argument_list|,
name|commit
operator|.
name|getRevisionId
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|"/"
argument_list|,
operator|-
literal|1
argument_list|,
operator|new
name|SimpleMongoNodeStore
argument_list|()
argument_list|,
name|path
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
if|if
condition|(
name|diff
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|diff
operator|=
name|normalizeDiff
argument_list|(
name|commit
operator|.
name|getPath
argument_list|()
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
name|commitBuff
operator|.
name|object
argument_list|()
operator|.
name|key
argument_list|(
literal|"id"
argument_list|)
operator|.
name|value
argument_list|(
name|MongoUtil
operator|.
name|fromMongoRepresentation
argument_list|(
name|commit
operator|.
name|getRevisionId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|key
argument_list|(
literal|"ts"
argument_list|)
operator|.
name|value
argument_list|(
name|commit
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|key
argument_list|(
literal|"msg"
argument_list|)
operator|.
name|value
argument_list|(
name|commit
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|commit
operator|.
name|getBranchId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|commitBuff
operator|.
name|key
argument_list|(
literal|"branchRootId"
argument_list|)
operator|.
name|value
argument_list|(
name|commit
operator|.
name|getBranchId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|commitBuff
operator|.
name|key
argument_list|(
literal|"changes"
argument_list|)
operator|.
name|value
argument_list|(
name|diff
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|commitBuff
operator|.
name|endArray
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|MongoCommit
name|extractCommit
parameter_list|(
name|List
argument_list|<
name|MongoCommit
argument_list|>
name|commits
parameter_list|,
name|long
name|revisionId
parameter_list|)
block|{
for|for
control|(
name|MongoCommit
name|commit
range|:
name|commits
control|)
block|{
if|if
condition|(
name|commit
operator|.
name|getRevisionId
argument_list|()
operator|==
name|revisionId
condition|)
block|{
return|return
name|commit
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|List
argument_list|<
name|MongoCommit
argument_list|>
name|getCommits
parameter_list|(
name|long
name|fromRevisionId
parameter_list|,
name|long
name|toRevisionId
parameter_list|)
block|{
return|return
operator|new
name|FetchCommitsAction
argument_list|(
name|nodeStore
argument_list|,
name|fromRevisionId
argument_list|,
name|toRevisionId
argument_list|)
operator|.
name|execute
argument_list|()
return|;
block|}
specifier|private
name|Node
name|getNode
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revisionId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|GetNodesCommand
argument_list|(
name|nodeStore
argument_list|,
name|path
argument_list|,
name|revisionId
argument_list|)
operator|.
name|execute
argument_list|()
return|;
block|}
specifier|private
name|String
name|normalizeDiff
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|diff
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Need to normalize against empty path in journal diffs.
name|NormalizingJsopHandler
name|handler
init|=
operator|new
name|NormalizingJsopHandler
argument_list|(
literal|""
argument_list|)
decl_stmt|;
operator|new
name|JsopParser
argument_list|(
name|path
argument_list|,
name|diff
argument_list|,
name|handler
argument_list|)
operator|.
name|parse
argument_list|()
expr_stmt|;
return|return
name|handler
operator|.
name|getDiff
argument_list|()
return|;
block|}
block|}
end_class

end_unit

