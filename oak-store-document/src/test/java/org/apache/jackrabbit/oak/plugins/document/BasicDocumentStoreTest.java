begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ContiguousSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|DiscreteDomain
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Range
import|;
end_import

begin_class
specifier|public
class|class
name|BasicDocumentStoreTest
extends|extends
name|AbstractDocumentStoreTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BasicDocumentStoreTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|BasicDocumentStoreTest
parameter_list|(
name|DocumentStoreFixture
name|dsf
parameter_list|)
block|{
name|super
argument_list|(
name|dsf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddAndRemove
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testAddAndRemove"
decl_stmt|;
comment|// remove if present
name|NodeDocument
name|nd
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|// add
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|invalidateCache
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddAndRemoveWithoutIdInUpdateOp
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testAddAndRemoveWithoutIdInUpdateOp"
decl_stmt|;
comment|// remove if present
name|NodeDocument
name|nd
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|// add
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|invalidateCache
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValuesForSystemProps
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testValuesForSystemProps"
decl_stmt|;
comment|// remove if present
name|NodeDocument
name|nd
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// add
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|invalidateCache
argument_list|()
expr_stmt|;
name|nd
operator|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nd
operator|.
name|get
argument_list|(
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nd
operator|.
name|get
argument_list|(
name|NodeDocument
operator|.
name|HAS_BINARY_FLAG
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nd
operator|.
name|wasDeletedOnce
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nd
operator|.
name|hasBinary
argument_list|()
argument_list|)
expr_stmt|;
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|up
operator|.
name|set
argument_list|(
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|invalidateCache
argument_list|()
expr_stmt|;
name|nd
operator|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|nd
operator|.
name|get
argument_list|(
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nd
operator|.
name|get
argument_list|(
name|NodeDocument
operator|.
name|HAS_BINARY_FLAG
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nd
operator|.
name|wasDeletedOnce
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nd
operator|.
name|hasBinary
argument_list|()
argument_list|)
expr_stmt|;
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|up
operator|.
name|set
argument_list|(
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|up
operator|.
name|set
argument_list|(
name|NodeDocument
operator|.
name|HAS_BINARY_FLAG
argument_list|,
name|NodeDocument
operator|.
name|HAS_BINARY_VAL
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|invalidateCache
argument_list|()
expr_stmt|;
name|nd
operator|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|nd
operator|.
name|get
argument_list|(
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NodeDocument
operator|.
name|HAS_BINARY_VAL
argument_list|,
name|nd
operator|.
name|get
argument_list|(
name|NodeDocument
operator|.
name|HAS_BINARY_FLAG
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nd
operator|.
name|wasDeletedOnce
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nd
operator|.
name|hasBinary
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|up
operator|.
name|remove
argument_list|(
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|)
expr_stmt|;
name|up
operator|.
name|remove
argument_list|(
name|NodeDocument
operator|.
name|HAS_BINARY_FLAG
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|invalidateCache
argument_list|()
expr_stmt|;
name|nd
operator|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nd
operator|.
name|get
argument_list|(
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nd
operator|.
name|get
argument_list|(
name|NodeDocument
operator|.
name|HAS_BINARY_FLAG
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetId
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testSetId"
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{         }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateOrUpdate
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testCreateOrUpdate"
decl_stmt|;
comment|// remove if present
name|NodeDocument
name|nd
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|// create
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|super
operator|.
name|ds
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
argument_list|)
expr_stmt|;
comment|// update
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|super
operator|.
name|ds
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateOrUpdateWithoutIdInUpdateOp
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testCreateOrUpdateWithoutIdInUpdateOp"
decl_stmt|;
comment|// remove if present
name|NodeDocument
name|nd
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|// create
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|super
operator|.
name|ds
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
argument_list|)
expr_stmt|;
comment|// update
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|super
operator|.
name|ds
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddAndRemoveJournalEntry
parameter_list|()
block|{
comment|// OAK-4021
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testAddAndRemoveJournalEntry"
decl_stmt|;
comment|// remove if present
name|Document
name|d
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|JOURNAL
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|JOURNAL
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|// add
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|JOURNAL
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConditionalUpdate
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testConditionalUpdate"
decl_stmt|;
comment|// remove if present
name|NodeDocument
name|nd
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|String
name|existingProp
init|=
literal|"_recoverylock"
decl_stmt|;
name|String
name|existingRevisionProp
init|=
literal|"recoverylock"
decl_stmt|;
name|String
name|nonExistingProp
init|=
literal|"_qux"
decl_stmt|;
name|String
name|nonExistingRevisionProp
init|=
literal|"qux"
decl_stmt|;
name|Revision
name|r
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// add
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
name|existingProp
argument_list|,
literal|"lock"
argument_list|)
expr_stmt|;
name|up
operator|.
name|setMapEntry
argument_list|(
name|existingRevisionProp
argument_list|,
name|r
argument_list|,
literal|"lock"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// updates
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|up
operator|.
name|notEquals
argument_list|(
name|nonExistingProp
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
name|NodeDocument
name|result
init|=
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|up
operator|.
name|equals
argument_list|(
name|nonExistingProp
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|=
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|up
operator|.
name|notEquals
argument_list|(
name|nonExistingRevisionProp
argument_list|,
name|r
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
name|result
operator|=
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|up
operator|.
name|equals
argument_list|(
name|nonExistingRevisionProp
argument_list|,
name|r
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|=
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|up
operator|.
name|equals
argument_list|(
name|existingProp
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
name|result
operator|=
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|up
operator|.
name|equals
argument_list|(
name|existingProp
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|=
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|up
operator|.
name|equals
argument_list|(
name|existingRevisionProp
argument_list|,
name|r
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
name|result
operator|=
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|up
operator|.
name|equals
argument_list|(
name|existingRevisionProp
argument_list|,
name|r
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|=
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|up
operator|.
name|notEquals
argument_list|(
name|existingProp
argument_list|,
literal|"lock"
argument_list|)
expr_stmt|;
name|result
operator|=
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|up
operator|.
name|equals
argument_list|(
name|existingProp
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|=
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|up
operator|.
name|notEquals
argument_list|(
name|existingRevisionProp
argument_list|,
name|r
argument_list|,
literal|"lock"
argument_list|)
expr_stmt|;
name|result
operator|=
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|up
operator|.
name|equals
argument_list|(
name|existingRevisionProp
argument_list|,
name|r
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|=
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|up
operator|.
name|equals
argument_list|(
name|existingProp
argument_list|,
literal|"lock"
argument_list|)
expr_stmt|;
name|up
operator|.
name|set
argument_list|(
name|existingProp
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
name|result
operator|=
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|up
operator|.
name|equals
argument_list|(
name|existingRevisionProp
argument_list|,
name|r
argument_list|,
literal|"lock"
argument_list|)
expr_stmt|;
name|up
operator|.
name|setMapEntry
argument_list|(
name|existingRevisionProp
argument_list|,
name|r
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
name|result
operator|=
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConditionalUpdateForbidden
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testConditionalupdateForbidden"
decl_stmt|;
comment|// remove if present
name|NodeDocument
name|nd
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|equals
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"conditional create should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{
comment|// reported by UpdateOp
block|}
name|UpdateOp
name|cup
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|cup
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
try|try
block|{
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|up
operator|.
name|equals
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"conditional createOrUpdate should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// reported by DocumentStore
block|}
try|try
block|{
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|up
operator|.
name|equals
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"conditional createOrUpdate should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// reported by DocumentStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxIdAscii
parameter_list|()
block|{
name|int
name|result
init|=
name|testMaxId
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"needs to support keys of 512 bytes length, but only supports "
operator|+
name|result
argument_list|,
name|result
operator|>=
literal|512
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxIdNonAscii
parameter_list|()
block|{
name|testMaxId
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongId
parameter_list|()
block|{
name|String
name|id
init|=
literal|"0:/"
operator|+
name|generateId
argument_list|(
literal|2048
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"find() with ultra-long id needs to return 'null'"
argument_list|,
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|super
operator|.
name|dsname
operator|.
name|contains
argument_list|(
literal|"Memory"
argument_list|)
condition|)
block|{
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"create() with ultra-long id needs to fail"
argument_list|,
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//OAK-3001
annotation|@
name|Test
specifier|public
name|void
name|testRangeRemove
parameter_list|()
block|{
name|String
name|idPrefix
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testRangeRemove"
decl_stmt|;
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Range
argument_list|<
name|Long
argument_list|>
name|modTimes
init|=
name|Range
operator|.
name|closed
argument_list|(
literal|1L
argument_list|,
literal|30L
argument_list|)
decl_stmt|;
for|for
control|(
name|Long
name|modTime
range|:
name|ContiguousSet
operator|.
name|create
argument_list|(
name|modTimes
argument_list|,
name|DiscreteDomain
operator|.
name|longs
argument_list|()
argument_list|)
control|)
block|{
name|String
name|id
init|=
name|idPrefix
operator|+
name|modTime
decl_stmt|;
comment|// remove if present
name|Document
name|d
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|JOURNAL
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|JOURNAL
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|// add
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_modified"
argument_list|,
name|modTime
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|JOURNAL
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
expr_stmt|;
name|removeMeJournal
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Number of entries removed didn't match"
argument_list|,
literal|3
argument_list|,
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|JOURNAL
argument_list|,
literal|"_modified"
argument_list|,
literal|20
argument_list|,
literal|24
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of entries removed didn't match"
argument_list|,
literal|0
argument_list|,
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|JOURNAL
argument_list|,
literal|"_modified"
argument_list|,
literal|20
argument_list|,
literal|24
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of entries removed didn't match"
argument_list|,
literal|4
argument_list|,
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|JOURNAL
argument_list|,
literal|"_modified"
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of entries removed didn't match"
argument_list|,
literal|5
argument_list|,
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|JOURNAL
argument_list|,
literal|"_modified"
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// interesting cases
name|assertEquals
argument_list|(
literal|"Number of entries removed didn't match"
argument_list|,
literal|0
argument_list|,
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|JOURNAL
argument_list|,
literal|"_modified"
argument_list|,
literal|20
argument_list|,
literal|19
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of entries removed didn't match"
argument_list|,
literal|0
argument_list|,
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|JOURNAL
argument_list|,
literal|"_modified"
argument_list|,
literal|31
argument_list|,
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of entries removed didn't match"
argument_list|,
literal|2
argument_list|,
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|JOURNAL
argument_list|,
literal|"_modified"
argument_list|,
literal|28
argument_list|,
literal|40
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|testMaxId
parameter_list|(
name|boolean
name|ascii
parameter_list|)
block|{
name|int
name|min
init|=
literal|0
decl_stmt|;
name|int
name|max
init|=
literal|32768
decl_stmt|;
name|int
name|test
init|=
literal|0
decl_stmt|;
name|int
name|last
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|max
operator|-
name|min
operator|>=
literal|2
condition|)
block|{
name|test
operator|=
operator|(
name|max
operator|+
name|min
operator|)
operator|/
literal|2
expr_stmt|;
name|String
name|id
init|=
name|generateId
argument_list|(
name|test
argument_list|,
name|ascii
argument_list|)
decl_stmt|;
comment|// make sure it's gone before trying to create it
try|try
block|{
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentStoreException
name|ignored
parameter_list|)
block|{             }
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
comment|// check that we really can read it
name|NodeDocument
name|findme
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"failed to retrieve previously stored document"
argument_list|,
name|findme
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|findme
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|min
operator|=
name|test
expr_stmt|;
name|last
operator|=
name|test
expr_stmt|;
block|}
else|else
block|{
name|max
operator|=
name|test
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"max "
operator|+
operator|(
name|ascii
condition|?
literal|"ASCII ('0')"
else|:
literal|"non-ASCII (U+1F4A9)"
operator|)
operator|+
literal|" id length for "
operator|+
name|super
operator|.
name|dsname
operator|+
literal|" was "
operator|+
name|last
argument_list|)
expr_stmt|;
return|return
name|last
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxProperty
parameter_list|()
block|{
name|int
name|min
init|=
literal|0
decl_stmt|;
name|int
name|max
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|8
decl_stmt|;
name|int
name|test
init|=
literal|0
decl_stmt|;
name|int
name|last
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|max
operator|-
name|min
operator|>=
literal|256
condition|)
block|{
if|if
condition|(
name|test
operator|==
literal|0
condition|)
block|{
name|test
operator|=
name|max
expr_stmt|;
comment|// try largest first
block|}
else|else
block|{
name|test
operator|=
operator|(
name|max
operator|+
name|min
operator|)
operator|/
literal|2
expr_stmt|;
block|}
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testMaxProperty-"
operator|+
name|test
decl_stmt|;
name|String
name|pval
init|=
name|generateString
argument_list|(
name|test
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
name|pval
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
comment|// check that we really can read it
name|NodeDocument
name|findme
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"failed to retrieve previously stored document"
argument_list|,
name|findme
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|min
operator|=
name|test
expr_stmt|;
name|last
operator|=
name|test
expr_stmt|;
block|}
else|else
block|{
name|max
operator|=
name|test
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"max prop length for "
operator|+
name|super
operator|.
name|dsname
operator|+
literal|" was "
operator|+
name|last
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInterestingPropLengths
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
name|int
name|lengths
index|[]
init|=
block|{
literal|1
block|,
literal|10
block|,
literal|100
block|,
literal|1000
block|,
literal|2000
block|,
literal|3000
block|,
literal|4000
block|,
literal|5000
block|,
literal|6000
block|,
literal|7000
block|,
literal|8000
block|,
literal|9000
block|,
literal|10000
block|,
literal|11000
block|,
literal|12000
block|,
literal|13000
block|,
literal|14000
block|,
literal|15000
block|,
literal|16000
block|,
literal|20000
block|}
decl_stmt|;
for|for
control|(
name|int
name|test
range|:
name|lengths
control|)
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testInterestingPropLengths-"
operator|+
name|test
decl_stmt|;
name|String
name|pval
init|=
name|generateString
argument_list|(
name|test
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
name|pval
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"failed to insert a document with property of length "
operator|+
name|test
operator|+
literal|"(ASCII) in "
operator|+
name|super
operator|.
name|dsname
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|test
range|:
name|lengths
control|)
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testInterestingPropLengths-"
operator|+
name|test
decl_stmt|;
name|String
name|pval
init|=
name|generateString
argument_list|(
name|test
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
name|pval
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"failed to insert a document with property of length "
operator|+
name|test
operator|+
literal|" (potentially non-ASCII, actual octet length with UTF-8 encoding: "
operator|+
name|pval
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
operator|.
name|length
operator|+
literal|") in "
operator|+
name|super
operator|.
name|dsname
argument_list|,
name|success
argument_list|)
expr_stmt|;
comment|// check that update works as well
if|if
condition|(
name|success
condition|)
block|{
try|try
block|{
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"failed to update a document with property of length "
operator|+
name|test
operator|+
literal|" (potentially non-ASCII, actual octet length with UTF-8 encoding: "
operator|+
name|pval
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
operator|.
name|length
operator|+
literal|") in "
operator|+
name|super
operator|.
name|dsname
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModifiedMaxUpdateQuery
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testModifiedMaxUpdate"
decl_stmt|;
comment|// create a test node
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_modified"
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// update with smaller _modified
name|UpdateOp
name|up2
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up2
operator|.
name|max
argument_list|(
literal|"_modified"
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up2
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|invalidateCache
argument_list|()
expr_stmt|;
comment|// this should find the document; will fail if the MAX operation wasn't applied to the indexed property
name|String
name|startId
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testModifiedMaxUpdatd"
decl_stmt|;
name|String
name|endId
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testModifiedMaxUpdatf"
decl_stmt|;
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|results
init|=
name|super
operator|.
name|ds
operator|.
name|query
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|startId
argument_list|,
name|endId
argument_list|,
literal|"_modified"
argument_list|,
literal|1000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"document not found, maybe indexed _modified property not properly updated"
argument_list|,
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModifiedMaxUpdateQuery2
parameter_list|()
block|{
comment|// test for https://issues.apache.org/jira/browse/OAK-4388
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testModifiedMaxUpdate2"
decl_stmt|;
comment|// create a test node
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_modified"
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25
condition|;
name|i
operator|++
control|)
block|{
comment|// update with smaller _modified
name|UpdateOp
name|up2
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up2
operator|.
name|max
argument_list|(
literal|"_modified"
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up2
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|invalidateCache
argument_list|()
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"modified should not have been set back (test iteration "
operator|+
name|i
operator|+
literal|")"
argument_list|,
literal|1000
argument_list|,
operator|(
name|long
operator|)
name|doc
operator|.
name|getModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModifyDeletedOnce
parameter_list|()
block|{
comment|// https://issues.apache.org/jira/browse/OAK-3852
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testModifyDeletedOnce"
decl_stmt|;
comment|// create a test node
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|NodeDocument
name|nd
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|nd
argument_list|)
expr_stmt|;
name|Boolean
name|dovalue
init|=
operator|(
name|Boolean
operator|)
name|nd
operator|.
name|get
argument_list|(
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|)
decl_stmt|;
if|if
condition|(
name|dovalue
operator|!=
literal|null
condition|)
block|{
comment|// RDB persistence does not distinguish null and false
name|assertEquals
argument_list|(
name|dovalue
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInterestingStrings
parameter_list|()
block|{
comment|// https://jira.mongodb.org/browse/JAVA-1305
name|boolean
name|repoUsesBadUnicodeAPI
init|=
name|dsf
operator|instanceof
name|DocumentStoreFixture
operator|.
name|MongoFixture
decl_stmt|;
name|String
index|[]
name|tests
init|=
operator|new
name|String
index|[]
block|{
literal|"simple:foo"
block|,
literal|"cr:a\n\b"
block|,
literal|"dquote:a\"b"
block|,
literal|"bs:a\\b"
block|,
literal|"euro:a\u201c"
block|,
literal|"gclef:\uD834\uDD1E"
block|,
literal|"tab:a\tb"
block|,
literal|"nul:a\u0000b"
block|,
literal|"brokensurrogate:\ud800"
block|}
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|tests
control|)
block|{
name|boolean
name|roundTrips
init|=
name|roundtripsThroughJavaUTF8
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|roundTrips
operator|&&
name|repoUsesBadUnicodeAPI
condition|)
block|{
comment|// skip the test because it will fail, see OAK-3683
break|break;
block|}
name|int
name|pos
init|=
name|t
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|testname
init|=
name|t
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|String
name|test
init|=
name|t
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testInterestingStrings-"
operator|+
name|testname
decl_stmt|;
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"failed to insert a document with property value of "
operator|+
name|test
operator|+
literal|" ("
operator|+
name|testname
operator|+
literal|") in "
operator|+
name|super
operator|.
name|dsname
operator|+
literal|" (JDK roundtripping: "
operator|+
name|roundTrips
operator|+
literal|")"
argument_list|,
name|success
argument_list|)
expr_stmt|;
comment|// re-read from persistence
name|super
operator|.
name|ds
operator|.
name|invalidateCache
argument_list|()
expr_stmt|;
name|NodeDocument
name|nd
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"failure to round-trip "
operator|+
name|testname
operator|+
literal|" through "
operator|+
name|super
operator|.
name|dsname
operator|+
literal|" (JDK roundtripping: "
operator|+
name|roundTrips
operator|+
literal|")"
argument_list|,
name|test
argument_list|,
name|nd
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|roundtripsThroughJavaUTF8
parameter_list|(
name|String
name|test
parameter_list|)
block|{
name|Charset
name|utf8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|byte
name|bytes
index|[]
init|=
name|test
operator|.
name|getBytes
argument_list|(
name|utf8
argument_list|)
decl_stmt|;
return|return
name|test
operator|.
name|equals
argument_list|(
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|utf8
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreatePartialFailure
parameter_list|()
block|{
name|String
name|bid
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testCreatePartialFailure-"
decl_stmt|;
name|int
name|cnt
init|=
literal|10
decl_stmt|;
name|assertTrue
argument_list|(
name|cnt
operator|>
literal|8
argument_list|)
expr_stmt|;
comment|// clear repo
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|bid
operator|+
name|i
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|bid
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|// create one of the test nodes
name|int
name|pre
init|=
name|cnt
operator|/
literal|2
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|bid
operator|+
name|pre
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// batch create
name|Set
argument_list|<
name|String
argument_list|>
name|toCreate
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|toCreateFailEarly
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|ups
init|=
operator|new
name|ArrayList
argument_list|<
name|UpdateOp
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|bid
operator|+
name|i
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|op
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
literal|"qux"
argument_list|)
expr_stmt|;
name|ups
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|pre
condition|)
block|{
name|toCreate
operator|.
name|add
argument_list|(
name|bid
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
name|pre
condition|)
block|{
name|toCreateFailEarly
operator|.
name|add
argument_list|(
name|bid
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|ups
argument_list|)
argument_list|)
expr_stmt|;
comment|// check how many nodes are there
name|Set
argument_list|<
name|String
argument_list|>
name|created
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|present
init|=
literal|null
operator|!=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|bid
operator|+
name|i
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|pre
operator|&&
operator|!
name|present
condition|)
block|{
name|fail
argument_list|(
name|super
operator|.
name|dsname
operator|+
literal|": batch update removed previously existing node "
operator|+
operator|(
name|bid
operator|+
name|i
operator|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|present
operator|&&
name|i
operator|!=
name|pre
condition|)
block|{
name|created
operator|.
name|add
argument_list|(
name|bid
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|// diagnostics
name|toCreate
operator|.
name|removeAll
argument_list|(
name|created
argument_list|)
expr_stmt|;
if|if
condition|(
name|created
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|super
operator|.
name|dsname
operator|+
literal|": create() apparently is atomic"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|created
operator|.
name|size
argument_list|()
operator|==
name|toCreate
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|super
operator|.
name|dsname
operator|+
literal|": create() apparently is best-effort"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|created
operator|.
name|equals
argument_list|(
name|toCreateFailEarly
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|super
operator|.
name|dsname
operator|+
literal|": create() stops at first failure"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|super
operator|.
name|dsname
operator|+
literal|": create() created: "
operator|+
name|created
operator|+
literal|", missing: "
operator|+
name|toCreate
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteNonExisting
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testDeleteNonExisting-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
comment|// delete is best effort
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteNonExistingMultiple
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testDeleteNonExistingMultiple-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
comment|// create a test node
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
operator|+
literal|"-2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|todelete
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|todelete
operator|.
name|add
argument_list|(
name|id
operator|+
literal|"-2"
argument_list|)
expr_stmt|;
name|todelete
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|todelete
argument_list|)
expr_stmt|;
comment|// id-2 should be removed
name|Document
name|d
init|=
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
operator|+
literal|"-2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|d
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateModified
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testUpdateModified"
decl_stmt|;
comment|// create a test node
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|SETTINGS
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|SETTINGS
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|removeMeSettings
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|Document
name|d
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|SETTINGS
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|Object
name|m
init|=
name|d
operator|.
name|get
argument_list|(
literal|"_modified"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"_modified should be null until set"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_modified"
argument_list|,
literal|123L
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|SETTINGS
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|d
operator|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|SETTINGS
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|m
operator|=
name|d
operator|.
name|get
argument_list|(
literal|"_modified"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"_modified should now be != null"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"123"
argument_list|,
name|m
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|up
operator|.
name|max
argument_list|(
literal|"_modified"
argument_list|,
literal|122L
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|SETTINGS
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|d
operator|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|SETTINGS
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|m
operator|=
name|d
operator|.
name|get
argument_list|(
literal|"_modified"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"_modified should now be != null"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"123"
argument_list|,
name|m
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|up
operator|.
name|max
argument_list|(
literal|"_modified"
argument_list|,
literal|124L
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|SETTINGS
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|ds
operator|.
name|invalidateCache
argument_list|()
expr_stmt|;
name|d
operator|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|SETTINGS
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|m
operator|=
name|d
operator|.
name|get
argument_list|(
literal|"_modified"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"_modified should now be != null"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"124"
argument_list|,
name|m
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQuery
parameter_list|()
block|{
comment|// create ten documents
name|String
name|base
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testQuery-"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|base
operator|+
name|i
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"document with "
operator|+
name|id
operator|+
literal|" not created"
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|getKeys
argument_list|(
name|ds
operator|.
name|query
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|base
argument_list|,
name|base
operator|+
literal|"A"
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|base
operator|+
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|base
operator|+
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|getKeys
argument_list|(
name|ds
operator|.
name|query
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|base
argument_list|,
name|base
operator|+
literal|"A"
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|base
operator|+
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|base
operator|+
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryBinary
parameter_list|()
block|{
comment|// create ten documents
name|String
name|base
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testQueryBinary-"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|base
operator|+
name|i
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
name|NodeDocument
operator|.
name|HAS_BINARY_FLAG
argument_list|,
name|i
operator|%
literal|2L
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"document with "
operator|+
name|id
operator|+
literal|" not created"
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|getKeys
argument_list|(
name|ds
operator|.
name|query
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|base
argument_list|,
name|base
operator|+
literal|"Z"
argument_list|,
name|NodeDocument
operator|.
name|HAS_BINARY_FLAG
argument_list|,
name|NodeDocument
operator|.
name|HAS_BINARY_VAL
argument_list|,
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|base
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|base
operator|+
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryDeletedOnce
parameter_list|()
block|{
comment|// create ten documents
name|String
name|base
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testQueryDeletedOnce-"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|base
operator|+
name|i
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|i
operator|%
literal|2
operator|==
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"document with "
operator|+
name|id
operator|+
literal|" not created"
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|getKeys
argument_list|(
name|ds
operator|.
name|query
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|base
argument_list|,
name|base
operator|+
literal|"Z"
argument_list|,
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|,
literal|1L
argument_list|,
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|base
operator|+
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|base
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryCollation
parameter_list|()
block|{
comment|// create ten documents
name|String
name|base
init|=
literal|"2:/"
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testQueryCollation"
decl_stmt|;
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|creates
init|=
operator|new
name|ArrayList
argument_list|<
name|UpdateOp
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// test US-ASCII except control characters
for|for
control|(
name|char
name|c
range|:
literal|"!\"#$%&'()*+,-./0123456789:;<=>?@AZ[\\]^_`az{|}~"
operator|.
name|toCharArray
argument_list|()
control|)
block|{
name|String
name|id
init|=
name|base
operator|+
name|c
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|creates
operator|.
name|add
argument_list|(
name|up
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|id
operator|=
name|base
operator|+
literal|"/"
operator|+
name|c
expr_stmt|;
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|creates
operator|.
name|add
argument_list|(
name|up
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|creates
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"documents not created"
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|getKeys
argument_list|(
name|ds
operator|.
name|query
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|base
operator|+
literal|"/"
argument_list|,
name|base
operator|+
literal|"0"
argument_list|,
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|diff
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|diff
operator|.
name|addAll
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|diff
operator|.
name|removeAll
argument_list|(
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|diff
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"unexpected query results (broken collation handling in persistence?): "
operator|+
name|diff
argument_list|)
expr_stmt|;
block|}
name|diff
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|diff
operator|.
name|addAll
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|diff
operator|.
name|removeAll
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|diff
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"missing query results (broken collation handling in persistence?): "
operator|+
name|diff
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"incorrect result ordering in query result (broken collation handling in persistence?)"
argument_list|,
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|modCountCondition
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".modCountCondition"
decl_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|op
operator|.
name|set
argument_list|(
literal|"p"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|op
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Long
name|modCount
init|=
name|doc
operator|.
name|getModCount
argument_list|()
decl_stmt|;
comment|// can only proceed if store maintains modCount
name|assumeNotNull
argument_list|(
name|modCount
argument_list|)
expr_stmt|;
comment|// check equals (non-matching)
name|op
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|op
operator|.
name|set
argument_list|(
literal|"p"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|op
operator|.
name|equals
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|,
name|modCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|op
argument_list|)
argument_list|)
expr_stmt|;
comment|// check equals (matching)
name|op
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|op
operator|.
name|set
argument_list|(
literal|"p"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|op
operator|.
name|equals
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|,
name|modCount
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|op
argument_list|)
argument_list|)
expr_stmt|;
comment|// validate
name|doc
operator|=
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|doc
operator|.
name|get
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|modCount
operator|=
name|doc
operator|.
name|getModCount
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|modCount
argument_list|)
expr_stmt|;
comment|// check not equals (non-matching)
name|op
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|op
operator|.
name|set
argument_list|(
literal|"p"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|op
operator|.
name|notEquals
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|,
name|modCount
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|op
argument_list|)
argument_list|)
expr_stmt|;
comment|// check not equals (matching)
name|op
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|op
operator|.
name|set
argument_list|(
literal|"p"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|op
operator|.
name|notEquals
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|,
name|modCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|op
argument_list|)
argument_list|)
expr_stmt|;
comment|// validate
name|doc
operator|=
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|doc
operator|.
name|get
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getKeys
parameter_list|(
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|docs
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeDocument
name|doc
range|:
name|docs
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|doc
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|String
name|generateId
parameter_list|(
name|int
name|length
parameter_list|,
name|boolean
name|ascii
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|ascii
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|Character
operator|.
name|toChars
argument_list|(
literal|0x1F4A9
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// make sure _collisionsModCount property is maintained properly when it exists
annotation|@
name|Test
specifier|public
name|void
name|testCollisionsModCount
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testCollisionsModCount"
decl_stmt|;
comment|// remove if present
name|NodeDocument
name|nd
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|// add
name|Revision
name|revision
init|=
name|Revision
operator|.
name|fromString
argument_list|(
literal|"r0-0-1"
argument_list|)
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|setMapEntry
argument_list|(
literal|"_collisions"
argument_list|,
name|revision
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// get it
name|nd
operator|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nd
argument_list|)
expr_stmt|;
name|Number
name|cmc
init|=
operator|(
name|Number
operator|)
name|nd
operator|.
name|get
argument_list|(
literal|"_collisionsModCount"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmc
operator|==
literal|null
condition|)
block|{
comment|// not supported
block|}
else|else
block|{
comment|// update
name|Revision
name|revision2
init|=
name|Revision
operator|.
name|fromString
argument_list|(
literal|"r0-0-2"
argument_list|)
decl_stmt|;
name|UpdateOp
name|up2
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|up2
operator|.
name|setMapEntry
argument_list|(
literal|"_collisions"
argument_list|,
name|revision2
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|NodeDocument
name|old
init|=
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|old
argument_list|)
expr_stmt|;
name|nd
operator|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nd
argument_list|)
expr_stmt|;
name|Number
name|cmc2
init|=
operator|(
name|Number
operator|)
name|nd
operator|.
name|get
argument_list|(
literal|"_collisionsModCount"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cmc2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cmc2
operator|.
name|longValue
argument_list|()
operator|>
name|cmc
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// update
name|UpdateOp
name|up3
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|up3
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|old
operator|=
name|super
operator|.
name|ds
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up3
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|old
argument_list|)
expr_stmt|;
name|nd
operator|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nd
argument_list|)
expr_stmt|;
name|Number
name|cmc3
init|=
operator|(
name|Number
operator|)
name|nd
operator|.
name|get
argument_list|(
literal|"_collisionsModCount"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cmc3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cmc2
operator|.
name|longValue
argument_list|()
operator|==
name|cmc3
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|description
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|desc
init|=
name|ds
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|desc
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServerTimeDiff
parameter_list|()
throws|throws
name|Exception
block|{
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
literal|"0:/"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
literal|"0:/"
argument_list|)
expr_stmt|;
name|long
name|td
init|=
name|super
operator|.
name|ds
operator|.
name|determineServerTimeDifferenceMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Server time difference on "
operator|+
name|super
operator|.
name|dsname
operator|+
literal|": "
operator|+
name|td
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeWithCondition
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|existingDocs
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeDocument
name|doc
range|:
name|Utils
operator|.
name|getAllDocuments
argument_list|(
name|ds
argument_list|)
control|)
block|{
name|existingDocs
operator|.
name|add
argument_list|(
name|doc
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|docs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|newDocument
argument_list|(
literal|"/foo"
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|newDocument
argument_list|(
literal|"/bar"
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|newDocument
argument_list|(
literal|"/baz"
argument_list|,
literal|300
argument_list|)
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/baz"
argument_list|)
argument_list|)
expr_stmt|;
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|docs
argument_list|)
expr_stmt|;
for|for
control|(
name|UpdateOp
name|op
range|:
name|docs
control|)
block|{
name|assertNotNull
argument_list|(
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|op
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|toRemove
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|toRemove
operator|.
name|put
argument_list|(
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
comment|// matches
name|toRemove
operator|.
name|put
argument_list|(
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/bar"
argument_list|)
argument_list|,
literal|300L
argument_list|)
expr_stmt|;
comment|// modified differs
name|toRemove
operator|.
name|put
argument_list|(
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/qux"
argument_list|)
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
comment|// does not exist
name|toRemove
operator|.
name|put
argument_list|(
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/baz"
argument_list|)
argument_list|,
literal|300L
argument_list|)
expr_stmt|;
comment|// matches
name|int
name|removed
init|=
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|toRemove
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|removed
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeDocument
name|doc
range|:
name|Utils
operator|.
name|getAllDocuments
argument_list|(
name|ds
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|doc
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/bar"
argument_list|)
operator|&&
operator|!
name|existingDocs
operator|.
name|contains
argument_list|(
name|doc
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"document must not exist: "
operator|+
name|doc
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeInvalidatesCache
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|long
name|modified
init|=
literal|1
decl_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|newDocument
argument_list|(
name|id
argument_list|,
name|modified
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|id
argument_list|,
name|modified
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ds
operator|.
name|getIfCached
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// OAK-3932
annotation|@
name|Test
specifier|public
name|void
name|getIfCachedNonExistingDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ds
operator|.
name|getIfCached
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|UpdateOp
name|newDocument
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|modified
parameter_list|)
block|{
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|op
operator|.
name|set
argument_list|(
name|NodeDocument
operator|.
name|MODIFIED_IN_SECS
argument_list|,
name|modified
argument_list|)
expr_stmt|;
return|return
name|op
return|;
block|}
block|}
end_class

end_unit

