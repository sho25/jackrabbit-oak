begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Queues
operator|.
name|newArrayDeque
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|PersistedCompactionMap
operator|.
name|PERSISTED_COMPACTION_MAP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentId
operator|.
name|isDataSegmentId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_comment
comment|/**  * RecordUsageAnalyser tailored to extract PersistedCompactionMap history and  * size  */
end_comment

begin_class
specifier|public
class|class
name|PCMAnalyser
extends|extends
name|RecordUsageAnalyser
block|{
comment|/**      * Extracts persisted compaction map information. Returns a list of      * compaction map chains      */
specifier|private
specifier|static
name|List
argument_list|<
name|Deque
argument_list|<
name|PCMInfo
argument_list|>
argument_list|>
name|readPCMHistory
parameter_list|(
name|FileStore
name|store
parameter_list|)
block|{
name|List
argument_list|<
name|Deque
argument_list|<
name|PCMInfo
argument_list|>
argument_list|>
name|pcms
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|Deque
argument_list|<
name|PCMInfo
argument_list|>
name|chain
init|=
name|newArrayDeque
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|index
init|=
name|store
operator|.
name|getTarReaderIndex
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|index
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|UUID
argument_list|>
name|segments
init|=
name|index
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|name
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|UUID
name|id
range|:
name|segments
control|)
block|{
if|if
condition|(
operator|!
name|isDataSegmentId
argument_list|(
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Segment
name|s
init|=
name|readSegment
argument_list|(
name|store
argument_list|,
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|s
operator|.
name|getRootCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getRootType
argument_list|(
name|r
argument_list|)
operator|==
name|RecordType
operator|.
name|VALUE
condition|)
block|{
name|RecordId
name|nodeId
init|=
operator|new
name|RecordId
argument_list|(
name|s
operator|.
name|getSegmentId
argument_list|()
argument_list|,
name|s
operator|.
name|getRootOffset
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|v
init|=
name|Segment
operator|.
name|readString
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|PCMInfo
name|pcm
init|=
name|parsePCMInfo
argument_list|(
name|v
argument_list|,
name|store
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|pcm
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|pcm
operator|.
name|sameMap
argument_list|(
name|chain
operator|.
name|peekLast
argument_list|()
argument_list|)
condition|)
block|{
name|pcms
operator|.
name|add
argument_list|(
name|chain
argument_list|)
expr_stmt|;
name|chain
operator|=
name|newArrayDeque
argument_list|()
expr_stmt|;
block|}
name|chain
operator|.
name|addLast
argument_list|(
name|pcm
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|chain
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pcms
operator|.
name|add
argument_list|(
name|chain
argument_list|)
expr_stmt|;
block|}
return|return
name|pcms
return|;
block|}
comment|/**      * Extracts persisted compaction map information, if available, otherwise      * returs null      */
specifier|private
specifier|static
name|PCMInfo
name|parsePCMInfo
parameter_list|(
name|String
name|mapInfo
parameter_list|,
name|FileStore
name|store
parameter_list|,
name|String
name|file
parameter_list|)
block|{
if|if
condition|(
name|mapInfo
operator|==
literal|null
operator|||
operator|!
name|mapInfo
operator|.
name|startsWith
argument_list|(
name|PERSISTED_COMPACTION_MAP
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SegmentTracker
name|tracker
init|=
name|store
operator|.
name|getTracker
argument_list|()
decl_stmt|;
name|int
name|idStartIndex
init|=
name|mapInfo
operator|.
name|indexOf
argument_list|(
literal|"id="
argument_list|)
operator|+
literal|3
decl_stmt|;
name|int
name|idEndIndex
init|=
name|mapInfo
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|,
name|idStartIndex
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|mapInfo
operator|.
name|substring
argument_list|(
name|idStartIndex
argument_list|,
name|idEndIndex
argument_list|)
decl_stmt|;
name|RecordId
name|rid
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rid
operator|=
name|RecordId
operator|.
name|fromString
argument_list|(
name|tracker
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// log a warn?
return|return
literal|null
return|;
block|}
name|int
name|baseStartIndex
init|=
name|mapInfo
operator|.
name|indexOf
argument_list|(
literal|"baseId="
argument_list|)
operator|+
literal|7
decl_stmt|;
name|String
name|base
init|=
name|mapInfo
operator|.
name|substring
argument_list|(
name|baseStartIndex
argument_list|,
name|mapInfo
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|RecordId
name|bid
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
literal|"null"
operator|.
name|equals
argument_list|(
name|base
argument_list|)
condition|)
block|{
try|try
block|{
name|bid
operator|=
name|RecordId
operator|.
name|fromString
argument_list|(
name|tracker
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// log a warn?
block|}
block|}
return|return
operator|new
name|PCMInfo
argument_list|(
name|rid
argument_list|,
name|bid
argument_list|,
name|file
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Segment
name|readSegment
parameter_list|(
name|FileStore
name|store
parameter_list|,
name|UUID
name|id
parameter_list|)
block|{
return|return
name|store
operator|.
name|readSegment
argument_list|(
operator|new
name|SegmentId
argument_list|(
name|store
operator|.
name|getTracker
argument_list|()
argument_list|,
name|id
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|List
argument_list|<
name|Deque
argument_list|<
name|PCMInfo
argument_list|>
argument_list|>
name|pcms
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|errors
init|=
name|newHashSet
argument_list|()
decl_stmt|;
specifier|public
name|PCMAnalyser
parameter_list|(
name|FileStore
name|store
parameter_list|)
block|{
name|pcms
operator|=
name|readPCMHistory
argument_list|(
name|store
argument_list|)
expr_stmt|;
for|for
control|(
name|Deque
argument_list|<
name|PCMInfo
argument_list|>
name|pcm
range|:
name|pcms
control|)
block|{
try|try
block|{
name|onPCM
argument_list|(
name|pcm
operator|.
name|getFirst
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|onPCM
parameter_list|(
name|RecordId
name|recordId
parameter_list|)
block|{
name|Segment
name|s
init|=
name|recordId
operator|.
name|getSegment
argument_list|()
decl_stmt|;
name|MapRecord
name|map
init|=
name|s
operator|.
name|readMap
argument_list|(
name|recordId
argument_list|)
decl_stmt|;
name|parseMap
argument_list|(
literal|null
argument_list|,
name|recordId
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|Formatter
name|formatter
init|=
operator|new
name|Formatter
argument_list|(
name|sb
argument_list|)
decl_stmt|;
if|if
condition|(
name|pcms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|formatter
operator|.
name|format
argument_list|(
literal|"No persisted compaction map found.%n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|formatter
operator|.
name|format
argument_list|(
literal|"Persisted compaction map info:%n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Deque
argument_list|<
name|PCMInfo
argument_list|>
name|pcm
range|:
name|pcms
control|)
block|{
name|formatter
operator|.
name|format
argument_list|(
literal|"%s%n"
argument_list|,
name|pcm
argument_list|)
expr_stmt|;
block|}
name|formatter
operator|.
name|format
argument_list|(
literal|"Persisted compaction map size:%n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|super
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|format
argument_list|(
literal|"%n"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|e
range|:
name|errors
control|)
block|{
name|formatter
operator|.
name|format
argument_list|(
literal|"%s%n"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
class|class
name|PCMInfo
block|{
specifier|private
specifier|final
name|RecordId
name|id
decl_stmt|;
specifier|private
specifier|final
name|RecordId
name|baseId
decl_stmt|;
specifier|private
specifier|final
name|String
name|file
decl_stmt|;
specifier|public
name|PCMInfo
parameter_list|(
name|RecordId
name|id
parameter_list|,
name|RecordId
name|baseId
parameter_list|,
name|String
name|file
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|checkNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|baseId
operator|=
name|baseId
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|id
operator|+
literal|"["
operator|+
name|file
operator|+
literal|"]"
return|;
block|}
specifier|public
name|RecordId
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|RecordId
name|getBaseId
parameter_list|()
block|{
return|return
name|baseId
return|;
block|}
comment|/**          * Determines if the current PCM can be considered as the next link in          * the current compaction map. If provided 'o' is null, then the current          * PCM is the head          */
specifier|public
name|boolean
name|sameMap
parameter_list|(
name|PCMInfo
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|id
operator|.
name|equals
argument_list|(
name|o
operator|.
name|getBaseId
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

