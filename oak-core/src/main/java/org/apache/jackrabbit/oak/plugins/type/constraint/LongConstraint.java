begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|type
operator|.
name|constraint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|LongConstraint
implements|implements
name|Predicate
argument_list|<
name|Value
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LongConstraint
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|lowerInclusive
decl_stmt|;
specifier|private
name|Long
name|lowerBound
decl_stmt|;
specifier|private
name|Long
name|upperBound
decl_stmt|;
specifier|private
name|boolean
name|upperInclusive
decl_stmt|;
specifier|public
name|LongConstraint
parameter_list|(
name|String
name|definition
parameter_list|)
block|{
comment|// format: '(<min>,<max>)',  '[<min>,<max>]', '(,<max>)' etc.
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([\\(\\[])[^,]*,[^\\)\\]]*([\\)\\]])"
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|definition
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// group 1 is lower inclusive/exclusive
name|String
name|match
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|lowerInclusive
operator|=
literal|"["
operator|.
name|equals
argument_list|(
name|match
argument_list|)
expr_stmt|;
comment|// group 2 is lower, group 3 is upper  bound
name|setBounds
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// group 4 is lower inclusive/exclusive
name|match
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|upperInclusive
operator|=
literal|"]"
operator|.
name|equals
argument_list|(
name|match
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|msg
init|=
literal|'\''
operator|+
name|definition
operator|+
literal|"' is not a valid value constraint format for numeric values"
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setBounds
parameter_list|(
name|String
name|lowerBound
parameter_list|,
name|String
name|upperBound
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|lowerBound
operator|=
name|lowerBound
operator|==
literal|null
operator|||
name|lowerBound
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|Long
operator|.
name|parseLong
argument_list|(
name|lowerBound
argument_list|)
expr_stmt|;
name|this
operator|.
name|upperBound
operator|=
name|upperBound
operator|==
literal|null
operator|||
name|upperBound
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|Long
operator|.
name|parseLong
argument_list|(
name|upperBound
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|this
operator|.
name|lowerBound
operator|=
literal|1L
expr_stmt|;
name|this
operator|.
name|upperBound
operator|=
literal|0L
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid bound for numeric constraint"
operator|+
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|Value
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|long
name|val
init|=
name|value
operator|.
name|getLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|lowerBound
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|lowerInclusive
condition|)
block|{
if|if
condition|(
name|val
operator|<
operator|(
name|lowerBound
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|val
operator|<=
operator|(
name|lowerBound
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
if|if
condition|(
name|upperBound
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|upperInclusive
condition|)
block|{
if|if
condition|(
name|val
operator|>
operator|(
name|upperBound
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|val
operator|>=
operator|(
name|upperBound
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error checking numeric constraint "
operator|+
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|lowerInclusive
condition|?
literal|"["
else|:
literal|"("
operator|)
operator|+
operator|(
name|lowerBound
operator|==
literal|null
condition|?
literal|""
else|:
name|lowerBound
operator|)
operator|+
literal|", "
operator|+
operator|(
name|upperBound
operator|==
literal|null
condition|?
literal|""
else|:
name|upperBound
operator|)
operator|+
operator|(
name|upperInclusive
condition|?
literal|"]"
else|:
literal|")"
operator|)
return|;
block|}
block|}
end_class

end_unit

