begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Modified
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalUser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|metatype
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"Apache Jackrabbit Oak CustomExternalIdentityProvider"
argument_list|,
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
annotation|@
name|Properties
argument_list|(
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"externalidentities"
argument_list|,
name|label
operator|=
literal|"External Identities"
argument_list|,
name|value
operator|=
literal|"testUser,a,b,c"
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|CustomExternalIdentityProvider
implements|implements
name|ExternalIdentityProvider
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CustomExternalIdentityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|userGroupMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|groupIds
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|CustomExternalIdentityProvider
parameter_list|()
block|{}
empty_stmt|;
comment|//----------------------------------------------------< SCR integration>---
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
annotation|@
name|Activate
specifier|public
name|void
name|activate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|ConfigurationParameters
name|config
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|properties
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|entry
range|:
name|config
operator|.
name|getConfigValue
argument_list|(
literal|"externalidentities"
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
control|)
block|{
name|String
index|[]
name|strs
init|=
name|Text
operator|.
name|explode
argument_list|(
name|entry
argument_list|,
literal|','
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|uid
init|=
name|strs
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|declaredGroups
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|strs
operator|.
name|length
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|strs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|groupIds
operator|.
name|add
argument_list|(
name|strs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|declaredGroups
operator|.
name|add
argument_list|(
name|strs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|userGroupMap
operator|.
name|put
argument_list|(
name|uid
argument_list|,
name|declaredGroups
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"activated IDP: "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
annotation|@
name|Modified
specifier|public
name|void
name|modified
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|activate
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"modified IDP: "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"CustomExternalIdentityProvider"
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExternalIdentity
name|getIdentity
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentityRef
name|ref
parameter_list|)
throws|throws
name|ExternalIdentityException
block|{
if|if
condition|(
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ref
operator|.
name|getProviderName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|id
init|=
name|ref
operator|.
name|getId
argument_list|()
decl_stmt|;
name|ExternalIdentity
name|ei
init|=
name|getUser
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ei
operator|==
literal|null
condition|)
block|{
name|ei
operator|=
name|getGroup
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|ei
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ExternalUser
name|getUser
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|userId
parameter_list|)
throws|throws
name|ExternalIdentityException
block|{
if|if
condition|(
name|userGroupMap
operator|.
name|containsKey
argument_list|(
name|userId
argument_list|)
condition|)
block|{
return|return
operator|new
name|ExternalUser
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|ExternalIdentityRef
name|getExternalId
parameter_list|()
block|{
return|return
operator|new
name|ExternalIdentityRef
argument_list|(
name|userId
argument_list|,
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|userId
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|getPrincipalName
parameter_list|()
block|{
return|return
literal|"p_"
operator|+
name|getExternalId
argument_list|()
operator|.
name|getString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIntermediatePath
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|ExternalIdentityRef
argument_list|>
name|getDeclaredGroups
parameter_list|()
throws|throws
name|ExternalIdentityException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|groupIds
init|=
name|userGroupMap
operator|.
name|get
argument_list|(
name|userId
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupIds
operator|==
literal|null
operator|||
name|groupIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|groupIds
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|ExternalIdentityRef
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|ExternalIdentityRef
name|apply
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
operator|new
name|ExternalIdentityRef
argument_list|(
name|input
argument_list|,
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ExternalUser
name|authenticate
parameter_list|(
annotation|@
name|Nonnull
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|ExternalIdentityException
throws|,
name|LoginException
block|{
if|if
condition|(
name|credentials
operator|instanceof
name|SimpleCredentials
condition|)
block|{
name|String
name|userId
init|=
operator|(
operator|(
name|SimpleCredentials
operator|)
name|credentials
operator|)
operator|.
name|getUserID
argument_list|()
decl_stmt|;
return|return
name|getUser
argument_list|(
name|userId
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"unsupported credentials"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ExternalGroup
name|getGroup
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|ExternalIdentityException
block|{
if|if
condition|(
name|groupIds
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
operator|new
name|ExternalGroup
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|ExternalIdentityRef
argument_list|>
name|getDeclaredMembers
parameter_list|()
throws|throws
name|ExternalIdentityException
block|{
name|Set
argument_list|<
name|ExternalIdentityRef
argument_list|>
name|members
init|=
operator|new
name|HashSet
argument_list|<
name|ExternalIdentityRef
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|userGroupMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|members
operator|.
name|add
argument_list|(
operator|new
name|ExternalIdentityRef
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|members
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|ExternalIdentityRef
name|getExternalId
parameter_list|()
block|{
return|return
operator|new
name|ExternalIdentityRef
argument_list|(
name|name
argument_list|,
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|getPrincipalName
parameter_list|()
block|{
return|return
literal|"p_"
operator|+
name|getExternalId
argument_list|()
operator|.
name|getString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIntermediatePath
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|ExternalIdentityRef
argument_list|>
name|getDeclaredGroups
parameter_list|()
throws|throws
name|ExternalIdentityException
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ExternalUser
argument_list|>
name|listUsers
parameter_list|()
throws|throws
name|ExternalIdentityException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"listUsers"
argument_list|)
throw|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ExternalGroup
argument_list|>
name|listGroups
parameter_list|()
throws|throws
name|ExternalIdentityException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"listGroups"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

