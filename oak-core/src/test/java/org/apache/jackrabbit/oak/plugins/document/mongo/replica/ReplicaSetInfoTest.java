begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|replica
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Long
operator|.
name|MAX_VALUE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|replica
operator|.
name|ReplicaSetInfo
operator|.
name|MemberState
operator|.
name|PRIMARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|replica
operator|.
name|ReplicaSetInfo
operator|.
name|MemberState
operator|.
name|RECOVERING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|replica
operator|.
name|ReplicaSetInfo
operator|.
name|MemberState
operator|.
name|SECONDARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|RevisionVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ReplicaSetInfoTest
block|{
specifier|private
name|ReplicaSetInfoMock
name|replica
decl_stmt|;
specifier|private
name|Clock
operator|.
name|Virtual
name|clock
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|resetEstimator
parameter_list|()
block|{
name|clock
operator|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
expr_stmt|;
name|replica
operator|=
name|ReplicaSetInfoMock
operator|.
name|create
argument_list|(
name|clock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinimumRevision
parameter_list|()
block|{
name|replica
operator|.
name|addInstance
argument_list|(
name|PRIMARY
argument_list|,
literal|"mp"
argument_list|)
operator|.
name|addRevisions
argument_list|(
literal|20
argument_list|,
literal|18
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|replica
operator|.
name|addInstance
argument_list|(
name|SECONDARY
argument_list|,
literal|"m1"
argument_list|)
operator|.
name|addRevisions
argument_list|(
literal|20
argument_list|,
literal|18
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|replica
operator|.
name|addInstance
argument_list|(
name|SECONDARY
argument_list|,
literal|"m2"
argument_list|)
operator|.
name|addRevisions
argument_list|(
literal|20
argument_list|,
literal|1
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|replica
operator|.
name|updateRevisions
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|replica
operator|.
name|getMinimumRootRevisions
argument_list|()
operator|.
name|getRevision
argument_list|(
literal|0
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|replica
operator|.
name|getMinimumRootRevisions
argument_list|()
operator|.
name|getRevision
argument_list|(
literal|1
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|replica
operator|.
name|getMinimumRootRevisions
argument_list|()
operator|.
name|getRevision
argument_list|(
literal|2
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
literal|38
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|replica
operator|.
name|getLag
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsMoreRecentThan
parameter_list|()
block|{
name|replica
operator|.
name|addInstance
argument_list|(
name|PRIMARY
argument_list|,
literal|"mp"
argument_list|)
operator|.
name|addRevisions
argument_list|(
literal|15
argument_list|,
literal|21
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|replica
operator|.
name|addInstance
argument_list|(
name|SECONDARY
argument_list|,
literal|"m1"
argument_list|)
operator|.
name|addRevisions
argument_list|(
literal|10
argument_list|,
literal|21
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|replica
operator|.
name|addInstance
argument_list|(
name|SECONDARY
argument_list|,
literal|"m2"
argument_list|)
operator|.
name|addRevisions
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|replica
operator|.
name|addInstance
argument_list|(
name|SECONDARY
argument_list|,
literal|"m3"
argument_list|)
operator|.
name|addRevisions
argument_list|(
literal|14
argument_list|,
literal|13
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|replica
operator|.
name|updateRevisions
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|replica
operator|.
name|isMoreRecentThan
argument_list|(
name|lastRev
argument_list|(
literal|9
argument_list|,
literal|13
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|replica
operator|.
name|isMoreRecentThan
argument_list|(
name|lastRev
argument_list|(
literal|11
argument_list|,
literal|14
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnknownStateIsNotSafe
parameter_list|()
block|{
name|replica
operator|.
name|addInstance
argument_list|(
name|PRIMARY
argument_list|,
literal|"mp"
argument_list|)
expr_stmt|;
name|replica
operator|.
name|addInstance
argument_list|(
name|SECONDARY
argument_list|,
literal|"m1"
argument_list|)
operator|.
name|addRevisions
argument_list|(
literal|10
argument_list|,
literal|21
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|replica
operator|.
name|addInstance
argument_list|(
name|RECOVERING
argument_list|,
literal|"m2"
argument_list|)
expr_stmt|;
name|replica
operator|.
name|updateRevisions
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|replica
operator|.
name|getMinimumRootRevisions
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|replica
operator|.
name|isMoreRecentThan
argument_list|(
name|lastRev
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MAX_VALUE
argument_list|,
name|replica
operator|.
name|getLag
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyIsNotSafe
parameter_list|()
block|{
name|replica
operator|.
name|addInstance
argument_list|(
name|PRIMARY
argument_list|,
literal|"m1"
argument_list|)
expr_stmt|;
name|replica
operator|.
name|updateRevisions
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|replica
operator|.
name|getMinimumRootRevisions
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|replica
operator|.
name|isMoreRecentThan
argument_list|(
name|lastRev
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MAX_VALUE
argument_list|,
name|replica
operator|.
name|getLag
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOldestNotReplicated
parameter_list|()
block|{
name|replica
operator|.
name|addInstance
argument_list|(
name|PRIMARY
argument_list|,
literal|"mp"
argument_list|)
operator|.
name|addRevisions
argument_list|(
literal|10
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|replica
operator|.
name|addInstance
argument_list|(
name|SECONDARY
argument_list|,
literal|"m1"
argument_list|)
operator|.
name|addRevisions
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|replica
operator|.
name|addInstance
argument_list|(
name|SECONDARY
argument_list|,
literal|"m2"
argument_list|)
operator|.
name|addRevisions
argument_list|(
literal|2
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|replica
operator|.
name|updateRevisions
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|replica
operator|.
name|secondariesSafeTimestamp
argument_list|)
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|replica
operator|.
name|getLag
argument_list|()
argument_list|)
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|40
argument_list|,
name|replica
operator|.
name|getLag
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllSecondariesUpToDate
parameter_list|()
block|{
name|replica
operator|.
name|addInstance
argument_list|(
name|PRIMARY
argument_list|,
literal|"mp"
argument_list|)
operator|.
name|addRevisions
argument_list|(
literal|10
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|replica
operator|.
name|addInstance
argument_list|(
name|SECONDARY
argument_list|,
literal|"m1"
argument_list|)
operator|.
name|addRevisions
argument_list|(
literal|10
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|replica
operator|.
name|addInstance
argument_list|(
name|SECONDARY
argument_list|,
literal|"m2"
argument_list|)
operator|.
name|addRevisions
argument_list|(
literal|10
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|long
name|before
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|replica
operator|.
name|updateRevisions
argument_list|()
expr_stmt|;
name|long
name|after
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|assertBetween
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|replica
operator|.
name|secondariesSafeTimestamp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllSecondariesUpToDateWithTimediff
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|replica
operator|.
name|addInstance
argument_list|(
name|PRIMARY
argument_list|,
literal|"mp"
argument_list|)
operator|.
name|addRevisions
argument_list|(
literal|10
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|replica
operator|.
name|addInstance
argument_list|(
name|SECONDARY
argument_list|,
literal|"m1"
argument_list|)
operator|.
name|addRevisions
argument_list|(
literal|10
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|replica
operator|.
name|addInstance
argument_list|(
name|SECONDARY
argument_list|,
literal|"m2"
argument_list|)
operator|.
name|addRevisions
argument_list|(
literal|10
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|Clock
name|mongoClock
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
name|replica
operator|.
name|setMongoClock
argument_list|(
name|mongoClock
argument_list|)
expr_stmt|;
name|mongoClock
operator|.
name|waitUntil
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|long
name|before
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|replica
operator|.
name|updateRevisions
argument_list|()
expr_stmt|;
name|long
name|after
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|assertBetween
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|replica
operator|.
name|secondariesSafeTimestamp
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|RevisionVector
name|lastRev
parameter_list|(
name|long
modifier|...
name|timestamps
parameter_list|)
block|{
return|return
operator|new
name|ReplicaSetInfoMock
operator|.
name|RevisionBuilder
argument_list|()
operator|.
name|addRevisions
argument_list|(
name|timestamps
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|assertBetween
parameter_list|(
name|long
name|from
parameter_list|,
name|long
name|to
parameter_list|,
name|long
name|actual
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%d<= %d<= %d"
argument_list|,
name|from
argument_list|,
name|actual
argument_list|,
name|to
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|from
operator|<=
name|actual
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|actual
operator|<=
name|to
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

