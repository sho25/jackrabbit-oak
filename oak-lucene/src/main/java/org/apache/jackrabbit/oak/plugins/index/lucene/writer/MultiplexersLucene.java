begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|writer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|INDEX_DATA_CHILD_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|SUGGEST_DATA_CHILD_NAME
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|MultiplexersLucene
block|{
comment|/**      * Prefix used to decorate mount names to represent index directory      */
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_DIR_SUFFIX
init|=
literal|"-index-data"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SUGGEST_DIR_SUFFIX
init|=
literal|"-suggest-data"
decl_stmt|;
specifier|public
specifier|static
name|String
name|getIndexDirName
parameter_list|(
name|Mount
name|mount
parameter_list|)
block|{
if|if
condition|(
name|mount
operator|.
name|isDefault
argument_list|()
condition|)
block|{
return|return
name|INDEX_DATA_CHILD_NAME
return|;
block|}
name|String
name|name
init|=
name|mount
operator|.
name|getPathFragmentName
argument_list|()
decl_stmt|;
return|return
literal|":"
operator|+
name|name
operator|+
name|INDEX_DIR_SUFFIX
return|;
block|}
comment|/**      * Checks if the node name represent an index directory node name.      * There may be nodes for other directory like for suggester etc also.      * This method can be used to determine if node represents index      * directory root       * @param name node name      */
specifier|public
specifier|static
name|boolean
name|isIndexDirName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|endsWith
argument_list|(
name|INDEX_DIR_SUFFIX
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
name|INDEX_DATA_CHILD_NAME
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getSuggestDirName
parameter_list|(
name|Mount
name|mount
parameter_list|)
block|{
if|if
condition|(
name|mount
operator|.
name|isDefault
argument_list|()
condition|)
block|{
return|return
name|SUGGEST_DATA_CHILD_NAME
return|;
block|}
name|String
name|name
init|=
name|mount
operator|.
name|getPathFragmentName
argument_list|()
decl_stmt|;
return|return
literal|":"
operator|+
name|name
operator|+
name|SUGGEST_DIR_SUFFIX
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isSuggestIndexDirName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|endsWith
argument_list|(
name|SUGGEST_DIR_SUFFIX
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
name|SUGGEST_DATA_CHILD_NAME
argument_list|)
return|;
block|}
block|}
end_class

end_unit

