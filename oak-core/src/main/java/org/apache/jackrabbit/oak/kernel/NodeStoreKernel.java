begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newConcurrentMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newLinkedHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getParentPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CheckedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Checksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|AbstractBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|HashCode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hasher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteStreams
import|;
end_import

begin_comment
comment|/**  * This is a simple {@link NodeStore}-based {@link MicroKernel} implementation.  */
end_comment

begin_class
specifier|public
class|class
name|NodeStoreKernel
implements|implements
name|MicroKernel
block|{
specifier|private
specifier|final
name|NodeStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Revision
argument_list|>
name|revisions
init|=
name|newLinkedHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|NodeBuilder
argument_list|>
name|branches
init|=
name|newLinkedHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Blob
argument_list|>
name|blobs
init|=
name|newConcurrentMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|BlobSerializer
name|blobSerializer
init|=
operator|new
name|BlobSerializer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|serialize
parameter_list|(
name|Blob
name|blob
parameter_list|)
block|{
name|String
name|id
init|=
name|AbstractBlob
operator|.
name|calculateSha256
argument_list|(
name|blob
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|blobs
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|blob
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
block|}
decl_stmt|;
specifier|private
name|String
name|head
decl_stmt|;
specifier|public
name|NodeStoreKernel
parameter_list|(
name|NodeStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|head
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|revisions
operator|.
name|put
argument_list|(
name|head
argument_list|,
operator|new
name|Revision
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|NodeState
name|getRoot
parameter_list|(
name|String
name|revision
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|revision
operator|==
literal|null
condition|)
block|{
name|revision
operator|=
name|head
expr_stmt|;
block|}
name|Revision
name|r
init|=
name|revisions
operator|.
name|get
argument_list|(
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
return|return
name|r
operator|.
name|root
return|;
block|}
name|NodeBuilder
name|builder
init|=
name|branches
operator|.
name|get
argument_list|(
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|!=
literal|null
condition|)
block|{
return|return
name|builder
operator|.
name|getNodeState
argument_list|()
return|;
block|}
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Revision not found: "
operator|+
name|revision
argument_list|)
throw|;
block|}
specifier|private
name|NodeState
name|getNode
parameter_list|(
name|String
name|revision
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|NodeState
name|node
init|=
name|getRoot
argument_list|(
name|revision
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|element
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|node
operator|=
name|node
operator|.
name|getChildNode
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|private
name|void
name|applyJsop
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|jsonDiff
parameter_list|)
throws|throws
name|MicroKernelException
block|{
for|for
control|(
name|String
name|element
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|builder
operator|=
name|builder
operator|.
name|getChildNode
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|builder
operator|.
name|exists
argument_list|()
condition|)
block|{
name|applyJsop
argument_list|(
name|builder
argument_list|,
name|jsonDiff
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Path not found: "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|applyJsop
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|jsonDiff
parameter_list|)
block|{
name|JsopTokenizer
name|tokenizer
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|jsonDiff
argument_list|)
decl_stmt|;
name|int
name|token
init|=
name|tokenizer
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
name|JsopReader
operator|.
name|END
condition|)
block|{
name|String
name|path
init|=
name|tokenizer
operator|.
name|readString
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|getName
argument_list|(
name|path
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|token
condition|)
block|{
case|case
literal|'+'
case|:
name|tokenizer
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|tokenizer
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|NodeBuilder
name|parent
init|=
name|getNode
argument_list|(
name|builder
argument_list|,
name|getParentPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|.
name|hasChildNode
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Node already exists: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|addNode
argument_list|(
name|parent
operator|.
name|setChildNode
argument_list|(
name|name
argument_list|)
argument_list|,
name|tokenizer
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'-'
case|:
name|getNode
argument_list|(
name|builder
argument_list|,
name|path
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'^'
case|:
name|tokenizer
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|NodeBuilder
name|node
init|=
name|getNode
argument_list|(
name|builder
argument_list|,
name|getParentPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|tokenizer
operator|.
name|read
argument_list|()
condition|)
block|{
case|case
name|JsopReader
operator|.
name|NULL
case|:
name|node
operator|.
name|removeProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
break|break;
case|case
name|JsopReader
operator|.
name|FALSE
case|:
name|node
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
break|break;
case|case
name|JsopReader
operator|.
name|TRUE
case|:
name|node
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
break|break;
case|case
name|JsopReader
operator|.
name|STRING
case|:
name|node
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|tokenizer
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|JsopReader
operator|.
name|NUMBER
case|:
name|String
name|value
init|=
name|tokenizer
operator|.
name|getToken
argument_list|()
decl_stmt|;
try|try
block|{
name|node
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|node
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|Double
operator|.
name|parseDouble
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
break|break;
case|case
literal|'>'
case|:
name|tokenizer
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|moveTarget
init|=
name|tokenizer
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|getNode
argument_list|(
name|builder
argument_list|,
name|path
argument_list|)
operator|.
name|moveTo
argument_list|(
name|getNode
argument_list|(
name|builder
argument_list|,
name|getParentPath
argument_list|(
name|moveTarget
argument_list|)
argument_list|)
argument_list|,
name|getName
argument_list|(
name|moveTarget
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Move failed"
argument_list|)
throw|;
block|}
break|break;
case|case
literal|'*'
case|:
name|tokenizer
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|copyTarget
init|=
name|tokenizer
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|getNode
argument_list|(
name|builder
argument_list|,
name|path
argument_list|)
operator|.
name|copyTo
argument_list|(
name|getNode
argument_list|(
name|builder
argument_list|,
name|getParentPath
argument_list|(
name|copyTarget
argument_list|)
argument_list|)
argument_list|,
name|getName
argument_list|(
name|copyTarget
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Copy failed"
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Unexpected token: "
operator|+
name|tokenizer
operator|.
name|getEscapedToken
argument_list|()
argument_list|)
throw|;
block|}
name|token
operator|=
name|tokenizer
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|NodeBuilder
name|getNode
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|path
parameter_list|)
block|{
for|for
control|(
name|String
name|element
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|builder
operator|=
name|builder
operator|.
name|getChildNode
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|builder
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|builder
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Path not found: "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|addNode
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|JsopTokenizer
name|tokenizer
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|tokenizer
operator|.
name|matches
argument_list|(
literal|'}'
argument_list|)
condition|)
block|{
return|return;
block|}
do|do
block|{
name|String
name|name
init|=
name|tokenizer
operator|.
name|readString
argument_list|()
decl_stmt|;
name|tokenizer
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|tokenizer
operator|.
name|read
argument_list|()
condition|)
block|{
case|case
literal|'{'
case|:
name|NodeBuilder
name|child
init|=
name|builder
operator|.
name|setChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|addNode
argument_list|(
name|child
argument_list|,
name|tokenizer
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'['
case|:
comment|// FIXME: proper array parsing with support for more types
name|List
argument_list|<
name|Long
argument_list|>
name|array
init|=
name|newArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|NUMBER
argument_list|)
condition|)
block|{
name|array
operator|.
name|add
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|tokenizer
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tokenizer
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|tokenizer
operator|.
name|read
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|array
argument_list|,
name|Type
operator|.
name|LONGS
argument_list|)
expr_stmt|;
break|break;
case|case
name|JsopReader
operator|.
name|FALSE
case|:
name|builder
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
break|break;
case|case
name|JsopReader
operator|.
name|TRUE
case|:
name|builder
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
break|break;
case|case
name|JsopReader
operator|.
name|NUMBER
case|:
name|String
name|value
init|=
name|tokenizer
operator|.
name|getToken
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|Double
operator|.
name|parseDouble
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|JsopReader
operator|.
name|STRING
case|:
name|builder
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|tokenizer
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Unexpected token: "
operator|+
name|tokenizer
operator|.
name|getEscapedToken
argument_list|()
argument_list|)
throw|;
block|}
block|}
do|while
condition|(
name|tokenizer
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
condition|)
do|;
name|tokenizer
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
name|getHeadRevision
parameter_list|()
block|{
name|NodeState
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|root
operator|.
name|equals
argument_list|(
name|revisions
operator|.
name|get
argument_list|(
name|head
argument_list|)
operator|.
name|root
argument_list|)
condition|)
block|{
name|head
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|revisions
operator|.
name|put
argument_list|(
name|head
argument_list|,
operator|new
name|Revision
argument_list|(
name|root
argument_list|,
literal|"external"
argument_list|)
argument_list|)
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
return|return
name|head
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|checkpoint
parameter_list|(
name|long
name|lifetime
parameter_list|)
block|{
return|return
name|getHeadRevision
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
name|getRevisionHistory
parameter_list|(
name|long
name|since
parameter_list|,
name|int
name|maxEntries
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|maxEntries
operator|<
literal|0
condition|)
block|{
name|maxEntries
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|JsopBuilder
name|json
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|json
operator|.
name|array
argument_list|()
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|NodeState
name|before
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Revision
argument_list|>
name|entry
range|:
name|revisions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Revision
name|rev
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|before
operator|!=
literal|null
operator|&&
name|rev
operator|.
name|timestamp
operator|>=
name|since
operator|&&
operator|!
name|getPathChanges
argument_list|(
name|before
argument_list|,
name|rev
operator|.
name|root
argument_list|,
name|path
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|count
operator|++
operator|>
name|maxEntries
condition|)
block|{
break|break;
block|}
name|json
operator|.
name|object
argument_list|()
expr_stmt|;
name|json
operator|.
name|key
argument_list|(
literal|"id"
argument_list|)
operator|.
name|value
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|key
argument_list|(
literal|"ts"
argument_list|)
operator|.
name|value
argument_list|(
name|rev
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|json
operator|.
name|key
argument_list|(
literal|"msg"
argument_list|)
operator|.
name|value
argument_list|(
name|rev
operator|.
name|message
argument_list|)
expr_stmt|;
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|before
operator|=
name|rev
operator|.
name|root
expr_stmt|;
block|}
name|json
operator|.
name|endArray
argument_list|()
expr_stmt|;
return|return
name|json
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getPathChanges
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|element
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|before
operator|=
name|before
operator|.
name|getChildNode
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|after
operator|=
name|after
operator|.
name|getChildNode
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
name|JsopDiff
name|diff
init|=
operator|new
name|JsopDiff
argument_list|(
name|blobSerializer
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
name|diff
argument_list|)
expr_stmt|;
return|return
name|diff
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
name|waitForCommit
parameter_list|(
name|String
name|oldHeadRevisionId
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|MicroKernelException
throws|,
name|InterruptedException
block|{
name|long
name|stop
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeout
decl_stmt|;
while|while
condition|(
name|head
operator|.
name|equals
argument_list|(
name|oldHeadRevisionId
argument_list|)
operator|&&
name|timeout
operator|>
literal|0
condition|)
block|{
name|wait
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|timeout
operator|=
name|stop
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
return|return
name|head
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
name|getJournal
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
operator|!
name|revisions
operator|.
name|containsKey
argument_list|(
name|fromRevisionId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Revision not found: "
operator|+
name|fromRevisionId
argument_list|)
throw|;
block|}
name|JsopBuilder
name|json
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|json
operator|.
name|array
argument_list|()
expr_stmt|;
name|NodeState
name|before
init|=
literal|null
decl_stmt|;
name|boolean
name|active
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Revision
argument_list|>
name|entry
range|:
name|revisions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|id
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Revision
name|rev
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|active
operator|=
name|active
operator|||
name|id
operator|.
name|equals
argument_list|(
name|fromRevisionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|before
operator|!=
literal|null
operator|&&
name|active
condition|)
block|{
name|String
name|jsop
init|=
name|getPathChanges
argument_list|(
name|before
argument_list|,
name|rev
operator|.
name|root
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|jsop
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|json
operator|.
name|object
argument_list|()
expr_stmt|;
name|json
operator|.
name|key
argument_list|(
literal|"id"
argument_list|)
operator|.
name|value
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|json
operator|.
name|key
argument_list|(
literal|"ts"
argument_list|)
operator|.
name|value
argument_list|(
name|rev
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|json
operator|.
name|key
argument_list|(
literal|"msg"
argument_list|)
operator|.
name|value
argument_list|(
name|rev
operator|.
name|message
argument_list|)
expr_stmt|;
name|json
operator|.
name|key
argument_list|(
literal|"changes"
argument_list|)
operator|.
name|value
argument_list|(
name|jsop
argument_list|)
expr_stmt|;
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|toRevisionId
argument_list|)
condition|)
block|{
break|break;
block|}
name|before
operator|=
name|rev
operator|.
name|root
expr_stmt|;
block|}
name|json
operator|.
name|endArray
argument_list|()
expr_stmt|;
return|return
name|json
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|diff
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|NodeState
name|before
init|=
name|getRoot
argument_list|(
name|fromRevisionId
argument_list|)
decl_stmt|;
name|NodeState
name|after
init|=
name|getRoot
argument_list|(
name|toRevisionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|element
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|before
operator|=
name|before
operator|.
name|getChildNode
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|after
operator|=
name|after
operator|.
name|getChildNode
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
if|if
condition|(
name|depth
operator|<
literal|0
condition|)
block|{
name|depth
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|JsopDiff
name|diff
init|=
operator|new
name|JsopDiff
argument_list|(
name|path
argument_list|,
name|depth
argument_list|)
decl_stmt|;
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
name|diff
argument_list|)
expr_stmt|;
return|return
name|diff
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|nodeExists
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
return|return
name|getNode
argument_list|(
name|revisionId
argument_list|,
name|path
argument_list|)
operator|.
name|exists
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|NodeState
name|node
init|=
name|getNode
argument_list|(
name|revisionId
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|node
operator|.
name|getChildNodeCount
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Node not found: "
operator|+
name|revisionId
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNodes
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|int
name|depth
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|maxChildNodes
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|NodeState
name|node
init|=
name|getRoot
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|element
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|node
operator|=
name|node
operator|.
name|getChildNode
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|maxChildNodes
operator|<
literal|0
condition|)
block|{
name|maxChildNodes
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
name|filter
operator|=
literal|"{}"
expr_stmt|;
block|}
name|JsonSerializer
name|json
init|=
operator|new
name|JsonSerializer
argument_list|(
name|depth
argument_list|,
name|offset
argument_list|,
name|maxChildNodes
argument_list|,
name|filter
argument_list|,
name|blobSerializer
argument_list|)
decl_stmt|;
name|json
operator|.
name|serialize
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|json
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
name|commit
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|jsonDiff
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|revisionId
operator|==
literal|null
condition|)
block|{
name|revisionId
operator|=
name|head
expr_stmt|;
block|}
name|Revision
name|r
init|=
name|revisions
operator|.
name|get
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|NodeBuilder
name|builder
init|=
name|r
operator|.
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|applyJsop
argument_list|(
name|builder
argument_list|,
name|path
argument_list|,
name|jsonDiff
argument_list|)
expr_stmt|;
name|NodeState
name|newRoot
init|=
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|Revision
name|old
init|=
name|revisions
operator|.
name|get
argument_list|(
name|head
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newRoot
operator|.
name|equals
argument_list|(
name|old
operator|.
name|root
argument_list|)
condition|)
block|{
name|String
name|uuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|revisions
operator|.
name|put
argument_list|(
name|uuid
argument_list|,
operator|new
name|Revision
argument_list|(
name|newRoot
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|head
operator|=
name|uuid
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
return|return
name|head
return|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|NodeBuilder
name|builder
init|=
name|branches
operator|.
name|remove
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|!=
literal|null
condition|)
block|{
name|applyJsop
argument_list|(
name|builder
argument_list|,
name|path
argument_list|,
name|jsonDiff
argument_list|)
expr_stmt|;
name|String
name|uuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|branches
operator|.
name|put
argument_list|(
name|uuid
argument_list|,
name|builder
argument_list|)
expr_stmt|;
return|return
name|uuid
return|;
block|}
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Revision not found: "
operator|+
name|revisionId
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
name|branch
parameter_list|(
name|String
name|trunkRevisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|String
name|uuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|branches
operator|.
name|put
argument_list|(
name|uuid
argument_list|,
name|getRoot
argument_list|(
name|trunkRevisionId
argument_list|)
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|uuid
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
name|merge
parameter_list|(
name|String
name|branchRevisionId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|NodeBuilder
name|builder
init|=
name|branches
operator|.
name|remove
argument_list|(
name|branchRevisionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|NodeState
name|newRoot
init|=
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|Revision
name|old
init|=
name|revisions
operator|.
name|get
argument_list|(
name|head
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newRoot
operator|.
name|equals
argument_list|(
name|old
operator|.
name|root
argument_list|)
condition|)
block|{
name|String
name|uuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|revisions
operator|.
name|put
argument_list|(
name|uuid
argument_list|,
operator|new
name|Revision
argument_list|(
name|newRoot
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|head
operator|=
name|uuid
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
return|return
name|head
return|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Branch not found: "
operator|+
name|branchRevisionId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|rebase
parameter_list|(
name|String
name|branchRevisionId
parameter_list|,
name|String
name|newBaseRevisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|Blob
name|blob
init|=
name|blobs
operator|.
name|get
argument_list|(
name|blobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|blob
operator|!=
literal|null
condition|)
block|{
return|return
name|blob
operator|.
name|length
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Blob not found: "
operator|+
name|blobId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|Blob
name|blob
init|=
name|blobs
operator|.
name|get
argument_list|(
name|blobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|blob
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|InputStream
name|stream
init|=
name|blob
operator|.
name|getNewStream
argument_list|()
decl_stmt|;
try|try
block|{
name|ByteStreams
operator|.
name|skipFully
argument_list|(
name|stream
argument_list|,
name|pos
argument_list|)
expr_stmt|;
return|return
name|stream
operator|.
name|read
argument_list|(
name|buff
argument_list|,
name|off
argument_list|,
name|length
argument_list|)
return|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Failed to read a blob"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Blob not found: "
operator|+
name|blobId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|write
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|MicroKernelException
block|{
try|try
block|{
specifier|final
name|Hasher
name|hasher
init|=
name|Hashing
operator|.
name|sha256
argument_list|()
operator|.
name|newHasher
argument_list|()
decl_stmt|;
name|Blob
name|blob
init|=
name|store
operator|.
name|createBlob
argument_list|(
operator|new
name|CheckedInputStream
argument_list|(
name|in
argument_list|,
operator|new
name|Checksum
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|hasher
operator|.
name|putBytes
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|int
name|b
parameter_list|)
block|{
name|hasher
operator|.
name|putByte
argument_list|(
operator|(
name|byte
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getValue
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|HashCode
name|hash
init|=
name|hasher
operator|.
name|hash
argument_list|()
decl_stmt|;
comment|// wrap into AbstractBlob for the SHA-256 memorization feature
if|if
condition|(
operator|!
operator|(
name|blob
operator|instanceof
name|AbstractBlob
operator|)
condition|)
block|{
specifier|final
name|Blob
name|b
init|=
name|blob
decl_stmt|;
name|blob
operator|=
operator|new
name|AbstractBlob
argument_list|(
name|hash
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|b
operator|.
name|length
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getNewStream
parameter_list|()
block|{
return|return
name|b
operator|.
name|getNewStream
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
name|String
name|id
init|=
name|hash
operator|.
name|toString
argument_list|()
decl_stmt|;
name|blobs
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|blob
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Failed to create a blob"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|Revision
block|{
specifier|private
specifier|final
name|NodeState
name|root
decl_stmt|;
specifier|private
specifier|final
name|String
name|message
decl_stmt|;
specifier|private
specifier|final
name|long
name|timestamp
decl_stmt|;
name|Revision
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
name|Revision
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|message
operator|=
literal|"origin"
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

