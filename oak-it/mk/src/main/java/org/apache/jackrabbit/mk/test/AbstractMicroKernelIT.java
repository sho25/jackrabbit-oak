begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_comment
comment|/**  * Abstract base class for {@link MicroKernel} integration tests.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractMicroKernelIT
block|{
comment|/**      * Finds and returns all {@link MicroKernelFixture} services available      * in the current classpath.      *      * @return available {@link MicroKernelFixture} services      */
annotation|@
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|loadFixtures
parameter_list|()
block|{
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|fixtures
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|MicroKernelFixture
argument_list|>
name|iface
init|=
name|MicroKernelFixture
operator|.
name|class
decl_stmt|;
name|ServiceLoader
argument_list|<
name|MicroKernelFixture
argument_list|>
name|loader
init|=
name|ServiceLoader
operator|.
name|load
argument_list|(
name|iface
argument_list|,
name|iface
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MicroKernelFixture
name|fixture
range|:
name|loader
control|)
block|{
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|fixture
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|fixtures
return|;
block|}
comment|/**      * The {@link MicroKernelFixture} service used by this test case instance.      */
specifier|protected
specifier|final
name|MicroKernelFixture
name|fixture
decl_stmt|;
comment|/**      * The {@link MicroKernel} cluster node instances used by this test case.      */
specifier|protected
specifier|final
name|MicroKernel
index|[]
name|mks
decl_stmt|;
comment|/**      * The {@link MicroKernel} instance used by this test case.      * In a clustered setup this is the first node of the cluster.      */
specifier|protected
name|MicroKernel
name|mk
decl_stmt|;
comment|/**      * Creates a {@link MicroKernel} test case for a cluster of the given      * size created using the given {@link MicroKernelFixture} service.      *      * @param fixture {@link MicroKernelFixture} service      * @param nodeCount number of nodes that the test cluster should contain      */
specifier|protected
name|AbstractMicroKernelIT
parameter_list|(
name|MicroKernelFixture
name|fixture
parameter_list|,
name|int
name|nodeCount
parameter_list|)
block|{
assert|assert
name|nodeCount
operator|>
literal|0
assert|;
name|this
operator|.
name|fixture
operator|=
name|fixture
expr_stmt|;
name|this
operator|.
name|mks
operator|=
operator|new
name|MicroKernel
index|[
name|nodeCount
index|]
expr_stmt|;
block|}
comment|/**      * Prepares the test case by initializing the {@link #mks} and      * {@link #mk} variables with a new {@link MicroKernel} cluster      * from the {@link MicroKernelFixture} service associated with      * this test case.      */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|fixture
operator|.
name|setUpCluster
argument_list|(
name|mks
argument_list|)
expr_stmt|;
name|mk
operator|=
name|mks
index|[
literal|0
index|]
expr_stmt|;
name|addInitialTestContent
argument_list|()
expr_stmt|;
block|}
comment|/**      * Adds initial content used by the test case. This method is      * called by the {@link #setUp()} method after the {@link MicroKernel}      * cluster has been set up and before the actual test is run.      * The default implementation does nothing, but subclasses can      * override this method to perform extra initialization.      */
specifier|protected
name|void
name|addInitialTestContent
parameter_list|()
block|{     }
comment|/**      * Releases the {@link MicroKernel} cluster used by this test case.      */
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|fixture
operator|.
name|tearDownCluster
argument_list|(
name|mks
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

