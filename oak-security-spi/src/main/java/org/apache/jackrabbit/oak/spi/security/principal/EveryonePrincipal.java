begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|GroupPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|JackrabbitPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_comment
comment|/**  * Built-in principal group that has every other principal as member.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|EveryonePrincipal
implements|implements
name|JackrabbitPrincipal
implements|,
name|GroupPrincipal
block|{
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"everyone"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|EveryonePrincipal
name|INSTANCE
init|=
operator|new
name|EveryonePrincipal
argument_list|()
decl_stmt|;
specifier|private
name|EveryonePrincipal
parameter_list|()
block|{ }
specifier|public
specifier|static
name|EveryonePrincipal
name|getInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
comment|//----------------------------------------------------------< Principal>---
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
comment|//------------------------------------------------------< GroupPrincipal>---
annotation|@
name|Override
specifier|public
name|boolean
name|isMember
parameter_list|(
annotation|@
name|NotNull
name|Principal
name|member
parameter_list|)
block|{
return|return
operator|!
name|member
operator|.
name|equals
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|members
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented."
argument_list|)
throw|;
block|}
comment|//-------------------------------------------------------------< Object>---
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|NAME
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|JackrabbitPrincipal
operator|&&
name|GroupPrincipals
operator|.
name|isGroup
argument_list|(
operator|(
name|Principal
operator|)
name|obj
argument_list|)
condition|)
block|{
name|JackrabbitPrincipal
name|other
init|=
operator|(
name|JackrabbitPrincipal
operator|)
name|obj
decl_stmt|;
return|return
name|NAME
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|NAME
operator|+
literal|" principal"
return|;
block|}
block|}
end_class

end_unit

