begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|version
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionHistory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|transform
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_comment
comment|/**  * {@code VersionableTest} contains tests for method relevant to  * versionable nodes.  */
end_comment

begin_class
specifier|public
class|class
name|VersionableTest
extends|extends
name|AbstractJCRTest
block|{
specifier|public
name|void
name|testGetTypeOfPredecessors
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|node
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionManager
name|vMgr
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|vMgr
operator|.
name|checkin
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|nameFromValue
argument_list|(
name|PropertyType
operator|.
name|REFERENCE
argument_list|)
argument_list|,
name|PropertyType
operator|.
name|nameFromValue
argument_list|(
name|node
operator|.
name|getProperty
argument_list|(
name|jcrPredecessors
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReadOnlyAfterCheckin
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|node
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionManager
name|vMgr
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|isCheckedOut
argument_list|()
condition|)
block|{
name|vMgr
operator|.
name|checkout
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|superuser
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|propertyName1
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|vMgr
operator|.
name|checkin
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|node
operator|.
name|setProperty
argument_list|(
name|propertyName1
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"setProperty() must fail on a checked-in node"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|node
operator|.
name|setProperty
argument_list|(
name|propertyName1
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"setProperty(..., null) must fail on a checked-in node"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|Property
name|prop
init|=
name|node
operator|.
name|getProperty
argument_list|(
name|propertyName1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setValue
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Property.setValue() must fail on a checked-in node"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|Property
name|prop
init|=
name|node
operator|.
name|getProperty
argument_list|(
name|propertyName1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|prop
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Property.remove() must fail on a checked-in node"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testReferenceableChild
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|node
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|ntUnstructured
argument_list|)
decl_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|Node
name|child
init|=
name|node
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|,
name|ntUnstructured
argument_list|)
decl_stmt|;
name|child
operator|.
name|addMixin
argument_list|(
name|mixReferenceable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionManager
name|vMgr
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|vMgr
operator|.
name|checkin
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test from Jackrabbit: JCR-3635 (OAK-940)      *<p>      * Tests the case when a node already has a manual set      * JcrConstants.JCR_FROZENUUID property and is versioned. The manual set      * frozenUuid will overwrite the one that is automatically assigned by the      * VersionManager, which should not happen      */
specifier|public
name|void
name|testCopyFrozenUuidProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|firstNode
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|)
decl_stmt|;
name|firstNode
operator|.
name|setPrimaryType
argument_list|(
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|firstNode
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|)
expr_stmt|;
name|firstNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// create version for the node
name|Version
name|firstNodeVersion
init|=
name|firstNode
operator|.
name|checkin
argument_list|()
decl_stmt|;
name|firstNode
operator|.
name|checkout
argument_list|()
expr_stmt|;
name|Node
name|secondNode
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|)
decl_stmt|;
name|secondNode
operator|.
name|setPrimaryType
argument_list|(
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|secondNode
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|)
expr_stmt|;
name|Property
name|firstNodeVersionFrozenUuid
init|=
name|firstNodeVersion
operator|.
name|getFrozenNode
argument_list|()
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_FROZENUUID
argument_list|)
decl_stmt|;
name|secondNode
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_FROZENUUID
argument_list|,
name|firstNodeVersionFrozenUuid
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|secondNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// create version of the second node
name|Version
name|secondNodeVersion
init|=
name|secondNode
operator|.
name|checkin
argument_list|()
decl_stmt|;
name|secondNode
operator|.
name|checkout
argument_list|()
expr_stmt|;
comment|// frozenUuid from the second node version node should not be the same as the one from the first node version
name|Property
name|secondBodeVersionFrozenUuid
init|=
name|secondNodeVersion
operator|.
name|getFrozenNode
argument_list|()
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_FROZENUUID
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|JcrConstants
operator|.
name|JCR_FROZENUUID
operator|+
literal|" should not be the same for two different versions of different nodes! "
argument_list|,
name|secondBodeVersionFrozenUuid
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|firstNodeVersionFrozenUuid
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCheckoutWithPendingChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|node
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|node
operator|.
name|checkin
argument_list|()
expr_stmt|;
name|Node
name|newNode
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|,
name|testNodeType
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|newNode
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|checkout
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|isCheckedOut
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newNode
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// OAK-1272
specifier|public
name|void
name|testRemoveAndCreateSameVersionableChildNode
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create parent
name|Node
name|parentNode
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|parentNode
operator|.
name|setPrimaryType
argument_list|(
name|ntUnstructured
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"sample"
argument_list|)
expr_stmt|;
comment|// create a versionable child
name|Node
name|createdNode
init|=
name|parentNode
operator|.
name|addNode
argument_list|(
literal|"versionablechild"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|createdNode
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionManager
name|vm
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|vm
operator|.
name|checkin
argument_list|(
name|testRootNode
operator|.
name|getPath
argument_list|()
operator|+
literal|"/parent/versionablechild"
argument_list|)
expr_stmt|;
comment|// delete and create exact same node
name|Node
name|parent
init|=
name|testRootNode
operator|.
name|getNode
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
comment|// remove children
name|NodeIterator
name|nodes
init|=
name|parent
operator|.
name|getNodes
argument_list|()
decl_stmt|;
while|while
condition|(
name|nodes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|childNode
init|=
name|nodes
operator|.
name|nextNode
argument_list|()
decl_stmt|;
name|childNode
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|// create again versionable child node
name|Node
name|recreatedNode
init|=
name|parent
operator|.
name|addNode
argument_list|(
literal|"versionablechild"
argument_list|,
name|ntUnstructured
argument_list|)
decl_stmt|;
name|recreatedNode
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
comment|// Oak-1272
specifier|public
name|void
name|testRecreateVersionableNodeWithChangedProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|node
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|ntUnstructured
argument_list|)
decl_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|propertyName1
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionManager
name|vm
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|vm
operator|.
name|checkin
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// re-create node
name|node
operator|.
name|remove
argument_list|()
expr_stmt|;
name|node
operator|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|ntUnstructured
argument_list|)
expr_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|propertyName1
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
comment|// Oak-1272
specifier|public
name|void
name|testRecreateVersionableNodeWithNewProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|node
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|ntUnstructured
argument_list|)
decl_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionManager
name|vm
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|vm
operator|.
name|checkin
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// re-create node
name|node
operator|.
name|remove
argument_list|()
expr_stmt|;
name|node
operator|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|ntUnstructured
argument_list|)
expr_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|propertyName1
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
comment|// Oak-1272
specifier|public
name|void
name|testRecreateVersionableNodeWithRemovedProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|node
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|ntUnstructured
argument_list|)
decl_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|propertyName1
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionManager
name|vm
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|vm
operator|.
name|checkin
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// re-create node
name|node
operator|.
name|remove
argument_list|()
expr_stmt|;
name|node
operator|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|ntUnstructured
argument_list|)
expr_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
comment|// Oak-1272
specifier|public
name|void
name|testRecreateVersionableNodeWithChangedChild
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|node
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|ntUnstructured
argument_list|)
decl_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|node
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|,
name|ntUnstructured
argument_list|)
operator|.
name|setProperty
argument_list|(
name|propertyName1
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionManager
name|vm
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|vm
operator|.
name|checkin
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// re-create node
name|node
operator|.
name|remove
argument_list|()
expr_stmt|;
name|node
operator|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|ntUnstructured
argument_list|)
expr_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|node
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|,
name|ntUnstructured
argument_list|)
operator|.
name|setProperty
argument_list|(
name|propertyName1
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
comment|// Oak-1272
specifier|public
name|void
name|testRecreateVersionableNodeWithRemovedChild
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|node
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|ntUnstructured
argument_list|)
decl_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|node
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|,
name|ntUnstructured
argument_list|)
operator|.
name|setProperty
argument_list|(
name|propertyName1
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionManager
name|vm
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|vm
operator|.
name|checkin
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// re-create node
name|node
operator|.
name|remove
argument_list|()
expr_stmt|;
name|node
operator|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|ntUnstructured
argument_list|)
expr_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
comment|// Oak-1272
specifier|public
name|void
name|testRecreateVersionableNodeWithAddedChild
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|node
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|ntUnstructured
argument_list|)
decl_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionManager
name|vm
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|vm
operator|.
name|checkin
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// re-create node
name|node
operator|.
name|remove
argument_list|()
expr_stmt|;
name|node
operator|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|ntUnstructured
argument_list|)
expr_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|node
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|,
name|ntUnstructured
argument_list|)
operator|.
name|setProperty
argument_list|(
name|propertyName1
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
comment|// OAK-5193
specifier|public
name|void
name|testSuccessorsPredecessorsMergedOnRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|node
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|,
name|ntUnstructured
argument_list|)
decl_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|VersionManager
name|vm
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|VersionHistory
name|history
init|=
name|vm
operator|.
name|getVersionHistory
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|vm
operator|.
name|checkpoint
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1.0
name|Version
name|v11
init|=
name|vm
operator|.
name|checkpoint
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|vm
operator|.
name|checkpoint
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1.2
name|vm
operator|.
name|checkpoint
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1.3
name|vm
operator|.
name|restore
argument_list|(
name|v11
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|vm
operator|.
name|checkpoint
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1.1
name|vm
operator|.
name|checkpoint
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1.1.0
name|assertSuccessors
argument_list|(
name|history
argument_list|,
name|of
argument_list|(
literal|"1.1.0"
argument_list|,
literal|"1.2"
argument_list|)
argument_list|,
literal|"1.1"
argument_list|)
expr_stmt|;
name|vm
operator|.
name|checkpoint
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1.1.1
name|history
operator|.
name|removeVersion
argument_list|(
literal|"1.2"
argument_list|)
expr_stmt|;
name|assertSuccessors
argument_list|(
name|history
argument_list|,
name|of
argument_list|(
literal|"1.1.0"
argument_list|,
literal|"1.3"
argument_list|)
argument_list|,
literal|"1.1"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertSuccessors
parameter_list|(
name|VersionHistory
name|history
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|expectedSuccessors
parameter_list|,
name|String
name|versionName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|assertEquals
argument_list|(
name|expectedSuccessors
argument_list|,
name|getNames
argument_list|(
name|history
operator|.
name|getVersion
argument_list|(
name|versionName
argument_list|)
operator|.
name|getSuccessors
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getNames
parameter_list|(
name|Version
index|[]
name|versions
parameter_list|)
block|{
return|return
name|newHashSet
argument_list|(
name|transform
argument_list|(
name|asList
argument_list|(
name|versions
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|Version
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|Version
name|input
parameter_list|)
block|{
try|try
block|{
return|return
name|input
operator|.
name|getName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

