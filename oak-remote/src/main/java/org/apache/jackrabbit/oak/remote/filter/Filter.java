begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
class|class
name|Filter
block|{
specifier|private
name|Pattern
name|pattern
decl_stmt|;
specifier|public
name|Filter
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|star
init|=
name|filter
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
decl_stmt|;
while|while
condition|(
name|star
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|star
operator|>
literal|0
operator|&&
name|filter
operator|.
name|charAt
argument_list|(
name|star
operator|-
literal|1
argument_list|)
operator|==
literal|'\\'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|filter
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|star
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|filter
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|star
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
block|}
name|filter
operator|=
name|filter
operator|.
name|substring
argument_list|(
name|star
operator|+
literal|1
argument_list|)
expr_stmt|;
name|star
operator|=
name|filter
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|matches
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|pattern
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
block|}
end_class

end_unit

