begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|util
operator|.
name|BinaryAccessTestUtils
operator|.
name|getBinary
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|util
operator|.
name|BinaryAccessTestUtils
operator|.
name|httpGet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|util
operator|.
name|BinaryAccessTestUtils
operator|.
name|httpPut
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|util
operator|.
name|BinaryAccessTestUtils
operator|.
name|isFailedHttpPut
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|util
operator|.
name|BinaryAccessTestUtils
operator|.
name|isSuccessfulHttpPut
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|util
operator|.
name|BinaryAccessTestUtils
operator|.
name|putBinary
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|util
operator|.
name|BinaryAccessTestUtils
operator|.
name|storeBinary
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|util
operator|.
name|BinaryAccessTestUtils
operator|.
name|storeBinaryAndRetrieve
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|ReferenceBinary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|binary
operator|.
name|BinaryDownload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|binary
operator|.
name|BinaryDownloadOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|binary
operator|.
name|BinaryUpload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|s3
operator|.
name|S3DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|util
operator|.
name|Content
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
operator|.
name|ConfigurableDataRecordAccessProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_comment
comment|/**  * Integration test for direct binary GET/PUT via HTTP, that requires a fully working data store  * (such as S3) for each {@link AbstractBinaryAccessIT#dataStoreFixtures() configured fixture}.  * The data store in question must support direct GET/PUT access via a URI.  *   * Data store must be configured through e.g. aws.properties.  *  * Run this IT in maven using either:  *  *   single test:  *     mvn clean test -Dtest=BinaryAccessIT  *   *   as part of all integration tests:  *     mvn -PintegrationTesting clean install  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|BinaryAccessIT
extends|extends
name|AbstractBinaryAccessIT
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FILE_PATH
init|=
literal|"/file"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|REGULAR_WRITE_EXPIRY
init|=
literal|60
operator|*
literal|5
decl_stmt|;
comment|// seconds
specifier|private
specifier|static
specifier|final
name|int
name|REGULAR_READ_EXPIRY
init|=
literal|60
operator|*
literal|5
decl_stmt|;
comment|// seconds
specifier|public
name|BinaryAccessIT
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|)
block|{
comment|// reuse NodeStore (and DataStore) across all tests in this class
name|super
argument_list|(
name|fixture
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|JackrabbitValueFactory
name|uploadProvider
decl_stmt|;
specifier|private
name|JackrabbitValueFactory
name|anonymousUploadProvider
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|cleanRepoContents
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|anonymousSession
init|=
name|getAnonymousSession
argument_list|()
decl_stmt|;
name|uploadProvider
operator|=
operator|(
name|JackrabbitValueFactory
operator|)
name|getAdminSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
expr_stmt|;
name|anonymousUploadProvider
operator|=
operator|(
name|JackrabbitValueFactory
operator|)
name|anonymousSession
operator|.
name|getValueFactory
argument_list|()
expr_stmt|;
if|if
condition|(
name|getAdminSession
argument_list|()
operator|.
name|nodeExists
argument_list|(
name|FILE_PATH
argument_list|)
condition|)
block|{
name|getAdminSession
argument_list|()
operator|.
name|getNode
argument_list|(
name|FILE_PATH
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
comment|// F1 - basic test
annotation|@
name|Test
specifier|public
name|void
name|testUpload
parameter_list|()
throws|throws
name|Exception
block|{
comment|// enable writable URI feature
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|REGULAR_WRITE_EXPIRY
argument_list|)
expr_stmt|;
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|256
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|getAdminSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|instanceof
name|JackrabbitValueFactory
argument_list|)
expr_stmt|;
name|BinaryUpload
name|upload
init|=
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
name|content
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|upload
argument_list|)
expr_stmt|;
comment|// very small test binary
name|assertTrue
argument_list|(
name|content
operator|.
name|size
argument_list|()
operator|<
name|upload
operator|.
name|getMaxPartSize
argument_list|()
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|upload
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"- uploading binary via PUT to {}"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|code
init|=
name|httpPut
argument_list|(
name|uri
argument_list|,
name|content
operator|.
name|size
argument_list|()
argument_list|,
name|content
operator|.
name|getStream
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"PUT to pre-signed URI failed"
argument_list|,
name|isSuccessfulHttpPut
argument_list|(
name|code
argument_list|,
name|getConfigurableHttpDataRecordProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Binary
name|writeBinary
init|=
name|uploadProvider
operator|.
name|completeBinaryUpload
argument_list|(
name|upload
operator|.
name|getUploadToken
argument_list|()
argument_list|)
decl_stmt|;
name|putBinary
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|,
name|writeBinary
argument_list|)
expr_stmt|;
name|Binary
name|readBinary
init|=
name|getBinary
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|)
decl_stmt|;
name|content
operator|.
name|assertEqualsWith
argument_list|(
name|readBinary
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// F3 - Multi-part upload
annotation|@
name|Test
specifier|public
name|void
name|testMultiPartUpload
parameter_list|()
throws|throws
name|Exception
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|REGULAR_WRITE_EXPIRY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getAdminSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
operator|instanceof
name|JackrabbitValueFactory
argument_list|)
expr_stmt|;
comment|// 25MB is a good size to ensure chunking is done
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|1024
operator|*
literal|25
argument_list|)
decl_stmt|;
name|BinaryUpload
name|upload
init|=
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
name|content
operator|.
name|size
argument_list|()
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|upload
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|uris
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterables
operator|.
name|addAll
argument_list|(
name|uris
argument_list|,
name|upload
operator|.
name|getUploadURIs
argument_list|()
argument_list|)
expr_stmt|;
comment|// this follows the upload algorithm from BinaryUpload
if|if
condition|(
name|content
operator|.
name|size
argument_list|()
operator|/
name|upload
operator|.
name|getMaxPartSize
argument_list|()
operator|>
name|uris
operator|.
name|size
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"exact binary size was provided but implementation failed to provide enough upload URIs"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|content
operator|.
name|size
argument_list|()
operator|<
name|upload
operator|.
name|getMinPartSize
argument_list|()
condition|)
block|{
comment|// single upload
name|content
operator|.
name|httpPUT
argument_list|(
name|uris
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// multipart upload
specifier|final
name|long
name|basePartSize
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|content
operator|.
name|size
argument_list|()
operator|/
operator|(
name|double
operator|)
name|uris
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|URI
name|uri
range|:
name|uris
control|)
block|{
specifier|final
name|long
name|partSize
init|=
name|Math
operator|.
name|min
argument_list|(
name|basePartSize
argument_list|,
name|content
operator|.
name|size
argument_list|()
operator|-
name|offset
argument_list|)
decl_stmt|;
name|int
name|code
init|=
name|content
operator|.
name|httpPUT
argument_list|(
name|uri
argument_list|,
name|offset
argument_list|,
name|partSize
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isSuccessfulHttpPut
argument_list|(
name|code
argument_list|,
name|getConfigurableHttpDataRecordProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|partSize
expr_stmt|;
comment|// fail safe check, shouldn't be necessary
if|if
condition|(
name|offset
operator|>=
name|content
operator|.
name|size
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
name|Binary
name|writeBinary
init|=
name|uploadProvider
operator|.
name|completeBinaryUpload
argument_list|(
name|upload
operator|.
name|getUploadToken
argument_list|()
argument_list|)
decl_stmt|;
name|putBinary
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|,
name|writeBinary
argument_list|)
expr_stmt|;
name|Binary
name|readBinary
init|=
name|getBinary
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|)
decl_stmt|;
name|content
operator|.
name|assertEqualsWith
argument_list|(
name|readBinary
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// F8 - test reading getBinary().toInputStream() once uploaded
annotation|@
name|Test
specifier|public
name|void
name|testStreamBinaryThroughJCRAfterURIWrite
parameter_list|()
throws|throws
name|Exception
block|{
comment|// enable writable URI feature
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|REGULAR_WRITE_EXPIRY
argument_list|)
expr_stmt|;
comment|// 1. add binary and upload
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|256
argument_list|)
decl_stmt|;
name|BinaryUpload
name|upload
init|=
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
name|content
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|int
name|code
init|=
name|content
operator|.
name|httpPUT
argument_list|(
name|upload
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isSuccessfulHttpPut
argument_list|(
name|code
argument_list|,
name|getConfigurableHttpDataRecordProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Binary
name|binaryWrite
init|=
name|uploadProvider
operator|.
name|completeBinaryUpload
argument_list|(
name|upload
operator|.
name|getUploadToken
argument_list|()
argument_list|)
decl_stmt|;
name|storeBinary
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|,
name|binaryWrite
argument_list|)
expr_stmt|;
comment|// 2. stream through JCR and validate it's the same
name|Session
name|session
init|=
name|createAdminSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Binary
name|binaryRead
init|=
name|getBinary
argument_list|(
name|session
argument_list|,
name|FILE_PATH
argument_list|)
decl_stmt|;
name|content
operator|.
name|assertEqualsWith
argument_list|(
name|binaryRead
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
comment|// F10 - GET Binary when created via repo
annotation|@
name|Test
specifier|public
name|void
name|testGetBinary
parameter_list|()
throws|throws
name|Exception
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectDownloadURIExpirySeconds
argument_list|(
name|REGULAR_READ_EXPIRY
argument_list|)
expr_stmt|;
comment|// Must be larger than the minimum file size, to keep it from being inlined in the node store.
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
decl_stmt|;
comment|// make sure to test getting a fresh Binary
name|Binary
name|binary
init|=
name|storeBinaryAndRetrieve
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|binary
operator|instanceof
name|BinaryDownload
argument_list|)
expr_stmt|;
name|URI
name|downloadURI
init|=
operator|(
operator|(
name|BinaryDownload
operator|)
name|binary
operator|)
operator|.
name|getURI
argument_list|(
name|BinaryDownloadOptions
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"HTTP download URI is null"
argument_list|,
name|downloadURI
argument_list|)
expr_stmt|;
name|content
operator|.
name|assertEqualsWith
argument_list|(
name|httpGet
argument_list|(
name|downloadURI
argument_list|)
argument_list|)
expr_stmt|;
comment|// different way to retrieve binary
comment|// TODO: also test multivalue binary prop
name|binary
operator|=
name|getAdminSession
argument_list|()
operator|.
name|getNode
argument_list|(
name|FILE_PATH
argument_list|)
operator|.
name|getNode
argument_list|(
name|JcrConstants
operator|.
name|JCR_CONTENT
argument_list|)
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_DATA
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getBinary
argument_list|()
expr_stmt|;
name|downloadURI
operator|=
operator|(
operator|(
name|BinaryDownload
operator|)
name|binary
operator|)
operator|.
name|getURI
argument_list|(
name|BinaryDownloadOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"HTTP download URI is null"
argument_list|,
name|downloadURI
argument_list|)
expr_stmt|;
block|}
comment|// F9 - GET Binary for binary after write using direct PUT
annotation|@
name|Test
specifier|public
name|void
name|testGetBinaryAfterPut
parameter_list|()
throws|throws
name|Exception
block|{
comment|// enable writable and readable URI feature
name|ConfigurableDataRecordAccessProvider
name|provider
init|=
name|getConfigurableHttpDataRecordProvider
argument_list|()
decl_stmt|;
name|provider
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|REGULAR_WRITE_EXPIRY
argument_list|)
expr_stmt|;
name|provider
operator|.
name|setDirectDownloadURIExpirySeconds
argument_list|(
name|REGULAR_READ_EXPIRY
argument_list|)
expr_stmt|;
comment|// 1. add binary and upload
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
decl_stmt|;
name|BinaryUpload
name|upload
init|=
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
name|content
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|int
name|code
init|=
name|content
operator|.
name|httpPUT
argument_list|(
name|upload
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isSuccessfulHttpPut
argument_list|(
name|code
argument_list|,
name|getConfigurableHttpDataRecordProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Binary
name|writeBinary
init|=
name|uploadProvider
operator|.
name|completeBinaryUpload
argument_list|(
name|upload
operator|.
name|getUploadToken
argument_list|()
argument_list|)
decl_stmt|;
name|storeBinary
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|,
name|writeBinary
argument_list|)
expr_stmt|;
comment|// 2. read binary, get the URI
name|Binary
name|binary
init|=
name|getBinary
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|)
decl_stmt|;
name|URI
name|downloadURI
init|=
operator|(
call|(
name|BinaryDownload
call|)
argument_list|(
name|binary
argument_list|)
operator|)
operator|.
name|getURI
argument_list|(
name|BinaryDownloadOptions
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
comment|// 3. GET on URI and verify contents are the same
name|content
operator|.
name|assertEqualsWith
argument_list|(
name|httpGet
argument_list|(
name|downloadURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSmallBinaryReturnsNull
parameter_list|()
throws|throws
name|Exception
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectDownloadURIExpirySeconds
argument_list|(
name|REGULAR_READ_EXPIRY
argument_list|)
expr_stmt|;
comment|// Must be smaller than the minimum file size, (inlined binary)
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|256
argument_list|)
decl_stmt|;
name|Binary
name|binary
init|=
name|storeBinaryAndRetrieve
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|URI
name|downloadURI
init|=
operator|(
call|(
name|BinaryDownload
call|)
argument_list|(
name|binary
argument_list|)
operator|)
operator|.
name|getURI
argument_list|(
name|BinaryDownloadOptions
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|downloadURI
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBinaryWithSpecificMediaType
parameter_list|()
throws|throws
name|Exception
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectDownloadURIExpirySeconds
argument_list|(
name|REGULAR_READ_EXPIRY
argument_list|)
expr_stmt|;
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
decl_stmt|;
name|Binary
name|binary
init|=
name|storeBinaryAndRetrieve
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|String
name|expectedMediaType
init|=
literal|"image/png"
decl_stmt|;
name|BinaryDownloadOptions
name|downloadOptions
init|=
name|BinaryDownloadOptions
operator|.
name|builder
argument_list|()
operator|.
name|withMediaType
argument_list|(
name|expectedMediaType
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|URI
name|downloadURI
init|=
operator|(
call|(
name|BinaryDownload
call|)
argument_list|(
name|binary
argument_list|)
operator|)
operator|.
name|getURI
argument_list|(
name|downloadOptions
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|downloadURI
operator|.
name|toURL
argument_list|()
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|String
name|mediaType
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Content-Type"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mediaType
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedMediaType
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
comment|// Verify response content
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|content
operator|.
name|assertEqualsWith
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBinaryWithSpecificMediaTypeAndEncoding
parameter_list|()
throws|throws
name|Exception
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectDownloadURIExpirySeconds
argument_list|(
name|REGULAR_READ_EXPIRY
argument_list|)
expr_stmt|;
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
decl_stmt|;
name|Binary
name|binary
init|=
name|storeBinaryAndRetrieve
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|String
name|expectedMediaType
init|=
literal|"text/plain"
decl_stmt|;
name|String
name|expectedCharacterEncoding
init|=
literal|"utf-8"
decl_stmt|;
name|BinaryDownloadOptions
name|downloadOptions
init|=
name|BinaryDownloadOptions
operator|.
name|builder
argument_list|()
operator|.
name|withMediaType
argument_list|(
name|expectedMediaType
argument_list|)
operator|.
name|withCharacterEncoding
argument_list|(
name|expectedCharacterEncoding
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|URI
name|downloadURI
init|=
operator|(
call|(
name|BinaryDownload
call|)
argument_list|(
name|binary
argument_list|)
operator|)
operator|.
name|getURI
argument_list|(
name|downloadOptions
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|downloadURI
operator|.
name|toURL
argument_list|()
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|String
name|mediaType
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Content-Type"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mediaType
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s; charset=%s"
argument_list|,
name|expectedMediaType
argument_list|,
name|expectedCharacterEncoding
argument_list|)
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
comment|// Verify response content
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|content
operator|.
name|assertEqualsWith
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBinaryWithCharacterEncodingOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectDownloadURIExpirySeconds
argument_list|(
name|REGULAR_READ_EXPIRY
argument_list|)
expr_stmt|;
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
decl_stmt|;
name|Binary
name|binary
init|=
name|storeBinaryAndRetrieve
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|String
name|expectedCharacterEncoding
init|=
literal|"utf-8"
decl_stmt|;
name|BinaryDownloadOptions
name|downloadOptions
init|=
name|BinaryDownloadOptions
operator|.
name|builder
argument_list|()
operator|.
name|withCharacterEncoding
argument_list|(
name|expectedCharacterEncoding
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|URI
name|downloadURI
init|=
operator|(
call|(
name|BinaryDownload
call|)
argument_list|(
name|binary
argument_list|)
operator|)
operator|.
name|getURI
argument_list|(
name|downloadOptions
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|downloadURI
operator|.
name|toURL
argument_list|()
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|String
name|mediaType
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Content-Type"
argument_list|)
decl_stmt|;
comment|// application/octet-stream is the default Content-Type if none is
comment|// set in the signed URI
name|assertEquals
argument_list|(
literal|"application/octet-stream"
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
comment|// Verify response content
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|content
operator|.
name|assertEqualsWith
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBinaryWithSpecificFileName
parameter_list|()
throws|throws
name|Exception
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectDownloadURIExpirySeconds
argument_list|(
name|REGULAR_READ_EXPIRY
argument_list|)
expr_stmt|;
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
decl_stmt|;
name|Binary
name|binary
init|=
name|storeBinaryAndRetrieve
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|String
name|expectedName
init|=
literal|"beautiful landscape.png"
decl_stmt|;
name|BinaryDownloadOptions
name|downloadOptions
init|=
name|BinaryDownloadOptions
operator|.
name|builder
argument_list|()
operator|.
name|withFileName
argument_list|(
name|expectedName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|URI
name|downloadURI
init|=
operator|(
call|(
name|BinaryDownload
call|)
argument_list|(
name|binary
argument_list|)
operator|)
operator|.
name|getURI
argument_list|(
name|downloadOptions
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|downloadURI
operator|.
name|toURL
argument_list|()
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|String
name|contentDisposition
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Content-Disposition"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentDisposition
argument_list|)
expr_stmt|;
name|String
name|encodedName
init|=
operator|new
name|String
argument_list|(
name|expectedName
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
comment|// This proper behavior is disabled due to
comment|// https://github.com/Azure/azure-sdk-for-java/issues/2900
comment|// (see also https://issues.apache.org/jira/browse/OAK-8013,
comment|// https://issues.apache.org/jira/browse/OAK-8104, and
comment|// https://issues.apache.org/jira/browse/OAK-8105).  We can re-enable
comment|// the full test once the issue is resolved.  -MR
comment|//        assertEquals(
comment|//                String.format("inline; filename=\"%s\"; filename*=UTF-8''%s",
comment|//                        expectedName, encodedName),
comment|//                contentDisposition
comment|//        );
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"inline; filename=\"%s\""
argument_list|,
name|expectedName
argument_list|)
argument_list|,
name|contentDisposition
argument_list|)
expr_stmt|;
comment|// Verify response content
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|content
operator|.
name|assertEqualsWith
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBinaryWithSpecificFileNameAndDispositionType
parameter_list|()
throws|throws
name|Exception
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectDownloadURIExpirySeconds
argument_list|(
name|REGULAR_READ_EXPIRY
argument_list|)
expr_stmt|;
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
decl_stmt|;
name|Binary
name|binary
init|=
name|storeBinaryAndRetrieve
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|String
name|expectedName
init|=
literal|"beautiful landscape.png"
decl_stmt|;
name|BinaryDownloadOptions
name|downloadOptions
init|=
name|BinaryDownloadOptions
operator|.
name|builder
argument_list|()
operator|.
name|withFileName
argument_list|(
name|expectedName
argument_list|)
operator|.
name|withDispositionTypeAttachment
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|URI
name|downloadURI
init|=
operator|(
call|(
name|BinaryDownload
call|)
argument_list|(
name|binary
argument_list|)
operator|)
operator|.
name|getURI
argument_list|(
name|downloadOptions
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|downloadURI
operator|.
name|toURL
argument_list|()
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|String
name|contentDisposition
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Content-Disposition"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentDisposition
argument_list|)
expr_stmt|;
name|String
name|encodedName
init|=
operator|new
name|String
argument_list|(
name|expectedName
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
comment|// This proper behavior is disabled due to
comment|// https://github.com/Azure/azure-sdk-for-java/issues/2900
comment|// (see also https://issues.apache.org/jira/browse/OAK-8013,
comment|// https://issues.apache.org/jira/browse/OAK-8104, and
comment|// https://issues.apache.org/jira/browse/OAK-8105).  We can re-enable
comment|// the full test once the issue is resolved.  -MR
comment|//        assertEquals(
comment|//                String.format("attachment; filename=\"%s\"; filename*=UTF-8''%s",
comment|//                        expectedName, encodedName),
comment|//                contentDisposition
comment|//        );
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"attachment; filename=\"%s\""
argument_list|,
name|expectedName
argument_list|)
argument_list|,
name|contentDisposition
argument_list|)
expr_stmt|;
comment|// Verify response content
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|content
operator|.
name|assertEqualsWith
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBinaryWithDispositionType
parameter_list|()
throws|throws
name|Exception
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectDownloadURIExpirySeconds
argument_list|(
name|REGULAR_READ_EXPIRY
argument_list|)
expr_stmt|;
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
decl_stmt|;
name|Binary
name|binary
init|=
name|storeBinaryAndRetrieve
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|BinaryDownloadOptions
name|downloadOptions
init|=
name|BinaryDownloadOptions
operator|.
name|builder
argument_list|()
operator|.
name|withDispositionTypeInline
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|URI
name|downloadURI
init|=
operator|(
call|(
name|BinaryDownload
call|)
argument_list|(
name|binary
argument_list|)
operator|)
operator|.
name|getURI
argument_list|(
name|downloadOptions
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|downloadURI
operator|.
name|toURL
argument_list|()
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|String
name|contentDisposition
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Content-Disposition"
argument_list|)
decl_stmt|;
comment|// Should be no header since filename was not set and disposition type
comment|// is "inline"
name|assertNull
argument_list|(
name|contentDisposition
argument_list|)
expr_stmt|;
comment|// Verify response content
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|content
operator|.
name|assertEqualsWith
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|downloadOptions
operator|=
name|BinaryDownloadOptions
operator|.
name|builder
argument_list|()
operator|.
name|withDispositionTypeAttachment
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|downloadURI
operator|=
operator|(
call|(
name|BinaryDownload
call|)
argument_list|(
name|binary
argument_list|)
operator|)
operator|.
name|getURI
argument_list|(
name|downloadOptions
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|downloadURI
operator|.
name|toURL
argument_list|()
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|contentDisposition
operator|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Content-Disposition"
argument_list|)
expr_stmt|;
comment|// Content-Disposition should exist now because "attachment" was set
name|assertNotNull
argument_list|(
name|contentDisposition
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"attachment"
argument_list|,
name|contentDisposition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBinarySetsAllHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectDownloadURIExpirySeconds
argument_list|(
name|REGULAR_READ_EXPIRY
argument_list|)
expr_stmt|;
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
decl_stmt|;
name|Binary
name|binary
init|=
name|storeBinaryAndRetrieve
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|String
name|expectedMediaType
init|=
literal|"image/png"
decl_stmt|;
name|String
name|expectedCharacterEncoding
init|=
literal|"utf-8"
decl_stmt|;
name|String
name|expectedName
init|=
literal|"beautiful landscape.png"
decl_stmt|;
name|BinaryDownloadOptions
name|downloadOptions
init|=
name|BinaryDownloadOptions
operator|.
name|builder
argument_list|()
operator|.
name|withMediaType
argument_list|(
name|expectedMediaType
argument_list|)
operator|.
name|withCharacterEncoding
argument_list|(
name|expectedCharacterEncoding
argument_list|)
operator|.
name|withFileName
argument_list|(
name|expectedName
argument_list|)
operator|.
name|withDispositionTypeAttachment
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|URI
name|downloadURI
init|=
operator|(
call|(
name|BinaryDownload
call|)
argument_list|(
name|binary
argument_list|)
operator|)
operator|.
name|getURI
argument_list|(
name|downloadOptions
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|downloadURI
operator|.
name|toURL
argument_list|()
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|String
name|mediaType
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Content-Type"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mediaType
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s; charset=%s"
argument_list|,
name|expectedMediaType
argument_list|,
name|expectedCharacterEncoding
argument_list|)
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
name|String
name|contentDisposition
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Content-Disposition"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentDisposition
argument_list|)
expr_stmt|;
name|String
name|encodedName
init|=
operator|new
name|String
argument_list|(
name|expectedName
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
comment|// This proper behavior is disabled due to
comment|// https://github.com/Azure/azure-sdk-for-java/issues/2900
comment|// (see also https://issues.apache.org/jira/browse/OAK-8013,
comment|// https://issues.apache.org/jira/browse/OAK-8104, and
comment|// https://issues.apache.org/jira/browse/OAK-8105).  We can re-enable
comment|// the full test once the issue is resolved.  -MR
comment|//        assertEquals(
comment|//                String.format("attachment; filename=\"%s\"; filename*=UTF-8''%s",
comment|//                        expectedName, encodedName),
comment|//                contentDisposition
comment|//        );
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"attachment; filename=\"%s\""
argument_list|,
name|expectedName
argument_list|)
argument_list|,
name|contentDisposition
argument_list|)
expr_stmt|;
name|String
name|cacheControl
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Cache-Control"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cacheControl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"private, max-age=%d, immutable"
argument_list|,
name|REGULAR_READ_EXPIRY
argument_list|)
argument_list|,
name|cacheControl
argument_list|)
expr_stmt|;
comment|// Verify response content
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|content
operator|.
name|assertEqualsWith
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBinaryDefaultOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectDownloadURIExpirySeconds
argument_list|(
name|REGULAR_READ_EXPIRY
argument_list|)
expr_stmt|;
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
decl_stmt|;
name|Binary
name|binary
init|=
name|storeBinaryAndRetrieve
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|URI
name|downloadURI
init|=
operator|(
call|(
name|BinaryDownload
call|)
argument_list|(
name|binary
argument_list|)
operator|)
operator|.
name|getURI
argument_list|(
name|BinaryDownloadOptions
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|downloadURI
operator|.
name|toURL
argument_list|()
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|String
name|mediaType
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Content-Type"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mediaType
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/octet-stream"
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
name|String
name|contentDisposition
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Content-Disposition"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|contentDisposition
argument_list|)
expr_stmt|;
name|String
name|cacheControl
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Cache-Control"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cacheControl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"private, max-age=%d, immutable"
argument_list|,
name|REGULAR_READ_EXPIRY
argument_list|)
argument_list|,
name|cacheControl
argument_list|)
expr_stmt|;
comment|// Verify response content
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|content
operator|.
name|assertEqualsWith
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// A6 - Client MUST only get permission to add a blob referenced in a JCR binary property
comment|//      where the user has JCR set_property permission.
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"OAK-7602"
argument_list|)
comment|// michid FIXME OAK-7602
specifier|public
name|void
name|testUnprivilegedSessionCannotUploadBinary
parameter_list|()
throws|throws
name|Exception
block|{
comment|// enable writable URI feature
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|REGULAR_WRITE_EXPIRY
argument_list|)
expr_stmt|;
try|try
block|{
name|anonymousUploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
literal|1024
operator|*
literal|20
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{ }
block|}
comment|// A2 - disable write URIs entirely
annotation|@
name|Test
specifier|public
name|void
name|testDisableDirectHttpUpload
parameter_list|()
throws|throws
name|Exception
block|{
comment|// disable in data store config by setting expiry to zero
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|256
argument_list|)
decl_stmt|;
name|BinaryUpload
name|upload
init|=
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
name|content
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|upload
argument_list|)
expr_stmt|;
block|}
comment|// A2 - disable get URIs entirely
annotation|@
name|Test
specifier|public
name|void
name|testDisableDirectHttpDownload
parameter_list|()
throws|throws
name|Exception
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectDownloadURIExpirySeconds
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
decl_stmt|;
name|Binary
name|binary
init|=
name|storeBinaryAndRetrieve
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|URI
name|downloadURI
init|=
operator|(
call|(
name|BinaryDownload
call|)
argument_list|(
name|binary
argument_list|)
operator|)
operator|.
name|getURI
argument_list|(
name|BinaryDownloadOptions
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|downloadURI
argument_list|)
expr_stmt|;
block|}
comment|// A2/A3 - configure short expiry time, wait, ensure upload fails after expired
annotation|@
name|Test
specifier|public
name|void
name|testPutURIExpires
parameter_list|()
throws|throws
name|Exception
block|{
comment|// short timeout
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
decl_stmt|;
name|BinaryUpload
name|upload
init|=
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
name|content
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// wait to pass timeout: 2 seconds
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// ensure PUT fails with 403 or anything 400+
name|assertTrue
argument_list|(
name|content
operator|.
name|httpPUT
argument_list|(
name|upload
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
operator|>=
name|HttpURLConnection
operator|.
name|HTTP_BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
comment|// F2 - transfer accelerator (S3 only feature)
annotation|@
name|Test
specifier|public
name|void
name|testTransferAcceleration
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigurableDataRecordAccessProvider
name|provider
init|=
name|getConfigurableHttpDataRecordProvider
argument_list|()
decl_stmt|;
comment|// This test is S3 specific
if|if
condition|(
name|provider
operator|instanceof
name|S3DataStore
condition|)
block|{
name|provider
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|REGULAR_WRITE_EXPIRY
argument_list|)
expr_stmt|;
name|provider
operator|.
name|setDirectDownloadURIExpirySeconds
argument_list|(
name|REGULAR_READ_EXPIRY
argument_list|)
expr_stmt|;
name|provider
operator|.
name|setBinaryTransferAccelerationEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BinaryUpload
name|upload
init|=
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
literal|1024
operator|*
literal|20
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|upload
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"accelerated URI: {}"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".s3-accelerate.amazonaws.com"
argument_list|)
argument_list|)
expr_stmt|;
name|provider
operator|.
name|setBinaryTransferAccelerationEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|upload
operator|=
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
literal|1024
operator|*
literal|20
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|uri
operator|=
name|upload
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"non-accelerated URI: {}"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".s3-accelerate.amazonaws.com"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// A1 - get put URI, change it and try uploading it
annotation|@
name|Test
specifier|public
name|void
name|testModifiedPutURIFails
parameter_list|()
throws|throws
name|Exception
block|{
comment|// enable writable URI feature
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|REGULAR_WRITE_EXPIRY
argument_list|)
expr_stmt|;
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
decl_stmt|;
name|BinaryUpload
name|upload
init|=
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
name|content
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|upload
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|URI
name|changedURI
init|=
operator|new
name|URI
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s://%s/%sX?%s"
argument_list|,
comment|// NOTE the injected "X" in the URI filename
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|uri
operator|.
name|getHost
argument_list|()
argument_list|,
name|uri
operator|.
name|getPath
argument_list|()
argument_list|,
name|uri
operator|.
name|getQuery
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|code
init|=
name|content
operator|.
name|httpPUT
argument_list|(
name|changedURI
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isFailedHttpPut
argument_list|(
name|code
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// A1 - get put URI, upload, then try reading from the same URI
annotation|@
name|Test
specifier|public
name|void
name|testCannotReadFromPutURI
parameter_list|()
throws|throws
name|Exception
block|{
comment|// enable writable URI and readable URI feature
name|ConfigurableDataRecordAccessProvider
name|provider
init|=
name|getConfigurableHttpDataRecordProvider
argument_list|()
decl_stmt|;
name|provider
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|REGULAR_WRITE_EXPIRY
argument_list|)
expr_stmt|;
name|provider
operator|.
name|setDirectDownloadURIExpirySeconds
argument_list|(
name|REGULAR_READ_EXPIRY
argument_list|)
expr_stmt|;
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
decl_stmt|;
name|BinaryUpload
name|upload
init|=
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
name|content
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|upload
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|code
init|=
name|content
operator|.
name|httpPUT
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isSuccessfulHttpPut
argument_list|(
name|code
argument_list|,
name|getConfigurableHttpDataRecordProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|uri
operator|.
name|toURL
argument_list|()
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|code
operator|=
name|conn
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|isFailedHttpPut
argument_list|(
name|code
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// A1 - add binary via JCR, then get put URI, and modify to try to upload over first binary
annotation|@
name|Test
specifier|public
name|void
name|testCannotModifyExistingBinaryViaPutURI
parameter_list|()
throws|throws
name|Exception
block|{
comment|// enable writable URI and readable URI feature
name|ConfigurableDataRecordAccessProvider
name|provider
init|=
name|getConfigurableHttpDataRecordProvider
argument_list|()
decl_stmt|;
name|provider
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|REGULAR_WRITE_EXPIRY
argument_list|)
expr_stmt|;
name|provider
operator|.
name|setDirectDownloadURIExpirySeconds
argument_list|(
name|REGULAR_READ_EXPIRY
argument_list|)
expr_stmt|;
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
decl_stmt|;
name|Binary
name|binary
init|=
name|storeBinaryAndRetrieve
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|URI
name|downloadURI
init|=
operator|(
call|(
name|BinaryDownload
call|)
argument_list|(
name|binary
argument_list|)
operator|)
operator|.
name|getURI
argument_list|(
name|BinaryDownloadOptions
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|downloadURI
argument_list|)
expr_stmt|;
name|Content
name|moreContent
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
decl_stmt|;
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
name|moreContent
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|downloadURI
operator|.
name|toURL
argument_list|()
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|moreContent
operator|.
name|getStream
argument_list|()
argument_list|,
name|conn
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|code
init|=
name|conn
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|isFailedHttpPut
argument_list|(
name|code
argument_list|)
argument_list|)
expr_stmt|;
name|content
operator|.
name|assertEqualsWith
argument_list|(
name|httpGet
argument_list|(
name|downloadURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// D1 - immutable after initial upload
annotation|@
name|Test
specifier|public
name|void
name|testUploadedBinaryIsImmutable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// enable writable URI feature
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|REGULAR_WRITE_EXPIRY
argument_list|)
expr_stmt|;
comment|// 1. upload and store first binary
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
decl_stmt|;
name|BinaryUpload
name|upload
init|=
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
name|content
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|upload
argument_list|)
expr_stmt|;
name|int
name|code
init|=
name|content
operator|.
name|httpPUT
argument_list|(
name|upload
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isSuccessfulHttpPut
argument_list|(
name|code
argument_list|,
name|getConfigurableHttpDataRecordProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Binary
name|uploadedBinary
init|=
name|uploadProvider
operator|.
name|completeBinaryUpload
argument_list|(
name|upload
operator|.
name|getUploadToken
argument_list|()
argument_list|)
decl_stmt|;
name|storeBinary
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|,
name|uploadedBinary
argument_list|)
expr_stmt|;
name|Binary
name|binary1
init|=
name|getBinary
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|)
decl_stmt|;
comment|// 2. upload different binary content, but store at the same JCR location
name|Content
name|moreContent
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|21
argument_list|)
decl_stmt|;
name|upload
operator|=
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
name|moreContent
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|upload
argument_list|)
expr_stmt|;
name|code
operator|=
name|moreContent
operator|.
name|httpPUT
argument_list|(
name|upload
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isSuccessfulHttpPut
argument_list|(
name|code
argument_list|,
name|getConfigurableHttpDataRecordProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|uploadedBinary
operator|=
name|uploadProvider
operator|.
name|completeBinaryUpload
argument_list|(
name|upload
operator|.
name|getUploadToken
argument_list|()
argument_list|)
expr_stmt|;
name|storeBinary
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|,
name|uploadedBinary
argument_list|)
expr_stmt|;
name|Binary
name|binary2
init|=
name|getBinary
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|)
decl_stmt|;
comment|// 3. verify they have different references
name|assertTrue
argument_list|(
name|binary1
operator|instanceof
name|ReferenceBinary
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|binary2
operator|instanceof
name|ReferenceBinary
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
operator|(
operator|(
name|ReferenceBinary
operator|)
name|binary1
operator|)
operator|.
name|getReference
argument_list|()
argument_list|,
operator|(
operator|(
name|ReferenceBinary
operator|)
name|binary2
operator|)
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// D2 - unique identifiers
annotation|@
name|Test
specifier|public
name|void
name|testUploadPathsAreUnique
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Every upload destination should be unique with no regard to file content
comment|// The content is not read by the Oak code so no deduplication can be performed
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|REGULAR_WRITE_EXPIRY
argument_list|)
expr_stmt|;
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
decl_stmt|;
name|BinaryUpload
name|upload1
init|=
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
name|content
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|upload1
argument_list|)
expr_stmt|;
name|BinaryUpload
name|upload2
init|=
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
name|content
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|upload2
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|upload1
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|upload2
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// D3 - do not delete directly => copy nt:file node, delete one, ensure binary still there
annotation|@
name|Test
specifier|public
name|void
name|testBinaryNotDeletedWithNode
parameter_list|()
throws|throws
name|Exception
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|REGULAR_WRITE_EXPIRY
argument_list|)
expr_stmt|;
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
decl_stmt|;
name|BinaryUpload
name|upload
init|=
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
name|content
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|code
init|=
name|content
operator|.
name|httpPUT
argument_list|(
name|upload
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isSuccessfulHttpPut
argument_list|(
name|code
argument_list|,
name|getConfigurableHttpDataRecordProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Binary
name|binary
init|=
name|uploadProvider
operator|.
name|completeBinaryUpload
argument_list|(
name|upload
operator|.
name|getUploadToken
argument_list|()
argument_list|)
decl_stmt|;
name|storeBinary
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
operator|+
literal|"2"
argument_list|,
name|binary
argument_list|)
expr_stmt|;
name|storeBinary
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|,
name|binary
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|getNode
argument_list|(
name|FILE_PATH
operator|+
literal|"2"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|Binary
name|savedBinary
init|=
name|getBinary
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|savedBinary
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|binary
operator|instanceof
name|ReferenceBinary
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|savedBinary
operator|instanceof
name|ReferenceBinary
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|ReferenceBinary
operator|)
name|binary
operator|)
operator|.
name|getReference
argument_list|()
argument_list|,
operator|(
operator|(
name|ReferenceBinary
operator|)
name|savedBinary
operator|)
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// D5 - blob ref not persisted in NodeStore until binary uploaded and immutable
comment|// NOTE: not test needed for this, as the API guarantees the Binary is only returned after
comment|//       the blob was persisted in completeBinaryUpload() and client code is responsible
comment|//       for writing it to the JCR
comment|// more tests
annotation|@
name|Test
specifier|public
name|void
name|testInitiateHttpUploadWithZeroSizeFails
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|REGULAR_WRITE_EXPIRY
argument_list|)
expr_stmt|;
try|try
block|{
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{ }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitiateHttpUploadWithZeroURIsFails
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|REGULAR_WRITE_EXPIRY
argument_list|)
expr_stmt|;
try|try
block|{
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
literal|1024
operator|*
literal|20
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{ }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitiateHttpUploadWithUnsupportedNegativeNumberURIsFails
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|REGULAR_WRITE_EXPIRY
argument_list|)
expr_stmt|;
try|try
block|{
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
literal|1024
operator|*
literal|20
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{ }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitiateHttpUploadWithUnlimitedURIs
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|REGULAR_WRITE_EXPIRY
argument_list|)
expr_stmt|;
name|BinaryUpload
name|upload
init|=
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
literal|1024
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|upload
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|size
argument_list|(
name|upload
operator|.
name|getUploadURIs
argument_list|()
argument_list|)
operator|>
literal|50
argument_list|)
expr_stmt|;
comment|// 50 is our default expected client max -
comment|// this is to make sure we will give as many as needed
comment|// if the client doesn't specify their own limit
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitiateHttpUploadLargeSinglePut
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|REGULAR_WRITE_EXPIRY
argument_list|)
expr_stmt|;
name|BinaryUpload
name|upload
init|=
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
literal|1024
operator|*
literal|1024
operator|*
literal|100
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|upload
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|upload
operator|.
name|getUploadURIs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitiateHttpUploadTooLargeForSinglePut
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|REGULAR_WRITE_EXPIRY
argument_list|)
expr_stmt|;
try|try
block|{
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|*
literal|10L
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{ }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitiateHttpUploadTooLargeForUpload
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|REGULAR_WRITE_EXPIRY
argument_list|)
expr_stmt|;
try|try
block|{
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|*
literal|10L
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{ }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitiateHttpUploadTooLargeForRequestedNumURIs
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|REGULAR_WRITE_EXPIRY
argument_list|)
expr_stmt|;
try|try
block|{
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|*
literal|10L
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{ }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompleteHttpUploadWithInvalidTokenFails
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|getConfigurableHttpDataRecordProvider
argument_list|()
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|REGULAR_WRITE_EXPIRY
argument_list|)
expr_stmt|;
name|BinaryUpload
name|upload
init|=
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
literal|256
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|upload
argument_list|)
expr_stmt|;
try|try
block|{
name|uploadProvider
operator|.
name|completeBinaryUpload
argument_list|(
name|upload
operator|.
name|getUploadToken
argument_list|()
operator|+
literal|"X"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{ }
block|}
block|}
end_class

end_unit

