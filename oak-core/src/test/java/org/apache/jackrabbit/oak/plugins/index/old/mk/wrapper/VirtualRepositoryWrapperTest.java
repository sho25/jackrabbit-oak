begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law  * or agreed to in writing, software distributed under the License is  * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the specific language  * governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|old
operator|.
name|mk
operator|.
name|wrapper
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|old
operator|.
name|mk
operator|.
name|MicroKernelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|old
operator|.
name|mk
operator|.
name|MultiMkTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_comment
comment|/**  * Test the virtual repository wrapper.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|VirtualRepositoryWrapperTest
extends|extends
name|MultiMkTestBase
block|{
specifier|private
name|String
name|head
decl_stmt|;
specifier|private
name|MicroKernel
name|mkRep1
decl_stmt|;
specifier|private
name|MicroKernel
name|mkRep2
decl_stmt|;
specifier|private
name|MicroKernel
name|mkVirtual
decl_stmt|;
specifier|public
name|VirtualRepositoryWrapperTest
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|super
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|String
name|url1
init|=
name|url
operator|+
literal|"/rep1"
decl_stmt|,
name|url2
init|=
name|url
operator|+
literal|"/rep2"
decl_stmt|;
name|mkRep1
operator|=
name|MicroKernelFactory
operator|.
name|getInstance
argument_list|(
name|url1
operator|+
literal|";clean"
argument_list|)
expr_stmt|;
name|mkRep2
operator|=
name|MicroKernelFactory
operator|.
name|getInstance
argument_list|(
name|url2
operator|+
literal|";clean"
argument_list|)
expr_stmt|;
name|String
name|init
init|=
literal|"+ \":mount\": { "
operator|+
literal|"\"r1\": { \"url\": \""
operator|+
name|url1
operator|+
literal|"\", \"paths\": \"/data/a\" }"
operator|+
literal|","
operator|+
literal|"\"r2\": { \"url\": \""
operator|+
name|url2
operator|+
literal|"\", \"paths\": \"/data/b\" }"
operator|+
literal|"}"
decl_stmt|;
name|mkRep1
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
name|init
argument_list|,
name|mkRep1
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|mkRep2
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
name|init
argument_list|,
name|mkRep2
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|mkVirtual
operator|=
name|MicroKernelFactory
operator|.
name|getInstance
argument_list|(
literal|"virtual:"
operator|+
name|url1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|InterruptedException
block|{
try|try
block|{
name|mkRep1
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"- \":mount\""
argument_list|,
name|mkRep1
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|mkRep2
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"- \":mount\""
argument_list|,
name|mkRep2
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|mkVirtual
operator|!=
literal|null
condition|)
block|{
name|MicroKernelFactory
operator|.
name|disposeInstance
argument_list|(
name|mkVirtual
argument_list|)
expr_stmt|;
block|}
name|MicroKernelFactory
operator|.
name|disposeInstance
argument_list|(
name|mkRep1
argument_list|)
expr_stmt|;
name|MicroKernelFactory
operator|.
name|disposeInstance
argument_list|(
name|mkRep2
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|commit
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSimpleKernel
argument_list|(
name|mk
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// add node
name|head
operator|=
name|mkVirtual
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"data\": {} "
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|head
operator|=
name|mkVirtual
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"data/a\": { \"data\": \"Hello\" }"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|head
operator|=
name|mkVirtual
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"data/b\": { \"data\": \"World\" }"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// get nodes
name|String
name|m1
init|=
name|mkRep1
operator|.
name|getNodes
argument_list|(
literal|"/data"
argument_list|,
name|mkRep1
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\":childNodeCount\":1,\"a\":{\"data\":\"Hello\",\":childNodeCount\":0}}"
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|String
name|m2
init|=
name|mkRep2
operator|.
name|getNodes
argument_list|(
literal|"/data"
argument_list|,
name|mkRep2
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\":childNodeCount\":1,\"b\":{\"data\":\"World\",\":childNodeCount\":0}}"
argument_list|,
name|m2
argument_list|)
expr_stmt|;
name|String
name|m
init|=
name|mkVirtual
operator|.
name|getNodes
argument_list|(
literal|"/data/a"
argument_list|,
name|mkVirtual
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"data\":\"Hello\",\":childNodeCount\":0}"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
name|mkVirtual
operator|.
name|getNodes
argument_list|(
literal|"/data/b"
argument_list|,
name|mkVirtual
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"data\":\"World\",\":childNodeCount\":0}"
argument_list|,
name|m
argument_list|)
expr_stmt|;
comment|// get nodes on unknown nodes
name|m
operator|=
name|mkVirtual
operator|.
name|getNodes
argument_list|(
literal|"/notMapped"
argument_list|,
name|mkVirtual
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
name|mkVirtual
operator|.
name|getNodes
argument_list|(
literal|"/data/a/notExist"
argument_list|,
name|mkVirtual
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
comment|// set property
name|head
operator|=
name|mkVirtual
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"^ \"data/a/data\": \"Hallo\""
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|head
operator|=
name|mkVirtual
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"^ \"data/b/data\": \"Welt\""
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|m
operator|=
name|mkVirtual
operator|.
name|getNodes
argument_list|(
literal|"/data/a"
argument_list|,
name|mkVirtual
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"data\":\"Hallo\",\":childNodeCount\":0}"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
name|mkVirtual
operator|.
name|getNodes
argument_list|(
literal|"/data/b"
argument_list|,
name|mkVirtual
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"data\":\"Welt\",\":childNodeCount\":0}"
argument_list|,
name|m
argument_list|)
expr_stmt|;
comment|// add property
name|head
operator|=
name|mkVirtual
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"data/a/lang\": \"de\""
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|m
operator|=
name|mkVirtual
operator|.
name|getNodes
argument_list|(
literal|"/data/a"
argument_list|,
name|mkVirtual
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"data\":\"Hallo\",\"lang\":\"de\",\":childNodeCount\":0}"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|head
operator|=
name|mkVirtual
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"^ \"data/a/lang\": null"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|m
operator|=
name|mkVirtual
operator|.
name|getNodes
argument_list|(
literal|"/data/a"
argument_list|,
name|mkVirtual
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"data\":\"Hallo\",\":childNodeCount\":0}"
argument_list|,
name|m
argument_list|)
expr_stmt|;
comment|// move
name|head
operator|=
name|mkVirtual
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"data/a/sub\": {}"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|head
operator|=
name|mkVirtual
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"data/a/sub\": \"data/a/sub2\""
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|m
operator|=
name|mkVirtual
operator|.
name|getNodes
argument_list|(
literal|"/data/a"
argument_list|,
name|mkVirtual
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"data\":\"Hallo\",\":childNodeCount\":1,\"sub2\":{\":childNodeCount\":0}}"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|head
operator|=
name|mkVirtual
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"- \"data/a/sub2\""
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// remove node
name|head
operator|=
name|mkVirtual
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"- \"data/b\""
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mkVirtual
operator|.
name|nodeExists
argument_list|(
literal|"/data/a"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mkVirtual
operator|.
name|nodeExists
argument_list|(
literal|"/data/b"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|binary
parameter_list|()
block|{
name|int
name|len
init|=
literal|1000
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|mkVirtual
operator|.
name|write
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|test
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|mkVirtual
operator|.
name|read
argument_list|(
name|id
argument_list|,
literal|0
argument_list|,
name|test
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|data
argument_list|,
name|test
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|len
argument_list|,
name|mkVirtual
operator|.
name|getLength
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

