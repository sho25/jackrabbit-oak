begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newLinkedHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newTreeMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|GCGeneration
operator|.
name|newGCGeneration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|binaries
operator|.
name|BinaryReferencesIndexLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentArchiveManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|binaries
operator|.
name|BinaryReferencesIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|binaries
operator|.
name|InvalidBinaryReferencesIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|index
operator|.
name|IndexEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentArchiveReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TarReader
implements|implements
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TarReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
name|TarReader
name|open
parameter_list|(
name|String
name|file
parameter_list|,
name|SegmentArchiveManager
name|archiveManager
parameter_list|)
throws|throws
name|IOException
block|{
name|TarReader
name|reader
init|=
name|openFirstFileWithValidIndex
argument_list|(
name|singletonList
argument_list|(
name|file
argument_list|)
argument_list|,
name|archiveManager
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
name|reader
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to open tar file "
operator|+
name|file
argument_list|)
throw|;
block|}
block|}
comment|/**      * Creates a {@link TarReader} instance for reading content from a tar file.      * If there exist multiple generations of the same tar file, they are all      * passed to this method. The latest generation with a valid tar index      * (which is a good indication of general validity of the file) is opened      * and the other generations are removed to clean things up. If none of the      * generations has a valid index, then something must have gone wrong and      * we'll try recover as much content as we can from the existing tar      * generations.      *      * @param files         The generations of the same TAR file.      * @param recovery      Strategy for recovering a damaged TAR file.      * @return An instance of {@link TarReader}.      */
specifier|static
name|TarReader
name|open
parameter_list|(
name|Map
argument_list|<
name|Character
argument_list|,
name|String
argument_list|>
name|files
parameter_list|,
name|TarRecovery
name|recovery
parameter_list|,
name|SegmentArchiveManager
name|archiveManager
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedMap
argument_list|<
name|Character
argument_list|,
name|String
argument_list|>
name|sorted
init|=
name|newTreeMap
argument_list|()
decl_stmt|;
name|sorted
operator|.
name|putAll
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
name|sorted
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|TarReader
name|reader
init|=
name|openFirstFileWithValidIndex
argument_list|(
name|list
argument_list|,
name|archiveManager
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
name|reader
return|;
block|}
comment|// no generation has a valid index, so recover as much as we can
name|log
operator|.
name|warn
argument_list|(
literal|"Could not find a valid tar index in {}, recovering..."
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|LinkedHashMap
argument_list|<
name|UUID
argument_list|,
name|byte
index|[]
argument_list|>
name|entries
init|=
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|sorted
operator|.
name|values
argument_list|()
control|)
block|{
name|collectFileEntries
argument_list|(
name|file
argument_list|,
name|entries
argument_list|,
literal|true
argument_list|,
name|archiveManager
argument_list|)
expr_stmt|;
block|}
comment|// regenerate the first generation based on the recovered data
name|String
name|file
init|=
name|sorted
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|generateTarFile
argument_list|(
name|entries
argument_list|,
name|file
argument_list|,
name|recovery
argument_list|,
name|archiveManager
argument_list|)
expr_stmt|;
name|reader
operator|=
name|openFirstFileWithValidIndex
argument_list|(
name|singletonList
argument_list|(
name|file
argument_list|)
argument_list|,
name|archiveManager
argument_list|)
expr_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
name|reader
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to open recovered tar file "
operator|+
name|file
argument_list|)
throw|;
block|}
block|}
specifier|static
name|TarReader
name|openRO
parameter_list|(
name|Map
argument_list|<
name|Character
argument_list|,
name|String
argument_list|>
name|files
parameter_list|,
name|TarRecovery
name|recovery
parameter_list|,
name|SegmentArchiveManager
name|archiveManager
parameter_list|)
throws|throws
name|IOException
block|{
comment|// for readonly store only try the latest generation of a given
comment|// tar file to prevent any rollback or rewrite
name|String
name|file
init|=
name|files
operator|.
name|get
argument_list|(
name|Collections
operator|.
name|max
argument_list|(
name|files
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TarReader
name|reader
init|=
name|openFirstFileWithValidIndex
argument_list|(
name|singletonList
argument_list|(
name|file
argument_list|)
argument_list|,
name|archiveManager
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
name|reader
return|;
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"Could not find a valid tar index in {}, recovering read-only"
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|// collecting the entries (without touching the original file) and
comment|// writing them into an artificial tar file '.ro.bak'
name|LinkedHashMap
argument_list|<
name|UUID
argument_list|,
name|byte
index|[]
argument_list|>
name|entries
init|=
name|newLinkedHashMap
argument_list|()
decl_stmt|;
name|collectFileEntries
argument_list|(
name|file
argument_list|,
name|entries
argument_list|,
literal|false
argument_list|,
name|archiveManager
argument_list|)
expr_stmt|;
name|file
operator|=
name|findAvailGen
argument_list|(
name|file
argument_list|,
literal|".ro.bak"
argument_list|,
name|archiveManager
argument_list|)
expr_stmt|;
name|generateTarFile
argument_list|(
name|entries
argument_list|,
name|file
argument_list|,
name|recovery
argument_list|,
name|archiveManager
argument_list|)
expr_stmt|;
name|reader
operator|=
name|openFirstFileWithValidIndex
argument_list|(
name|singletonList
argument_list|(
name|file
argument_list|)
argument_list|,
name|archiveManager
argument_list|)
expr_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
name|reader
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to open tar file "
operator|+
name|file
argument_list|)
throw|;
block|}
comment|/**      * Collects all entries from the given file and optionally backs-up the      * file, by renaming it to a ".bak" extension      *      * @param file    The TAR file.      * @param entries The map where the recovered entries will be collected      *                into.      * @param backup  If {@code true}, performs a backup of the TAR file.      */
specifier|private
specifier|static
name|void
name|collectFileEntries
parameter_list|(
name|String
name|file
parameter_list|,
name|LinkedHashMap
argument_list|<
name|UUID
argument_list|,
name|byte
index|[]
argument_list|>
name|entries
parameter_list|,
name|boolean
name|backup
parameter_list|,
name|SegmentArchiveManager
name|archiveManager
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Recovering segments from tar file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
try|try
block|{
name|archiveManager
operator|.
name|recoverEntries
argument_list|(
name|file
argument_list|,
name|entries
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not read tar file {}, skipping..."
argument_list|,
name|file
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|backup
condition|)
block|{
name|backupSafely
argument_list|(
name|archiveManager
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Regenerates a tar file from a list of entries.      *      * @param entries   Map of entries to recover. The entries will be recovered      *                  in the iteration order of this {@link LinkedHashMap}.      * @param file      The output file that will contain the recovered      *                  entries.      * @param recovery  The recovery strategy to execute.      */
specifier|private
specifier|static
name|void
name|generateTarFile
parameter_list|(
name|LinkedHashMap
argument_list|<
name|UUID
argument_list|,
name|byte
index|[]
argument_list|>
name|entries
parameter_list|,
name|String
name|file
parameter_list|,
name|TarRecovery
name|recovery
parameter_list|,
name|SegmentArchiveManager
name|archiveManager
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Regenerating tar file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
try|try
init|(
name|TarWriter
name|writer
init|=
operator|new
name|TarWriter
argument_list|(
name|archiveManager
argument_list|,
name|file
argument_list|)
init|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|UUID
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|entries
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|recovery
operator|.
name|recoverEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
operator|new
name|EntryRecovery
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|recoverEntry
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|size
parameter_list|,
name|GCGeneration
name|generation
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|writeEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|,
name|data
argument_list|,
name|offset
argument_list|,
name|size
argument_list|,
name|generation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|recoverGraphEdge
parameter_list|(
name|UUID
name|from
parameter_list|,
name|UUID
name|to
parameter_list|)
block|{
name|writer
operator|.
name|addGraphEdge
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|recoverBinaryReference
parameter_list|(
name|GCGeneration
name|generation
parameter_list|,
name|UUID
name|segmentId
parameter_list|,
name|String
name|reference
parameter_list|)
block|{
name|writer
operator|.
name|addBinaryReference
argument_list|(
name|generation
argument_list|,
name|segmentId
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to recover entry %s for file %s"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|file
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**      * Backup this tar file for manual inspection. Something went wrong earlier      * so we want to prevent the data from being accidentally removed or      * overwritten.      *      * @param file File to backup.      */
specifier|private
specifier|static
name|void
name|backupSafely
parameter_list|(
name|SegmentArchiveManager
name|archiveManager
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|backup
init|=
name|findAvailGen
argument_list|(
name|file
argument_list|,
literal|".bak"
argument_list|,
name|archiveManager
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Backing up {} to {}"
argument_list|,
name|file
argument_list|,
name|backup
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|archiveManager
operator|.
name|renameTo
argument_list|(
name|file
argument_list|,
name|backup
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Renaming failed, so using copy to backup {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|archiveManager
operator|.
name|copyFile
argument_list|(
name|file
argument_list|,
name|backup
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|archiveManager
operator|.
name|delete
argument_list|(
name|file
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not remove broken tar file "
operator|+
name|file
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Fine next available generation number so that a generated file doesn't      * overwrite another existing file.      *      * @param name The file to backup.      * @param ext  The extension of the backed up file.      */
specifier|private
specifier|static
name|String
name|findAvailGen
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|ext
parameter_list|,
name|SegmentArchiveManager
name|archiveManager
parameter_list|)
block|{
name|String
name|backup
init|=
name|name
operator|+
name|ext
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|archiveManager
operator|.
name|exists
argument_list|(
name|backup
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|backup
operator|=
name|name
operator|+
literal|"."
operator|+
name|i
operator|+
name|ext
expr_stmt|;
block|}
return|return
name|backup
return|;
block|}
specifier|private
specifier|static
name|TarReader
name|openFirstFileWithValidIndex
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|archives
parameter_list|,
name|SegmentArchiveManager
name|archiveManager
parameter_list|)
block|{
for|for
control|(
name|String
name|name
range|:
name|archives
control|)
block|{
try|try
block|{
name|SegmentArchiveReader
name|reader
init|=
name|archiveManager
operator|.
name|open
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|other
range|:
name|archives
control|)
block|{
if|if
condition|(
name|other
operator|!=
name|name
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Removing unused tar file {}"
argument_list|,
name|other
argument_list|)
expr_stmt|;
name|archiveManager
operator|.
name|delete
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|TarReader
argument_list|(
name|archiveManager
argument_list|,
name|reader
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not read tar file {}, skipping..."
argument_list|,
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|final
name|SegmentArchiveManager
name|archiveManager
decl_stmt|;
specifier|private
specifier|final
name|SegmentArchiveReader
name|archive
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|UUID
argument_list|>
name|segmentUUIDs
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|hasGraph
decl_stmt|;
specifier|private
name|TarReader
parameter_list|(
name|SegmentArchiveManager
name|archiveManager
parameter_list|,
name|SegmentArchiveReader
name|archive
parameter_list|)
block|{
name|this
operator|.
name|archiveManager
operator|=
name|archiveManager
expr_stmt|;
name|this
operator|.
name|archive
operator|=
name|archive
expr_stmt|;
name|this
operator|.
name|segmentUUIDs
operator|=
name|archive
operator|.
name|listSegments
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
operator|new
name|UUID
argument_list|(
name|e
operator|.
name|getMsb
argument_list|()
argument_list|,
name|e
operator|.
name|getLsb
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|size
parameter_list|()
block|{
return|return
name|archive
operator|.
name|length
argument_list|()
return|;
block|}
comment|/**      * Reads and returns the identifier of every segment included in the index      * of this TAR file.      *      * @return An instance of {@link Set}.      */
name|Set
argument_list|<
name|UUID
argument_list|>
name|getUUIDs
parameter_list|()
block|{
return|return
name|segmentUUIDs
return|;
block|}
comment|/**      * Check if the requested entry exists in this TAR file.      *      * @param msb The most significant bits of the entry identifier.      * @param lsb The least significant bits of the entry identifier.      * @return {@code true} if the entry exists in this TAR file, {@code false}      * otherwise.      */
name|boolean
name|containsEntry
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
block|{
return|return
name|archive
operator|.
name|containsSegment
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
return|;
block|}
comment|/**      * If the given segment is in this file, get the byte buffer that allows      * reading it.      *<p>      * Whether or not this will read from the file depends on whether memory      * mapped files are used or not.      *       * @param msb the most significant bits of the segment id      * @param lsb the least significant bits of the segment id      * @return the byte buffer, or null if not in this file.      */
name|ByteBuffer
name|readEntry
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|archive
operator|.
name|readSegment
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
return|;
block|}
comment|/**      * Read the entries in this TAR file.      *      * @return An array of {@link IndexEntry}.      */
annotation|@
name|NotNull
name|SegmentArchiveEntry
index|[]
name|getEntries
parameter_list|()
block|{
name|List
argument_list|<
name|SegmentArchiveEntry
argument_list|>
name|entryList
init|=
name|archive
operator|.
name|listSegments
argument_list|()
decl_stmt|;
return|return
name|entryList
operator|.
name|toArray
argument_list|(
operator|new
name|SegmentArchiveEntry
index|[
name|entryList
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Read the references of an entry in this TAR file.      *      * @param id    The identifier of the entry.      * @param graph The content of the graph of this TAR file.      * @return The references of the provided TAR entry.      */
annotation|@
name|NotNull
specifier|private
specifier|static
name|List
argument_list|<
name|UUID
argument_list|>
name|getReferences
parameter_list|(
name|UUID
name|id
parameter_list|,
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|graph
parameter_list|)
block|{
name|List
argument_list|<
name|UUID
argument_list|>
name|references
init|=
name|graph
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|references
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|references
return|;
block|}
comment|/**      * Collect the references of those BLOBs that are reachable from the entries      * in this TAR file.      *<p>      * The user-provided {@link Predicate} determines if entries belonging to a      * specific generation should be inspected for binary references of not.      * Given a generation number as input, if the predicate returns {@code      * true}, entries from that generation will be skipped. If the predicate      * returns {@code false}, entries from that generation will be inspected for      * references.      *<p>      * The provided {@link Consumer} is callback object that will be invoked for      * every reference found in the inspected entries.      *      * @param collector      An instance of {@link Consumer}.      * @param skipGeneration An instance of {@link Predicate}.      */
name|void
name|collectBlobReferences
parameter_list|(
annotation|@
name|NotNull
name|Consumer
argument_list|<
name|String
argument_list|>
name|collector
parameter_list|,
name|Predicate
argument_list|<
name|GCGeneration
argument_list|>
name|skipGeneration
parameter_list|)
block|{
name|BinaryReferencesIndex
name|references
init|=
name|getBinaryReferences
argument_list|()
decl_stmt|;
if|if
condition|(
name|references
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|references
operator|.
name|forEach
argument_list|(
parameter_list|(
name|generation
parameter_list|,
name|full
parameter_list|,
name|compacted
parameter_list|,
name|segment
parameter_list|,
name|reference
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|skipGeneration
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
name|generation
argument_list|,
name|full
argument_list|,
name|compacted
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
name|collector
operator|.
name|accept
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Mark entries that can be reclaimed.      *<p>      * A data segment is reclaimable iff its generation is in the {@code      * reclaimGeneration} predicate. A bulk segment is reclaimable if it is not      * in {@code bulkRefs} or if it is transitively reachable through a non      * reclaimable data segment.      *<p>      * The algorithm implemented by this method uses a couple of supporting data      * structures.      *<p>      * The first of the supporting data structures is the set of bulk segments      * to keep. When this method is invoked, this set initially contains the set      * of bulk segments that are currently in use. The algorithm removes a      * reference from this set if the corresponding bulk segment is not      * referenced (either directly or transitively) from a marked data segment.      * The algorithm adds a reference to this set if a marked data segment is      * references the corresponding bulk segment. When this method returns, the      * references in this set represent bulk segments that are currently in use      * and should not be removed.      *<p>      * The second of the supporting data structures is the set of segments to      * reclaim. This set contains references to bulk and data segments. A      * reference to a bulk segment is added if the bulk segment is not      * referenced (either directly or transitively) by marked data segment. A      * reference to a data segment is added if the user-provided predicate      * returns {@code true} for that segment. When this method returns, this set      * contains segments that are not marked and can be removed.      *      * @param references  The set of bulk segments to keep.      * @param reclaimable The set of segments to remove.      * @param context     An instance of {@link CleanupContext}.      */
name|void
name|mark
parameter_list|(
name|Set
argument_list|<
name|UUID
argument_list|>
name|references
parameter_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
name|reclaimable
parameter_list|,
name|CleanupContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|graph
init|=
name|getGraph
argument_list|()
decl_stmt|;
name|SegmentArchiveEntry
index|[]
name|entries
init|=
name|getEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|entries
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
comment|// A bulk segments is *always* written before any data segment referencing it.
comment|// Backward iteration ensures we see all references to bulk segments before
comment|// we see the bulk segment itself. Therefore we can remove a bulk reference
comment|// from the bulkRefs set once we encounter it, which save us some memory and
comment|// CPU on subsequent look-ups.
name|SegmentArchiveEntry
name|entry
init|=
name|entries
index|[
name|i
index|]
decl_stmt|;
name|UUID
name|id
init|=
operator|new
name|UUID
argument_list|(
name|entry
operator|.
name|getMsb
argument_list|()
argument_list|,
name|entry
operator|.
name|getLsb
argument_list|()
argument_list|)
decl_stmt|;
name|GCGeneration
name|generation
init|=
name|GCGeneration
operator|.
name|newGCGeneration
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|shouldReclaim
argument_list|(
name|id
argument_list|,
name|generation
argument_list|,
name|references
operator|.
name|remove
argument_list|(
name|id
argument_list|)
argument_list|)
condition|)
block|{
name|reclaimable
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|UUID
name|refId
range|:
name|getReferences
argument_list|(
name|id
argument_list|,
name|graph
argument_list|)
control|)
block|{
if|if
condition|(
name|context
operator|.
name|shouldFollow
argument_list|(
name|id
argument_list|,
name|refId
argument_list|)
condition|)
block|{
name|references
operator|.
name|add
argument_list|(
name|refId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Try to remove every segment contained in a user-provided set.      *<p>      * This method might refuse to remove the segments under the following      * circumstances.      *<p>      * First, if this TAR files does not contain any of the segments that are      * supposed to be removed. In this case, the method returns {@code null}.      *<p>      * Second, if this method contains some of the segments that are supposed to      * be removed, but the reclaimable space is be less than 1/4 of the current      * size of the TAR file. In this case, this method returns this {@link      * TarReader}.      *<p>      * Third, if this TAR file is in the highest generation possible ('z') and      * thus a new generation for this TAR file can't be created. In this case,      * the method returns this {@link TarReader}.      *<p>      * Fourth, if a new TAR file has been created but it is unreadable for      * unknown reasons. In this case, this method returns this {@link      * TarReader}.      *<p>      * If none of the above conditions apply, this method returns a new {@link      * TarReader} instance tha points to a TAR file that doesn't contain the      * removed segments. The returned {@link TarReader} will belong to the next      * generation of this {@link TarReader}. In this case, the {@code reclaimed}      * set will be updated to contain the identifiers of the segments that were      * removed from this TAR file.      *      * @param reclaim   Set of segment sto reclaim.      * @param reclaimed Set of reclaimed segments. It will be update if this TAR      *                  file is rewritten.      * @return Either this {@link TarReader}, or a new instance of {@link      * TarReader}, or {@code null}.      */
name|TarReader
name|sweep
parameter_list|(
annotation|@
name|NotNull
name|Set
argument_list|<
name|UUID
argument_list|>
name|reclaim
parameter_list|,
annotation|@
name|NotNull
name|Set
argument_list|<
name|UUID
argument_list|>
name|reclaimed
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|archive
operator|.
name|getName
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Cleaning up {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|UUID
argument_list|>
name|cleaned
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|int
name|afterSize
init|=
literal|0
decl_stmt|;
name|int
name|beforeSize
init|=
literal|0
decl_stmt|;
name|int
name|afterCount
init|=
literal|0
decl_stmt|;
name|SegmentArchiveEntry
index|[]
name|entries
init|=
name|getEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SegmentArchiveEntry
name|entry
init|=
name|entries
index|[
name|i
index|]
decl_stmt|;
name|beforeSize
operator|+=
name|archive
operator|.
name|getEntrySize
argument_list|(
name|entry
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|UUID
name|id
init|=
operator|new
name|UUID
argument_list|(
name|entry
operator|.
name|getMsb
argument_list|()
argument_list|,
name|entry
operator|.
name|getLsb
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reclaim
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|cleaned
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|entries
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|afterSize
operator|+=
name|archive
operator|.
name|getEntrySize
argument_list|(
name|entry
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|afterCount
operator|+=
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|afterCount
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"None of the entries of {} are referenceable."
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|afterSize
operator|>=
name|beforeSize
operator|*
literal|3
operator|/
literal|4
operator|&&
name|hasGraph
argument_list|()
condition|)
block|{
comment|// the space savings are not worth it at less than 25%,
comment|// unless this tar file lacks a pre-compiled segment graph
comment|// in which case we'll always generate a new tar file with
comment|// the graph to speed up future garbage collection runs.
name|log
operator|.
name|debug
argument_list|(
literal|"Not enough space savings. ({}/{}). Skipping clean up of {}"
argument_list|,
name|archive
operator|.
name|length
argument_list|()
operator|-
name|afterSize
argument_list|,
name|archive
operator|.
name|length
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
operator|!
name|hasGraph
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Recovering {}, which is missing its graph."
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|int
name|pos
init|=
name|name
operator|.
name|length
argument_list|()
operator|-
literal|"a.tar"
operator|.
name|length
argument_list|()
decl_stmt|;
name|char
name|generation
init|=
name|name
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|generation
operator|==
literal|'z'
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No garbage collection after reaching generation z: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|String
name|newFile
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
operator|+
call|(
name|char
call|)
argument_list|(
name|generation
operator|+
literal|1
argument_list|)
operator|+
literal|".tar"
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Writing new generation {}"
argument_list|,
name|newFile
argument_list|)
expr_stmt|;
name|TarWriter
name|writer
init|=
operator|new
name|TarWriter
argument_list|(
name|archiveManager
argument_list|,
name|newFile
argument_list|)
decl_stmt|;
for|for
control|(
name|SegmentArchiveEntry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|long
name|msb
init|=
name|entry
operator|.
name|getMsb
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|entry
operator|.
name|getLsb
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|entry
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|GCGeneration
name|gen
init|=
name|GCGeneration
operator|.
name|newGCGeneration
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|archive
operator|.
name|readSegment
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
operator|.
name|get
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|gen
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Reconstruct the graph index for non-cleaned segments.
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|graph
init|=
name|getGraph
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|e
range|:
name|graph
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|cleaned
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Set
argument_list|<
name|UUID
argument_list|>
name|vertices
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|UUID
name|vertex
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|cleaned
operator|.
name|contains
argument_list|(
name|vertex
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|vertices
operator|.
name|add
argument_list|(
name|vertex
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|UUID
name|vertex
range|:
name|vertices
control|)
block|{
name|writer
operator|.
name|addGraphEdge
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|vertex
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Reconstruct the binary reference index for non-cleaned segments.
name|BinaryReferencesIndex
name|references
init|=
name|getBinaryReferences
argument_list|()
decl_stmt|;
if|if
condition|(
name|references
operator|!=
literal|null
condition|)
block|{
name|references
operator|.
name|forEach
argument_list|(
parameter_list|(
name|gen
parameter_list|,
name|full
parameter_list|,
name|compacted
parameter_list|,
name|id
parameter_list|,
name|reference
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|cleaned
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return;
block|}
name|writer
operator|.
name|addBinaryReference
argument_list|(
name|newGCGeneration
argument_list|(
name|gen
argument_list|,
name|full
argument_list|,
name|compacted
argument_list|)
argument_list|,
name|id
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|TarReader
name|reader
init|=
name|openFirstFileWithValidIndex
argument_list|(
name|singletonList
argument_list|(
name|newFile
argument_list|)
argument_list|,
name|archiveManager
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reclaimed
operator|.
name|addAll
argument_list|(
name|cleaned
argument_list|)
expr_stmt|;
return|return
name|reader
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to open cleaned up tar file {}"
argument_list|,
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|archive
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Loads and parses the optional pre-compiled graph entry from the given tar      * file.      *      * @return The parsed graph, or {@code null} if one was not found.      */
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|getGraph
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteBuffer
name|buffer
init|=
name|archive
operator|.
name|getGraph
argument_list|()
decl_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|GraphLoader
operator|.
name|parseGraph
argument_list|(
name|buffer
argument_list|)
return|;
block|}
block|}
specifier|private
name|boolean
name|hasGraph
parameter_list|()
block|{
return|return
name|archive
operator|.
name|hasGraph
argument_list|()
return|;
block|}
comment|/**      * Read the index of binary references from this TAR file.      *<p>      * The index of binary references is a two-level map. The key to the first      * level of the map is the generation. The key to the second level of the      * map is the identifier of a data segment in this TAR file. The value of      * the second-level map is the set of binary references contained in the      * segment.      *      * @return An instance of {@link Map}.      */
name|BinaryReferencesIndex
name|getBinaryReferences
parameter_list|()
block|{
name|BinaryReferencesIndex
name|index
init|=
literal|null
decl_stmt|;
try|try
block|{
name|index
operator|=
name|BinaryReferencesIndexLoader
operator|.
name|parseBinaryReferencesIndex
argument_list|(
name|archive
operator|.
name|getBinaryReferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidBinaryReferencesIndexException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception while loading binary reference"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
comment|/**      * Return the path of this TAR file.      *      * @return An instance of {@link File}.      */
name|String
name|getFileName
parameter_list|()
block|{
return|return
name|archive
operator|.
name|getName
argument_list|()
return|;
block|}
comment|//------------------------------------------------------------< Object>--
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getFileName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

