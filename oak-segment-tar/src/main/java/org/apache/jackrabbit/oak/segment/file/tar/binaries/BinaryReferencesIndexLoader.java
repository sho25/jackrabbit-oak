begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|binaries
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|util
operator|.
name|ReaderAtEnd
import|;
end_import

begin_class
specifier|public
class|class
name|BinaryReferencesIndexLoader
block|{
specifier|private
name|BinaryReferencesIndexLoader
parameter_list|()
block|{
comment|// Prevent external instantiation
block|}
comment|/**      * Load and validate a binary references index. The binary references index      * is read backward. The medium the index is read from is represented by an      * instance of {@link ReaderAtEnd}. The {@link ReaderAtEnd} should behave as      * it is positioned at the end of the binary references index.      *      * @param reader An instance of {@link ReaderAtEnd}.      * @return The binary references index.      * @throws IOException                           if an error occurs while      *                                               reading the index.      * @throws InvalidBinaryReferencesIndexException if the index is invalid or      *                                               malformed.      */
specifier|public
specifier|static
name|Buffer
name|loadBinaryReferencesIndex
parameter_list|(
name|ReaderAtEnd
name|reader
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidBinaryReferencesIndexException
block|{
switch|switch
condition|(
name|readMagic
argument_list|(
name|reader
argument_list|)
condition|)
block|{
case|case
name|BinaryReferencesIndexLoaderV1
operator|.
name|MAGIC
case|:
return|return
name|BinaryReferencesIndexLoaderV1
operator|.
name|loadBinaryReferencesIndex
argument_list|(
name|reader
argument_list|)
return|;
case|case
name|BinaryReferencesIndexLoaderV2
operator|.
name|MAGIC
case|:
return|return
name|BinaryReferencesIndexLoaderV2
operator|.
name|loadBinaryReferencesIndex
argument_list|(
name|reader
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|InvalidBinaryReferencesIndexException
argument_list|(
literal|"Unrecognized magic number"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|BinaryReferencesIndex
name|parseBinaryReferencesIndex
parameter_list|(
name|Buffer
name|buffer
parameter_list|)
throws|throws
name|InvalidBinaryReferencesIndexException
block|{
switch|switch
condition|(
name|readMagic
argument_list|(
name|buffer
argument_list|)
condition|)
block|{
case|case
name|BinaryReferencesIndexLoaderV1
operator|.
name|MAGIC
case|:
return|return
name|BinaryReferencesIndexLoaderV1
operator|.
name|parseBinaryReferencesIndex
argument_list|(
name|buffer
argument_list|)
return|;
case|case
name|BinaryReferencesIndexLoaderV2
operator|.
name|MAGIC
case|:
return|return
name|BinaryReferencesIndexLoaderV2
operator|.
name|parseBinaryReferencesIndex
argument_list|(
name|buffer
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|InvalidBinaryReferencesIndexException
argument_list|(
literal|"Unrecognized magic number"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|int
name|readMagic
parameter_list|(
name|ReaderAtEnd
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|reader
operator|.
name|readAtEnd
argument_list|(
name|Integer
operator|.
name|BYTES
argument_list|,
name|Integer
operator|.
name|BYTES
argument_list|)
operator|.
name|getInt
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|int
name|readMagic
parameter_list|(
name|Buffer
name|buffer
parameter_list|)
block|{
name|buffer
operator|.
name|position
argument_list|(
name|buffer
operator|.
name|limit
argument_list|()
operator|-
name|Integer
operator|.
name|BYTES
argument_list|)
expr_stmt|;
name|int
name|magic
init|=
name|buffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|rewind
argument_list|()
expr_stmt|;
return|return
name|magic
return|;
block|}
block|}
end_class

end_unit

