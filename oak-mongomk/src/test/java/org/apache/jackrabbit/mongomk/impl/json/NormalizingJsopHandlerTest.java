begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|json
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  *<code>NormalizingJsopHandlerTest</code>...  */
end_comment

begin_class
specifier|public
class|class
name|NormalizingJsopHandlerTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|nestedAdd
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|jsop
init|=
literal|"+\"foo\":{\"bar\":{\"prop\":\"value\"}}"
decl_stmt|;
name|NormalizingJsopHandler
name|handler
init|=
operator|new
name|NormalizingJsopHandler
argument_list|()
decl_stmt|;
operator|new
name|JsopParser
argument_list|(
literal|"/"
argument_list|,
name|jsop
argument_list|,
name|handler
argument_list|)
operator|.
name|parse
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|jsop
argument_list|,
name|handler
operator|.
name|getDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nestedAddRelativePath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|jsop
init|=
literal|"+\"foo\":{\"bar/baz\":{\"prop\":\"value\"}}"
decl_stmt|;
name|NormalizingJsopHandler
name|handler
init|=
operator|new
name|NormalizingJsopHandler
argument_list|()
decl_stmt|;
operator|new
name|JsopParser
argument_list|(
literal|"/"
argument_list|,
name|jsop
argument_list|,
name|handler
argument_list|)
operator|.
name|parse
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|jsop
argument_list|,
name|handler
operator|.
name|getDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nestedAddNormalized
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|jsop
init|=
literal|"+\"foo\":{\"bar\":{\"prop\":\"value\"}}"
decl_stmt|;
name|NormalizingJsopHandler
name|handler
init|=
operator|new
name|NormalizingJsopHandler
argument_list|()
decl_stmt|;
operator|new
name|JsopParser
argument_list|(
literal|"/prefix"
argument_list|,
name|jsop
argument_list|,
name|handler
argument_list|)
operator|.
name|parse
argument_list|()
expr_stmt|;
name|String
name|expected
init|=
literal|"+\"prefix/foo\":{\"bar\":{\"prop\":\"value\"}}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|handler
operator|.
name|getDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nestedAddMultiProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|jsop
init|=
literal|"+\"foo\":{\"bar\":{\"p1\":\"value\",\"p2\":\"value\"},\"p3\":\"value\"}"
decl_stmt|;
name|NormalizingJsopHandler
name|handler
init|=
operator|new
name|NormalizingJsopHandler
argument_list|()
decl_stmt|;
operator|new
name|JsopParser
argument_list|(
literal|"/"
argument_list|,
name|jsop
argument_list|,
name|handler
argument_list|)
operator|.
name|parse
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|jsop
argument_list|,
name|handler
operator|.
name|getDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nestedAddMultiNode
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|jsop
init|=
literal|"+\"foo\":{\"bar\":{\"p1\":\"value\"},\"p2\":\"value\",\"baz\":{},\"qux\":{\"p3\":\"value\"}}"
decl_stmt|;
name|NormalizingJsopHandler
name|handler
init|=
operator|new
name|NormalizingJsopHandler
argument_list|()
decl_stmt|;
operator|new
name|JsopParser
argument_list|(
literal|"/"
argument_list|,
name|jsop
argument_list|,
name|handler
argument_list|)
operator|.
name|parse
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|jsop
argument_list|,
name|handler
operator|.
name|getDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nestedAddWithMove
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|jsop
init|=
literal|"+\"foo\":{\"bar\":{\"prop\":\"value\"}}>\"foo\":\"baz\""
decl_stmt|;
name|NormalizingJsopHandler
name|handler
init|=
operator|new
name|NormalizingJsopHandler
argument_list|()
decl_stmt|;
operator|new
name|JsopParser
argument_list|(
literal|"/"
argument_list|,
name|jsop
argument_list|,
name|handler
argument_list|)
operator|.
name|parse
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|jsop
argument_list|,
name|handler
operator|.
name|getDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nestedAddWithCopy
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|jsop
init|=
literal|"+\"foo\":{\"bar\":{\"prop\":\"value\"}}*\"foo\":\"baz\""
decl_stmt|;
name|NormalizingJsopHandler
name|handler
init|=
operator|new
name|NormalizingJsopHandler
argument_list|()
decl_stmt|;
operator|new
name|JsopParser
argument_list|(
literal|"/"
argument_list|,
name|jsop
argument_list|,
name|handler
argument_list|)
operator|.
name|parse
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|jsop
argument_list|,
name|handler
operator|.
name|getDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nestedAddWithRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|jsop
init|=
literal|"+\"foo\":{\"bar\":{\"prop\":\"value\"}}-\"foo\""
decl_stmt|;
name|NormalizingJsopHandler
name|handler
init|=
operator|new
name|NormalizingJsopHandler
argument_list|()
decl_stmt|;
operator|new
name|JsopParser
argument_list|(
literal|"/"
argument_list|,
name|jsop
argument_list|,
name|handler
argument_list|)
operator|.
name|parse
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|jsop
argument_list|,
name|handler
operator|.
name|getDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

