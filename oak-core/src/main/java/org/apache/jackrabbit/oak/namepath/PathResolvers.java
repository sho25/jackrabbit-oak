begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PathResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|TreeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_comment
comment|/**  * Static factories for {@link PathResolver} implementations.  */
end_comment

begin_class
specifier|public
class|class
name|PathResolvers
block|{
specifier|private
name|PathResolvers
parameter_list|()
block|{}
comment|/**      * Create a path resolver, which interprets name, "." and ".." elements      * in a path as the child of the given name of the current element, the current      * element and the parent of the current element, respectively.      * @param path  path to resolve      * @return  a path resolver      */
specifier|public
specifier|static
name|PathResolver
name|dotResolver
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|new
name|DotResolver
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|/**      * Create a path resolver, which interprets each element in a path as the child      * of that name of the current element.      * @param path  path to resolve      * @return  a path resolver      */
specifier|public
specifier|static
name|PathResolver
name|identity
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|new
name|IdResolver
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|//------------------------------------------------------------< DotResolver>---
comment|/**      * A path resolver, which interprets name, "." and ".." elements      * in a path as the child of the given name of the current element, the current      * element and the parent of the current element, respectively.      */
specifier|private
specifier|static
class|class
name|DotResolver
implements|implements
name|PathResolver
block|{
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|public
name|DotResolver
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Function
argument_list|<
name|TreeLocation
argument_list|,
name|TreeLocation
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|transform
argument_list|(
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|TreeLocation
argument_list|,
name|TreeLocation
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Function
argument_list|<
name|TreeLocation
argument_list|,
name|TreeLocation
argument_list|>
name|apply
parameter_list|(
specifier|final
name|String
name|element
parameter_list|)
block|{
if|if
condition|(
name|PathUtils
operator|.
name|denotesCurrent
argument_list|(
name|element
argument_list|)
condition|)
block|{
return|return
operator|new
name|Function
argument_list|<
name|TreeLocation
argument_list|,
name|TreeLocation
argument_list|>
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|TreeLocation
name|apply
parameter_list|(
name|TreeLocation
name|location
parameter_list|)
block|{
return|return
name|location
return|;
block|}
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|PathUtils
operator|.
name|denotesParent
argument_list|(
name|element
argument_list|)
condition|)
block|{
return|return
operator|new
name|Function
argument_list|<
name|TreeLocation
argument_list|,
name|TreeLocation
argument_list|>
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|TreeLocation
name|apply
parameter_list|(
name|TreeLocation
name|location
parameter_list|)
block|{
return|return
name|location
operator|.
name|getParent
argument_list|()
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
operator|new
name|Function
argument_list|<
name|TreeLocation
argument_list|,
name|TreeLocation
argument_list|>
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|TreeLocation
name|apply
parameter_list|(
name|TreeLocation
name|location
parameter_list|)
block|{
return|return
name|location
operator|.
name|getChild
argument_list|(
name|element
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
block|}
comment|//------------------------------------------------------------< IdResolver>---
comment|/**      * A path resolver, which interprets each element in a path as the child      * of that name of the current element.      */
specifier|private
specifier|static
class|class
name|IdResolver
implements|implements
name|PathResolver
block|{
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|public
name|IdResolver
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Function
argument_list|<
name|TreeLocation
argument_list|,
name|TreeLocation
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|transform
argument_list|(
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|TreeLocation
argument_list|,
name|TreeLocation
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Function
argument_list|<
name|TreeLocation
argument_list|,
name|TreeLocation
argument_list|>
name|apply
parameter_list|(
specifier|final
name|String
name|element
parameter_list|)
block|{
return|return
operator|new
name|Function
argument_list|<
name|TreeLocation
argument_list|,
name|TreeLocation
argument_list|>
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|TreeLocation
name|apply
parameter_list|(
name|TreeLocation
name|location
parameter_list|)
block|{
return|return
name|location
operator|.
name|getChild
argument_list|(
name|element
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

