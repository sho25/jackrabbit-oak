begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
end_comment

begin_comment
comment|// !! THIS UTILITY CLASS IS A COPY FROM APACHE SLING !!
end_comment

begin_comment
comment|// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
end_comment

begin_comment
comment|/**  * The<code>PropertiesUtil</code> is a utility class providing some  * usefull utility methods for converting property types.  *  * @since 2.1  */
end_comment

begin_class
class|class
name|PropertiesUtil
block|{
comment|/**      * Returns the boolean value of the parameter or the      *<code>defaultValue</code> if the parameter is<code>null</code>.      * If the parameter is not a<code>Boolean</code> it is converted      * by calling<code>Boolean.valueOf</code> on the string value of the      * object.      * @param propValue the property value or<code>null</code>      * @param defaultValue the default boolean value      */
specifier|public
specifier|static
name|boolean
name|toBoolean
parameter_list|(
name|Object
name|propValue
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
name|propValue
operator|=
name|toObject
argument_list|(
name|propValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|propValue
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|propValue
return|;
block|}
elseif|else
if|if
condition|(
name|propValue
operator|!=
literal|null
condition|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|propValue
argument_list|)
argument_list|)
return|;
block|}
return|return
name|defaultValue
return|;
block|}
comment|/**      * Returns the parameter as a string or the      *<code>defaultValue</code> if the parameter is<code>null</code>.      * @param propValue the property value or<code>null</code>      * @param defaultValue the default string value      */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Object
name|propValue
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|propValue
operator|=
name|toObject
argument_list|(
name|propValue
argument_list|)
expr_stmt|;
return|return
operator|(
name|propValue
operator|!=
literal|null
operator|)
condition|?
name|propValue
operator|.
name|toString
argument_list|()
else|:
name|defaultValue
return|;
block|}
comment|/**      * Returns the parameter as a long or the      *<code>defaultValue</code> if the parameter is<code>null</code> or if      * the parameter is not a<code>Long</code> and cannot be converted to      * a<code>Long</code> from the parameter's string value.      * @param propValue the property value or<code>null</code>      * @param defaultValue the default long value      */
specifier|public
specifier|static
name|long
name|toLong
parameter_list|(
name|Object
name|propValue
parameter_list|,
name|long
name|defaultValue
parameter_list|)
block|{
name|propValue
operator|=
name|toObject
argument_list|(
name|propValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|propValue
operator|instanceof
name|Long
condition|)
block|{
return|return
operator|(
name|Long
operator|)
name|propValue
return|;
block|}
elseif|else
if|if
condition|(
name|propValue
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|propValue
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
comment|// don't care, fall through to default value
block|}
block|}
return|return
name|defaultValue
return|;
block|}
comment|/**      * Returns the parameter as an integer or the      *<code>defaultValue</code> if the parameter is<code>null</code> or if      * the parameter is not an<code>Integer</code> and cannot be converted to      * an<code>Integer</code> from the parameter's string value.      * @param propValue the property value or<code>null</code>      * @param defaultValue the default integer value      */
specifier|public
specifier|static
name|int
name|toInteger
parameter_list|(
name|Object
name|propValue
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|propValue
operator|=
name|toObject
argument_list|(
name|propValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|propValue
operator|instanceof
name|Integer
condition|)
block|{
return|return
operator|(
name|Integer
operator|)
name|propValue
return|;
block|}
elseif|else
if|if
condition|(
name|propValue
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|propValue
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
comment|// don't care, fall through to default value
block|}
block|}
return|return
name|defaultValue
return|;
block|}
comment|/**      * Returns the parameter as a double or the      *<code>defaultValue</code> if the parameter is<code>null</code> or if      * the parameter is not a<code>Double</code> and cannot be converted to      * a<code>Double</code> from the parameter's string value.      * @param propValue the property value or<code>null</code>      * @param defaultValue the default double value      */
specifier|public
specifier|static
name|double
name|toDouble
parameter_list|(
name|Object
name|propValue
parameter_list|,
name|double
name|defaultValue
parameter_list|)
block|{
name|propValue
operator|=
name|toObject
argument_list|(
name|propValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|propValue
operator|instanceof
name|Double
condition|)
block|{
return|return
operator|(
name|Double
operator|)
name|propValue
return|;
block|}
elseif|else
if|if
condition|(
name|propValue
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|propValue
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
comment|// don't care, fall through to default value
block|}
block|}
return|return
name|defaultValue
return|;
block|}
comment|/**      * Returns the parameter as a single value. If the      * parameter is neither an array nor a<code>java.util.Collection</code> the      * parameter is returned unmodified. If the parameter is a non-empty array,      * the first array element is returned. If the property is a non-empty      *<code>java.util.Collection</code>, the first collection element is returned.      * Otherwise<code>null</code> is returned.      * @param propValue the parameter to convert.      */
specifier|public
specifier|static
name|Object
name|toObject
parameter_list|(
name|Object
name|propValue
parameter_list|)
block|{
if|if
condition|(
name|propValue
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|propValue
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|Object
index|[]
name|prop
init|=
operator|(
name|Object
index|[]
operator|)
name|propValue
decl_stmt|;
return|return
name|prop
operator|.
name|length
operator|>
literal|0
condition|?
name|prop
index|[
literal|0
index|]
else|:
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|propValue
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|Collection
argument_list|<
name|?
argument_list|>
name|prop
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|propValue
decl_stmt|;
return|return
name|prop
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|prop
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|propValue
return|;
block|}
block|}
comment|/**      * Returns the parameter as an array of Strings. If      * the parameter is a scalar value its string value is returned as a single      * element array. If the parameter is an array, the elements are converted to      * String objects and returned as an array. If the parameter is a collection, the      * collection elements are converted to String objects and returned as an array.      * Otherwise (if the parameter is<code>null</code>)<code>null</code> is      * returned.      * @param propValue The object to convert.      */
specifier|public
specifier|static
name|String
index|[]
name|toStringArray
parameter_list|(
name|Object
name|propValue
parameter_list|)
block|{
return|return
name|toStringArray
argument_list|(
name|propValue
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Returns the parameter as an array of Strings. If      * the parameter is a scalar value its string value is returned as a single      * element array. If the parameter is an array, the elements are converted to      * String objects and returned as an array. If the parameter is a collection, the      * collection elements are converted to String objects and returned as an array.      * Otherwise (if the property is<code>null</code>) a provided default value is      * returned.      * @param propValue The object to convert.      * @param defaultArray The default array to return.      */
specifier|public
specifier|static
name|String
index|[]
name|toStringArray
parameter_list|(
name|Object
name|propValue
parameter_list|,
name|String
index|[]
name|defaultArray
parameter_list|)
block|{
if|if
condition|(
name|propValue
operator|==
literal|null
condition|)
block|{
comment|// no value at all
return|return
name|defaultArray
return|;
block|}
elseif|else
if|if
condition|(
name|propValue
operator|instanceof
name|String
condition|)
block|{
comment|// single string
return|return
operator|new
name|String
index|[]
block|{
operator|(
name|String
operator|)
name|propValue
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|propValue
operator|instanceof
name|String
index|[]
condition|)
block|{
comment|// String[]
return|return
operator|(
name|String
index|[]
operator|)
name|propValue
return|;
block|}
elseif|else
if|if
condition|(
name|propValue
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
comment|// other array
name|Object
index|[]
name|valueArray
init|=
operator|(
name|Object
index|[]
operator|)
name|propValue
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|valueArray
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|valueArray
control|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|values
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|values
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|propValue
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
comment|// collection
name|Collection
argument_list|<
name|?
argument_list|>
name|valueCollection
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|propValue
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|valueList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|valueCollection
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|value
operator|:
name|valueCollection
control|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|valueList
operator|.
name|add
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|valueList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|valueList
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
return|return
name|defaultArray
return|;
block|}
end_class

unit|}
end_unit

