begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|namespace
operator|.
name|NamespaceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|ExerciseUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Authorization (Access Control Management)  * =============================================================================  *  * Title: Access Control Manager and Policies  * -----------------------------------------------------------------------------  *  * Goal:  * Learn about the details of the {@link javax.jcr.security.AccessControlManager}  * and the differences to {@link org.apache.jackrabbit.api.security.JackrabbitAccessControlManager}.  * Become familiar with getting, modifying and applying access control policies.  * Finally you will be able to make use of the access control related utilities  * as provided by the jackrabbit-jcr-commons package.  *  * Exercises:  *  * - {@link #testGetAccessControlManager()}  *   Complete the test by retrieving the regular JCR and the Jackrabbit access  *   control manager.  *  *   Question: What kind of test could/should you perform in order not to risk any runtime exceptions  *   Question: Does JCR API provide means to avoid {@link javax.jcr.UnsupportedRepositoryOperationException}?  *  * - {@link #testRetrievePoliciesAtTestRoot()}  *   Understand the difference between {@code getApplicablePolicies} and {@code getPolicies}.  *   Fix the test such that it passes.  *  * - {@link #testRetrievePoliciesAtNamespaceRoot()}  *   Same as before for {@link NamespaceConstants#NAMESPACES_PATH}.  *  *   Question: What are the differences?  *   Question: Can you explain it?  *   Question: What would you need to do in order to get the same result for the test root?  *  * - {@link #testModifyPolicy()}  *   This test modifies the access control list exposed by the default implementation at the test root.  *   Fix the test such that it passes.  *  *   Question: What is the expected return value of {@code getApplicablePolicies} and {@code getPolicies}  *             after modifying the ACL?  *   Question: What is the nature of the ACE created by the test case? Deny? Allow? Why?  *  * - {@link #testAddAceWithUtility()}  *   Similar to {@link #testModifyPolicy()} this test modifies the policy at the  *   test root however using the one variant of the utility methods provided by  *   jackrabbit-jcr-commons. Fix the test such that it passes.  *  *   Question: Can you summarize the difference to the test above?  *   Question: Can you explain the behavior?  *  * - {@link #testSetPolicy()}  *   Same as {@link #testModifyPolicy()}. Fix the test case such that it passes.  *   Hint: The title of the test indicates the expected fix :-)  *  * - {@link #testRemovePolicy()}  *   Test illustrating how to remove access control policies. Explain why the  *   initial call to remove the policy fails.  *  * - {@link #testTransientNature()}  *   Test case illustrating the transient nature of access control modifications.  *   Fix the test case such that it passes.  *  * - {@link #testRetrievePoliciesAsReadOnlySession()}  *   This case illustrates the fact the reading access control management requires  *   additional permissions. Explaing why the read-only session cannot call  *   either of the methods to retrieve policies at the test root and fix the  *   test case accordingly.  *  *   Question: How many variants to do see to fix the test?  *  * - {@link #testWritePoliciesAsReadOnlySession()}  *   This case illustrates the fact the writing access control content requires  *   additional permissions. Explaing why the read-only session cannot set the  *   policy at the test root and fix the test case accordingly.  *  *   Question: How many variants to do see to fix the test?  *  *  * Additional Exercises  * -----------------------------------------------------------------------------  *  * While the default implementation currently mostly exposes {@link AccessControlList}  * policies, the specification defines the nature of access control policies an  * implementation detail.  *  * - {@link #testPoliciesAtNullPath()}  *   All test above use a regular, absolute path pointing to a Node to read and  *   write access control policies.  *   As of JSR 283 it is also allowed to use 'null' instead. Use this exercise  *   to recap the meaning 'null' in this context by looking at the JCR Javadoc.  *   Fix the test by providing the correct set of privileges that can be granted here.  *  *   Question: What privileges can only be granted/revoked at the 'null' path?  *   Question: Can you extend the test to verify your expectations?  *  * - Look for other implementations of the {@link javax.jcr.security.AccessControlPolicy}  *   interface in Oak and list your findings.  *  *   Question: Can you find other policies?  *   Question: Can you describe the nature of these policies?  *   Question: Can you identify the impact this may have on API consumers that make assumptions about the type of policies?  *  * - Take a second look at the {@link org.apache.jackrabbit.api.security.JackrabbitAccessControlManager}.  *  *   Question: What additional methods exist with respect to retrieving access control policies?  *   Question: Can you explain how to use these methods?  *   Question: Explore how the default implementation handles these calls.  *  *  * Related Exercises  * -----------------------------------------------------------------------------  *  * - {@link L3_AccessControlListTest}  * - {@link L4_EffectivePoliciesTest}  * - {@link L7_RestrictionsTest}  *  *</pre>  *  * @see javax.jcr.security.AccessControlManager  * @see javax.jcr.security.AccessControlPolicy  */
end_comment

begin_class
specifier|public
class|class
name|L2_AccessControlManagerTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
name|AccessControlManager
name|acMgr
decl_stmt|;
specifier|private
name|Principal
name|testPrincipal
decl_stmt|;
specifier|private
name|String
name|testID
decl_stmt|;
specifier|private
name|Session
name|testSession
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|acMgr
operator|=
name|superuser
operator|.
name|getAccessControlManager
argument_list|()
expr_stmt|;
name|User
name|testUser
init|=
name|ExerciseUtility
operator|.
name|createTestUser
argument_list|(
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
argument_list|)
decl_stmt|;
name|testPrincipal
operator|=
name|testUser
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
name|testID
operator|=
name|testUser
operator|.
name|getID
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|testSession
operator|!=
literal|null
operator|&&
name|testSession
operator|.
name|isLive
argument_list|()
condition|)
block|{
name|testSession
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
name|Authorizable
name|testUser
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
operator|.
name|getAuthorizable
argument_list|(
name|testPrincipal
argument_list|)
decl_stmt|;
if|if
condition|(
name|testUser
operator|!=
literal|null
condition|)
block|{
name|testUser
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetAccessControlManager
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// EXERCISE retrieve the access control manager using standard JCR API
name|AccessControlManager
name|acMgr
init|=
literal|null
decl_stmt|;
name|assertNotNull
argument_list|(
name|acMgr
argument_list|)
expr_stmt|;
comment|// EXERCISE retrieve the jackrabbit access control manager using standard API, without risking a class-cast exception.
name|JackrabbitAccessControlManager
name|jackrabbitAcMgr
init|=
literal|null
decl_stmt|;
name|assertNotNull
argument_list|(
name|jackrabbitAcMgr
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRetrievePoliciesAtTestRoot
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testRoot
argument_list|)
decl_stmt|;
name|int
name|expectedLength
init|=
operator|-
literal|1
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|AccessControlPolicyIterator
name|policyIterator
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|testRoot
argument_list|)
decl_stmt|;
name|int
name|expectedSize
init|=
operator|-
literal|1
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|policyIterator
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// EXERCISE: look at the utility methods and explain the expected return value
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|testRoot
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl2
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|acl
argument_list|,
name|acl2
argument_list|)
expr_stmt|;
comment|// EXERCISE: is this correct?
block|}
specifier|public
name|void
name|testRetrievePoliciesAtNamespaceRoot
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|NamespaceConstants
operator|.
name|NAMESPACES_PATH
argument_list|)
decl_stmt|;
name|int
name|expectedLength
init|=
operator|-
literal|1
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|AccessControlPolicyIterator
name|policyIterator
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|NamespaceConstants
operator|.
name|NAMESPACES_PATH
argument_list|)
decl_stmt|;
name|int
name|expectedSize
init|=
operator|-
literal|1
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|policyIterator
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// EXERCISE: look at the utility methods and explain the expected return value
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|NamespaceConstants
operator|.
name|NAMESPACES_PATH
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl2
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|superuser
argument_list|,
name|NamespaceConstants
operator|.
name|NAMESPACES_PATH
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|acl
argument_list|,
name|acl2
argument_list|)
expr_stmt|;
comment|// EXERCISE: is this correct?
block|}
specifier|public
name|void
name|testModifyPolicy
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|testRoot
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|acl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
operator|new
name|Privilege
index|[]
block|{
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|Privilege
operator|.
name|JCR_READ
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|int
name|expectedLength
init|=
operator|-
literal|1
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|expectedSize
init|=
operator|-
literal|1
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|testRoot
argument_list|)
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|expectedLength
operator|=
operator|-
literal|1
expr_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testRoot
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddAceWithUtility
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|testRoot
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
name|AccessControlUtils
operator|.
name|addAccessControlEntry
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|,
name|testPrincipal
argument_list|,
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_READ
block|}
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|expectedSuccess
init|=
literal|false
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedSuccess
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|int
name|expectedLength
init|=
operator|-
literal|1
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|expectedSize
init|=
operator|-
literal|1
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|testRoot
argument_list|)
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testRoot
argument_list|)
decl_stmt|;
name|expectedLength
operator|=
operator|-
literal|1
expr_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|acl
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|AccessControlPolicy
name|policy
range|:
name|policies
control|)
block|{
if|if
condition|(
name|policy
operator|instanceof
name|JackrabbitAccessControlList
condition|)
block|{
name|acl
operator|=
operator|(
name|JackrabbitAccessControlList
operator|)
name|policy
expr_stmt|;
block|}
block|}
name|JackrabbitAccessControlList
name|acl2
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|testRoot
argument_list|)
decl_stmt|;
comment|// EXERCISE: is the following expected to succeed?
name|assertEquals
argument_list|(
name|acl
argument_list|,
name|acl2
argument_list|)
expr_stmt|;
name|int
name|expectedAceLength
init|=
operator|-
literal|1
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedAceLength
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSetPolicy
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|testRoot
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// EXERCISE: fix the test.
name|assertFalse
argument_list|(
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|testRoot
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testRoot
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policies
index|[
literal|0
index|]
operator|instanceof
name|JackrabbitAccessControlList
argument_list|)
expr_stmt|;
name|JackrabbitAccessControlList
name|acl2
init|=
operator|(
name|JackrabbitAccessControlList
operator|)
name|policies
index|[
literal|0
index|]
decl_stmt|;
name|assertFalse
argument_list|(
name|acl2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acl2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AccessControlEntry
name|ace
init|=
name|acl2
operator|.
name|getAccessControlEntries
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|ace
operator|instanceof
name|JackrabbitAccessControlEntry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPrincipal
argument_list|,
name|ace
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|JackrabbitAccessControlEntry
operator|)
name|ace
operator|)
operator|.
name|isAllow
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemovePolicy
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|testRoot
argument_list|)
decl_stmt|;
comment|// EXERCISE: explain why
try|try
block|{
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|testRoot
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"EXERCISE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
name|AccessControlUtils
operator|.
name|addAccessControlEntry
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|,
name|testPrincipal
argument_list|,
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_READ
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|acl
operator|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|testRoot
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|testRoot
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransientNature
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|testRoot
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testRoot
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acl
argument_list|,
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|testRoot
argument_list|)
argument_list|)
expr_stmt|;
comment|// EXERCISE: fix the test case
name|Session
name|s
init|=
name|getHelper
argument_list|()
operator|.
name|getSuperuserSession
argument_list|()
decl_stmt|;
try|try
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|s
operator|.
name|getAccessControlManager
argument_list|()
operator|.
name|getPolicies
argument_list|(
name|testRoot
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acl
argument_list|,
name|policies
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|s
operator|.
name|isLive
argument_list|()
condition|)
block|{
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testRetrievePoliciesAsReadOnlySession
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|testSession
operator|=
name|superuser
operator|.
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
name|ExerciseUtility
operator|.
name|getTestCredentials
argument_list|(
name|testID
argument_list|)
argument_list|)
expr_stmt|;
comment|// EXERCISE: Fix the test and explain your fix.
name|AccessControlPolicyIterator
name|policyIterator
init|=
name|testSession
operator|.
name|getAccessControlManager
argument_list|()
operator|.
name|getApplicablePolicies
argument_list|(
name|testRoot
argument_list|)
decl_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|testSession
operator|.
name|getAccessControlManager
argument_list|()
operator|.
name|getPolicies
argument_list|(
name|testRoot
argument_list|)
decl_stmt|;
block|}
specifier|public
name|void
name|testWritePoliciesAsReadOnlySession
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|testSession
operator|=
name|superuser
operator|.
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
name|ExerciseUtility
operator|.
name|getTestCredentials
argument_list|(
name|testID
argument_list|)
argument_list|)
expr_stmt|;
comment|// EXERCISE: Fix the test and explain your fix.
comment|// NOTE: that obviously is prone to cause troubles as the policies is retrieved with a different session!
name|AccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|testRoot
argument_list|)
decl_stmt|;
name|testSession
operator|.
name|getAccessControlManager
argument_list|()
operator|.
name|setPolicy
argument_list|(
name|testRoot
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPoliciesAtNullPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|testPath
init|=
literal|null
decl_stmt|;
name|Privilege
index|[]
name|privileges
init|=
literal|null
decl_stmt|;
comment|// EXERCISE define the set of privs that can/must be granted at the 'null' path.
name|AccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|testPath
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privileges
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// EXERCISE explain (or even verify) the expected result
block|}
block|}
end_class

end_unit

