begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|addAll
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_AUTOCREATED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_CREATED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_DEFAULTPRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_DEFAULTVALUES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_HASORDERABLECHILDNODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_ISMIXIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_LASTMODIFIED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MULTIPLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_NODETYPENAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PROTECTED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BOOLEAN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|DATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_CREATEDBY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_IS_ABSTRACT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_LASTMODIFIEDBY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_HAS_PROTECTED_RESIDUAL_CHILD_NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_HAS_PROTECTED_RESIDUAL_PROPERTIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_MIXIN_SUBTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_NAMED_CHILD_NODE_DEFINITIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_NAMED_PROPERTY_DEFINITIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_PRIMARY_SUBTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_PROTECTED_CHILD_NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_PROTECTED_PROPERTIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_RESIDUAL_CHILD_NODE_DEFINITIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_RESIDUAL_PROPERTY_DEFINITIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_SUPERTYPES
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|InvalidItemStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ItemNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFormatException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NoSuchNodeTypeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|TreeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|IdentifierManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|TreeUtil
import|;
end_import

begin_comment
comment|/**  * {@code NodeDelegate} serve as internal representations of {@code Node}s.  * Most methods of this class throw an {@code InvalidItemStateException}  * exception if the instance is stale. An instance is stale if the underlying  * items does not exist anymore.  */
end_comment

begin_class
specifier|public
class|class
name|NodeDelegate
extends|extends
name|ItemDelegate
block|{
comment|/**      * Create a new {@code NodeDelegate} instance for a valid {@code TreeLocation}. That      * is for one where {@code getTree() != null}.      *      * @param sessionDelegate      * @param location      * @return      */
specifier|static
name|NodeDelegate
name|create
parameter_list|(
name|SessionDelegate
name|sessionDelegate
parameter_list|,
name|TreeLocation
name|location
parameter_list|)
block|{
return|return
name|location
operator|.
name|getTree
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|NodeDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|location
argument_list|)
return|;
block|}
specifier|protected
name|NodeDelegate
parameter_list|(
name|SessionDelegate
name|sessionDelegate
parameter_list|,
name|Tree
name|tree
parameter_list|)
block|{
name|super
argument_list|(
name|sessionDelegate
argument_list|,
name|tree
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|NodeDelegate
parameter_list|(
name|SessionDelegate
name|sessionDelegate
parameter_list|,
name|TreeLocation
name|location
parameter_list|)
block|{
name|super
argument_list|(
name|sessionDelegate
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
specifier|public
name|String
name|getIdentifier
parameter_list|()
throws|throws
name|InvalidItemStateException
block|{
return|return
name|sessionDelegate
operator|.
name|getIdManager
argument_list|()
operator|.
name|getIdentifier
argument_list|(
name|getTree
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isProtected
parameter_list|()
throws|throws
name|InvalidItemStateException
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|()
decl_stmt|;
name|Tree
name|parent
init|=
name|tree
operator|.
name|getParentOrNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|tree
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Tree
name|typeRoot
init|=
name|sessionDelegate
operator|.
name|getRoot
argument_list|()
operator|.
name|getTreeOrNull
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tree
argument_list|>
name|types
init|=
name|getEffectiveType
argument_list|(
name|parent
argument_list|,
name|typeRoot
argument_list|)
decl_stmt|;
name|boolean
name|protectedResidual
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Tree
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
name|contains
argument_list|(
name|getNames
argument_list|(
name|type
argument_list|,
name|OAK_PROTECTED_CHILD_NODES
argument_list|)
argument_list|,
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|protectedResidual
condition|)
block|{
name|protectedResidual
operator|=
name|getBoolean
argument_list|(
name|type
argument_list|,
name|OAK_HAS_PROTECTED_RESIDUAL_CHILD_NODES
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Special case: There are one or more protected *residual*
comment|// child node definitions. Iterate through them to check whether
comment|// there's a matching, protected one.
if|if
condition|(
name|protectedResidual
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|typeNames
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Tree
name|type
range|:
name|getEffectiveType
argument_list|(
name|tree
argument_list|,
name|typeRoot
argument_list|)
control|)
block|{
name|typeNames
operator|.
name|add
argument_list|(
name|getName
argument_list|(
name|type
argument_list|,
name|JCR_NODETYPENAME
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|typeNames
argument_list|,
name|getNames
argument_list|(
name|type
argument_list|,
name|OAK_SUPERTYPES
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Tree
name|type
range|:
name|types
control|)
block|{
name|Tree
name|definitions
init|=
name|type
operator|.
name|getChildOrNull
argument_list|(
name|OAK_RESIDUAL_CHILD_NODE_DEFINITIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|definitions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|typeName
range|:
name|typeNames
control|)
block|{
name|Tree
name|definition
init|=
name|definitions
operator|.
name|getChildOrNull
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|definition
operator|!=
literal|null
operator|&&
name|getBoolean
argument_list|(
name|definition
argument_list|,
name|JCR_PROTECTED
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
name|boolean
name|isProtected
parameter_list|(
name|String
name|property
parameter_list|)
throws|throws
name|InvalidItemStateException
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|()
decl_stmt|;
name|Tree
name|typeRoot
init|=
name|sessionDelegate
operator|.
name|getRoot
argument_list|()
operator|.
name|getTreeOrNull
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tree
argument_list|>
name|types
init|=
name|getEffectiveType
argument_list|(
name|tree
argument_list|,
name|typeRoot
argument_list|)
decl_stmt|;
name|boolean
name|protectedResidual
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Tree
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
name|contains
argument_list|(
name|getNames
argument_list|(
name|type
argument_list|,
name|OAK_PROTECTED_PROPERTIES
argument_list|)
argument_list|,
name|property
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|protectedResidual
condition|)
block|{
name|protectedResidual
operator|=
name|getBoolean
argument_list|(
name|type
argument_list|,
name|OAK_HAS_PROTECTED_RESIDUAL_PROPERTIES
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Special case: There are one or more protected *residual*
comment|// child node definitions. Iterate through them to check whether
comment|// there's a matching, protected one.
if|if
condition|(
name|protectedResidual
condition|)
block|{
for|for
control|(
name|Tree
name|type
range|:
name|types
control|)
block|{
name|Tree
name|definitions
init|=
name|type
operator|.
name|getChildOrNull
argument_list|(
name|OAK_RESIDUAL_PROPERTY_DEFINITIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|definitions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Tree
name|definition
range|:
name|definitions
operator|.
name|getChildren
argument_list|()
control|)
block|{
comment|// TODO: check for matching property type?
if|if
condition|(
name|getBoolean
argument_list|(
name|definition
argument_list|,
name|JCR_PROTECTED
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Determine whether this is the root node      *      * @return {@code true} iff this is the root node      */
specifier|public
name|boolean
name|isRoot
parameter_list|()
throws|throws
name|InvalidItemStateException
block|{
return|return
name|getTree
argument_list|()
operator|.
name|isRoot
argument_list|()
return|;
block|}
comment|/**      * Get the number of properties of the node      *      * @return number of properties of the node      */
specifier|public
name|long
name|getPropertyCount
parameter_list|()
throws|throws
name|InvalidItemStateException
block|{
comment|// TODO: Exclude "invisible" internal properties (OAK-182)
return|return
name|getTree
argument_list|()
operator|.
name|getPropertyCount
argument_list|()
return|;
block|}
comment|/**      * Get a property      *      * @param relPath oak path      * @return property at the path given by {@code relPath} or {@code null} if      *         no such property exists      */
annotation|@
name|CheckForNull
specifier|public
name|PropertyDelegate
name|getPropertyOrNull
parameter_list|(
name|String
name|relPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|TreeLocation
name|propertyLocation
init|=
name|getChildLocation
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
return|return
name|propertyLocation
operator|.
name|getProperty
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|PropertyDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|propertyLocation
argument_list|)
return|;
block|}
comment|/**      * Get a property. In contrast to {@link #getPropertyOrNull(String)} this      * method never returns {@code null}. In the case where no property exists      * at the given path, the returned property delegate throws an      * {@code InvalidItemStateException} on access. See See OAK-395.      *      * @param relPath oak path      * @return property at the path given by {@code relPath}.      */
annotation|@
name|Nonnull
specifier|public
name|PropertyDelegate
name|getProperty
parameter_list|(
name|String
name|relPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
operator|new
name|PropertyDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|getChildLocation
argument_list|(
name|relPath
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the properties of the node      *      * @return properties of the node      */
annotation|@
name|Nonnull
specifier|public
name|Iterator
argument_list|<
name|PropertyDelegate
argument_list|>
name|getProperties
parameter_list|()
throws|throws
name|InvalidItemStateException
block|{
return|return
name|propertyDelegateIterator
argument_list|(
name|getTree
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Get the number of child nodes      *      * @return number of child nodes of the node      */
specifier|public
name|long
name|getChildCount
parameter_list|()
throws|throws
name|InvalidItemStateException
block|{
comment|// TODO: Exclude "invisible" internal child nodes (OAK-182)
return|return
name|getTree
argument_list|()
operator|.
name|getChildrenCount
argument_list|()
return|;
block|}
comment|/**      * Get child node      *      * @param relPath oak path      * @return node at the path given by {@code relPath} or {@code null} if      *         no such node exists      */
annotation|@
name|CheckForNull
specifier|public
name|NodeDelegate
name|getChild
parameter_list|(
name|String
name|relPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|create
argument_list|(
name|sessionDelegate
argument_list|,
name|getChildLocation
argument_list|(
name|relPath
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns an iterator for traversing all the children of this node.      * If the node is orderable then the iterator will return child nodes in the      * specified order. Otherwise the ordering of the iterator is undefined.      *      * @return child nodes of the node      */
annotation|@
name|Nonnull
specifier|public
name|Iterator
argument_list|<
name|NodeDelegate
argument_list|>
name|getChildren
parameter_list|()
throws|throws
name|InvalidItemStateException
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|()
decl_stmt|;
name|long
name|count
init|=
name|tree
operator|.
name|getChildrenCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
comment|// Optimise the most common case
return|return
name|Collections
operator|.
expr|<
name|NodeDelegate
operator|>
name|emptySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|count
operator|==
literal|1
condition|)
block|{
comment|// Optimise another typical case
name|Tree
name|child
init|=
name|tree
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|child
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|NodeDelegate
name|delegate
init|=
operator|new
name|NodeDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|child
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|delegate
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
expr|<
name|NodeDelegate
operator|>
name|emptySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
else|else
block|{
return|return
name|nodeDelegateIterator
argument_list|(
name|tree
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|orderBefore
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|target
parameter_list|)
throws|throws
name|ItemNotFoundException
throws|,
name|InvalidItemStateException
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|()
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|getChildOrNull
argument_list|(
name|source
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ItemNotFoundException
argument_list|(
literal|"Not a child: "
operator|+
name|source
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|target
operator|!=
literal|null
operator|&&
name|tree
operator|.
name|getChildOrNull
argument_list|(
name|target
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ItemNotFoundException
argument_list|(
literal|"Not a child: "
operator|+
name|target
argument_list|)
throw|;
block|}
else|else
block|{
name|tree
operator|.
name|getChildOrNull
argument_list|(
name|source
argument_list|)
operator|.
name|orderBefore
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|canAddMixin
parameter_list|(
name|String
name|typeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|typeRoot
init|=
name|sessionDelegate
operator|.
name|getRoot
argument_list|()
operator|.
name|getTreeOrNull
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
decl_stmt|;
name|Tree
name|type
init|=
name|typeRoot
operator|.
name|getChildOrNull
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
operator|!
name|getBoolean
argument_list|(
name|type
argument_list|,
name|JCR_IS_ABSTRACT
argument_list|)
operator|&&
name|getBoolean
argument_list|(
name|type
argument_list|,
name|JCR_ISMIXIN
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchNodeTypeException
argument_list|(
literal|"Node type "
operator|+
name|typeName
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|addMixin
parameter_list|(
name|String
name|typeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|typeRoot
init|=
name|sessionDelegate
operator|.
name|getRoot
argument_list|()
operator|.
name|getTreeOrNull
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
decl_stmt|;
name|Tree
name|type
init|=
name|typeRoot
operator|.
name|getChildOrNull
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchNodeTypeException
argument_list|(
literal|"Node type "
operator|+
name|typeName
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|getBoolean
argument_list|(
name|type
argument_list|,
name|JCR_IS_ABSTRACT
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
literal|"Node type "
operator|+
name|typeName
operator|+
literal|" is abstract"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|getBoolean
argument_list|(
name|type
argument_list|,
name|JCR_ISMIXIN
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
literal|"Node type "
operator|+
name|typeName
operator|+
literal|" is a not a mixin type"
argument_list|)
throw|;
block|}
name|Tree
name|tree
init|=
name|getTree
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|mixins
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|String
name|primary
init|=
name|getName
argument_list|(
name|tree
argument_list|,
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|primary
operator|!=
literal|null
operator|&&
name|contains
argument_list|(
name|getNames
argument_list|(
name|type
argument_list|,
name|OAK_PRIMARY_SUBTYPES
argument_list|)
argument_list|,
name|primary
argument_list|)
condition|)
block|{
return|return;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|submixins
init|=
name|newHashSet
argument_list|(
name|getNames
argument_list|(
name|type
argument_list|,
name|OAK_MIXIN_SUBTYPES
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|mixin
range|:
name|getNames
argument_list|(
name|tree
argument_list|,
name|JCR_MIXINTYPES
argument_list|)
control|)
block|{
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
name|mixin
argument_list|)
operator|||
name|submixins
operator|.
name|contains
argument_list|(
name|mixin
argument_list|)
condition|)
block|{
return|return;
block|}
name|mixins
operator|.
name|add
argument_list|(
name|mixin
argument_list|)
expr_stmt|;
block|}
name|mixins
operator|.
name|add
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|mixins
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
name|autoCreateItems
argument_list|(
name|tree
argument_list|,
name|type
argument_list|,
name|typeRoot
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set a property      *      * @param propertyState      * @return the set property      */
annotation|@
name|Nonnull
specifier|public
name|PropertyDelegate
name|setProperty
parameter_list|(
name|PropertyState
name|propertyState
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|propertyState
operator|.
name|getName
argument_list|()
decl_stmt|;
name|PropertyState
name|old
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
operator|&&
name|old
operator|.
name|isArray
argument_list|()
operator|&&
operator|!
name|propertyState
operator|.
name|isArray
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ValueFormatException
argument_list|(
literal|"Attempt to assign a single value to multi-valued property."
argument_list|)
throw|;
block|}
if|if
condition|(
name|old
operator|!=
literal|null
operator|&&
operator|!
name|old
operator|.
name|isArray
argument_list|()
operator|&&
name|propertyState
operator|.
name|isArray
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ValueFormatException
argument_list|(
literal|"Attempt to assign multiple values to single valued property."
argument_list|)
throw|;
block|}
name|tree
operator|.
name|setProperty
argument_list|(
name|propertyState
argument_list|)
expr_stmt|;
return|return
operator|new
name|PropertyDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|tree
operator|.
name|getLocation
argument_list|()
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Add a child node      *      * @param name Oak name of the new child node      * @param typeName Oak name of the type of the new child node,      *                 or {@code null} if a default type should be used      * @return the added node or {@code null} if such a node already exists      */
annotation|@
name|CheckForNull
specifier|public
name|NodeDelegate
name|addChild
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|typeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|()
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|hasChild
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Tree
name|typeRoot
init|=
name|sessionDelegate
operator|.
name|getRoot
argument_list|()
operator|.
name|getTreeOrNull
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeName
operator|==
literal|null
condition|)
block|{
name|typeName
operator|=
name|getDefaultChildType
argument_list|(
name|typeRoot
argument_list|,
name|tree
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|typeName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
literal|"No default node type available for node "
operator|+
name|PathUtils
operator|.
name|concat
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|Tree
name|child
init|=
name|internalAddChild
argument_list|(
name|tree
argument_list|,
name|name
argument_list|,
name|typeName
argument_list|,
name|typeRoot
argument_list|)
decl_stmt|;
return|return
operator|new
name|NodeDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|child
argument_list|)
return|;
block|}
comment|/**      * Remove the node if not root. Does nothing otherwise      */
specifier|public
name|void
name|remove
parameter_list|()
throws|throws
name|InvalidItemStateException
block|{
name|getTree
argument_list|()
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|/**      * Enables or disabled orderable children on the underlying tree.      *      * @param enable whether to enable or disable orderable children.      */
specifier|public
name|void
name|setOrderableChildren
parameter_list|(
name|boolean
name|enable
parameter_list|)
throws|throws
name|InvalidItemStateException
block|{
name|getTree
argument_list|()
operator|.
name|setOrderableChildren
argument_list|(
name|enable
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------< internal>---
specifier|private
name|Tree
name|internalAddChild
parameter_list|(
name|Tree
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|typeName
parameter_list|,
name|Tree
name|typeRoot
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|type
init|=
name|typeRoot
operator|.
name|getChildOrNull
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchNodeTypeException
argument_list|(
literal|"Node type "
operator|+
name|typeName
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|getBoolean
argument_list|(
name|type
argument_list|,
name|JCR_IS_ABSTRACT
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
literal|"Node type "
operator|+
name|typeName
operator|+
literal|" is abstract"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|getBoolean
argument_list|(
name|type
argument_list|,
name|JCR_ISMIXIN
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
literal|"Node type "
operator|+
name|typeName
operator|+
literal|" is a mixin type"
argument_list|)
throw|;
block|}
name|Tree
name|child
init|=
name|parent
operator|.
name|addChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|typeName
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|getBoolean
argument_list|(
name|type
argument_list|,
name|JCR_HASORDERABLECHILDNODES
argument_list|)
condition|)
block|{
name|child
operator|.
name|setOrderableChildren
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|autoCreateItems
argument_list|(
name|child
argument_list|,
name|type
argument_list|,
name|typeRoot
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|private
name|void
name|autoCreateItems
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|Tree
name|type
parameter_list|,
name|Tree
name|typeRoot
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// TODO: use a separate oak:autoCreatePropertyDefinitions
name|Tree
name|properties
init|=
name|type
operator|.
name|getChildOrNull
argument_list|(
name|OAK_NAMED_PROPERTY_DEFINITIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Tree
name|definitions
range|:
name|properties
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|definitions
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"oak:primaryType"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"oak:mixinTypes"
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"oak:uuid"
argument_list|)
condition|)
block|{
name|name
operator|=
name|JCR_UUID
expr_stmt|;
block|}
for|for
control|(
name|Tree
name|definition
range|:
name|definitions
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|getBoolean
argument_list|(
name|definition
argument_list|,
name|JCR_AUTOCREATED
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|tree
operator|.
name|hasProperty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|PropertyState
name|property
init|=
name|autoCreateProperty
argument_list|(
name|name
argument_list|,
name|definition
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|tree
operator|.
name|setProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Unable to auto-create value for "
operator|+
name|PathUtils
operator|.
name|concat
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
throw|;
block|}
block|}
break|break;
block|}
block|}
block|}
block|}
comment|// TODO: use a separate oak:autoCreateChildNodeDefinitions
name|Tree
name|childNodes
init|=
name|type
operator|.
name|getChildOrNull
argument_list|(
name|OAK_NAMED_CHILD_NODE_DEFINITIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|childNodes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Tree
name|definitions
range|:
name|childNodes
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|definitions
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|Tree
name|definition
range|:
name|definitions
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|getBoolean
argument_list|(
name|definition
argument_list|,
name|JCR_AUTOCREATED
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|tree
operator|.
name|hasChild
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|typeName
init|=
name|getName
argument_list|(
name|definition
argument_list|,
name|JCR_DEFAULTPRIMARYTYPE
argument_list|)
decl_stmt|;
name|internalAddChild
argument_list|(
name|tree
argument_list|,
name|name
argument_list|,
name|typeName
argument_list|,
name|typeRoot
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|PropertyState
name|autoCreateProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Tree
name|definition
parameter_list|)
block|{
if|if
condition|(
name|JCR_UUID
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|uuid
init|=
name|IdentifierManager
operator|.
name|generateUUID
argument_list|()
decl_stmt|;
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|uuid
argument_list|,
name|STRING
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|JCR_CREATED
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|long
name|now
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|now
argument_list|,
name|DATE
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|JCR_CREATEDBY
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|userID
init|=
name|sessionDelegate
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
decl_stmt|;
if|if
condition|(
name|userID
operator|!=
literal|null
condition|)
block|{
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|userID
argument_list|,
name|STRING
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|JCR_LASTMODIFIED
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|long
name|now
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|now
argument_list|,
name|DATE
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|JCR_LASTMODIFIEDBY
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|userID
init|=
name|sessionDelegate
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
decl_stmt|;
if|if
condition|(
name|userID
operator|!=
literal|null
condition|)
block|{
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|userID
argument_list|,
name|STRING
argument_list|)
return|;
block|}
block|}
comment|// does the definition have a default value?
name|PropertyState
name|values
init|=
name|definition
operator|.
name|getProperty
argument_list|(
name|JCR_DEFAULTVALUES
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|Type
argument_list|<
name|?
argument_list|>
name|type
init|=
name|values
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|getBoolean
argument_list|(
name|definition
argument_list|,
name|JCR_MULTIPLE
argument_list|)
condition|)
block|{
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|values
operator|.
name|getValue
argument_list|(
name|type
argument_list|)
argument_list|,
name|type
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|values
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|type
operator|=
name|type
operator|.
name|getBaseType
argument_list|()
expr_stmt|;
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|values
operator|.
name|getValue
argument_list|(
name|type
argument_list|,
literal|0
argument_list|)
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Finds the default primary type for a new child node with the given name.      *      * @param typeRoot root of the {@code /jcr:system/jcr:nodeTypes} tree      * @param parent parent node      * @param childName name of the new child node      * @return name of the default type, or {@code null} if not available      */
specifier|private
name|String
name|getDefaultChildType
parameter_list|(
name|Tree
name|typeRoot
parameter_list|,
name|Tree
name|parent
parameter_list|,
name|String
name|childName
parameter_list|)
block|{
name|List
argument_list|<
name|Tree
argument_list|>
name|types
init|=
name|getEffectiveType
argument_list|(
name|parent
argument_list|,
name|typeRoot
argument_list|)
decl_stmt|;
comment|// first look for named node definitions
for|for
control|(
name|Tree
name|type
range|:
name|types
control|)
block|{
name|Tree
name|named
init|=
name|type
operator|.
name|getChildOrNull
argument_list|(
name|OAK_NAMED_CHILD_NODE_DEFINITIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|named
operator|!=
literal|null
condition|)
block|{
name|Tree
name|definitions
init|=
name|named
operator|.
name|getChildOrNull
argument_list|(
name|childName
argument_list|)
decl_stmt|;
if|if
condition|(
name|definitions
operator|!=
literal|null
condition|)
block|{
name|String
name|defaultName
init|=
name|findDefaultPrimaryType
argument_list|(
name|typeRoot
argument_list|,
name|definitions
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultName
operator|!=
literal|null
condition|)
block|{
return|return
name|defaultName
return|;
block|}
block|}
block|}
block|}
comment|// then check residual definitions
for|for
control|(
name|Tree
name|type
range|:
name|types
control|)
block|{
name|Tree
name|definitions
init|=
name|type
operator|.
name|getChildOrNull
argument_list|(
name|OAK_RESIDUAL_CHILD_NODE_DEFINITIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|definitions
operator|!=
literal|null
condition|)
block|{
name|String
name|defaultName
init|=
name|findDefaultPrimaryType
argument_list|(
name|typeRoot
argument_list|,
name|definitions
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultName
operator|!=
literal|null
condition|)
block|{
return|return
name|defaultName
return|;
block|}
block|}
block|}
comment|// no matching child node definition found
return|return
literal|null
return|;
block|}
comment|/**      * Returns the effective node types of the given node.      */
specifier|private
specifier|static
name|List
argument_list|<
name|Tree
argument_list|>
name|getEffectiveType
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|Tree
name|typeRoot
parameter_list|)
block|{
name|List
argument_list|<
name|Tree
argument_list|>
name|types
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|String
name|primary
init|=
name|getName
argument_list|(
name|tree
argument_list|,
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|primary
operator|!=
literal|null
condition|)
block|{
name|Tree
name|type
init|=
name|typeRoot
operator|.
name|getChildOrNull
argument_list|(
name|primary
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|mixin
range|:
name|getNames
argument_list|(
name|tree
argument_list|,
name|JCR_MIXINTYPES
argument_list|)
control|)
block|{
name|Tree
name|type
init|=
name|typeRoot
operator|.
name|getChildOrNull
argument_list|(
name|mixin
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|types
return|;
block|}
specifier|private
name|String
name|findDefaultPrimaryType
parameter_list|(
name|Tree
name|typeRoot
parameter_list|,
name|Tree
name|definitions
parameter_list|)
block|{
for|for
control|(
name|Tree
name|definition
range|:
name|definitions
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|String
name|defaultName
init|=
name|getName
argument_list|(
name|definition
argument_list|,
name|JCR_DEFAULTPRIMARYTYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultName
operator|!=
literal|null
condition|)
block|{
return|return
name|defaultName
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Nonnull
comment|// FIXME this should be package private. OAK-672
specifier|public
name|Tree
name|getTree
parameter_list|()
throws|throws
name|InvalidItemStateException
block|{
name|Tree
name|tree
init|=
name|getLocation
argument_list|()
operator|.
name|getTree
argument_list|()
decl_stmt|;
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidItemStateException
argument_list|()
throw|;
block|}
return|return
name|tree
return|;
block|}
comment|// -----------------------------------------------------------< private>---
specifier|private
name|TreeLocation
name|getChildLocation
parameter_list|(
name|String
name|relPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|relPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Not a relative path: "
operator|+
name|relPath
argument_list|)
throw|;
block|}
return|return
name|TreeUtil
operator|.
name|getTreeLocation
argument_list|(
name|getLocation
argument_list|()
argument_list|,
name|relPath
argument_list|)
return|;
block|}
specifier|private
name|Iterator
argument_list|<
name|NodeDelegate
argument_list|>
name|nodeDelegateIterator
parameter_list|(
name|Iterator
argument_list|<
name|Tree
argument_list|>
name|children
parameter_list|)
block|{
return|return
name|Iterators
operator|.
name|transform
argument_list|(
name|Iterators
operator|.
name|filter
argument_list|(
name|children
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Tree
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Tree
name|tree
parameter_list|)
block|{
return|return
operator|!
name|tree
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|Tree
argument_list|,
name|NodeDelegate
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeDelegate
name|apply
parameter_list|(
name|Tree
name|tree
parameter_list|)
block|{
return|return
operator|new
name|NodeDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|tree
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|Iterator
argument_list|<
name|PropertyDelegate
argument_list|>
name|propertyDelegateIterator
parameter_list|(
name|Iterator
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|properties
parameter_list|)
throws|throws
name|InvalidItemStateException
block|{
specifier|final
name|TreeLocation
name|location
init|=
name|getLocation
argument_list|()
decl_stmt|;
return|return
name|Iterators
operator|.
name|transform
argument_list|(
name|Iterators
operator|.
name|filter
argument_list|(
name|properties
argument_list|,
operator|new
name|Predicate
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|PropertyState
name|property
parameter_list|)
block|{
return|return
operator|!
name|property
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|PropertyState
argument_list|,
name|PropertyDelegate
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PropertyDelegate
name|apply
parameter_list|(
name|PropertyState
name|propertyState
parameter_list|)
block|{
return|return
operator|new
name|PropertyDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|location
operator|.
name|getChild
argument_list|(
name|propertyState
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|// Generic property value accessors. TODO: add to Tree?
specifier|private
specifier|static
name|boolean
name|getBoolean
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|PropertyState
name|property
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|property
operator|!=
literal|null
operator|&&
name|property
operator|.
name|getType
argument_list|()
operator|==
name|BOOLEAN
operator|&&
name|property
operator|.
name|getValue
argument_list|(
name|BOOLEAN
argument_list|)
return|;
block|}
annotation|@
name|CheckForNull
specifier|private
specifier|static
name|String
name|getName
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|PropertyState
name|property
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
operator|&&
name|property
operator|.
name|getType
argument_list|()
operator|==
name|NAME
condition|)
block|{
return|return
name|property
operator|.
name|getValue
argument_list|(
name|NAME
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Nonnull
specifier|private
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|getNames
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|PropertyState
name|property
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
operator|&&
name|property
operator|.
name|getType
argument_list|()
operator|==
name|NAMES
condition|)
block|{
return|return
name|property
operator|.
name|getValue
argument_list|(
name|NAMES
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|emptyList
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

