begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_comment
comment|/**  * An array of objects.  */
end_comment

begin_class
specifier|public
class|class
name|JsopArray
extends|extends
name|Jsop
implements|implements
name|List
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|EMPTY_LIST
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
decl_stmt|;
specifier|private
name|JsopTokenizer
name|tokenizer
decl_stmt|;
specifier|public
name|JsopArray
parameter_list|(
name|String
name|jsop
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|super
argument_list|(
name|jsop
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JsopArray
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|String
name|s
init|=
name|load
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
name|index
operator|+
literal|" (size: "
operator|+
name|list
operator|.
name|size
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
return|return
name|Jsop
operator|.
name|parse
argument_list|(
name|s
argument_list|)
return|;
block|}
specifier|private
name|String
name|load
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|<
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
while|while
condition|(
name|tokenizer
operator|!=
literal|null
condition|)
block|{
name|String
name|v
init|=
name|tokenizer
operator|.
name|readRawValue
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenizer
operator|.
name|matches
argument_list|(
literal|']'
argument_list|)
condition|)
block|{
name|tokenizer
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|tokenizer
operator|.
name|read
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|<
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|v
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|tokenizer
operator|=
operator|new
name|JsopTokenizer
argument_list|(
name|jsop
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|tokenizer
operator|.
name|read
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenizer
operator|.
name|matches
argument_list|(
literal|']'
argument_list|)
condition|)
block|{
name|list
operator|=
name|EMPTY_LIST
expr_stmt|;
name|tokenizer
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
return|return
name|list
operator|==
name|EMPTY_LIST
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
name|load
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|jsop
operator|==
literal|null
condition|)
block|{
name|JsopBuilder
name|w
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|w
operator|.
name|array
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|e
range|:
name|list
control|)
block|{
name|w
operator|.
name|encodedValue
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|jsop
operator|=
name|w
operator|.
name|toString
argument_list|()
expr_stmt|;
name|start
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|jsop
operator|.
name|substring
argument_list|(
name|start
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|Object
name|e
parameter_list|)
block|{
name|initWrite
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|toString
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|initWrite
argument_list|()
expr_stmt|;
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initWrite
parameter_list|()
block|{
name|readAll
argument_list|()
expr_stmt|;
name|jsop
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|readAll
parameter_list|()
block|{
name|load
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|Object
name|element
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|int
name|index
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|indexOf
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
name|int
name|index
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|index
operator|<
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|next
parameter_list|()
block|{
return|return
name|get
argument_list|(
name|index
operator|++
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|lastIndexOf
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ListIterator
argument_list|<
name|Object
argument_list|>
name|listIterator
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ListIterator
argument_list|<
name|Object
argument_list|>
name|listIterator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|remove
parameter_list|(
name|int
name|index
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|Object
name|element
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|subList
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

