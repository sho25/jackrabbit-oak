begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|sameThreadExecutor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
operator|.
name|INITIAL_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|IndexCopierTest
block|{
specifier|private
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|int
name|maxFileSize
init|=
literal|7896
decl_stmt|;
specifier|private
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
specifier|private
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|basicTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|baseDir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|IndexCopier
name|c1
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
name|Directory
name|remote
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|Directory
name|wrapped
init|=
name|c1
operator|.
name|wrap
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t2
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|wrapped
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wrapped
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wrapped
operator|.
name|fileExists
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t1
operator|.
name|length
argument_list|,
name|wrapped
operator|.
name|fileLength
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t2
operator|.
name|length
argument_list|,
name|wrapped
operator|.
name|fileLength
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|readAndAssert
argument_list|(
name|wrapped
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
comment|//t1 should now be added to testDir
name|assertTrue
argument_list|(
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|concurrentRead
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|baseDir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|CollectingExecutor
name|executor
init|=
operator|new
name|CollectingExecutor
argument_list|()
decl_stmt|;
name|IndexCopier
name|c1
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|executor
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
name|TestRAMDirectory
name|remote
init|=
operator|new
name|TestRAMDirectory
argument_list|()
decl_stmt|;
name|Directory
name|wrapped
init|=
name|c1
operator|.
name|wrap
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
comment|//1. Trigger a read which should go to remote
name|readAndAssert
argument_list|(
name|wrapped
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|remote
operator|.
name|openedFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|executor
operator|.
name|commands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//2. Trigger another read and this should also be
comment|//served from remote
name|readAndAssert
argument_list|(
name|wrapped
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|remote
operator|.
name|openedFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Second read should not add a new copy task
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|executor
operator|.
name|commands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//3. Perform copy
name|executor
operator|.
name|executeAll
argument_list|()
expr_stmt|;
name|remote
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//4. Now read again after copy is done
name|readAndAssert
argument_list|(
name|wrapped
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
comment|// Now read should be served from local and not from remote
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|remote
operator|.
name|openedFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for the case where local directory is opened already contains      * the index files and in such a case file should not be read from remote      */
annotation|@
name|Test
specifier|public
name|void
name|reuseLocalDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|baseDir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|IndexCopier
name|c1
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
name|TestRAMDirectory
name|remote
init|=
operator|new
name|TestRAMDirectory
argument_list|()
decl_stmt|;
name|Directory
name|wrapped
init|=
name|c1
operator|.
name|wrap
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
comment|//1. Read for the first time should be served from remote
name|readAndAssert
argument_list|(
name|wrapped
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|remote
operator|.
name|openedFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//2. Reuse the testDir and read again
name|Directory
name|wrapped2
init|=
name|c1
operator|.
name|wrap
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|)
decl_stmt|;
name|remote
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//3. Now read should be served from local
name|readAndAssert
argument_list|(
name|wrapped2
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|remote
operator|.
name|openedFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Now check if local file gets corrupted then read from remote
name|Directory
name|wrapped3
init|=
name|c1
operator|.
name|wrap
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|)
decl_stmt|;
name|remote
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//4. Corrupt the local copy
name|writeFile
argument_list|(
name|baseDir
argument_list|,
literal|"t1"
argument_list|)
expr_stmt|;
comment|//Now read would be done from remote
name|readAndAssert
argument_list|(
name|wrapped3
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|remote
operator|.
name|openedFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deletesOnClose
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Use a close safe dir. In actual case the FSDir would
comment|//be opened on same file system hence it can retain memory
comment|//but RAMDirectory does not retain memory hence we simulate
comment|//that by not closing the RAMDir and reuse it
name|Directory
name|baseDir
init|=
operator|new
name|CloseSafeDir
argument_list|()
decl_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|IndexCopier
name|c1
init|=
operator|new
name|RAMIndexCopier
argument_list|(
name|baseDir
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|,
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
name|Directory
name|r1
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|r1
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t2
init|=
name|writeFile
argument_list|(
name|r1
argument_list|,
literal|"t2"
argument_list|)
decl_stmt|;
name|Directory
name|w1
init|=
name|c1
operator|.
name|wrap
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|r1
argument_list|)
decl_stmt|;
name|readAndAssert
argument_list|(
name|w1
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|readAndAssert
argument_list|(
name|w1
argument_list|,
literal|"t2"
argument_list|,
name|t2
argument_list|)
expr_stmt|;
comment|// t1 and t2 should now be present in local (base dir which back local)
name|assertTrue
argument_list|(
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|Directory
name|r2
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
expr_stmt|;
name|r2
operator|.
name|deleteFile
argument_list|(
literal|"t1"
argument_list|)
expr_stmt|;
name|Directory
name|w2
init|=
name|c1
operator|.
name|wrap
argument_list|(
literal|"/foo"
argument_list|,
name|defn
argument_list|,
name|r2
argument_list|)
decl_stmt|;
comment|//Close would trigger removal of file which are not present in remote
name|w2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"t1 should have been deleted"
argument_list|,
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|baseDir
operator|.
name|fileExists
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|getWorkDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|writeFile
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
name|randomBytes
argument_list|(
name|rnd
operator|.
name|nextInt
argument_list|(
name|maxFileSize
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|IndexOutput
name|o
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|name
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|o
operator|.
name|writeBytes
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|o
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|private
name|byte
index|[]
name|randomBytes
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|rnd
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|private
name|File
name|getWorkDir
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
literal|"IndexClonerTest"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|readAndAssert
parameter_list|(
name|Directory
name|wrapped
parameter_list|,
name|String
name|fileName
parameter_list|,
name|byte
index|[]
name|expectedData
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexInput
name|i
init|=
name|wrapped
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|wrapped
operator|.
name|fileLength
argument_list|(
name|fileName
argument_list|)
index|]
decl_stmt|;
name|i
operator|.
name|readBytes
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expectedData
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|copy
parameter_list|(
name|Directory
name|source
parameter_list|,
name|Directory
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|file
range|:
name|source
operator|.
name|listAll
argument_list|()
control|)
block|{
name|source
operator|.
name|copy
argument_list|(
name|dest
argument_list|,
name|file
argument_list|,
name|file
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|RAMIndexCopier
extends|extends
name|IndexCopier
block|{
specifier|final
name|Directory
name|baseDir
decl_stmt|;
specifier|public
name|RAMIndexCopier
parameter_list|(
name|Directory
name|baseDir
parameter_list|,
name|Executor
name|executor
parameter_list|,
name|File
name|indexRootDir
parameter_list|)
block|{
name|super
argument_list|(
name|executor
argument_list|,
name|indexRootDir
argument_list|)
expr_stmt|;
name|this
operator|.
name|baseDir
operator|=
name|baseDir
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Directory
name|createLocalDir
parameter_list|(
name|String
name|indexPath
parameter_list|,
name|IndexDefinition
name|definition
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|baseDir
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TestRAMDirectory
extends|extends
name|RAMDirectory
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|openedFiles
init|=
name|newArrayList
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|openedFiles
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|openInput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|openedFiles
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CloseSafeDir
extends|extends
name|RAMDirectory
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{          }
block|}
specifier|private
specifier|static
class|class
name|CollectingExecutor
implements|implements
name|Executor
block|{
specifier|final
name|List
argument_list|<
name|Runnable
argument_list|>
name|commands
init|=
name|newArrayList
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
name|commands
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
name|void
name|executeAll
parameter_list|()
block|{
for|for
control|(
name|Runnable
name|c
range|:
name|commands
control|)
block|{
name|c
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

