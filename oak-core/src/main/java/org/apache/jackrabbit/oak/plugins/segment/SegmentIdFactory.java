begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newLinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * Factory for creating the UUID objects used to identify segments.  * Weak references are used to keep track of all currently referenced  * UUIDs, so that we can avoid garbage-collecting those segments.  */
end_comment

begin_class
specifier|public
class|class
name|SegmentIdFactory
block|{
specifier|private
specifier|static
specifier|final
name|long
name|MSB_MASK
init|=
operator|~
operator|(
literal|0xfL
operator|<<
literal|12
operator|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|VERSION
init|=
operator|(
literal|0x4L
operator|<<
literal|12
operator|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|LSB_MASK
init|=
operator|~
operator|(
literal|0xfL
operator|<<
literal|60
operator|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DATA
init|=
literal|0xAL
operator|<<
literal|60
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|BULK
init|=
literal|0xBL
operator|<<
literal|60
decl_stmt|;
comment|/**      * Checks whether the given UUID identifies a data segment.      *      * @param id segment identifier      * @return {@code true} for a data segment, {@code false} for bulk      */
specifier|public
specifier|static
name|boolean
name|isDataSegmentId
parameter_list|(
name|UUID
name|id
parameter_list|)
block|{
return|return
operator|(
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
operator|&
operator|~
name|LSB_MASK
operator|)
operator|==
name|DATA
return|;
block|}
comment|/**      * Checks whether the given UUID identifies a bulk segment.      *      * @param id segment identifier      * @return {@code true} for a bulk segment, {@code false} for data      */
specifier|public
specifier|static
name|boolean
name|isBulkSegmentId
parameter_list|(
name|UUID
name|id
parameter_list|)
block|{
return|return
operator|(
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
operator|&
operator|~
name|LSB_MASK
operator|)
operator|==
name|BULK
return|;
block|}
comment|/**      * The random number source for generating new segment identifiers.      */
specifier|private
specifier|final
name|SecureRandom
name|random
init|=
operator|new
name|SecureRandom
argument_list|()
decl_stmt|;
comment|/**      * Hash table of weak references to UUIDs that are currently referenced.      * The size of the table is always a power of two, which optimizes the      * {@link #expand()} operation. The table is indexed by the random UUID      * bits, which guarantees uniform distribution of entries. Each table      * entry is either {@code null} (when there are no matching UUIDs) or      * a list of weak references to the matching UUIDs.      */
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|List
argument_list|<
name|WeakReference
argument_list|<
name|UUID
argument_list|>
argument_list|>
argument_list|>
name|uuids
init|=
name|newArrayList
argument_list|(
name|Collections
operator|.
expr|<
name|List
argument_list|<
name|WeakReference
argument_list|<
name|UUID
argument_list|>
argument_list|>
operator|>
name|nCopies
argument_list|(
literal|1024
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      *       * @param msb      * @param lsb      * @return      */
specifier|synchronized
name|UUID
name|getSegmentId
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
block|{
name|int
name|index
init|=
operator|(
operator|(
name|int
operator|)
name|lsb
operator|)
operator|&
operator|(
name|uuids
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
name|List
argument_list|<
name|WeakReference
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|list
init|=
name|uuids
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
name|newLinkedList
argument_list|()
expr_stmt|;
name|uuids
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|WeakReference
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|UUID
name|uuid
init|=
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|uuid
operator|==
literal|null
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|uuid
operator|.
name|getMostSignificantBits
argument_list|()
operator|==
name|msb
operator|&&
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
operator|==
name|lsb
condition|)
block|{
return|return
name|uuid
return|;
block|}
block|}
name|UUID
name|uuid
init|=
operator|new
name|UUID
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|WeakReference
argument_list|<
name|UUID
argument_list|>
argument_list|(
name|uuid
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>
literal|5
condition|)
block|{
name|expand
argument_list|()
expr_stmt|;
block|}
return|return
name|uuid
return|;
block|}
name|UUID
name|newDataSegmentId
parameter_list|()
block|{
return|return
name|newSegmentId
argument_list|(
name|DATA
argument_list|)
return|;
block|}
name|UUID
name|newBulkSegmentId
parameter_list|()
block|{
return|return
name|newSegmentId
argument_list|(
name|BULK
argument_list|)
return|;
block|}
specifier|private
name|UUID
name|newSegmentId
parameter_list|(
name|long
name|type
parameter_list|)
block|{
name|long
name|msb
init|=
operator|(
name|random
operator|.
name|nextLong
argument_list|()
operator|&
name|MSB_MASK
operator|)
operator||
name|VERSION
decl_stmt|;
name|long
name|lsb
init|=
operator|(
name|random
operator|.
name|nextLong
argument_list|()
operator|&
name|LSB_MASK
operator|)
operator||
name|type
decl_stmt|;
return|return
name|getSegmentId
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
return|;
block|}
specifier|private
specifier|synchronized
name|void
name|expand
parameter_list|()
block|{
name|int
name|n
init|=
name|uuids
operator|.
name|size
argument_list|()
decl_stmt|;
name|uuids
operator|.
name|ensureCapacity
argument_list|(
name|n
operator|*
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|WeakReference
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|list
init|=
name|uuids
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|uuids
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|WeakReference
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|newList
init|=
name|newLinkedList
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|WeakReference
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|WeakReference
argument_list|<
name|UUID
argument_list|>
name|reference
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|UUID
name|uuid
init|=
name|reference
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|uuid
operator|==
literal|null
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
operator|&
name|n
operator|)
operator|!=
literal|0
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|newList
operator|.
name|add
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|uuids
operator|.
name|set
argument_list|(
name|i
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|uuids
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uuids
operator|.
name|add
argument_list|(
name|newList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

