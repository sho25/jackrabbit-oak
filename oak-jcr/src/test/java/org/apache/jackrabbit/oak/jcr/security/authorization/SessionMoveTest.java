begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Permission evaluation tests for move operations.  */
end_comment

begin_class
specifier|public
class|class
name|SessionMoveTest
extends|extends
name|AbstractMoveTest
block|{
specifier|protected
name|void
name|move
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|dest
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|move
argument_list|(
name|source
argument_list|,
name|dest
argument_list|,
name|testSession
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|move
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|dest
parameter_list|,
name|Session
name|session
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|session
operator|.
name|move
argument_list|(
name|source
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setupMovePermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|path
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_REMOVE_NODE
block|,
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|siblingPath
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
block|,
name|Privilege
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndRemoveSubTree
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|siblingPath
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
block|,
name|Privilege
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|childNPath
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|moved
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|siblingDestPath
argument_list|)
decl_stmt|;
name|Node
name|child
init|=
name|moved
operator|.
name|getNode
argument_list|(
name|nodeName3
argument_list|)
decl_stmt|;
try|try
block|{
name|child
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Removing subtree after move requires 'jcr:removeNode' privilege on the target"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndRemoveSubTree2
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|path
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
block|,
name|Privilege
operator|.
name|JCR_REMOVE_NODE
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|siblingPath
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
block|,
name|Privilege
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|testSession
operator|.
name|getNode
argument_list|(
name|nodePath3
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_NODE
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|testSession
operator|.
name|move
argument_list|(
name|childNPath
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|moved
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|siblingDestPath
argument_list|)
decl_stmt|;
name|Node
name|child
init|=
name|moved
operator|.
name|getNode
argument_list|(
name|nodeName3
argument_list|)
decl_stmt|;
name|child
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Removing subtree after move requires 'jcr:removeNode' on the removed child."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndRemoveSubTree3
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|childNPath
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|siblingPath
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
block|,
name|PrivilegeConstants
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|childNPath
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|moved
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|siblingDestPath
argument_list|)
decl_stmt|;
name|Node
name|child
init|=
name|moved
operator|.
name|getNode
argument_list|(
name|nodeName3
argument_list|)
decl_stmt|;
name|child
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveRemoveSubTreeWithRestriction
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* allow READ/WRITE privilege for testUser at 'path' */
name|allow
argument_list|(
name|path
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readWritePrivileges
argument_list|)
expr_stmt|;
comment|/* deny REMOVE_NODE privileges at subtree. */
name|deny
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_NODE
argument_list|)
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"*/"
operator|+
name|nodeName3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath2
argument_list|,
name|Session
operator|.
name|ACTION_ADD_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|childNPath
argument_list|,
name|childNPath2
operator|+
literal|"/dest"
argument_list|)
expr_stmt|;
name|Node
name|dest
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath2
operator|+
literal|"/dest"
argument_list|)
decl_stmt|;
name|dest
operator|.
name|getNode
argument_list|(
name|nodeName3
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Removing child node must be denied."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveRemoveSubTreeWithRestriction2
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* allow READ/WRITE privilege for testUser at 'path' */
name|allow
argument_list|(
name|path
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readWritePrivileges
argument_list|)
expr_stmt|;
comment|/* deny REMOVE_NODE privileges at subtree. */
name|deny
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"*/"
operator|+
name|Text
operator|.
name|getName
argument_list|(
name|childNPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath2
argument_list|,
name|Session
operator|.
name|ACTION_ADD_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|childNPath
argument_list|,
name|childNPath2
operator|+
literal|"/dest"
argument_list|)
expr_stmt|;
name|Node
name|dest
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath2
operator|+
literal|"/dest"
argument_list|)
decl_stmt|;
name|dest
operator|.
name|getNode
argument_list|(
name|nodeName3
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Removing child node must be denied."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndAddSubTree
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|childNPath
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|siblingPath
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
block|,
name|PrivilegeConstants
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|childNPath
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|moved
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|siblingDestPath
argument_list|)
decl_stmt|;
name|Node
name|child
init|=
name|moved
operator|.
name|getNode
argument_list|(
name|nodeName3
argument_list|)
decl_stmt|;
name|child
operator|.
name|addNode
argument_list|(
name|nodeName4
argument_list|)
expr_stmt|;
try|try
block|{
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Adding child node at moved node must be denied: no add_child_node privilege at original location."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndAddSubTree2
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|childNPath
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|siblingPath
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
block|,
name|PrivilegeConstants
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|nodePath3
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|childNPath
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|moved
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|siblingDestPath
argument_list|)
decl_stmt|;
name|Node
name|child
init|=
name|moved
operator|.
name|getNode
argument_list|(
name|nodeName3
argument_list|)
decl_stmt|;
name|child
operator|.
name|addNode
argument_list|(
name|nodeName4
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndAddSubTree3
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|childNPath
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_REMOVE_NODE
block|,
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|siblingPath
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
block|,
name|PrivilegeConstants
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|childNPath
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|moved
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|siblingDestPath
argument_list|)
decl_stmt|;
name|Node
name|child
init|=
name|moved
operator|.
name|getNode
argument_list|(
name|nodeName3
argument_list|)
decl_stmt|;
name|child
operator|.
name|addNode
argument_list|(
name|nodeName4
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAddSubTreeWithRestriction
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* allow READ/WRITE privilege for testUser at 'path' */
name|allow
argument_list|(
name|path
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readWritePrivileges
argument_list|)
expr_stmt|;
comment|/* deny ADD_CHILD_NODES privileges at subtree. */
name|deny
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"*/"
operator|+
name|nodeName3
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|childNPath
argument_list|,
name|childNPath2
operator|+
literal|"/dest"
argument_list|)
expr_stmt|;
name|Node
name|dest
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath2
operator|+
literal|"/dest"
argument_list|)
decl_stmt|;
name|dest
operator|.
name|getNode
argument_list|(
name|nodeName3
argument_list|)
operator|.
name|addNode
argument_list|(
name|nodeName4
argument_list|)
expr_stmt|;
try|try
block|{
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Adding child node must be denied."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndAddAtSourceParent
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|childNPath
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|siblingPath
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
block|,
name|PrivilegeConstants
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|childNPath
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|sourceParent
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|sourceParent
operator|.
name|addNode
argument_list|(
name|nodeName4
argument_list|)
expr_stmt|;
try|try
block|{
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Adding child node at source parent be denied: missing add_child_node privilege."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndAddAtSourceParent2
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|childNPath
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|siblingPath
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
block|,
name|PrivilegeConstants
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|nodePath3
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|childNPath
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|sourceParent
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|sourceParent
operator|.
name|addNode
argument_list|(
name|nodeName4
argument_list|)
expr_stmt|;
try|try
block|{
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Adding child node at source parent be denied: missing add_child_node privilege."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndAddAtSourceParent3
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|path
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
block|,
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|childNPath
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|siblingPath
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
block|,
name|PrivilegeConstants
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|childNPath
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|sourceParent
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|sourceParent
operator|.
name|addNode
argument_list|(
name|nodeName4
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndAddReplacementAtSource
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|path
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
block|,
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|siblingPath
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
block|,
name|PrivilegeConstants
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|nodePath3
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|sourceParent
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
decl_stmt|;
name|Node
name|replacement
init|=
name|sourceParent
operator|.
name|addNode
argument_list|(
name|Text
operator|.
name|getName
argument_list|(
name|nodePath3
argument_list|)
argument_list|)
decl_stmt|;
name|replacement
operator|.
name|setProperty
argument_list|(
literal|"movedProp"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
try|try
block|{
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Missing ADD_NODE and ADD_PROPERTY permission on source parent."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndAddReplacementAtSource2
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|siblingPath
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
block|,
name|PrivilegeConstants
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|nodePath3
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|sourceParent
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
decl_stmt|;
name|Node
name|replacement
init|=
name|sourceParent
operator|.
name|addNode
argument_list|(
name|Text
operator|.
name|getName
argument_list|(
name|nodePath3
argument_list|)
argument_list|)
decl_stmt|;
name|replacement
operator|.
name|setProperty
argument_list|(
literal|"movedProp"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
try|try
block|{
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Missing REMOVE_NODE permission for move source."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndAddProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMovePermissions
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|nodePath3
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|destNode
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|siblingDestPath
argument_list|)
decl_stmt|;
name|Property
name|p
init|=
name|destNode
operator|.
name|setProperty
argument_list|(
literal|"newProp"
argument_list|,
literal|"val"
argument_list|)
decl_stmt|;
try|try
block|{
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Missing ADD_PROPERTY permission."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndAddProperty2
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMovePermissions
argument_list|()
expr_stmt|;
name|allow
argument_list|(
name|childNPath
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_ADD_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|nodePath3
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|destNode
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|siblingDestPath
argument_list|)
decl_stmt|;
name|Property
name|p
init|=
name|destNode
operator|.
name|setProperty
argument_list|(
literal|"newProp"
argument_list|,
literal|"val"
argument_list|)
decl_stmt|;
comment|// now save must succeed
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndModifyProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMovePermissions
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|nodePath3
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|destNode
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|siblingDestPath
argument_list|)
decl_stmt|;
name|destNode
operator|.
name|setProperty
argument_list|(
literal|"movedProp"
argument_list|,
literal|"modified"
argument_list|)
expr_stmt|;
try|try
block|{
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Missing MODIFY_PROPERTY permission."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndModifyProperty2
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMovePermissions
argument_list|()
expr_stmt|;
name|allow
argument_list|(
name|siblingPath
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_ALTER_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|nodePath3
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|destNode
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|siblingDestPath
argument_list|)
decl_stmt|;
name|destNode
operator|.
name|setProperty
argument_list|(
literal|"movedProp"
argument_list|,
literal|"modified"
argument_list|)
expr_stmt|;
try|try
block|{
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Missing MODIFY_PROPERTY permission."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndModifyProperty3
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMovePermissions
argument_list|()
expr_stmt|;
name|allow
argument_list|(
name|childNPath
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_ALTER_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|nodePath3
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|destNode
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|siblingDestPath
argument_list|)
decl_stmt|;
name|destNode
operator|.
name|setProperty
argument_list|(
literal|"movedProp"
argument_list|,
literal|"modified"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndRemoveProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMovePermissions
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|nodePath3
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|destNode
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|siblingDestPath
argument_list|)
decl_stmt|;
name|destNode
operator|.
name|getProperty
argument_list|(
literal|"movedProp"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Missing REMOVE_PROPERTY permission."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndRemoveProperty2
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|path
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_REMOVE_NODE
block|,
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
block|,
name|PrivilegeConstants
operator|.
name|REP_REMOVE_PROPERTIES
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|siblingPath
argument_list|,
name|privilegesFromNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
block|,
name|Privilege
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|nodePath3
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|destNode
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|siblingDestPath
argument_list|)
decl_stmt|;
name|destNode
operator|.
name|getProperty
argument_list|(
literal|"movedProp"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndAddPropertyAtSource
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMovePermissions
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|nodePath3
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
decl_stmt|;
name|Property
name|p
init|=
name|n
operator|.
name|setProperty
argument_list|(
literal|"newProp"
argument_list|,
literal|"val"
argument_list|)
decl_stmt|;
try|try
block|{
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Missing ADD_PROPERTY permission."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndAddPropertyAtSource2
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMovePermissions
argument_list|()
expr_stmt|;
name|allow
argument_list|(
name|childNPath
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_ADD_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|nodePath3
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
decl_stmt|;
name|Property
name|p
init|=
name|n
operator|.
name|setProperty
argument_list|(
literal|"newProp"
argument_list|,
literal|"val"
argument_list|)
decl_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndModifyPropertyAtSource
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMovePermissions
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|nodePath3
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|n
operator|.
name|hasProperty
argument_list|(
name|propertyName1
argument_list|)
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
name|propertyName1
argument_list|,
literal|"modified"
argument_list|)
expr_stmt|;
try|try
block|{
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Missing MODIFY_PROPERTY permission."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
name|allow
argument_list|(
name|childNPath
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_ALTER_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndModifyPropertyAtSource2
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMovePermissions
argument_list|()
expr_stmt|;
name|allow
argument_list|(
name|childNPath
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_ALTER_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|nodePath3
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|n
operator|.
name|hasProperty
argument_list|(
name|propertyName1
argument_list|)
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
name|propertyName1
argument_list|,
literal|"modified"
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndRemovePropertyAtSource
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMovePermissions
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|nodePath3
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|n
operator|.
name|hasProperty
argument_list|(
name|propertyName1
argument_list|)
argument_list|)
expr_stmt|;
name|n
operator|.
name|getProperty
argument_list|(
name|propertyName1
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Missing REMOVE_PROPERTY permission."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndRemovePropertyAtSource2
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMovePermissions
argument_list|()
expr_stmt|;
name|allow
argument_list|(
name|childNPath
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_REMOVE_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|nodePath3
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|n
operator|.
name|hasProperty
argument_list|(
name|propertyName1
argument_list|)
argument_list|)
expr_stmt|;
name|n
operator|.
name|getProperty
argument_list|(
name|propertyName1
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
comment|/**      * Moving and removing the moved node at destination should be treated like      * a simple removal at the original position.      */
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndRemoveDestination
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|childNPath
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|move
argument_list|(
name|nodePath3
argument_list|,
name|siblingDestPath
argument_list|)
expr_stmt|;
name|Node
name|destNode
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|siblingDestPath
argument_list|)
decl_stmt|;
name|destNode
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveAndMoveSubTreeBack
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO
block|}
block|}
end_class

end_unit

