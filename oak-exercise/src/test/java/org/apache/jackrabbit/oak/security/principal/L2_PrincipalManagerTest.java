begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|principal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Principal Management  * =============================================================================  *  * Title: Principal Manager  * -----------------------------------------------------------------------------  *  * Goal:  * Get familiar with the {@link org.apache.jackrabbit.api.security.principal.PrincipalManager}  * interface.  *  * Exercises:  *  * - {@link #testHasPrincipal()}  *   Walk through the test for an existing principal name to become familiar  *   with the principal lookup.  *   Complete the method {@link #getNonExistingPrincipalName()} such that the test passes.  *  *  * - {@link #testGetPrincipal()}  *   Same as above for {@link PrincipalManager#getPrincipal(String)}  *  * - {@link #testFindPrincipals()}  *   Become familiar with the principal query: Look at the API contract and  *   try different variants of the {@link PrincipalManager#findPrincipals(String, int)} call.  *  * - {@link #testGetGroupMembership()}  *   Retrive the principal groups our test principal is member of.  *   Question: What is the expected result?  *   Question: Is there a minimal set of principals? If yes, why?  *  *  * Additional Exercises  * -----------------------------------------------------------------------------  *  * - {@link #testMyPrincipal()}  *   Make use of the characteristics of the default principal management  *   implementation and adjust the test case such that it passes.  *  *  * Related Exercises  * -----------------------------------------------------------------------------  *  * - {@link L3_EveryoneTest}  *  *</pre>  *  * @see org.apache.jackrabbit.api.security.principal.PrincipalManager  */
end_comment

begin_class
specifier|public
class|class
name|L2_PrincipalManagerTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
name|PrincipalManager
name|principalManager
decl_stmt|;
specifier|private
name|String
name|testPrincipalName
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|principalManager
operator|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getPrincipalManager
argument_list|()
expr_stmt|;
comment|// NOTE: this method call doesn't make to much sense outside of a
comment|// simple test with a very limited number of principals (!!)
name|PrincipalIterator
name|principalIterator
init|=
name|principalManager
operator|.
name|getPrincipals
argument_list|(
name|PrincipalManager
operator|.
name|SEARCH_TYPE_NOT_GROUP
argument_list|)
decl_stmt|;
if|if
condition|(
name|principalIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|testPrincipalName
operator|=
name|principalIterator
operator|.
name|nextPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|testPrincipalName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|getNonExistingPrincipalName
parameter_list|()
block|{
comment|// EXERCISE: return a non existing principal name (Q: what could you do instead of guessing?)
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|testHasPrincipal
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|assertTrue
argument_list|(
name|principalManager
operator|.
name|hasPrincipal
argument_list|(
name|testPrincipalName
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|principalManager
operator|.
name|hasPrincipal
argument_list|(
name|getNonExistingPrincipalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetPrincipal
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Principal
name|principal
init|=
name|principalManager
operator|.
name|getPrincipal
argument_list|(
name|testPrincipalName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|principal
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|principalManager
operator|.
name|getPrincipal
argument_list|(
name|getNonExistingPrincipalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFindPrincipals
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|searchHint
init|=
name|testPrincipalName
decl_stmt|;
comment|// EXERCISE: play with the search hint
name|int
name|searchType
init|=
name|PrincipalManager
operator|.
name|SEARCH_TYPE_ALL
decl_stmt|;
comment|// EXERCISE: modify the type flag
name|PrincipalIterator
name|principalIterator
init|=
name|principalManager
operator|.
name|findPrincipals
argument_list|(
name|testPrincipalName
argument_list|,
name|searchType
argument_list|)
decl_stmt|;
comment|// EXERCISE: what is the expected query result depending on the search hint and the type-flag?
block|}
specifier|public
name|void
name|testGetGroupMembership
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Principal
name|principal
init|=
name|principalManager
operator|.
name|getPrincipal
argument_list|(
name|testPrincipalName
argument_list|)
decl_stmt|;
name|PrincipalIterator
name|groups
init|=
name|principalManager
operator|.
name|getGroupMembership
argument_list|(
name|principal
argument_list|)
decl_stmt|;
comment|// EXERCISE: what group principals do you expect here?
block|}
specifier|public
name|void
name|testMyPrincipal
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|principalName
init|=
literal|"myPrincipal"
decl_stmt|;
comment|// EXERCISE : fix the test case
comment|// HINT : take advantage of the default implemenation (i.e. it's relation to user management)
try|try
block|{
name|Principal
name|testPrincipal
init|=
name|principalManager
operator|.
name|getPrincipal
argument_list|(
name|principalName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testPrincipal
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|groupNames
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"myGroup"
argument_list|,
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|PrincipalIterator
name|groups
init|=
name|principalManager
operator|.
name|getGroupMembership
argument_list|(
name|testPrincipal
argument_list|)
decl_stmt|;
while|while
condition|(
name|groups
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|groupNames
operator|.
name|remove
argument_list|(
name|groups
operator|.
name|nextPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|groupNames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// EXERCISE: cleanup
block|}
block|}
block|}
end_class

end_unit

