begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ItemNameMatcher
block|{
specifier|private
specifier|static
specifier|final
name|char
name|WILDCARD_CHAR
init|=
literal|'*'
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OR
init|=
literal|"|"
decl_stmt|;
specifier|private
name|ItemNameMatcher
parameter_list|()
block|{ }
comment|/**      * Matches the name pattern against the specified name.      *<p/>      * The pattern may be a full name or a partial name with one or more      * wildcard characters ("*"), or a disjunction (using the "|" character      * to represent logical<i>OR</i>) of these. For example,      *<p/>      * {@code "jcr:*|foo:bar"}      *<p/>      * would match      *<p/>      * {@code "foo:bar"}, but also {@code "jcr:whatever"}.      *<p/>      *<pre>      * The EBNF for pattern is:      *      * namePattern ::= disjunct {'|' disjunct}      * disjunct ::= name [':' name]      * name ::= '*' |      *          ['*'] fragment {'*' fragment}['*']      * fragment ::= char {char}      * char ::= nonspace | ' '      * nonspace ::= (* Any Unicode character except:      *               '/', ':', '[', ']', '*',      *               ''', '"', '|' or any whitespace      *               character *)      *</pre>      * Note that leading and trailing whitespace around a pattern<i>is</i> ignored.      *      * @param name the name to test the pattern with      * @param pattern the pattern to be matched against the name      * @return true if the specified name matches the pattern      * @see javax.jcr.Node#getNodes(String)      */
specifier|public
specifier|static
name|boolean
name|matches
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|pattern
argument_list|,
name|OR
argument_list|,
literal|false
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
comment|// remove leading& trailing whitespace from token
name|String
name|token
init|=
name|st
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|internalMatches
argument_list|(
name|name
argument_list|,
name|token
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Matches the {@code nameGlob} strings in the passed array against      * the specified name.      *<p>      * A glob may be a full name or a partial name with one or more      * wildcard characters ("{@code *}").      *<p>      * Note that unlike in the case of the {@link #matches(String, String)}      * leading and trailing whitespace around a glob is<i>not</i> ignored.      *      * @param name the name to test the pattern with      * @param nameGlobs an array of globbing strings      * @return true if the specified name matches any of the globs      * @see javax.jcr.Node#getNodes(String[])      */
specifier|public
specifier|static
name|boolean
name|matches
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
name|nameGlobs
parameter_list|)
block|{
for|for
control|(
name|String
name|nameGlob
range|:
name|nameGlobs
control|)
block|{
comment|// use globbing string as-is. Don't trim any leading/trailing whitespace
if|if
condition|(
name|internalMatches
argument_list|(
name|name
argument_list|,
name|nameGlob
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|//------------------------------------------< private>---
comment|/**      * Internal helper used to recursively match the pattern      *      * @param s       The string to be tested      * @param pattern The pattern      * @param sOff    offset within {@code s}      * @param pOff    offset within {@code pattern}.      * @return true if {@code s} matched pattern, else false.      */
specifier|private
specifier|static
name|boolean
name|internalMatches
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|pattern
parameter_list|,
name|int
name|sOff
parameter_list|,
name|int
name|pOff
parameter_list|)
block|{
name|int
name|pLen
init|=
name|pattern
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|sLen
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|pOff
operator|>=
name|pLen
condition|)
block|{
if|if
condition|(
name|sOff
operator|>=
name|sLen
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
name|sOff
argument_list|)
operator|==
literal|'['
condition|)
block|{
comment|// check for subscript notation (e.g. "whatever[1]")
comment|// the entire pattern matched up to the subscript:
comment|// -> ignore the subscript
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|sOff
operator|>=
name|sLen
operator|&&
name|pattern
operator|.
name|charAt
argument_list|(
name|pOff
argument_list|)
operator|!=
name|WILDCARD_CHAR
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// check for a '*' as the next pattern char; this is handled by
comment|// a recursive call for each postfix of the name.
if|if
condition|(
name|pattern
operator|.
name|charAt
argument_list|(
name|pOff
argument_list|)
operator|==
name|WILDCARD_CHAR
condition|)
block|{
if|if
condition|(
operator|++
name|pOff
operator|>=
name|pLen
condition|)
block|{
return|return
literal|true
return|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|internalMatches
argument_list|(
name|s
argument_list|,
name|pattern
argument_list|,
name|sOff
argument_list|,
name|pOff
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|sOff
operator|>=
name|sLen
condition|)
block|{
return|return
literal|false
return|;
block|}
name|sOff
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pOff
operator|<
name|pLen
operator|&&
name|sOff
operator|<
name|sLen
condition|)
block|{
if|if
condition|(
name|pattern
operator|.
name|charAt
argument_list|(
name|pOff
argument_list|)
operator|!=
name|s
operator|.
name|charAt
argument_list|(
name|sOff
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|pOff
operator|++
expr_stmt|;
name|sOff
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

