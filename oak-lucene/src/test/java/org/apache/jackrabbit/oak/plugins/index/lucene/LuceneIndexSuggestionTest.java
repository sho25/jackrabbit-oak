begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|RowIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NODE_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|INDEX_RULES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ConstantConditions"
argument_list|)
specifier|public
class|class
name|LuceneIndexSuggestionTest
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_USER_NAME
init|=
literal|"testUserName"
decl_stmt|;
specifier|private
name|Repository
name|repository
init|=
literal|null
decl_stmt|;
specifier|private
name|JackrabbitSession
name|session
init|=
literal|null
decl_stmt|;
specifier|private
name|Node
name|root
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|LuceneIndexProvider
name|provider
init|=
operator|new
name|LuceneIndexProvider
argument_list|()
decl_stmt|;
name|Jcr
name|jcr
init|=
operator|new
name|Jcr
argument_list|()
operator|.
name|with
argument_list|(
operator|(
operator|(
name|QueryIndexProvider
operator|)
name|provider
operator|)
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|Observer
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|LuceneIndexEditorProvider
argument_list|()
argument_list|)
decl_stmt|;
name|repository
operator|=
name|jcr
operator|.
name|createRepository
argument_list|()
expr_stmt|;
name|session
operator|=
operator|(
name|JackrabbitSession
operator|)
name|repository
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|=
name|session
operator|.
name|getRootNode
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createSuggestIndex
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|indexedNodeType
parameter_list|,
name|String
name|indexedPropertyName
parameter_list|)
throws|throws
name|Exception
block|{
name|createSuggestIndex
argument_list|(
name|name
argument_list|,
name|indexedNodeType
argument_list|,
name|indexedPropertyName
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createSuggestIndex
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|indexedNodeType
parameter_list|,
name|String
name|indexedPropertyName
parameter_list|,
name|boolean
name|addFullText
parameter_list|,
name|boolean
name|suggestAnalyzed
parameter_list|)
throws|throws
name|Exception
block|{
name|Node
name|def
init|=
name|root
operator|.
name|getNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|addNode
argument_list|(
name|name
argument_list|,
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|)
decl_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|,
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|COMPAT_MODE
argument_list|,
name|IndexFormatVersion
operator|.
name|V2
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestAnalyzed
condition|)
block|{
name|def
operator|.
name|addNode
argument_list|(
name|LuceneIndexConstants
operator|.
name|SUGGESTION_CONFIG
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"suggestAnalyzed"
argument_list|,
name|suggestAnalyzed
argument_list|)
expr_stmt|;
block|}
name|Node
name|propertyIdxDef
init|=
name|def
operator|.
name|addNode
argument_list|(
name|INDEX_RULES
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
operator|.
name|addNode
argument_list|(
name|indexedNodeType
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
operator|.
name|addNode
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"indexedProperty"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|propertyIdxDef
operator|.
name|setProperty
argument_list|(
literal|"propertyIndex"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|propertyIdxDef
operator|.
name|setProperty
argument_list|(
literal|"analyzed"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|propertyIdxDef
operator|.
name|setProperty
argument_list|(
literal|"useInSuggest"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|addFullText
condition|)
block|{
name|propertyIdxDef
operator|.
name|setProperty
argument_list|(
literal|"nodeScopeIndex"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|propertyIdxDef
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|indexedPropertyName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Utility method to check suggestion over {@code nodeType} when the index definition also created for      * the same type      */
specifier|private
name|void
name|checkSuggestions
parameter_list|(
specifier|final
name|String
name|nodeType
parameter_list|,
specifier|final
name|String
name|indexPropName
parameter_list|,
specifier|final
name|String
name|indexPropValue
parameter_list|,
specifier|final
name|boolean
name|addFullText
parameter_list|,
specifier|final
name|boolean
name|useUserSession
parameter_list|,
specifier|final
name|String
name|suggestQueryText
parameter_list|,
specifier|final
name|boolean
name|shouldSuggest
parameter_list|,
specifier|final
name|boolean
name|suggestAnalyzed
parameter_list|)
throws|throws
name|Exception
block|{
name|checkSuggestions
argument_list|(
name|nodeType
argument_list|,
name|nodeType
argument_list|,
name|indexPropName
argument_list|,
name|indexPropValue
argument_list|,
name|addFullText
argument_list|,
name|useUserSession
argument_list|,
name|suggestQueryText
argument_list|,
name|shouldSuggest
argument_list|,
name|suggestAnalyzed
argument_list|)
expr_stmt|;
block|}
comment|/**      * Utility method to check suggestion over {@code queryNodeType} when the index definition is created for      * {@code indexNodeType}      */
specifier|private
name|void
name|checkSuggestions
parameter_list|(
specifier|final
name|String
name|indexNodeType
parameter_list|,
specifier|final
name|String
name|queryNodeType
parameter_list|,
specifier|final
name|String
name|indexPropName
parameter_list|,
specifier|final
name|String
name|indexPropValue
parameter_list|,
specifier|final
name|boolean
name|addFullText
parameter_list|,
specifier|final
name|boolean
name|useUserSession
parameter_list|,
specifier|final
name|String
name|suggestQueryText
parameter_list|,
specifier|final
name|boolean
name|shouldSuggest
parameter_list|,
specifier|final
name|boolean
name|suggestAnalyzed
parameter_list|)
throws|throws
name|Exception
block|{
name|createSuggestIndex
argument_list|(
literal|"lucene-suggest"
argument_list|,
name|indexNodeType
argument_list|,
name|indexPropName
argument_list|,
name|addFullText
argument_list|,
name|suggestAnalyzed
argument_list|)
expr_stmt|;
name|Node
name|indexedNode
init|=
name|root
operator|.
name|addNode
argument_list|(
literal|"indexedNode1"
argument_list|,
name|queryNodeType
argument_list|)
decl_stmt|;
name|indexedNode
operator|.
name|setProperty
argument_list|(
name|indexPropName
argument_list|,
name|indexPropValue
operator|+
literal|" 1"
argument_list|)
expr_stmt|;
name|indexedNode
operator|=
name|root
operator|.
name|addNode
argument_list|(
literal|"indexedNode2"
argument_list|,
name|queryNodeType
argument_list|)
expr_stmt|;
name|indexedNode
operator|.
name|setProperty
argument_list|(
name|indexPropName
argument_list|,
name|indexPropValue
operator|+
literal|" 2"
argument_list|)
expr_stmt|;
if|if
condition|(
name|useUserSession
condition|)
block|{
name|session
operator|.
name|getUserManager
argument_list|()
operator|.
name|createUser
argument_list|(
name|TEST_USER_NAME
argument_list|,
name|TEST_USER_NAME
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|userSession
init|=
name|session
decl_stmt|;
if|if
condition|(
name|useUserSession
condition|)
block|{
name|AccessControlUtils
operator|.
name|allow
argument_list|(
name|indexedNode
argument_list|,
name|TEST_USER_NAME
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|userSession
operator|=
name|repository
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|TEST_USER_NAME
argument_list|,
name|TEST_USER_NAME
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|suggQuery
init|=
name|createSuggestQuery
argument_list|(
name|queryNodeType
argument_list|,
name|suggestQueryText
argument_list|)
decl_stmt|;
name|QueryManager
name|queryManager
init|=
name|userSession
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|QueryResult
name|result
init|=
name|queryManager
operator|.
name|createQuery
argument_list|(
name|suggQuery
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|RowIterator
name|rows
init|=
name|result
operator|.
name|getRows
argument_list|()
decl_stmt|;
name|String
name|value
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|rows
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Row
name|firstRow
init|=
name|rows
operator|.
name|nextRow
argument_list|()
decl_stmt|;
name|value
operator|=
name|firstRow
operator|.
name|getValue
argument_list|(
literal|"suggestion"
argument_list|)
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|shouldSuggest
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"There should be some suggestion"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
literal|"There shouldn't be any suggestion"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|createSuggestQuery
parameter_list|(
name|String
name|nodeTypeName
parameter_list|,
name|String
name|suggestFor
parameter_list|)
block|{
return|return
literal|"SELECT [rep:suggest()] as suggestion, [jcr:score] as score  FROM ["
operator|+
name|nodeTypeName
operator|+
literal|"] WHERE suggest('"
operator|+
name|suggestFor
operator|+
literal|"')"
return|;
block|}
comment|//OAK-3825
annotation|@
name|Test
specifier|public
name|void
name|suggestNodeName
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|nodeType
init|=
literal|"nt:unstructured"
decl_stmt|;
name|createSuggestIndex
argument_list|(
literal|"lucene-suggest"
argument_list|,
name|nodeType
argument_list|,
name|LuceneIndexConstants
operator|.
name|PROPDEF_PROP_NODE_NAME
argument_list|)
expr_stmt|;
name|root
operator|.
name|addNode
argument_list|(
literal|"indexedNode"
argument_list|,
name|nodeType
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|suggQuery
init|=
name|createSuggestQuery
argument_list|(
name|nodeType
argument_list|,
literal|"indexedn"
argument_list|)
decl_stmt|;
name|QueryManager
name|queryManager
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|QueryResult
name|result
init|=
name|queryManager
operator|.
name|createQuery
argument_list|(
name|suggQuery
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|RowIterator
name|rows
init|=
name|result
operator|.
name|getRows
argument_list|()
decl_stmt|;
name|String
name|value
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|rows
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Row
name|firstRow
init|=
name|rows
operator|.
name|nextRow
argument_list|()
decl_stmt|;
name|value
operator|=
name|firstRow
operator|.
name|getValue
argument_list|(
literal|"suggestion"
argument_list|)
operator|.
name|getString
argument_list|()
expr_stmt|;
break|break;
block|}
name|assertEquals
argument_list|(
literal|"Node name should be suggested"
argument_list|,
literal|"indexedNode"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|//OAK-3157
annotation|@
name|Test
specifier|public
name|void
name|testSuggestQuery
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|nodeType
init|=
literal|"nt:unstructured"
decl_stmt|;
specifier|final
name|String
name|indexPropName
init|=
literal|"description"
decl_stmt|;
specifier|final
name|String
name|indexPropValue
init|=
literal|"this is just a sample text which should get some response in suggestions"
decl_stmt|;
specifier|final
name|String
name|suggestQueryText
init|=
literal|"th"
decl_stmt|;
specifier|final
name|boolean
name|shouldSuggest
init|=
literal|true
decl_stmt|;
name|checkSuggestions
argument_list|(
name|nodeType
argument_list|,
name|indexPropName
argument_list|,
name|indexPropValue
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|suggestQueryText
argument_list|,
name|shouldSuggest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|//OAK-3156
annotation|@
name|Test
specifier|public
name|void
name|testSuggestQueryWithUserAccess
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|nodeType
init|=
literal|"nt:unstructured"
decl_stmt|;
specifier|final
name|String
name|indexPropName
init|=
literal|"description"
decl_stmt|;
specifier|final
name|String
name|indexPropValue
init|=
literal|"this is just a sample text which should get some response in suggestions"
decl_stmt|;
specifier|final
name|String
name|suggestQueryText
init|=
literal|"th"
decl_stmt|;
specifier|final
name|boolean
name|shouldSuggest
init|=
literal|true
decl_stmt|;
name|checkSuggestions
argument_list|(
name|nodeType
argument_list|,
name|indexPropName
argument_list|,
name|indexPropValue
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|suggestQueryText
argument_list|,
name|shouldSuggest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|//OAK-3156
annotation|@
name|Test
specifier|public
name|void
name|testSuggestQueryFromMoreGeneralNodeType
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|indexNodeType
init|=
literal|"nt:base"
decl_stmt|;
specifier|final
name|String
name|queryNodeType
init|=
literal|"oak:Unstructured"
decl_stmt|;
specifier|final
name|String
name|indexPropName
init|=
literal|"description"
decl_stmt|;
specifier|final
name|String
name|indexPropValue
init|=
literal|"this is just a sample text which should get some response in suggestions"
decl_stmt|;
specifier|final
name|String
name|suggestQueryText
init|=
literal|"th"
decl_stmt|;
specifier|final
name|boolean
name|shouldSuggest
init|=
literal|false
decl_stmt|;
name|checkSuggestions
argument_list|(
name|indexNodeType
argument_list|,
name|queryNodeType
argument_list|,
name|indexPropName
argument_list|,
name|indexPropValue
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|suggestQueryText
argument_list|,
name|shouldSuggest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|//OAK-3156
annotation|@
name|Test
specifier|public
name|void
name|testSuggestQueryOnNonNtBase
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|nodeType
init|=
literal|"oak:Unstructured"
decl_stmt|;
specifier|final
name|String
name|indexPropName
init|=
literal|"description"
decl_stmt|;
specifier|final
name|String
name|indexPropValue
init|=
literal|"this is just a sample text which should get some response in suggestions"
decl_stmt|;
specifier|final
name|String
name|suggestQueryText
init|=
literal|"th"
decl_stmt|;
specifier|final
name|boolean
name|shouldSuggest
init|=
literal|true
decl_stmt|;
name|checkSuggestions
argument_list|(
name|nodeType
argument_list|,
name|indexPropName
argument_list|,
name|indexPropValue
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|suggestQueryText
argument_list|,
name|shouldSuggest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|//OAK-3509
annotation|@
name|Test
specifier|public
name|void
name|testMultipleSuggestions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|nodeType
init|=
literal|"oak:Unstructured"
decl_stmt|;
specifier|final
name|String
name|indexPropName
init|=
literal|"description"
decl_stmt|;
specifier|final
name|String
name|indexPropValue
init|=
literal|"this is just a sample text which should get some response in suggestions"
decl_stmt|;
specifier|final
name|String
name|suggestQueryText
init|=
literal|"th"
decl_stmt|;
specifier|final
name|boolean
name|shouldSuggest
init|=
literal|true
decl_stmt|;
name|checkSuggestions
argument_list|(
name|nodeType
argument_list|,
name|indexPropName
argument_list|,
name|indexPropValue
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|suggestQueryText
argument_list|,
name|shouldSuggest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|//OAK-3407
annotation|@
name|Test
specifier|public
name|void
name|testSuggestQueryAnalyzed
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|nodeType
init|=
literal|"nt:unstructured"
decl_stmt|;
specifier|final
name|String
name|indexPropName
init|=
literal|"description"
decl_stmt|;
specifier|final
name|String
name|indexPropValue
init|=
literal|"this is just a sample text which should get some response in suggestions"
decl_stmt|;
specifier|final
name|String
name|suggestQueryText
init|=
literal|"sa"
decl_stmt|;
name|checkSuggestions
argument_list|(
name|nodeType
argument_list|,
name|indexPropName
argument_list|,
name|indexPropValue
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|suggestQueryText
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//OAK-3149
annotation|@
name|Test
specifier|public
name|void
name|testSuggestQueryInfix
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|nodeType
init|=
literal|"nt:unstructured"
decl_stmt|;
specifier|final
name|String
name|indexPropName
init|=
literal|"description"
decl_stmt|;
specifier|final
name|String
name|indexPropValue
init|=
literal|"this is just a sample text which should get some response in suggestions"
decl_stmt|;
specifier|final
name|String
name|suggestQueryText
init|=
literal|"sa"
decl_stmt|;
name|checkSuggestions
argument_list|(
name|nodeType
argument_list|,
name|indexPropName
argument_list|,
name|indexPropValue
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|suggestQueryText
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

