begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|codec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PushbackInputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hasher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBufAllocator
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|stream
operator|.
name|ChunkedInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ChunkedBlobStream
implements|implements
name|ChunkedInput
argument_list|<
name|ByteBuf
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChunkedBlobStream
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|clientId
decl_stmt|;
specifier|private
specifier|final
name|String
name|blobId
decl_stmt|;
specifier|private
specifier|final
name|long
name|length
decl_stmt|;
specifier|private
specifier|final
name|PushbackInputStream
name|in
decl_stmt|;
specifier|private
specifier|final
name|int
name|chunkSize
decl_stmt|;
specifier|private
name|long
name|offset
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
comment|/**      * @param clientId      *            identifier for client requesting the blob      * @param blobId      *            blob identifier      * @param length      *            blob length      * @param in      *            blob stream      * @param chunkSize      *            the number of bytes to fetch on each      *            {@link #readChunk(ChannelHandlerContext)} call      */
specifier|public
name|ChunkedBlobStream
parameter_list|(
name|String
name|clientId
parameter_list|,
name|String
name|blobId
parameter_list|,
name|long
name|length
parameter_list|,
name|InputStream
name|in
parameter_list|,
name|int
name|chunkSize
parameter_list|)
block|{
name|this
operator|.
name|clientId
operator|=
name|clientId
expr_stmt|;
name|this
operator|.
name|blobId
operator|=
name|blobId
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"in"
argument_list|)
throw|;
block|}
if|if
condition|(
name|chunkSize
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"chunkSize: "
operator|+
name|chunkSize
operator|+
literal|" (expected: a positive integer)"
argument_list|)
throw|;
block|}
if|if
condition|(
name|in
operator|instanceof
name|PushbackInputStream
condition|)
block|{
name|this
operator|.
name|in
operator|=
operator|(
name|PushbackInputStream
operator|)
name|in
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|in
operator|=
operator|new
name|PushbackInputStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|chunkSize
operator|=
name|chunkSize
expr_stmt|;
block|}
comment|/**      * Returns the number of transferred bytes.      */
specifier|public
name|long
name|transferredBytes
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEndOfInput
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return
literal|true
return|;
block|}
name|int
name|b
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|<
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|in
operator|.
name|unread
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuf
name|readChunk
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isEndOfInput
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|boolean
name|release
init|=
literal|true
decl_stmt|;
name|ByteBuf
name|decorated
init|=
name|ctx
operator|.
name|alloc
argument_list|()
operator|.
name|buffer
argument_list|()
decl_stmt|;
try|try
block|{
name|ByteBuf
name|buffer
init|=
name|ctx
operator|.
name|alloc
argument_list|()
operator|.
name|buffer
argument_list|()
decl_stmt|;
name|int
name|written
init|=
name|buffer
operator|.
name|writeBytes
argument_list|(
name|in
argument_list|,
name|chunkSize
argument_list|)
decl_stmt|;
name|decorated
operator|=
name|decorateRawBuffer
argument_list|(
name|ctx
operator|.
name|alloc
argument_list|()
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|written
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending chunk {}/{} of size {} to client {}"
argument_list|,
name|roundDiv
argument_list|(
name|offset
argument_list|,
name|chunkSize
argument_list|)
argument_list|,
name|roundDiv
argument_list|(
name|length
argument_list|,
name|chunkSize
argument_list|)
argument_list|,
name|written
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
name|release
operator|=
literal|false
expr_stmt|;
return|return
name|decorated
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|release
condition|)
block|{
name|decorated
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|ByteBuf
name|decorateRawBuffer
parameter_list|(
name|ByteBufAllocator
name|allocator
parameter_list|,
name|ByteBuf
name|buffer
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|buffer
operator|.
name|readableBytes
argument_list|()
index|]
decl_stmt|;
name|buffer
operator|.
name|readBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|release
argument_list|()
expr_stmt|;
name|byte
name|mask
init|=
name|createMask
argument_list|(
name|data
operator|.
name|length
argument_list|)
decl_stmt|;
name|Hasher
name|hasher
init|=
name|Hashing
operator|.
name|murmur3_32
argument_list|()
operator|.
name|newHasher
argument_list|()
decl_stmt|;
name|long
name|hash
init|=
name|hasher
operator|.
name|putByte
argument_list|(
name|mask
argument_list|)
operator|.
name|putBytes
argument_list|(
name|data
argument_list|)
operator|.
name|hash
argument_list|()
operator|.
name|padToLong
argument_list|()
decl_stmt|;
name|byte
index|[]
name|blobIdBytes
init|=
name|blobId
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuf
name|out
init|=
name|allocator
operator|.
name|buffer
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|1
operator|+
literal|1
operator|+
literal|4
operator|+
name|blobIdBytes
operator|.
name|length
operator|+
literal|8
operator|+
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|Messages
operator|.
name|HEADER_BLOB
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|mask
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|blobIdBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|blobIdBytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|hash
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
specifier|private
specifier|static
name|int
name|roundDiv
parameter_list|(
name|long
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|x
operator|/
operator|(
name|double
operator|)
name|y
argument_list|)
return|;
block|}
specifier|private
name|byte
name|createMask
parameter_list|(
name|int
name|bytesRead
parameter_list|)
block|{
name|byte
name|mask
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|offset
operator|==
literal|0
condition|)
block|{
name|mask
operator|=
call|(
name|byte
call|)
argument_list|(
name|mask
operator||
operator|(
literal|1
operator|<<
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|offset
operator|+
name|bytesRead
operator|==
name|length
condition|)
block|{
name|mask
operator|=
call|(
name|byte
call|)
argument_list|(
name|mask
operator||
operator|(
literal|1
operator|<<
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mask
return|;
block|}
block|}
end_class

end_unit

