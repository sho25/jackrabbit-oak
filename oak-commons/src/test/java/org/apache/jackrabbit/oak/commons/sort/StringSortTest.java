begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|sort
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Collections2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|StringSortTest
block|{
specifier|private
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
init|=
operator|new
name|PathComparator
argument_list|()
decl_stmt|;
specifier|private
name|StringSort
name|collector
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|inMemory
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|createTestPaths
argument_list|(
literal|5
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|collector
operator|=
operator|new
name|StringSort
argument_list|(
name|paths
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|addPathsToCollector
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|assertConstraints
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|collector
operator|.
name|usingFile
argument_list|()
argument_list|)
expr_stmt|;
name|collector
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|overflowToDisk
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Create ~50k paths
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|createTestPaths
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|collector
operator|=
operator|new
name|StringSort
argument_list|(
literal|1000
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|addPathsToCollector
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|collector
operator|.
name|usingFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertConstraints
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|collector
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortWithEntriesHavingLineBreaks
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"/a"
argument_list|,
literal|"/a/b\nc"
argument_list|,
literal|"/a/b\rd"
argument_list|,
literal|"/a/b\r\ne"
argument_list|,
literal|"/a/c"
argument_list|)
decl_stmt|;
name|collector
operator|=
operator|new
name|StringSort
argument_list|(
literal|0
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|addPathsToCollector
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|collector
operator|.
name|usingFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertConstraints
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|collector
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test for the case where sorting order should not be affected by escaping      *      * "aa", "aa\n1", "aa\r2", "aa\\" -> "aa", "aa\n1", "aa\r2", "aa\\"      * "aa", "aa\\n1", "aa\\r2", "aa\\\\" -> "aa", "aa\\", "aa\n1", "aa\r2",      *      * In above case the sorting order for escaped string is different. So      * it needs to be ensured that sorting order remain un affected by escaping      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|sortWithEntriesHavingLineBreaks2
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"/a"
argument_list|,
literal|"/a/a\nc"
argument_list|,
literal|"/a/a\rd"
argument_list|,
literal|"/a/a\r\ne"
argument_list|,
literal|"/a/a\\"
argument_list|)
decl_stmt|;
name|collector
operator|=
operator|new
name|StringSort
argument_list|(
literal|0
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|addPathsToCollector
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|collector
operator|.
name|usingFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertConstraints
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|collector
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|assertConstraints
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|paths
operator|.
name|size
argument_list|()
argument_list|,
name|collector
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|paths
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|collector
operator|.
name|sort
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|sortedPaths
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|collector
operator|.
name|getIds
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|paths
operator|.
name|size
argument_list|()
argument_list|,
name|sortedPaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|paths
argument_list|,
name|sortedPaths
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addPathsToCollector
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|collector
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|createTestPaths
parameter_list|(
name|int
name|depth
parameter_list|,
name|boolean
name|permutation
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|rootPaths
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|permutation
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|newRoots
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|permuts
range|:
name|Collections2
operator|.
name|orderedPermutations
argument_list|(
name|rootPaths
argument_list|)
control|)
block|{
name|newRoots
operator|.
name|add
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|""
argument_list|)
operator|.
name|join
argument_list|(
name|permuts
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rootPaths
operator|=
name|newRoots
expr_stmt|;
block|}
for|for
control|(
name|String
name|root
range|:
name|rootPaths
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|pathElements
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|pathElements
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|createId
argument_list|(
name|pathElements
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|depth
condition|;
name|i
operator|++
control|)
block|{
name|pathElements
operator|.
name|add
argument_list|(
name|root
operator|+
name|i
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|createId
argument_list|(
name|pathElements
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|idSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|paths
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|paths
operator|.
name|size
argument_list|()
argument_list|,
name|idSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|paths
argument_list|)
expr_stmt|;
return|return
name|paths
return|;
block|}
specifier|private
specifier|static
name|String
name|createId
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|pathElements
parameter_list|)
block|{
return|return
literal|"/"
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|'/'
argument_list|)
operator|.
name|join
argument_list|(
name|pathElements
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|PathComparator
implements|implements
name|Comparator
argument_list|<
name|String
argument_list|>
implements|,
name|Serializable
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|o1
parameter_list|,
name|String
name|o2
parameter_list|)
block|{
name|int
name|d1
init|=
name|pathDepth
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|int
name|d2
init|=
name|pathDepth
argument_list|(
name|o2
argument_list|)
decl_stmt|;
if|if
condition|(
name|d1
operator|!=
name|d2
condition|)
block|{
return|return
name|Integer
operator|.
name|signum
argument_list|(
name|d2
operator|-
name|d1
argument_list|)
return|;
block|}
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|pathDepth
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|depth
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|path
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|depth
operator|++
expr_stmt|;
block|}
block|}
return|return
name|depth
return|;
block|}
block|}
block|}
end_class

end_unit

