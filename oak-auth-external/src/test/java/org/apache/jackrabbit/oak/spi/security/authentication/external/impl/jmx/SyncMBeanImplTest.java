begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityProviderManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalUser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncedIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|TestIdentityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|basic
operator|.
name|DefaultSyncConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|basic
operator|.
name|DefaultSyncContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|DefaultSyncHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|SyncMBeanImplTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SYNC_NAME
init|=
literal|"testSyncName"
decl_stmt|;
specifier|private
specifier|static
name|Repository
name|REPOSITORY
decl_stmt|;
specifier|private
name|ExternalIdentityProvider
name|idp
decl_stmt|;
specifier|private
name|ExternalIdentityProvider
name|foreignIDP
decl_stmt|;
specifier|private
name|DefaultSyncConfig
name|syncConfig
decl_stmt|;
specifier|private
name|SyncMBeanImpl
name|syncMBean
decl_stmt|;
specifier|private
name|SyncManager
name|syncMgr
decl_stmt|;
specifier|private
name|ExternalIdentityProviderManager
name|idpMgr
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|UserManager
name|userManager
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|ids
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
block|{
name|REPOSITORY
operator|=
operator|new
name|Jcr
argument_list|()
operator|.
name|createRepository
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|idp
operator|=
operator|new
name|TestIdentityProvider
argument_list|()
expr_stmt|;
name|foreignIDP
operator|=
operator|new
name|TestIdentityProvider
argument_list|()
block|{
annotation|@
name|Nonnull
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"anotherIDP"
return|;
block|}
block|}
expr_stmt|;
name|syncConfig
operator|=
operator|new
name|DefaultSyncConfig
argument_list|()
expr_stmt|;
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setMembershipNestingDepth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|syncMgr
operator|=
operator|new
name|SyncManager
argument_list|()
block|{
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|SyncHandler
name|getSyncHandler
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|SYNC_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
operator|new
name|DefaultSyncHandler
argument_list|(
name|syncConfig
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|ThrowingSyncHandler
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
operator|new
name|ThrowingSyncHandler
argument_list|(
literal|false
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|ThrowingSyncHandler
operator|.
name|NAME_ALLOWS_IDENTITY_LISTING
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
operator|new
name|ThrowingSyncHandler
argument_list|(
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
expr_stmt|;
name|idpMgr
operator|=
operator|new
name|ExternalIdentityProviderManager
argument_list|()
block|{
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|ExternalIdentityProvider
name|getProvider
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|idp
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
expr_stmt|;
name|syncMBean
operator|=
operator|new
name|SyncMBeanImpl
argument_list|(
name|REPOSITORY
argument_list|,
name|syncMgr
argument_list|,
name|SYNC_NAME
argument_list|,
name|idpMgr
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|=
name|REPOSITORY
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|session
operator|instanceof
name|JackrabbitSession
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
else|else
block|{
name|userManager
operator|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|session
operator|)
operator|.
name|getUserManager
argument_list|()
expr_stmt|;
block|}
name|ids
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|getAllAuthorizableIds
argument_list|(
name|userManager
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|session
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|getAllAuthorizableIds
argument_list|(
name|userManager
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|id
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ids
operator|.
name|remove
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Iterator
argument_list|<
name|String
argument_list|>
name|getAllAuthorizableIds
parameter_list|(
annotation|@
name|Nonnull
name|UserManager
name|userManager
parameter_list|)
throws|throws
name|Exception
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|iter
init|=
name|userManager
operator|.
name|findAuthorizables
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|Iterators
operator|.
name|filter
argument_list|(
name|Iterators
operator|.
name|transform
argument_list|(
name|iter
argument_list|,
operator|new
name|Function
argument_list|<
name|Authorizable
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|Authorizable
name|input
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
return|return
name|input
operator|.
name|getID
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// failed to retrieve ID
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
argument_list|,
name|Predicates
operator|.
name|notNull
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|assertResultMessages
parameter_list|(
annotation|@
name|Nonnull
name|String
index|[]
name|resultMessages
parameter_list|,
name|int
name|expectedSize
parameter_list|,
annotation|@
name|Nonnull
name|String
modifier|...
name|expectedOperations
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|resultMessages
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resultMessages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|rm
init|=
name|resultMessages
index|[
name|i
index|]
decl_stmt|;
name|String
name|op
init|=
name|rm
operator|.
name|substring
argument_list|(
name|rm
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
operator|+
literal|2
argument_list|,
name|rm
operator|.
name|indexOf
argument_list|(
literal|"\","
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedOperations
index|[
name|i
index|]
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertSync
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentity
name|ei
parameter_list|,
annotation|@
name|Nonnull
name|UserManager
name|userManager
parameter_list|)
throws|throws
name|Exception
block|{
name|Authorizable
name|authorizable
decl_stmt|;
if|if
condition|(
name|ei
operator|instanceof
name|ExternalUser
condition|)
block|{
name|authorizable
operator|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|ei
operator|.
name|getId
argument_list|()
argument_list|,
name|User
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authorizable
operator|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|ei
operator|.
name|getId
argument_list|()
argument_list|,
name|Group
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|ei
operator|.
name|getId
argument_list|()
argument_list|,
name|authorizable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ei
operator|.
name|getId
argument_list|()
argument_list|,
name|authorizable
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ei
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|ExternalIdentityRef
operator|.
name|fromString
argument_list|(
name|authorizable
operator|.
name|getProperty
argument_list|(
name|DefaultSyncContext
operator|.
name|REP_EXTERNAL_ID
argument_list|)
index|[
literal|0
index|]
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SyncResult
name|sync
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentityProvider
name|idp
parameter_list|,
annotation|@
name|Nonnull
name|String
name|id
parameter_list|,
name|boolean
name|isGroup
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|sync
argument_list|(
operator|(
name|isGroup
operator|)
condition|?
name|idp
operator|.
name|getGroup
argument_list|(
name|id
argument_list|)
else|:
name|idp
operator|.
name|getUser
argument_list|(
name|id
argument_list|)
argument_list|,
name|idp
argument_list|)
return|;
block|}
specifier|private
name|SyncResult
name|sync
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentity
name|externalIdentity
parameter_list|,
annotation|@
name|Nonnull
name|ExternalIdentityProvider
name|idp
parameter_list|)
throws|throws
name|Exception
block|{
name|SyncContext
name|ctx
init|=
operator|new
name|DefaultSyncContext
argument_list|(
name|syncConfig
argument_list|,
name|idp
argument_list|,
name|userManager
argument_list|,
name|session
operator|.
name|getValueFactory
argument_list|()
argument_list|)
decl_stmt|;
name|SyncResult
name|res
init|=
name|ctx
operator|.
name|sync
argument_list|(
name|externalIdentity
argument_list|)
decl_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getExpectedUserResult
parameter_list|(
name|String
name|expectedOp
parameter_list|,
name|boolean
name|includeGroups
parameter_list|)
throws|throws
name|ExternalIdentityException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expected
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|ExternalUser
argument_list|>
name|it
init|=
name|idp
operator|.
name|listUsers
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExternalUser
name|eu
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|eu
operator|.
name|getId
argument_list|()
argument_list|,
name|expectedOp
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeGroups
condition|)
block|{
for|for
control|(
name|ExternalIdentityRef
name|ref
range|:
name|eu
operator|.
name|getDeclaredGroups
argument_list|()
control|)
block|{
name|expected
operator|.
name|put
argument_list|(
name|ref
operator|.
name|getId
argument_list|()
argument_list|,
name|expectedOp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|expected
return|;
block|}
specifier|private
name|SyncMBeanImpl
name|createThrowingSyncMBean
parameter_list|(
name|boolean
name|allowListIdentities
parameter_list|)
block|{
name|String
name|name
init|=
operator|(
name|allowListIdentities
operator|)
condition|?
name|ThrowingSyncHandler
operator|.
name|NAME_ALLOWS_IDENTITY_LISTING
else|:
name|ThrowingSyncHandler
operator|.
name|NAME
decl_stmt|;
return|return
operator|new
name|SyncMBeanImpl
argument_list|(
name|REPOSITORY
argument_list|,
name|syncMgr
argument_list|,
name|name
argument_list|,
name|idpMgr
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSyncHandlerName
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|SYNC_NAME
argument_list|,
name|syncMBean
operator|.
name|getSyncHandlerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidSyncHandlerName
parameter_list|()
block|{
name|SyncMBeanImpl
name|syncMBean
init|=
operator|new
name|SyncMBeanImpl
argument_list|(
name|REPOSITORY
argument_list|,
name|syncMgr
argument_list|,
literal|"invalid"
argument_list|,
name|idpMgr
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"invalid"
argument_list|,
name|syncMBean
operator|.
name|getSyncHandlerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// calling any sync-operation must fail due to the invalid configuration
try|try
block|{
name|syncMBean
operator|.
name|syncAllExternalUsers
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"syncAllExternalUsers with invalid SyncHandlerName must fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetIDPName
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|idp
operator|.
name|getName
argument_list|()
argument_list|,
name|syncMBean
operator|.
name|getIDPName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidIDPName
parameter_list|()
block|{
name|SyncMBeanImpl
name|syncMBean
init|=
operator|new
name|SyncMBeanImpl
argument_list|(
name|REPOSITORY
argument_list|,
name|syncMgr
argument_list|,
name|SYNC_NAME
argument_list|,
name|idpMgr
argument_list|,
literal|"invalid"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"invalid"
argument_list|,
name|syncMBean
operator|.
name|getIDPName
argument_list|()
argument_list|)
expr_stmt|;
comment|// calling any sync-operation must fail due to the invalid configuration
try|try
block|{
name|syncMBean
operator|.
name|syncAllExternalUsers
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"syncAllExternalUsers with invalid IDP name must fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//success
block|}
block|}
comment|/**      * test users have never been synced before => result must be NSA      */
annotation|@
name|Test
specifier|public
name|void
name|testSyncUsersBefore
parameter_list|()
block|{
name|String
index|[]
name|userIds
init|=
operator|new
name|String
index|[]
block|{
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
block|,
name|TestIdentityProvider
operator|.
name|ID_SECOND_USER
block|}
decl_stmt|;
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncUsers
argument_list|(
name|userIds
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
name|userIds
operator|.
name|length
argument_list|,
literal|"nsa"
argument_list|,
literal|"nsa"
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncMBean
operator|.
name|syncUsers
argument_list|(
name|userIds
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
name|userIds
operator|.
name|length
argument_list|,
literal|"nsa"
argument_list|,
literal|"nsa"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|sync
argument_list|(
name|idp
argument_list|,
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
index|[]
name|userIds
init|=
operator|new
name|String
index|[]
block|{
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
block|,
name|TestIdentityProvider
operator|.
name|ID_SECOND_USER
block|}
decl_stmt|;
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncUsers
argument_list|(
name|userIds
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
name|userIds
operator|.
name|length
argument_list|,
literal|"upd"
argument_list|,
literal|"nsa"
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncMBean
operator|.
name|syncUsers
argument_list|(
name|userIds
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
name|userIds
operator|.
name|length
argument_list|,
literal|"upd"
argument_list|,
literal|"nsa"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncUsersAlwaysForcesSync
parameter_list|()
throws|throws
name|Exception
block|{
name|sync
argument_list|(
name|idp
argument_list|,
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
index|[]
name|userIds
init|=
operator|new
name|String
index|[]
block|{
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
block|,
name|TestIdentityProvider
operator|.
name|ID_SECOND_USER
block|}
decl_stmt|;
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setExpirationTime
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncUsers
argument_list|(
name|userIds
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
name|userIds
operator|.
name|length
argument_list|,
literal|"upd"
argument_list|,
literal|"nsa"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|sync
argument_list|(
name|idp
argument_list|,
literal|"a"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|ids
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
decl_stmt|;
name|syncConfig
operator|.
name|group
argument_list|()
operator|.
name|setExpirationTime
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// force group sync is true by default => exp time is ignored
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncUsers
argument_list|(
name|ids
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
name|ids
operator|.
name|length
argument_list|,
literal|"upd"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncUsersPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|sync
argument_list|(
operator|new
name|TestIdentityProvider
operator|.
name|TestUser
argument_list|(
literal|"thirdUser"
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|idp
argument_list|)
expr_stmt|;
name|sync
argument_list|(
operator|new
name|TestIdentityProvider
operator|.
name|TestGroup
argument_list|(
literal|"gr"
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|idp
argument_list|)
expr_stmt|;
name|Authorizable
index|[]
name|authorizables
init|=
operator|new
name|Authorizable
index|[]
block|{
name|userManager
operator|.
name|getAuthorizable
argument_list|(
literal|"thirdUser"
argument_list|)
block|,
name|userManager
operator|.
name|getAuthorizable
argument_list|(
literal|"gr"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|Authorizable
name|a
range|:
name|authorizables
control|)
block|{
name|String
index|[]
name|ids
init|=
operator|new
name|String
index|[]
block|{
name|a
operator|.
name|getID
argument_list|()
block|}
decl_stmt|;
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncUsers
argument_list|(
name|ids
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
name|ids
operator|.
name|length
argument_list|,
literal|"mis"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|a
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncMBean
operator|.
name|syncUsers
argument_list|(
name|ids
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
name|ids
operator|.
name|length
argument_list|,
literal|"del"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|a
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncUsersNonExisting
parameter_list|()
block|{
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncUsers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"nonExisting"
block|}
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|"nsa"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncUsersLocal
parameter_list|()
block|{
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncUsers
argument_list|(
operator|new
name|String
index|[]
block|{
name|UserConstants
operator|.
name|DEFAULT_ANONYMOUS_ID
block|}
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|"for"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncUsersLocalPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncUsers
argument_list|(
operator|new
name|String
index|[]
block|{
name|UserConstants
operator|.
name|DEFAULT_ANONYMOUS_ID
block|}
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|"for"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|UserConstants
operator|.
name|DEFAULT_ANONYMOUS_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncUsersForeign
parameter_list|()
throws|throws
name|Exception
block|{
comment|// sync user from foreign IDP into the repository
name|SyncResult
name|res
init|=
name|sync
argument_list|(
name|foreignIDP
argument_list|,
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foreignIDP
operator|.
name|getUser
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|)
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|res
operator|.
name|getIdentity
argument_list|()
operator|.
name|getExternalIdRef
argument_list|()
argument_list|)
expr_stmt|;
comment|// syncUsers with testIDP must detect the foreign status
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncUsers
argument_list|(
operator|new
name|String
index|[]
block|{
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
block|}
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|"for"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|)
argument_list|)
expr_stmt|;
comment|// same expected with 'purge' set to true
name|result
operator|=
name|syncMBean
operator|.
name|syncUsers
argument_list|(
operator|new
name|String
index|[]
block|{
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|"for"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncGroupsForeign
parameter_list|()
throws|throws
name|Exception
block|{
comment|// sync user from foreign IDP into the repository
name|SyncResult
name|res
init|=
name|sync
argument_list|(
name|foreignIDP
argument_list|,
literal|"a"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foreignIDP
operator|.
name|getGroup
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|res
operator|.
name|getIdentity
argument_list|()
operator|.
name|getExternalIdRef
argument_list|()
argument_list|)
expr_stmt|;
comment|// syncUsers with testIDP must detect the foreign status
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncUsers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|"for"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
comment|// same expected with 'purge' set to true
name|result
operator|=
name|syncMBean
operator|.
name|syncUsers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|"for"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/OAK-4360">OAK-4360</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testSyncUserException
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|u
init|=
name|userManager
operator|.
name|createUser
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_EXCEPTION
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|u
operator|.
name|setProperty
argument_list|(
name|DefaultSyncContext
operator|.
name|REP_EXTERNAL_ID
argument_list|,
name|session
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
operator|new
name|ExternalIdentityRef
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_EXCEPTION
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncUsers
argument_list|(
operator|new
name|String
index|[]
block|{
name|TestIdentityProvider
operator|.
name|ID_EXCEPTION
block|}
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|"ERR"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncUserThrowingHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|sync
argument_list|(
name|idp
argument_list|,
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
index|[]
name|result
init|=
name|createThrowingSyncMBean
argument_list|(
literal|false
argument_list|)
operator|.
name|syncUsers
argument_list|(
operator|new
name|String
index|[]
block|{
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
block|}
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|"ERR"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitialSyncExternalUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|)
decl_stmt|;
name|String
index|[]
name|externalId
init|=
operator|new
name|String
index|[]
block|{
name|externalUser
operator|.
name|getExternalId
argument_list|()
operator|.
name|getString
argument_list|()
block|}
decl_stmt|;
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncExternalUsers
argument_list|(
name|externalId
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|"add"
argument_list|)
expr_stmt|;
name|User
name|testUser
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testUser
argument_list|)
expr_stmt|;
for|for
control|(
name|ExternalIdentityRef
name|groupRef
range|:
name|externalUser
operator|.
name|getDeclaredGroups
argument_list|()
control|)
block|{
name|assertNotNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|groupRef
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitialSyncExternalUsersNoNesting
parameter_list|()
throws|throws
name|Exception
block|{
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setMembershipNestingDepth
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|)
decl_stmt|;
name|String
index|[]
name|externalId
init|=
operator|new
name|String
index|[]
block|{
name|externalUser
operator|.
name|getExternalId
argument_list|()
operator|.
name|getString
argument_list|()
block|}
decl_stmt|;
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncExternalUsers
argument_list|(
name|externalId
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|"add"
argument_list|)
expr_stmt|;
name|User
name|testUser
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testUser
argument_list|)
expr_stmt|;
for|for
control|(
name|ExternalIdentityRef
name|groupRef
range|:
name|externalUser
operator|.
name|getDeclaredGroups
argument_list|()
control|)
block|{
name|assertNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|groupRef
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncExternalUsersLastSyncedProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|)
decl_stmt|;
name|String
index|[]
name|externalId
init|=
operator|new
name|String
index|[]
block|{
name|externalUser
operator|.
name|getExternalId
argument_list|()
operator|.
name|getString
argument_list|()
block|}
decl_stmt|;
name|syncMBean
operator|.
name|syncExternalUsers
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
name|User
name|testUser
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|lastSynced
init|=
name|testUser
operator|.
name|getProperty
argument_list|(
name|DefaultSyncContext
operator|.
name|REP_LAST_SYNCED
argument_list|)
index|[
literal|0
index|]
operator|.
name|getLong
argument_list|()
decl_stmt|;
for|for
control|(
name|ExternalIdentityRef
name|groupRef
range|:
name|externalUser
operator|.
name|getDeclaredGroups
argument_list|()
control|)
block|{
name|Group
name|gr
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|groupRef
operator|.
name|getId
argument_list|()
argument_list|,
name|Group
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|groupLastSynced
init|=
name|gr
operator|.
name|getProperty
argument_list|(
name|DefaultSyncContext
operator|.
name|REP_LAST_SYNCED
argument_list|)
index|[
literal|0
index|]
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|lastSynced
operator|==
name|groupLastSynced
argument_list|)
expr_stmt|;
block|}
comment|// default value for forceGroup sync is defined to be 'true' => verify result
name|syncMBean
operator|.
name|syncExternalUsers
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
name|testUser
operator|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|,
name|User
operator|.
name|class
argument_list|)
expr_stmt|;
name|long
name|lastSynced2
init|=
name|testUser
operator|.
name|getProperty
argument_list|(
name|DefaultSyncContext
operator|.
name|REP_LAST_SYNCED
argument_list|)
index|[
literal|0
index|]
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|lastSynced
operator|<
name|lastSynced2
argument_list|)
expr_stmt|;
for|for
control|(
name|ExternalIdentityRef
name|groupRef
range|:
name|externalUser
operator|.
name|getDeclaredGroups
argument_list|()
control|)
block|{
name|Group
name|gr
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|groupRef
operator|.
name|getId
argument_list|()
argument_list|,
name|Group
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|groupLastSynced
init|=
name|gr
operator|.
name|getProperty
argument_list|(
name|DefaultSyncContext
operator|.
name|REP_LAST_SYNCED
argument_list|)
index|[
literal|0
index|]
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|lastSynced2
operator|==
name|groupLastSynced
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitialSyncExternalGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalGroup
name|externalGroup
init|=
name|idp
operator|.
name|getGroup
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|String
index|[]
name|externalId
init|=
operator|new
name|String
index|[]
block|{
name|externalGroup
operator|.
name|getExternalId
argument_list|()
operator|.
name|getString
argument_list|()
block|}
decl_stmt|;
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncExternalUsers
argument_list|(
name|externalId
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|"add"
argument_list|)
expr_stmt|;
name|Group
name|aGroup
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|externalGroup
operator|.
name|getId
argument_list|()
argument_list|,
name|Group
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|aGroup
argument_list|)
expr_stmt|;
comment|// membership of groups are not synced (unless imposed by user-sync with membership depth)
for|for
control|(
name|ExternalIdentityRef
name|groupRef
range|:
name|externalGroup
operator|.
name|getDeclaredGroups
argument_list|()
control|)
block|{
name|assertNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|groupRef
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncExternalNonExisting
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentityRef
name|ref
init|=
operator|new
name|ExternalIdentityRef
argument_list|(
literal|"nonExisting"
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncExternalUsers
argument_list|(
operator|new
name|String
index|[]
block|{
name|ref
operator|.
name|getString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|"nsi"
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/OAK-4346">OAK-4346</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testSyncExternalLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentityRef
name|ref
init|=
operator|new
name|ExternalIdentityRef
argument_list|(
name|UserConstants
operator|.
name|DEFAULT_ANONYMOUS_ID
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncExternalUsers
argument_list|(
operator|new
name|String
index|[]
block|{
name|ref
operator|.
name|getString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|"for"
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/OAK-4346">OAK-4346</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testSyncExternalForeign
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentityRef
name|ref
init|=
operator|new
name|ExternalIdentityRef
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|,
literal|"anotherIDP"
argument_list|)
decl_stmt|;
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncExternalUsers
argument_list|(
operator|new
name|String
index|[]
block|{
name|ref
operator|.
name|getString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|"for"
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncMBean
operator|.
name|syncExternalUsers
argument_list|(
operator|new
name|String
index|[]
block|{
name|ref
operator|.
name|getString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|"for"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncExternalUserException
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentityRef
name|ref
init|=
operator|new
name|ExternalIdentityRef
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_EXCEPTION
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncExternalUsers
argument_list|(
operator|new
name|String
index|[]
block|{
name|ref
operator|.
name|getString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|"ERR"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncExternalUserThrowingHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalIdentityRef
name|ref
init|=
operator|new
name|ExternalIdentityRef
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|result
init|=
name|createThrowingSyncMBean
argument_list|(
literal|false
argument_list|)
operator|.
name|syncExternalUsers
argument_list|(
operator|new
name|String
index|[]
block|{
name|ref
operator|.
name|getString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|"ERR"
argument_list|)
expr_stmt|;
block|}
comment|/**      * test users have never been synced before => result must be empty      */
annotation|@
name|Test
specifier|public
name|void
name|testSyncAllUsersBefore
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncAllUsers
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncAllUsers
parameter_list|()
throws|throws
name|Exception
block|{
comment|// first sync external users into the repo
name|syncMBean
operator|.
name|syncAllExternalUsers
argument_list|()
expr_stmt|;
comment|// verify effect of syncAllUsers
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncAllUsers
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expected
init|=
name|getExpectedUserResult
argument_list|(
literal|"upd"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|expected
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|expected
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|expected
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ExternalIdentity
name|ei
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ei
operator|==
literal|null
condition|)
block|{
name|ei
operator|=
name|idp
operator|.
name|getGroup
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|assertSync
argument_list|(
name|ei
argument_list|,
name|userManager
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncAllGroups
parameter_list|()
throws|throws
name|Exception
block|{
comment|// first sync external users into the repo
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expected
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|ExternalGroup
argument_list|>
name|grIt
init|=
name|idp
operator|.
name|listGroups
argument_list|()
decl_stmt|;
while|while
condition|(
name|grIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExternalGroup
name|eg
init|=
name|grIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|sync
argument_list|(
name|idp
argument_list|,
name|eg
operator|.
name|getId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|eg
operator|.
name|getId
argument_list|()
argument_list|,
literal|"upd"
argument_list|)
expr_stmt|;
block|}
comment|// verify effect of syncAllUsers (which in this case are groups)
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncAllUsers
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|expected
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|expected
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|expected
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ExternalIdentity
name|ei
init|=
name|idp
operator|.
name|getGroup
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertSync
argument_list|(
name|ei
argument_list|,
name|userManager
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncAllUsersPurgeFalse
parameter_list|()
throws|throws
name|Exception
block|{
comment|// first sync external user|group into the repo that does't exist on the IDP (anymore)
name|sync
argument_list|(
operator|new
name|TestIdentityProvider
operator|.
name|TestUser
argument_list|(
literal|"thirdUser"
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|idp
argument_list|)
expr_stmt|;
name|sync
argument_list|(
operator|new
name|TestIdentityProvider
operator|.
name|TestGroup
argument_list|(
literal|"g"
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|idp
argument_list|)
expr_stmt|;
comment|// syncAll with purge = false
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncAllUsers
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|2
argument_list|,
literal|"mis"
argument_list|,
literal|"mis"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
literal|"thirdUser"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
literal|"g"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncAllUsersPurgeTrue
parameter_list|()
throws|throws
name|Exception
block|{
comment|// first sync external user|group into the repo that does't exist on the IDP (anymore)
name|sync
argument_list|(
operator|new
name|TestIdentityProvider
operator|.
name|TestUser
argument_list|(
literal|"thirdUser"
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|idp
argument_list|)
expr_stmt|;
name|sync
argument_list|(
operator|new
name|TestIdentityProvider
operator|.
name|TestGroup
argument_list|(
literal|"g"
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|idp
argument_list|)
expr_stmt|;
comment|// syncAll with purge = true
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncAllUsers
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|2
argument_list|,
literal|"del"
argument_list|,
literal|"del"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
literal|"thirdUser"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
literal|"g"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncAllUsersForeign
parameter_list|()
throws|throws
name|Exception
block|{
comment|// first sync external users + groups from 2 different IDPs into the repo
comment|// but set membership-nesting to 0
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setMembershipNestingDepth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sync
argument_list|(
name|idp
argument_list|,
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sync
argument_list|(
name|idp
argument_list|,
literal|"a"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sync
argument_list|(
name|foreignIDP
argument_list|,
name|TestIdentityProvider
operator|.
name|ID_SECOND_USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sync
argument_list|(
name|foreignIDP
argument_list|,
literal|"aa"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// verify effect of syncAllUsers : foreign user/group must be ignored by the sync.
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncAllUsers
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|String
index|[]
name|expectedResults
init|=
operator|new
name|String
index|[]
block|{
literal|"upd"
block|,
literal|"upd"
block|}
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
name|expectedResults
operator|.
name|length
argument_list|,
name|expectedResults
argument_list|)
expr_stmt|;
name|ExternalIdentity
index|[]
name|expectedIds
init|=
operator|new
name|ExternalIdentity
index|[]
block|{
name|idp
operator|.
name|getUser
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|)
block|,
name|foreignIDP
operator|.
name|getUser
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_SECOND_USER
argument_list|)
block|,
name|idp
operator|.
name|getGroup
argument_list|(
literal|"a"
argument_list|)
block|,
name|foreignIDP
operator|.
name|getGroup
argument_list|(
literal|"aa"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|ExternalIdentity
name|externalIdentity
range|:
name|expectedIds
control|)
block|{
name|assertSync
argument_list|(
name|externalIdentity
argument_list|,
name|userManager
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncAllUsersException
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|u
init|=
name|userManager
operator|.
name|createUser
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_EXCEPTION
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|u
operator|.
name|setProperty
argument_list|(
name|DefaultSyncContext
operator|.
name|REP_EXTERNAL_ID
argument_list|,
name|session
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
operator|new
name|ExternalIdentityRef
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_EXCEPTION
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncAllUsers
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|"ERR"
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncMBean
operator|.
name|syncAllUsers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|"ERR"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSyncAllUsersThrowingHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|result
init|=
name|createThrowingSyncMBean
argument_list|(
literal|false
argument_list|)
operator|.
name|syncAllUsers
argument_list|(
literal|false
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncAllUsersThrowingHandler2
parameter_list|()
throws|throws
name|Exception
block|{
name|syncMBean
operator|.
name|syncAllExternalUsers
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expected
init|=
name|getExpectedUserResult
argument_list|(
literal|"ERR"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
index|[]
name|result
init|=
name|createThrowingSyncMBean
argument_list|(
literal|true
argument_list|)
operator|.
name|syncAllUsers
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|expected
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|expected
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitialSyncAllExternalUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncAllExternalUsers
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expected
init|=
name|getExpectedUserResult
argument_list|(
literal|"add"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|expected
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|expected
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|expected
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ExternalIdentity
name|ei
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ei
operator|==
literal|null
condition|)
block|{
name|ei
operator|=
name|idp
operator|.
name|getGroup
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|assertSync
argument_list|(
name|ei
argument_list|,
name|userManager
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncAllExternalUsersAgain
parameter_list|()
throws|throws
name|Exception
block|{
name|syncMBean
operator|.
name|syncAllExternalUsers
argument_list|()
expr_stmt|;
comment|// sync again
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|syncAllExternalUsers
argument_list|()
decl_stmt|;
comment|// verify result
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expected
init|=
name|getExpectedUserResult
argument_list|(
literal|"upd"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|expected
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|expected
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|expected
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ExternalIdentity
name|ei
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ei
operator|==
literal|null
condition|)
block|{
name|ei
operator|=
name|idp
operator|.
name|getGroup
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|assertSync
argument_list|(
name|ei
argument_list|,
name|userManager
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncAllExternalUsersThrowingHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|result
init|=
name|createThrowingSyncMBean
argument_list|(
literal|false
argument_list|)
operator|.
name|syncAllExternalUsers
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expected
init|=
name|getExpectedUserResult
argument_list|(
literal|"ERR"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|expected
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|expected
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListOrphanedUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|syncMBean
operator|.
name|syncAllExternalUsers
argument_list|()
expr_stmt|;
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|listOrphanedUsers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|sync
argument_list|(
operator|new
name|TestIdentityProvider
operator|.
name|TestUser
argument_list|(
literal|"thirdUser"
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|idp
argument_list|)
expr_stmt|;
name|sync
argument_list|(
operator|new
name|TestIdentityProvider
operator|.
name|TestGroup
argument_list|(
literal|"g"
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|idp
argument_list|)
expr_stmt|;
name|result
operator|=
name|syncMBean
operator|.
name|listOrphanedUsers
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"thirdUser"
argument_list|,
literal|"g"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListOrphanedUsersForeign
parameter_list|()
throws|throws
name|Exception
block|{
name|sync
argument_list|(
name|foreignIDP
argument_list|,
literal|"a"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sync
argument_list|(
name|foreignIDP
argument_list|,
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|listOrphanedUsers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListOrphanedUsersException
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|u
init|=
name|userManager
operator|.
name|createUser
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_EXCEPTION
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|u
operator|.
name|setProperty
argument_list|(
name|DefaultSyncContext
operator|.
name|REP_EXTERNAL_ID
argument_list|,
name|session
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
operator|new
name|ExternalIdentityRef
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_EXCEPTION
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|listOrphanedUsers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListOrphanedUsersThrowingHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|sync
argument_list|(
operator|new
name|TestIdentityProvider
operator|.
name|TestUser
argument_list|(
literal|"thirdUser"
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|idp
argument_list|)
expr_stmt|;
name|sync
argument_list|(
operator|new
name|TestIdentityProvider
operator|.
name|TestGroup
argument_list|(
literal|"g"
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|idp
argument_list|)
expr_stmt|;
name|String
index|[]
name|result
init|=
name|createThrowingSyncMBean
argument_list|(
literal|false
argument_list|)
operator|.
name|listOrphanedUsers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|createThrowingSyncMBean
argument_list|(
literal|true
argument_list|)
operator|.
name|listOrphanedUsers
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"thirdUser"
argument_list|,
literal|"g"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPurgeOrphanedUsersNoPurge
parameter_list|()
block|{
name|syncMBean
operator|.
name|syncAllExternalUsers
argument_list|()
expr_stmt|;
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|purgeOrphanedUsers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPurgeOrphanedUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|syncMBean
operator|.
name|syncAllExternalUsers
argument_list|()
expr_stmt|;
name|sync
argument_list|(
operator|new
name|TestIdentityProvider
operator|.
name|TestUser
argument_list|(
literal|"thirdUser"
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|idp
argument_list|)
expr_stmt|;
name|sync
argument_list|(
operator|new
name|TestIdentityProvider
operator|.
name|TestGroup
argument_list|(
literal|"g"
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|idp
argument_list|)
expr_stmt|;
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|purgeOrphanedUsers
argument_list|()
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|2
argument_list|,
literal|"del"
argument_list|,
literal|"del"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
literal|"thirdUser"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
literal|"g"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPurgeOrphanedUsersForeign
parameter_list|()
throws|throws
name|Exception
block|{
name|sync
argument_list|(
name|foreignIDP
argument_list|,
literal|"a"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sync
argument_list|(
name|foreignIDP
argument_list|,
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|purgeOrphanedUsers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPurgeOrphanedUsersException
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|u
init|=
name|userManager
operator|.
name|createUser
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_EXCEPTION
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|u
operator|.
name|setProperty
argument_list|(
name|DefaultSyncContext
operator|.
name|REP_EXTERNAL_ID
argument_list|,
name|session
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
operator|new
name|ExternalIdentityRef
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_EXCEPTION
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
index|[]
name|result
init|=
name|syncMBean
operator|.
name|purgeOrphanedUsers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPurgeOrphanedUsersThrowingHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|sync
argument_list|(
operator|new
name|TestIdentityProvider
operator|.
name|TestUser
argument_list|(
literal|"thirdUser"
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|idp
argument_list|)
expr_stmt|;
name|sync
argument_list|(
operator|new
name|TestIdentityProvider
operator|.
name|TestGroup
argument_list|(
literal|"g"
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|idp
argument_list|)
expr_stmt|;
name|String
index|[]
name|result
init|=
name|createThrowingSyncMBean
argument_list|(
literal|false
argument_list|)
operator|.
name|purgeOrphanedUsers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
literal|"thirdUser"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
literal|"g"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/OAK-4362">OAK-4362</a>      */
annotation|@
name|Ignore
argument_list|(
literal|"OAK-4362"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testPurgeOrphanedUsersThrowingHandler2
parameter_list|()
throws|throws
name|Exception
block|{
name|sync
argument_list|(
operator|new
name|TestIdentityProvider
operator|.
name|TestUser
argument_list|(
literal|"thirdUser"
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|idp
argument_list|)
expr_stmt|;
name|sync
argument_list|(
operator|new
name|TestIdentityProvider
operator|.
name|TestGroup
argument_list|(
literal|"g"
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|idp
argument_list|)
expr_stmt|;
name|String
index|[]
name|result
init|=
name|createThrowingSyncMBean
argument_list|(
literal|true
argument_list|)
operator|.
name|purgeOrphanedUsers
argument_list|()
decl_stmt|;
name|assertResultMessages
argument_list|(
name|result
argument_list|,
literal|2
argument_list|,
literal|"ERR"
argument_list|,
literal|"ERR"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
literal|"thirdUser"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
literal|"g"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * SyncHandler implementation that throws Exceptions.      */
specifier|private
specifier|final
class|class
name|ThrowingSyncHandler
extends|extends
name|DefaultSyncHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"throwing"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAME_ALLOWS_IDENTITY_LISTING
init|=
literal|"throwingExceptListIdentities"
decl_stmt|;
name|boolean
name|allowsListIdentities
init|=
literal|false
decl_stmt|;
specifier|private
name|ThrowingSyncHandler
parameter_list|(
name|boolean
name|allowsListIdentities
parameter_list|)
block|{
name|super
argument_list|(
name|syncConfig
argument_list|)
expr_stmt|;
name|this
operator|.
name|allowsListIdentities
operator|=
name|allowsListIdentities
expr_stmt|;
block|}
empty_stmt|;
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|allowsListIdentities
condition|?
name|NAME_ALLOWS_IDENTITY_LISTING
else|:
name|NAME
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|SyncContext
name|createContext
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentityProvider
name|idp
parameter_list|,
annotation|@
name|Nonnull
name|UserManager
name|userManager
parameter_list|,
annotation|@
name|Nonnull
name|ValueFactory
name|valueFactory
parameter_list|)
throws|throws
name|SyncException
block|{
return|return
operator|new
name|DefaultSyncContext
argument_list|(
name|syncConfig
argument_list|,
name|idp
argument_list|,
name|userManager
argument_list|,
name|valueFactory
argument_list|)
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|SyncResult
name|sync
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentity
name|identity
parameter_list|)
throws|throws
name|SyncException
block|{
throw|throw
operator|new
name|SyncException
argument_list|(
literal|"sync "
operator|+
name|identity
argument_list|)
throw|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|SyncResult
name|sync
parameter_list|(
annotation|@
name|Nonnull
name|String
name|id
parameter_list|)
throws|throws
name|SyncException
block|{
throw|throw
operator|new
name|SyncException
argument_list|(
literal|"sync "
operator|+
name|id
argument_list|)
throw|;
block|}
block|}
return|;
block|}
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|SyncedIdentity
name|findIdentity
parameter_list|(
annotation|@
name|Nonnull
name|UserManager
name|userManager
parameter_list|,
annotation|@
name|Nonnull
name|String
name|id
parameter_list|)
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"findIdentity"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|requiresSync
parameter_list|(
annotation|@
name|Nonnull
name|SyncedIdentity
name|identity
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|SyncedIdentity
argument_list|>
name|listIdentities
parameter_list|(
annotation|@
name|Nonnull
name|UserManager
name|userManager
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
operator|!
name|allowsListIdentities
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"listIdentities"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|listIdentities
argument_list|(
name|userManager
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

