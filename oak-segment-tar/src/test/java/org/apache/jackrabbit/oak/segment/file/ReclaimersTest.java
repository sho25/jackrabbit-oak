begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|join
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|GCType
operator|.
name|FULL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|GCType
operator|.
name|TAIL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|Reclaimers
operator|.
name|newExactReclaimer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|Reclaimers
operator|.
name|newOldReclaimer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|GCGeneration
operator|.
name|newGCGeneration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|GCGeneration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ReclaimersTest
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|GCGeneration
argument_list|>
name|gcHistory
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|GCGeneration
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"00w"
argument_list|,
name|newGCGeneration
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
argument_list|)
comment|// First compaction. Always FULL
decl|.
name|put
argument_list|(
literal|"11c"
argument_list|,
name|newGCGeneration
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"11w"
argument_list|,
name|newGCGeneration
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
comment|// TAIL compaction
decl|.
name|put
argument_list|(
literal|"21c"
argument_list|,
name|newGCGeneration
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"21w"
argument_list|,
name|newGCGeneration
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
comment|// TAIL compaction
decl|.
name|put
argument_list|(
literal|"31c"
argument_list|,
name|newGCGeneration
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"31w"
argument_list|,
name|newGCGeneration
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
comment|// FULL compaction
decl|.
name|put
argument_list|(
literal|"42c"
argument_list|,
name|newGCGeneration
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"42w"
argument_list|,
name|newGCGeneration
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
comment|// TAIL compaction
decl|.
name|put
argument_list|(
literal|"52c"
argument_list|,
name|newGCGeneration
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"52w"
argument_list|,
name|newGCGeneration
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
comment|// TAIL compaction
decl|.
name|put
argument_list|(
literal|"62c"
argument_list|,
name|newGCGeneration
argument_list|(
literal|6
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"62w"
argument_list|,
name|newGCGeneration
argument_list|(
literal|6
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
comment|// FULL compaction
decl|.
name|put
argument_list|(
literal|"73c"
argument_list|,
name|newGCGeneration
argument_list|(
literal|7
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"73w"
argument_list|,
name|newGCGeneration
argument_list|(
literal|7
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|void
name|assertReclaim
parameter_list|(
name|Predicate
argument_list|<
name|GCGeneration
argument_list|>
name|reclaimer
parameter_list|,
name|String
modifier|...
name|reclaims
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|toReclaim
init|=
name|newHashSet
argument_list|(
name|reclaims
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|GCGeneration
argument_list|>
name|generation
range|:
name|gcHistory
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|reclaimer
operator|.
name|apply
argument_list|(
name|generation
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|reclaimer
operator|+
literal|" should not reclaim "
operator|+
name|generation
operator|.
name|getKey
argument_list|()
argument_list|,
name|toReclaim
operator|.
name|remove
argument_list|(
name|generation
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|toReclaim
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fail
argument_list|(
name|reclaimer
operator|+
literal|" failed to reclaim "
operator|+
name|join
argument_list|(
literal|","
argument_list|,
name|toReclaim
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOldReclaimer
parameter_list|()
block|{
comment|// 1 retained generation
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|TAIL
argument_list|,
name|newGCGeneration
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"00w"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|TAIL
argument_list|,
name|newGCGeneration
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|TAIL
argument_list|,
name|newGCGeneration
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|,
literal|"21w"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|,
literal|"11c"
argument_list|,
literal|"21w"
argument_list|,
literal|"21c"
argument_list|,
literal|"31w"
argument_list|,
literal|"31c"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|TAIL
argument_list|,
name|newGCGeneration
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|,
literal|"11c"
argument_list|,
literal|"21w"
argument_list|,
literal|"21c"
argument_list|,
literal|"31w"
argument_list|,
literal|"31c"
argument_list|,
literal|"42w"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|TAIL
argument_list|,
name|newGCGeneration
argument_list|(
literal|6
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|,
literal|"11c"
argument_list|,
literal|"21w"
argument_list|,
literal|"21c"
argument_list|,
literal|"31w"
argument_list|,
literal|"31c"
argument_list|,
literal|"42w"
argument_list|,
literal|"52w"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|7
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|,
literal|"11c"
argument_list|,
literal|"21w"
argument_list|,
literal|"21c"
argument_list|,
literal|"31w"
argument_list|,
literal|"31c"
argument_list|,
literal|"42w"
argument_list|,
literal|"42c"
argument_list|,
literal|"52w"
argument_list|,
literal|"52c"
argument_list|,
literal|"62w"
argument_list|,
literal|"62c"
argument_list|)
expr_stmt|;
comment|// 2 retained generation
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|TAIL
argument_list|,
name|newGCGeneration
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|TAIL
argument_list|,
name|newGCGeneration
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"00w"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|TAIL
argument_list|,
name|newGCGeneration
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|,
literal|"21w"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|TAIL
argument_list|,
name|newGCGeneration
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|,
literal|"11c"
argument_list|,
literal|"21w"
argument_list|,
literal|"21c"
argument_list|,
literal|"31w"
argument_list|,
literal|"31c"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|TAIL
argument_list|,
name|newGCGeneration
argument_list|(
literal|6
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|,
literal|"11c"
argument_list|,
literal|"21w"
argument_list|,
literal|"21c"
argument_list|,
literal|"31w"
argument_list|,
literal|"31c"
argument_list|,
literal|"42w"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|7
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|,
literal|"11c"
argument_list|,
literal|"21w"
argument_list|,
literal|"21c"
argument_list|,
literal|"31w"
argument_list|,
literal|"31c"
argument_list|,
literal|"42w"
argument_list|,
literal|"52w"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOldReclaimerDefaultingToFull
parameter_list|()
block|{
comment|// 1 retained generation
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"00w"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|,
literal|"21w"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|,
literal|"11c"
argument_list|,
literal|"21w"
argument_list|,
literal|"21c"
argument_list|,
literal|"31w"
argument_list|,
literal|"31c"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|,
literal|"11c"
argument_list|,
literal|"21w"
argument_list|,
literal|"21c"
argument_list|,
literal|"31w"
argument_list|,
literal|"31c"
argument_list|,
literal|"42w"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|6
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|,
literal|"11c"
argument_list|,
literal|"21w"
argument_list|,
literal|"21c"
argument_list|,
literal|"31w"
argument_list|,
literal|"31c"
argument_list|,
literal|"42w"
argument_list|,
literal|"52w"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|7
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|,
literal|"11c"
argument_list|,
literal|"21w"
argument_list|,
literal|"21c"
argument_list|,
literal|"31w"
argument_list|,
literal|"31c"
argument_list|,
literal|"42w"
argument_list|,
literal|"42c"
argument_list|,
literal|"52w"
argument_list|,
literal|"52c"
argument_list|,
literal|"62w"
argument_list|,
literal|"62c"
argument_list|)
expr_stmt|;
comment|// 2 retained generation
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"00w"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|,
literal|"21w"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|,
literal|"21w"
argument_list|,
literal|"31w"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|6
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|,
literal|"21w"
argument_list|,
literal|"31w"
argument_list|,
literal|"42w"
argument_list|)
expr_stmt|;
name|assertReclaim
argument_list|(
name|newOldReclaimer
argument_list|(
name|FULL
argument_list|,
name|newGCGeneration
argument_list|(
literal|7
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"00w"
argument_list|,
literal|"11w"
argument_list|,
literal|"11c"
argument_list|,
literal|"21w"
argument_list|,
literal|"21c"
argument_list|,
literal|"31w"
argument_list|,
literal|"31c"
argument_list|,
literal|"42w"
argument_list|,
literal|"52w"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExactReclaimer
parameter_list|()
block|{
name|Predicate
argument_list|<
name|GCGeneration
argument_list|>
name|reclaimer
init|=
name|newExactReclaimer
argument_list|(
name|newGCGeneration
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reclaimer
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|reclaimer
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|reclaimer
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|reclaimer
operator|.
name|apply
argument_list|(
name|newGCGeneration
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

