begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|input
operator|.
name|NullInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|FileDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentTestConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|test
operator|.
name|TemporaryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|test
operator|.
name|TemporaryFileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|RuleChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_class
specifier|public
class|class
name|RemoteBlobProcessorTest
block|{
specifier|private
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|TemporaryBlobStore
name|blobStore
init|=
operator|new
name|TemporaryBlobStore
argument_list|(
name|folder
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureDataStore
parameter_list|(
name|FileDataStore
name|dataStore
parameter_list|)
block|{
name|dataStore
operator|.
name|setMinRecordLength
argument_list|(
name|SegmentTestConstants
operator|.
name|MEDIUM_LIMIT
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|private
name|TemporaryFileStore
name|fileStore
init|=
operator|new
name|TemporaryFileStore
argument_list|(
name|folder
argument_list|,
name|blobStore
argument_list|,
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|RuleChain
name|rules
init|=
name|RuleChain
operator|.
name|outerRule
argument_list|(
name|folder
argument_list|)
operator|.
name|around
argument_list|(
name|blobStore
argument_list|)
operator|.
name|around
argument_list|(
name|fileStore
argument_list|)
decl_stmt|;
comment|/**      * The test relies on a particular interaction between the BlobStore and the      * FileStore.      *      *<ul>      *<li>The FileStore passes every binary whose length is grater than or      * equal to MEDIUM_LIMIT bytes to the BlobStore.</li>      *      *<li>The BlobStore creates in-memory IDs (where the binary content is      * embedded in the ID itself) if the binary's length is smaller than or      * equal to minRecordLength bytes.</li>      *      *<li>It follows that if minRecordLength is set to at least MEDIUM_LIMIT,      * the FileStore will delegate the handling of the binary to the BlobStore,      * which will create an in-memory ID embedding the content of the      * binary.</li>      *</ul>      *      *<p>      * With this configuration in place, a binary long exactly MEDIUM_LIMIT      * bytes will be passed from the File Store to the Blob Store, which will      * create an in-memory ID. The File Store will persist the in-memory ID,      * which contains the binary data itself. This binary should never be      * downloaded.      */
annotation|@
name|Test
specifier|public
name|void
name|inMemoryBinaryShouldNotBeDownloaded
parameter_list|()
throws|throws
name|Exception
block|{
name|SegmentNodeStore
name|store
init|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|fileStore
operator|.
name|fileStore
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|NodeBuilder
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|root
operator|.
name|setProperty
argument_list|(
literal|"b"
argument_list|,
name|root
operator|.
name|createBlob
argument_list|(
operator|new
name|NullInputStream
argument_list|(
name|SegmentTestConstants
operator|.
name|MEDIUM_LIMIT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|root
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|RemoteBlobProcessor
name|processor
init|=
operator|new
name|RemoteBlobProcessor
argument_list|(
name|blobStore
operator|.
name|blobStore
argument_list|()
argument_list|,
name|blobId
lambda|->
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"In-memory binaries should not be downloaded"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
decl_stmt|;
name|processor
operator|.
name|processBinary
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"b"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|inlineBinaryShouldNotBeDownloaded
parameter_list|()
throws|throws
name|Exception
block|{
name|SegmentNodeStore
name|store
init|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|fileStore
operator|.
name|fileStore
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|NodeBuilder
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|root
operator|.
name|setProperty
argument_list|(
literal|"b"
argument_list|,
name|root
operator|.
name|createBlob
argument_list|(
operator|new
name|NullInputStream
argument_list|(
name|SegmentTestConstants
operator|.
name|MEDIUM_LIMIT
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|root
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|RemoteBlobProcessor
name|processor
init|=
operator|new
name|RemoteBlobProcessor
argument_list|(
name|blobStore
operator|.
name|blobStore
argument_list|()
argument_list|,
name|blobId
lambda|->
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Inline binaries should not be downloaded"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
decl_stmt|;
name|processor
operator|.
name|processBinary
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"b"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

