begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|prometheus
operator|.
name|client
operator|.
name|CollectorRegistry
import|;
end_import

begin_import
import|import
name|io
operator|.
name|prometheus
operator|.
name|client
operator|.
name|dropwizard
operator|.
name|DropwizardExports
import|;
end_import

begin_import
import|import
name|io
operator|.
name|prometheus
operator|.
name|client
operator|.
name|exporter
operator|.
name|PushGateway
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|NodeStoreFixtureProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|getService
import|;
end_import

begin_comment
comment|/**  * Initialize different metrics exporter fixture based on parameters used.  */
end_comment

begin_class
specifier|public
class|class
name|MetricsExporterFixtureProvider
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NodeStoreFixtureProvider
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Nullable
specifier|public
specifier|static
name|MetricsExporterFixture
name|create
parameter_list|(
name|DataStoreOptions
name|options
parameter_list|,
name|Whiteboard
name|wb
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|options
operator|.
name|exportMetrics
argument_list|()
condition|)
block|{
name|CollectorRegistry
name|collectorRegistry
init|=
operator|new
name|CollectorRegistry
argument_list|()
decl_stmt|;
name|wb
operator|.
name|register
argument_list|(
name|CollectorRegistry
operator|.
name|class
argument_list|,
name|collectorRegistry
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|MetricRegistry
name|metricRegistry
init|=
name|getService
argument_list|(
name|wb
argument_list|,
name|MetricRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExportMetricsArgs
name|metricsArgs
init|=
operator|new
name|ExportMetricsArgs
argument_list|(
name|options
operator|.
name|exportMetricsArgs
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|metricsArgs
operator|.
name|getExporterType
argument_list|()
operator|==
name|ExporterType
operator|.
name|pushgateway
condition|)
block|{
name|PushGateway
name|pg
init|=
operator|new
name|PushGateway
argument_list|(
name|metricsArgs
operator|.
name|getPushUri
argument_list|()
argument_list|)
decl_stmt|;
operator|new
name|DropwizardExports
argument_list|(
name|metricRegistry
argument_list|)
operator|.
name|register
argument_list|(
name|collectorRegistry
argument_list|)
expr_stmt|;
name|wb
operator|.
name|register
argument_list|(
name|PushGateway
operator|.
name|class
argument_list|,
name|pg
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|MetricsExporterFixture
argument_list|<
name|PushGateway
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ExporterType
name|getExporterType
parameter_list|()
block|{
return|return
name|ExporterType
operator|.
name|pushgateway
return|;
block|}
annotation|@
name|Override
specifier|public
name|PushGateway
name|getMetricsExporter
parameter_list|()
block|{
return|return
name|pg
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|pg
operator|.
name|pushAdd
argument_list|(
name|collectorRegistry
argument_list|,
name|PushGateway
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|metricsArgs
operator|.
name|getPushMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Metrics exporter arguments      *  1. Exporter Type      *  2. Exporter URI      *  3. Metadata map      *  e.g. pushgateway;uri;key1=value1,key2=value2      */
specifier|static
class|class
name|ExportMetricsArgs
block|{
specifier|private
specifier|final
name|ExporterType
name|exporterType
decl_stmt|;
specifier|private
specifier|final
name|String
name|pushUri
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pushMap
decl_stmt|;
name|ExportMetricsArgs
parameter_list|(
name|String
name|args
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|split
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|";"
argument_list|)
operator|.
name|limit
argument_list|(
literal|3
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|trimResults
argument_list|()
operator|.
name|splitToList
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|this
operator|.
name|exporterType
operator|=
name|ExporterType
operator|.
name|valueOf
argument_list|(
name|split
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|split
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No URL defined"
argument_list|)
throw|;
block|}
name|this
operator|.
name|pushUri
operator|=
name|split
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|split
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
name|this
operator|.
name|pushMap
operator|=
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|trimResults
argument_list|()
operator|.
name|withKeyValueSeparator
argument_list|(
literal|"="
argument_list|)
operator|.
name|split
argument_list|(
name|split
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|pushMap
operator|=
name|emptyMap
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Map of properties pushed [{}]"
argument_list|,
name|pushMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getPushUri
parameter_list|()
block|{
return|return
name|pushUri
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPushMap
parameter_list|()
block|{
return|return
name|pushMap
return|;
block|}
specifier|public
name|ExporterType
name|getExporterType
parameter_list|()
block|{
return|return
name|exporterType
return|;
block|}
block|}
comment|/**      * Exporter Type supported      */
specifier|public
enum|enum
name|ExporterType
block|{
name|pushgateway
argument_list|(
literal|"Prometheus Push Gateway"
argument_list|)
block|;
specifier|private
name|String
name|type
decl_stmt|;
name|ExporterType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

