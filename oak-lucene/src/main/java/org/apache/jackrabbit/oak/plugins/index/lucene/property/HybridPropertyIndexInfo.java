begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|TreeTraverser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
operator|.
name|HybridPropertyIndexUtil
operator|.
name|PROPERTY_INDEX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
operator|.
name|HybridPropertyIndexUtil
operator|.
name|PROP_HEAD_BUCKET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
operator|.
name|HybridPropertyIndexUtil
operator|.
name|PROP_PREVIOUS_BUCKET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
operator|.
name|HybridPropertyIndexUtil
operator|.
name|simplePropertyIndex
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
operator|.
name|HybridPropertyIndexUtil
operator|.
name|uniquePropertyIndex
import|;
end_import

begin_class
specifier|public
class|class
name|HybridPropertyIndexInfo
block|{
specifier|private
specifier|final
name|JsopBuilder
name|json
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|idx
decl_stmt|;
specifier|public
name|HybridPropertyIndexInfo
parameter_list|(
name|NodeState
name|idx
parameter_list|)
block|{
name|this
operator|.
name|idx
operator|=
name|idx
expr_stmt|;
block|}
specifier|public
name|String
name|getInfoAsJson
parameter_list|()
block|{
name|json
operator|.
name|resetWriter
argument_list|()
expr_stmt|;
name|json
operator|.
name|object
argument_list|()
expr_stmt|;
name|NodeState
name|propertyIndexNode
init|=
name|idx
operator|.
name|getChildNode
argument_list|(
name|PROPERTY_INDEX
argument_list|)
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|cne
range|:
name|propertyIndexNode
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|NodeState
name|propIdxState
init|=
name|cne
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|cne
operator|.
name|getName
argument_list|()
decl_stmt|;
name|json
operator|.
name|key
argument_list|(
name|propName
argument_list|)
operator|.
name|object
argument_list|()
expr_stmt|;
if|if
condition|(
name|simplePropertyIndex
argument_list|(
name|propIdxState
argument_list|)
condition|)
block|{
name|collectBucketData
argument_list|(
name|propIdxState
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|uniquePropertyIndex
argument_list|(
name|propIdxState
argument_list|)
condition|)
block|{
name|json
operator|.
name|key
argument_list|(
literal|"entryCount"
argument_list|)
operator|.
name|value
argument_list|(
name|propIdxState
operator|.
name|getChildNodeCount
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|.
name|key
argument_list|(
literal|"unique"
argument_list|)
operator|.
name|value
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|JsopBuilder
operator|.
name|prettyPrint
argument_list|(
name|json
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|collectBucketData
parameter_list|(
name|NodeState
name|propIdxState
parameter_list|)
block|{
name|String
name|head
init|=
name|propIdxState
operator|.
name|getString
argument_list|(
name|PROP_HEAD_BUCKET
argument_list|)
decl_stmt|;
name|String
name|previous
init|=
name|propIdxState
operator|.
name|getString
argument_list|(
name|PROP_PREVIOUS_BUCKET
argument_list|)
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|cne
range|:
name|propIdxState
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|String
name|bucketName
init|=
name|cne
operator|.
name|getName
argument_list|()
decl_stmt|;
name|NodeState
name|bucket
init|=
name|cne
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|json
operator|.
name|key
argument_list|(
name|bucketName
argument_list|)
operator|.
name|object
argument_list|()
expr_stmt|;
name|json
operator|.
name|key
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|head
argument_list|,
name|bucketName
argument_list|)
condition|)
block|{
name|json
operator|.
name|value
argument_list|(
literal|"head"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|previous
argument_list|,
name|bucketName
argument_list|)
condition|)
block|{
name|json
operator|.
name|value
argument_list|(
literal|"previous"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|json
operator|.
name|value
argument_list|(
literal|"garbage"
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|key
argument_list|(
literal|"keyCount"
argument_list|)
operator|.
name|value
argument_list|(
name|bucket
operator|.
name|getChildNodeCount
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|collectCounts
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|collectCounts
parameter_list|(
name|NodeState
name|bucket
parameter_list|)
block|{
name|TreeTraverser
argument_list|<
name|NodeState
argument_list|>
name|t
init|=
operator|new
name|TreeTraverser
argument_list|<
name|NodeState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|NodeState
argument_list|>
name|children
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|root
operator|.
name|getChildNodeEntries
argument_list|()
argument_list|,
name|ChildNodeEntry
operator|::
name|getNodeState
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|AtomicInteger
name|matches
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|int
name|totalCount
init|=
name|t
operator|.
name|preOrderTraversal
argument_list|(
name|bucket
argument_list|)
operator|.
name|transform
argument_list|(
parameter_list|(
name|st
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|st
operator|.
name|getBoolean
argument_list|(
literal|"match"
argument_list|)
condition|)
block|{
name|matches
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
return|return
name|st
return|;
block|}
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|json
operator|.
name|key
argument_list|(
literal|"entryCount"
argument_list|)
operator|.
name|value
argument_list|(
name|matches
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|key
argument_list|(
literal|"totalCount"
argument_list|)
operator|.
name|value
argument_list|(
name|totalCount
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

