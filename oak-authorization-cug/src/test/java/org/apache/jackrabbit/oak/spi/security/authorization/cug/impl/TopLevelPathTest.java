begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|cug
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|ROOT_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TopLevelPathTest
extends|extends
name|AbstractCugTest
block|{
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|PATHS
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|ROOT_PATH
argument_list|,
name|SUPPORTED_PATH
argument_list|,
name|SUPPORTED_PATH
operator|+
literal|"/subtree"
argument_list|,
name|SUPPORTED_PATH3
argument_list|,
name|UNSUPPORTED_PATH
argument_list|,
name|INVALID_PATH
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testHasAnyNoCug
parameter_list|()
block|{
name|TopLevelPaths
name|tlp
init|=
operator|new
name|TopLevelPaths
argument_list|(
name|getRootProvider
argument_list|()
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tlp
operator|.
name|hasAny
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tlp
operator|.
name|hasAny
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasAnyWithCug
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|SUPPORTED_PATH3
argument_list|)
argument_list|,
literal|"child"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|createCug
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|TopLevelPaths
name|tlp
init|=
operator|new
name|TopLevelPaths
argument_list|(
name|getRootProvider
argument_list|()
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tlp
operator|.
name|hasAny
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tlp
operator|.
name|hasAny
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContainsNoCug
parameter_list|()
block|{
name|TopLevelPaths
name|tlp
init|=
operator|new
name|TopLevelPaths
argument_list|(
name|getRootProvider
argument_list|()
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|PATHS
control|)
block|{
name|assertFalse
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContainsWithCug
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|cugPath
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|SUPPORTED_PATH3
argument_list|)
argument_list|,
literal|"child"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|createCug
argument_list|(
name|cugPath
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|TopLevelPaths
name|tlp
init|=
operator|new
name|TopLevelPaths
argument_list|(
name|getRootProvider
argument_list|()
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|ROOT_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|SUPPORTED_PATH3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|cugPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|cugPath
operator|+
literal|"/subtree"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|SUPPORTED_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|UNSUPPORTED_PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContainsWithCugAtRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|createCug
argument_list|(
name|root
argument_list|,
name|ROOT_PATH
argument_list|,
name|EveryonePrincipal
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|TopLevelPaths
name|tlp
init|=
operator|new
name|TopLevelPaths
argument_list|(
name|getRootProvider
argument_list|()
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|ROOT_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|SUPPORTED_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|SUPPORTED_PATH2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|SUPPORTED_PATH3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|UNSUPPORTED_PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContainsMany
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|n
init|=
name|root
operator|.
name|getTree
argument_list|(
name|SUPPORTED_PATH3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|TopLevelPaths
operator|.
name|MAX_CNT
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|c
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|n
argument_list|,
literal|"c"
operator|+
name|i
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|createCug
argument_list|(
name|c
operator|.
name|getPath
argument_list|()
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|TopLevelPaths
name|tlp
init|=
operator|new
name|TopLevelPaths
argument_list|(
name|getRootProvider
argument_list|()
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|ROOT_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|SUPPORTED_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|SUPPORTED_PATH2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|SUPPORTED_PATH3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|UNSUPPORTED_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|SUPPORTED_PATH3
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|SUPPORTED_PATH3
operator|+
literal|"/c0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMayContainWithCug
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|cugPath
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|SUPPORTED_PATH3
argument_list|)
argument_list|,
literal|"child"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|createCug
argument_list|(
name|cugPath
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Root
name|readOnlyRoot
init|=
name|getRootProvider
argument_list|()
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|TopLevelPaths
name|tlp
init|=
operator|new
name|TopLevelPaths
argument_list|(
name|readOnlyRoot
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|PATHS
control|)
block|{
name|assertEquals
argument_list|(
name|p
argument_list|,
name|Text
operator|.
name|isDescendantOrEqual
argument_list|(
name|p
argument_list|,
name|cugPath
argument_list|)
argument_list|,
name|tlp
operator|.
name|contains
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|Text
operator|.
name|getAbsoluteParent
argument_list|(
name|SUPPORTED_PATH3
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|cugPath
argument_list|)
argument_list|)
expr_stmt|;
name|CugPermissionProvider
name|cugPermProvider
init|=
name|createCugPermissionProvider
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|SUPPORTED_PATH
argument_list|,
name|SUPPORTED_PATH2
argument_list|,
name|SUPPORTED_PATH3
argument_list|)
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|t
init|=
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|TreePermission
name|rootTp
init|=
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|t
argument_list|,
name|TreePermission
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rootTp
operator|instanceof
name|EmptyCugTreePermission
argument_list|)
expr_stmt|;
name|TreePermission
name|tp
init|=
name|rootTp
decl_stmt|;
for|for
control|(
name|String
name|segm
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|cugPath
argument_list|)
control|)
block|{
name|t
operator|=
name|t
operator|.
name|getChild
argument_list|(
name|segm
argument_list|)
expr_stmt|;
name|tp
operator|=
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|t
argument_list|,
name|tp
argument_list|)
expr_stmt|;
name|assertCugPermission
argument_list|(
name|tp
argument_list|,
name|Text
operator|.
name|isDescendantOrEqual
argument_list|(
name|SUPPORTED_PATH3
argument_list|,
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|p
range|:
operator|new
name|String
index|[]
block|{
name|SUPPORTED_PATH
block|,
name|SUPPORTED_PATH2
block|,
name|UNSUPPORTED_PATH
block|}
control|)
block|{
name|tp
operator|=
name|getTreePermission
argument_list|(
name|readOnlyRoot
argument_list|,
name|p
argument_list|,
name|cugPermProvider
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|p
argument_list|,
name|TreePermission
operator|.
name|NO_RECOURSE
argument_list|,
name|tp
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMayContainWithCug2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|cugPath
init|=
name|SUPPORTED_PATH
operator|+
literal|"/subtree"
decl_stmt|;
name|createCug
argument_list|(
name|cugPath
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Root
name|readOnlyRoot
init|=
name|getRootProvider
argument_list|()
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|TopLevelPaths
name|tlp
init|=
operator|new
name|TopLevelPaths
argument_list|(
name|readOnlyRoot
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|SUPPORTED_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|cugPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|SUPPORTED_PATH3
argument_list|)
argument_list|)
expr_stmt|;
name|CugPermissionProvider
name|cugPermProvider
init|=
name|createCugPermissionProvider
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|SUPPORTED_PATH
argument_list|,
name|SUPPORTED_PATH2
argument_list|,
name|SUPPORTED_PATH3
argument_list|)
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|t
init|=
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|TreePermission
name|rootTp
init|=
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|t
argument_list|,
name|TreePermission
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rootTp
operator|instanceof
name|EmptyCugTreePermission
argument_list|)
expr_stmt|;
name|TreePermission
name|tp
init|=
name|rootTp
decl_stmt|;
for|for
control|(
name|String
name|segm
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|cugPath
argument_list|)
control|)
block|{
name|t
operator|=
name|t
operator|.
name|getChild
argument_list|(
name|segm
argument_list|)
expr_stmt|;
name|tp
operator|=
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|t
argument_list|,
name|tp
argument_list|)
expr_stmt|;
name|assertCugPermission
argument_list|(
name|tp
argument_list|,
name|Text
operator|.
name|isDescendantOrEqual
argument_list|(
name|SUPPORTED_PATH
argument_list|,
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tp
operator|=
name|getTreePermission
argument_list|(
name|readOnlyRoot
argument_list|,
name|Text
operator|.
name|getAbsoluteParent
argument_list|(
name|SUPPORTED_PATH3
argument_list|,
literal|0
argument_list|)
argument_list|,
name|cugPermProvider
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|TreePermission
operator|.
name|NO_RECOURSE
argument_list|,
name|tp
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|p
range|:
operator|new
name|String
index|[]
block|{
name|SUPPORTED_PATH2
block|,
name|UNSUPPORTED_PATH
block|}
control|)
block|{
name|tp
operator|=
name|getTreePermission
argument_list|(
name|readOnlyRoot
argument_list|,
name|p
argument_list|,
name|cugPermProvider
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|p
argument_list|,
name|TreePermission
operator|.
name|NO_RECOURSE
argument_list|,
name|tp
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingHiddenNestedCugProperty
parameter_list|()
block|{
name|MemoryNodeBuilder
name|nb
init|=
operator|new
name|MemoryNodeBuilder
argument_list|(
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|nb
operator|.
name|setProperty
argument_list|(
name|HIDDEN_TOP_CUG_CNT
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|TopLevelPaths
name|tlp
init|=
operator|new
name|TopLevelPaths
argument_list|(
name|getRootProvider
argument_list|()
operator|.
name|createReadOnlyRoot
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tlp
operator|.
name|contains
argument_list|(
name|SUPPORTED_PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

