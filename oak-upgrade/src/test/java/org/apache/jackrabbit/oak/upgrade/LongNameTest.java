begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|cycle
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|limit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|config
operator|.
name|RepositoryConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|memory
operator|.
name|MemoryStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|LongNameTest
block|{
specifier|public
specifier|static
specifier|final
name|Credentials
name|CREDENTIALS
init|=
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TOO_LONG_NAME
init|=
literal|"this string is an example of a very long node name which is approximately one hundred fifty eight bytes long so too long for the document node store to handle"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NOT_TOO_LONG_NAME
init|=
literal|"this string despite it is very long as well is not too long for the document node store to handle so it may be migrated succesfully without troubles"
decl_stmt|;
specifier|private
specifier|static
name|RepositoryConfig
name|sourceRepositoryConfig
decl_stmt|;
specifier|private
specifier|static
name|File
name|crx2RepoDir
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|prepareSourceRepository
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|crx2RepoDir
operator|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
literal|"upgrade-"
operator|+
name|Clock
operator|.
name|SIMPLE
operator|.
name|getTimeIncreasing
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|crx2RepoDir
argument_list|)
expr_stmt|;
name|sourceRepositoryConfig
operator|=
name|createCrx2Config
argument_list|(
name|crx2RepoDir
argument_list|)
expr_stmt|;
name|RepositoryImpl
name|sourceRepository
init|=
name|RepositoryImpl
operator|.
name|create
argument_list|(
name|sourceRepositoryConfig
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|sourceRepository
operator|.
name|login
argument_list|(
name|CREDENTIALS
argument_list|)
decl_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|TOO_LONG_NAME
operator|.
name|getBytes
argument_list|()
operator|.
name|length
operator|>
literal|150
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NOT_TOO_LONG_NAME
operator|.
name|getBytes
argument_list|()
operator|.
name|length
operator|<
literal|150
argument_list|)
expr_stmt|;
name|Node
name|longNameParent
init|=
name|createParent
argument_list|(
name|session
operator|.
name|getRootNode
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|longNameParent
operator|.
name|getPath
argument_list|()
operator|.
name|length
argument_list|()
operator|>=
literal|350
argument_list|)
expr_stmt|;
name|longNameParent
operator|.
name|addNode
argument_list|(
name|TOO_LONG_NAME
argument_list|)
expr_stmt|;
name|longNameParent
operator|.
name|addNode
argument_list|(
name|NOT_TOO_LONG_NAME
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|longNameParent
operator|.
name|hasNode
argument_list|(
name|TOO_LONG_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|longNameParent
operator|.
name|hasNode
argument_list|(
name|NOT_TOO_LONG_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
name|sourceRepository
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|RepositoryConfig
name|createCrx2Config
parameter_list|(
name|File
name|crx2RepoDir
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|File
name|source
init|=
operator|new
name|File
argument_list|(
name|crx2RepoDir
argument_list|,
literal|"source"
argument_list|)
decl_stmt|;
name|source
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
return|return
name|RepositoryConfig
operator|.
name|install
argument_list|(
name|source
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|longNameShouldBeSkipped
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|DocumentNodeStore
name|nodeStore
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
try|try
block|{
name|upgrade
argument_list|(
name|nodeStore
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NodeState
name|parent
init|=
name|getParent
argument_list|(
name|nodeStore
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|parent
operator|.
name|hasChildNode
argument_list|(
name|NOT_TOO_LONG_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parent
operator|.
name|getChildNodeCount
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// The following throws an DocumentStoreException:
comment|// Assert.assertFalse(parent.hasChildNode(TOO_LONG_NAME));
block|}
finally|finally
block|{
name|nodeStore
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
annotation|@
name|Ignore
specifier|public
name|void
name|longNameOnDocumentStoreThrowsAnException
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|DocumentNodeStore
name|nodeStore
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
try|try
block|{
name|upgrade
argument_list|(
name|nodeStore
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|nodeStore
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|longNameOnSegmentStoreWorksFine
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|SegmentNodeStore
name|nodeStore
init|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
operator|new
name|MemoryStore
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|upgrade
argument_list|(
name|nodeStore
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NodeState
name|parent
init|=
name|getParent
argument_list|(
name|nodeStore
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|parent
operator|.
name|hasChildNode
argument_list|(
name|NOT_TOO_LONG_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|parent
operator|.
name|hasChildNode
argument_list|(
name|TOO_LONG_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|upgrade
parameter_list|(
name|NodeStore
name|target
parameter_list|,
name|boolean
name|skipLongNames
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|RepositoryConfig
name|config
init|=
name|createCrx2Config
argument_list|(
name|crx2RepoDir
argument_list|)
decl_stmt|;
name|RepositoryContext
name|context
init|=
name|RepositoryContext
operator|.
name|create
argument_list|(
name|config
argument_list|)
decl_stmt|;
try|try
block|{
name|RepositoryUpgrade
name|upgrade
init|=
operator|new
name|RepositoryUpgrade
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|upgrade
operator|.
name|setSkipLongNames
argument_list|(
name|skipLongNames
argument_list|)
expr_stmt|;
name|upgrade
operator|.
name|copy
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|context
operator|.
name|getRepository
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Node
name|createParent
parameter_list|(
name|Node
name|root
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|current
init|=
name|root
decl_stmt|;
for|for
control|(
name|String
name|segment
range|:
name|getParentSegments
argument_list|()
control|)
block|{
name|current
operator|=
name|current
operator|.
name|addNode
argument_list|(
name|segment
argument_list|)
expr_stmt|;
block|}
return|return
name|current
return|;
block|}
specifier|private
specifier|static
name|NodeState
name|getParent
parameter_list|(
name|NodeState
name|root
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NodeState
name|current
init|=
name|root
decl_stmt|;
for|for
control|(
name|String
name|segment
range|:
name|getParentSegments
argument_list|()
control|)
block|{
name|current
operator|=
name|current
operator|.
name|getChildNode
argument_list|(
name|segment
argument_list|)
expr_stmt|;
block|}
return|return
name|current
return|;
block|}
specifier|private
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|getParentSegments
parameter_list|()
block|{
return|return
name|limit
argument_list|(
name|cycle
argument_list|(
literal|"this"
argument_list|,
literal|"is"
argument_list|,
literal|"a"
argument_list|,
literal|"path"
argument_list|)
argument_list|,
literal|100
argument_list|)
return|;
comment|// total path
comment|// length
comment|// = 350
block|}
block|}
end_class

end_unit

