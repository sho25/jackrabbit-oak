begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SameNameSiblingTest
extends|extends
name|AbstractRepositoryTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SIBLING
init|=
literal|"sibling"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|SIBLINGS
init|=
operator|new
name|String
index|[]
block|{
name|SIBLING
operator|+
literal|"[1]"
block|,
name|SIBLING
operator|+
literal|"[2]"
block|,
name|SIBLING
operator|+
literal|"[3]"
block|,
name|SIBLING
operator|+
literal|"[4]"
block|}
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|Node
name|sns
decl_stmt|;
specifier|public
name|SameNameSiblingTest
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|)
block|{
name|super
argument_list|(
name|fixture
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|session
operator|=
name|getAdminSession
argument_list|()
expr_stmt|;
name|sns
operator|=
name|session
operator|.
name|getNode
argument_list|(
literal|"/sns"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|NodeStore
name|createNodeStore
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|)
throws|throws
name|RepositoryException
block|{
try|try
block|{
name|NodeStore
name|nodeStore
init|=
name|super
operator|.
name|createNodeStore
argument_list|(
name|fixture
argument_list|)
decl_stmt|;
name|NodeBuilder
name|root
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|sns
init|=
name|root
operator|.
name|setChildNode
argument_list|(
literal|"sns"
argument_list|)
decl_stmt|;
name|sns
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|sibling
range|:
name|asList
argument_list|(
name|SIBLING
argument_list|,
name|SIBLINGS
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|sibling
operator|.
name|endsWith
argument_list|(
literal|"[1]"
argument_list|)
condition|)
block|{
name|sns
operator|.
name|setChildNode
argument_list|(
name|sibling
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
block|}
block|}
name|nodeStore
operator|.
name|merge
argument_list|(
name|root
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
return|return
name|nodeStore
return|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|iterateSiblings
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|newHashSet
argument_list|(
name|SIBLINGS
argument_list|)
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|SIBLING
argument_list|)
expr_stmt|;
name|expected
operator|.
name|remove
argument_list|(
name|SIBLINGS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|NodeIterator
name|siblings
init|=
name|sns
operator|.
name|getNodes
argument_list|()
decl_stmt|;
while|while
condition|(
name|siblings
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|sib
init|=
name|siblings
operator|.
name|nextNode
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected node: "
operator|+
name|sib
operator|.
name|getPath
argument_list|()
argument_list|,
name|expected
operator|.
name|remove
argument_list|(
name|sib
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Missing nodes: "
operator|+
name|expected
argument_list|,
name|expected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getSiblings
parameter_list|()
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|String
name|name
range|:
name|asList
argument_list|(
name|SIBLING
argument_list|,
name|SIBLINGS
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|sns
operator|.
name|hasNode
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|sib
init|=
name|sns
operator|.
name|getNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|session
operator|.
name|getNode
argument_list|(
name|sns
operator|.
name|getPath
argument_list|()
operator|+
literal|'/'
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|modifySiblings
parameter_list|()
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|String
name|name
range|:
name|SIBLINGS
control|)
block|{
name|Node
name|sib
init|=
name|sns
operator|.
name|getNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|sib
operator|.
name|addNode
argument_list|(
literal|"node"
argument_list|)
expr_stmt|;
name|sib
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|asList
argument_list|(
name|SIBLING
argument_list|,
name|SIBLINGS
argument_list|)
control|)
block|{
name|Node
name|sib
init|=
name|sns
operator|.
name|getNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|sib
operator|.
name|hasNode
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42L
argument_list|,
name|sib
operator|.
name|getProperty
argument_list|(
literal|"prop"
argument_list|)
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|rename
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|replace
argument_list|(
literal|'['
argument_list|,
literal|'_'
argument_list|)
operator|.
name|replace
argument_list|(
literal|']'
argument_list|,
literal|'_'
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|moveSiblings
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|target
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"target"
argument_list|)
decl_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|SIBLINGS
control|)
block|{
name|session
operator|.
name|move
argument_list|(
name|sns
operator|.
name|getPath
argument_list|()
operator|+
literal|'/'
operator|+
name|name
argument_list|,
name|target
operator|.
name|getPath
argument_list|()
operator|+
literal|'/'
operator|+
name|rename
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|SIBLINGS
control|)
block|{
name|assertFalse
argument_list|(
name|sns
operator|.
name|hasNode
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|target
operator|.
name|hasNode
argument_list|(
name|rename
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|renameSiblings
parameter_list|()
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|String
name|name
range|:
name|SIBLINGS
control|)
block|{
name|JackrabbitNode
name|sib
init|=
operator|(
name|JackrabbitNode
operator|)
name|sns
operator|.
name|getNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|sib
operator|.
name|rename
argument_list|(
name|rename
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|SIBLINGS
control|)
block|{
name|assertFalse
argument_list|(
name|sns
operator|.
name|hasNode
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sns
operator|.
name|hasNode
argument_list|(
name|rename
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

