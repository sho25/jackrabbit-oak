begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|ExerciseUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Authorization (Access Control Management)  * =============================================================================  *  * Title: Representation of Access Control Content in the Repository  * -----------------------------------------------------------------------------  *  * Goal:  * Understand how the default implementation represents access control content  * in the repository.  *  * Exercises:  *  * - Overview  *   Look {@code org/apache/jackrabbit/oak/plugins/nodetype/write/builtin_nodetypes.cnd}  *   and try to identify the built in node types used to store access control  *   content.  *  *   Question: Can explain the meaning of all types?  *   Question: Why are most item definitions protected?  *   Question: Can you identify node types that are not used? Can you explain why?  *  * - {@link #testAclContent()}  *   This test case writes an ACL to the repository.  *   Fix the test such that it retrieves the policy node and verify the expected  *   nature of this node.  *  * - {@link #testAceContent()}  *   This test case writes an ACL with entries to the repository.  *   Fix the test such that it retrieves the policy node and verify the expected  *   nature of the access control entry nodes.  *  * - {@link #testRestrictionContent()}  *   Same as above but this time you should look at the restrictions and how they  *   are represented in the content.  *  * - {@link #testMixins()}  *   Fix the test by defining the expected mixin types.  *  *   Question: Can you explain why those mixins are present and who added them?  *   Question: Can make a recommendation for other developers wrt the ac-related mixin types? Should they be added manually?  *  * - {@link #testRepoPolicy()}  *   Same as {@link #testAclContent()} but this time for the 'null' path.  *   Fix the test case and verify your expections.  *  *  * Additional Exercises:  * -----------------------------------------------------------------------------  *  * - Named {@code ReadPolicy}  *   In the previous exercises you learned about the special named policy  *   {@link org.apache.jackrabbit.oak.security.authorization.accesscontrol.AccessControlManagerImpl.ReadPolicy}.  *  *   Question: Can you find the content representation of this policy?  *   Question: Can you explain what is happening?  *  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|L6_AccessControlContentTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
name|AccessControlManager
name|acMgr
decl_stmt|;
specifier|private
name|JackrabbitAccessControlList
name|acl
decl_stmt|;
specifier|private
name|Principal
name|testPrincipal
decl_stmt|;
specifier|private
name|Privilege
index|[]
name|testPrivileges
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|acMgr
operator|=
name|superuser
operator|.
name|getAccessControlManager
argument_list|()
expr_stmt|;
name|testPrincipal
operator|=
name|ExerciseUtility
operator|.
name|createTestGroup
argument_list|(
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
argument_list|)
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|acl
operator|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|)
expr_stmt|;
if|if
condition|(
name|acl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|()
throw|;
block|}
name|testPrivileges
operator|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|,
name|Privilege
operator|.
name|JCR_WRITE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Authorizable
name|testGroup
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
operator|.
name|getAuthorizable
argument_list|(
name|testPrincipal
argument_list|)
decl_stmt|;
if|if
condition|(
name|testGroup
operator|!=
literal|null
condition|)
block|{
name|testGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testAclContent
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testRoot
argument_list|,
name|acl
argument_list|)
expr_stmt|;
comment|// EXERCISE retrieve the policy node and verify the expected name, primary type and child items
name|String
name|policyPath
init|=
literal|null
decl_stmt|;
name|Node
name|aclNode
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|policyPath
argument_list|)
decl_stmt|;
name|String
name|expectedName
init|=
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedName
argument_list|,
name|aclNode
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedPrimaryTypeName
init|=
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPrimaryTypeName
argument_list|,
name|aclNode
operator|.
name|getPrimaryNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|NodeIterator
name|aclChildren
init|=
name|aclNode
operator|.
name|getNodes
argument_list|()
decl_stmt|;
comment|// EXERCISE verify the correct number + expected nature of the children.
block|}
specifier|public
name|void
name|testAceContent
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|testPrivileges
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testRoot
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|String
name|policyPath
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|Node
name|aclNode
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|policyPath
argument_list|)
decl_stmt|;
name|NodeIterator
name|aclChildren
init|=
name|aclNode
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|int
name|expectedSize
init|=
operator|-
literal|1
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|aclChildren
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedPrimaryTypeName
init|=
literal|null
decl_stmt|;
comment|// EXERCISE: define the type of the first child node.
while|while
condition|(
name|aclChildren
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|ace
init|=
name|aclChildren
operator|.
name|nextNode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPrimaryTypeName
argument_list|,
name|ace
operator|.
name|getPrimaryNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|expectedPrimaryTypeName
operator|=
literal|null
expr_stmt|;
comment|// EXERCISE: define the type of the next item.
block|}
name|Node
name|ace
init|=
name|aclNode
operator|.
name|getNodes
argument_list|()
operator|.
name|nextNode
argument_list|()
decl_stmt|;
comment|// EXERCISE: retrieve all mandatory ac-related properties of this node and verify the expected value.
block|}
specifier|public
name|void
name|testRestrictionContent
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|ValueFactory
name|vf
init|=
name|superuser
operator|.
name|getValueFactory
argument_list|()
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|false
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AccessControlConstants
operator|.
name|REP_GLOB
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AccessControlConstants
operator|.
name|REP_PREFIXES
argument_list|,
operator|new
name|Value
index|[]
block|{
name|vf
operator|.
name|createValue
argument_list|(
literal|"jcr"
argument_list|)
block|,
name|vf
operator|.
name|createValue
argument_list|(
literal|"mix"
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testRoot
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|String
name|policyPath
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|Node
name|aclNode
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|policyPath
argument_list|)
decl_stmt|;
name|Node
name|ace
init|=
name|aclNode
operator|.
name|getNodes
argument_list|()
operator|.
name|nextNode
argument_list|()
decl_stmt|;
comment|// EXERCISE: retrieve the restrictions defined for the single ACE node
comment|// EXERCISE: verify the expected properties and their value(s)
block|}
specifier|public
name|void
name|testMixins
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testRoot
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|NodeType
index|[]
name|mixins
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getMixinNodeTypes
argument_list|()
decl_stmt|;
name|NodeType
index|[]
name|expectedMixins
init|=
literal|null
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedMixins
argument_list|,
name|mixins
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRepoPolicy
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|AccessControlList
name|repoAcl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|repoAcl
argument_list|)
expr_stmt|;
name|repoAcl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
literal|null
argument_list|,
name|repoAcl
argument_list|)
expr_stmt|;
comment|// EXERCISE retrieve the policy node and verify the expected name, primary type and child items
name|String
name|policyPath
init|=
literal|null
decl_stmt|;
name|Node
name|aclNode
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|policyPath
argument_list|)
decl_stmt|;
name|String
name|expectedName
init|=
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedName
argument_list|,
name|aclNode
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedPrimaryTypeName
init|=
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPrimaryTypeName
argument_list|,
name|aclNode
operator|.
name|getPrimaryNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|NodeIterator
name|aclChildren
init|=
name|aclNode
operator|.
name|getNodes
argument_list|()
decl_stmt|;
comment|// EXERCISE verify the correct number + expected nature of the children.
comment|// EXERCISE: can you also identify which mixins are being involved and where they got applied?
block|}
block|}
end_class

end_unit

