begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Privilege Management | Authorization  * =============================================================================  *  * Title: Privilege Discovery  * -----------------------------------------------------------------------------  *  * Goal:  * The aim of this exercise is to make you familiar on how to discover privileges  * granted for a given {@link javax.jcr.Session} or a given set of {@link java.security.Principal}s.  * After having completed this exercise you should be able to explain the difference  * compared to permission discovery as well as the benefit/drawback of using  * this API.  *  * Exercises:  *  * - {@link #testHasPrivileges()}  *   TODO  *  * - {@link #testHasPrivilegesPropertyPath()}  *   TODO  *  * - {@link #testHasPrivilegeNonExistingPath()}  *   TODO  *  * - {@link #testGetPrivileges()}  *   Practise {@link AccessControlManager#getPrivileges(String)}, which evaluates  *   the effective privileges for the editing {@code Session} associated with  *   the access control manager: fill in the expected privileges at the different  *   node paths.  *  * - {@link #testGetPrivilegesForPrincipals()}  *   This test illustrates the usage of {@link JackrabbitAccessControlManager#getPrivileges(String, Set)}  *   for different combinations of principals: fill in the expected privileges  *   granted at the different paths.  *   NOTE: the test is executed with the super-privileged adminitrative session.  *   Compare the results with the next test case.  *  * - {@link #testGetPrivilegesForPrincipalsUserSession()}  *   Same as {@link #testGetPrivilegesForPrincipals()} but this time the method  *   is called with the user session that as you could see in {@link #testGetPrivileges}  *   isn't granted to complete set of privileges.  *   Complete the test case and explain the behavior; in particular in comparison  *   with the previous test.  *  * - {@link #testCanAddNode()}  *   TODO  *  * - {@link #testHasPermissionVsHasPrivilege()}  *   TODO  *  * Related Exercises:  * -----------------------------------------------------------------------------  *  * - {@link org.apache.jackrabbit.oak.security.authorization.permission.L2_PermissionDiscoveryTest}  * - {@link org.apache.jackrabbit.oak.security.authorization.permission.L4_PrivilegesAndPermissionsTest}  *  *</pre>  *  * @see AccessControlManager#hasPrivileges(String, Privilege[])  * @see AccessControlManager#getPrivileges(String)  * @see org.apache.jackrabbit.api.security.JackrabbitAccessControlManager#hasPrivileges(String, Privilege[])  * @see org.apache.jackrabbit.api.security.JackrabbitAccessControlManager#getPrivileges(String)  */
end_comment

begin_class
specifier|public
class|class
name|L7_PrivilegeDiscoveryTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
name|Session
name|userSession
decl_stmt|;
specifier|private
name|Principal
name|uPrincipal
decl_stmt|;
specifier|private
name|Principal
name|gPrincipal
decl_stmt|;
specifier|private
name|String
name|testPath
decl_stmt|;
specifier|private
name|String
name|childPath
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|SimpleCredentials
name|creds
init|=
operator|new
name|SimpleCredentials
argument_list|(
literal|"u"
argument_list|,
literal|"u"
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|UserManager
name|uMgr
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
decl_stmt|;
name|User
name|u
init|=
name|uMgr
operator|.
name|createUser
argument_list|(
name|creds
operator|.
name|getUserID
argument_list|()
argument_list|,
name|creds
operator|.
name|getUserID
argument_list|()
argument_list|)
decl_stmt|;
name|Group
name|g
init|=
name|uMgr
operator|.
name|createGroup
argument_list|(
literal|"g"
argument_list|)
decl_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|uPrincipal
operator|=
name|u
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
name|gPrincipal
operator|=
name|g
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
name|Node
name|n
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|testRoot
argument_list|)
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|)
decl_stmt|;
name|testPath
operator|=
name|n
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|superuser
argument_list|,
name|Privilege
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|,
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|,
name|Privilege
operator|.
name|JCR_MODIFY_PROPERTIES
argument_list|)
decl_stmt|;
name|AccessControlUtils
operator|.
name|addAccessControlEntry
argument_list|(
name|superuser
argument_list|,
name|n
operator|.
name|getPath
argument_list|()
argument_list|,
name|gPrincipal
argument_list|,
name|privs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|AccessControlUtils
operator|.
name|addAccessControlEntry
argument_list|(
name|superuser
argument_list|,
name|n
operator|.
name|getPath
argument_list|()
argument_list|,
name|uPrincipal
argument_list|,
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_VERSION_MANAGEMENT
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Node
name|child
init|=
name|n
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|)
decl_stmt|;
name|childPath
operator|=
name|child
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|userSession
operator|=
name|getHelper
argument_list|()
operator|.
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
name|creds
argument_list|)
expr_stmt|;
comment|// NOTE the following precondition defined by the test-setup!
name|assertTrue
argument_list|(
name|userSession
operator|.
name|nodeExists
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|userSession
operator|.
name|nodeExists
argument_list|(
name|childPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|userSession
operator|.
name|logout
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|getNode
argument_list|(
name|testPath
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|UserManager
name|uMgr
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
decl_stmt|;
name|Authorizable
name|a
init|=
name|uMgr
operator|.
name|getAuthorizable
argument_list|(
literal|"u"
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|a
operator|=
name|uMgr
operator|.
name|getAuthorizable
argument_list|(
literal|"g"
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testHasPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlManager
name|acMgr
init|=
name|userSession
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
comment|// TODO
block|}
specifier|public
name|void
name|testHasPrivilegesPropertyPath
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO
block|}
specifier|public
name|void
name|testHasPrivilegeNonExistingPath
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO
block|}
specifier|public
name|void
name|testGetPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlManager
name|acMgr
init|=
name|userSession
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Privilege
argument_list|>
name|expected
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|Privilege
index|[]
name|testRootPrivs
init|=
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|testRoot
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|testRootPrivs
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
literal|null
expr_stmt|;
comment|// EXERCISE
name|Privilege
index|[]
name|privs
init|=
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|privs
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
literal|null
expr_stmt|;
comment|// EXERCISE
name|Privilege
index|[]
name|childPrivs
init|=
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|childPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|childPrivs
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetPrivilegesForPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
name|JackrabbitAccessControlManager
name|acMgr
init|=
operator|(
name|JackrabbitAccessControlManager
operator|)
name|superuser
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
comment|// 1. EXERCISE: expected privileges for the 'uPrincipal' only
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|uPrincipal
argument_list|)
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Privilege
argument_list|>
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|testRoot
argument_list|,
literal|null
argument_list|,
comment|// EXERCISE
name|testPath
argument_list|,
literal|null
argument_list|,
comment|// EXERCISE
name|childPath
argument_list|,
literal|null
comment|// EXERCISE
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|expected
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Privilege
argument_list|>
name|expectedPrivs
init|=
name|expected
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|,
name|principals
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPrivs
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|privs
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 2. EXERCISE: expected privileges for the 'gPrincipal' only
name|principals
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|gPrincipal
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|testRoot
argument_list|,
literal|null
argument_list|,
name|testPath
argument_list|,
literal|null
argument_list|,
name|childPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|expected
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Privilege
argument_list|>
name|expectedPrivs
init|=
name|expected
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|,
name|principals
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPrivs
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|privs
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 3. EXERCISE: expected privileges for the 'uPrincipal' and 'gPrincipal'
name|principals
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|uPrincipal
argument_list|,
name|gPrincipal
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|testRoot
argument_list|,
literal|null
argument_list|,
name|testPath
argument_list|,
literal|null
argument_list|,
name|childPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|expected
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Privilege
argument_list|>
name|expectedPrivs
init|=
name|expected
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|,
name|principals
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPrivs
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|privs
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 4. EXERCISE: expected privileges for the 'uPrincipal', 'gPrincipal' + everyone
name|principals
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|uPrincipal
argument_list|,
name|gPrincipal
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|testRoot
argument_list|,
literal|null
argument_list|,
name|testPath
argument_list|,
literal|null
argument_list|,
name|childPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|expected
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Privilege
argument_list|>
name|expectedPrivs
init|=
name|expected
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|,
name|principals
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPrivs
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|privs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetPrivilegesForPrincipalsUserSession
parameter_list|()
throws|throws
name|Exception
block|{
name|JackrabbitAccessControlManager
name|acMgr
init|=
operator|(
name|JackrabbitAccessControlManager
operator|)
name|userSession
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
comment|// EXERCISE: complete the test case and explain the behaviour
name|Privilege
index|[]
name|privs
init|=
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|testPath
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|gPrincipal
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Privilege
argument_list|>
name|expectedPrivs
init|=
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPrivs
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|privs
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCanAddNode
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO
block|}
specifier|public
name|void
name|testHasPermissionVsHasPrivilege
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO
block|}
block|}
end_class

end_unit

