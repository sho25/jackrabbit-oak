begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests constraint simplification  */
end_comment

begin_class
specifier|public
class|class
name|SimplifyTest
block|{
specifier|private
specifier|static
specifier|final
name|StaticOperandImpl
name|A
init|=
operator|new
name|LiteralImpl
argument_list|(
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"A"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|StaticOperandImpl
name|B
init|=
operator|new
name|LiteralImpl
argument_list|(
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"B"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|StaticOperandImpl
name|C
init|=
operator|new
name|LiteralImpl
argument_list|(
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"C"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PropertyValueImpl
name|foo
init|=
operator|new
name|PropertyValueImpl
argument_list|(
literal|"a"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ComparisonImpl
name|fooIsA
init|=
operator|new
name|ComparisonImpl
argument_list|(
name|foo
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|A
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ComparisonImpl
name|fooIsB
init|=
operator|new
name|ComparisonImpl
argument_list|(
name|foo
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|B
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ComparisonImpl
name|fooIsC
init|=
operator|new
name|ComparisonImpl
argument_list|(
name|foo
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|C
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|InImpl
name|fooInAB
init|=
operator|new
name|InImpl
argument_list|(
name|foo
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|A
argument_list|,
name|B
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|InImpl
name|fooInBC
init|=
operator|new
name|InImpl
argument_list|(
name|foo
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|B
argument_list|,
name|C
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|InImpl
name|fooInABC
init|=
operator|new
name|InImpl
argument_list|(
name|foo
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|A
argument_list|,
name|B
argument_list|,
name|C
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|simplifyIn
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|fooIsA
argument_list|,
operator|new
name|InImpl
argument_list|(
name|foo
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|A
argument_list|)
argument_list|)
operator|.
name|simplify
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooIsA
argument_list|,
operator|new
name|InImpl
argument_list|(
name|foo
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|A
argument_list|,
name|A
argument_list|)
argument_list|)
operator|.
name|simplify
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooInAB
argument_list|,
operator|new
name|InImpl
argument_list|(
name|foo
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|A
argument_list|,
name|A
argument_list|,
name|B
argument_list|)
argument_list|)
operator|.
name|simplify
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|simplifyOr
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|fooIsA
argument_list|,
operator|new
name|OrImpl
argument_list|(
name|fooIsA
argument_list|,
name|fooIsA
argument_list|)
operator|.
name|simplify
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooInAB
argument_list|,
operator|new
name|OrImpl
argument_list|(
name|fooIsA
argument_list|,
name|fooIsB
argument_list|)
operator|.
name|simplify
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooInBC
argument_list|,
operator|new
name|OrImpl
argument_list|(
name|fooIsB
argument_list|,
name|fooIsC
argument_list|)
operator|.
name|simplify
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooInABC
argument_list|,
operator|new
name|OrImpl
argument_list|(
name|fooInAB
argument_list|,
name|fooIsC
argument_list|)
operator|.
name|simplify
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooInABC
argument_list|,
operator|new
name|OrImpl
argument_list|(
name|fooIsA
argument_list|,
name|fooInBC
argument_list|)
operator|.
name|simplify
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooInABC
argument_list|,
operator|new
name|OrImpl
argument_list|(
name|fooInAB
argument_list|,
name|fooInBC
argument_list|)
operator|.
name|simplify
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooInABC
argument_list|,
operator|new
name|OrImpl
argument_list|(
name|fooIsA
argument_list|,
name|fooInABC
argument_list|)
operator|.
name|simplify
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooInABC
argument_list|,
operator|new
name|OrImpl
argument_list|(
name|fooIsA
argument_list|,
operator|new
name|OrImpl
argument_list|(
name|fooIsB
argument_list|,
name|fooIsC
argument_list|)
argument_list|)
operator|.
name|simplify
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

