begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|ContentMirrorStoreStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|UniqueEntryStoreStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
operator|.
name|HybridPropertyIndexUtil
operator|.
name|PROPERTY_INDEX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
operator|.
name|HybridPropertyIndexUtil
operator|.
name|PROP_HEAD_BUCKET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
operator|.
name|HybridPropertyIndexUtil
operator|.
name|PROP_PREVIOUS_BUCKET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexUtil
operator|.
name|encode
import|;
end_import

begin_class
specifier|public
class|class
name|HybridPropertyIndexLookup
block|{
specifier|private
specifier|final
name|String
name|indexPath
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|indexState
decl_stmt|;
specifier|public
name|HybridPropertyIndexLookup
parameter_list|(
name|String
name|indexPath
parameter_list|,
name|NodeState
name|indexState
parameter_list|)
block|{
name|this
operator|.
name|indexPath
operator|=
name|indexPath
expr_stmt|;
name|this
operator|.
name|indexState
operator|=
name|indexState
expr_stmt|;
block|}
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|query
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|PropertyValue
name|value
parameter_list|)
block|{
name|String
name|propIdxNodeName
init|=
name|HybridPropertyIndexUtil
operator|.
name|getNodeName
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
name|NodeState
name|propIndexRootNode
init|=
name|indexState
operator|.
name|getChildNode
argument_list|(
name|PROPERTY_INDEX
argument_list|)
decl_stmt|;
name|NodeState
name|propIndexNode
init|=
name|propIndexRootNode
operator|.
name|getChildNode
argument_list|(
name|propIdxNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propIndexNode
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|//TODO Check for non root indexes
name|String
name|indexName
init|=
name|indexPath
operator|+
literal|"("
operator|+
name|propertyName
operator|+
literal|")"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|values
init|=
name|encode
argument_list|(
name|value
argument_list|,
name|pd
operator|.
name|valuePattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|pd
operator|.
name|unique
condition|)
block|{
return|return
name|queryUnique
argument_list|(
name|filter
argument_list|,
name|indexName
argument_list|,
name|propIndexRootNode
argument_list|,
name|propIdxNodeName
argument_list|,
name|values
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|querySimple
argument_list|(
name|filter
argument_list|,
name|indexName
argument_list|,
name|propIndexNode
argument_list|,
name|values
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|queryUnique
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|String
name|indexName
parameter_list|,
name|NodeState
name|propIndexRootNode
parameter_list|,
name|String
name|propIdxNodeName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
name|UniqueEntryStoreStrategy
name|s
init|=
operator|new
name|UniqueEntryStoreStrategy
argument_list|(
name|propIdxNodeName
argument_list|)
decl_stmt|;
return|return
name|s
operator|.
name|query
argument_list|(
name|filter
argument_list|,
name|indexName
argument_list|,
name|propIndexRootNode
argument_list|,
name|values
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|querySimple
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|String
name|indexName
parameter_list|,
name|NodeState
name|propIndexNode
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|concat
argument_list|(
name|queryBucket
argument_list|(
name|filter
argument_list|,
name|indexName
argument_list|,
name|propIndexNode
argument_list|,
name|PROP_HEAD_BUCKET
argument_list|,
name|values
argument_list|)
argument_list|,
name|queryBucket
argument_list|(
name|filter
argument_list|,
name|indexName
argument_list|,
name|propIndexNode
argument_list|,
name|PROP_PREVIOUS_BUCKET
argument_list|,
name|values
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|queryBucket
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|String
name|indexName
parameter_list|,
name|NodeState
name|propIndexNode
parameter_list|,
name|String
name|bucketPropName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
name|String
name|bucketName
init|=
name|propIndexNode
operator|.
name|getString
argument_list|(
name|bucketPropName
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucketName
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|ContentMirrorStoreStrategy
name|s
init|=
operator|new
name|ContentMirrorStoreStrategy
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
return|return
name|s
operator|.
name|query
argument_list|(
name|filter
argument_list|,
name|indexName
argument_list|,
name|propIndexNode
argument_list|,
name|bucketName
argument_list|,
name|values
argument_list|)
return|;
block|}
block|}
end_class

end_unit

