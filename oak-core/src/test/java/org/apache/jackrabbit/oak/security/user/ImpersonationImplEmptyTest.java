begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|GroupPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|AdminPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|SystemPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|ImpersonationImplEmptyTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|final
name|GroupPrincipal
name|groupPrincipal
init|=
operator|new
name|GroupPrincipal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isMember
parameter_list|(
name|Principal
name|member
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|members
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"name"
return|;
block|}
block|}
decl_stmt|;
name|UserImpl
name|user
decl_stmt|;
name|ImpersonationImpl
name|impersonation
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|String
name|uid
init|=
literal|"u"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|user
operator|=
operator|(
name|UserImpl
operator|)
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createUser
argument_list|(
name|uid
argument_list|,
name|uid
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|impersonation
operator|=
operator|new
name|ImpersonationImpl
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|user
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Principal
name|getAdminPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|id
init|=
name|getConfig
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getParameters
argument_list|()
operator|.
name|getConfigValue
argument_list|(
name|UserConstants
operator|.
name|PARAM_ADMIN_ID
argument_list|,
name|UserConstants
operator|.
name|DEFAULT_ADMIN_ID
argument_list|)
decl_stmt|;
name|User
name|adminUser
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|id
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|adminUser
argument_list|)
expr_stmt|;
return|return
name|adminUser
operator|.
name|getPrincipal
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetImpersonators
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|impersonation
operator|.
name|getImpersonators
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrantNonExistingPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|impersonation
operator|.
name|grantImpersonation
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|"principal"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrantNonExistingTreeBasedPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|TreeBasedPrincipal
name|tbPrincipal
init|=
operator|new
name|TreeBasedPrincipal
argument_list|(
literal|"name"
argument_list|,
literal|"/nonExisting"
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|impersonation
operator|.
name|grantImpersonation
argument_list|(
name|tbPrincipal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrantNonAuthorizableTreeBasedPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|TreeBasedPrincipal
name|tbPrincipal
init|=
operator|new
name|TreeBasedPrincipal
argument_list|(
literal|"name"
argument_list|,
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|impersonation
operator|.
name|grantImpersonation
argument_list|(
name|tbPrincipal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrantAdminPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|impersonation
operator|.
name|grantImpersonation
argument_list|(
operator|new
name|AdminPrincipal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"name"
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrantAdminPrincipal2
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|impersonation
operator|.
name|grantImpersonation
argument_list|(
name|getAdminPrincipal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrantAdminPrincipal3
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|impersonation
operator|.
name|grantImpersonation
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
name|getAdminPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrantSystemPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|impersonation
operator|.
name|grantImpersonation
argument_list|(
name|SystemPrincipal
operator|.
name|INSTANCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrantGroupPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|group
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createGroup
argument_list|(
literal|"testGroup"
argument_list|)
decl_stmt|;
try|try
block|{
name|assertFalse
argument_list|(
name|impersonation
operator|.
name|grantImpersonation
argument_list|(
name|group
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|group
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrantNonExistingGroupPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|impersonation
operator|.
name|grantImpersonation
argument_list|(
name|groupPrincipal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrantExistingUserPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|impersonation
operator|.
name|grantImpersonation
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrantAgain
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Principal
name|principal
init|=
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|impersonation
operator|.
name|grantImpersonation
argument_list|(
name|principal
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|impersonation
operator|.
name|grantImpersonation
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|impersonation
operator|.
name|grantImpersonation
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|impersonation
operator|.
name|grantImpersonation
argument_list|(
parameter_list|()
lambda|->
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrantSelf
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|impersonation
operator|.
name|grantImpersonation
argument_list|(
name|user
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRevokeNotGranted
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|impersonation
operator|.
name|revokeImpersonation
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllowsNull
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|impersonation
operator|.
name|allows
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllowsEmpty
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|impersonation
operator|.
name|allows
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllowsGroup
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|impersonation
operator|.
name|allows
argument_list|(
name|createSubject
argument_list|(
name|groupPrincipal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllowsAdminPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|impersonation
operator|.
name|allows
argument_list|(
name|createSubject
argument_list|(
name|getAdminPrincipal
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllowsAdminPrincipal2
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|impersonation
operator|.
name|allows
argument_list|(
name|createSubject
argument_list|(
call|(
name|AdminPrincipal
call|)
argument_list|()
operator|->
literal|"principalName"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllowsSystemPrincipal
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|impersonation
operator|.
name|allows
argument_list|(
name|createSubject
argument_list|(
name|SystemPrincipal
operator|.
name|INSTANCE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllowsNonExistingPrincipal
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|impersonation
operator|.
name|allows
argument_list|(
name|createSubject
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|"nonExisting"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|NotNull
specifier|private
specifier|static
name|Subject
name|createSubject
parameter_list|(
annotation|@
name|NotNull
name|Principal
modifier|...
name|principals
parameter_list|)
block|{
return|return
operator|new
name|Subject
argument_list|(
literal|true
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|principals
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

