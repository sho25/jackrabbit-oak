begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|RevisionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|RevisionStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|AbstractFilteringIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|AbstractRangeIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|ChildNodeEntriesTree
implements|implements
name|ChildNodeEntries
block|{
specifier|protected
specifier|static
specifier|final
name|List
argument_list|<
name|ChildNode
argument_list|>
name|EMPTY
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|protected
name|int
name|count
decl_stmt|;
specifier|protected
name|RevisionProvider
name|revProvider
decl_stmt|;
comment|// array of *immutable* IndexEntry objects
specifier|protected
name|IndexEntry
index|[]
name|index
init|=
operator|new
name|IndexEntry
index|[
literal|1024
index|]
decl_stmt|;
comment|// 2^10
name|ChildNodeEntriesTree
parameter_list|(
name|RevisionProvider
name|revProvider
parameter_list|)
block|{
name|this
operator|.
name|revProvider
operator|=
name|revProvider
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|inlined
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|//------------------------------------------------------------< overrides>
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|ChildNodeEntriesTree
condition|)
block|{
name|ChildNodeEntriesTree
name|other
init|=
operator|(
name|ChildNodeEntriesTree
operator|)
name|obj
decl_stmt|;
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|index
argument_list|,
name|other
operator|.
name|index
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|ChildNodeEntriesTree
name|clone
init|=
literal|null
decl_stmt|;
try|try
block|{
name|clone
operator|=
operator|(
name|ChildNodeEntriesTree
operator|)
name|super
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
comment|// can't possibly get here
block|}
comment|// shallow clone of array of immutable IndexEntry objects
name|clone
operator|.
name|index
operator|=
name|index
operator|.
name|clone
argument_list|()
expr_stmt|;
return|return
name|clone
return|;
block|}
comment|//-------------------------------------------------------------< read ops>
annotation|@
name|Override
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
annotation|@
name|Override
specifier|public
name|ChildNode
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|IndexEntry
name|entry
init|=
name|index
index|[
name|keyToIndex
argument_list|(
name|name
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|entry
operator|instanceof
name|ChildNode
condition|)
block|{
name|ChildNode
name|cne
init|=
operator|(
name|ChildNode
operator|)
name|entry
decl_stmt|;
return|return
name|cne
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
name|cne
else|:
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|instanceof
name|BucketInfo
condition|)
block|{
name|BucketInfo
name|bi
init|=
operator|(
name|BucketInfo
operator|)
name|entry
decl_stmt|;
name|ChildNodeEntries
name|entries
init|=
name|retrieveBucket
argument_list|(
name|bi
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|entries
operator|==
literal|null
condition|?
literal|null
else|:
name|entries
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
else|else
block|{
comment|// dirty bucket
name|Bucket
name|bucket
init|=
operator|(
name|Bucket
operator|)
name|entry
decl_stmt|;
return|return
name|bucket
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getNames
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|cnt
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|<
literal|0
operator|||
name|cnt
operator|<
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
if|if
condition|(
name|offset
operator|>=
name|count
operator|||
name|cnt
operator|==
literal|0
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|empty
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
return|return
name|empty
operator|.
name|iterator
argument_list|()
return|;
block|}
if|if
condition|(
name|cnt
operator|==
operator|-
literal|1
operator|||
operator|(
name|offset
operator|+
name|cnt
operator|)
operator|>
name|count
condition|)
block|{
name|cnt
operator|=
name|count
operator|-
name|offset
expr_stmt|;
block|}
return|return
operator|new
name|AbstractRangeIterator
argument_list|<
name|String
argument_list|>
argument_list|(
name|getEntries
argument_list|(
name|offset
argument_list|,
name|cnt
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|String
name|doNext
parameter_list|()
block|{
name|ChildNode
name|cne
init|=
operator|(
name|ChildNode
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|cne
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNode
argument_list|>
name|getEntries
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|cnt
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|<
literal|0
operator|||
name|cnt
operator|<
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
if|if
condition|(
name|offset
operator|>=
name|count
operator|||
name|cnt
operator|==
literal|0
condition|)
block|{
return|return
name|EMPTY
operator|.
name|iterator
argument_list|()
return|;
block|}
name|int
name|skipped
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|cnt
operator|==
operator|-
literal|1
operator|||
operator|(
name|offset
operator|+
name|cnt
operator|)
operator|>
name|count
condition|)
block|{
name|cnt
operator|=
name|count
operator|-
name|offset
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|ChildNode
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|ChildNode
argument_list|>
argument_list|(
name|cnt
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexEntry
name|e
range|:
name|index
control|)
block|{
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|skipped
operator|+
name|e
operator|.
name|getSize
argument_list|()
operator|<=
name|offset
condition|)
block|{
name|skipped
operator|+=
name|e
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|e
operator|instanceof
name|NodeInfo
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|(
name|NodeInfo
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|BucketInfo
condition|)
block|{
name|BucketInfo
name|bi
init|=
operator|(
name|BucketInfo
operator|)
name|e
decl_stmt|;
name|ChildNodeEntries
name|bucket
init|=
name|retrieveBucket
argument_list|(
name|bi
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ChildNode
argument_list|>
name|it
init|=
name|bucket
operator|.
name|getEntries
argument_list|(
name|offset
operator|-
name|skipped
argument_list|,
name|cnt
operator|-
name|list
operator|.
name|size
argument_list|()
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|skipped
operator|=
name|offset
expr_stmt|;
block|}
else|else
block|{
comment|// dirty bucket
name|Bucket
name|bucket
init|=
operator|(
name|Bucket
operator|)
name|e
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ChildNode
argument_list|>
name|it
init|=
name|bucket
operator|.
name|getEntries
argument_list|(
name|offset
operator|-
name|skipped
argument_list|,
name|cnt
operator|-
name|list
operator|.
name|size
argument_list|()
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|skipped
operator|=
name|offset
expr_stmt|;
block|}
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
name|cnt
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
return|return
name|list
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|//------------------------------------------------------------< write ops>
annotation|@
name|Override
specifier|public
name|ChildNode
name|add
parameter_list|(
name|ChildNode
name|entry
parameter_list|)
block|{
name|int
name|idx
init|=
name|keyToIndex
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|IndexEntry
name|ie
init|=
name|index
index|[
name|idx
index|]
decl_stmt|;
if|if
condition|(
name|ie
operator|==
literal|null
condition|)
block|{
name|index
index|[
name|idx
index|]
operator|=
operator|new
name|NodeInfo
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|ie
operator|instanceof
name|ChildNode
condition|)
block|{
name|ChildNode
name|existing
init|=
operator|(
name|ChildNode
operator|)
name|ie
decl_stmt|;
if|if
condition|(
name|existing
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|index
index|[
name|idx
index|]
operator|=
operator|new
name|NodeInfo
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|existing
return|;
block|}
else|else
block|{
name|Bucket
name|bucket
init|=
operator|new
name|Bucket
argument_list|()
decl_stmt|;
name|bucket
operator|.
name|add
argument_list|(
name|existing
argument_list|)
expr_stmt|;
name|bucket
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|index
index|[
name|idx
index|]
operator|=
name|bucket
expr_stmt|;
name|count
operator|++
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|Bucket
name|bucket
decl_stmt|;
if|if
condition|(
name|ie
operator|instanceof
name|BucketInfo
condition|)
block|{
name|BucketInfo
name|bi
init|=
operator|(
name|BucketInfo
operator|)
name|ie
decl_stmt|;
name|bucket
operator|=
operator|new
name|Bucket
argument_list|(
name|retrieveBucket
argument_list|(
name|bi
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// dirty bucket
name|bucket
operator|=
operator|(
name|Bucket
operator|)
name|ie
expr_stmt|;
block|}
name|ChildNode
name|existing
init|=
name|bucket
operator|.
name|add
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|equals
argument_list|(
name|existing
argument_list|)
condition|)
block|{
comment|// no-op
return|return
name|existing
return|;
block|}
name|index
index|[
name|idx
index|]
operator|=
name|bucket
expr_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
comment|// new entry
name|count
operator|++
expr_stmt|;
block|}
return|return
name|existing
return|;
block|}
annotation|@
name|Override
specifier|public
name|ChildNode
name|remove
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|idx
init|=
name|keyToIndex
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|IndexEntry
name|ie
init|=
name|index
index|[
name|idx
index|]
decl_stmt|;
if|if
condition|(
name|ie
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|ie
operator|instanceof
name|ChildNode
condition|)
block|{
name|ChildNode
name|existing
init|=
operator|(
name|ChildNode
operator|)
name|ie
decl_stmt|;
if|if
condition|(
name|existing
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|index
index|[
name|idx
index|]
operator|=
literal|null
expr_stmt|;
name|count
operator|--
expr_stmt|;
return|return
name|existing
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
name|Bucket
name|bucket
decl_stmt|;
if|if
condition|(
name|ie
operator|instanceof
name|BucketInfo
condition|)
block|{
name|BucketInfo
name|bi
init|=
operator|(
name|BucketInfo
operator|)
name|ie
decl_stmt|;
name|bucket
operator|=
operator|new
name|Bucket
argument_list|(
name|retrieveBucket
argument_list|(
name|bi
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// dirty bucket
name|bucket
operator|=
operator|(
name|Bucket
operator|)
name|ie
expr_stmt|;
block|}
name|ChildNode
name|existing
init|=
name|bucket
operator|.
name|remove
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|bucket
operator|.
name|getCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|index
index|[
name|idx
index|]
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bucket
operator|.
name|getCount
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// inline single remaining entry
name|ChildNode
name|remaining
init|=
name|bucket
operator|.
name|getEntries
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|next
argument_list|()
decl_stmt|;
name|index
index|[
name|idx
index|]
operator|=
operator|new
name|NodeInfo
argument_list|(
name|remaining
operator|.
name|getName
argument_list|()
argument_list|,
name|remaining
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|index
index|[
name|idx
index|]
operator|=
name|bucket
expr_stmt|;
block|}
name|count
operator|--
expr_stmt|;
return|return
name|existing
return|;
block|}
annotation|@
name|Override
specifier|public
name|ChildNode
name|rename
parameter_list|(
name|String
name|oldName
parameter_list|,
name|String
name|newName
parameter_list|)
block|{
if|if
condition|(
name|oldName
operator|.
name|equals
argument_list|(
name|newName
argument_list|)
condition|)
block|{
return|return
name|get
argument_list|(
name|oldName
argument_list|)
return|;
block|}
name|ChildNode
name|old
init|=
name|remove
argument_list|(
name|oldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|add
argument_list|(
operator|new
name|ChildNode
argument_list|(
name|newName
argument_list|,
name|old
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|old
return|;
block|}
comment|//-------------------------------------------------------------< diff ops>
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNode
argument_list|>
name|getAdded
parameter_list|(
specifier|final
name|ChildNodeEntries
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|ChildNodeEntriesTree
condition|)
block|{
name|List
argument_list|<
name|ChildNode
argument_list|>
name|added
init|=
operator|new
name|ArrayList
argument_list|<
name|ChildNode
argument_list|>
argument_list|()
decl_stmt|;
name|ChildNodeEntriesTree
name|otherEntries
init|=
operator|(
name|ChildNodeEntriesTree
operator|)
name|other
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|IndexEntry
name|ie1
init|=
name|index
index|[
name|i
index|]
decl_stmt|;
name|IndexEntry
name|ie2
init|=
name|otherEntries
operator|.
name|index
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ie1
operator|==
literal|null
condition|?
name|ie2
operator|==
literal|null
else|:
name|ie1
operator|.
name|equals
argument_list|(
name|ie2
argument_list|)
operator|)
condition|)
block|{
comment|// index entries aren't equal
if|if
condition|(
name|ie1
operator|==
literal|null
condition|)
block|{
comment|// this index entry in null => other must be non-null
if|if
condition|(
name|ie2
operator|instanceof
name|NodeInfo
condition|)
block|{
name|added
operator|.
name|add
argument_list|(
operator|(
name|ChildNode
operator|)
name|ie2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ie2
operator|instanceof
name|BucketInfo
condition|)
block|{
name|BucketInfo
name|bi
init|=
operator|(
name|BucketInfo
operator|)
name|ie2
decl_stmt|;
name|ChildNodeEntries
name|bucket
init|=
name|retrieveBucket
argument_list|(
name|bi
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ChildNode
argument_list|>
name|it
init|=
name|bucket
operator|.
name|getEntries
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|added
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// dirty bucket
name|Bucket
name|bucket
init|=
operator|(
name|Bucket
operator|)
name|ie2
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ChildNode
argument_list|>
name|it
init|=
name|bucket
operator|.
name|getEntries
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|added
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|ie2
operator|!=
literal|null
condition|)
block|{
comment|// both this and other index entry are non-null
name|ChildNodeEntriesMap
name|bucket1
decl_stmt|;
if|if
condition|(
name|ie1
operator|instanceof
name|NodeInfo
condition|)
block|{
name|bucket1
operator|=
operator|new
name|ChildNodeEntriesMap
argument_list|()
expr_stmt|;
name|bucket1
operator|.
name|add
argument_list|(
operator|(
name|ChildNode
operator|)
name|ie1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ie1
operator|instanceof
name|BucketInfo
condition|)
block|{
name|BucketInfo
name|bi
init|=
operator|(
name|BucketInfo
operator|)
name|ie1
decl_stmt|;
name|bucket1
operator|=
name|retrieveBucket
argument_list|(
name|bi
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// dirty bucket
name|bucket1
operator|=
operator|(
name|Bucket
operator|)
name|ie1
expr_stmt|;
block|}
name|ChildNodeEntriesMap
name|bucket2
decl_stmt|;
if|if
condition|(
name|ie2
operator|instanceof
name|NodeInfo
condition|)
block|{
name|bucket2
operator|=
operator|new
name|ChildNodeEntriesMap
argument_list|()
expr_stmt|;
name|bucket2
operator|.
name|add
argument_list|(
operator|(
name|ChildNode
operator|)
name|ie2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ie2
operator|instanceof
name|BucketInfo
condition|)
block|{
name|BucketInfo
name|bi
init|=
operator|(
name|BucketInfo
operator|)
name|ie2
decl_stmt|;
name|bucket2
operator|=
name|retrieveBucket
argument_list|(
name|bi
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// dirty bucket
name|bucket2
operator|=
operator|(
name|Bucket
operator|)
name|ie2
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|ChildNode
argument_list|>
name|it
init|=
name|bucket1
operator|.
name|getAdded
argument_list|(
name|bucket2
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|added
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|added
operator|.
name|iterator
argument_list|()
return|;
block|}
else|else
block|{
comment|// todo optimize
return|return
operator|new
name|AbstractFilteringIterator
argument_list|<
name|ChildNode
argument_list|>
argument_list|(
name|other
operator|.
name|getEntries
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|include
parameter_list|(
name|ChildNode
name|entry
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|null
return|;
block|}
block|}
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNode
argument_list|>
name|getRemoved
parameter_list|(
specifier|final
name|ChildNodeEntries
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|ChildNodeEntriesTree
condition|)
block|{
name|List
argument_list|<
name|ChildNode
argument_list|>
name|removed
init|=
operator|new
name|ArrayList
argument_list|<
name|ChildNode
argument_list|>
argument_list|()
decl_stmt|;
name|ChildNodeEntriesTree
name|otherEntries
init|=
operator|(
name|ChildNodeEntriesTree
operator|)
name|other
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|IndexEntry
name|ie1
init|=
name|index
index|[
name|i
index|]
decl_stmt|;
name|IndexEntry
name|ie2
init|=
name|otherEntries
operator|.
name|index
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ie1
operator|==
literal|null
condition|?
name|ie2
operator|==
literal|null
else|:
name|ie1
operator|.
name|equals
argument_list|(
name|ie2
argument_list|)
operator|)
condition|)
block|{
comment|// index entries aren't equal
if|if
condition|(
name|ie2
operator|==
literal|null
condition|)
block|{
comment|// other index entry is null => this must be non-null
if|if
condition|(
name|ie1
operator|instanceof
name|NodeInfo
condition|)
block|{
name|removed
operator|.
name|add
argument_list|(
operator|(
name|ChildNode
operator|)
name|ie1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ie1
operator|instanceof
name|BucketInfo
condition|)
block|{
name|BucketInfo
name|bi
init|=
operator|(
name|BucketInfo
operator|)
name|ie1
decl_stmt|;
name|ChildNodeEntries
name|bucket
init|=
name|retrieveBucket
argument_list|(
name|bi
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ChildNode
argument_list|>
name|it
init|=
name|bucket
operator|.
name|getEntries
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|removed
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// dirty bucket
name|Bucket
name|bucket
init|=
operator|(
name|Bucket
operator|)
name|ie1
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ChildNode
argument_list|>
name|it
init|=
name|bucket
operator|.
name|getEntries
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|removed
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|ie1
operator|!=
literal|null
condition|)
block|{
comment|// both this and other index entry are non-null
name|ChildNodeEntriesMap
name|bucket1
decl_stmt|;
if|if
condition|(
name|ie1
operator|instanceof
name|NodeInfo
condition|)
block|{
name|bucket1
operator|=
operator|new
name|ChildNodeEntriesMap
argument_list|()
expr_stmt|;
name|bucket1
operator|.
name|add
argument_list|(
operator|(
name|ChildNode
operator|)
name|ie1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ie1
operator|instanceof
name|BucketInfo
condition|)
block|{
name|BucketInfo
name|bi
init|=
operator|(
name|BucketInfo
operator|)
name|ie1
decl_stmt|;
name|bucket1
operator|=
name|retrieveBucket
argument_list|(
name|bi
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// dirty bucket
name|bucket1
operator|=
operator|(
name|Bucket
operator|)
name|ie1
expr_stmt|;
block|}
name|ChildNodeEntriesMap
name|bucket2
decl_stmt|;
if|if
condition|(
name|ie2
operator|instanceof
name|NodeInfo
condition|)
block|{
name|bucket2
operator|=
operator|new
name|ChildNodeEntriesMap
argument_list|()
expr_stmt|;
name|bucket2
operator|.
name|add
argument_list|(
operator|(
name|ChildNode
operator|)
name|ie2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ie2
operator|instanceof
name|BucketInfo
condition|)
block|{
name|BucketInfo
name|bi
init|=
operator|(
name|BucketInfo
operator|)
name|ie2
decl_stmt|;
name|bucket2
operator|=
name|retrieveBucket
argument_list|(
name|bi
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// dirty bucket
name|bucket2
operator|=
operator|(
name|Bucket
operator|)
name|ie2
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|ChildNode
argument_list|>
name|it
init|=
name|bucket1
operator|.
name|getRemoved
argument_list|(
name|bucket2
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|removed
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|removed
operator|.
name|iterator
argument_list|()
return|;
block|}
else|else
block|{
comment|// todo optimize
return|return
operator|new
name|AbstractFilteringIterator
argument_list|<
name|ChildNode
argument_list|>
argument_list|(
name|getEntries
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|include
parameter_list|(
name|ChildNode
name|entry
parameter_list|)
block|{
return|return
name|other
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|null
return|;
block|}
block|}
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNode
argument_list|>
name|getModified
parameter_list|(
specifier|final
name|ChildNodeEntries
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|ChildNodeEntriesTree
condition|)
block|{
name|List
argument_list|<
name|ChildNode
argument_list|>
name|modified
init|=
operator|new
name|ArrayList
argument_list|<
name|ChildNode
argument_list|>
argument_list|()
decl_stmt|;
name|ChildNodeEntriesTree
name|otherEntries
init|=
operator|(
name|ChildNodeEntriesTree
operator|)
name|other
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|IndexEntry
name|ie1
init|=
name|index
index|[
name|i
index|]
decl_stmt|;
name|IndexEntry
name|ie2
init|=
name|otherEntries
operator|.
name|index
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|ie1
operator|!=
literal|null
operator|&&
name|ie2
operator|!=
literal|null
operator|&&
operator|!
name|ie1
operator|.
name|equals
argument_list|(
name|ie2
argument_list|)
condition|)
block|{
comment|// index entries are non-null and not equal
if|if
condition|(
name|ie1
operator|instanceof
name|NodeInfo
operator|&&
name|ie2
operator|instanceof
name|NodeInfo
condition|)
block|{
name|NodeInfo
name|ni1
init|=
operator|(
name|NodeInfo
operator|)
name|ie1
decl_stmt|;
name|NodeInfo
name|ni2
init|=
operator|(
name|NodeInfo
operator|)
name|ie2
decl_stmt|;
if|if
condition|(
name|ni1
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ni2
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
name|ni1
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|ni2
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|modified
operator|.
name|add
argument_list|(
name|ni1
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|ChildNodeEntriesMap
name|bucket1
decl_stmt|;
if|if
condition|(
name|ie1
operator|instanceof
name|NodeInfo
condition|)
block|{
name|bucket1
operator|=
operator|new
name|ChildNodeEntriesMap
argument_list|()
expr_stmt|;
name|bucket1
operator|.
name|add
argument_list|(
operator|(
name|ChildNode
operator|)
name|ie1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ie1
operator|instanceof
name|BucketInfo
condition|)
block|{
name|BucketInfo
name|bi
init|=
operator|(
name|BucketInfo
operator|)
name|ie1
decl_stmt|;
name|bucket1
operator|=
name|retrieveBucket
argument_list|(
name|bi
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// dirty bucket
name|bucket1
operator|=
operator|(
name|Bucket
operator|)
name|ie1
expr_stmt|;
block|}
name|ChildNodeEntriesMap
name|bucket2
decl_stmt|;
if|if
condition|(
name|ie2
operator|instanceof
name|NodeInfo
condition|)
block|{
name|bucket2
operator|=
operator|new
name|ChildNodeEntriesMap
argument_list|()
expr_stmt|;
name|bucket2
operator|.
name|add
argument_list|(
operator|(
name|ChildNode
operator|)
name|ie2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ie2
operator|instanceof
name|BucketInfo
condition|)
block|{
name|BucketInfo
name|bi
init|=
operator|(
name|BucketInfo
operator|)
name|ie2
decl_stmt|;
name|bucket2
operator|=
name|retrieveBucket
argument_list|(
name|bi
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// dirty bucket
name|bucket2
operator|=
operator|(
name|Bucket
operator|)
name|ie2
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|ChildNode
argument_list|>
name|it
init|=
name|bucket1
operator|.
name|getModified
argument_list|(
name|bucket2
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|modified
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|modified
operator|.
name|iterator
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|AbstractFilteringIterator
argument_list|<
name|ChildNode
argument_list|>
argument_list|(
name|getEntries
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|include
parameter_list|(
name|ChildNode
name|entry
parameter_list|)
block|{
name|ChildNode
name|namesake
init|=
name|other
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|namesake
operator|!=
literal|null
operator|&&
operator|!
name|namesake
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
return|;
block|}
block|}
comment|//-------------------------------------------------------< implementation>
specifier|protected
name|void
name|persistDirtyBuckets
parameter_list|(
name|RevisionStore
name|store
parameter_list|,
name|RevisionStore
operator|.
name|PutToken
name|token
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|index
index|[
name|i
index|]
operator|instanceof
name|Bucket
condition|)
block|{
comment|// dirty bucket
name|Bucket
name|bucket
init|=
operator|(
name|Bucket
operator|)
name|index
index|[
name|i
index|]
decl_stmt|;
name|Id
name|id
init|=
name|store
operator|.
name|putCNEMap
argument_list|(
name|token
argument_list|,
name|bucket
argument_list|)
decl_stmt|;
name|index
index|[
name|i
index|]
operator|=
operator|new
name|BucketInfo
argument_list|(
name|id
argument_list|,
name|bucket
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|int
name|keyToIndex
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|int
name|hash
init|=
name|key
operator|.
name|hashCode
argument_list|()
decl_stmt|;
comment|// todo rehash? ensure optimal distribution of hash WRT to index.length
return|return
operator|(
name|hash
operator|&
literal|0x7FFFFFFF
operator|)
operator|%
name|index
operator|.
name|length
return|;
block|}
specifier|protected
name|ChildNodeEntriesMap
name|retrieveBucket
parameter_list|(
name|Id
name|id
parameter_list|)
block|{
try|try
block|{
return|return
name|revProvider
operator|.
name|getCNEMap
argument_list|(
name|id
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// todo log error and gracefully handle exception
return|return
operator|new
name|ChildNodeEntriesMap
argument_list|()
return|;
block|}
block|}
comment|//------------------------------------------------< serialization support>
specifier|public
name|void
name|serialize
parameter_list|(
name|Binding
name|binding
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO use binary instead of string serialization
name|binding
operator|.
name|write
argument_list|(
literal|":count"
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|binding
operator|.
name|writeMap
argument_list|(
literal|":index"
argument_list|,
name|index
operator|.
name|length
argument_list|,
operator|new
name|Binding
operator|.
name|StringEntryIterator
argument_list|()
block|{
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|pos
operator|<
name|index
operator|.
name|length
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Binding
operator|.
name|StringEntry
name|next
parameter_list|()
block|{
name|pos
operator|++
expr_stmt|;
if|if
condition|(
name|pos
operator|>=
name|index
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
comment|// serialize index array entry
name|IndexEntry
name|entry
init|=
name|index
index|[
name|pos
index|]
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
comment|// null entry: ""
return|return
operator|new
name|Binding
operator|.
name|StringEntry
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|pos
argument_list|)
argument_list|,
literal|""
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|instanceof
name|NodeInfo
condition|)
block|{
name|NodeInfo
name|ni
init|=
operator|(
name|NodeInfo
operator|)
name|entry
decl_stmt|;
comment|// "n<id>:<name>"
return|return
operator|new
name|Binding
operator|.
name|StringEntry
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|pos
argument_list|)
argument_list|,
literal|"n"
operator|+
name|ni
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|ni
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|BucketInfo
name|bi
init|=
operator|(
name|BucketInfo
operator|)
name|entry
decl_stmt|;
comment|// "b<id>:<count>"
return|return
operator|new
name|Binding
operator|.
name|StringEntry
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|pos
argument_list|)
argument_list|,
literal|"b"
operator|+
name|bi
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|bi
operator|.
name|getSize
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|static
name|ChildNodeEntriesTree
name|deserialize
parameter_list|(
name|RevisionProvider
name|provider
parameter_list|,
name|Binding
name|binding
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO use binary instead of string serialization
name|ChildNodeEntriesTree
name|newInstance
init|=
operator|new
name|ChildNodeEntriesTree
argument_list|(
name|provider
argument_list|)
decl_stmt|;
name|newInstance
operator|.
name|count
operator|=
name|binding
operator|.
name|readIntValue
argument_list|(
literal|":count"
argument_list|)
expr_stmt|;
name|Binding
operator|.
name|StringEntryIterator
name|iter
init|=
name|binding
operator|.
name|readStringMap
argument_list|(
literal|":index"
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Binding
operator|.
name|StringEntry
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
operator|++
name|pos
expr_stmt|;
comment|// deserialize index array entry
assert|assert
operator|(
name|pos
operator|==
name|Integer
operator|.
name|parseInt
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
assert|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// ""
name|newInstance
operator|.
name|index
index|[
name|pos
index|]
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'n'
condition|)
block|{
comment|// "n<id>:<name>"
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|i
init|=
name|value
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|value
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|newInstance
operator|.
name|index
index|[
name|pos
index|]
operator|=
operator|new
name|NodeInfo
argument_list|(
name|name
argument_list|,
name|Id
operator|.
name|fromString
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// "b<id>:<count>"
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|i
init|=
name|value
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|newInstance
operator|.
name|index
index|[
name|pos
index|]
operator|=
operator|new
name|BucketInfo
argument_list|(
name|Id
operator|.
name|fromString
argument_list|(
name|id
argument_list|)
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newInstance
return|;
block|}
comment|//--------------------------------------------------------< inner classes>
specifier|protected
specifier|static
interface|interface
name|IndexEntry
block|{
comment|// number of entries
name|int
name|getSize
parameter_list|()
function_decl|;
block|}
specifier|protected
specifier|static
class|class
name|BucketInfo
implements|implements
name|IndexEntry
block|{
comment|// bucket id
specifier|private
specifier|final
name|Id
name|id
decl_stmt|;
comment|// number of bucket entries
specifier|private
specifier|final
name|int
name|size
decl_stmt|;
specifier|protected
name|BucketInfo
parameter_list|(
name|Id
name|id
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
specifier|public
name|Id
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|BucketInfo
condition|)
block|{
name|BucketInfo
name|other
init|=
operator|(
name|BucketInfo
operator|)
name|obj
decl_stmt|;
return|return
operator|(
name|size
operator|==
name|other
operator|.
name|size
operator|&&
name|id
operator|==
literal|null
condition|?
name|other
operator|.
name|id
operator|==
literal|null
else|:
name|id
operator|.
name|equals
argument_list|(
name|other
operator|.
name|id
argument_list|)
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|Bucket
extends|extends
name|ChildNodeEntriesMap
implements|implements
name|IndexEntry
block|{
specifier|protected
name|Bucket
parameter_list|()
block|{         }
specifier|protected
name|Bucket
parameter_list|(
name|ChildNodeEntriesMap
name|other
parameter_list|)
block|{
name|super
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|Bucket
condition|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|NodeInfo
extends|extends
name|ChildNode
implements|implements
name|IndexEntry
block|{
specifier|public
name|NodeInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|Id
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|NodeInfo
condition|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

