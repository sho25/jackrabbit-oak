begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|aggregate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|AdvanceFulltextQueryIndex
import|;
end_import

begin_comment
comment|/**  * A provider for aggregate indexes. It wraps all full-text query indexes.  */
end_comment

begin_class
specifier|public
class|class
name|AggregateIndexProvider
implements|implements
name|QueryIndexProvider
block|{
specifier|private
specifier|final
name|QueryIndexProvider
name|baseProvider
decl_stmt|;
name|AggregateIndexProvider
parameter_list|(
name|QueryIndexProvider
name|baseProvider
parameter_list|)
block|{
name|this
operator|.
name|baseProvider
operator|=
name|baseProvider
expr_stmt|;
block|}
annotation|@
name|Nonnull
specifier|public
specifier|static
name|QueryIndexProvider
name|wrap
parameter_list|(
annotation|@
name|Nonnull
name|QueryIndexProvider
name|baseProvider
parameter_list|)
block|{
return|return
operator|new
name|AggregateIndexProvider
argument_list|(
name|baseProvider
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|QueryIndex
argument_list|>
name|getQueryIndexes
parameter_list|(
name|NodeState
name|state
parameter_list|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|QueryIndex
argument_list|>
name|list
init|=
name|baseProvider
operator|.
name|getQueryIndexes
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|AggregateIndex
argument_list|>
name|aggregateList
init|=
operator|new
name|ArrayList
argument_list|<
name|AggregateIndex
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|QueryIndex
name|index
range|:
name|list
control|)
block|{
if|if
condition|(
name|index
operator|instanceof
name|AdvanceFulltextQueryIndex
condition|)
block|{
name|aggregateList
operator|.
name|add
argument_list|(
operator|new
name|AggregateIndex
argument_list|(
operator|(
name|AdvanceFulltextQueryIndex
operator|)
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|aggregateList
return|;
block|}
block|}
end_class

end_unit

