begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Extension of the {@link PermissionProvider} interface that allows it to be  * used in combination with other provider implementations.  */
end_comment

begin_interface
specifier|public
interface|interface
name|AggregatedPermissionProvider
extends|extends
name|PermissionProvider
block|{
comment|/**      * Allows to determined the set or subset of privileges evaluated by the      * implementing permission provider for the specified tree or at the repository      * level in case the specified {@code tree} is {@code null}.      *      * If the given {@code privilegeBits} is {@code null} an implementation returns      * the complete set that is covered by the provider; otherwise the supported      * subset of the specified {@code privilegeBits} is returned.      *      * Returning {@link PrivilegeBits#EMPTY} indicates that this implementation      * is not in charge of evaluating the specified privileges and thus will      * be ignored while computing the composite result of      * {@link PermissionProvider#getPrivileges(org.apache.jackrabbit.oak.api.Tree)}      * or {@link PermissionProvider#hasPrivileges(org.apache.jackrabbit.oak.api.Tree, String...)}.      *      * @param tree The tree for which the privileges will be evaluated or {@code null}      * for repository level privileges.      * @param privilegeBits The privilege(s) to be tested or {@code null}      * @return The set of privileges or the subset of the given {@code privilegeBits}      * that are supported and evaluated by the implementation at the given {@code tree}      * represented as {@code PrivilegeBits}.      */
annotation|@
name|NotNull
name|PrivilegeBits
name|supportedPrivileges
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nullable
name|PrivilegeBits
name|privilegeBits
parameter_list|)
function_decl|;
comment|/**      * Allows to determined the set or subset of permissions evaluated by the      * implementing permission provider for the specified item (identified by      * {@code tree} and optionally {@code property}) or at the repository level      * in case the specified {@code tree} is {@code null}.      *      * Returning {@link Permissions#NO_PERMISSION} indicates that this implementation      * is not in charge of evaluating the specified permissions for the      * specified item and thus will be ignored while computing the composite      * result of {@link PermissionProvider#isGranted(Tree, PropertyState, long)}.      *      * @param tree The tree for which the permissions will be evaluated or {@code null}      * for repository level privileges.      * @param property The target property or {@code null}.      * @param permissions The permisisons to be tested      * @return The subset of the given {@code permissions} that are supported and      * evaluated by the implementation for the given item.      */
name|long
name|supportedPermissions
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|,
name|long
name|permissions
parameter_list|)
function_decl|;
comment|/**      * Allows to determined the set or subset of permissions evaluated by the      * implementing permission provider for the specified location.      *      * Returning {@link Permissions#NO_PERMISSION} indicates that this implementation      * is not in charge of evaluating the specified permissions for the      * specified location and thus will be ignored while computing the composite      * result of {@link PermissionProvider#isGranted(String, String)} and      * {@link AggregatedPermissionProvider#isGranted(TreeLocation, long)}.      *      * @param location The tree location for which the permissions will be evaluated.      * @param permissions The permisisons to be tested      * @return The subset of the given {@code permissions} that are supported and      * evaluated by the implementation for the given location.      */
name|long
name|supportedPermissions
parameter_list|(
annotation|@
name|NotNull
name|TreeLocation
name|location
parameter_list|,
name|long
name|permissions
parameter_list|)
function_decl|;
comment|/**      * Allows to determined the set or subset of permissions evaluated by the      * implementing permission provider for the specified tree permission (plus      * optionally {@code property}).      *      * Returning {@link Permissions#NO_PERMISSION} indicates that this implementation      * is not in charge of evaluating the specified permissions for the      * specified tree permission and thus will be ignored while computing the composite      * result of {@link TreePermission#isGranted(long, PropertyState)} and {@link TreePermission#isGranted(long)}.      *      * @param treePermission The target tree permission.      * @param property The target property or {@code null}.      * @param permissions The permisisons to be tested      * @return The subset of the given {@code permissions} that are supported and      * evaluated by the implementation for the given tree permissions.      */
name|long
name|supportedPermissions
parameter_list|(
annotation|@
name|NotNull
name|TreePermission
name|treePermission
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|,
name|long
name|permissions
parameter_list|)
function_decl|;
comment|/**      * Test if the specified permissions are granted for the set of {@code Principal}s      * associated with this provider instance for the item identified by the      * given {@code location} and optionally property. This method will only return {@code true}      * if all permissions are granted.      *      * @param location The {@code TreeLocation} to test the permissions for.      * @param permissions The permissions to be tested.      * @return {@code true} if the specified permissions are granted for the existing      * or non-existing item identified by the given location.      */
name|boolean
name|isGranted
parameter_list|(
annotation|@
name|NotNull
name|TreeLocation
name|location
parameter_list|,
name|long
name|permissions
parameter_list|)
function_decl|;
comment|/**      * Return the {@code TreePermission} for the set of {@code Principal}s associated      * with this provider at the specified {@code tree} with the given {@code type}.      *      * @param tree The tree for which the {@code TreePermission} object should be built.      * @param type The type of this tree.      * @param parentPermission The {@code TreePermission} object that has been      * obtained before for the parent tree.      * @return The {@code TreePermission} object for the specified {@code tree}.      */
annotation|@
name|NotNull
name|TreePermission
name|getTreePermission
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|,
annotation|@
name|NotNull
name|TreeType
name|type
parameter_list|,
annotation|@
name|NotNull
name|TreePermission
name|parentPermission
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

