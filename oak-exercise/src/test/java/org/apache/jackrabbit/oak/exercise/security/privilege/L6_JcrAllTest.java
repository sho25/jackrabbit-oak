begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Privilege Management  * =============================================================================  *  * Title: The Privilege 'jcr:all'  * -----------------------------------------------------------------------------  *  * Goal:  * Understand the meaning of the jcr:all privilege and how it is maintained  * in the Oak repository.  *  * Exercises:  *  * - Overview  *   Read again what JSR 283 states about {@link Privilege#JCR_ALL) and review  *   again the result of {@link L4_CustomPrivilegeTest#testJcrAll()}  *  * - {@link #testManualModification()}  *   This test case tries to modify the tree storing the jcr:all privilege  *   definition. Walk through the test and explain what happens.  *   Fix the test case such that it passes.  *  *   Question: Can you identify the relevant class in the Oak code base?  *   Question: Can you explain what it does and why?  *  *  * Advanced Exercise  * -----------------------------------------------------------------------------  *  * Mapping jcr:all in the permission store:  *  * - Due to the dynamic nature of jcr:all the long-representation of this privilege  *   in the permission store may change over time. This exercise aims to illustrate  *   how granting|denying jcr:all is reflected in the permission store.  *  *   In your preferred repository browser:  *   Create multiple access control entries for different principals including  *   on granting/denying jcr:all at a given existing path. Identify the corresponding  *   entries in the permission store and describe the nature of the 'rep:privileges'  *   properties.  *  *   Question: How is jcr:all represented?  *   Question: What is the difference compared to entries granting/denying other privileges?  *  *   Discuss your findings and explain the special behavior for jcr:all.  *  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|L6_JcrAllTest
extends|extends
name|AbstractSecurityTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testManualModification
parameter_list|()
throws|throws
name|Exception
block|{
comment|// EXERCISE: fix the test case such that it passes.
name|Tree
name|jcrAllTree
init|=
name|PrivilegeUtil
operator|.
name|getPrivilegesTree
argument_list|(
name|root
argument_list|)
operator|.
name|getChild
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
decl_stmt|;
name|jcrAllTree
operator|.
name|removeProperty
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_AGGREGATES
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

