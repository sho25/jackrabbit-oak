begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|migration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|AbstractIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|DepthFirstNodeIterator
extends|extends
name|AbstractIterator
argument_list|<
name|ChildNodeEntry
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DepthFirstNodeIterator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Deque
argument_list|<
name|Iterator
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
argument_list|>
name|itQueue
decl_stmt|;
specifier|private
specifier|final
name|Deque
argument_list|<
name|String
argument_list|>
name|nameQueue
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|root
decl_stmt|;
specifier|public
name|DepthFirstNodeIterator
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|itQueue
operator|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|nameQueue
operator|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|private
name|DepthFirstNodeIterator
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|Deque
argument_list|<
name|Iterator
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
argument_list|>
name|itQueue
parameter_list|,
name|Deque
argument_list|<
name|String
argument_list|>
name|nameQueue
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|itQueue
operator|=
name|itQueue
expr_stmt|;
name|this
operator|.
name|nameQueue
operator|=
name|nameQueue
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|itQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nameQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|itQueue
operator|.
name|add
argument_list|(
name|root
operator|.
name|getChildNodeEntries
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ChildNodeEntry
name|computeNext
parameter_list|()
block|{
if|if
condition|(
name|itQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|endOfData
argument_list|()
return|;
block|}
if|if
condition|(
name|itQueue
operator|.
name|peekLast
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ChildNodeEntry
name|next
init|=
name|itQueue
operator|.
name|peekLast
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|itQueue
operator|.
name|add
argument_list|(
name|next
operator|.
name|getNodeState
argument_list|()
operator|.
name|getChildNodeEntries
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|nameQueue
operator|.
name|add
argument_list|(
name|next
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|next
return|;
block|}
else|else
block|{
name|itQueue
operator|.
name|pollLast
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|nameQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nameQueue
operator|.
name|pollLast
argument_list|()
expr_stmt|;
block|}
return|return
name|computeNext
argument_list|()
return|;
block|}
block|}
specifier|public
name|NodeBuilder
name|getBuilder
parameter_list|(
name|NodeBuilder
name|rootBuilder
parameter_list|)
block|{
name|NodeBuilder
name|builder
init|=
name|rootBuilder
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|nameQueue
control|)
block|{
name|builder
operator|=
name|builder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
name|StringBuilder
name|path
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|'/'
argument_list|)
operator|.
name|appendTo
argument_list|(
name|path
argument_list|,
name|nameQueue
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|DepthFirstNodeIterator
name|switchRoot
parameter_list|(
name|NodeState
name|newRoot
parameter_list|)
block|{
name|Deque
argument_list|<
name|Iterator
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
argument_list|>
name|newQueue
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
name|NodeState
name|current
init|=
name|newRoot
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|nameQueue
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|it
init|=
name|current
operator|.
name|getChildNodeEntries
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|newQueue
operator|.
name|add
argument_list|(
name|it
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ChildNodeEntry
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|current
operator|=
name|e
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Can't found {} in the new root. Switching to /"
argument_list|,
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|DepthFirstNodeIterator
argument_list|(
name|newRoot
argument_list|)
return|;
block|}
block|}
name|newQueue
operator|.
name|add
argument_list|(
name|current
operator|.
name|getChildNodeEntries
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|DepthFirstNodeIterator
argument_list|(
name|newRoot
argument_list|,
name|newQueue
argument_list|,
name|nameQueue
argument_list|)
return|;
block|}
block|}
end_class

end_unit

