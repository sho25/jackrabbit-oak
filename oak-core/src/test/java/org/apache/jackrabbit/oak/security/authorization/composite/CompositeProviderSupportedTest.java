begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|AggregatedPermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBitsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|composite
operator|.
name|CompositeAuthorizationConfiguration
operator|.
name|CompositionType
operator|.
name|AND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|composite
operator|.
name|CompositeAuthorizationConfiguration
operator|.
name|CompositionType
operator|.
name|OR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
operator|.
name|READ_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|isNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|CompositeProviderSupportedTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|long
index|[]
name|supportedPermissions
init|=
operator|new
name|long
index|[]
block|{
name|READ_NODE
block|,
name|READ_NODE
block|,
name|Permissions
operator|.
name|NO_PERMISSION
block|,
name|READ_ACCESS_CONTROL
block|}
decl_stmt|;
specifier|private
name|AggregatedPermissionProvider
index|[]
name|pps
init|=
operator|new
name|AggregatedPermissionProvider
index|[]
block|{
name|mock
argument_list|(
name|AggregatedPermissionProvider
operator|.
name|class
argument_list|)
block|,
name|mock
argument_list|(
name|AggregatedPermissionProvider
operator|.
name|class
argument_list|)
block|,
name|mock
argument_list|(
name|AggregatedPermissionProvider
operator|.
name|class
argument_list|)
block|,
name|mock
argument_list|(
name|AggregatedPermissionProvider
operator|.
name|class
argument_list|)
block|}
decl_stmt|;
specifier|private
name|CompositePermissionProvider
name|cppAND
decl_stmt|;
specifier|private
name|CompositePermissionProvider
name|cppOR
decl_stmt|;
specifier|private
name|long
name|expectedPermissions
init|=
name|READ_NODE
operator||
name|READ_ACCESS_CONTROL
decl_stmt|;
specifier|private
name|PrivilegeBits
name|expectedBits
decl_stmt|;
specifier|private
name|PrivilegeBitsProvider
name|pbp
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|pbp
operator|=
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|root
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pps
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|when
argument_list|(
name|pps
index|[
name|i
index|]
operator|.
name|supportedPermissions
argument_list|(
name|any
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|supportedPermissions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pps
index|[
name|i
index|]
operator|.
name|supportedPermissions
argument_list|(
name|any
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|,
name|isNull
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|supportedPermissions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pps
index|[
name|i
index|]
operator|.
name|supportedPermissions
argument_list|(
operator|(
name|Tree
operator|)
name|isNull
argument_list|()
argument_list|,
name|isNull
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|supportedPermissions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pps
index|[
name|i
index|]
operator|.
name|supportedPermissions
argument_list|(
name|any
argument_list|(
name|TreePermission
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|supportedPermissions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pps
index|[
name|i
index|]
operator|.
name|supportedPermissions
argument_list|(
name|any
argument_list|(
name|TreePermission
operator|.
name|class
argument_list|)
argument_list|,
name|isNull
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|supportedPermissions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pps
index|[
name|i
index|]
operator|.
name|supportedPermissions
argument_list|(
name|any
argument_list|(
name|TreeLocation
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|supportedPermissions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|PropertyState
name|ps
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"any"
argument_list|,
name|supportedPermissions
index|[
name|i
index|]
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|PrivilegeBits
name|bts
init|=
operator|(
name|supportedPermissions
index|[
name|i
index|]
operator|==
name|Permissions
operator|.
name|NO_PERMISSION
operator|)
condition|?
name|PrivilegeBits
operator|.
name|EMPTY
else|:
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|ps
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|pps
index|[
name|i
index|]
operator|.
name|supportedPrivileges
argument_list|(
name|any
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|PrivilegeBits
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|bts
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pps
index|[
name|i
index|]
operator|.
name|supportedPrivileges
argument_list|(
name|isNull
argument_list|()
argument_list|,
name|any
argument_list|(
name|PrivilegeBits
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|bts
argument_list|)
expr_stmt|;
block|}
name|cppAND
operator|=
name|createProvider
argument_list|(
name|AND
argument_list|,
name|pps
argument_list|)
expr_stmt|;
name|cppOR
operator|=
name|createProvider
argument_list|(
name|OR
argument_list|,
name|pps
argument_list|)
expr_stmt|;
name|expectedBits
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"any"
argument_list|,
name|expectedPermissions
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
operator|.
name|unmodifiable
argument_list|()
expr_stmt|;
block|}
specifier|private
name|CompositePermissionProvider
name|createProvider
parameter_list|(
annotation|@
name|NotNull
name|CompositeAuthorizationConfiguration
operator|.
name|CompositionType
name|compositionType
parameter_list|,
annotation|@
name|NotNull
name|AggregatedPermissionProvider
modifier|...
name|aggregated
parameter_list|)
block|{
return|return
name|CompositePermissionProvider
operator|.
name|create
argument_list|(
name|root
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|aggregated
argument_list|)
argument_list|,
name|Context
operator|.
name|DEFAULT
argument_list|,
name|compositionType
argument_list|,
name|getRootProvider
argument_list|()
argument_list|,
name|getTreeProvider
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSupportedPermissionsFromTree
parameter_list|()
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|PropertyState
name|ps
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|CompositePermissionProvider
name|ccp
range|:
operator|new
name|CompositePermissionProvider
index|[]
block|{
name|cppAND
block|,
name|cppOR
block|}
control|)
block|{
name|assertEquals
argument_list|(
name|expectedPermissions
argument_list|,
name|ccp
operator|.
name|supportedPermissions
argument_list|(
operator|(
name|Tree
operator|)
literal|null
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPermissions
argument_list|,
name|ccp
operator|.
name|supportedPermissions
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPermissions
argument_list|,
name|ccp
operator|.
name|supportedPermissions
argument_list|(
name|tree
argument_list|,
name|ps
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSupportedPermissionsFromTreePermission
parameter_list|()
block|{
name|TreePermission
name|tp
init|=
name|mock
argument_list|(
name|TreePermission
operator|.
name|class
argument_list|)
decl_stmt|;
name|PropertyState
name|ps
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|CompositePermissionProvider
name|ccp
range|:
operator|new
name|CompositePermissionProvider
index|[]
block|{
name|cppAND
block|,
name|cppOR
block|}
control|)
block|{
name|assertEquals
argument_list|(
name|expectedPermissions
argument_list|,
name|ccp
operator|.
name|supportedPermissions
argument_list|(
name|tp
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPermissions
argument_list|,
name|ccp
operator|.
name|supportedPermissions
argument_list|(
name|tp
argument_list|,
name|ps
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSupportedPermissionsFromLocation
parameter_list|()
block|{
name|TreeLocation
name|location
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
literal|"any"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|CompositePermissionProvider
name|ccp
range|:
operator|new
name|CompositePermissionProvider
index|[]
block|{
name|cppAND
block|,
name|cppOR
block|}
control|)
block|{
name|assertEquals
argument_list|(
name|expectedPermissions
argument_list|,
name|ccp
operator|.
name|supportedPermissions
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPermissions
argument_list|,
name|ccp
operator|.
name|supportedPermissions
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSupportedPrivilegeBits
parameter_list|()
block|{
name|PrivilegeBits
name|all
init|=
name|pbp
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
for|for
control|(
name|CompositePermissionProvider
name|ccp
range|:
operator|new
name|CompositePermissionProvider
index|[]
block|{
name|cppAND
block|,
name|cppOR
block|}
control|)
block|{
name|assertEquals
argument_list|(
name|expectedBits
argument_list|,
name|ccp
operator|.
name|supportedPrivileges
argument_list|(
literal|null
argument_list|,
name|all
argument_list|)
operator|.
name|unmodifiable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBits
argument_list|,
name|ccp
operator|.
name|supportedPrivileges
argument_list|(
name|tree
argument_list|,
name|all
argument_list|)
operator|.
name|unmodifiable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

