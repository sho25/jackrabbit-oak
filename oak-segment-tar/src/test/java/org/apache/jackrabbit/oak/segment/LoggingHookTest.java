begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|DATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|LONGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|test
operator|.
name|TemporaryFileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|RuleChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_class
specifier|public
class|class
name|LoggingHookTest
block|{
specifier|private
specifier|final
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|TemporaryFileStore
name|fileStore
init|=
operator|new
name|TemporaryFileStore
argument_list|(
name|folder
argument_list|,
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|RuleChain
name|chain
init|=
name|RuleChain
operator|.
name|outerRule
argument_list|(
name|folder
argument_list|)
operator|.
name|around
argument_list|(
name|fileStore
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testChildNodeAdded
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCommitProduces
argument_list|(
name|lines
argument_list|(
literal|"n+ chi%25:ld"
argument_list|,
literal|"n!"
argument_list|,
literal|"n!"
argument_list|)
argument_list|,
name|root
lambda|->
name|root
operator|.
name|setChildNode
argument_list|(
literal|"chi%:ld"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChildNodeChanged
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCommitProduces
argument_list|(
name|lines
argument_list|(
literal|"n^ existing"
argument_list|,
literal|"n+ child"
argument_list|,
literal|"n!"
argument_list|,
literal|"n!"
argument_list|,
literal|"n!"
argument_list|)
argument_list|,
name|root
lambda|->
name|root
operator|.
name|getChildNode
argument_list|(
literal|"existing"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"child"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChildNodeDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCommitProduces
argument_list|(
name|lines
argument_list|(
literal|"n- existing"
argument_list|,
literal|"n!"
argument_list|)
argument_list|,
name|root
lambda|->
name|root
operator|.
name|getChildNode
argument_list|(
literal|"existing"
argument_list|)
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChildNodesAdded
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCommitProduces
argument_list|(
name|lines
argument_list|(
literal|"n+ child"
argument_list|,
literal|"n+ childchild"
argument_list|,
literal|"n+ childchildchild"
argument_list|,
literal|"n!"
argument_list|,
literal|"n!"
argument_list|,
literal|"n!"
argument_list|,
literal|"n!"
argument_list|)
argument_list|,
name|root
lambda|->
name|root
operator|.
name|setChildNode
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"childchild"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"childchildchild"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoChange
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCommitProduces
argument_list|(
literal|""
argument_list|,
name|root
lambda|->
block|{
comment|// Do nothing
block|}
argument_list|)
expr_stmt|;
name|assertCommitProduces
argument_list|(
name|lines
argument_list|(
literal|"n!"
argument_list|)
argument_list|,
name|root
lambda|->
block|{
name|root
operator|.
name|setChildNode
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|root
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertyAdded
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCommitProduces
argument_list|(
name|lines
argument_list|(
literal|"p+ a+string<STRING> = a+string/slash:colon%25percent%24dollar%5Cbackslash%0Anewline"
argument_list|,
literal|"n!"
argument_list|)
argument_list|,
name|root
lambda|->
name|root
operator|.
name|setProperty
argument_list|(
literal|"a string"
argument_list|,
literal|"a string/slash:colon%percent$dollar\\backslash\nnewline"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCommitProduces
argument_list|(
name|lines
argument_list|(
literal|"p+ strings<STRINGS> = [a+string,another+string]"
argument_list|,
literal|"n!"
argument_list|)
argument_list|,
name|root
lambda|->
name|root
operator|.
name|setProperty
argument_list|(
literal|"strings"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a string"
argument_list|,
literal|"another string"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|assertCommitProduces
argument_list|(
name|lines
argument_list|(
literal|"p+ a+long<LONG> = 42"
argument_list|,
literal|"n!"
argument_list|)
argument_list|,
name|root
lambda|->
name|root
operator|.
name|setProperty
argument_list|(
literal|"a long"
argument_list|,
literal|42L
argument_list|)
argument_list|)
expr_stmt|;
name|assertCommitProduces
argument_list|(
name|lines
argument_list|(
literal|"p+ longs<LONGS> = [42,99]"
argument_list|,
literal|"n!"
argument_list|)
argument_list|,
name|root
lambda|->
name|root
operator|.
name|setProperty
argument_list|(
literal|"longs"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|42L
argument_list|,
literal|99L
argument_list|)
argument_list|,
name|LONGS
argument_list|)
argument_list|)
expr_stmt|;
name|assertCommitProduces
argument_list|(
name|lines
argument_list|(
literal|"p+ an+int<LONG> = 42"
argument_list|,
literal|"n!"
argument_list|)
argument_list|,
name|root
lambda|->
name|root
operator|.
name|setProperty
argument_list|(
literal|"an int"
argument_list|,
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|assertCommitProduces
argument_list|(
name|lines
argument_list|(
literal|"p+ a+date<DATE> = Jan+02+01:00:00+CET+1970"
argument_list|,
literal|"n!"
argument_list|)
argument_list|,
name|root
lambda|->
name|root
operator|.
name|setProperty
argument_list|(
literal|"a date"
argument_list|,
literal|"Jan 02 01:00:00 CET 1970"
argument_list|,
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertCommitProduces
argument_list|(
name|lines
argument_list|(
literal|"p+ a+binary<BINARY> = 68656C6C6F"
argument_list|,
literal|"n!"
argument_list|)
argument_list|,
name|root
lambda|->
name|root
operator|.
name|setProperty
argument_list|(
literal|"a binary"
argument_list|,
literal|"hello"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertyChanged
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCommitProduces
argument_list|(
name|lines
argument_list|(
literal|"p+ a+string<STRING> = a+string"
argument_list|,
literal|"n!"
argument_list|)
argument_list|,
name|root
lambda|->
name|root
operator|.
name|setProperty
argument_list|(
literal|"a string"
argument_list|,
literal|"a string"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCommitProduces
argument_list|(
name|lines
argument_list|(
literal|"p^ a+string<STRING> = a+different+string"
argument_list|,
literal|"n!"
argument_list|)
argument_list|,
name|root
lambda|->
name|root
operator|.
name|setProperty
argument_list|(
literal|"a string"
argument_list|,
literal|"a different string"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertyDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCommitProduces
argument_list|(
name|lines
argument_list|(
literal|"p+ a+string<STRING> = a+string"
argument_list|,
literal|"n!"
argument_list|)
argument_list|,
name|root
lambda|->
name|root
operator|.
name|setProperty
argument_list|(
literal|"a string"
argument_list|,
literal|"a string"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCommitProduces
argument_list|(
name|lines
argument_list|(
literal|"p- a+string<STRING> = a+string"
argument_list|,
literal|"n!"
argument_list|)
argument_list|,
name|root
lambda|->
name|root
operator|.
name|removeProperty
argument_list|(
literal|"a string"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertCommitProduces
parameter_list|(
name|String
name|expected
parameter_list|,
name|Consumer
argument_list|<
name|NodeBuilder
argument_list|>
name|committer
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|SegmentNodeStore
name|store
init|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|fileStore
operator|.
name|fileStore
argument_list|()
argument_list|)
operator|.
name|withLoggingHook
argument_list|(
name|s
lambda|->
name|result
operator|.
name|append
argument_list|(
name|s
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|NodeBuilder
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|root
operator|.
name|setChildNode
argument_list|(
literal|"existing"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|root
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|result
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|committer
operator|.
name|accept
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|root
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|lines
parameter_list|(
name|String
modifier|...
name|lines
parameter_list|)
block|{
return|return
name|String
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|,
name|lines
argument_list|)
operator|+
literal|"\n"
return|;
block|}
block|}
end_class

end_unit

