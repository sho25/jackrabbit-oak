begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|data
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|Buffer
import|;
end_import

begin_comment
comment|/**  * Access the data of a segment.  *<p>  * A segment is composed of a header and the proper data. The header has a  * fixed- and a variable-length part.  *<p>  * The fixed-length part of the header contains a {@link #getSignature()  * signature}, which is a string that uniquely identifies the rest of the  * content as a segment; a {@link #getVersion()}, which specifies the version of  * the binary format used to serialize the content of the segment; a {@link  * #getFullGeneration() full generation}, which describes the generation of the  * segment with regards to full compaction; a {@link #getGeneration()  * generation}, which identifies the generation of the segment with regards to  * full or tail compaction; a {@link #isCompacted() compacted flag}, which  * determines if the segment was written by a compaction operation; the {@link  * #getRecordReferencesCount() number of record references}, which is the number  * of record entries in the segment; the {@link #getSegmentReferencesCount()  * number of segment references}, which is the number of identifiers of other  * segments used by this segment.  *<p>  * The variable part of the header contains the list of segment references and  * the list of record references. A segment references is composed by the {@link  * #getSegmentReferenceMsb(int) most significant bits} and {@link  * #getSegmentReferenceLsb(int) lsb} of the segment identifier. A record  * reference is composed of a {@link #getRecordReferenceNumber(int) record  * number}, a {@link #getRecordReferenceType(int) record type} and a {@link  * #getRecordReferenceOffset(int) record offset}.  *<p>  * The most prominent use for a segment is to hold record data. Many methods of  * this class allows access to the record data. These methods accept an integer  * representing an absolute position pointing to the record data. The absolute  * position, though, is virtual: it is computed on a virtual segment 256K long.  * This offset is usually obtained by accessing the {@link  * #getRecordReferenceOffset(int) record offset} of a record reference entry.  * The class will normalize the offset for the actual size of the segment, which  * can be smaller than 256K. It is acceptable to displace the offset of a record  * reference entry by a positive amount. This can be useful to access a field of  * a composite record saved at a specific offset.  */
end_comment

begin_interface
specifier|public
interface|interface
name|SegmentData
block|{
specifier|static
name|SegmentData
name|newSegmentData
parameter_list|(
name|Buffer
name|buffer
parameter_list|)
block|{
return|return
name|SegmentDataLoader
operator|.
name|newSegmentData
argument_list|(
name|buffer
argument_list|)
return|;
block|}
specifier|static
name|SegmentData
name|newRawSegmentData
parameter_list|(
name|Buffer
name|buffer
parameter_list|)
block|{
return|return
name|SegmentDataLoader
operator|.
name|newRawSegmentData
argument_list|(
name|buffer
argument_list|)
return|;
block|}
name|byte
name|getVersion
parameter_list|()
function_decl|;
name|String
name|getSignature
parameter_list|()
function_decl|;
name|int
name|getFullGeneration
parameter_list|()
function_decl|;
name|boolean
name|isCompacted
parameter_list|()
function_decl|;
name|int
name|getGeneration
parameter_list|()
function_decl|;
name|int
name|getSegmentReferencesCount
parameter_list|()
function_decl|;
name|int
name|getRecordReferencesCount
parameter_list|()
function_decl|;
name|int
name|getRecordReferenceNumber
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
name|byte
name|getRecordReferenceType
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
name|int
name|getRecordReferenceOffset
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
name|long
name|getSegmentReferenceMsb
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
name|long
name|getSegmentReferenceLsb
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
name|long
name|readLength
parameter_list|(
name|int
name|recordReferenceOffset
parameter_list|)
function_decl|;
name|StringData
name|readString
parameter_list|(
name|int
name|recordReferenceOffset
parameter_list|)
function_decl|;
name|RecordIdData
name|readRecordId
parameter_list|(
name|int
name|recordReferenceOffset
parameter_list|)
function_decl|;
name|byte
name|readByte
parameter_list|(
name|int
name|recordReferenceOffset
parameter_list|)
function_decl|;
name|int
name|readInt
parameter_list|(
name|int
name|recordReferenceOffset
parameter_list|)
function_decl|;
name|short
name|readShort
parameter_list|(
name|int
name|recordReferenceOffset
parameter_list|)
function_decl|;
name|long
name|readLong
parameter_list|(
name|int
name|recordReferenceOffset
parameter_list|)
function_decl|;
name|Buffer
name|readBytes
parameter_list|(
name|int
name|recordReferenceOffset
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|int
name|size
parameter_list|()
function_decl|;
name|void
name|hexDump
parameter_list|(
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|void
name|binDump
parameter_list|(
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|int
name|estimateMemoryUsage
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

