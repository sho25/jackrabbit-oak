begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|REP_GLOB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|MIX_REP_PRINCIPAL_BASED_MIXIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|NT_REP_PRINCIPAL_ENTRY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|NT_REP_PRINCIPAL_POLICY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|NT_REP_RESTRICTIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_EFFECTIVE_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_PRINCIPAL_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_PRINCIPAL_POLICY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_PRIVILEGES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_RESTRICTIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_READ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_WRITE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|PolicyValidatorLimitedUserTest
extends|extends
name|AbstractPrincipalBasedTest
block|{
specifier|private
name|String
name|accessControlledPath
decl_stmt|;
specifier|private
name|ContentSession
name|testSession
decl_stmt|;
specifier|private
name|Root
name|testRoot
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|User
name|systemUser
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|PrincipalPolicyImpl
name|policy
init|=
name|setupPrincipalBasedAccessControl
argument_list|(
name|systemUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|testJcrPath
argument_list|,
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|)
decl_stmt|;
name|accessControlledPath
operator|=
name|policy
operator|.
name|getOakPath
argument_list|()
expr_stmt|;
name|User
name|testUser
init|=
name|getTestUser
argument_list|()
decl_stmt|;
name|addDefaultEntry
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|JCR_READ
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testSession
operator|=
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|,
name|testUser
operator|.
name|getID
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|testRoot
operator|=
name|testSession
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
if|if
condition|(
name|testSession
operator|!=
literal|null
condition|)
block|{
name|testSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|NotNull
specifier|private
name|Tree
name|createPolicyEntryTree
parameter_list|(
annotation|@
name|NotNull
name|Root
name|r
parameter_list|,
annotation|@
name|NotNull
name|String
name|effectiveOakPath
parameter_list|,
annotation|@
name|NotNull
name|String
modifier|...
name|privNames
parameter_list|)
throws|throws
name|Exception
block|{
name|Tree
name|t
init|=
name|r
operator|.
name|getTree
argument_list|(
name|accessControlledPath
argument_list|)
decl_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|t
argument_list|,
name|MIX_REP_PRINCIPAL_BASED_MIXIN
argument_list|,
name|r
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
literal|"uid"
argument_list|)
expr_stmt|;
name|Tree
name|policy
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|t
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|,
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
decl_stmt|;
name|policy
operator|.
name|setProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|entry
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|policy
argument_list|,
literal|"entry"
argument_list|,
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|,
name|effectiveOakPath
argument_list|,
name|Type
operator|.
name|PATH
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setProperty
argument_list|(
name|REP_PRIVILEGES
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|privNames
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntryMissingModAcPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|entry
init|=
name|createPolicyEntryTree
argument_list|(
name|testRoot
argument_list|,
name|TEST_OAK_PATH
argument_list|,
name|JCR_READ
argument_list|)
decl_stmt|;
try|try
block|{
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"CommitFailedException expected; type ACCESS; code 3"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|CommitFailedException
operator|.
name|ACCESS
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeEntryMissingModAcPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|entry
init|=
name|createPolicyEntryTree
argument_list|(
name|root
argument_list|,
name|TEST_OAK_PATH
argument_list|,
name|JCR_READ
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|entry
operator|=
name|testRoot
operator|.
name|getTree
argument_list|(
name|entry
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setProperty
argument_list|(
name|REP_PRIVILEGES
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_WRITE
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
try|try
block|{
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"CommitFailedException expected; type ACCESS; code 3"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|CommitFailedException
operator|.
name|ACCESS
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddRestrictionMissingModAcPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|entry
init|=
name|createPolicyEntryTree
argument_list|(
name|root
argument_list|,
name|TEST_OAK_PATH
argument_list|,
name|JCR_READ
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|entry
operator|=
name|testRoot
operator|.
name|getTree
argument_list|(
name|entry
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|restrictions
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|entry
argument_list|,
name|REP_RESTRICTIONS
argument_list|,
name|NT_REP_RESTRICTIONS
argument_list|)
decl_stmt|;
name|restrictions
operator|.
name|setProperty
argument_list|(
name|REP_GLOB
argument_list|,
literal|"*/glob/*"
argument_list|)
expr_stmt|;
try|try
block|{
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"CommitFailedException expected; type ACCESS; code 3"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|CommitFailedException
operator|.
name|ACCESS
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModifyRestrictionMissingModAcPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|entry
init|=
name|createPolicyEntryTree
argument_list|(
name|root
argument_list|,
name|TEST_OAK_PATH
argument_list|,
name|JCR_READ
argument_list|)
decl_stmt|;
name|Tree
name|restrictions
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|entry
argument_list|,
name|REP_RESTRICTIONS
argument_list|,
name|NT_REP_RESTRICTIONS
argument_list|)
decl_stmt|;
name|restrictions
operator|.
name|setProperty
argument_list|(
name|REP_GLOB
argument_list|,
literal|"*/glob/*"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|restrictions
operator|=
name|testRoot
operator|.
name|getTree
argument_list|(
name|restrictions
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|restrictions
operator|.
name|setProperty
argument_list|(
name|REP_GLOB
argument_list|,
literal|"*/changedGlob/*"
argument_list|)
expr_stmt|;
try|try
block|{
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"CommitFailedException expected; type ACCESS; code 3"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|CommitFailedException
operator|.
name|ACCESS
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

