begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ImportUUIDBehavior
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFormatException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|PropInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedItemImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ReferenceChangeTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|TextValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|withSettings
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AccessControlImporterBaseTest
extends|extends
name|AbstractSecurityTest
implements|implements
name|AccessControlConstants
block|{
specifier|final
name|NodeInfo
name|aceGrantInfo
init|=
operator|new
name|NodeInfo
argument_list|(
literal|"grantAceName"
argument_list|,
name|NT_REP_GRANT_ACE
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|NodeInfo
name|aceDenyInfo
init|=
operator|new
name|NodeInfo
argument_list|(
literal|"denyAceName"
argument_list|,
name|NT_REP_DENY_ACE
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|NodeInfo
name|restrInfo
init|=
operator|new
name|NodeInfo
argument_list|(
literal|"anyRestrName"
argument_list|,
name|NT_REP_RESTRICTIONS
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|PropInfo
name|unknownPrincipalInfo
init|=
operator|new
name|PropInfo
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|createTextValue
argument_list|(
literal|"unknownPrincipal"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|accessControlledTree
decl_stmt|;
name|Tree
name|aclTree
decl_stmt|;
name|AccessControlImporter
name|importer
decl_stmt|;
specifier|private
name|String
name|principalName
decl_stmt|;
specifier|private
name|PropInfo
name|principalInfo
decl_stmt|;
specifier|private
name|PropInfo
name|privInfo
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"testNode"
argument_list|)
decl_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|t
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|accessControlledTree
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/testNode"
argument_list|)
expr_stmt|;
name|aclTree
operator|=
name|accessControlledTree
operator|.
name|getChild
argument_list|(
name|REP_POLICY
argument_list|)
expr_stmt|;
name|importer
operator|=
operator|new
name|AccessControlImporter
argument_list|()
expr_stmt|;
name|principalName
operator|=
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|principalInfo
operator|=
operator|new
name|PropInfo
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|createTextValue
argument_list|(
name|principalName
argument_list|)
argument_list|)
expr_stmt|;
name|privInfo
operator|=
operator|new
name|PropInfo
argument_list|(
name|REP_PRIVILEGES
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|,
name|createTextValues
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/testNode"
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|exists
argument_list|()
condition|)
block|{
name|t
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|ConfigurationParameters
name|getSecurityConfigParameters
parameter_list|()
block|{
name|ConfigurationParameters
name|params
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|ProtectedItemImporter
operator|.
name|PARAM_IMPORT_BEHAVIOR
argument_list|,
name|getImportBehavior
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|AuthorizationConfiguration
operator|.
name|NAME
argument_list|,
name|params
argument_list|)
return|;
block|}
specifier|abstract
name|String
name|getImportBehavior
parameter_list|()
function_decl|;
annotation|@
name|NotNull
specifier|private
name|Session
name|mockJackrabbitSession
parameter_list|()
throws|throws
name|Exception
block|{
name|JackrabbitSession
name|s
init|=
name|mock
argument_list|(
name|JackrabbitSession
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|s
operator|.
name|getPrincipalManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getPrincipalManager
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|s
operator|.
name|getAccessControlManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
name|boolean
name|isWorkspaceImport
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|importer
operator|.
name|init
argument_list|(
name|mockJackrabbitSession
argument_list|()
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|,
name|isWorkspaceImport
argument_list|()
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REMOVE_EXISTING
argument_list|,
operator|new
name|ReferenceChangeTracker
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|NotNull
specifier|private
name|TextValue
name|createTextValue
parameter_list|(
annotation|@
name|NotNull
name|String
name|val
parameter_list|)
block|{
return|return
operator|new
name|TextValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getString
parameter_list|()
block|{
return|return
name|val
return|;
block|}
annotation|@
name|Override
specifier|public
name|Value
name|getValue
parameter_list|(
name|int
name|targetType
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
name|val
argument_list|,
name|targetType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
comment|//nop
block|}
block|}
return|;
block|}
name|List
argument_list|<
name|TextValue
argument_list|>
name|createTextValues
parameter_list|(
annotation|@
name|NotNull
name|String
modifier|...
name|values
parameter_list|)
block|{
name|List
argument_list|<
name|TextValue
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|v
range|:
name|values
control|)
block|{
name|l
operator|.
name|add
argument_list|(
name|createTextValue
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
comment|//---------------------------------------------------------------< init>---
annotation|@
name|Test
specifier|public
name|void
name|testInitNoJackrabbitSession
parameter_list|()
block|{
name|Session
name|s
init|=
name|mock
argument_list|(
name|Session
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|init
argument_list|(
name|s
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|,
literal|false
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
argument_list|,
operator|new
name|ReferenceChangeTracker
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInitAlreadyInitialized
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|importer
operator|.
name|init
argument_list|(
name|mockJackrabbitSession
argument_list|()
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|,
name|isWorkspaceImport
argument_list|()
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REMOVE_EXISTING
argument_list|,
operator|new
name|ReferenceChangeTracker
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitImportUUIDBehaviorRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|importer
operator|.
name|init
argument_list|(
name|mockJackrabbitSession
argument_list|()
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|,
name|isWorkspaceImport
argument_list|()
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REMOVE_EXISTING
argument_list|,
operator|new
name|ReferenceChangeTracker
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitImportUUIDBehaviorReplace
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|importer
operator|.
name|init
argument_list|(
name|mockJackrabbitSession
argument_list|()
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|,
name|isWorkspaceImport
argument_list|()
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REPLACE_EXISTING
argument_list|,
operator|new
name|ReferenceChangeTracker
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitImportUUIDBehaviorThrow
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|importer
operator|.
name|init
argument_list|(
name|mockJackrabbitSession
argument_list|()
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|,
name|isWorkspaceImport
argument_list|()
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
argument_list|,
operator|new
name|ReferenceChangeTracker
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitImportUUIDBehaviourCreateNew
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|importer
operator|.
name|init
argument_list|(
name|mockJackrabbitSession
argument_list|()
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|,
name|isWorkspaceImport
argument_list|()
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_CREATE_NEW
argument_list|,
operator|new
name|ReferenceChangeTracker
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitCausesRepositoryException
parameter_list|()
block|{
name|JackrabbitSession
name|s
init|=
name|mock
argument_list|(
name|JackrabbitSession
operator|.
name|class
argument_list|,
name|withSettings
argument_list|()
operator|.
name|defaultAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|()
throw|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
comment|// session methods are only invoked for session-imports
name|assertEquals
argument_list|(
name|isWorkspaceImport
argument_list|()
argument_list|,
name|importer
operator|.
name|init
argument_list|(
name|s
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|,
name|isWorkspaceImport
argument_list|()
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REPLACE_EXISTING
argument_list|,
operator|new
name|ReferenceChangeTracker
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//--------------------------------------------------------------< start>---
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartNotInitialized
parameter_list|()
throws|throws
name|Exception
block|{
name|importer
operator|.
name|start
argument_list|(
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartRootTree
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartAccessControlledTree
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|accessControlledTree
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartAclTree
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|aclTree
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|hasPendingChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartAclTreeMissingMixin
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|accessControlledTree
operator|.
name|removeProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|aclTree
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartAclTreeWrongPrimaryType
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|aclTree
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|aclTree
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartRepoPolicyTree
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
literal|null
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|Tree
name|repoPolicy
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
operator|+
name|REP_REPO_POLICY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|repoPolicy
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|repoPolicy
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartRepoPolicyTreeMissingMixin
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|Tree
name|repoPolicy
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|rootTree
argument_list|,
name|REP_REPO_POLICY
argument_list|,
name|NT_REP_ACL
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|repoPolicy
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartMisplacedRepoPolicyTree
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|accessControlledTree
argument_list|,
name|MIX_REP_REPO_ACCESS_CONTROLLABLE
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Tree
name|repoPolicy
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|accessControlledTree
argument_list|,
name|REP_REPO_POLICY
argument_list|,
name|NT_REP_ACL
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|repoPolicy
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartRepoPolicyTreeWrongPrimaryType
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|accessControlledTree
argument_list|,
name|MIX_REP_REPO_ACCESS_CONTROLLABLE
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Tree
name|repoPolicy
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|accessControlledTree
argument_list|,
name|REP_REPO_POLICY
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|repoPolicy
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartNoJackrabbitAccessControlList
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlList
name|policy
init|=
name|mock
argument_list|(
name|AccessControlList
operator|.
name|class
argument_list|)
decl_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|mock
argument_list|(
name|AccessControlManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|AccessControlPolicy
index|[]
block|{
name|policy
block|}
argument_list|)
expr_stmt|;
name|JackrabbitSession
name|s
init|=
name|mock
argument_list|(
name|JackrabbitSession
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|s
operator|.
name|getAccessControlManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|acMgr
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|s
operator|.
name|getPrincipalManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getPrincipalManager
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|SecurityProvider
name|sp
init|=
name|mock
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|AuthorizationConfiguration
name|ac
init|=
name|spy
argument_list|(
name|getConfig
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ac
operator|.
name|getAccessControlManager
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|acMgr
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sp
operator|.
name|getConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ac
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sp
operator|.
name|getConfiguration
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getConfig
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|init
argument_list|(
name|s
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|,
name|isWorkspaceImport
argument_list|()
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_REMOVE_EXISTING
argument_list|,
operator|new
name|ReferenceChangeTracker
argument_list|()
argument_list|,
name|sp
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|aclTree
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//--------------------------------------------------< processReferences>---
annotation|@
name|Test
specifier|public
name|void
name|testProcessReferencesIsNoOp
parameter_list|()
block|{
name|importer
operator|.
name|processReferences
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|hasPendingChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//-----------------------------------------------------< startChildInfo>---
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartChildInfoNotInitialized
parameter_list|()
throws|throws
name|Exception
block|{
name|importer
operator|.
name|startChildInfo
argument_list|(
name|mock
argument_list|(
name|NodeInfo
operator|.
name|class
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartChildInfoUnknownType
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeInfo
name|invalidChildInfo
init|=
operator|new
name|NodeInfo
argument_list|(
literal|"anyName"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|init
argument_list|()
expr_stmt|;
name|importer
operator|.
name|start
argument_list|(
name|aclTree
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|invalidChildInfo
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartNestedAceChildInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|importer
operator|.
name|start
argument_list|(
name|aclTree
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|aceGrantInfo
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|aceDenyInfo
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartRestrictionChildInfoWithoutAce
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|importer
operator|.
name|start
argument_list|(
name|aclTree
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|restrInfo
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartAceAndRestrictionChildInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|importer
operator|.
name|start
argument_list|(
name|aclTree
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|aceGrantInfo
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|restrInfo
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStartAceChildInfoInvalidPrivilege
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|importer
operator|.
name|start
argument_list|(
name|aclTree
argument_list|)
expr_stmt|;
name|PropInfo
name|invalidPrivInfo
init|=
operator|new
name|PropInfo
argument_list|(
name|REP_PRIVILEGES
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|,
name|createTextValues
argument_list|(
literal|"jcr:invalidPrivilege"
argument_list|)
argument_list|,
name|PropInfo
operator|.
name|MultipleStatus
operator|.
name|MULTIPLE
argument_list|)
decl_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|aceDenyInfo
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|invalidPrivInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//-------------------------------------------------------< endChildInfo>---
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEndChildInfoNotInitialized
parameter_list|()
throws|throws
name|Exception
block|{
name|importer
operator|.
name|endChildInfo
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConstraintViolationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEndChildInfoWithoutStart
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|importer
operator|.
name|start
argument_list|(
name|aclTree
argument_list|)
expr_stmt|;
name|importer
operator|.
name|endChildInfo
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEndChildInfoIncompleteAce
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|importer
operator|.
name|start
argument_list|(
name|aclTree
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|aceGrantInfo
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|importer
operator|.
name|endChildInfo
argument_list|()
expr_stmt|;
block|}
comment|//----------------------------------------------------------------< end>---
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEndWithoutStart
parameter_list|()
throws|throws
name|Exception
block|{
name|importer
operator|.
name|end
argument_list|(
name|aclTree
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEndWithoutAcl
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|importer
operator|.
name|start
argument_list|(
name|accessControlledTree
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|end
argument_list|(
name|accessControlledTree
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEndWithoutChildInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|importer
operator|.
name|start
argument_list|(
name|aclTree
argument_list|)
expr_stmt|;
name|importer
operator|.
name|end
argument_list|(
name|aclTree
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|hasPendingChanges
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|aclTree
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------< complete acl import>---
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInvalidRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|importer
operator|.
name|start
argument_list|(
name|aclTree
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|aceGrantInfo
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|principalInfo
argument_list|,
name|privInfo
argument_list|)
argument_list|)
expr_stmt|;
name|PropInfo
name|invalidRestrProp
init|=
operator|new
name|PropInfo
argument_list|(
name|REP_GLOB
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|,
name|createTextValues
argument_list|(
literal|"glob1"
argument_list|,
literal|"glob2"
argument_list|)
argument_list|,
name|PropInfo
operator|.
name|MultipleStatus
operator|.
name|MULTIPLE
argument_list|)
decl_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|restrInfo
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|invalidRestrProp
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|endChildInfo
argument_list|()
expr_stmt|;
name|importer
operator|.
name|endChildInfo
argument_list|()
expr_stmt|;
name|importer
operator|.
name|end
argument_list|(
name|aclTree
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ValueFormatException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testUnknownRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|importer
operator|.
name|start
argument_list|(
name|aclTree
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|aceGrantInfo
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|principalInfo
argument_list|,
name|privInfo
argument_list|)
argument_list|)
expr_stmt|;
name|PropInfo
name|invalidRestrProp
init|=
operator|new
name|PropInfo
argument_list|(
literal|"unknown"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|createTextValue
argument_list|(
literal|"val"
argument_list|)
argument_list|)
decl_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|restrInfo
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|invalidRestrProp
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|endChildInfo
argument_list|()
expr_stmt|;
name|importer
operator|.
name|endChildInfo
argument_list|()
expr_stmt|;
name|importer
operator|.
name|end
argument_list|(
name|aclTree
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImportSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|importer
operator|.
name|start
argument_list|(
name|aclTree
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|aceGrantInfo
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|principalInfo
argument_list|,
name|privInfo
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|endChildInfo
argument_list|()
expr_stmt|;
name|importer
operator|.
name|end
argument_list|(
name|aclTree
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aclTree
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|aceTree
init|=
name|aclTree
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|principalName
argument_list|,
name|TreeUtil
operator|.
name|getString
argument_list|(
name|aceTree
argument_list|,
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|TreeUtil
operator|.
name|getNames
argument_list|(
name|aceTree
argument_list|,
name|REP_PRIVILEGES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|aceTree
operator|.
name|hasChild
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImportWithRestrictions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// single value restriction
name|PropInfo
name|globInfo
init|=
operator|new
name|PropInfo
argument_list|(
name|REP_GLOB
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|createTextValue
argument_list|(
literal|"/*"
argument_list|)
argument_list|)
decl_stmt|;
comment|// mv restriction
name|PropInfo
name|ntNamesInfo
init|=
operator|new
name|PropInfo
argument_list|(
name|REP_NT_NAMES
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|,
name|createTextValues
argument_list|(
name|NodeTypeConstants
operator|.
name|NT_OAK_RESOURCE
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_RESOURCE
argument_list|)
argument_list|)
decl_stmt|;
comment|// mv restriction with singular value
name|PropInfo
name|itemNamesInfo
init|=
operator|new
name|PropInfo
argument_list|(
name|REP_ITEM_NAMES
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|,
name|createTextValue
argument_list|(
literal|"itemName"
argument_list|)
argument_list|)
decl_stmt|;
name|init
argument_list|()
expr_stmt|;
name|importer
operator|.
name|start
argument_list|(
name|aclTree
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|aceGrantInfo
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|principalInfo
argument_list|,
name|privInfo
argument_list|,
name|globInfo
argument_list|,
name|ntNamesInfo
argument_list|,
name|itemNamesInfo
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|endChildInfo
argument_list|()
expr_stmt|;
name|importer
operator|.
name|end
argument_list|(
name|aclTree
argument_list|)
expr_stmt|;
name|assertImport
argument_list|(
name|aclTree
argument_list|,
name|principalName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImportWithRestrictionNodeInfo
parameter_list|()
throws|throws
name|Exception
block|{
comment|// single value restriction
name|PropInfo
name|globInfo
init|=
operator|new
name|PropInfo
argument_list|(
name|REP_GLOB
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|createTextValue
argument_list|(
literal|"/*"
argument_list|)
argument_list|)
decl_stmt|;
comment|// mv restriction
name|PropInfo
name|ntNamesInfo
init|=
operator|new
name|PropInfo
argument_list|(
name|REP_NT_NAMES
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|,
name|createTextValues
argument_list|(
name|NodeTypeConstants
operator|.
name|NT_OAK_RESOURCE
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_RESOURCE
argument_list|)
argument_list|)
decl_stmt|;
comment|// mv restriction with singular value
name|PropInfo
name|itemNamesInfo
init|=
operator|new
name|PropInfo
argument_list|(
name|REP_ITEM_NAMES
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|,
name|createTextValue
argument_list|(
literal|"itemName"
argument_list|)
argument_list|)
decl_stmt|;
name|init
argument_list|()
expr_stmt|;
name|importer
operator|.
name|start
argument_list|(
name|aclTree
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|aceGrantInfo
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|principalInfo
argument_list|,
name|privInfo
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|startChildInfo
argument_list|(
name|restrInfo
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|globInfo
argument_list|,
name|ntNamesInfo
argument_list|,
name|itemNamesInfo
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|endChildInfo
argument_list|()
expr_stmt|;
name|importer
operator|.
name|endChildInfo
argument_list|()
expr_stmt|;
name|importer
operator|.
name|end
argument_list|(
name|aclTree
argument_list|)
expr_stmt|;
name|assertImport
argument_list|(
name|aclTree
argument_list|,
name|principalName
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertImport
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|aclTree
parameter_list|,
annotation|@
name|NotNull
name|String
name|principalName
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|aclTree
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|aceTree
init|=
name|aclTree
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|principalName
argument_list|,
name|TreeUtil
operator|.
name|getString
argument_list|(
name|aceTree
argument_list|,
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|TreeUtil
operator|.
name|getNames
argument_list|(
name|aceTree
argument_list|,
name|REP_PRIVILEGES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aceTree
operator|.
name|hasChild
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|restrTree
init|=
name|aceTree
operator|.
name|getChild
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/*"
argument_list|,
name|TreeUtil
operator|.
name|getString
argument_list|(
name|restrTree
argument_list|,
name|REP_GLOB
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|NodeTypeConstants
operator|.
name|NT_OAK_RESOURCE
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_RESOURCE
argument_list|)
argument_list|,
name|restrTree
operator|.
name|getProperty
argument_list|(
name|REP_NT_NAMES
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"itemName"
argument_list|)
argument_list|,
name|restrTree
operator|.
name|getProperty
argument_list|(
name|REP_ITEM_NAMES
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

