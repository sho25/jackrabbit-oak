begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|proc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|proc
operator|.
name|Proc
operator|.
name|Backend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|proc
operator|.
name|Proc
operator|.
name|Backend
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SegmentNodeTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|shouldHandleMissingSegment
parameter_list|()
block|{
name|Backend
name|backend
init|=
name|mock
argument_list|(
name|Backend
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|backend
operator|.
name|getSegment
argument_list|(
literal|"s"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MissingSegmentNode
operator|.
name|class
argument_list|,
name|SegmentNode
operator|.
name|newSegmentNode
argument_list|(
name|backend
argument_list|,
literal|"s"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHandleDataSegment
parameter_list|()
block|{
name|Segment
name|segment
init|=
name|mock
argument_list|(
name|Segment
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|segment
operator|.
name|isDataSegment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Backend
name|backend
init|=
name|mock
argument_list|(
name|Backend
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|backend
operator|.
name|getSegment
argument_list|(
literal|"s"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|segment
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataSegmentNode
operator|.
name|class
argument_list|,
name|SegmentNode
operator|.
name|newSegmentNode
argument_list|(
name|backend
argument_list|,
literal|"s"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHandleBulkSegment
parameter_list|()
block|{
name|Segment
name|segment
init|=
name|mock
argument_list|(
name|Segment
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|segment
operator|.
name|isDataSegment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Backend
name|backend
init|=
name|mock
argument_list|(
name|Backend
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|backend
operator|.
name|getSegment
argument_list|(
literal|"s"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|segment
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BulkSegmentNode
operator|.
name|class
argument_list|,
name|SegmentNode
operator|.
name|newSegmentNode
argument_list|(
name|backend
argument_list|,
literal|"s"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

