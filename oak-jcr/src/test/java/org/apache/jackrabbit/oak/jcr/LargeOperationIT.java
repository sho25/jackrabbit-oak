begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_ADDED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|NodeStoreFixture
operator|.
name|DocumentFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|NodeStoreFixture
operator|.
name|SegmentFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Scalability test asserting certain operations scale linearly in the  * size of their input.  */
end_comment

begin_class
annotation|@
name|Ignore
argument_list|(
literal|"WIP OAK-1413"
argument_list|)
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|LargeOperationIT
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LargeOperationIT
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Scales defining the input sizes against which the tests run */
specifier|private
specifier|static
specifier|final
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|SEGMENT_SCALES
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1024
argument_list|,
literal|2048
argument_list|,
literal|4096
argument_list|,
literal|8192
argument_list|,
literal|16384
argument_list|,
literal|32768
argument_list|,
literal|65536
argument_list|,
literal|131072
argument_list|,
literal|262144
argument_list|,
literal|524288
argument_list|,
literal|1048576
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|MONGO_SCALES
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|128
argument_list|,
literal|256
argument_list|,
literal|512
argument_list|,
literal|1024
argument_list|,
literal|2048
argument_list|,
literal|4096
argument_list|,
literal|8192
argument_list|,
literal|16384
argument_list|,
literal|32768
argument_list|,
literal|65536
argument_list|,
literal|131072
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|NodeStoreFixture
name|fixture
decl_stmt|;
specifier|private
specifier|final
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|scales
decl_stmt|;
specifier|private
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|private
name|Repository
name|repository
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|public
name|LargeOperationIT
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|,
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|scales
parameter_list|)
block|{
name|this
operator|.
name|fixture
operator|=
name|fixture
expr_stmt|;
name|this
operator|.
name|scales
operator|=
name|scales
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|fixtures
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|,
literal|"tar."
operator|+
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
decl_stmt|;
name|SegmentStore
name|segmentStore
init|=
operator|new
name|FileStore
argument_list|(
name|file
argument_list|,
literal|266
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|fixtures
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|SegmentFixture
name|segmentFixture
init|=
operator|new
name|SegmentFixture
argument_list|(
name|segmentStore
argument_list|)
decl_stmt|;
if|if
condition|(
name|segmentFixture
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|segmentFixture
block|,
name|SEGMENT_SCALES
block|}
argument_list|)
expr_stmt|;
block|}
name|DocumentFixture
name|documentFixture
init|=
operator|new
name|DocumentFixture
argument_list|()
decl_stmt|;
if|if
condition|(
name|documentFixture
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|documentFixture
block|,
name|MONGO_SCALES
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|fixtures
return|;
block|}
specifier|private
name|Session
name|createAdminSession
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|repository
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nodeStore
operator|=
name|fixture
operator|.
name|createNodeStore
argument_list|()
expr_stmt|;
name|repository
operator|=
operator|new
name|Jcr
argument_list|(
name|nodeStore
argument_list|)
operator|.
name|createRepository
argument_list|()
expr_stmt|;
name|session
operator|=
name|createAdminSession
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
if|if
condition|(
name|repository
operator|instanceof
name|JackrabbitRepository
condition|)
block|{
operator|(
operator|(
name|JackrabbitRepository
operator|)
name|repository
operator|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|fixture
operator|.
name|dispose
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
block|}
comment|/**      * Calculate the quotients of subsequent elements of an input {@code sequence}      * @param sequence  input sequence      * @return  sequence of quotients of {@code sequence}      */
specifier|private
specifier|static
name|Iterable
argument_list|<
name|Double
argument_list|>
name|quotients
parameter_list|(
name|Iterable
argument_list|<
name|Double
argument_list|>
name|sequence
parameter_list|)
block|{
name|Double
name|prev
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|quotients
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|double
name|current
range|:
name|sequence
control|)
block|{
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|quotients
operator|.
name|add
argument_list|(
name|current
operator|/
name|prev
argument_list|)
expr_stmt|;
block|}
name|prev
operator|=
name|current
expr_stmt|;
block|}
return|return
name|quotients
return|;
block|}
comment|/**      * Calculate the logarithmic bound for the given {@code scales} applying an      * {@code offset} to account for errors.      */
specifier|private
specifier|static
name|Iterable
argument_list|<
name|Double
argument_list|>
name|getLogarithmicBound
parameter_list|(
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|scales
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|Double
name|prev
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|bound
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|double
name|current
range|:
name|scales
control|)
block|{
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|bound
operator|.
name|add
argument_list|(
name|Math
operator|.
name|log
argument_list|(
name|current
operator|*
name|offset
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
name|prev
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|prev
operator|=
name|current
expr_stmt|;
block|}
return|return
name|bound
return|;
block|}
comment|/**      * Assert that {@code sequence} is bounded by {@code bound}      */
specifier|private
specifier|static
name|void
name|assertBounded
parameter_list|(
name|String
name|message
parameter_list|,
name|Iterable
argument_list|<
name|Double
argument_list|>
name|sequence
parameter_list|,
name|Iterable
argument_list|<
name|Double
argument_list|>
name|bound
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Double
argument_list|>
name|max
init|=
name|bound
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|sequence
control|)
block|{
if|if
condition|(
name|value
operator|>
name|max
operator|.
name|next
argument_list|()
condition|)
block|{
name|fail
argument_list|(
name|message
operator|+
literal|" The sequence exceeds its bound. "
operator|+
literal|"Expected "
operator|+
name|sequence
operator|+
literal|"<= "
operator|+
name|bound
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Assert that large commits scale linearly wrt. to the number of changed items.      * @throws RepositoryException      * @throws InterruptedException      */
annotation|@
name|Test
specifier|public
name|void
name|largeCommit
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
block|{
specifier|final
name|Node
name|n
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"large-commit"
argument_list|,
literal|"oak:Unstructured"
argument_list|)
decl_stmt|;
specifier|final
name|ContentGenerator
name|contentGenerator
init|=
operator|new
name|ContentGenerator
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|executionTimes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|scale
range|:
name|scales
control|)
block|{
name|ScalabilityTest
name|test
init|=
operator|new
name|ScalabilityTest
argument_list|(
name|scale
argument_list|)
block|{
annotation|@
name|Override
name|void
name|before
parameter_list|(
name|int
name|scale
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|contentGenerator
operator|.
name|addNodes
argument_list|(
name|n
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|run
parameter_list|(
name|int
name|scale
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|double
name|t
init|=
name|test
operator|.
name|run
argument_list|()
decl_stmt|;
name|executionTimes
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Committing {} node took {} ns/node"
argument_list|,
name|scale
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|Iterable
argument_list|<
name|Double
argument_list|>
name|quotients
init|=
name|quotients
argument_list|(
name|executionTimes
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scaling quotients: {}"
argument_list|,
name|quotients
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|Double
argument_list|>
name|bound
init|=
name|getLogarithmicBound
argument_list|(
name|scales
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertBounded
argument_list|(
literal|"Commit does not scale logarithmically."
argument_list|,
name|quotients
argument_list|,
name|bound
argument_list|)
expr_stmt|;
block|}
comment|/**      * Assert copy scales linearly with the number of items copied      * @throws RepositoryException      * @throws InterruptedException      */
annotation|@
name|Test
specifier|public
name|void
name|largeCopy
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
block|{
specifier|final
name|Node
name|n
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"large-copy"
argument_list|,
literal|"oak:Unstructured"
argument_list|)
decl_stmt|;
specifier|final
name|ContentGenerator
name|contentGenerator
init|=
operator|new
name|ContentGenerator
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|executionTimes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|scale
range|:
name|scales
control|)
block|{
name|ScalabilityTest
name|test
init|=
operator|new
name|ScalabilityTest
argument_list|(
name|scale
argument_list|)
block|{
annotation|@
name|Override
name|void
name|before
parameter_list|(
name|int
name|scale
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|s
init|=
name|n
operator|.
name|addNode
argument_list|(
literal|"s"
operator|+
name|scale
argument_list|)
decl_stmt|;
name|contentGenerator
operator|.
name|addNodes
argument_list|(
name|s
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|run
parameter_list|(
name|int
name|scale
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|copy
argument_list|(
literal|"/large-copy/s"
operator|+
name|scale
argument_list|,
literal|"/large-copy/t"
operator|+
name|scale
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|double
name|t
init|=
name|test
operator|.
name|run
argument_list|()
decl_stmt|;
name|executionTimes
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Copying {} node took {} ns/node"
argument_list|,
name|scale
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|Iterable
argument_list|<
name|Double
argument_list|>
name|quotients
init|=
name|quotients
argument_list|(
name|executionTimes
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scaling quotients: {}"
argument_list|,
name|quotients
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|Double
argument_list|>
name|bound
init|=
name|getLogarithmicBound
argument_list|(
name|scales
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertBounded
argument_list|(
literal|"Copy does not scale logarithmically."
argument_list|,
name|quotients
argument_list|,
name|bound
argument_list|)
expr_stmt|;
block|}
comment|/**      * Assert move scales linearly with the number of items copied      * @throws RepositoryException      * @throws InterruptedException      */
annotation|@
name|Test
specifier|public
name|void
name|largeMove
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
block|{
specifier|final
name|Node
name|n
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"large-move"
argument_list|,
literal|"oak:Unstructured"
argument_list|)
decl_stmt|;
specifier|final
name|ContentGenerator
name|contentGenerator
init|=
operator|new
name|ContentGenerator
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|executionTimes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|scale
range|:
name|scales
control|)
block|{
name|ScalabilityTest
name|test
init|=
operator|new
name|ScalabilityTest
argument_list|(
name|scale
argument_list|)
block|{
annotation|@
name|Override
name|void
name|before
parameter_list|(
name|int
name|scale
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|s
init|=
name|n
operator|.
name|addNode
argument_list|(
literal|"s"
operator|+
name|scale
argument_list|)
decl_stmt|;
name|contentGenerator
operator|.
name|addNodes
argument_list|(
name|s
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|run
parameter_list|(
name|int
name|scale
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|move
argument_list|(
literal|"/large-move/s"
operator|+
name|scale
argument_list|,
literal|"/large-move/t"
operator|+
name|scale
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|double
name|t
init|=
name|test
operator|.
name|run
argument_list|()
decl_stmt|;
name|executionTimes
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving {} node took {} ns/node"
argument_list|,
name|scale
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|Iterable
argument_list|<
name|Double
argument_list|>
name|quotients
init|=
name|quotients
argument_list|(
name|executionTimes
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scaling quotients: {}"
argument_list|,
name|quotients
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|Double
argument_list|>
name|bound
init|=
name|getLogarithmicBound
argument_list|(
name|scales
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertBounded
argument_list|(
literal|"Move does not scale logarithmically."
argument_list|,
name|quotients
argument_list|,
name|bound
argument_list|)
expr_stmt|;
block|}
comment|/**      * Assert adding many siblings scales linearly with the number of added siblings.      * @throws RepositoryException      * @throws InterruptedException      */
annotation|@
name|Test
specifier|public
name|void
name|manySiblings
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
block|{
specifier|final
name|Node
name|n
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"many-siblings"
argument_list|,
literal|"oak:Unstructured"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|executionTimes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|scale
range|:
name|scales
control|)
block|{
name|ScalabilityTest
name|test
init|=
operator|new
name|ScalabilityTest
argument_list|(
name|scale
argument_list|)
block|{
annotation|@
name|Override
name|void
name|before
parameter_list|(
name|int
name|scale
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|n
operator|.
name|addNode
argument_list|(
literal|"s"
operator|+
name|scale
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|run
parameter_list|(
name|int
name|scale
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|s
init|=
name|n
operator|.
name|getNode
argument_list|(
literal|"s"
operator|+
name|scale
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|scale
condition|;
name|k
operator|++
control|)
block|{
name|s
operator|.
name|addNode
argument_list|(
literal|"s"
operator|+
name|k
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|double
name|t
init|=
name|test
operator|.
name|run
argument_list|()
decl_stmt|;
name|executionTimes
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding {} siblings took {} ns/node"
argument_list|,
name|scale
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|Iterable
argument_list|<
name|Double
argument_list|>
name|quotients
init|=
name|quotients
argument_list|(
name|executionTimes
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scaling quotients: {}"
argument_list|,
name|quotients
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|Double
argument_list|>
name|bound
init|=
name|getLogarithmicBound
argument_list|(
name|scales
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertBounded
argument_list|(
literal|"Adding siblings does not scale logarithmically."
argument_list|,
name|quotients
argument_list|,
name|bound
argument_list|)
expr_stmt|;
block|}
comment|/**      * Assert processing of pending observation events scales linearly with the      * number of pending events.      * @throws RepositoryException      * @throws InterruptedException      */
annotation|@
name|Test
specifier|public
name|void
name|largeNumberOfPendingEvents
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
block|{
specifier|final
name|Node
name|n
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"pending-events"
argument_list|,
literal|"oak:Unstructured"
argument_list|)
decl_stmt|;
specifier|final
name|ContentGenerator
name|contentGenerator
init|=
operator|new
name|ContentGenerator
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|executionTimes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|scale
range|:
name|scales
control|)
block|{
specifier|final
name|Observer
name|observer
init|=
operator|new
name|Observer
argument_list|(
name|scale
argument_list|,
literal|100
argument_list|)
decl_stmt|;
try|try
block|{
name|ScalabilityTest
name|test
init|=
operator|new
name|ScalabilityTest
argument_list|(
name|scale
argument_list|)
block|{
annotation|@
name|Override
name|void
name|before
parameter_list|(
name|int
name|scale
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|contentGenerator
operator|.
name|addNodes
argument_list|(
name|n
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|run
parameter_list|(
name|int
name|scale
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|observer
operator|.
name|waitForEvents
argument_list|(
name|scale
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|double
name|t
init|=
name|test
operator|.
name|run
argument_list|()
decl_stmt|;
name|executionTimes
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} pending events took {} ns/event to process"
argument_list|,
name|scale
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|observer
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{}
block|}
block|}
name|Iterable
argument_list|<
name|Double
argument_list|>
name|quotients
init|=
name|quotients
argument_list|(
name|executionTimes
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scaling quotients: {}"
argument_list|,
name|quotients
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|Double
argument_list|>
name|bound
init|=
name|getLogarithmicBound
argument_list|(
name|scales
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertBounded
argument_list|(
literal|"Processing pending events does not scale logarithmically."
argument_list|,
name|quotients
argument_list|,
name|bound
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------< ContentGenerator>---
specifier|private
specifier|static
class|class
name|ContentGenerator
block|{
specifier|private
specifier|static
specifier|final
name|int
name|FAN_OUT
init|=
literal|10
decl_stmt|;
specifier|private
specifier|final
name|int
name|saveInterval
decl_stmt|;
specifier|private
name|int
name|count
decl_stmt|;
specifier|public
name|ContentGenerator
parameter_list|(
name|int
name|saveInterval
parameter_list|)
block|{
name|this
operator|.
name|saveInterval
operator|=
name|saveInterval
expr_stmt|;
block|}
specifier|public
name|ContentGenerator
parameter_list|()
block|{
name|this
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addNodes
parameter_list|(
name|Node
name|node
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding {} nodes to {}"
argument_list|,
name|count
argument_list|,
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
while|while
condition|(
name|createContent
argument_list|(
name|node
argument_list|)
condition|)
empty_stmt|;
if|if
condition|(
name|saveInterval
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|node
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|createContent
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NodeIterator
name|nodes
init|=
name|node
operator|.
name|getNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
while|while
condition|(
name|nodes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|createContent
argument_list|(
name|nodes
operator|.
name|nextNode
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
name|boolean
name|result
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|FAN_OUT
operator|&&
operator|(
name|result
operator|=
name|addNode
argument_list|(
name|node
argument_list|)
operator|)
condition|;
name|c
operator|++
control|)
empty_stmt|;
return|return
name|result
return|;
block|}
block|}
name|boolean
name|addNode
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|node
operator|.
name|addNode
argument_list|(
literal|"n"
operator|+
name|count
operator|--
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|%
name|saveInterval
operator|==
literal|0
condition|)
block|{
name|node
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"add {}"
argument_list|,
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|isDone
argument_list|()
return|;
block|}
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|count
operator|==
literal|0
return|;
block|}
block|}
comment|//------------------------------------------------------------< ScalabilityTest>---
specifier|private
specifier|abstract
specifier|static
class|class
name|ScalabilityTest
block|{
specifier|private
specifier|final
name|int
name|scale
decl_stmt|;
specifier|protected
name|ScalabilityTest
parameter_list|(
name|int
name|scale
parameter_list|)
block|{
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
block|}
name|void
name|before
parameter_list|(
name|int
name|scale
parameter_list|)
throws|throws
name|RepositoryException
block|{}
specifier|abstract
name|void
name|run
parameter_list|(
name|int
name|scale
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
function_decl|;
name|void
name|after
parameter_list|(
name|int
name|scale
parameter_list|)
block|{}
specifier|public
name|long
name|run
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
block|{
name|before
argument_list|(
name|scale
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|run
argument_list|(
name|scale
argument_list|)
expr_stmt|;
name|long
name|dt
init|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|t0
decl_stmt|;
name|after
argument_list|(
name|scale
argument_list|)
expr_stmt|;
return|return
name|dt
operator|/
name|scale
return|;
block|}
block|}
comment|//------------------------------------------------------------< Observer>---
specifier|private
class|class
name|Observer
implements|implements
name|EventListener
block|{
specifier|private
specifier|final
name|CountDownLatch
name|start
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|eventCount
decl_stmt|;
specifier|private
specifier|final
name|int
name|listenerCount
decl_stmt|;
specifier|private
specifier|final
name|Session
index|[]
name|sessions
decl_stmt|;
specifier|private
name|CountDownLatch
name|done
decl_stmt|;
specifier|public
name|Observer
parameter_list|(
name|int
name|eventCount
parameter_list|,
name|int
name|listenerCount
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|this
operator|.
name|eventCount
operator|=
name|eventCount
expr_stmt|;
name|this
operator|.
name|listenerCount
operator|=
name|listenerCount
expr_stmt|;
name|this
operator|.
name|sessions
operator|=
operator|new
name|Session
index|[
name|listenerCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|sessions
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|sessions
index|[
name|k
index|]
operator|=
name|createAdminSession
argument_list|()
expr_stmt|;
name|sessions
index|[
name|k
index|]
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getObservationManager
argument_list|()
operator|.
name|addEventListener
argument_list|(
name|this
argument_list|,
name|NODE_ADDED
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|waitForEvents
parameter_list|(
name|int
name|scale
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|done
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|scale
argument_list|)
expr_stmt|;
name|start
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|done
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
for|for
control|(
name|Session
name|session
range|:
name|sessions
control|)
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
name|EventIterator
name|events
parameter_list|)
block|{
try|try
block|{
name|start
operator|.
name|await
argument_list|()
expr_stmt|;
while|while
condition|(
name|events
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|events
operator|.
name|nextEvent
argument_list|()
expr_stmt|;
name|done
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

