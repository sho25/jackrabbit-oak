begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|RepositoryFixture
import|;
end_import

begin_class
specifier|public
class|class
name|ManyNodes
extends|extends
name|Benchmark
block|{
specifier|private
specifier|final
name|boolean
name|verbose
decl_stmt|;
name|ManyNodes
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
name|this
operator|.
name|verbose
operator|=
name|verbose
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|Iterable
argument_list|<
name|RepositoryFixture
argument_list|>
name|fixtures
parameter_list|)
block|{
for|for
control|(
name|RepositoryFixture
name|fixture
range|:
name|fixtures
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ManyNodes test: "
operator|+
name|fixture
argument_list|)
expr_stmt|;
if|if
condition|(
name|fixture
operator|.
name|isAvailable
argument_list|(
literal|1
argument_list|)
condition|)
block|{
try|try
block|{
name|Repository
index|[]
name|cluster
init|=
name|fixture
operator|.
name|setUpCluster
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|Session
name|session
init|=
name|cluster
index|[
literal|0
index|]
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|addManyNodes
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fixture
operator|.
name|tearDownCluster
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"- not available, skipping"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addManyNodes
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|root
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"testRoot"
argument_list|)
decl_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|1000
condition|;
name|k
operator|++
control|)
block|{
name|Node
name|nk
init|=
name|root
operator|.
name|addNode
argument_list|(
literal|"test"
operator|+
name|k
argument_list|,
literal|"nt:folder"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|nj
init|=
name|nk
operator|.
name|addNode
argument_list|(
literal|"test"
operator|+
name|j
argument_list|,
literal|"nt:folder"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|nj
operator|.
name|addNode
argument_list|(
literal|"child"
operator|+
name|i
argument_list|,
literal|"nt:folder"
argument_list|)
expr_stmt|;
name|total
operator|++
expr_stmt|;
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
if|if
condition|(
name|total
operator|%
literal|10000
operator|==
literal|0
condition|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|total
operator|+
literal|" nodes in "
operator|+
operator|(
name|now
operator|-
name|time
operator|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
block|}
name|time
operator|=
name|now
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

