begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests the JsonObject implementation.  */
end_comment

begin_class
specifier|public
class|class
name|JsonObjectTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|fromJson
parameter_list|()
block|{
name|JsonObject
name|a
init|=
name|JsonObject
operator|.
name|fromJson
argument_list|(
literal|" { } "
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{}"
argument_list|,
name|a
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JsonObject
name|b
init|=
name|JsonObject
operator|.
name|fromJson
argument_list|(
literal|"{\"az\": 1, \"b\": [2, 3], \"c\": null, \"d\": {}}"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  \"az\": 1,\n"
operator|+
literal|"  \"b\": [2, 3],\n"
operator|+
literal|"  \"c\": null,\n"
operator|+
literal|"  \"d\": {}\n"
operator|+
literal|"}"
argument_list|,
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{az=1, b=[2, 3], c=null}"
argument_list|,
name|b
operator|.
name|getProperties
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{d={}}"
argument_list|,
name|b
operator|.
name|getChildren
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|newObjectNotRespectingOrder
parameter_list|()
block|{
name|JsonObject
name|a
init|=
operator|new
name|JsonObject
argument_list|()
decl_stmt|;
comment|// we test whether what we put in will come out,
comment|// but we don't test the order
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|a
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
literal|"x"
operator|+
name|i
argument_list|,
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|a
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"x"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|newObjectRespectingOrder
parameter_list|()
block|{
name|JsonObject
name|a
init|=
operator|new
name|JsonObject
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|a
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
literal|"az"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|a
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
comment|// we expect it's a LinkedHashMap or similar
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  \"az\": 1,\n"
operator|+
literal|"  \"b\": 2\n"
operator|+
literal|"}"
argument_list|,
name|a
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{az=1, b=2}"
argument_list|,
name|a
operator|.
name|getProperties
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

