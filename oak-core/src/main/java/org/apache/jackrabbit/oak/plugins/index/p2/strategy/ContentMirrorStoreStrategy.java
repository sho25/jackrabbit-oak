begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|p2
operator|.
name|strategy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_class
specifier|public
class|class
name|ContentMirrorStoreStrategy
implements|implements
name|IndexStoreStrategy
block|{
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|NodeBuilder
name|index
parameter_list|,
name|String
name|key
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|hasChildNode
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return;
block|}
name|NodeBuilder
name|child
init|=
name|index
operator|.
name|child
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NodeBuilder
argument_list|>
name|parents
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|NodeBuilder
argument_list|>
argument_list|(
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|rm
range|:
name|values
control|)
block|{
if|if
condition|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|rm
argument_list|)
condition|)
block|{
name|child
operator|.
name|removeProperty
argument_list|(
literal|"match"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|parentPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|rm
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|rm
argument_list|)
decl_stmt|;
name|NodeBuilder
name|indexEntry
init|=
name|parents
operator|.
name|get
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexEntry
operator|==
literal|null
condition|)
block|{
name|indexEntry
operator|=
name|child
expr_stmt|;
name|String
name|segmentPath
init|=
literal|""
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|segments
init|=
name|PathUtils
operator|.
name|elements
argument_list|(
name|parentPath
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|segments
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|segment
init|=
name|segments
operator|.
name|next
argument_list|()
decl_stmt|;
name|segmentPath
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|segmentPath
argument_list|,
name|segment
argument_list|)
expr_stmt|;
name|indexEntry
operator|=
name|indexEntry
operator|.
name|child
argument_list|(
name|segment
argument_list|)
expr_stmt|;
name|parents
operator|.
name|put
argument_list|(
name|segmentPath
argument_list|,
name|indexEntry
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|indexEntry
operator|.
name|hasChildNode
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|NodeBuilder
name|childEntry
init|=
name|indexEntry
operator|.
name|child
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|childEntry
operator|.
name|removeProperty
argument_list|(
literal|"match"
argument_list|)
expr_stmt|;
if|if
condition|(
name|childEntry
operator|.
name|getChildNodeCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|indexEntry
operator|.
name|removeNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// prune the index: remove all children that have no children
comment|// and no "match" property progressing bottom up
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|parents
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|path
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|NodeBuilder
name|parent
init|=
name|parents
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|pruneNode
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
comment|// finally prune the index node
name|pruneNode
argument_list|(
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|getChildNodeCount
argument_list|()
operator|==
literal|0
operator|&&
name|child
operator|.
name|getProperty
argument_list|(
literal|"match"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|index
operator|.
name|removeNode
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|pruneNode
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|.
name|isRemoved
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|String
name|name
range|:
name|parent
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
name|NodeBuilder
name|segment
init|=
name|parent
operator|.
name|child
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|segment
operator|.
name|getChildNodeCount
argument_list|()
operator|==
literal|0
operator|&&
name|segment
operator|.
name|getProperty
argument_list|(
literal|"match"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|parent
operator|.
name|removeNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|insert
parameter_list|(
name|NodeBuilder
name|index
parameter_list|,
name|String
name|key
parameter_list|,
name|boolean
name|unique
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|child
init|=
name|index
operator|.
name|child
argument_list|(
name|key
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|add
range|:
name|values
control|)
block|{
name|NodeBuilder
name|indexEntry
init|=
name|child
decl_stmt|;
for|for
control|(
name|String
name|segment
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|add
argument_list|)
control|)
block|{
name|indexEntry
operator|=
name|indexEntry
operator|.
name|child
argument_list|(
name|segment
argument_list|)
expr_stmt|;
block|}
name|indexEntry
operator|.
name|setProperty
argument_list|(
literal|"match"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|long
name|matchCount
init|=
name|countMatchingLeaves
argument_list|(
name|child
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchCount
operator|==
literal|0
condition|)
block|{
name|index
operator|.
name|removeNode
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|unique
operator|&&
name|matchCount
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Uniqueness constraint violated"
argument_list|)
throw|;
block|}
block|}
specifier|static
name|int
name|countMatchingLeaves
parameter_list|(
name|NodeState
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|getProperty
argument_list|(
literal|"match"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|state
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|count
operator|+=
name|countMatchingLeaves
argument_list|(
name|entry
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|find
parameter_list|(
name|NodeState
name|index
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|values
control|)
block|{
name|NodeState
name|property
init|=
name|index
operator|.
name|getChildNode
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
comment|// We have an entry for this value, so use it
name|getMatchingPaths
argument_list|(
name|property
argument_list|,
literal|""
argument_list|,
name|paths
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|paths
return|;
block|}
specifier|private
name|void
name|getMatchingPaths
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|String
name|path
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|)
block|{
name|PropertyState
name|ps
init|=
name|state
operator|.
name|getProperty
argument_list|(
literal|"match"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|!=
literal|null
operator|&&
operator|!
name|ps
operator|.
name|isArray
argument_list|()
operator|&&
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ChildNodeEntry
name|c
range|:
name|state
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|c
operator|.
name|getName
argument_list|()
decl_stmt|;
name|NodeState
name|childState
init|=
name|c
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|getMatchingPaths
argument_list|(
name|childState
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
argument_list|,
name|paths
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|count
parameter_list|(
name|NodeState
name|index
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|values
control|)
block|{
name|count
operator|+=
name|countMatchingLeaves
argument_list|(
name|index
operator|.
name|getChildNode
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
block|}
end_class

end_unit

