begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
operator|.
name|toStringHelper
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|addAll
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
operator|.
name|transform
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newLinkedHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_ISMIXIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_LOCKISDEEP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_LOCKOWNER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MULTIPLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_NODETYPENAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PROTECTED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_REQUIREDTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SAMENAMESIBLINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|MIX_LOCKABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_BASE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BOOLEAN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|UNDEFINED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|UNDEFINEDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|dropIndexFromName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_IS_ABSTRACT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_HAS_PROTECTED_RESIDUAL_CHILD_NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_HAS_PROTECTED_RESIDUAL_PROPERTIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_NAMED_CHILD_NODE_DEFINITIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_NAMED_PROPERTY_DEFINITIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_PROTECTED_CHILD_NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_PROTECTED_PROPERTIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_RESIDUAL_CHILD_NODE_DEFINITIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_RESIDUAL_PROPERTY_DEFINITIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_SUPERTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
operator|.
name|getBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
operator|.
name|getNames
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|InvalidItemStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ItemNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFormatException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|lock
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NoSuchNodeTypeException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|identifier
operator|.
name|IdentifierManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|value
operator|.
name|ValueHelper
import|;
end_import

begin_comment
comment|/**  * {@code NodeDelegate} serve as internal representations of {@code Node}s.  * Most methods of this class throw an {@code InvalidItemStateException}  * exception if the instance is stale. An instance is stale if the underlying  * items does not exist anymore.  */
end_comment

begin_class
specifier|public
class|class
name|NodeDelegate
extends|extends
name|ItemDelegate
block|{
comment|/** The underlying {@link org.apache.jackrabbit.oak.api.Tree} of this node. */
specifier|private
specifier|final
name|Tree
name|tree
decl_stmt|;
specifier|public
name|NodeDelegate
parameter_list|(
name|SessionDelegate
name|sessionDelegate
parameter_list|,
name|Tree
name|tree
parameter_list|)
block|{
name|super
argument_list|(
name|sessionDelegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|tree
operator|=
name|tree
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|tree
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|tree
operator|.
name|getPath
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|public
name|NodeDelegate
name|getParent
parameter_list|()
block|{
return|return
name|tree
operator|.
name|isRoot
argument_list|()
operator|||
operator|!
name|tree
operator|.
name|getParent
argument_list|()
operator|.
name|exists
argument_list|()
condition|?
literal|null
else|:
operator|new
name|NodeDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|tree
operator|.
name|getParent
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
name|tree
operator|.
name|exists
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|public
name|Status
name|getStatus
parameter_list|()
block|{
return|return
name|tree
operator|.
name|getStatus
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|String
name|getIdentifier
parameter_list|()
throws|throws
name|InvalidItemStateException
block|{
return|return
name|IdentifierManager
operator|.
name|getIdentifier
argument_list|(
name|getTree
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isProtected
parameter_list|()
throws|throws
name|InvalidItemStateException
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|()
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|isRoot
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Tree
name|parent
init|=
name|tree
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|String
name|nameWithIndex
init|=
name|tree
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|dropIndexFromName
argument_list|(
name|nameWithIndex
argument_list|)
decl_stmt|;
name|boolean
name|sns
init|=
operator|!
name|name
operator|.
name|equals
argument_list|(
name|nameWithIndex
argument_list|)
decl_stmt|;
name|Tree
name|typeRoot
init|=
name|sessionDelegate
operator|.
name|getRoot
argument_list|()
operator|.
name|getTree
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tree
argument_list|>
name|types
init|=
name|TreeUtil
operator|.
name|getEffectiveType
argument_list|(
name|parent
argument_list|,
name|typeRoot
argument_list|)
decl_stmt|;
name|boolean
name|protectedResidual
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Tree
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
name|contains
argument_list|(
name|TreeUtil
operator|.
name|getNames
argument_list|(
name|type
argument_list|,
name|REP_PROTECTED_CHILD_NODES
argument_list|)
argument_list|,
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|protectedResidual
condition|)
block|{
name|protectedResidual
operator|=
name|TreeUtil
operator|.
name|getBoolean
argument_list|(
name|type
argument_list|,
name|REP_HAS_PROTECTED_RESIDUAL_CHILD_NODES
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Special case: There are one or more protected *residual*
comment|// child node definitions. Iterate through them to check whether
comment|// there's a matching, protected one.
if|if
condition|(
name|protectedResidual
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|typeNames
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Tree
name|type
range|:
name|TreeUtil
operator|.
name|getEffectiveType
argument_list|(
name|tree
argument_list|,
name|typeRoot
argument_list|)
control|)
block|{
name|typeNames
operator|.
name|add
argument_list|(
name|TreeUtil
operator|.
name|getName
argument_list|(
name|type
argument_list|,
name|JCR_NODETYPENAME
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|typeNames
argument_list|,
name|TreeUtil
operator|.
name|getNames
argument_list|(
name|type
argument_list|,
name|REP_SUPERTYPES
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Tree
name|type
range|:
name|types
control|)
block|{
name|Tree
name|definitions
init|=
name|type
operator|.
name|getChild
argument_list|(
name|REP_RESIDUAL_CHILD_NODE_DEFINITIONS
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|typeName
range|:
name|typeNames
control|)
block|{
name|Tree
name|definition
init|=
name|definitions
operator|.
name|getChild
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|sns
operator|||
name|TreeUtil
operator|.
name|getBoolean
argument_list|(
name|definition
argument_list|,
name|JCR_SAMENAMESIBLINGS
argument_list|)
operator|)
operator|&&
name|TreeUtil
operator|.
name|getBoolean
argument_list|(
name|definition
argument_list|,
name|JCR_PROTECTED
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
name|boolean
name|isProtected
parameter_list|(
name|String
name|property
parameter_list|)
throws|throws
name|InvalidItemStateException
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|()
decl_stmt|;
name|Tree
name|typeRoot
init|=
name|sessionDelegate
operator|.
name|getRoot
argument_list|()
operator|.
name|getTree
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tree
argument_list|>
name|types
init|=
name|TreeUtil
operator|.
name|getEffectiveType
argument_list|(
name|tree
argument_list|,
name|typeRoot
argument_list|)
decl_stmt|;
name|boolean
name|protectedResidual
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Tree
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
name|contains
argument_list|(
name|TreeUtil
operator|.
name|getNames
argument_list|(
name|type
argument_list|,
name|REP_PROTECTED_PROPERTIES
argument_list|)
argument_list|,
name|property
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|protectedResidual
condition|)
block|{
name|protectedResidual
operator|=
name|TreeUtil
operator|.
name|getBoolean
argument_list|(
name|type
argument_list|,
name|REP_HAS_PROTECTED_RESIDUAL_PROPERTIES
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Special case: There are one or more protected *residual*
comment|// child node definitions. Iterate through them to check whether
comment|// there's a matching, protected one.
if|if
condition|(
name|protectedResidual
condition|)
block|{
for|for
control|(
name|Tree
name|type
range|:
name|types
control|)
block|{
name|Tree
name|definitions
init|=
name|type
operator|.
name|getChild
argument_list|(
name|REP_RESIDUAL_PROPERTY_DEFINITIONS
argument_list|)
decl_stmt|;
for|for
control|(
name|Tree
name|definition
range|:
name|definitions
operator|.
name|getChildren
argument_list|()
control|)
block|{
comment|// TODO: check for matching property type?
if|if
condition|(
name|TreeUtil
operator|.
name|getBoolean
argument_list|(
name|definition
argument_list|,
name|JCR_PROTECTED
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Determine whether this is the root node      *      * @return {@code true} iff this is the root node      */
specifier|public
name|boolean
name|isRoot
parameter_list|()
throws|throws
name|InvalidItemStateException
block|{
return|return
name|getTree
argument_list|()
operator|.
name|isRoot
argument_list|()
return|;
block|}
comment|/**      * Get the number of properties of the node      *      * @return number of properties of the node      */
specifier|public
name|long
name|getPropertyCount
parameter_list|()
throws|throws
name|InvalidItemStateException
block|{
return|return
name|getTree
argument_list|()
operator|.
name|getPropertyCount
argument_list|()
return|;
block|}
comment|/**      * Get a property      *      * @param relPath oak path      * @return property at the path given by {@code relPath} or {@code null} if      *         no such property exists      */
annotation|@
name|CheckForNull
specifier|public
name|PropertyDelegate
name|getPropertyOrNull
parameter_list|(
name|String
name|relPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|parent
init|=
name|tree
decl_stmt|;
name|String
name|name
init|=
name|relPath
decl_stmt|;
name|int
name|slash
init|=
name|relPath
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|slash
operator|!=
operator|-
literal|1
condition|)
block|{
name|parent
operator|=
name|getTree
argument_list|(
name|relPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|slash
argument_list|)
argument_list|)
expr_stmt|;
name|name
operator|=
name|relPath
operator|.
name|substring
argument_list|(
name|slash
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|PropertyDelegate
name|property
init|=
operator|new
name|PropertyDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|parent
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|property
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Get a property. In contrast to {@link #getPropertyOrNull(String)} this      * method never returns {@code null}. In the case where no property exists      * at the given path, the returned property delegate throws an      * {@code InvalidItemStateException} on access. See See OAK-395.      *      * @param relPath oak path      * @return property at the path given by {@code relPath}.      */
annotation|@
name|Nonnull
specifier|public
name|PropertyDelegate
name|getProperty
parameter_list|(
name|String
name|relPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|parent
init|=
name|tree
decl_stmt|;
name|String
name|name
init|=
name|relPath
decl_stmt|;
name|int
name|slash
init|=
name|relPath
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|slash
operator|!=
operator|-
literal|1
condition|)
block|{
name|parent
operator|=
name|getTree
argument_list|(
name|relPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|slash
argument_list|)
argument_list|)
expr_stmt|;
name|name
operator|=
name|relPath
operator|.
name|substring
argument_list|(
name|slash
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PropertyDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|parent
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/**      * Get the properties of the node      *      * @return properties of the node      */
annotation|@
name|Nonnull
specifier|public
name|Iterator
argument_list|<
name|PropertyDelegate
argument_list|>
name|getProperties
parameter_list|()
throws|throws
name|InvalidItemStateException
block|{
return|return
name|transform
argument_list|(
name|getTree
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|PropertyState
argument_list|,
name|PropertyDelegate
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PropertyDelegate
name|apply
parameter_list|(
name|PropertyState
name|propertyState
parameter_list|)
block|{
return|return
operator|new
name|PropertyDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|tree
argument_list|,
name|propertyState
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Get the number of child nodes      *<p>      * If an implementation does know the exact value, it returns it (even if      * the value is higher than max). If the implementation does not know the      * exact value, and the child node count is higher than max, it may return      * Long.MAX_VALUE. The cost of the operation is at most O(max).      *      * @param max the maximum value      * @return number of child nodes of the node      */
specifier|public
name|long
name|getChildCount
parameter_list|(
name|long
name|max
parameter_list|)
throws|throws
name|InvalidItemStateException
block|{
return|return
name|getTree
argument_list|()
operator|.
name|getChildrenCount
argument_list|(
name|max
argument_list|)
return|;
block|}
comment|/**      * Get child node      *      * @param relPath oak path      * @return node at the path given by {@code relPath} or {@code null} if      *         no such node exists      */
annotation|@
name|CheckForNull
specifier|public
name|NodeDelegate
name|getChild
parameter_list|(
name|String
name|relPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|relPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
return|return
name|tree
operator|==
literal|null
operator|||
operator|!
name|tree
operator|.
name|exists
argument_list|()
condition|?
literal|null
else|:
operator|new
name|NodeDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|tree
argument_list|)
return|;
block|}
comment|/**      * Returns an iterator for traversing all the children of this node.      * If the node is orderable then the iterator will return child nodes in the      * specified order. Otherwise the ordering of the iterator is undefined.      *      * @return child nodes of the node      */
annotation|@
name|Nonnull
specifier|public
name|Iterator
argument_list|<
name|NodeDelegate
argument_list|>
name|getChildren
parameter_list|()
throws|throws
name|InvalidItemStateException
block|{
name|Iterator
argument_list|<
name|Tree
argument_list|>
name|iterator
init|=
name|getTree
argument_list|()
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
name|transform
argument_list|(
name|filter
argument_list|(
name|iterator
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Tree
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|tree
operator|.
name|exists
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|Tree
argument_list|,
name|NodeDelegate
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeDelegate
name|apply
parameter_list|(
name|Tree
name|tree
parameter_list|)
block|{
return|return
operator|new
name|NodeDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|tree
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|void
name|orderBefore
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|target
parameter_list|)
throws|throws
name|ItemNotFoundException
throws|,
name|InvalidItemStateException
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tree
operator|.
name|getChild
argument_list|(
name|source
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ItemNotFoundException
argument_list|(
literal|"Not a child: "
operator|+
name|source
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|target
operator|!=
literal|null
operator|&&
operator|!
name|tree
operator|.
name|getChild
argument_list|(
name|target
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ItemNotFoundException
argument_list|(
literal|"Not a child: "
operator|+
name|target
argument_list|)
throw|;
block|}
else|else
block|{
name|tree
operator|.
name|getChild
argument_list|(
name|source
argument_list|)
operator|.
name|orderBefore
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|canAddMixin
parameter_list|(
name|String
name|typeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|type
init|=
name|sessionDelegate
operator|.
name|getRoot
argument_list|()
operator|.
name|getTree
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
operator|.
name|getChild
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
operator|!
name|TreeUtil
operator|.
name|getBoolean
argument_list|(
name|type
argument_list|,
name|JCR_IS_ABSTRACT
argument_list|)
operator|&&
name|TreeUtil
operator|.
name|getBoolean
argument_list|(
name|type
argument_list|,
name|JCR_ISMIXIN
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchNodeTypeException
argument_list|(
literal|"Node type "
operator|+
name|typeName
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|addMixin
parameter_list|(
name|String
name|typeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|getTree
argument_list|()
argument_list|,
name|typeName
argument_list|,
name|sessionDelegate
operator|.
name|getRoot
argument_list|()
operator|.
name|getTree
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeMixin
parameter_list|(
name|String
name|typeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|mixins
init|=
name|newLinkedHashSet
argument_list|(
name|getNames
argument_list|(
name|tree
argument_list|,
name|JCR_MIXINTYPES
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mixins
operator|.
name|remove
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NoSuchNodeTypeException
argument_list|(
literal|"Mixin "
operator|+
name|typeName
operator|+
literal|" not contained in "
operator|+
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
name|updateMixins
argument_list|(
name|mixins
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|typeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setMixins
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|mixinNames
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|existingMixins
init|=
name|newLinkedHashSet
argument_list|(
name|getNames
argument_list|(
name|tree
argument_list|,
name|JCR_MIXINTYPES
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingMixins
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|updateMixins
argument_list|(
name|mixinNames
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|toRemove
init|=
name|newLinkedHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|existingMixins
control|)
block|{
if|if
condition|(
operator|!
name|mixinNames
operator|.
name|remove
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|updateMixins
argument_list|(
name|mixinNames
argument_list|,
name|toRemove
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|updateMixins
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|addMixinNames
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|removedOakMixinNames
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// 1. set all new mixin types including validation
for|for
control|(
name|String
name|oakMixinName
range|:
name|addMixinNames
control|)
block|{
name|addMixin
argument_list|(
name|oakMixinName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|removedOakMixinNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// 2. retrieve the updated set of mixin types, remove the mixins that should no longer be present
name|Set
argument_list|<
name|String
argument_list|>
name|mixinNames
init|=
name|newLinkedHashSet
argument_list|(
name|getNames
argument_list|(
name|getTree
argument_list|()
argument_list|,
name|JCR_MIXINTYPES
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mixinNames
operator|.
name|removeAll
argument_list|(
name|removedOakMixinNames
argument_list|)
condition|)
block|{
comment|// FIXME: add mixins to add again as the removal may change the effect of type inheritance as evaluated during #addMixin
name|mixinNames
operator|.
name|addAll
argument_list|(
name|addMixinNames
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|mixinNames
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
block|}
comment|// 3. deal with locked nodes
name|boolean
name|wasLockable
init|=
name|isNodeType
argument_list|(
name|MIX_LOCKABLE
argument_list|)
decl_stmt|;
name|boolean
name|isLockable
init|=
name|isNodeType
argument_list|(
name|MIX_LOCKABLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|wasLockable
operator|&&
operator|!
name|isLockable
operator|&&
name|holdsLock
argument_list|(
literal|false
argument_list|)
condition|)
block|{
comment|// TODO: This should probably be done in a commit hook
name|unlock
argument_list|()
expr_stmt|;
name|sessionDelegate
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// 4. clean up set of properties and child nodes such that all child items
comment|// have a valid item definition according to the effective node type present
comment|// after having updated the mixin property. this includes removing all
comment|// protected properties and child nodes associated with the removed mixin
comment|// type(s), as there's no way for the client to do that. Other items
comment|// defined in this mixin type might also need to be removed if there
comment|// is no longer a matching item definition available.
name|Tree
name|typeRoot
init|=
name|sessionDelegate
operator|.
name|getRoot
argument_list|()
operator|.
name|getTree
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tree
argument_list|>
name|removed
init|=
operator|new
name|ArrayList
argument_list|<
name|Tree
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|removedOakMixinNames
control|)
block|{
name|removed
operator|.
name|add
argument_list|(
name|typeRoot
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Tree
argument_list|>
name|remaining
init|=
name|getNodeTypes
argument_list|(
name|tree
argument_list|,
name|typeRoot
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyState
name|property
range|:
name|tree
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|property
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Type
argument_list|<
name|?
argument_list|>
name|type
init|=
name|property
operator|.
name|getType
argument_list|()
decl_stmt|;
name|Tree
name|oldDefinition
init|=
name|findMatchingPropertyDefinition
argument_list|(
name|removed
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDefinition
operator|!=
literal|null
condition|)
block|{
name|Tree
name|newDefinition
init|=
name|findMatchingPropertyDefinition
argument_list|(
name|remaining
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|newDefinition
operator|==
literal|null
operator|||
operator|(
name|getBoolean
argument_list|(
name|oldDefinition
argument_list|,
name|JCR_PROTECTED
argument_list|)
operator|&&
operator|!
name|getBoolean
argument_list|(
name|newDefinition
argument_list|,
name|JCR_PROTECTED
argument_list|)
operator|)
condition|)
block|{
name|tree
operator|.
name|removeProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Tree
name|child
range|:
name|tree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|child
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|typeNames
init|=
name|newLinkedHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Tree
name|type
range|:
name|getNodeTypes
argument_list|(
name|child
argument_list|,
name|typeRoot
argument_list|)
control|)
block|{
name|typeNames
operator|.
name|add
argument_list|(
name|TreeUtil
operator|.
name|getName
argument_list|(
name|type
argument_list|,
name|JCR_NODETYPENAME
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|typeNames
argument_list|,
name|getNames
argument_list|(
name|type
argument_list|,
name|REP_SUPERTYPES
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Tree
name|oldDefinition
init|=
name|findMatchingChildNodeDefinition
argument_list|(
name|removed
argument_list|,
name|name
argument_list|,
name|typeNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDefinition
operator|!=
literal|null
condition|)
block|{
name|Tree
name|newDefinition
init|=
name|findMatchingChildNodeDefinition
argument_list|(
name|remaining
argument_list|,
name|name
argument_list|,
name|typeNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|newDefinition
operator|==
literal|null
operator|||
operator|(
name|getBoolean
argument_list|(
name|oldDefinition
argument_list|,
name|JCR_PROTECTED
argument_list|)
operator|&&
operator|!
name|getBoolean
argument_list|(
name|newDefinition
argument_list|,
name|JCR_PROTECTED
argument_list|)
operator|)
condition|)
block|{
name|child
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Set a property      *      * @return the set property      */
annotation|@
name|Nonnull
specifier|public
name|PropertyDelegate
name|setProperty
parameter_list|(
name|PropertyState
name|propertyState
parameter_list|,
name|boolean
name|exactTypeMatch
parameter_list|,
name|boolean
name|setProtected
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|propertyState
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Type
argument_list|<
name|?
argument_list|>
name|type
init|=
name|propertyState
operator|.
name|getType
argument_list|()
decl_stmt|;
name|PropertyState
name|old
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
operator|&&
name|old
operator|.
name|isArray
argument_list|()
operator|&&
operator|!
name|propertyState
operator|.
name|isArray
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ValueFormatException
argument_list|(
literal|"Can not assign a single value to multi-valued property: "
operator|+
name|propertyState
argument_list|)
throw|;
block|}
if|if
condition|(
name|old
operator|!=
literal|null
operator|&&
operator|!
name|old
operator|.
name|isArray
argument_list|()
operator|&&
name|propertyState
operator|.
name|isArray
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ValueFormatException
argument_list|(
literal|"Can not assign multiple values to single valued property: "
operator|+
name|propertyState
argument_list|)
throw|;
block|}
name|Tree
name|definition
init|=
name|findMatchingPropertyDefinition
argument_list|(
name|getNodeTypes
argument_list|(
name|tree
argument_list|)
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|exactTypeMatch
argument_list|)
decl_stmt|;
if|if
condition|(
name|definition
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
literal|"No matching property definition: "
operator|+
name|propertyState
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|setProtected
operator|&&
name|TreeUtil
operator|.
name|getBoolean
argument_list|(
name|definition
argument_list|,
name|JCR_PROTECTED
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
literal|"Property is protected: "
operator|+
name|propertyState
argument_list|)
throw|;
block|}
name|Type
argument_list|<
name|?
argument_list|>
name|requiredType
init|=
name|Type
operator|.
name|fromString
argument_list|(
name|TreeUtil
operator|.
name|getString
argument_list|(
name|definition
argument_list|,
name|JCR_REQUIREDTYPE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|requiredType
operator|!=
name|Type
operator|.
name|UNDEFINED
condition|)
block|{
if|if
condition|(
name|TreeUtil
operator|.
name|getBoolean
argument_list|(
name|definition
argument_list|,
name|JCR_MULTIPLE
argument_list|)
condition|)
block|{
name|requiredType
operator|=
name|requiredType
operator|.
name|getArrayType
argument_list|()
expr_stmt|;
block|}
name|ValueHelper
operator|.
name|checkSupportedConversion
argument_list|(
name|propertyState
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
argument_list|,
name|requiredType
operator|.
name|tag
argument_list|()
argument_list|)
expr_stmt|;
name|propertyState
operator|=
name|PropertyStates
operator|.
name|convert
argument_list|(
name|propertyState
argument_list|,
name|requiredType
argument_list|)
expr_stmt|;
block|}
name|tree
operator|.
name|setProperty
argument_list|(
name|propertyState
argument_list|)
expr_stmt|;
return|return
operator|new
name|PropertyDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|tree
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/**      * Returns the type nodes of the primary and mixin types of the given node.      *      * @param tree node      * @return primary and mixin type nodes      */
specifier|private
name|List
argument_list|<
name|Tree
argument_list|>
name|getNodeTypes
parameter_list|(
name|Tree
name|tree
parameter_list|)
block|{
name|Root
name|root
init|=
name|sessionDelegate
operator|.
name|getRoot
argument_list|()
decl_stmt|;
return|return
name|getNodeTypes
argument_list|(
name|tree
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|Tree
argument_list|>
name|getNodeTypes
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|Tree
name|typeRoot
parameter_list|)
block|{
comment|// Find applicable node types
name|List
argument_list|<
name|Tree
argument_list|>
name|types
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|String
name|primaryName
init|=
name|TreeUtil
operator|.
name|getName
argument_list|(
name|tree
argument_list|,
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|primaryName
operator|==
literal|null
condition|)
block|{
name|primaryName
operator|=
name|NT_BASE
expr_stmt|;
block|}
name|types
operator|.
name|add
argument_list|(
name|typeRoot
operator|.
name|getChild
argument_list|(
name|primaryName
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|mixinName
range|:
name|TreeUtil
operator|.
name|getNames
argument_list|(
name|tree
argument_list|,
name|JCR_MIXINTYPES
argument_list|)
control|)
block|{
name|types
operator|.
name|add
argument_list|(
name|typeRoot
operator|.
name|getChild
argument_list|(
name|mixinName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|types
return|;
block|}
specifier|private
name|boolean
name|isNodeType
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
return|return
name|isNodeType
argument_list|(
name|tree
argument_list|,
name|typeName
argument_list|,
name|sessionDelegate
operator|.
name|getRoot
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isNodeType
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|String
name|typeName
parameter_list|,
name|Root
name|root
parameter_list|)
block|{
return|return
name|TreeUtil
operator|.
name|isNodeType
argument_list|(
name|tree
argument_list|,
name|typeName
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Tree
name|findMatchingPropertyDefinition
parameter_list|(
name|List
argument_list|<
name|Tree
argument_list|>
name|types
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Type
argument_list|<
name|?
argument_list|>
name|propertyType
parameter_list|,
name|boolean
name|exactTypeMatch
parameter_list|)
block|{
comment|// Escape the property name for looking up a matching definition
name|String
name|escapedName
decl_stmt|;
if|if
condition|(
name|JCR_PRIMARYTYPE
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|escapedName
operator|=
name|NodeTypeConstants
operator|.
name|REP_PRIMARY_TYPE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JCR_MIXINTYPES
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|escapedName
operator|=
name|NodeTypeConstants
operator|.
name|REP_MIXIN_TYPES
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JCR_UUID
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|escapedName
operator|=
name|NodeTypeConstants
operator|.
name|REP_UUID
expr_stmt|;
block|}
else|else
block|{
name|escapedName
operator|=
name|propertyName
expr_stmt|;
block|}
name|String
name|definedType
init|=
name|propertyType
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|undefinedType
init|=
name|UNDEFINED
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyType
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|undefinedType
operator|=
name|UNDEFINEDS
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// First look for a matching named property definition
name|Tree
name|fuzzyMatch
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Tree
name|type
range|:
name|types
control|)
block|{
name|Tree
name|definitions
init|=
name|type
operator|.
name|getChild
argument_list|(
name|REP_NAMED_PROPERTY_DEFINITIONS
argument_list|)
operator|.
name|getChild
argument_list|(
name|escapedName
argument_list|)
decl_stmt|;
name|Tree
name|definition
init|=
name|definitions
operator|.
name|getChild
argument_list|(
name|definedType
argument_list|)
decl_stmt|;
if|if
condition|(
name|definition
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|definition
return|;
block|}
name|definition
operator|=
name|definitions
operator|.
name|getChild
argument_list|(
name|undefinedType
argument_list|)
expr_stmt|;
if|if
condition|(
name|definition
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|definition
return|;
block|}
for|for
control|(
name|Tree
name|def
range|:
name|definitions
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|propertyType
operator|.
name|isArray
argument_list|()
operator|==
name|TreeUtil
operator|.
name|getBoolean
argument_list|(
name|def
argument_list|,
name|JCR_MULTIPLE
argument_list|)
condition|)
block|{
if|if
condition|(
name|getBoolean
argument_list|(
name|def
argument_list|,
name|JCR_PROTECTED
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
comment|// no fuzzy matches for protected items
block|}
elseif|else
if|if
condition|(
operator|!
name|exactTypeMatch
operator|&&
name|fuzzyMatch
operator|==
literal|null
condition|)
block|{
name|fuzzyMatch
operator|=
name|def
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Then look through any residual property definitions
for|for
control|(
name|Tree
name|type
range|:
name|types
control|)
block|{
name|Tree
name|definitions
init|=
name|type
operator|.
name|getChild
argument_list|(
name|REP_RESIDUAL_PROPERTY_DEFINITIONS
argument_list|)
decl_stmt|;
name|Tree
name|definition
init|=
name|definitions
operator|.
name|getChild
argument_list|(
name|definedType
argument_list|)
decl_stmt|;
if|if
condition|(
name|definition
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|definition
return|;
block|}
name|definition
operator|=
name|definitions
operator|.
name|getChild
argument_list|(
name|undefinedType
argument_list|)
expr_stmt|;
if|if
condition|(
name|definition
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|definition
return|;
block|}
if|if
condition|(
operator|!
name|exactTypeMatch
operator|&&
name|fuzzyMatch
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Tree
name|def
range|:
name|definitions
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|propertyType
operator|.
name|isArray
argument_list|()
operator|==
name|TreeUtil
operator|.
name|getBoolean
argument_list|(
name|def
argument_list|,
name|JCR_MULTIPLE
argument_list|)
condition|)
block|{
name|fuzzyMatch
operator|=
name|def
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|fuzzyMatch
return|;
block|}
specifier|private
name|Tree
name|findMatchingChildNodeDefinition
parameter_list|(
name|List
argument_list|<
name|Tree
argument_list|>
name|types
parameter_list|,
name|String
name|childNodeName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|typeNames
parameter_list|)
block|{
comment|// First look for a matching named property definition
for|for
control|(
name|Tree
name|type
range|:
name|types
control|)
block|{
name|Tree
name|definitions
init|=
name|type
operator|.
name|getChild
argument_list|(
name|REP_NAMED_CHILD_NODE_DEFINITIONS
argument_list|)
operator|.
name|getChild
argument_list|(
name|childNodeName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|typeName
range|:
name|typeNames
control|)
block|{
name|Tree
name|definition
init|=
name|definitions
operator|.
name|getChild
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|definition
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|definition
return|;
block|}
block|}
block|}
comment|// Then look through any residual property definitions
for|for
control|(
name|Tree
name|type
range|:
name|types
control|)
block|{
name|Tree
name|definitions
init|=
name|type
operator|.
name|getChild
argument_list|(
name|REP_RESIDUAL_CHILD_NODE_DEFINITIONS
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|typeName
range|:
name|typeNames
control|)
block|{
name|Tree
name|definition
init|=
name|definitions
operator|.
name|getChild
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|definition
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|definition
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Add a child node      *      * @param name Oak name of the new child node      * @param typeName Oak name of the type of the new child node,      *                 or {@code null} if a default type should be used      * @return the added node or {@code null} if such a node already exists      */
annotation|@
name|CheckForNull
specifier|public
name|NodeDelegate
name|addChild
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|typeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|()
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|hasChild
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Tree
name|typeRoot
init|=
name|sessionDelegate
operator|.
name|getRoot
argument_list|()
operator|.
name|getTree
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
decl_stmt|;
name|Tree
name|child
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|tree
argument_list|,
name|name
argument_list|,
name|typeName
argument_list|,
name|typeRoot
argument_list|,
name|getUserID
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|NodeDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|child
argument_list|)
return|;
block|}
comment|/**      * Remove this node. This operation never succeeds for the root node.      *      * @return {@code true} if the node was removed; {@code false} otherwise.      */
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|()
throws|throws
name|InvalidItemStateException
block|{
return|return
name|getTree
argument_list|()
operator|.
name|remove
argument_list|()
return|;
block|}
comment|/**      * Enables or disabled orderable children on the underlying tree.      *      * @param enable whether to enable or disable orderable children.      */
specifier|public
name|void
name|setOrderableChildren
parameter_list|(
name|boolean
name|enable
parameter_list|)
throws|throws
name|InvalidItemStateException
block|{
name|getTree
argument_list|()
operator|.
name|setOrderableChildren
argument_list|(
name|enable
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks whether this node is locked, either directly or through      * a deep lock on an ancestor.      *      * @return whether this node is locked      */
comment|// FIXME: access to locking status should not depend on access rights (OAK-4234)
specifier|public
name|boolean
name|isLocked
parameter_list|()
block|{
return|return
name|getLock
argument_list|()
operator|!=
literal|null
return|;
block|}
annotation|@
name|CheckForNull
specifier|public
name|NodeDelegate
name|getLock
parameter_list|()
block|{
name|Tree
name|lock
init|=
name|findLock
argument_list|(
name|tree
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|NodeDelegate
name|delegate
init|=
operator|new
name|NodeDelegate
argument_list|(
name|sessionDelegate
argument_list|,
name|lock
argument_list|)
decl_stmt|;
if|if
condition|(
name|delegate
operator|.
name|isNodeType
argument_list|(
name|MIX_LOCKABLE
argument_list|)
condition|)
block|{
return|return
name|delegate
return|;
block|}
elseif|else
if|if
condition|(
name|lock
operator|.
name|isRoot
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|lock
operator|=
name|findLock
argument_list|(
name|lock
operator|.
name|getParent
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|CheckForNull
specifier|private
name|Tree
name|findLock
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|,
name|boolean
name|deep
parameter_list|)
block|{
if|if
condition|(
name|holdsLock
argument_list|(
name|tree
argument_list|,
name|deep
argument_list|)
condition|)
block|{
return|return
name|tree
return|;
block|}
elseif|else
if|if
condition|(
name|tree
operator|.
name|isRoot
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|findLock
argument_list|(
name|tree
operator|.
name|getParent
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
specifier|private
name|boolean
name|holdsLock
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|boolean
name|deep
parameter_list|)
block|{
comment|// FIXME: access to locking status should not depend on access rights (OAK-4234)
name|PropertyState
name|property
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|JCR_LOCKISDEEP
argument_list|)
decl_stmt|;
return|return
name|property
operator|!=
literal|null
operator|&&
name|property
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BOOLEAN
operator|&&
operator|(
operator|!
name|deep
operator|||
name|property
operator|.
name|getValue
argument_list|(
name|BOOLEAN
argument_list|)
operator|)
return|;
block|}
annotation|@
name|CheckForNull
specifier|private
name|Tree
name|findDescendantLock
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|)
block|{
for|for
control|(
name|Tree
name|child
range|:
name|tree
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|holdsLock
argument_list|(
name|child
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return
name|child
return|;
block|}
else|else
block|{
name|Tree
name|desc
init|=
name|findDescendantLock
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
return|return
name|desc
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Checks whether this node holds a lock.      *      * @param deep if {@code true}, only check for deep locks      * @return whether this node holds a lock      */
specifier|public
name|boolean
name|holdsLock
parameter_list|(
name|boolean
name|deep
parameter_list|)
block|{
return|return
name|holdsLock
argument_list|(
name|tree
argument_list|,
name|deep
argument_list|)
operator|&&
name|isNodeType
argument_list|(
name|MIX_LOCKABLE
argument_list|)
return|;
block|}
specifier|public
name|String
name|getLockOwner
parameter_list|()
block|{
name|PropertyState
name|property
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|JCR_LOCKOWNER
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
operator|&&
name|property
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|STRING
condition|)
block|{
return|return
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|boolean
name|isLockOwner
parameter_list|(
name|String
name|user
parameter_list|)
block|{
return|return
name|user
operator|!=
literal|null
operator|&&
name|user
operator|.
name|equals
argument_list|(
name|getLockOwner
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|lock
parameter_list|(
name|boolean
name|isDeep
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
name|Root
name|root
init|=
name|sessionDelegate
operator|.
name|getContentSession
argument_list|()
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tree
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ItemNotFoundException
argument_list|(
literal|"Node "
operator|+
name|path
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isNodeType
argument_list|(
name|tree
argument_list|,
name|MIX_LOCKABLE
argument_list|,
name|root
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Node "
operator|+
name|path
operator|+
literal|" is not lockable"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|tree
operator|.
name|hasProperty
argument_list|(
name|JCR_LOCKISDEEP
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Node "
operator|+
name|path
operator|+
literal|" is already locked"
argument_list|)
throw|;
block|}
comment|// look for locked ancestor
name|Tree
name|inheritedLock
init|=
name|findLock
argument_list|(
name|tree
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|inheritedLock
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Node already indirectly locked by "
operator|+
name|inheritedLock
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
comment|// scan for locked descendant
if|if
condition|(
name|isDeep
condition|)
block|{
name|Tree
name|descendantLock
init|=
name|findDescendantLock
argument_list|(
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
name|descendantLock
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Lock conflicts with lock hold by "
operator|+
name|descendantLock
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|String
name|owner
init|=
name|sessionDelegate
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
decl_stmt|;
if|if
condition|(
name|owner
operator|==
literal|null
condition|)
block|{
name|owner
operator|=
literal|""
expr_stmt|;
block|}
name|tree
operator|.
name|setProperty
argument_list|(
name|JCR_LOCKISDEEP
argument_list|,
name|isDeep
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
name|JCR_LOCKOWNER
argument_list|,
name|owner
argument_list|)
expr_stmt|;
name|sessionDelegate
operator|.
name|commit
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isAccessViolation
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Access denied to lock node "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Unable to lock node "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|unlock
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
name|Root
name|root
init|=
name|sessionDelegate
operator|.
name|getContentSession
argument_list|()
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tree
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ItemNotFoundException
argument_list|(
literal|"Node "
operator|+
name|path
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isNodeType
argument_list|(
name|tree
argument_list|,
name|MIX_LOCKABLE
argument_list|,
name|root
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Node "
operator|+
name|path
operator|+
literal|" is not lockable"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|tree
operator|.
name|hasProperty
argument_list|(
name|JCR_LOCKISDEEP
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Node "
operator|+
name|path
operator|+
literal|" is not locked"
argument_list|)
throw|;
block|}
try|try
block|{
name|tree
operator|.
name|removeProperty
argument_list|(
name|JCR_LOCKISDEEP
argument_list|)
expr_stmt|;
name|tree
operator|.
name|removeProperty
argument_list|(
name|JCR_LOCKOWNER
argument_list|)
expr_stmt|;
name|sessionDelegate
operator|.
name|commit
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isAccessViolation
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Access denied to unlock node "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Unable to unlock node "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toStringHelper
argument_list|(
name|this
argument_list|)
operator|.
name|add
argument_list|(
literal|"tree"
argument_list|,
name|tree
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//------------------------------------------------------------< internal>---
annotation|@
name|Nonnull
comment|// FIXME this should be package private. OAK-672
specifier|public
name|Tree
name|getTree
parameter_list|()
throws|throws
name|InvalidItemStateException
block|{
if|if
condition|(
operator|!
name|tree
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidItemStateException
argument_list|(
literal|"Item is stale "
operator|+
name|tree
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|tree
return|;
block|}
comment|// -----------------------------------------------------------< private>---
specifier|private
name|Tree
name|getTree
parameter_list|(
name|String
name|relPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|relPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Not a relative path: "
operator|+
name|relPath
argument_list|)
throw|;
block|}
return|return
name|TreeUtil
operator|.
name|getTree
argument_list|(
name|tree
argument_list|,
name|relPath
argument_list|)
return|;
block|}
specifier|private
name|String
name|getUserID
parameter_list|()
block|{
return|return
name|sessionDelegate
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
return|;
block|}
block|}
end_class

end_unit

