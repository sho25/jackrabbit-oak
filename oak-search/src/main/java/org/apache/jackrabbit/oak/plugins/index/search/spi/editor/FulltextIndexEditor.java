begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|spi
operator|.
name|editor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|PropertyUpdateCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|filter
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|concat
import|;
end_import

begin_comment
comment|/**  * Generic implementation of an {@link IndexEditor} which supports index time aggregation.  */
end_comment

begin_class
specifier|public
class|class
name|FulltextIndexEditor
parameter_list|<
name|D
parameter_list|>
implements|implements
name|IndexEditor
implements|,
name|Aggregate
operator|.
name|AggregateRoot
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FulltextIndexEditor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEXT_EXTRACTION_ERROR
init|=
literal|"TextExtractionError"
decl_stmt|;
specifier|private
specifier|final
name|FulltextIndexEditorContext
argument_list|<
name|D
argument_list|>
name|context
decl_stmt|;
comment|/** Name of this node, or {@code null} for the root node. */
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|/** Parent editor or {@code null} if this is the root editor. */
specifier|private
specifier|final
name|FulltextIndexEditor
name|parent
decl_stmt|;
comment|/** Path of this editor, built lazily in {@link #getPath()}. */
specifier|private
name|String
name|path
decl_stmt|;
specifier|private
name|boolean
name|propertiesChanged
init|=
literal|false
decl_stmt|;
specifier|private
name|List
argument_list|<
name|PropertyState
argument_list|>
name|propertiesModified
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|/**    * Flag indicating if the current tree being traversed has a deleted parent.    */
specifier|private
specifier|final
name|boolean
name|isDeleted
decl_stmt|;
specifier|private
name|IndexDefinition
operator|.
name|IndexingRule
name|indexingRule
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Aggregate
operator|.
name|Matcher
argument_list|>
name|currentMatchers
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|MatcherState
name|matcherState
decl_stmt|;
specifier|private
specifier|final
name|PathFilter
operator|.
name|Result
name|pathFilterResult
decl_stmt|;
name|FulltextIndexEditor
parameter_list|(
name|FulltextIndexEditorContext
argument_list|<
name|D
argument_list|>
name|context
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|this
operator|.
name|parent
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|path
operator|=
literal|"/"
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|isDeleted
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|matcherState
operator|=
name|MatcherState
operator|.
name|NONE
expr_stmt|;
name|this
operator|.
name|pathFilterResult
operator|=
name|context
operator|.
name|getDefinition
argument_list|()
operator|.
name|getPathFilter
argument_list|()
operator|.
name|filter
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FulltextIndexEditor
parameter_list|(
name|FulltextIndexEditor
argument_list|<
name|D
argument_list|>
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|MatcherState
name|matcherState
parameter_list|,
name|PathFilter
operator|.
name|Result
name|pathFilterResult
parameter_list|,
name|boolean
name|isDeleted
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|path
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|parent
operator|.
name|context
expr_stmt|;
name|this
operator|.
name|isDeleted
operator|=
name|isDeleted
expr_stmt|;
name|this
operator|.
name|matcherState
operator|=
name|matcherState
expr_stmt|;
name|this
operator|.
name|pathFilterResult
operator|=
name|pathFilterResult
expr_stmt|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
comment|// => parent != null
name|path
operator|=
name|concat
argument_list|(
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|enter
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
if|if
condition|(
name|EmptyNodeState
operator|.
name|MISSING_NODE
operator|==
name|before
operator|&&
name|parent
operator|==
literal|null
condition|)
block|{
name|context
operator|.
name|enableReindexMode
argument_list|()
expr_stmt|;
block|}
comment|//Only check for indexing if the result is include.
comment|//In case like TRAVERSE nothing needs to be indexed for those
comment|//path
if|if
condition|(
name|pathFilterResult
operator|==
name|PathFilter
operator|.
name|Result
operator|.
name|INCLUDE
condition|)
block|{
comment|//For traversal in deleted sub tree before state has to be used
name|NodeState
name|current
init|=
name|after
operator|.
name|exists
argument_list|()
condition|?
name|after
else|:
name|before
decl_stmt|;
name|indexingRule
operator|=
name|getDefinition
argument_list|()
operator|.
name|getApplicableIndexingRule
argument_list|(
name|current
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexingRule
operator|!=
literal|null
condition|)
block|{
name|currentMatchers
operator|=
name|indexingRule
operator|.
name|getAggregate
argument_list|()
operator|.
name|createMatchers
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|leave
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|propertiesChanged
operator|||
operator|!
name|before
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|addOrUpdate
argument_list|(
name|path
argument_list|,
name|after
argument_list|,
name|before
operator|.
name|exists
argument_list|()
argument_list|)
condition|)
block|{
name|long
name|indexed
init|=
name|context
operator|.
name|incIndexedNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexed
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] => Indexed {} nodes..."
argument_list|,
name|getIndexName
argument_list|()
argument_list|,
name|indexed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Aggregate
operator|.
name|Matcher
name|m
range|:
name|matcherState
operator|.
name|affectedMatchers
control|)
block|{
name|m
operator|.
name|markRootDirty
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|PropertyUpdateCallback
name|callback
init|=
name|context
operator|.
name|getPropertyUpdateCallback
argument_list|()
decl_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|done
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|context
operator|.
name|closeWriter
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|CommitFailedException
name|ce
init|=
operator|new
name|CommitFailedException
argument_list|(
literal|"Fulltext"
argument_list|,
literal|4
argument_list|,
literal|"Failed to close the Fulltext index "
operator|+
name|context
operator|.
name|getIndexingContext
argument_list|()
operator|.
name|getIndexPath
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|context
operator|.
name|getIndexingContext
argument_list|()
operator|.
name|indexUpdateFailed
argument_list|(
name|ce
argument_list|)
expr_stmt|;
throw|throw
name|ce
throw|;
block|}
if|if
condition|(
name|context
operator|.
name|getIndexedNodes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] => Indexed {} nodes, done."
argument_list|,
name|getIndexName
argument_list|()
argument_list|,
name|context
operator|.
name|getIndexedNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
name|markPropertyChanged
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|checkAggregates
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|propertyUpdated
argument_list|(
literal|null
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|markPropertyChanged
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|propertiesModified
operator|.
name|add
argument_list|(
name|before
argument_list|)
expr_stmt|;
name|checkAggregates
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|propertyUpdated
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
name|markPropertyChanged
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|propertiesModified
operator|.
name|add
argument_list|(
name|before
argument_list|)
expr_stmt|;
name|checkAggregates
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|propertyUpdated
argument_list|(
name|before
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|PathFilter
operator|.
name|Result
name|filterResult
init|=
name|getPathFilterResult
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterResult
operator|!=
name|PathFilter
operator|.
name|Result
operator|.
name|EXCLUDE
condition|)
block|{
return|return
operator|new
name|FulltextIndexEditor
argument_list|<>
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|getMatcherState
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
argument_list|,
name|filterResult
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|PathFilter
operator|.
name|Result
name|filterResult
init|=
name|getPathFilterResult
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterResult
operator|!=
name|PathFilter
operator|.
name|Result
operator|.
name|EXCLUDE
condition|)
block|{
return|return
operator|new
name|FulltextIndexEditor
argument_list|<>
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|getMatcherState
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
argument_list|,
name|filterResult
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|PathFilter
operator|.
name|Result
name|filterResult
init|=
name|getPathFilterResult
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterResult
operator|==
name|PathFilter
operator|.
name|Result
operator|.
name|EXCLUDE
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|isDeleted
condition|)
block|{
comment|// tree deletion is handled on the parent node
name|String
name|path
init|=
name|concat
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
try|try
block|{
name|FulltextIndexWriter
name|writer
init|=
name|context
operator|.
name|getWriter
argument_list|()
decl_stmt|;
comment|// Remove all index entries in the removed subtree
name|writer
operator|.
name|deleteDocuments
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|indexUpdate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|CommitFailedException
name|ce
init|=
operator|new
name|CommitFailedException
argument_list|(
literal|"Fulltext"
argument_list|,
literal|5
argument_list|,
literal|"Failed to remove the index entries of"
operator|+
literal|" the removed subtree "
operator|+
name|path
operator|+
literal|"for index "
operator|+
name|context
operator|.
name|getIndexingContext
argument_list|()
operator|.
name|getIndexPath
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|context
operator|.
name|getIndexingContext
argument_list|()
operator|.
name|indexUpdateFailed
argument_list|(
name|ce
argument_list|)
expr_stmt|;
throw|throw
name|ce
throw|;
block|}
block|}
name|MatcherState
name|ms
init|=
name|getMatcherState
argument_list|(
name|name
argument_list|,
name|before
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|FulltextIndexEditor
argument_list|<>
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|ms
argument_list|,
name|filterResult
argument_list|,
literal|true
argument_list|)
return|;
block|}
return|return
literal|null
return|;
comment|// no need to recurse down the removed subtree
block|}
name|FulltextIndexEditorContext
argument_list|<
name|D
argument_list|>
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
specifier|private
name|boolean
name|addOrUpdate
parameter_list|(
name|String
name|path
parameter_list|,
name|NodeState
name|state
parameter_list|,
name|boolean
name|isUpdate
parameter_list|)
throws|throws
name|CommitFailedException
block|{
try|try
block|{
name|D
name|d
init|=
name|makeDocument
argument_list|(
name|path
argument_list|,
name|state
argument_list|,
name|isUpdate
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"[{}] Indexed document for {} is {}"
argument_list|,
name|getIndexName
argument_list|()
argument_list|,
name|path
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|indexUpdate
argument_list|()
expr_stmt|;
name|context
operator|.
name|getWriter
argument_list|()
operator|.
name|updateDocument
argument_list|(
name|path
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|CommitFailedException
name|ce
init|=
operator|new
name|CommitFailedException
argument_list|(
literal|"Fulltext"
argument_list|,
literal|3
argument_list|,
literal|"Failed to index the node "
operator|+
name|path
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|context
operator|.
name|getIndexingContext
argument_list|()
operator|.
name|indexUpdateFailed
argument_list|(
name|ce
argument_list|)
expr_stmt|;
throw|throw
name|ce
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ie
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to index the node [{}]"
argument_list|,
name|path
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|D
name|makeDocument
parameter_list|(
name|String
name|path
parameter_list|,
name|NodeState
name|state
parameter_list|,
name|boolean
name|isUpdate
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isIndexable
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|context
operator|.
name|newDocumentMaker
argument_list|(
name|indexingRule
argument_list|,
name|path
argument_list|)
operator|.
name|makeDocument
argument_list|(
name|state
argument_list|,
name|isUpdate
argument_list|,
name|propertiesModified
argument_list|)
return|;
block|}
comment|//~-------------------------------------------------------< Aggregate>
annotation|@
name|Override
specifier|public
name|void
name|markDirty
parameter_list|()
block|{
name|propertiesChanged
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|MatcherState
name|getMatcherState
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|List
argument_list|<
name|Aggregate
operator|.
name|Matcher
argument_list|>
name|matched
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Aggregate
operator|.
name|Matcher
argument_list|>
name|inherited
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Aggregate
operator|.
name|Matcher
name|m
range|:
name|Iterables
operator|.
name|concat
argument_list|(
name|matcherState
operator|.
name|inherited
argument_list|,
name|currentMatchers
argument_list|)
control|)
block|{
name|Aggregate
operator|.
name|Matcher
name|result
init|=
name|m
operator|.
name|match
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getStatus
argument_list|()
operator|==
name|Aggregate
operator|.
name|Matcher
operator|.
name|Status
operator|.
name|MATCH_FOUND
condition|)
block|{
name|matched
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|getStatus
argument_list|()
operator|!=
name|Aggregate
operator|.
name|Matcher
operator|.
name|Status
operator|.
name|FAIL
condition|)
block|{
name|inherited
operator|.
name|addAll
argument_list|(
name|result
operator|.
name|nextSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|matched
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|inherited
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|MatcherState
argument_list|(
name|matched
argument_list|,
name|inherited
argument_list|)
return|;
block|}
return|return
name|MatcherState
operator|.
name|NONE
return|;
block|}
comment|/**    * Determines which all matchers are affected by this property change    *    * @param name modified property name    */
specifier|private
name|void
name|checkAggregates
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|Aggregate
operator|.
name|Matcher
name|m
range|:
name|matcherState
operator|.
name|matched
control|)
block|{
if|if
condition|(
operator|!
name|matcherState
operator|.
name|affectedMatchers
operator|.
name|contains
argument_list|(
name|m
argument_list|)
operator|&&
name|m
operator|.
name|aggregatesProperty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|matcherState
operator|.
name|affectedMatchers
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
class|class
name|MatcherState
block|{
specifier|final
specifier|static
name|MatcherState
name|NONE
init|=
operator|new
name|MatcherState
argument_list|(
name|Collections
operator|.
expr|<
name|Aggregate
operator|.
name|Matcher
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|Aggregate
operator|.
name|Matcher
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Aggregate
operator|.
name|Matcher
argument_list|>
name|matched
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Aggregate
operator|.
name|Matcher
argument_list|>
name|inherited
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Aggregate
operator|.
name|Matcher
argument_list|>
name|affectedMatchers
decl_stmt|;
specifier|public
name|MatcherState
parameter_list|(
name|List
argument_list|<
name|Aggregate
operator|.
name|Matcher
argument_list|>
name|matched
parameter_list|,
name|List
argument_list|<
name|Aggregate
operator|.
name|Matcher
argument_list|>
name|inherited
parameter_list|)
block|{
name|this
operator|.
name|matched
operator|=
name|matched
expr_stmt|;
name|this
operator|.
name|inherited
operator|=
name|inherited
expr_stmt|;
comment|//Affected matches would only be used when there are
comment|//some matched matchers
if|if
condition|(
name|matched
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|affectedMatchers
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|affectedMatchers
operator|=
name|Sets
operator|.
name|newIdentityHashSet
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|matched
operator|.
name|isEmpty
argument_list|()
operator|&&
name|inherited
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
specifier|private
name|void
name|markPropertyChanged
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|isIndexable
argument_list|()
operator|&&
operator|!
name|propertiesChanged
operator|&&
name|indexingRule
operator|.
name|isIndexed
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|propertiesChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|propertyUpdated
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|PropertyUpdateCallback
name|callback
init|=
name|context
operator|.
name|getPropertyUpdateCallback
argument_list|()
decl_stmt|;
comment|//Avoid further work if no callback is present
if|if
condition|(
name|callback
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|propertyName
init|=
name|before
operator|!=
literal|null
condition|?
name|before
operator|.
name|getName
argument_list|()
else|:
name|after
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|isIndexable
argument_list|()
condition|)
block|{
name|PropertyDefinition
name|pd
init|=
name|indexingRule
operator|.
name|getConfig
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pd
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|propertyUpdated
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|propertyName
argument_list|,
name|pd
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Aggregate
operator|.
name|Matcher
name|m
range|:
name|matcherState
operator|.
name|matched
control|)
block|{
if|if
condition|(
name|m
operator|.
name|aggregatesProperty
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|Aggregate
operator|.
name|Include
name|i
init|=
name|m
operator|.
name|getCurrentInclude
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|instanceof
name|Aggregate
operator|.
name|PropertyInclude
condition|)
block|{
name|PropertyDefinition
name|pd
init|=
operator|(
operator|(
name|Aggregate
operator|.
name|PropertyInclude
operator|)
name|i
operator|)
operator|.
name|getPropertyDefinition
argument_list|()
decl_stmt|;
name|String
name|propertyRelativePath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|m
operator|.
name|getMatchedPath
argument_list|()
argument_list|,
name|propertyName
argument_list|)
decl_stmt|;
name|callback
operator|.
name|propertyUpdated
argument_list|(
name|m
operator|.
name|getRootPath
argument_list|()
argument_list|,
name|propertyRelativePath
argument_list|,
name|pd
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|IndexDefinition
name|getDefinition
parameter_list|()
block|{
return|return
name|context
operator|.
name|getDefinition
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|isIndexable
parameter_list|()
block|{
return|return
name|indexingRule
operator|!=
literal|null
return|;
block|}
specifier|private
name|PathFilter
operator|.
name|Result
name|getPathFilterResult
parameter_list|(
name|String
name|childNodeName
parameter_list|)
block|{
return|return
name|context
operator|.
name|getDefinition
argument_list|()
operator|.
name|getPathFilter
argument_list|()
operator|.
name|filter
argument_list|(
name|concat
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|childNodeName
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|getIndexName
parameter_list|()
block|{
return|return
name|context
operator|.
name|getDefinition
argument_list|()
operator|.
name|getIndexName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

