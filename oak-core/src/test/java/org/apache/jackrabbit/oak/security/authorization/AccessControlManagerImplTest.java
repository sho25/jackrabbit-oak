begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|TestNameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
operator|.
name|ReadWriteNamespaceRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * AccessControlManagerImplTest... TODO  */
end_comment

begin_class
specifier|public
class|class
name|AccessControlManagerImplTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|final
name|String
name|testName
init|=
name|TestNameMapper
operator|.
name|TEST_PREFIX
operator|+
literal|":testRoot"
decl_stmt|;
specifier|final
name|String
name|testPath
init|=
literal|"/"
operator|+
name|testName
decl_stmt|;
name|TestNameMapper
name|nameMapper
decl_stmt|;
name|NamePathMapper
name|npMapper
decl_stmt|;
name|AccessControlManagerImpl
name|acMgr
decl_stmt|;
name|PrivilegeManager
name|privilegeManager
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|NamespaceRegistry
name|nsRegistry
init|=
operator|new
name|ReadWriteNamespaceRegistry
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Root
name|getWriteRoot
parameter_list|()
block|{
return|return
name|root
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Tree
name|getReadTree
parameter_list|()
block|{
return|return
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|nsRegistry
operator|.
name|registerNamespace
argument_list|(
name|TestNameMapper
operator|.
name|TEST_PREFIX
argument_list|,
name|TestNameMapper
operator|.
name|TEST_URI
argument_list|)
expr_stmt|;
name|nameMapper
operator|=
operator|new
name|TestNameMapper
argument_list|(
name|Namespaces
operator|.
name|getNamespaceMap
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|npMapper
operator|=
operator|new
name|NamePathMapperImpl
argument_list|(
name|nameMapper
argument_list|)
expr_stmt|;
name|acMgr
operator|=
name|getAccessControlManager
argument_list|(
name|npMapper
argument_list|)
expr_stmt|;
name|privilegeManager
operator|=
name|getSecurityProvider
argument_list|()
operator|.
name|getPrivilegeConfiguration
argument_list|()
operator|.
name|getPrivilegeManager
argument_list|(
name|root
argument_list|,
name|npMapper
argument_list|)
expr_stmt|;
name|NodeUtil
name|rootNode
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|npMapper
argument_list|)
decl_stmt|;
name|rootNode
operator|.
name|addChild
argument_list|(
name|testName
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|root
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|private
name|AccessControlManagerImpl
name|getAccessControlManager
parameter_list|(
name|NamePathMapper
name|npMapper
parameter_list|)
block|{
return|return
operator|new
name|AccessControlManagerImpl
argument_list|(
name|root
argument_list|,
name|npMapper
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|NamePathMapper
name|getLocalNamePathMapper
parameter_list|()
block|{
name|NameMapper
name|remapped
init|=
operator|new
name|TestNameMapper
argument_list|(
name|nameMapper
argument_list|,
name|TestNameMapper
operator|.
name|LOCAL_MAPPING
argument_list|)
decl_stmt|;
return|return
operator|new
name|NamePathMapperImpl
argument_list|(
name|remapped
argument_list|)
return|;
block|}
specifier|private
name|AccessControlPolicy
name|getApplicablePolicy
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|AccessControlPolicyIterator
name|itr
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|itr
operator|.
name|nextAccessControlPolicy
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"No applicable policy found."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSupportedPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Privilege
argument_list|>
name|allPrivileges
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|privilegeManager
operator|.
name|getRegisteredPrivileges
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|testPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|testPaths
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|testPaths
operator|.
name|add
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|testPaths
operator|.
name|add
argument_list|(
literal|"/jcr:system"
argument_list|)
expr_stmt|;
name|testPaths
operator|.
name|add
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|testPaths
control|)
block|{
name|Privilege
index|[]
name|supported
init|=
name|acMgr
operator|.
name|getSupportedPrivileges
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|supported
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allPrivileges
operator|.
name|size
argument_list|()
argument_list|,
name|supported
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allPrivileges
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|supported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSupportedPrivilegesWithInvalidPath
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|invalid
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"../../jcr:testRoot"
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"jcr:testRoot"
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"./jcr:testRoot"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|invalid
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|getSupportedPrivileges
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expects valid node path, found: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSupportedPrivilegesWithNonExistingPath
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|acMgr
operator|.
name|getSupportedPrivileges
argument_list|(
literal|"/non/existing/node"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Nonexisting node -> PathNotFoundException expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSupportedPrivilegesIncludingPathConversion
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Privilege
argument_list|>
name|allPrivileges
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|privilegeManager
operator|.
name|getRegisteredPrivileges
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|testPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|testPaths
operator|.
name|add
argument_list|(
literal|"/"
operator|+
name|TestNameMapper
operator|.
name|TEST_LOCAL_PREFIX
operator|+
literal|":testRoot"
argument_list|)
expr_stmt|;
name|testPaths
operator|.
name|add
argument_list|(
literal|"/{"
operator|+
name|TestNameMapper
operator|.
name|TEST_URI
operator|+
literal|"}testRoot"
argument_list|)
expr_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|getLocalNamePathMapper
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|testPaths
control|)
block|{
name|Privilege
index|[]
name|supported
init|=
name|acMgr
operator|.
name|getSupportedPrivileges
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|supported
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allPrivileges
operator|.
name|size
argument_list|()
argument_list|,
name|supported
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allPrivileges
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|supported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrivilegeFromName
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Privilege
argument_list|>
name|allPrivileges
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|privilegeManager
operator|.
name|getRegisteredPrivileges
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Privilege
name|privilege
range|:
name|allPrivileges
control|)
block|{
name|Privilege
name|p
init|=
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|privilege
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|privilege
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrivilegeFromExpandedName
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
name|readPriv
init|=
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|readPriv
argument_list|,
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|Privilege
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrivilegeFromInvalidName
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|invalid
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"test:read"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|privilegeName
range|:
name|invalid
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|privilegeName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Invalid privilege name "
operator|+
name|privilegeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrivilegeFromUnknownName
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|invalid
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"unknownPrivilege"
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"{"
operator|+
name|NamespaceRegistry
operator|.
name|NAMESPACE_JCR
operator|+
literal|"}unknown"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|privilegeName
range|:
name|invalid
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|privilegeName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Invalid privilege name "
operator|+
name|privilegeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicablePolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicyIterator
name|itr
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|itr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|AccessControlPolicy
name|policy
init|=
name|itr
operator|.
name|nextAccessControlPolicy
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policy
operator|instanceof
name|ACL
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|ACL
operator|)
name|policy
operator|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicablePoliciesNodeAccessControlled
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicy
name|policy
init|=
name|getApplicablePolicy
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|AccessControlPolicyIterator
name|itr
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|itr
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPoliciesNodeNotAccessControlled
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicy
name|policy
init|=
name|getApplicablePolicy
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policies
index|[
literal|0
index|]
operator|instanceof
name|ACL
argument_list|)
expr_stmt|;
name|ACL
name|acl
init|=
operator|(
name|ACL
operator|)
name|policies
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePolicies
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPolicy
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePolicy
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO
block|}
block|}
end_class

end_unit

