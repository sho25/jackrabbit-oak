begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|inventory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|inventory
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|IndexPrinterTest
block|{
specifier|private
name|AsyncIndexInfoService
name|asyncInfo
init|=
name|mock
argument_list|(
name|AsyncIndexInfoService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|IndexInfoService
name|indexInfo
init|=
name|mock
argument_list|(
name|IndexInfoService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|IndexPrinter
name|printer
init|=
operator|new
name|IndexPrinter
argument_list|(
name|indexInfo
argument_list|,
name|asyncInfo
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|asyncIndexInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|indexInfo
operator|.
name|getAllIndexInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|asyncInfo
operator|.
name|getAsyncLanes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|asList
argument_list|(
literal|"foo-async"
argument_list|,
literal|"bar-async"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|asyncInfo
operator|.
name|getInfo
argument_list|(
literal|"foo-async"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|AsyncIndexInfo
argument_list|(
literal|"foo-async"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|getPrintOutput
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|output
argument_list|,
name|containsString
argument_list|(
literal|"foo-async"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|asyncInfo
operator|.
name|getAsyncLanes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|TestInfo
name|info1
init|=
operator|new
name|TestInfo
argument_list|(
literal|"/oak:index/fooIndex"
argument_list|,
literal|"property"
argument_list|)
decl_stmt|;
name|TestInfo
name|info2
init|=
operator|new
name|TestInfo
argument_list|(
literal|"/oak:index/barIndex"
argument_list|,
literal|"lucene"
argument_list|)
decl_stmt|;
name|info2
operator|.
name|laneName
operator|=
literal|"async"
expr_stmt|;
name|when
argument_list|(
name|indexInfo
operator|.
name|getAllIndexInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|asList
argument_list|(
name|info1
argument_list|,
name|info2
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|getPrintOutput
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|output
argument_list|,
name|containsString
argument_list|(
literal|"/oak:index/fooIndex"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|output
argument_list|,
name|containsString
argument_list|(
literal|"/oak:index/barIndex"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|output
argument_list|,
name|containsString
argument_list|(
literal|"async"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getPrintOutput
parameter_list|()
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|printer
operator|.
name|print
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|,
name|Format
operator|.
name|TEXT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
class|class
name|TestInfo
implements|implements
name|IndexInfo
block|{
specifier|final
name|String
name|indexPath
decl_stmt|;
specifier|final
name|String
name|type
decl_stmt|;
name|String
name|laneName
decl_stmt|;
specifier|private
name|TestInfo
parameter_list|(
name|String
name|indexPath
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|indexPath
operator|=
name|indexPath
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIndexPath
parameter_list|()
block|{
return|return
name|indexPath
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAsyncLaneName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLastUpdatedTime
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getIndexedUpToTime
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getEstimatedEntryCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSizeInBytes
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasIndexDefinitionChangedWithoutReindexing
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIndexDefinitionDiff
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

