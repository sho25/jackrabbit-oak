begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|BasicDocumentStoreTest
extends|extends
name|AbstractDocumentStoreTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BasicDocumentStoreTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|BasicDocumentStoreTest
parameter_list|(
name|DocumentStoreFixture
name|dsf
parameter_list|)
block|{
name|super
argument_list|(
name|dsf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddAndRemove
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testAddAndRemove"
decl_stmt|;
comment|// remove if present
name|NodeDocument
name|nd
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|// add
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxId
parameter_list|()
block|{
comment|// TODO see OAK-1589
name|Assume
operator|.
name|assumeTrue
argument_list|(
operator|!
operator|(
name|super
operator|.
name|ds
operator|instanceof
name|MongoDocumentStore
operator|)
argument_list|)
expr_stmt|;
name|int
name|min
init|=
literal|0
decl_stmt|;
name|int
name|max
init|=
literal|32768
decl_stmt|;
name|int
name|test
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|max
operator|-
name|min
operator|>=
literal|2
condition|)
block|{
name|test
operator|=
operator|(
name|max
operator|+
name|min
operator|)
operator|/
literal|2
expr_stmt|;
name|String
name|id
init|=
name|generateString
argument_list|(
name|test
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
comment|// check that we really can read it
name|NodeDocument
name|findme
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"failed to retrieve previously stored document"
argument_list|,
name|findme
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|min
operator|=
name|test
expr_stmt|;
block|}
else|else
block|{
name|max
operator|=
name|test
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"max id length for "
operator|+
name|super
operator|.
name|dsname
operator|+
literal|" was "
operator|+
name|test
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxProperty
parameter_list|()
block|{
name|int
name|min
init|=
literal|0
decl_stmt|;
name|int
name|max
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|4
decl_stmt|;
comment|// 32M
name|int
name|test
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|max
operator|-
name|min
operator|>=
literal|256
condition|)
block|{
name|test
operator|=
operator|(
name|max
operator|+
name|min
operator|)
operator|/
literal|2
expr_stmt|;
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testMaxProperty-"
operator|+
name|test
decl_stmt|;
name|String
name|pval
init|=
name|generateString
argument_list|(
name|test
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
name|pval
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
comment|// check that we really can read it
name|NodeDocument
name|findme
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"failed to retrieve previously stored document"
argument_list|,
name|findme
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|min
operator|=
name|test
expr_stmt|;
block|}
else|else
block|{
name|max
operator|=
name|test
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"max prop length for "
operator|+
name|super
operator|.
name|dsname
operator|+
literal|" was "
operator|+
name|test
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInterestingPropLengths
parameter_list|()
block|{
name|int
name|lengths
index|[]
init|=
block|{
literal|1
block|,
literal|10
block|,
literal|100
block|,
literal|1000
block|,
literal|2000
block|,
literal|3000
block|,
literal|4000
block|,
literal|5000
block|,
literal|6000
block|,
literal|7000
block|,
literal|8000
block|,
literal|9000
block|,
literal|10000
block|,
literal|11000
block|,
literal|12000
block|,
literal|13000
block|,
literal|14000
block|,
literal|15000
block|,
literal|16000
block|,
literal|20000
block|}
decl_stmt|;
for|for
control|(
name|int
name|test
range|:
name|lengths
control|)
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testInterestingPropLengths-"
operator|+
name|test
decl_stmt|;
name|String
name|pval
init|=
name|generateString
argument_list|(
name|test
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
name|pval
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"failed to insert a document with property of length "
operator|+
name|test
operator|+
literal|"(ASCII) in "
operator|+
name|super
operator|.
name|dsname
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|test
range|:
name|lengths
control|)
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testInterestingPropLengths-"
operator|+
name|test
decl_stmt|;
name|String
name|pval
init|=
name|generateString
argument_list|(
name|test
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
name|pval
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
literal|"failed to insert a document with property of length "
operator|+
name|test
operator|+
literal|"(potentially non-ASCII, actual octet length in UTF-8: "
operator|+
name|pval
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
operator|.
name|length
operator|+
literal|") in "
operator|+
name|super
operator|.
name|dsname
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|// outch
block|}
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteNonExisting
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testDeleteNonExisting-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
comment|// delete is best effort
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteNonExistingMultiple
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testDeleteNonExistingMultiple-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
comment|// create a test node
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
operator|+
literal|"-2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
operator|+
literal|"-2"
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|todelete
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|todelete
operator|.
name|add
argument_list|(
name|id
operator|+
literal|"-2"
argument_list|)
expr_stmt|;
name|todelete
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|todelete
argument_list|)
expr_stmt|;
comment|// id-2 should be removed
name|Document
name|d
init|=
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
operator|+
literal|"-2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|d
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateMultiple
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testUpdateMultiple"
decl_stmt|;
comment|// create a test node
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// update a non-existing one and this one
name|List
argument_list|<
name|String
argument_list|>
name|toupdate
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|toupdate
operator|.
name|add
argument_list|(
name|id
operator|+
literal|"-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
expr_stmt|;
name|toupdate
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|UpdateOp
name|up2
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|up2
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|ds
operator|.
name|update
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|toupdate
argument_list|,
name|up2
argument_list|)
expr_stmt|;
comment|// id should be updated
name|ds
operator|.
name|invalidateCache
argument_list|()
expr_stmt|;
name|Document
name|d
init|=
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|d
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQuery
parameter_list|()
block|{
comment|// create ten documents
name|String
name|base
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testQuery-"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|base
operator|+
name|i
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"document with "
operator|+
name|id
operator|+
literal|" not created"
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|getKeys
argument_list|(
name|ds
operator|.
name|query
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|base
argument_list|,
name|base
operator|+
literal|"A"
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|base
operator|+
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|base
operator|+
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|getKeys
argument_list|(
name|ds
operator|.
name|query
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|base
argument_list|,
name|base
operator|+
literal|"A"
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|base
operator|+
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|base
operator|+
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryBinary
parameter_list|()
block|{
comment|// create ten documents
name|String
name|base
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testQueryBinary-"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|base
operator|+
name|i
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|up
operator|.
name|set
argument_list|(
name|NodeDocument
operator|.
name|HAS_BINARY_FLAG
argument_list|,
name|i
operator|%
literal|2L
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"document with "
operator|+
name|id
operator|+
literal|" not created"
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|getKeys
argument_list|(
name|ds
operator|.
name|query
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|base
argument_list|,
name|base
operator|+
literal|"Z"
argument_list|,
name|NodeDocument
operator|.
name|HAS_BINARY_FLAG
argument_list|,
name|NodeDocument
operator|.
name|HAS_BINARY_VAL
argument_list|,
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|base
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|base
operator|+
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryCollation
parameter_list|()
block|{
comment|// create ten documents
name|String
name|base
init|=
literal|"2:/"
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testQueryCollation"
decl_stmt|;
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|creates
init|=
operator|new
name|ArrayList
argument_list|<
name|UpdateOp
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// test US-ASCII except control characters
for|for
control|(
name|char
name|c
range|:
literal|"!\"#$%&'()*+,-./0123456789:;<=>?@AZ[\\]^_`az{|}~"
operator|.
name|toCharArray
argument_list|()
control|)
block|{
name|String
name|id
init|=
name|base
operator|+
name|c
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|creates
operator|.
name|add
argument_list|(
name|up
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|id
operator|=
name|base
operator|+
literal|"/"
operator|+
name|c
expr_stmt|;
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|creates
operator|.
name|add
argument_list|(
name|up
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|creates
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"documents not created"
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|getKeys
argument_list|(
name|ds
operator|.
name|query
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|base
operator|+
literal|"/"
argument_list|,
name|base
operator|+
literal|"0"
argument_list|,
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|diff
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|diff
operator|.
name|addAll
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|diff
operator|.
name|removeAll
argument_list|(
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|diff
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"unexpected query results (broken collation handling in persistence?): "
operator|+
name|diff
argument_list|)
expr_stmt|;
block|}
name|diff
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|diff
operator|.
name|addAll
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|diff
operator|.
name|removeAll
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|diff
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"missing query results (broken collation handling in persistence?): "
operator|+
name|diff
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"incorrect result ordering in query result (broken collation handling in persistence?)"
argument_list|,
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getKeys
parameter_list|(
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|docs
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeDocument
name|doc
range|:
name|docs
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|doc
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreatePerfSmall
parameter_list|()
block|{
name|createPerf
argument_list|(
literal|16
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreatePerfSmallBatch
parameter_list|()
block|{
name|createPerf
argument_list|(
literal|16
argument_list|,
literal|64
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreatePerfBig
parameter_list|()
block|{
name|createPerf
argument_list|(
literal|32
operator|*
literal|1024
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createPerf
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|amount
parameter_list|)
block|{
name|String
name|pval
init|=
name|generateString
argument_list|(
name|size
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|duration
init|=
literal|1000
decl_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|duration
decl_stmt|;
name|long
name|cnt
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|end
condition|)
block|{
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|ups
init|=
operator|new
name|ArrayList
argument_list|<
name|UpdateOp
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|amount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testCreatePerf-"
operator|+
name|size
operator|+
literal|"-"
operator|+
name|cnt
operator|+
literal|"-"
operator|+
name|i
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
name|pval
argument_list|)
expr_stmt|;
name|ups
operator|.
name|add
argument_list|(
name|up
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|ups
argument_list|)
decl_stmt|;
name|removeMe
operator|.
name|addAll
argument_list|(
name|ids
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"documents with "
operator|+
name|ids
operator|+
literal|" not created"
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|cnt
operator|+=
literal|1
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"document creation with property of size "
operator|+
name|size
operator|+
literal|" and batch size "
operator|+
name|amount
operator|+
literal|" for "
operator|+
name|super
operator|.
name|dsname
operator|+
literal|" was "
operator|+
name|cnt
operator|+
literal|" in "
operator|+
name|duration
operator|+
literal|"ms ("
operator|+
operator|(
name|cnt
operator|/
operator|(
name|duration
operator|/
literal|1000f
operator|)
operator|)
operator|+
literal|"/s)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdatePerfSmall
parameter_list|()
block|{
name|updatePerf
argument_list|(
literal|16
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdatePerfSmallGrowing
parameter_list|()
block|{
name|updatePerf
argument_list|(
literal|16
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdatePerfBig
parameter_list|()
block|{
name|updatePerf
argument_list|(
literal|32
operator|*
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updatePerf
parameter_list|(
name|int
name|size
parameter_list|,
name|boolean
name|growing
parameter_list|)
block|{
name|String
name|pval
init|=
name|generateString
argument_list|(
name|size
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|duration
init|=
literal|1000
decl_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|duration
decl_stmt|;
name|long
name|cnt
init|=
literal|0
decl_stmt|;
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testUpdatePerf"
operator|+
operator|(
name|growing
condition|?
literal|"Growing"
else|:
literal|""
operator|)
operator|+
literal|"-"
operator|+
name|size
decl_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|end
condition|)
block|{
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|growing
condition|)
block|{
name|Revision
name|r
init|=
operator|new
name|Revision
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|cnt
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|up
operator|.
name|setMapEntry
argument_list|(
literal|"foo"
argument_list|,
name|r
argument_list|,
name|pval
argument_list|)
expr_stmt|;
name|up
operator|.
name|setMapEntry
argument_list|(
literal|"_commitRoot"
argument_list|,
name|r
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|up
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
name|pval
argument_list|)
expr_stmt|;
block|}
name|NodeDocument
name|old
init|=
name|super
operator|.
name|ds
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
decl_stmt|;
if|if
condition|(
name|cnt
operator|==
literal|0
condition|)
block|{
name|assertNull
argument_list|(
literal|"expect null on create"
argument_list|,
name|old
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
literal|"fail on update "
operator|+
name|cnt
argument_list|,
name|old
argument_list|)
expr_stmt|;
block|}
name|cnt
operator|+=
literal|1
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"document updates with property of size "
operator|+
name|size
operator|+
operator|(
name|growing
condition|?
literal|" (growing)"
else|:
literal|""
operator|)
operator|+
literal|" for "
operator|+
name|super
operator|.
name|dsname
operator|+
literal|" was "
operator|+
name|cnt
operator|+
literal|" in "
operator|+
name|duration
operator|+
literal|"ms ("
operator|+
operator|(
name|cnt
operator|/
operator|(
name|duration
operator|/
literal|1000f
operator|)
operator|)
operator|+
literal|"/s)"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|generateString
parameter_list|(
name|int
name|length
parameter_list|,
name|boolean
name|ascii
parameter_list|)
block|{
name|char
index|[]
name|s
init|=
operator|new
name|char
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|ascii
condition|)
block|{
name|s
index|[
name|i
index|]
operator|=
call|(
name|char
call|)
argument_list|(
literal|32
operator|+
call|(
name|int
call|)
argument_list|(
literal|95
operator|*
name|Math
operator|.
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
index|[
name|i
index|]
operator|=
call|(
name|char
call|)
argument_list|(
literal|32
operator|+
call|(
name|int
call|)
argument_list|(
operator|(
literal|0xd7ff
operator|-
literal|32
operator|)
operator|*
name|Math
operator|.
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|String
argument_list|(
name|s
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPerfUpdateLimit
parameter_list|()
throws|throws
name|SQLException
block|{
name|internalTestPerfUpdateLimit
argument_list|(
literal|"testPerfUpdateLimit"
argument_list|,
literal|"raw row update (set long)"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPerfUpdateLimitString
parameter_list|()
throws|throws
name|SQLException
block|{
name|internalTestPerfUpdateLimit
argument_list|(
literal|"testPerfUpdateLimitString"
argument_list|,
literal|"raw row update (set long/string)"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPerfUpdateLimitStringBlob
parameter_list|()
throws|throws
name|SQLException
block|{
name|internalTestPerfUpdateLimit
argument_list|(
literal|"testPerfUpdateLimitStringBlob"
argument_list|,
literal|"raw row update (set long/string/blob)"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPerfUpdateAppendString
parameter_list|()
throws|throws
name|SQLException
block|{
name|internalTestPerfUpdateLimit
argument_list|(
literal|"testPerfUpdateAppendString"
argument_list|,
literal|"raw row update (append string)"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|internalTestPerfUpdateLimit
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|int
name|mode
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|super
operator|.
name|rdbDataSource
operator|!=
literal|null
condition|)
block|{
name|String
name|key
init|=
name|name
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|String
name|table
init|=
name|DocumentStoreFixture
operator|.
name|TABLEPREFIX
operator|+
literal|"NODES"
decl_stmt|;
comment|// create test node
try|try
block|{
name|connection
operator|=
name|super
operator|.
name|rdbDataSource
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PreparedStatement
name|stmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"insert into "
operator|+
name|table
operator|+
literal|" (ID, MODCOUNT, DATA) values (?, ?, ?)"
argument_list|)
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
comment|// ignored
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// ignored
block|}
block|}
block|}
name|removeMe
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|StringBuffer
name|expect
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"X"
argument_list|)
decl_stmt|;
name|String
name|appendString
init|=
name|generateString
argument_list|(
literal|32
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|duration
init|=
literal|1000
decl_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|duration
decl_stmt|;
name|long
name|cnt
init|=
literal|0
decl_stmt|;
name|byte
name|bdata
index|[]
init|=
operator|new
name|byte
index|[
literal|16384
index|]
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|end
condition|)
block|{
try|try
block|{
name|connection
operator|=
name|super
operator|.
name|rdbDataSource
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
literal|0
condition|)
block|{
name|PreparedStatement
name|stmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"update "
operator|+
name|table
operator|+
literal|" set MODCOUNT = ? where ID = ?"
argument_list|)
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|setLong
argument_list|(
literal|1
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stmt
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
literal|1
condition|)
block|{
name|PreparedStatement
name|stmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"update "
operator|+
name|table
operator|+
literal|" set MODCOUNT = ?, DATA = ? where ID = ?"
argument_list|)
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|setLong
argument_list|(
literal|1
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
literal|"JSON data "
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stmt
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
literal|2
condition|)
block|{
name|PreparedStatement
name|stmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"update "
operator|+
name|table
operator|+
literal|" set MODCOUNT = ?, DATA = ?, BDATA = ? where ID = ?"
argument_list|)
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|setLong
argument_list|(
literal|1
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
literal|"JSON data "
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
expr_stmt|;
name|bdata
index|[
operator|(
name|int
operator|)
name|cnt
operator|%
literal|256
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|cnt
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
literal|"JSON data "
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setBytes
argument_list|(
literal|3
argument_list|,
name|bdata
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stmt
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
literal|3
condition|)
block|{
name|PreparedStatement
name|stmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"update "
operator|+
name|table
operator|+
literal|" set DATA = DATA || ? where ID = ?"
argument_list|)
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|appendString
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stmt
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
name|expect
operator|.
name|append
argument_list|(
name|appendString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|String
name|state
init|=
name|ex
operator|.
name|getSQLState
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"22001"
operator|.
name|equals
argument_list|(
name|state
argument_list|)
comment|/* everybody */
operator|||
operator|(
literal|"72000"
operator|.
name|equals
argument_list|(
name|state
argument_list|)
operator|&&
literal|1489
operator|==
name|ex
operator|.
name|getErrorCode
argument_list|()
operator|)
comment|/* Oracle */
condition|)
block|{
comment|// overflow
name|connection
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|stmt
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"update "
operator|+
name|table
operator|+
literal|" set MODCOUNT = MODCOUNT + 1, DATA = ? where ID = ?"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stmt
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
name|expect
operator|=
operator|new
name|StringBuffer
argument_list|(
literal|"X"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|(
name|ex
operator|)
throw|;
block|}
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|" "
operator|+
name|ex
operator|.
name|getSQLState
argument_list|()
operator|+
literal|" "
operator|+
name|ex
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// ignored
block|}
block|}
block|}
name|cnt
operator|+=
literal|1
expr_stmt|;
block|}
comment|// check persisted values
if|if
condition|(
name|mode
operator|==
literal|3
condition|)
block|{
try|try
block|{
name|connection
operator|=
name|super
operator|.
name|rdbDataSource
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PreparedStatement
name|stmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"select DATA, MODCOUNT from "
operator|+
name|table
operator|+
literal|" where ID = ?"
argument_list|)
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|got
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|long
name|modc
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"column reset "
operator|+
name|modc
operator|+
literal|" times"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expect
operator|.
name|toString
argument_list|()
argument_list|,
name|got
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// ignored
block|}
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|desc
operator|+
literal|" for "
operator|+
name|super
operator|.
name|dsname
operator|+
literal|" was "
operator|+
name|cnt
operator|+
literal|" in "
operator|+
name|duration
operator|+
literal|"ms ("
operator|+
operator|(
name|cnt
operator|/
operator|(
name|duration
operator|/
literal|1000f
operator|)
operator|)
operator|+
literal|"/s)"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

