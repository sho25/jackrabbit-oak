begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *   Licensed to the Apache Software Foundation (ASF) under one  *   or more contributor license agreements.  See the NOTICE file  *   distributed with this work for additional information  *   regarding copyright ownership.  The ASF licenses this file  *   to you under the Apache License, Version 2.0 (the  *   "License"); you may not use this file except in compliance  *   with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *   Unless required by applicable law or agreed to in writing,  *   software distributed under the License is distributed on an  *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *   KIND, either express or implied.  See the License for the  *   specific language governing permissions and limitations  *   under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|ldap
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|constants
operator|.
name|SchemaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|exception
operator|.
name|LdapException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|name
operator|.
name|Dn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|LdapConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|LdapConnectionConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|PoolableLdapConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A factory for creating LdapConnection objects managed by LdapConnectionPool.  *  * @author<a href="mailto:dev@directory.apache.org">Apache Directory Project</a>  */
end_comment

begin_class
specifier|public
class|class
name|OakPoolableLdapConnectionFactory
extends|extends
name|PoolableLdapConnectionFactory
block|{
comment|/**      * the logger      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OakPoolableLdapConnectionFactory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * flag controlling the validation behavior      */
specifier|private
name|boolean
name|lookupOnValidate
decl_stmt|;
specifier|public
name|OakPoolableLdapConnectionFactory
parameter_list|(
name|LdapConnectionConfig
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks if a lookup is performed during {@link #validateObject(LdapConnection)}.      * @return {@code true} if a lookup is performed.      */
specifier|public
name|boolean
name|getLookupOnValidate
parameter_list|()
block|{
return|return
name|lookupOnValidate
return|;
block|}
comment|/**      * @see #getLookupOnValidate()      */
specifier|public
name|void
name|setLookupOnValidate
parameter_list|(
name|boolean
name|lookupOnValidate
parameter_list|)
block|{
name|this
operator|.
name|lookupOnValidate
operator|=
name|lookupOnValidate
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|boolean
name|validateObject
parameter_list|(
name|LdapConnection
name|connection
parameter_list|)
block|{
name|boolean
name|valid
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|connection
operator|.
name|isConnected
argument_list|()
condition|)
block|{
if|if
condition|(
name|lookupOnValidate
condition|)
block|{
try|try
block|{
name|valid
operator|=
name|connection
operator|.
name|lookup
argument_list|(
name|Dn
operator|.
name|ROOT_DSE
argument_list|,
name|SchemaConstants
operator|.
name|NO_ATTRIBUTE
argument_list|)
operator|!=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LdapException
name|le
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"error during connection validation: {}"
argument_list|,
name|le
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"validating connection {}: {}"
argument_list|,
name|connection
argument_list|,
name|valid
argument_list|)
expr_stmt|;
return|return
name|valid
return|;
block|}
block|}
end_class

end_unit

