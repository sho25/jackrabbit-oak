begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Kryo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|io
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|io
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|serializers
operator|.
name|MapSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
operator|.
name|DocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
operator|.
name|NodeDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
operator|.
name|Revision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
operator|.
name|StableRevisionComparator
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_class
specifier|public
class|class
name|Serializers
block|{
comment|/**      * The serialization and deserialization logic would need to maintain the order      * of read and writes      */
specifier|public
specifier|static
class|class
name|RevisionSerizlizer
extends|extends
name|Serializer
argument_list|<
name|Revision
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Output
name|o
parameter_list|,
name|Revision
name|r
parameter_list|)
block|{
name|o
operator|.
name|writeLong
argument_list|(
name|r
operator|.
name|getTimestamp
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|o
operator|.
name|writeInt
argument_list|(
name|r
operator|.
name|getCounter
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|o
operator|.
name|writeInt
argument_list|(
name|r
operator|.
name|getClusterId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|o
operator|.
name|writeBoolean
argument_list|(
name|r
operator|.
name|isBranch
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Revision
name|read
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Input
name|i
parameter_list|,
name|Class
argument_list|<
name|Revision
argument_list|>
name|revisionClass
parameter_list|)
block|{
return|return
operator|new
name|Revision
argument_list|(
name|i
operator|.
name|readLong
argument_list|(
literal|true
argument_list|)
argument_list|,
comment|//timestamp
name|i
operator|.
name|readInt
argument_list|(
literal|true
argument_list|)
argument_list|,
comment|//counter
name|i
operator|.
name|readInt
argument_list|(
literal|true
argument_list|)
argument_list|,
comment|//clusterId
name|i
operator|.
name|readBoolean
argument_list|()
comment|//branch
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|NodeDocumentSerializer
extends|extends
name|Serializer
argument_list|<
name|NodeDocument
argument_list|>
block|{
specifier|private
specifier|final
name|DocumentStore
name|documentStore
decl_stmt|;
specifier|public
name|NodeDocumentSerializer
parameter_list|(
name|DocumentStore
name|documentStore
parameter_list|)
block|{
name|this
operator|.
name|documentStore
operator|=
name|documentStore
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Output
name|o
parameter_list|,
name|NodeDocument
name|doc
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|doc
operator|.
name|isSealed
argument_list|()
argument_list|,
literal|"Cannot serialized non seal document [%s]"
argument_list|,
name|doc
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|.
name|writeLong
argument_list|(
name|doc
operator|.
name|getCreated
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|doc
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|o
operator|.
name|writeInt
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//Here assumption is that data has contents of following type
comment|//Primitive wrapper
comment|//NavigableMap of Revision -> Value
for|for
control|(
name|String
name|key
range|:
name|doc
operator|.
name|keySet
argument_list|()
control|)
block|{
name|o
operator|.
name|writeString
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|Object
name|val
init|=
name|doc
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|NavigableMap
condition|)
block|{
name|kryo
operator|.
name|writeClass
argument_list|(
name|o
argument_list|,
name|NavigableMap
operator|.
name|class
argument_list|)
expr_stmt|;
operator|new
name|RevisionedMapSerializer
argument_list|(
name|kryo
argument_list|)
operator|.
name|write
argument_list|(
name|kryo
argument_list|,
name|o
argument_list|,
operator|(
name|Map
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|kryo
operator|.
name|writeClass
argument_list|(
name|o
argument_list|,
name|val
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|writeObject
argument_list|(
name|o
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|NodeDocument
name|read
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Input
name|input
parameter_list|,
name|Class
argument_list|<
name|NodeDocument
argument_list|>
name|nodeDocumentClass
parameter_list|)
block|{
name|long
name|created
init|=
name|input
operator|.
name|readLong
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|int
name|mapSize
init|=
name|input
operator|.
name|readInt
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
operator|new
name|NodeDocument
argument_list|(
name|documentStore
argument_list|,
name|created
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapSize
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|input
operator|.
name|readString
argument_list|()
decl_stmt|;
name|Registration
name|reg
init|=
name|kryo
operator|.
name|readClass
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Object
name|value
decl_stmt|;
if|if
condition|(
name|reg
operator|.
name|getType
argument_list|()
operator|==
name|NavigableMap
operator|.
name|class
condition|)
block|{
name|value
operator|=
operator|new
name|RevisionedMapSerializer
argument_list|(
name|kryo
argument_list|)
operator|.
name|read
argument_list|(
name|kryo
argument_list|,
name|input
argument_list|,
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|kryo
operator|.
name|readObject
argument_list|(
name|input
argument_list|,
name|reg
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|//Seal the doc once all changes done
name|doc
operator|.
name|seal
argument_list|()
expr_stmt|;
return|return
name|doc
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|RevisionedMapSerializer
extends|extends
name|MapSerializer
block|{
specifier|public
name|RevisionedMapSerializer
parameter_list|(
name|Kryo
name|kryo
parameter_list|)
block|{
name|setKeysCanBeNull
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setKeyClass
argument_list|(
name|Revision
operator|.
name|class
argument_list|,
name|kryo
operator|.
name|getSerializer
argument_list|(
name|Revision
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|Map
name|create
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Input
name|input
parameter_list|,
name|Class
argument_list|<
name|Map
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|new
name|TreeMap
argument_list|(
name|StableRevisionComparator
operator|.
name|REVERSE
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

