begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|standby
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|standby
operator|.
name|codec
operator|.
name|Messages
operator|.
name|newGetHeadReq
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelInboundHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|timeout
operator|.
name|ReadTimeoutHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DefaultEventExecutorGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EventExecutorGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|standby
operator|.
name|codec
operator|.
name|RecordIdDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|standby
operator|.
name|codec
operator|.
name|ReplyDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|standby
operator|.
name|store
operator|.
name|CommunicationObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|standby
operator|.
name|store
operator|.
name|StandbyStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|StandbyClientHandler
extends|extends
name|SimpleChannelInboundHandler
argument_list|<
name|RecordId
argument_list|>
implements|implements
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StandbyClientHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|StandbyStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|CommunicationObserver
name|observer
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|running
decl_stmt|;
specifier|private
specifier|final
name|int
name|readTimeoutMs
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|autoClean
decl_stmt|;
specifier|private
name|EventExecutorGroup
name|loaderExecutor
decl_stmt|;
specifier|public
name|StandbyClientHandler
parameter_list|(
specifier|final
name|StandbyStore
name|store
parameter_list|,
name|CommunicationObserver
name|observer
parameter_list|,
name|AtomicBoolean
name|running
parameter_list|,
name|int
name|readTimeoutMs
parameter_list|,
name|boolean
name|autoClean
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|observer
operator|=
name|observer
expr_stmt|;
name|this
operator|.
name|running
operator|=
name|running
expr_stmt|;
name|this
operator|.
name|readTimeoutMs
operator|=
name|readTimeoutMs
expr_stmt|;
name|this
operator|.
name|autoClean
operator|=
name|autoClean
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelActive
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"sending head request"
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|writeAndFlush
argument_list|(
name|newGetHeadReq
argument_list|(
name|this
operator|.
name|observer
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"did send head request"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|channelRead0
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|RecordId
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|setHead
argument_list|(
name|ctx
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|channelReadComplete
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
block|{
name|ctx
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|synchronized
name|void
name|setHead
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|RecordId
name|head
parameter_list|)
block|{
if|if
condition|(
name|store
operator|.
name|getHead
argument_list|()
operator|.
name|getRecordId
argument_list|()
operator|.
name|equals
argument_list|(
name|head
argument_list|)
condition|)
block|{
comment|// all sync'ed up
name|log
operator|.
name|debug
argument_list|(
literal|"no changes on sync."
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"updating current head to "
operator|+
name|head
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|pipeline
argument_list|()
operator|.
name|remove
argument_list|(
name|ReadTimeoutHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|pipeline
argument_list|()
operator|.
name|remove
argument_list|(
name|RecordIdDecoder
operator|.
name|class
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|pipeline
argument_list|()
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
operator|new
name|ReplyDecoder
argument_list|(
name|store
argument_list|)
argument_list|)
expr_stmt|;
name|loaderExecutor
operator|=
operator|new
name|DefaultEventExecutorGroup
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|SegmentLoaderHandler
name|h2
init|=
operator|new
name|SegmentLoaderHandler
argument_list|(
name|store
argument_list|,
name|head
argument_list|,
name|loaderExecutor
argument_list|,
name|this
operator|.
name|observer
operator|.
name|getID
argument_list|()
argument_list|,
name|running
argument_list|,
name|readTimeoutMs
argument_list|,
name|autoClean
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
name|loaderExecutor
argument_list|,
name|h2
argument_list|)
expr_stmt|;
name|h2
operator|.
name|channelActive
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"updating current head finished"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Throwable
name|cause
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception caught, closing channel."
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|loaderExecutor
operator|!=
literal|null
operator|&&
operator|!
name|loaderExecutor
operator|.
name|isShuttingDown
argument_list|()
condition|)
block|{
name|loaderExecutor
operator|.
name|shutdownGracefully
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|syncUninterruptibly
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

