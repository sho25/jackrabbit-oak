begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|IndexSanityCheckerTest
block|{
specifier|private
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|Directory
name|local
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
specifier|private
name|Directory
name|remote
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|validDirs
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|t1
init|=
name|writeFile
argument_list|(
name|local
argument_list|,
literal|"t1"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t1"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|IndexSanityChecker
argument_list|(
literal|"/foo"
argument_list|,
name|local
argument_list|,
name|remote
argument_list|)
operator|.
name|check
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|local
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|remote
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sizeMismatch
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|t1L
init|=
name|writeFile
argument_list|(
name|local
argument_list|,
literal|"t1"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t1R
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t1"
argument_list|,
literal|110
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t2R
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t2"
argument_list|,
literal|120
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t3R
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t3"
argument_list|,
literal|140
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|local
argument_list|,
literal|"t3"
argument_list|,
name|t3R
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|IndexSanityChecker
argument_list|(
literal|"/foo"
argument_list|,
name|local
argument_list|,
name|remote
argument_list|)
operator|.
name|check
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|remote
operator|.
name|fileExists
argument_list|(
literal|"t3"
argument_list|)
argument_list|)
expr_stmt|;
comment|//In case of size mismatch all local files would be removed
name|assertFalse
argument_list|(
name|local
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|local
operator|.
name|fileExists
argument_list|(
literal|"t3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|extraLocalFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|t1L
init|=
name|writeFile
argument_list|(
name|local
argument_list|,
literal|"t1"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t3R
init|=
name|writeFile
argument_list|(
name|remote
argument_list|,
literal|"t3"
argument_list|,
literal|140
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|local
argument_list|,
literal|"t3"
argument_list|,
name|t3R
argument_list|)
expr_stmt|;
operator|new
name|IndexSanityChecker
argument_list|(
literal|"/foo"
argument_list|,
name|local
argument_list|,
name|remote
argument_list|)
operator|.
name|check
argument_list|()
expr_stmt|;
comment|//t1 exist in local but not in remote
comment|//it must be removed
name|assertFalse
argument_list|(
name|local
operator|.
name|fileExists
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
comment|//t3 should remain present
name|assertTrue
argument_list|(
name|remote
operator|.
name|fileExists
argument_list|(
literal|"t3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|writeFile
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
name|randomBytes
argument_list|(
name|rnd
operator|.
name|nextInt
argument_list|(
name|size
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|dir
argument_list|,
name|name
argument_list|,
name|data
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|private
name|void
name|writeFile
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|name
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexOutput
name|o
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|name
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|o
operator|.
name|writeBytes
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|o
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|randomBytes
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|rnd
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
block|}
end_class

end_unit

