begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NoSuchWorkspaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|reference
operator|.
name|ReferenceEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|reference
operator|.
name|ReferenceIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|MongoMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|TypeEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|SecurityProviderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|ConfigurationUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|ClusterPermissionsTest
block|{
specifier|private
name|ContentRepository
name|contentRepository1
decl_stmt|;
specifier|private
name|ContentRepository
name|contentRepository2
decl_stmt|;
specifier|private
name|UserManager
name|userManager1
decl_stmt|;
specifier|private
name|UserManager
name|userManager2
decl_stmt|;
specifier|private
name|AccessControlManager
name|aclMgr1
decl_stmt|;
specifier|private
name|AccessControlManager
name|aclMgr2
decl_stmt|;
specifier|protected
name|NamePathMapper
name|namePathMapper
init|=
name|NamePathMapper
operator|.
name|DEFAULT
decl_stmt|;
specifier|protected
name|SecurityProvider
name|securityProvider1
decl_stmt|;
specifier|protected
name|SecurityProvider
name|securityProvider2
decl_stmt|;
specifier|protected
name|ContentSession
name|adminSession1
decl_stmt|;
specifier|protected
name|ContentSession
name|adminSession2
decl_stmt|;
specifier|protected
name|Root
name|root1
decl_stmt|;
specifier|protected
name|Root
name|root2
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryDocumentStore
name|ds
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|MemoryBlobStore
name|bs
init|=
operator|new
name|MemoryBlobStore
argument_list|()
decl_stmt|;
name|MongoMK
operator|.
name|Builder
name|builder
decl_stmt|;
name|builder
operator|=
operator|new
name|MongoMK
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setDocumentStore
argument_list|(
name|ds
argument_list|)
operator|.
name|setBlobStore
argument_list|(
name|bs
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|MongoMK
name|mk1
init|=
name|builder
operator|.
name|setClusterId
argument_list|(
literal|1
argument_list|)
operator|.
name|open
argument_list|()
decl_stmt|;
name|builder
operator|=
operator|new
name|MongoMK
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setDocumentStore
argument_list|(
name|ds
argument_list|)
operator|.
name|setBlobStore
argument_list|(
name|bs
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|MongoMK
name|mk2
init|=
name|builder
operator|.
name|setClusterId
argument_list|(
literal|2
argument_list|)
operator|.
name|open
argument_list|()
decl_stmt|;
name|Oak
name|oak
init|=
operator|new
name|Oak
argument_list|(
name|mk1
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|ReferenceEditorProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|ReferenceIndexProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|TypeEditorProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
name|securityProvider1
operator|=
operator|new
name|SecurityProviderImpl
argument_list|(
name|getSecurityConfigParameters
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|contentRepository1
operator|=
name|oak
operator|.
name|createContentRepository
argument_list|()
expr_stmt|;
name|adminSession1
operator|=
name|login1
argument_list|(
name|getAdminCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|root1
operator|=
name|adminSession1
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
name|userManager1
operator|=
name|securityProvider1
operator|.
name|getConfiguration
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getUserManager
argument_list|(
name|root1
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
name|aclMgr1
operator|=
name|securityProvider1
operator|.
name|getConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getAccessControlManager
argument_list|(
name|root1
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
name|oak
operator|=
operator|new
name|Oak
argument_list|(
name|mk2
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|ReferenceEditorProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|ReferenceIndexProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|TypeEditorProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
name|securityProvider2
operator|=
operator|new
name|SecurityProviderImpl
argument_list|(
name|getSecurityConfigParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|contentRepository2
operator|=
name|oak
operator|.
name|createContentRepository
argument_list|()
expr_stmt|;
name|adminSession2
operator|=
name|login2
argument_list|(
name|getAdminCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|root2
operator|=
name|adminSession2
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
name|userManager2
operator|=
name|securityProvider2
operator|.
name|getConfiguration
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getUserManager
argument_list|(
name|root2
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
name|aclMgr2
operator|=
name|securityProvider2
operator|.
name|getConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getAccessControlManager
argument_list|(
name|root2
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ConfigurationParameters
name|getSecurityConfigParameters
parameter_list|()
block|{
return|return
name|ConfigurationParameters
operator|.
name|EMPTY
return|;
block|}
specifier|protected
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|ConfigurationUtil
operator|.
name|getDefaultConfiguration
argument_list|(
name|getSecurityConfigParameters
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|ContentSession
name|login1
parameter_list|(
annotation|@
name|Nullable
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|LoginException
throws|,
name|NoSuchWorkspaceException
block|{
return|return
name|contentRepository1
operator|.
name|login
argument_list|(
name|credentials
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|ContentSession
name|login2
parameter_list|(
annotation|@
name|Nullable
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|LoginException
throws|,
name|NoSuchWorkspaceException
block|{
return|return
name|contentRepository2
operator|.
name|login
argument_list|(
name|credentials
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|Credentials
name|getAdminCredentials
parameter_list|()
block|{
name|String
name|adminId
init|=
literal|"admin"
decl_stmt|;
return|return
operator|new
name|SimpleCredentials
argument_list|(
name|adminId
argument_list|,
name|adminId
operator|.
name|toCharArray
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateUser
parameter_list|()
throws|throws
name|Exception
block|{
name|userManager1
operator|.
name|createUser
argument_list|(
literal|"testUser"
argument_list|,
literal|"testUser"
argument_list|)
expr_stmt|;
name|root1
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|root2
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"testUser must exist on 2nd cluster node"
argument_list|,
name|userManager2
operator|.
name|getAuthorizable
argument_list|(
literal|"testUser"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAclPropagation
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|node
init|=
name|root1
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"testNode"
argument_list|)
decl_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:unstructured"
argument_list|)
expr_stmt|;
name|User
name|user1
init|=
name|userManager1
operator|.
name|createUser
argument_list|(
literal|"testUser"
argument_list|,
literal|"testUser"
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl1
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|aclMgr1
argument_list|,
literal|"/testNode"
argument_list|)
decl_stmt|;
name|acl1
operator|.
name|addEntry
argument_list|(
name|user1
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|aclMgr1
argument_list|,
literal|"jcr:all"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|aclMgr1
operator|.
name|setPolicy
argument_list|(
literal|"/testNode"
argument_list|,
name|acl1
argument_list|)
expr_stmt|;
name|root1
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|root2
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|JackrabbitAccessControlList
name|acl2
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|aclMgr2
argument_list|,
literal|"/testNode"
argument_list|)
decl_stmt|;
name|AccessControlEntry
index|[]
name|aces
init|=
name|acl2
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aces
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPermissionPropagation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a "/testNode"
name|Tree
name|node
init|=
name|root1
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"testNode"
argument_list|)
decl_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:unstructured"
argument_list|)
expr_stmt|;
comment|// create 2 users
name|User
name|user1
init|=
name|userManager1
operator|.
name|createUser
argument_list|(
literal|"testUser1"
argument_list|,
literal|"testUser1"
argument_list|)
decl_stmt|;
name|User
name|user2
init|=
name|userManager1
operator|.
name|createUser
argument_list|(
literal|"testUser2"
argument_list|,
literal|"testUser2"
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl1
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|aclMgr1
argument_list|,
literal|"/testNode"
argument_list|)
decl_stmt|;
comment|// deny jcr:all for everyone on /testNode
name|acl1
operator|.
name|addEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|aclMgr1
argument_list|,
literal|"jcr:all"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// allow jcr:read for testUser1 on /testNode
name|acl1
operator|.
name|addEntry
argument_list|(
name|user1
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|aclMgr1
argument_list|,
literal|"jcr:read"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|aclMgr1
operator|.
name|setPolicy
argument_list|(
literal|"/testNode"
argument_list|,
name|acl1
argument_list|)
expr_stmt|;
name|root1
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|root2
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// login with testUser1 and testUser2 (on cluster node 2)
name|ContentSession
name|session1
init|=
name|contentRepository2
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"testUser1"
argument_list|,
literal|"testUser1"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ContentSession
name|session2
init|=
name|contentRepository2
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"testUser2"
argument_list|,
literal|"testUser2"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// testUser1 can read /testNode
name|assertTrue
argument_list|(
name|session1
operator|.
name|getLatestRoot
argument_list|()
operator|.
name|getTree
argument_list|(
literal|"/testNode"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// testUser2 cannot read /testNode
name|assertFalse
argument_list|(
name|session2
operator|.
name|getLatestRoot
argument_list|()
operator|.
name|getTree
argument_list|(
literal|"/testNode"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// now, allow jcr:read also for 'everyone' (on cluster node 1)
name|acl1
operator|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|aclMgr1
argument_list|,
literal|"/testNode"
argument_list|)
expr_stmt|;
name|acl1
operator|.
name|addEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|aclMgr1
argument_list|,
literal|"jcr:read"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|aclMgr1
operator|.
name|setPolicy
argument_list|(
literal|"/testNode"
argument_list|,
name|acl1
argument_list|)
expr_stmt|;
name|root1
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|root2
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// testUser1 can read /testNode
name|assertTrue
argument_list|(
name|session1
operator|.
name|getLatestRoot
argument_list|()
operator|.
name|getTree
argument_list|(
literal|"/testNode"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// testUser2 can also read /testNode
name|assertTrue
argument_list|(
name|session2
operator|.
name|getLatestRoot
argument_list|()
operator|.
name|getTree
argument_list|(
literal|"/testNode"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

