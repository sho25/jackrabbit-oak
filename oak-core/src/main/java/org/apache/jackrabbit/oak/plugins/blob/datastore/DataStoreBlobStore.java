begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|CachingDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalNotification
import|;
end_import

begin_comment
comment|/**  * A {@link BlobStore} implementation which is a compatibility wrapper for  * Jackrabbit {@link DataStore}.  *<p>  * Uses a 2 level cache to improve random read performance.  *   * Caches the {@link InputStream} until fully read or closed. Number of streams  * cached are controlled by the  * {@link DataStoreConfiguration#getStreamCacheSize()} parameter  *   * Also, uses a 16MB bytes[] cache.  *   */
end_comment

begin_class
specifier|public
class|class
name|DataStoreBlobStore
implements|implements
name|GarbageCollectableBlobStore
implements|,
name|Cache
operator|.
name|Backend
argument_list|<
name|DataStoreBlobStore
operator|.
name|LogicalBlockId
argument_list|,
name|DataStoreBlobStore
operator|.
name|Data
argument_list|>
block|{
comment|/**      * Logger instance.      */
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DataStoreBlobStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|BLOCK_SIZE_LIMIT
init|=
literal|40
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_STREAM_CACHE_SIZE
init|=
literal|256
decl_stmt|;
comment|/**      * The size of a block. 128 KB has been found to be as fast as larger      * values, and faster than smaller values. 2 MB results in less files.      */
specifier|private
name|int
name|blockSize
init|=
literal|2
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|/**      * The block cache (16 MB). Caches blocks up to blockSize.      */
specifier|private
name|Cache
argument_list|<
name|LogicalBlockId
argument_list|,
name|Data
argument_list|>
name|blockCache
init|=
name|Cache
operator|.
name|newInstance
argument_list|(
name|this
argument_list|,
literal|16
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
comment|/** The stream cache size. */
specifier|protected
name|int
name|streamCacheSize
decl_stmt|;
comment|/**      * The stream cache caches a number of streams to avoid opening a new stream      * on every random access read.      */
specifier|private
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|InputStream
argument_list|>
name|streamCache
decl_stmt|;
specifier|private
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|fileLengthCache
decl_stmt|;
comment|/** The data store. */
specifier|private
name|DataStore
name|dataStore
decl_stmt|;
comment|/**      * Gets the stream cache size.      *       * @return the stream cache size      */
specifier|protected
name|int
name|getStreamCacheSize
parameter_list|()
block|{
return|return
name|streamCacheSize
return|;
block|}
comment|/**      * Sets the stream cache size.      *       * @param streamCacheSize      *            the new stream cache size      */
specifier|protected
name|void
name|setStreamCacheSize
parameter_list|(
name|int
name|streamCacheSize
parameter_list|)
block|{
name|this
operator|.
name|streamCacheSize
operator|=
name|streamCacheSize
expr_stmt|;
block|}
comment|/**      * Sets the block size.      *       * @param x      *            the new block size      */
specifier|public
specifier|final
name|void
name|setBlockSize
parameter_list|(
specifier|final
name|int
name|x
parameter_list|)
block|{
name|validateBlockSize
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|x
expr_stmt|;
block|}
comment|/**      * Validate block size.      *       * @param x      *            the x      */
specifier|private
specifier|static
name|void
name|validateBlockSize
parameter_list|(
specifier|final
name|int
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|<
name|BLOCK_SIZE_LIMIT
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The minimum size must be bigger "
operator|+
literal|"than a content hash itself; limit = "
operator|+
name|BLOCK_SIZE_LIMIT
argument_list|)
throw|;
block|}
block|}
comment|/**      * Initialized the blob store.      *       * @param dataStore      *            the data store      * @param streamCacheSize      *            the stream cache size      */
specifier|public
name|void
name|init
parameter_list|(
name|DataStore
name|dataStore
parameter_list|)
block|{
if|if
condition|(
name|streamCacheSize
operator|<=
literal|0
condition|)
block|{
name|streamCacheSize
operator|=
name|DEFAULT_STREAM_CACHE_SIZE
expr_stmt|;
block|}
name|streamCache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
name|streamCacheSize
argument_list|)
operator|.
name|removalListener
argument_list|(
operator|new
name|RemovalListener
argument_list|<
name|String
argument_list|,
name|InputStream
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onRemoval
parameter_list|(
name|RemovalNotification
argument_list|<
name|String
argument_list|,
name|InputStream
argument_list|>
name|removal
parameter_list|)
block|{
name|InputStream
name|stream
init|=
name|removal
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|InputStream
argument_list|>
argument_list|()
block|{
specifier|public
name|InputStream
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|loadStream
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fileLengthCache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
name|streamCacheSize
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getBlobLength
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataStore
operator|=
name|dataStore
expr_stmt|;
block|}
comment|/**      * Writes the input stream to the data store.      */
annotation|@
name|Override
specifier|public
name|String
name|writeBlob
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// add the record in the data store
name|DataRecord
name|dataRec
init|=
name|dataStore
operator|.
name|addRecord
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
name|dataRec
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Reads the blob with the given blob id and range.      */
annotation|@
name|Override
specifier|public
name|int
name|readBlob
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|blobId
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|long
name|blobLength
decl_stmt|;
try|try
block|{
name|blobLength
operator|=
name|fileLengthCache
operator|.
name|get
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"File length cache error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|blobLength
operator|=
name|getBlobLength
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"read {"
operator|+
name|blobId
operator|+
literal|"}, {"
operator|+
name|blobLength
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|long
name|position
init|=
name|pos
decl_stmt|;
name|int
name|offset
init|=
name|off
decl_stmt|;
if|if
condition|(
name|position
operator|<
name|blobLength
condition|)
block|{
name|int
name|totalLength
init|=
literal|0
decl_stmt|;
name|long
name|bytesLeft
init|=
operator|(
operator|(
name|position
operator|+
name|length
operator|)
operator|>
name|blobLength
condition|?
name|blobLength
operator|-
name|position
else|:
name|length
operator|)
decl_stmt|;
comment|// Reads all the logical blocks satisfying the required range
while|while
condition|(
name|bytesLeft
operator|>
literal|0
condition|)
block|{
name|long
name|posBlockStart
init|=
name|position
operator|/
name|blockSize
decl_stmt|;
name|int
name|posOffsetInBlock
init|=
call|(
name|int
call|)
argument_list|(
name|position
operator|-
name|posBlockStart
operator|*
name|blockSize
argument_list|)
decl_stmt|;
name|byte
index|[]
name|block
init|=
name|readBlock
argument_list|(
name|blobId
argument_list|,
name|posBlockStart
argument_list|)
decl_stmt|;
name|long
name|bytesToRead
init|=
name|Math
operator|.
name|min
argument_list|(
name|bytesLeft
argument_list|,
name|Math
operator|.
name|min
argument_list|(
operator|(
name|blobLength
operator|-
name|posOffsetInBlock
operator|)
argument_list|,
operator|(
name|blockSize
operator|-
name|posOffsetInBlock
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|block
argument_list|,
name|posOffsetInBlock
argument_list|,
name|buff
argument_list|,
name|offset
argument_list|,
operator|(
name|int
operator|)
name|bytesToRead
argument_list|)
expr_stmt|;
name|position
operator|+=
name|bytesToRead
expr_stmt|;
name|offset
operator|+=
name|bytesToRead
expr_stmt|;
name|totalLength
operator|+=
name|bytesToRead
expr_stmt|;
name|bytesLeft
operator|-=
name|bytesToRead
expr_stmt|;
block|}
return|return
name|totalLength
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Blob read for pos "
operator|+
name|pos
operator|+
literal|","
operator|+
operator|(
name|pos
operator|+
name|length
operator|-
literal|1
operator|)
operator|+
literal|" out of range"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**      * Gets the data store.      *       * @return the data store      */
specifier|public
name|DataStore
name|getDataStore
parameter_list|()
block|{
return|return
name|dataStore
return|;
block|}
comment|/**      * Sets the data store.      *       * @param dataStore      *            the data store      */
specifier|protected
name|void
name|setDataStore
parameter_list|(
name|DataStore
name|dataStore
parameter_list|)
block|{
name|this
operator|.
name|dataStore
operator|=
name|dataStore
expr_stmt|;
block|}
comment|/**      * Load the block to the cache.      */
annotation|@
name|Override
specifier|public
specifier|final
name|Data
name|load
parameter_list|(
specifier|final
name|LogicalBlockId
name|id
parameter_list|)
block|{
name|byte
index|[]
name|data
decl_stmt|;
try|try
block|{
name|data
operator|=
name|readBlockFromBackend
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed to read block from backend, id "
operator|+
name|id
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The block with id "
operator|+
name|id
operator|+
literal|" was not found"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Read from backend (Cache Miss): "
operator|+
name|id
argument_list|)
expr_stmt|;
return|return
operator|new
name|Data
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|/**      * Gets the length of the blob identified by the blobId.      */
annotation|@
name|Override
specifier|public
specifier|final
name|long
name|getBlobLength
parameter_list|(
specifier|final
name|String
name|blobId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|blobId
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
name|Long
name|length
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|dataStore
operator|instanceof
name|CachingDataStore
condition|)
block|{
name|length
operator|=
operator|(
operator|(
name|CachingDataStore
operator|)
name|dataStore
operator|)
operator|.
name|getLength
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|blobId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|length
operator|=
name|dataStore
operator|.
name|getRecord
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|blobId
argument_list|)
argument_list|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
return|return
name|length
return|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not get length of blob for id "
operator|+
name|blobId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads block from backend.      *       * @param id      *            the id      * @return the byte[]      * @throws IOException      *             Signals that an I/O exception has occurred.      */
specifier|private
name|byte
index|[]
name|readBlockFromBackend
parameter_list|(
specifier|final
name|LogicalBlockId
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|StringUtils
operator|.
name|convertBytesToHex
argument_list|(
name|id
operator|.
name|digest
argument_list|)
decl_stmt|;
name|InputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stream
operator|=
name|streamCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error retrieving from stream cache : "
operator|+
name|key
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|block
init|=
operator|new
name|byte
index|[
name|blockSize
index|]
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|read
argument_list|(
name|stream
argument_list|,
name|block
argument_list|,
literal|0
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|stream
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|stream
operator|.
name|available
argument_list|()
operator|<=
literal|0
operator|)
condition|)
block|{
name|streamCache
operator|.
name|invalidate
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|block
return|;
block|}
comment|/**      * Loads the stream from the data store.      *       * @param key      *            the key      * @return the input stream      * @throws IOException      *             Signals that an I/O exception has occurred.      */
specifier|private
name|InputStream
name|loadStream
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stream
operator|=
name|dataStore
operator|.
name|getRecord
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|getStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not read blob for id "
operator|+
name|key
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|stream
return|;
block|}
comment|/**      * Reads block.      *       * @param blobId      *            the blob id      * @param posStart      *            the pos start      * @return the byte[]      * @throws Exception      *             the exception      */
specifier|private
name|byte
index|[]
name|readBlock
parameter_list|(
specifier|final
name|String
name|blobId
parameter_list|,
specifier|final
name|long
name|posStart
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|digest
init|=
name|StringUtils
operator|.
name|convertHexToBytes
argument_list|(
name|blobId
argument_list|)
decl_stmt|;
name|LogicalBlockId
name|id
init|=
operator|new
name|LogicalBlockId
argument_list|(
name|digest
argument_list|,
name|posStart
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to read from cache : "
operator|+
name|blobId
operator|+
literal|", "
operator|+
name|posStart
argument_list|)
expr_stmt|;
return|return
name|blockCache
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|data
return|;
block|}
comment|/**      * Delete all blobs older than.      *       * @param time      *            the time      * @return the int      * @throws Exception      *             the exception      */
specifier|public
name|int
name|deleteAllOlderThan
parameter_list|(
name|long
name|time
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|dataStore
operator|.
name|deleteAllOlderThan
argument_list|(
name|time
argument_list|)
return|;
block|}
comment|/**      * A file is divided into logical chunks. Blocks are small enough to fit in      * memory, so they can be cached.      */
specifier|public
specifier|static
class|class
name|LogicalBlockId
block|{
comment|/** The digest. */
specifier|final
name|byte
index|[]
name|digest
decl_stmt|;
comment|/** The starting pos. */
specifier|final
name|long
name|pos
decl_stmt|;
comment|/**          * Instantiates a new logical block id.          *           * @param digest          *            the digest          * @param pos          *            the starting position of the block          */
name|LogicalBlockId
parameter_list|(
specifier|final
name|byte
index|[]
name|digest
parameter_list|,
specifier|final
name|long
name|pos
parameter_list|)
block|{
name|this
operator|.
name|digest
operator|=
name|digest
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|other
operator|==
literal|null
operator|||
operator|!
operator|(
name|other
operator|instanceof
name|LogicalBlockId
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LogicalBlockId
name|o
init|=
operator|(
name|LogicalBlockId
operator|)
name|other
decl_stmt|;
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|digest
argument_list|,
name|o
operator|.
name|digest
argument_list|)
operator|&&
name|pos
operator|==
name|o
operator|.
name|pos
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|hashCode
argument_list|(
name|digest
argument_list|)
operator|^
call|(
name|int
call|)
argument_list|(
name|pos
operator|>>
literal|32
argument_list|)
operator|^
operator|(
name|int
operator|)
name|pos
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
return|return
name|StringUtils
operator|.
name|convertBytesToHex
argument_list|(
name|digest
argument_list|)
operator|+
literal|"@"
operator|+
name|pos
return|;
block|}
comment|/**          * Gets the digest.          *           * @return the digest          */
specifier|public
specifier|final
name|byte
index|[]
name|getDigest
parameter_list|()
block|{
return|return
name|digest
return|;
block|}
comment|/**          * Gets the starting position.          *           * @return the starting position          */
specifier|public
specifier|final
name|long
name|getPos
parameter_list|()
block|{
return|return
name|pos
return|;
block|}
block|}
comment|/**      * The data for a block.      */
specifier|public
specifier|static
class|class
name|Data
implements|implements
name|Cache
operator|.
name|Value
block|{
comment|/** The data. */
specifier|final
name|byte
index|[]
name|data
decl_stmt|;
comment|/**          * Instantiates a new data.          *           * @param data          *            the data          */
name|Data
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
name|String
name|s
init|=
name|StringUtils
operator|.
name|convertBytesToHex
argument_list|(
name|data
argument_list|)
decl_stmt|;
return|return
name|s
operator|.
name|length
argument_list|()
operator|>
literal|100
condition|?
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
operator|+
literal|".. (len="
operator|+
name|data
operator|.
name|length
operator|+
literal|")"
else|:
name|s
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|int
name|getMemory
parameter_list|()
block|{
return|return
name|data
operator|.
name|length
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|writeBlob
parameter_list|(
name|String
name|tempFileName
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|tempFileName
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|writeBlob
argument_list|(
name|in
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|sweep
parameter_list|()
throws|throws
name|IOException
block|{
comment|// no-op
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startMark
parameter_list|()
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|clearInUse
parameter_list|()
block|{
name|dataStore
operator|.
name|clearInUse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearCache
parameter_list|()
block|{
comment|// no-op
block|}
annotation|@
name|Override
specifier|public
name|long
name|getBlockSizeMin
parameter_list|()
block|{
comment|// no-op
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

