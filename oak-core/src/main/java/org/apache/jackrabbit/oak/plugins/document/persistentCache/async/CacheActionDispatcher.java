begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
operator|.
name|async
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimaps
operator|.
name|index
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_comment
comment|/**  * An asynchronous buffer of the CacheAction objects. The buffer removes  * {@link #ACTIONS_TO_REMOVE} oldest entries if the queue length is larger than  * {@link #MAX_SIZE}.  */
end_comment

begin_class
specifier|public
class|class
name|CacheActionDispatcher
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CacheActionDispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * What's the length of the queue.      */
specifier|static
specifier|final
name|int
name|MAX_SIZE
init|=
literal|1024
decl_stmt|;
comment|/**      * How many actions remove once the queue is longer than {@link #MAX_SIZE}.      */
specifier|static
specifier|final
name|int
name|ACTIONS_TO_REMOVE
init|=
literal|256
decl_stmt|;
specifier|final
name|BlockingQueue
argument_list|<
name|CacheAction
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|queue
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|CacheAction
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|(
name|MAX_SIZE
operator|*
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|isRunning
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|isRunning
condition|)
block|{
try|try
block|{
name|CacheAction
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|action
init|=
name|queue
operator|.
name|poll
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
operator|&&
name|isRunning
condition|)
block|{
name|action
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted the queue.poll()"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|applyInvalidateActions
argument_list|()
expr_stmt|;
block|}
comment|/**      * Stop the processing.      */
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|isRunning
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * Adds the new action and cleans the queue if necessary.      *      * @param action to be added      */
specifier|synchronized
name|void
name|add
parameter_list|(
name|CacheAction
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|action
parameter_list|)
block|{
if|if
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|>=
name|MAX_SIZE
condition|)
block|{
name|cleanTheQueue
argument_list|()
expr_stmt|;
block|}
name|queue
operator|.
name|offer
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
comment|/**      * Clean the queue and add a single invalidate action for all the removed entries.       */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|private
name|void
name|cleanTheQueue
parameter_list|()
block|{
name|List
argument_list|<
name|CacheAction
argument_list|>
name|removed
init|=
name|removeOldest
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|CacheWriteQueue
argument_list|,
name|Collection
argument_list|<
name|CacheAction
argument_list|>
argument_list|>
name|e
range|:
name|groupByOwner
argument_list|(
name|removed
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|CacheWriteQueue
name|owner
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|CacheAction
argument_list|>
name|actions
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|affectedKeys
init|=
name|cancelAll
argument_list|(
name|actions
argument_list|)
decl_stmt|;
name|owner
operator|.
name|addInvalidate
argument_list|(
name|affectedKeys
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Remove {@link #ACTIONS_TO_REMOVE} oldest actions.      *      * @return A list of removed items.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|List
argument_list|<
name|CacheAction
argument_list|>
name|removeOldest
parameter_list|()
block|{
name|List
argument_list|<
name|CacheAction
argument_list|>
name|removed
init|=
operator|new
name|ArrayList
argument_list|<
name|CacheAction
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|>
name|MAX_SIZE
operator|-
name|ACTIONS_TO_REMOVE
condition|)
block|{
name|CacheAction
name|toBeCanceled
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|toBeCanceled
operator|==
literal|null
condition|)
block|{
break|break;
block|}
else|else
block|{
name|removed
operator|.
name|add
argument_list|(
name|toBeCanceled
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|removed
return|;
block|}
comment|/**      * Group passed actions by their owners.      *      * @param actions to be grouped      * @return map in which owner is the key and assigned action list is the value      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
specifier|static
name|Map
argument_list|<
name|CacheWriteQueue
argument_list|,
name|Collection
argument_list|<
name|CacheAction
argument_list|>
argument_list|>
name|groupByOwner
parameter_list|(
name|List
argument_list|<
name|CacheAction
argument_list|>
name|actions
parameter_list|)
block|{
return|return
name|index
argument_list|(
name|actions
argument_list|,
operator|new
name|Function
argument_list|<
name|CacheAction
argument_list|,
name|CacheWriteQueue
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CacheWriteQueue
name|apply
parameter_list|(
name|CacheAction
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getOwner
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|asMap
argument_list|()
return|;
block|}
comment|/**      * Cancel all passed actions.      *      * @param actions to cancel      * @return list of affected keys      */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|private
specifier|static
name|List
argument_list|<
name|Object
argument_list|>
name|cancelAll
parameter_list|(
name|Collection
argument_list|<
name|CacheAction
argument_list|>
name|actions
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|cancelledKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CacheAction
name|action
range|:
name|actions
control|)
block|{
name|action
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|Iterables
operator|.
name|addAll
argument_list|(
name|cancelledKeys
argument_list|,
name|action
operator|.
name|getAffectedKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cancelledKeys
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|void
name|applyInvalidateActions
parameter_list|()
block|{
name|CacheAction
name|action
decl_stmt|;
do|do
block|{
name|action
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
if|if
condition|(
name|action
operator|instanceof
name|InvalidateCacheAction
condition|)
block|{
name|action
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
do|while
condition|(
name|action
operator|!=
literal|null
condition|)
do|;
block|}
block|}
end_class

end_unit

