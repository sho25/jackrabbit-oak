begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|cow
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|COWNodeStoreTest
block|{
specifier|private
name|NodeStore
name|store
decl_stmt|;
specifier|private
name|COWNodeStore
name|cowNodeStore
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createCowNodeStore
parameter_list|()
block|{
name|store
operator|=
operator|new
name|MemoryNodeStore
argument_list|()
expr_stmt|;
name|cowNodeStore
operator|=
operator|new
name|COWNodeStore
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changesInCowMode
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|NodeState
name|root
init|=
name|cowNodeStore
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|cowNodeStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|cowNodeStore
operator|.
name|enableCopyOnWrite
argument_list|()
expr_stmt|;
name|root
operator|=
name|cowNodeStore
operator|.
name|getRoot
argument_list|()
expr_stmt|;
name|builder
operator|=
name|root
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|cowNodeStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|root
operator|=
name|store
operator|.
name|getRoot
argument_list|()
expr_stmt|;
name|builder
operator|=
name|root
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Change introduced before enabling the CoW mode is not available"
argument_list|,
name|cowNodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Change introduced after enabling the CoW mode is not available"
argument_list|,
name|cowNodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Changed introduced to the main store after enabling the CoW mode shouldn't be visible"
argument_list|,
name|cowNodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Change introduced before enabling the CoW mode should be visible is the main store"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Change introduced after enabling the CoW mode shouldn't be visible in the main store"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Change introduced to the main store should be visible"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|cowNodeStore
operator|.
name|disableCopyOnWrite
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Change introduced before enabling the CoW mode is not available"
argument_list|,
name|cowNodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Change introduced in the CoW mode should be dropped after disabling it"
argument_list|,
name|cowNodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Change introduced to the main store should be visible"
argument_list|,
name|cowNodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkpointsInCowMode
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|String
name|checkpoint1
init|=
name|cowNodeStore
operator|.
name|checkpoint
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|of
argument_list|(
literal|"k"
argument_list|,
literal|"v"
argument_list|)
argument_list|)
decl_stmt|;
name|cowNodeStore
operator|.
name|enableCopyOnWrite
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
init|=
name|cowNodeStore
operator|.
name|checkpointInfo
argument_list|(
name|checkpoint1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The checkpoint is not inherited"
argument_list|,
name|of
argument_list|(
literal|"k"
argument_list|,
literal|"v"
argument_list|)
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|NodeState
name|root
init|=
name|cowNodeStore
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|cowNodeStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|String
name|checkpoint2
init|=
name|cowNodeStore
operator|.
name|checkpoint
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|of
argument_list|(
literal|"k"
argument_list|,
literal|"v2"
argument_list|)
argument_list|)
decl_stmt|;
name|info
operator|=
name|cowNodeStore
operator|.
name|checkpointInfo
argument_list|(
name|checkpoint2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The new checkpoint is not available"
argument_list|,
name|of
argument_list|(
literal|"k"
argument_list|,
literal|"v2"
argument_list|)
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The retrieve() doesn't work for the new checkpoint"
argument_list|,
name|cowNodeStore
operator|.
name|retrieve
argument_list|(
name|checkpoint2
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|checkpoint1
argument_list|,
name|checkpoint2
argument_list|)
argument_list|,
name|cowNodeStore
operator|.
name|checkpoints
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The new checkpoint shouldn't be stored in the main store"
argument_list|,
name|store
operator|.
name|checkpointInfo
argument_list|(
name|checkpoint2
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|cowNodeStore
operator|.
name|disableCopyOnWrite
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The new checkpoint should be dropped after disabling the CoW mode"
argument_list|,
name|cowNodeStore
operator|.
name|checkpointInfo
argument_list|(
name|checkpoint2
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

