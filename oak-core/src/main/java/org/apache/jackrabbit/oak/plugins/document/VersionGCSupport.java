begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|VersionGarbageCollector
operator|.
name|VersionGCStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|transform
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|SplitDocType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|getAllDocuments
import|;
end_import

begin_class
specifier|public
class|class
name|VersionGCSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VersionGCSupport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|DocumentStore
name|store
decl_stmt|;
specifier|public
name|VersionGCSupport
parameter_list|(
name|DocumentStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
specifier|public
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|getPossiblyDeletedDocs
parameter_list|(
specifier|final
name|long
name|lastModifiedTime
parameter_list|)
block|{
return|return
name|filter
argument_list|(
name|getAllDocuments
argument_list|(
name|store
argument_list|)
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeDocument
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|wasDeletedOnce
argument_list|()
operator|&&
operator|!
name|input
operator|.
name|hasBeenModifiedSince
argument_list|(
name|lastModifiedTime
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|void
name|deleteSplitDocuments
parameter_list|(
name|Set
argument_list|<
name|SplitDocType
argument_list|>
name|gcTypes
parameter_list|,
name|long
name|oldestRevTimeStamp
parameter_list|,
name|VersionGCStats
name|stats
parameter_list|)
block|{
name|stats
operator|.
name|splitDocGCCount
operator|+=
name|createCleanUp
argument_list|(
name|gcTypes
argument_list|,
name|oldestRevTimeStamp
argument_list|,
name|stats
argument_list|)
comment|// .disconnect() TODO: work in progress
operator|.
name|deleteSplitDocuments
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|SplitDocumentCleanUp
name|createCleanUp
parameter_list|(
name|Set
argument_list|<
name|SplitDocType
argument_list|>
name|gcTypes
parameter_list|,
name|long
name|oldestRevTimeStamp
parameter_list|,
name|VersionGCStats
name|stats
parameter_list|)
block|{
return|return
operator|new
name|SplitDocumentCleanUp
argument_list|(
name|gcTypes
argument_list|,
name|oldestRevTimeStamp
argument_list|,
name|stats
argument_list|)
return|;
block|}
specifier|protected
class|class
name|SplitDocumentCleanUp
block|{
specifier|protected
specifier|final
name|Set
argument_list|<
name|SplitDocType
argument_list|>
name|gcTypes
decl_stmt|;
specifier|protected
specifier|final
name|long
name|oldestRevTimeStamp
decl_stmt|;
specifier|protected
specifier|final
name|VersionGCStats
name|stats
decl_stmt|;
specifier|protected
name|SplitDocumentCleanUp
parameter_list|(
name|Set
argument_list|<
name|SplitDocType
argument_list|>
name|gcTypes
parameter_list|,
name|long
name|oldestRevTimeStamp
parameter_list|,
name|VersionGCStats
name|stats
parameter_list|)
block|{
name|this
operator|.
name|gcTypes
operator|=
name|gcTypes
expr_stmt|;
name|this
operator|.
name|oldestRevTimeStamp
operator|=
name|oldestRevTimeStamp
expr_stmt|;
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
block|}
specifier|protected
name|SplitDocumentCleanUp
name|disconnect
parameter_list|()
block|{
for|for
control|(
name|NodeDocument
name|splitDoc
range|:
name|identifyGarbage
argument_list|()
control|)
block|{
name|disconnect
argument_list|(
name|splitDoc
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|protected
name|int
name|deleteSplitDocuments
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|docsToDelete
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|transform
argument_list|(
name|identifyGarbage
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|NodeDocument
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|NodeDocument
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getId
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|store
operator|.
name|remove
argument_list|(
name|NODES
argument_list|,
name|docsToDelete
argument_list|)
expr_stmt|;
return|return
name|docsToDelete
operator|.
name|size
argument_list|()
return|;
block|}
specifier|protected
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|identifyGarbage
parameter_list|()
block|{
return|return
name|filter
argument_list|(
name|getAllDocuments
argument_list|(
name|store
argument_list|)
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeDocument
name|doc
parameter_list|)
block|{
name|SplitDocType
name|splitType
init|=
name|doc
operator|.
name|getSplitDocType
argument_list|()
decl_stmt|;
return|return
name|gcTypes
operator|.
name|contains
argument_list|(
name|splitType
argument_list|)
operator|&&
name|doc
operator|.
name|hasAllRevisionLessThan
argument_list|(
name|oldestRevTimeStamp
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|protected
name|void
name|disconnect
parameter_list|(
name|NodeDocument
name|splitDoc
parameter_list|)
block|{
name|String
name|splitId
init|=
name|splitDoc
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|mainId
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|splitDoc
operator|.
name|getMainPath
argument_list|()
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|mainId
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Main document {} already removed. Split document is {}"
argument_list|,
name|mainId
argument_list|,
name|splitId
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|slashIdx
init|=
name|splitId
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|int
name|height
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|splitId
operator|.
name|substring
argument_list|(
name|slashIdx
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Revision
name|rev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|splitId
operator|.
name|substring
argument_list|(
name|splitId
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|,
name|slashIdx
operator|-
literal|1
argument_list|)
operator|+
literal|1
argument_list|,
name|slashIdx
argument_list|)
argument_list|)
decl_stmt|;
name|doc
operator|=
name|findReferencingDoc
argument_list|(
name|doc
argument_list|,
name|rev
argument_list|,
name|height
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Split document {} not referenced anymore. Main document is {}"
argument_list|,
name|splitId
argument_list|,
name|mainId
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// remove reference
name|UpdateOp
name|update
init|=
operator|new
name|UpdateOp
argument_list|(
name|doc
operator|.
name|getId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|NodeDocument
operator|.
name|removePrevious
argument_list|(
name|update
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|NodeDocument
name|old
init|=
name|store
operator|.
name|findAndUpdate
argument_list|(
name|NODES
argument_list|,
name|update
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
operator|&&
name|old
operator|.
name|getSplitDocType
argument_list|()
operator|==
name|SplitDocType
operator|.
name|INTERMEDIATE
operator|&&
name|old
operator|.
name|getPreviousRanges
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|old
operator|.
name|getPreviousRanges
argument_list|()
operator|.
name|containsKey
argument_list|(
name|rev
argument_list|)
condition|)
block|{
comment|// this was the last reference on an intermediate split doc
name|disconnect
argument_list|(
name|old
argument_list|)
expr_stmt|;
name|store
operator|.
name|remove
argument_list|(
name|NODES
argument_list|,
name|old
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|intermediateSplitDocGCCount
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|CheckForNull
specifier|protected
name|NodeDocument
name|findReferencingDoc
parameter_list|(
name|NodeDocument
name|current
parameter_list|,
name|Revision
name|revision
parameter_list|,
name|int
name|height
parameter_list|)
block|{
for|for
control|(
name|Range
name|range
range|:
name|current
operator|.
name|getPreviousRanges
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|range
operator|.
name|getHeight
argument_list|()
operator|==
name|height
operator|&&
name|range
operator|.
name|high
operator|.
name|equals
argument_list|(
name|revision
argument_list|)
condition|)
block|{
return|return
name|current
return|;
block|}
elseif|else
if|if
condition|(
name|range
operator|.
name|includes
argument_list|(
name|revision
argument_list|)
condition|)
block|{
name|String
name|prevId
init|=
name|Utils
operator|.
name|getPreviousIdFor
argument_list|(
name|current
operator|.
name|getMainPath
argument_list|()
argument_list|,
name|range
operator|.
name|high
argument_list|,
name|range
operator|.
name|height
argument_list|)
decl_stmt|;
name|NodeDocument
name|prev
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|prevId
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Split document {} does not exist anymore. Main document is {}"
argument_list|,
name|prevId
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|current
operator|.
name|getMainPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// recurse into the split hierarchy
name|NodeDocument
name|doc
init|=
name|findReferencingDoc
argument_list|(
name|prev
argument_list|,
name|revision
argument_list|,
name|height
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
return|return
name|doc
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

