begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FulltextIndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|RowIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|REINDEX_COUNT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TestUtil
operator|.
name|shutdown
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ConstantConditions"
argument_list|)
specifier|public
class|class
name|CompositeNodeStoreLuceneIndexTest
extends|extends
name|CompositeNodeStoreQueryTestBase
block|{
specifier|private
specifier|static
name|String
name|READ_ONLY_MOUNT_V1_NAME
init|=
literal|"readOnlyV1"
decl_stmt|;
specifier|private
specifier|static
name|String
name|READ_ONLY_MOUNT_V2_NAME
init|=
literal|"readOnlyV2"
decl_stmt|;
comment|// JCR repository
specifier|private
name|CompositeRepo
name|repoV1
decl_stmt|;
specifier|private
name|CompositeRepo
name|repoV2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|VERSION_1
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|VERSION_2
init|=
literal|2
decl_stmt|;
specifier|public
name|CompositeNodeStoreLuceneIndexTest
parameter_list|(
name|NodeStoreKind
name|root
parameter_list|,
name|NodeStoreKind
name|mounts
parameter_list|)
block|{
name|super
argument_list|(
name|root
argument_list|,
name|mounts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|initStore
parameter_list|()
throws|throws
name|Exception
block|{
name|globalStore
operator|=
name|register
argument_list|(
name|nodeStoreRoot
operator|.
name|create
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|repoV1
operator|=
operator|new
name|CompositeRepo
argument_list|(
name|READ_ONLY_MOUNT_V1_NAME
argument_list|)
expr_stmt|;
name|repoV1
operator|.
name|initCompositeRepo
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|repoV1
operator|.
name|cleanup
argument_list|()
expr_stmt|;
if|if
condition|(
name|repoV2
operator|!=
literal|null
condition|)
block|{
name|repoV2
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Steps overview -      * Add a new index to composite repo and reindex      * Add the index def in global read write part of composite repo (read write part)      * Add the index def in read only repo      * Add content served by this index in both parts      * Query using composite repo session to see if index is used and results from both parts are returned correctly      * Reindex on composite session      */
annotation|@
name|Test
specifier|public
name|void
name|addLuceneIndexAndReindex
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create indexes in read-only and read write parts of repo
comment|// and content covered by them and check if index is used properly
name|repoV1
operator|.
name|setupIndexAndContentInRepo
argument_list|(
literal|"luceneTest"
argument_list|,
literal|"foo"
argument_list|,
literal|false
argument_list|,
name|VERSION_1
argument_list|)
expr_stmt|;
name|Session
name|s1
init|=
name|repoV1
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Node
name|luceneTest
init|=
name|s1
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"luceneTest"
argument_list|)
decl_stmt|;
name|long
name|reindexCount
init|=
name|luceneTest
operator|.
name|getProperty
argument_list|(
name|REINDEX_COUNT
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getLong
argument_list|()
decl_stmt|;
comment|// Now we reindex and see everything works fine
name|luceneTest
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|s1
operator|.
name|save
argument_list|()
expr_stmt|;
name|long
name|reindexCount2
init|=
name|luceneTest
operator|.
name|getProperty
argument_list|(
name|REINDEX_COUNT
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|reindexCount2
argument_list|,
name|reindexCount
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Given a composite node store , create an index in read-write part      * with the same index node already existing in the read-only part already.      */
annotation|@
name|Test
specifier|public
name|void
name|addIndexInReadWriteWithIndexExistinginReadOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|repoV1
operator|.
name|setupIndexAndContentInRepo
argument_list|(
literal|"luceneTest"
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
name|VERSION_1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|reindexCounterIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|s
init|=
name|repoV1
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Node
name|c
init|=
name|s
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"counter"
argument_list|)
decl_stmt|;
name|c
operator|.
name|setProperty
argument_list|(
literal|"async"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|c
operator|.
name|setProperty
argument_list|(
literal|"resolution"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|c
operator|.
name|setProperty
argument_list|(
literal|"reindex"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|s
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|getProperty
argument_list|(
literal|"reindex"
argument_list|)
operator|.
name|getBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Given a composite jcr repo with a lucene index with indexed data from both read only and read write parts      * We create a V2 of this repo which will have the lucene index removed -      * Expected behaviour - The same query that returned results from both readonly      * and readwrite in V1 should now return      * results - but it would be a traversal query and not use the index .      */
annotation|@
name|Test
specifier|public
name|void
name|removeLuceneIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|repoV1
operator|.
name|setupIndexAndContentInRepo
argument_list|(
literal|"luceneTest"
argument_list|,
literal|"foo"
argument_list|,
literal|false
argument_list|,
name|VERSION_1
argument_list|)
expr_stmt|;
name|repoV2
operator|=
operator|new
name|CompositeRepo
argument_list|(
name|READ_ONLY_MOUNT_V2_NAME
argument_list|)
expr_stmt|;
name|repoV2
operator|.
name|getReadOnlyRoot
argument_list|()
operator|.
name|getNode
argument_list|(
literal|"libs"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"node-foo-0"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|repoV2
operator|.
name|getReadOnlySession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|repoV2
operator|.
name|initCompositeRepo
argument_list|()
expr_stmt|;
comment|// Now we  have a read only V2 setup that doesn't have the lucene index and also doesn't have the
comment|// USE_IF_EXISTS node that would enable the index .
comment|// So now composite repo V2 - this will act as 2nd version of composite app
comment|// This uses same global read write store as used in V1
comment|// Check query traverses - and doesn't use the index available in read-write part
comment|// since it is now disabled as path corresponding to useIfExists property is not present in new read only lib
name|QueryResult
name|result
init|=
name|repoV2
operator|.
name|executeQuery
argument_list|(
literal|"explain /jcr:root//*[@foo = 'bar']"
argument_list|,
literal|"xpath"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"/* traverse \"//*\" where ([a].[foo] = 'bar'"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that proper nodes are returned by the query
comment|// even after traversal from both readonly version 2 and global read write parts
name|result
operator|=
name|repoV2
operator|.
name|executeQuery
argument_list|(
literal|"/jcr:root//*[@foo = 'bar'] order by @jcr:path"
argument_list|,
literal|"xpath"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/content-foo/node-0, /content-foo/node-1, "
operator|+
literal|"/libs/node-foo-0"
argument_list|,
name|getResult
argument_list|(
name|result
argument_list|,
literal|"jcr:path"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now just for sake of completeness - check that the index is still used if we use V1 of composite app.
name|result
operator|=
name|repoV1
operator|.
name|executeQuery
argument_list|(
literal|"explain /jcr:root//*[@foo = 'bar']"
argument_list|,
literal|"xpath"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"/* lucene:luceneTest(/oak:index/luceneTest) foo:bar"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|repoV1
operator|.
name|executeQuery
argument_list|(
literal|"/jcr:root//*[@foo = 'bar'] order by @jcr:path"
argument_list|,
literal|"xpath"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/content-foo/node-0, "
operator|+
literal|"/content-foo/node-1, "
operator|+
literal|"/libs/node-luceneTest-0, "
operator|+
literal|"/libs/node-luceneTest-1, "
operator|+
literal|"/libs/node-luceneTest-2"
argument_list|,
name|getResult
argument_list|(
name|result
argument_list|,
literal|"jcr:path"
argument_list|)
argument_list|)
expr_stmt|;
comment|// At this point we have a V2 of app up and runnin with the index removed .
comment|// We can now close the V1 of the app
comment|// and remove the index defintion from the global repo
name|repoV1
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|repoV2
operator|.
name|getRoot
argument_list|()
operator|.
name|getNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"luceneTest"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|result
operator|=
name|repoV2
operator|.
name|executeQuery
argument_list|(
literal|"explain /jcr:root//*[@foo = 'bar']"
argument_list|,
literal|"xpath"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"/* traverse \"//*\" where ([a].[foo] = 'bar'"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that proper nodes are returned by the query
comment|// even after traversal from both readonly version 2 and global read write parts
name|result
operator|=
name|repoV2
operator|.
name|executeQuery
argument_list|(
literal|"/jcr:root//*[@foo = 'bar'] order by jcr:path"
argument_list|,
literal|"xpath"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/content-foo/node-0, "
operator|+
literal|"/content-foo/node-1, "
operator|+
literal|"/libs/node-foo-0"
argument_list|,
name|getResult
argument_list|(
name|result
argument_list|,
literal|"jcr:path"
argument_list|)
argument_list|)
expr_stmt|;
name|repoV2
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
comment|/**      * Steps Overview -      * Create 2 indexes A and B and corresponding content in V1 app - in both global/composite  and readonly v1 repos      * Create 2 indexes B2 and C in read only v2 - B2 is effective replacement of B and C is a new index .      * Create respective content and new indexes in global repo as well.      * Create a version 2 of composite repo using the new read only repo V2      * Check that B2 and C are NOT used in composite repo V1 and are correctly used in composite repo V2      * Check that A and B are NOT used in composite repo V2 .      */
annotation|@
name|Test
specifier|public
name|void
name|updateLuceneIndex
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create 2 index defintions in Version 1
comment|// A
name|repoV1
operator|.
name|setupIndexAndContentInRepo
argument_list|(
literal|"luceneTest"
argument_list|,
literal|"foo"
argument_list|,
literal|false
argument_list|,
name|VERSION_1
argument_list|)
expr_stmt|;
comment|// B
name|repoV1
operator|.
name|setupIndexAndContentInRepo
argument_list|(
literal|"luceneTest2"
argument_list|,
literal|"foo2"
argument_list|,
literal|false
argument_list|,
name|VERSION_1
argument_list|)
expr_stmt|;
comment|// Now initialize V2 composite Repo
name|repoV2
operator|=
operator|new
name|CompositeRepo
argument_list|(
name|READ_ONLY_MOUNT_V2_NAME
argument_list|)
expr_stmt|;
name|repoV2
operator|.
name|initCompositeRepo
argument_list|()
expr_stmt|;
comment|// Now Create 2 index definitons in Version 2 - one supposed to replace B and one entirely new
comment|// C
name|repoV2
operator|.
name|setupIndexAndContentInRepo
argument_list|(
literal|"luceneTest3"
argument_list|,
literal|"foo3"
argument_list|,
literal|false
argument_list|,
name|VERSION_2
argument_list|)
expr_stmt|;
comment|// B2
name|repoV2
operator|.
name|setupIndexAndContentInRepo
argument_list|(
literal|"luceneTest2_V2"
argument_list|,
literal|"foo2"
argument_list|,
literal|false
argument_list|,
name|VERSION_2
argument_list|)
expr_stmt|;
comment|// Check V2 now uses luceneTest2_V2 for foo2 and no index for foo i.e traversal
name|QueryResult
name|result
init|=
name|repoV2
operator|.
name|executeQuery
argument_list|(
literal|"explain /jcr:root//*[@foo = 'bar']"
argument_list|,
literal|"xpath"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"/* traverse \"//*\" where ([a].[foo] = 'bar'"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that proper nodes are returned by the query
comment|// even after traversal from both readonly version 2 and global read write parts
name|result
operator|=
name|repoV2
operator|.
name|executeQuery
argument_list|(
literal|"/jcr:root//*[@foo = 'bar'] order by @jcr:path"
argument_list|,
literal|"xpath"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/content-foo/node-0, /content-foo/node-1"
argument_list|,
name|getResult
argument_list|(
name|result
argument_list|,
literal|"jcr:path"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Checking for prop foo2 now
name|result
operator|=
name|repoV2
operator|.
name|executeQuery
argument_list|(
literal|"explain /jcr:root//*[@foo2 = 'bar']"
argument_list|,
literal|"xpath"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"/* lucene:luceneTest2_V2(/oak:index/luceneTest2_V2) foo2:bar"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|repoV2
operator|.
name|executeQuery
argument_list|(
literal|"/jcr:root//*[@foo2 = 'bar'] order by @jcr:path"
argument_list|,
literal|"xpath"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/content-foo2/node-0, /content-foo2/node-1, "
operator|+
literal|"/libs/node-luceneTest2_V2-0, "
operator|+
literal|"/libs/node-luceneTest2_V2-1, "
operator|+
literal|"/libs/node-luceneTest2_V2-2"
argument_list|,
name|getResult
argument_list|(
name|result
argument_list|,
literal|"jcr:path"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Checking for foo3 now - new index on V2
name|result
operator|=
name|repoV2
operator|.
name|executeQuery
argument_list|(
literal|"explain /jcr:root//*[@foo3 = 'bar']"
argument_list|,
literal|"xpath"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"/* lucene:luceneTest3(/oak:index/luceneTest3) foo3:bar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that proper nodes are returned by the query
comment|// even after traversal from both readonly version 2 and global read write parts
name|result
operator|=
name|repoV2
operator|.
name|executeQuery
argument_list|(
literal|"/jcr:root//*[@foo3 = 'bar'] order by @jcr:path"
argument_list|,
literal|"xpath"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/content-foo3/node-0, "
operator|+
literal|"/content-foo3/node-1, "
operator|+
literal|"/libs/node-luceneTest3-0, "
operator|+
literal|"/libs/node-luceneTest3-1, "
operator|+
literal|"/libs/node-luceneTest3-2"
argument_list|,
name|getResult
argument_list|(
name|result
argument_list|,
literal|"jcr:path"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now check that the V1 instance still uses B for foo2 , A for foo and traverses for foo3
name|result
operator|=
name|repoV1
operator|.
name|executeQuery
argument_list|(
literal|"explain /jcr:root//*[@foo = 'bar']"
argument_list|,
literal|"xpath"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"/* lucene:luceneTest(/oak:index/luceneTest) foo:bar"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|repoV1
operator|.
name|executeQuery
argument_list|(
literal|"/jcr:root//*[@foo = 'bar'] order by @jcr:path"
argument_list|,
literal|"xpath"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/content-foo/node-0, "
operator|+
literal|"/content-foo/node-1, "
operator|+
literal|"/libs/node-luceneTest-0, "
operator|+
literal|"/libs/node-luceneTest-1, "
operator|+
literal|"/libs/node-luceneTest-2"
argument_list|,
name|getResult
argument_list|(
name|result
argument_list|,
literal|"jcr:path"
argument_list|)
argument_list|)
expr_stmt|;
comment|// foo 2 check
name|result
operator|=
name|repoV1
operator|.
name|executeQuery
argument_list|(
literal|"explain /jcr:root//*[@foo2 = 'bar']"
argument_list|,
literal|"xpath"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"/* lucene:luceneTest2(/oak:index/luceneTest2) foo2:bar"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|repoV1
operator|.
name|executeQuery
argument_list|(
literal|"/jcr:root//*[@foo2 = 'bar'] order by @jcr:path"
argument_list|,
literal|"xpath"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/content-foo2/node-0, "
operator|+
literal|"/content-foo2/node-1, "
operator|+
literal|"/libs/node-luceneTest2-0, "
operator|+
literal|"/libs/node-luceneTest2-1, "
operator|+
literal|"/libs/node-luceneTest2-2"
argument_list|,
name|getResult
argument_list|(
name|result
argument_list|,
literal|"jcr:path"
argument_list|)
argument_list|)
expr_stmt|;
comment|// foo 3 check
name|repoV1
operator|.
name|login
argument_list|()
expr_stmt|;
name|result
operator|=
name|repoV1
operator|.
name|executeQuery
argument_list|(
literal|"explain /jcr:root//*[@foo3 = 'bar']"
argument_list|,
literal|"xpath"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"/* traverse \"//*\" where ([a].[foo3] = 'bar'"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|repoV1
operator|.
name|executeQuery
argument_list|(
literal|"/jcr:root//*[@foo3 = 'bar'] order by @jcr:path"
argument_list|,
literal|"xpath"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/content-foo3/node-0, "
operator|+
literal|"/content-foo3/node-1"
argument_list|,
name|getResult
argument_list|(
name|result
argument_list|,
literal|"jcr:path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|getResult
parameter_list|(
name|QueryResult
name|result
parameter_list|,
name|String
name|propertyName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|RowIterator
name|it
init|=
name|result
operator|.
name|getRows
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|buff
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|it
operator|.
name|nextRow
argument_list|()
operator|.
name|getValue
argument_list|(
name|propertyName
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|Node
name|createLuceneIndex
parameter_list|(
name|JackrabbitSession
name|session
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|property
parameter_list|)
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|n
operator|=
name|n
operator|.
name|addNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|n
operator|.
name|setPrimaryType
argument_list|(
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"compatVersion"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|,
literal|"lucene"
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|FULL_TEXT_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"includePropertyNames"
argument_list|,
operator|new
name|String
index|[]
block|{
name|property
block|}
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
return|return
name|n
return|;
block|}
specifier|private
specifier|static
name|Node
name|addOrGetNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|primaryType
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|parent
operator|.
name|hasNode
argument_list|(
name|path
argument_list|)
condition|?
name|parent
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
else|:
name|parent
operator|.
name|addNode
argument_list|(
name|path
argument_list|,
name|primaryType
argument_list|)
return|;
block|}
specifier|private
class|class
name|CompositeRepo
block|{
specifier|private
name|Repository
name|compositeRepository
decl_stmt|;
specifier|private
name|JackrabbitSession
name|compositeSession
decl_stmt|;
specifier|private
name|Node
name|compositeRoot
decl_stmt|;
specifier|private
name|QueryManager
name|compositeQueryManager
decl_stmt|;
specifier|private
name|NodeStore
name|readOnlyStore
decl_stmt|;
specifier|private
name|Repository
name|readOnlyRepository
decl_stmt|;
specifier|private
name|CompositeNodeStore
name|store
decl_stmt|;
specifier|private
name|MountInfoProvider
name|mip
decl_stmt|;
specifier|private
name|JackrabbitSession
name|readOnlySession
decl_stmt|;
specifier|private
name|Node
name|readOnlyRoot
decl_stmt|;
specifier|private
name|String
name|readOnlyMountName
decl_stmt|;
specifier|private
name|boolean
name|cleanedUp
decl_stmt|;
specifier|public
name|Node
name|getReadOnlyRoot
parameter_list|()
block|{
return|return
name|readOnlyRoot
return|;
block|}
specifier|public
name|JackrabbitSession
name|getReadOnlySession
parameter_list|()
block|{
return|return
name|readOnlySession
return|;
block|}
specifier|public
name|JackrabbitSession
name|getSession
parameter_list|()
block|{
return|return
name|compositeSession
return|;
block|}
specifier|public
name|Node
name|getRoot
parameter_list|()
block|{
return|return
name|compositeRoot
return|;
block|}
specifier|public
name|QueryResult
name|executeQuery
parameter_list|(
name|String
name|statement
parameter_list|,
name|String
name|language
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|compositeQueryManager
operator|.
name|createQuery
argument_list|(
name|statement
argument_list|,
name|language
argument_list|)
operator|.
name|execute
argument_list|()
return|;
block|}
name|CompositeRepo
parameter_list|(
name|String
name|readOnlyMountName
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|readOnlyMountName
operator|=
name|readOnlyMountName
expr_stmt|;
name|this
operator|.
name|readOnlyStore
operator|=
name|register
argument_list|(
name|mounts
operator|.
name|create
argument_list|(
name|readOnlyMountName
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|mip
operator|=
name|Mounts
operator|.
name|newBuilder
argument_list|()
operator|.
name|readOnlyMount
argument_list|(
name|readOnlyMountName
argument_list|,
literal|"/libs"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|initReadOnlySeedRepo
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MountedNodeStore
argument_list|>
name|nonDefaultStores
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|nonDefaultStores
operator|.
name|add
argument_list|(
operator|new
name|MountedNodeStore
argument_list|(
name|this
operator|.
name|mip
operator|.
name|getMountByName
argument_list|(
name|readOnlyMountName
argument_list|)
argument_list|,
name|readOnlyStore
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|=
operator|new
name|CompositeNodeStore
argument_list|(
name|this
operator|.
name|mip
argument_list|,
name|globalStore
argument_list|,
name|nonDefaultStores
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initCompositeRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|compositeRepository
operator|=
name|createJCRRepository
argument_list|(
name|this
operator|.
name|store
argument_list|,
name|this
operator|.
name|mip
argument_list|)
expr_stmt|;
name|compositeSession
operator|=
operator|(
name|JackrabbitSession
operator|)
name|compositeRepository
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|compositeRoot
operator|=
name|compositeSession
operator|.
name|getRootNode
argument_list|()
expr_stmt|;
name|compositeQueryManager
operator|=
name|compositeSession
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initReadOnlySeedRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|readOnlyRepository
operator|=
name|createJCRRepository
argument_list|(
name|readOnlyStore
argument_list|,
name|this
operator|.
name|mip
argument_list|)
expr_stmt|;
name|readOnlySession
operator|=
operator|(
name|JackrabbitSession
operator|)
name|readOnlyRepository
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|readOnlyRoot
operator|=
name|readOnlySession
operator|.
name|getRootNode
argument_list|()
expr_stmt|;
name|Node
name|libs
init|=
name|readOnlyRoot
operator|.
name|addNode
argument_list|(
literal|"libs"
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|libs
operator|.
name|setPrimaryType
argument_list|(
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setupIndexAndContentInRepo
parameter_list|(
name|String
name|indexName
parameter_list|,
name|String
name|indexedProperty
parameter_list|,
name|boolean
name|createIndexInReadOnlyFirst
parameter_list|,
name|int
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|versionProp
init|=
operator|(
name|version
operator|==
name|VERSION_1
operator|)
condition|?
literal|"@v1"
else|:
literal|"@v2"
decl_stmt|;
if|if
condition|(
name|createIndexInReadOnlyFirst
condition|)
block|{
name|setupIndexAndContentInReadOnly
argument_list|(
name|indexName
argument_list|,
name|indexedProperty
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
name|Node
name|indexNode
init|=
name|createLuceneIndex
argument_list|(
name|compositeSession
argument_list|,
name|indexName
argument_list|,
name|indexedProperty
argument_list|)
decl_stmt|;
name|indexNode
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|USE_IF_EXISTS
argument_list|,
literal|"/libs/indexes/"
operator|+
name|indexName
operator|+
literal|"/"
operator|+
name|versionProp
argument_list|)
expr_stmt|;
name|indexNode
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_REFRESH_DEFN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Add some content to read write now
name|Node
name|n1
init|=
name|addOrGetNode
argument_list|(
name|compositeRoot
argument_list|,
literal|"content-"
operator|+
name|indexedProperty
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|n2
init|=
name|addOrGetNode
argument_list|(
name|n1
argument_list|,
literal|"node-"
operator|+
name|i
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|n2
operator|.
name|setProperty
argument_list|(
name|indexedProperty
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|n2
operator|.
name|setPrimaryType
argument_list|(
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
block|}
name|compositeSession
operator|.
name|save
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|createIndexInReadOnlyFirst
condition|)
block|{
name|setupIndexAndContentInReadOnly
argument_list|(
name|indexName
argument_list|,
name|indexedProperty
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
comment|///////////////////////////////////////////////////////////////////////////////////////////
comment|// Need to restart the composite repo after changes done to the read only part - needed for segement node store
comment|// Otherwise the changes in read only repo are not visible to the cached reader.
name|restartRepo
argument_list|()
expr_stmt|;
comment|///////////////////////////////////////////////////////////////////////////////////////////
comment|// Need to save the composite session and login again for query to return results frorm read only part
name|compositeSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|login
argument_list|()
expr_stmt|;
name|QueryResult
name|result
init|=
name|executeQuery
argument_list|(
literal|"explain /jcr:root//*[@"
operator|+
name|indexedProperty
operator|+
literal|" = 'bar']"
argument_list|,
literal|"xpath"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"/* lucene:"
operator|+
name|indexName
operator|+
literal|"(/oak:index/"
operator|+
name|indexName
operator|+
literal|") "
operator|+
name|indexedProperty
operator|+
literal|":bar"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|executeQuery
argument_list|(
literal|"/jcr:root//*[@"
operator|+
name|indexedProperty
operator|+
literal|" = 'bar'] order by @jcr:path"
argument_list|,
literal|"xpath"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/content-"
operator|+
name|indexedProperty
operator|+
literal|"/node-0, "
operator|+
literal|"/content-"
operator|+
name|indexedProperty
operator|+
literal|"/node-1, "
operator|+
literal|"/libs/node-"
operator|+
name|indexName
operator|+
literal|"-0, "
operator|+
literal|"/libs/node-"
operator|+
name|indexName
operator|+
literal|"-1, "
operator|+
literal|"/libs/node-"
operator|+
name|indexName
operator|+
literal|"-2"
argument_list|,
name|getResult
argument_list|(
name|result
argument_list|,
literal|"jcr:path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setupIndexAndContentInReadOnly
parameter_list|(
name|String
name|indexName
parameter_list|,
name|String
name|indexedProperty
parameter_list|,
name|int
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|versionProp
init|=
operator|(
name|version
operator|==
literal|1
operator|)
condition|?
literal|"@v1"
else|:
literal|"@v2"
decl_stmt|;
comment|// Add some content to read-only  repo
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|b
init|=
name|readOnlyRoot
operator|.
name|getNode
argument_list|(
literal|"libs"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"node-"
operator|+
name|indexName
operator|+
literal|"-"
operator|+
name|i
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
name|indexedProperty
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|b
operator|.
name|setPrimaryType
argument_list|(
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
block|}
comment|// index creation
name|Node
name|readOnlyIndex
init|=
name|createLuceneIndex
argument_list|(
name|readOnlySession
argument_list|,
name|indexName
argument_list|,
name|indexedProperty
argument_list|)
decl_stmt|;
name|readOnlyIndex
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|USE_IF_EXISTS
argument_list|,
literal|"/libs/indexes/"
operator|+
name|indexName
operator|+
literal|"/@"
operator|+
name|versionProp
argument_list|)
expr_stmt|;
name|readOnlyIndex
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_REFRESH_DEFN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Add /libs/indexes/luceneTest/@v1 to make this index usable/enabled
name|addOrGetNode
argument_list|(
name|readOnlyRoot
operator|.
name|getNode
argument_list|(
literal|"libs"
argument_list|)
argument_list|,
literal|"indexes"
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
operator|.
name|addNode
argument_list|(
name|indexName
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
operator|.
name|setProperty
argument_list|(
name|versionProp
operator|.
name|replace
argument_list|(
literal|"@"
argument_list|,
literal|""
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|readOnlySession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|restartRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|compositeSession
operator|.
name|logout
argument_list|()
expr_stmt|;
name|shutdown
argument_list|(
name|compositeRepository
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MountedNodeStore
argument_list|>
name|nonDefaultStores
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|nonDefaultStores
operator|.
name|add
argument_list|(
operator|new
name|MountedNodeStore
argument_list|(
name|this
operator|.
name|mip
operator|.
name|getMountByName
argument_list|(
name|readOnlyMountName
argument_list|)
argument_list|,
name|readOnlyStore
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|=
operator|new
name|CompositeNodeStore
argument_list|(
name|this
operator|.
name|mip
argument_list|,
name|globalStore
argument_list|,
name|nonDefaultStores
argument_list|)
expr_stmt|;
name|compositeRepository
operator|=
name|createJCRRepository
argument_list|(
name|this
operator|.
name|store
argument_list|,
name|this
operator|.
name|mip
argument_list|)
expr_stmt|;
name|login
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|login
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|compositeSession
operator|!=
literal|null
condition|)
block|{
name|compositeSession
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
name|compositeSession
operator|=
operator|(
name|JackrabbitSession
operator|)
name|compositeRepository
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|compositeRoot
operator|=
name|compositeSession
operator|.
name|getRootNode
argument_list|()
expr_stmt|;
name|compositeQueryManager
operator|=
name|compositeSession
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|cleanup
parameter_list|()
block|{
if|if
condition|(
operator|!
name|cleanedUp
condition|)
block|{
name|compositeSession
operator|.
name|logout
argument_list|()
expr_stmt|;
name|shutdown
argument_list|(
name|compositeRepository
argument_list|)
expr_stmt|;
name|readOnlySession
operator|.
name|logout
argument_list|()
expr_stmt|;
name|shutdown
argument_list|(
name|readOnlyRepository
argument_list|)
expr_stmt|;
block|}
name|cleanedUp
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

