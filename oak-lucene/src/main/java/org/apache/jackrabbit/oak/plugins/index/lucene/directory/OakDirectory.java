begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|benchmark
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|ActiveDeletedBlobCollectorFactory
operator|.
name|BlobDeletionCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|NoLockFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_DATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|INDEX_DATA_CHILD_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
operator|.
name|createProperty
import|;
end_import

begin_comment
comment|/**  * Implementation of the Lucene {@link Directory} (a flat list of files)  * based on an Oak {@link NodeBuilder}.  */
end_comment

begin_class
specifier|public
class|class
name|OakDirectory
extends|extends
name|Directory
block|{
specifier|static
specifier|final
name|PerfLogger
name|PERF_LOGGER
init|=
operator|new
name|PerfLogger
argument_list|(
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OakDirectory
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".perf"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROP_DIR_LISTING
init|=
literal|"dirListing"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PROP_BLOB_SIZE
init|=
literal|"blobSize"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PROP_UNIQUE_KEY
init|=
literal|"uniqueKey"
decl_stmt|;
specifier|static
specifier|final
name|int
name|UNIQUE_KEY_SIZE
init|=
literal|16
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|SecureRandom
name|secureRandom
init|=
operator|new
name|SecureRandom
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|NodeBuilder
name|builder
decl_stmt|;
specifier|protected
specifier|final
name|String
name|dataNodeName
decl_stmt|;
specifier|protected
specifier|final
name|NodeBuilder
name|directoryBuilder
decl_stmt|;
specifier|private
specifier|final
name|IndexDefinition
name|definition
decl_stmt|;
specifier|private
name|LockFactory
name|lockFactory
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|readOnly
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|fileNames
init|=
name|Sets
operator|.
name|newConcurrentHashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|fileNamesAtStart
decl_stmt|;
specifier|private
specifier|final
name|String
name|indexName
decl_stmt|;
specifier|private
specifier|final
name|BlobFactory
name|blobFactory
decl_stmt|;
specifier|private
specifier|final
name|BlobDeletionCallback
name|blobDeletionCallback
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|dirty
decl_stmt|;
specifier|public
name|OakDirectory
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|IndexDefinition
name|definition
parameter_list|,
name|boolean
name|readOnly
parameter_list|)
block|{
name|this
argument_list|(
name|builder
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|,
name|definition
argument_list|,
name|readOnly
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OakDirectory
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|dataNodeName
parameter_list|,
name|IndexDefinition
name|definition
parameter_list|,
name|boolean
name|readOnly
parameter_list|)
block|{
name|this
argument_list|(
name|builder
argument_list|,
name|dataNodeName
argument_list|,
name|definition
argument_list|,
name|readOnly
argument_list|,
name|BlobFactory
operator|.
name|getNodeBuilderBlobFactory
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OakDirectory
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|dataNodeName
parameter_list|,
name|IndexDefinition
name|definition
parameter_list|,
name|boolean
name|readOnly
parameter_list|,
annotation|@
name|Nullable
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|)
block|{
name|this
argument_list|(
name|builder
argument_list|,
name|dataNodeName
argument_list|,
name|definition
argument_list|,
name|readOnly
argument_list|,
name|blobStore
argument_list|,
name|BlobDeletionCallback
operator|.
name|NOOP
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OakDirectory
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|dataNodeName
parameter_list|,
name|IndexDefinition
name|definition
parameter_list|,
name|boolean
name|readOnly
parameter_list|,
annotation|@
name|Nullable
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
annotation|@
name|Nonnull
name|BlobDeletionCallback
name|blobDeletionCallback
parameter_list|)
block|{
name|this
argument_list|(
name|builder
argument_list|,
name|dataNodeName
argument_list|,
name|definition
argument_list|,
name|readOnly
argument_list|,
name|blobStore
operator|!=
literal|null
condition|?
name|BlobFactory
operator|.
name|getBlobStoreBlobFactory
argument_list|(
name|blobStore
argument_list|)
else|:
name|BlobFactory
operator|.
name|getNodeBuilderBlobFactory
argument_list|(
name|builder
argument_list|)
argument_list|,
name|blobDeletionCallback
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OakDirectory
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|dataNodeName
parameter_list|,
name|IndexDefinition
name|definition
parameter_list|,
name|boolean
name|readOnly
parameter_list|,
name|BlobFactory
name|blobFactory
parameter_list|)
block|{
name|this
argument_list|(
name|builder
argument_list|,
name|dataNodeName
argument_list|,
name|definition
argument_list|,
name|readOnly
argument_list|,
name|blobFactory
argument_list|,
name|BlobDeletionCallback
operator|.
name|NOOP
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OakDirectory
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|dataNodeName
parameter_list|,
name|IndexDefinition
name|definition
parameter_list|,
name|boolean
name|readOnly
parameter_list|,
name|BlobFactory
name|blobFactory
parameter_list|,
annotation|@
name|Nonnull
name|BlobDeletionCallback
name|blobDeletionCallback
parameter_list|)
block|{
name|this
operator|.
name|lockFactory
operator|=
name|NoLockFactory
operator|.
name|getNoLockFactory
argument_list|()
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
name|this
operator|.
name|dataNodeName
operator|=
name|dataNodeName
expr_stmt|;
name|this
operator|.
name|directoryBuilder
operator|=
name|readOnly
condition|?
name|builder
operator|.
name|getChildNode
argument_list|(
name|dataNodeName
argument_list|)
else|:
name|builder
operator|.
name|child
argument_list|(
name|dataNodeName
argument_list|)
expr_stmt|;
name|this
operator|.
name|definition
operator|=
name|definition
expr_stmt|;
name|this
operator|.
name|readOnly
operator|=
name|readOnly
expr_stmt|;
name|this
operator|.
name|fileNames
operator|.
name|addAll
argument_list|(
name|getListing
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileNamesAtStart
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|this
operator|.
name|fileNames
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexName
operator|=
name|definition
operator|.
name|getIndexName
argument_list|()
expr_stmt|;
name|this
operator|.
name|blobFactory
operator|=
name|blobFactory
expr_stmt|;
name|this
operator|.
name|blobDeletionCallback
operator|=
name|blobDeletionCallback
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|listAll
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fileNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|fileNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|fileExists
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fileNames
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|checkArgument
argument_list|(
operator|!
name|readOnly
argument_list|,
literal|"Read only directory"
argument_list|)
expr_stmt|;
name|fileNames
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|NodeBuilder
name|f
init|=
name|directoryBuilder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|PropertyState
name|property
init|=
name|f
operator|.
name|getProperty
argument_list|(
name|JCR_DATA
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|property
operator|.
name|getType
argument_list|()
operator|==
name|BINARIES
operator|||
name|property
operator|.
name|getType
argument_list|()
operator|==
name|BINARY
condition|)
block|{
for|for
control|(
name|Blob
name|b
range|:
name|property
operator|.
name|getValue
argument_list|(
name|BINARIES
argument_list|)
control|)
block|{
comment|//Mark the blob as deleted. Also, post index path, type of directory
comment|//(:suggest, :data, etc) and filename being deleted
name|String
name|blobId
init|=
name|b
operator|.
name|getContentIdentity
argument_list|()
decl_stmt|;
if|if
condition|(
name|blobId
operator|!=
literal|null
condition|)
block|{
name|blobDeletionCallback
operator|.
name|deleted
argument_list|(
name|blobId
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|definition
operator|.
name|getIndexPath
argument_list|()
argument_list|,
name|dataNodeName
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|f
operator|.
name|remove
argument_list|()
expr_stmt|;
name|markDirty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|fileLength
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|NodeBuilder
name|file
init|=
name|directoryBuilder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"[%s] %s"
argument_list|,
name|indexName
argument_list|,
name|name
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|OakIndexInput
name|input
init|=
operator|new
name|OakIndexInput
argument_list|(
name|name
argument_list|,
name|file
argument_list|,
name|indexName
argument_list|,
name|blobFactory
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|input
operator|.
name|length
argument_list|()
return|;
block|}
finally|finally
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|IndexOutput
name|createOutput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|checkArgument
argument_list|(
operator|!
name|readOnly
argument_list|,
literal|"Read only directory"
argument_list|)
expr_stmt|;
name|NodeBuilder
name|file
decl_stmt|;
if|if
condition|(
operator|!
name|directoryBuilder
operator|.
name|hasChildNode
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|file
operator|=
name|directoryBuilder
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|byte
index|[]
name|uniqueKey
init|=
operator|new
name|byte
index|[
name|UNIQUE_KEY_SIZE
index|]
decl_stmt|;
name|secureRandom
operator|.
name|nextBytes
argument_list|(
name|uniqueKey
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|StringUtils
operator|.
name|convertBytesToHex
argument_list|(
name|uniqueKey
argument_list|)
decl_stmt|;
name|file
operator|.
name|setProperty
argument_list|(
name|PROP_UNIQUE_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|file
operator|.
name|setProperty
argument_list|(
name|PROP_BLOB_SIZE
argument_list|,
name|definition
operator|.
name|getBlobSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|=
name|directoryBuilder
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|fileNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|markDirty
argument_list|()
expr_stmt|;
return|return
operator|new
name|OakIndexOutput
argument_list|(
name|name
argument_list|,
name|file
argument_list|,
name|indexName
argument_list|,
name|blobFactory
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|NodeBuilder
name|file
init|=
name|directoryBuilder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
operator|new
name|OakIndexInput
argument_list|(
name|name
argument_list|,
name|file
argument_list|,
name|indexName
argument_list|,
name|blobFactory
argument_list|)
return|;
block|}
else|else
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"[%s] %s"
argument_list|,
name|indexName
argument_list|,
name|name
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|makeLock
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|lockFactory
operator|.
name|makeLock
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearLock
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|lockFactory
operator|.
name|clearLock
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sync
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|IOException
block|{
comment|// ?
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|readOnly
operator|&&
name|definition
operator|.
name|saveDirListing
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|fileNamesAtStart
operator|.
name|equals
argument_list|(
name|fileNames
argument_list|)
condition|)
block|{
name|directoryBuilder
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|PROP_DIR_LISTING
argument_list|,
name|fileNames
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLockFactory
parameter_list|(
name|LockFactory
name|lockFactory
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|lockFactory
operator|=
name|lockFactory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|LockFactory
name|getLockFactory
parameter_list|()
block|{
return|return
name|lockFactory
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Directory for "
operator|+
name|definition
operator|.
name|getIndexName
argument_list|()
return|;
block|}
comment|/**      * Copies the file with the given {@code name} to the {@code dest}      * directory. The file is copied 'by reference'. That is, the file in the      * destination directory will reference the same blob values as the source      * file.      *<p>      * This method is a no-op if the file does not exist in this directory.      *      * @param dest the destination directory.      * @param name the name of the file to copy.      * @throws IOException if an error occurs while copying the file.      * @throws IllegalArgumentException if the destination directory does not      *          use the same {@link BlobFactory} as {@code this} directory.      */
specifier|public
name|void
name|copy
parameter_list|(
name|OakDirectory
name|dest
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|blobFactory
operator|!=
name|dest
operator|.
name|blobFactory
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Source and destination "
operator|+
literal|"directory must reference the same BlobFactory"
argument_list|)
throw|;
block|}
name|NodeBuilder
name|file
init|=
name|directoryBuilder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// overwrite potentially already existing child
name|NodeBuilder
name|destFile
init|=
name|dest
operator|.
name|directoryBuilder
operator|.
name|setChildNode
argument_list|(
name|name
argument_list|,
name|EMPTY_NODE
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyState
name|p
range|:
name|file
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|destFile
operator|.
name|setProperty
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|dest
operator|.
name|fileNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|dest
operator|.
name|markDirty
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isDirty
parameter_list|()
block|{
return|return
name|dirty
return|;
block|}
specifier|private
name|void
name|markDirty
parameter_list|()
block|{
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getListing
parameter_list|()
block|{
name|long
name|start
init|=
name|PERF_LOGGER
operator|.
name|start
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|fileNames
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|definition
operator|.
name|saveDirListing
argument_list|()
condition|)
block|{
name|PropertyState
name|listing
init|=
name|directoryBuilder
operator|.
name|getProperty
argument_list|(
name|PROP_DIR_LISTING
argument_list|)
decl_stmt|;
if|if
condition|(
name|listing
operator|!=
literal|null
condition|)
block|{
name|fileNames
operator|=
name|listing
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fileNames
operator|==
literal|null
condition|)
block|{
name|fileNames
operator|=
name|directoryBuilder
operator|.
name|getChildNodeNames
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|fileNames
argument_list|)
decl_stmt|;
name|PERF_LOGGER
operator|.
name|end
argument_list|(
name|start
argument_list|,
literal|100
argument_list|,
literal|"Directory listing performed. Total {} files"
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

