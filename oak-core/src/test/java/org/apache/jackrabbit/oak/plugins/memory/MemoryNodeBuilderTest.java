begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_class
specifier|public
class|class
name|MemoryNodeBuilderTest
block|{
specifier|private
specifier|static
specifier|final
name|NodeState
name|BASE
init|=
operator|new
name|MemoryNodeState
argument_list|(
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|PropertyState
operator|>
name|of
argument_list|(
literal|"a"
argument_list|,
name|SinglePropertyState
operator|.
name|create
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"b"
argument_list|,
name|SinglePropertyState
operator|.
name|create
argument_list|(
literal|"b"
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"c"
argument_list|,
name|SinglePropertyState
operator|.
name|create
argument_list|(
literal|"c"
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
name|MemoryNodeState
operator|.
name|EMPTY_NODE
argument_list|,
literal|"y"
argument_list|,
name|MemoryNodeState
operator|.
name|EMPTY_NODE
argument_list|,
literal|"z"
argument_list|,
name|MemoryNodeState
operator|.
name|EMPTY_NODE
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testConnectOnAddProperty
parameter_list|()
block|{
name|NodeBuilder
name|root
init|=
operator|new
name|MemoryNodeBuilder
argument_list|(
name|BASE
argument_list|)
decl_stmt|;
name|NodeBuilder
name|childA
init|=
name|root
operator|.
name|getChildBuilder
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|childB
init|=
name|root
operator|.
name|getChildBuilder
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|childA
operator|.
name|getProperty
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|childB
operator|.
name|setProperty
argument_list|(
literal|"test"
argument_list|,
operator|new
name|StringValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|childA
operator|.
name|getProperty
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnectOnUpdateProperty
parameter_list|()
block|{
name|NodeBuilder
name|root
init|=
operator|new
name|MemoryNodeBuilder
argument_list|(
name|BASE
argument_list|)
decl_stmt|;
name|NodeBuilder
name|childA
init|=
name|root
operator|.
name|getChildBuilder
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|childB
init|=
name|root
operator|.
name|getChildBuilder
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|childB
operator|.
name|setProperty
argument_list|(
literal|"test"
argument_list|,
operator|new
name|StringValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|childA
operator|.
name|setProperty
argument_list|(
literal|"test"
argument_list|,
operator|new
name|StringValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|childB
operator|.
name|getProperty
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnectOnRemoveProperty
parameter_list|()
block|{
name|NodeBuilder
name|root
init|=
operator|new
name|MemoryNodeBuilder
argument_list|(
name|BASE
argument_list|)
decl_stmt|;
name|NodeBuilder
name|childA
init|=
name|root
operator|.
name|getChildBuilder
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|childB
init|=
name|root
operator|.
name|getChildBuilder
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|childB
operator|.
name|setProperty
argument_list|(
literal|"test"
argument_list|,
operator|new
name|StringValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|childA
operator|.
name|removeProperty
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|childB
operator|.
name|getProperty
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnectOnAddNode
parameter_list|()
block|{
name|NodeBuilder
name|root
init|=
operator|new
name|MemoryNodeBuilder
argument_list|(
name|BASE
argument_list|)
decl_stmt|;
name|NodeBuilder
name|childA
init|=
name|root
operator|.
name|getChildBuilder
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|childB
init|=
name|root
operator|.
name|getChildBuilder
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|childA
operator|.
name|hasChildNode
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|childB
operator|.
name|setNode
argument_list|(
literal|"test"
argument_list|,
name|MemoryNodeState
operator|.
name|EMPTY_NODE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|childA
operator|.
name|hasChildNode
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testConnectOnRemoveNode
parameter_list|()
block|{
name|NodeBuilder
name|root
init|=
operator|new
name|MemoryNodeBuilder
argument_list|(
name|BASE
argument_list|)
decl_stmt|;
name|NodeBuilder
name|child
init|=
name|root
operator|.
name|getChildBuilder
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|root
operator|.
name|removeNode
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|child
operator|.
name|getChildNodeCount
argument_list|()
expr_stmt|;
comment|// should throw ISE
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

