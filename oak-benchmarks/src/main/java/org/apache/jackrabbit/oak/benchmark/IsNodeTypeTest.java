begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
operator|.
name|JCR_READ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
operator|.
name|addAccessControlEntry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_comment
comment|/**  * Benchmark for Node.isNodeType(String).  */
end_comment

begin_class
specifier|public
class|class
name|IsNodeTypeTest
extends|extends
name|AbstractTest
argument_list|<
name|Node
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NT_FOLDER
init|=
literal|"nt:folder"
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|runAsAdmin
decl_stmt|;
specifier|private
name|String
name|testNodeName
init|=
literal|"test"
operator|+
name|TEST_ID
decl_stmt|;
specifier|private
name|Node
name|testNode
decl_stmt|;
specifier|public
name|IsNodeTypeTest
parameter_list|(
name|boolean
name|runAsAdmin
parameter_list|)
block|{
name|this
operator|.
name|runAsAdmin
operator|=
name|runAsAdmin
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeSuite
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
name|getCredentials
argument_list|()
argument_list|)
decl_stmt|;
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
name|testNodeName
argument_list|,
name|NT_FOLDER
argument_list|)
expr_stmt|;
name|addAccessControlEntry
argument_list|(
name|session
argument_list|,
literal|"/"
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|JCR_READ
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
name|testNode
operator|=
name|prepareThreadExecutionContext
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterSuite
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
name|getCredentials
argument_list|()
argument_list|)
decl_stmt|;
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
name|testNodeName
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
name|disposeThreadExecutionContext
argument_list|(
name|testNode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Node
name|prepareThreadExecutionContext
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getTestSession
argument_list|()
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
name|testNodeName
argument_list|)
return|;
block|}
specifier|private
name|Session
name|getTestSession
parameter_list|()
block|{
if|if
condition|(
name|runAsAdmin
condition|)
block|{
return|return
name|loginWriter
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|loginAnonymous
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|disposeThreadExecutionContext
parameter_list|(
name|Node
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|context
operator|.
name|getSession
argument_list|()
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|runTest
parameter_list|(
name|Node
name|executionContext
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100000
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|executionContext
operator|.
name|isNodeType
argument_list|(
name|NT_FOLDER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|runTest
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
name|testNode
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

