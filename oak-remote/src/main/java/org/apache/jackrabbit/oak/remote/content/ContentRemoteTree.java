begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|content
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteTreeFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|filter
operator|.
name|Filters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO8601
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
class|class
name|ContentRemoteTree
implements|implements
name|RemoteTree
block|{
specifier|private
specifier|final
name|Tree
name|tree
decl_stmt|;
specifier|private
specifier|final
name|int
name|depth
decl_stmt|;
specifier|private
specifier|final
name|RemoteTreeFilters
name|filters
decl_stmt|;
specifier|private
specifier|final
name|ContentRemoteBinaries
name|contentRemoteBinaries
decl_stmt|;
specifier|public
name|ContentRemoteTree
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|int
name|depth
parameter_list|,
name|RemoteTreeFilters
name|filters
parameter_list|,
name|ContentRemoteBinaries
name|contentRemoteBinaries
parameter_list|)
block|{
name|this
operator|.
name|tree
operator|=
name|tree
expr_stmt|;
name|this
operator|.
name|depth
operator|=
name|depth
expr_stmt|;
name|this
operator|.
name|filters
operator|=
name|filters
expr_stmt|;
name|this
operator|.
name|contentRemoteBinaries
operator|=
name|contentRemoteBinaries
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|getProperties
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyState
name|property
range|:
name|getFilteredProperties
argument_list|()
control|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|,
name|getRemoteValue
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
specifier|private
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getFilteredProperties
parameter_list|()
block|{
return|return
name|Iterables
operator|.
name|filter
argument_list|(
name|tree
operator|.
name|getProperties
argument_list|()
argument_list|,
name|getPropertyFilters
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Predicate
argument_list|<
name|?
super|super
name|PropertyState
argument_list|>
name|getPropertyFilters
parameter_list|()
block|{
return|return
operator|new
name|Predicate
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|PropertyState
name|property
parameter_list|)
block|{
return|return
operator|new
name|Filters
argument_list|(
name|filters
operator|.
name|getPropertyFilters
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|private
name|RemoteValue
name|getRemoteValue
parameter_list|(
name|PropertyState
name|property
parameter_list|)
block|{
name|Type
argument_list|<
name|?
argument_list|>
name|type
init|=
name|property
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|DATE
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toDate
argument_list|(
name|getDate
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|DATES
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toMultiDate
argument_list|(
name|getDates
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATES
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|BINARY
condition|)
block|{
return|return
name|getBinaryRemoteValue
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|BINARIES
condition|)
block|{
return|return
name|getBinaryRemoteValues
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARIES
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|BOOLEAN
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toBoolean
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|BOOLEANS
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toMultiBoolean
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEANS
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|DECIMAL
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toDecimal
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DECIMAL
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|DECIMALS
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toMultiDecimal
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DECIMALS
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|DOUBLE
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toDouble
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|DOUBLES
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toMultiDouble
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DOUBLES
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|LONG
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toLong
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|LONGS
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toMultiLong
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONGS
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|NAME
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toName
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAME
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|NAMES
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toMultiName
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|PATH
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toPath
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|PATH
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|PATHS
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toMultiPath
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|PATHS
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|REFERENCE
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toReference
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCE
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|REFERENCES
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toMultiReference
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCES
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|STRING
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toText
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|STRINGS
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toMultiText
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|URI
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toUri
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|URI
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|URIS
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toMultiUri
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|URIS
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|WEAKREFERENCE
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toWeakReference
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|WEAKREFERENCE
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|WEAKREFERENCES
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toMultiWeakReference
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|WEAKREFERENCES
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unrecognized property type"
argument_list|)
throw|;
block|}
specifier|private
name|long
name|getDate
parameter_list|(
name|String
name|date
parameter_list|)
block|{
name|Calendar
name|calendar
init|=
name|ISO8601
operator|.
name|parse
argument_list|(
name|date
argument_list|)
decl_stmt|;
if|if
condition|(
name|calendar
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"invalid date format"
argument_list|)
throw|;
block|}
return|return
name|calendar
operator|.
name|getTimeInMillis
argument_list|()
return|;
block|}
specifier|private
name|Iterable
argument_list|<
name|Long
argument_list|>
name|getDates
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|dates
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|dates
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|apply
parameter_list|(
name|String
name|date
parameter_list|)
block|{
return|return
name|getDate
argument_list|(
name|date
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|RemoteValue
name|getBinaryRemoteValue
parameter_list|(
name|Blob
name|blob
parameter_list|)
block|{
if|if
condition|(
name|getLength
argument_list|(
name|blob
argument_list|)
operator|<
name|filters
operator|.
name|getBinaryThreshold
argument_list|()
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toBinary
argument_list|(
name|getBinary
argument_list|(
name|blob
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|RemoteValue
operator|.
name|toBinaryId
argument_list|(
name|getBinaryId
argument_list|(
name|blob
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
name|RemoteValue
name|getBinaryRemoteValues
parameter_list|(
name|Iterable
argument_list|<
name|Blob
argument_list|>
name|blobs
parameter_list|)
block|{
if|if
condition|(
name|getLength
argument_list|(
name|blobs
argument_list|)
operator|<
name|filters
operator|.
name|getBinaryThreshold
argument_list|()
condition|)
block|{
return|return
name|RemoteValue
operator|.
name|toMultiBinary
argument_list|(
name|getBinaries
argument_list|(
name|blobs
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|RemoteValue
operator|.
name|toMultiBinaryId
argument_list|(
name|getBinaryIds
argument_list|(
name|blobs
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
name|long
name|getLength
parameter_list|(
name|Blob
name|blob
parameter_list|)
block|{
return|return
name|blob
operator|.
name|length
argument_list|()
return|;
block|}
specifier|private
name|long
name|getLength
parameter_list|(
name|Iterable
argument_list|<
name|Blob
argument_list|>
name|blobs
parameter_list|)
block|{
name|long
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Blob
name|blob
range|:
name|blobs
control|)
block|{
name|length
operator|=
name|length
operator|+
name|blob
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
return|return
name|length
return|;
block|}
specifier|private
name|Supplier
argument_list|<
name|InputStream
argument_list|>
name|getBinary
parameter_list|(
specifier|final
name|Blob
name|blob
parameter_list|)
block|{
return|return
operator|new
name|Supplier
argument_list|<
name|InputStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InputStream
name|get
parameter_list|()
block|{
return|return
name|blob
operator|.
name|getNewStream
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|private
name|Iterable
argument_list|<
name|Supplier
argument_list|<
name|InputStream
argument_list|>
argument_list|>
name|getBinaries
parameter_list|(
name|Iterable
argument_list|<
name|Blob
argument_list|>
name|blobs
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|blobs
argument_list|,
operator|new
name|Function
argument_list|<
name|Blob
argument_list|,
name|Supplier
argument_list|<
name|InputStream
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Supplier
argument_list|<
name|InputStream
argument_list|>
name|apply
parameter_list|(
name|Blob
name|blob
parameter_list|)
block|{
return|return
name|getBinary
argument_list|(
name|blob
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|String
name|getBinaryId
parameter_list|(
name|Blob
name|blob
parameter_list|)
block|{
return|return
name|contentRemoteBinaries
operator|.
name|put
argument_list|(
name|blob
argument_list|)
return|;
block|}
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|getBinaryIds
parameter_list|(
name|Iterable
argument_list|<
name|Blob
argument_list|>
name|blobs
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|blobs
argument_list|,
operator|new
name|Function
argument_list|<
name|Blob
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|Blob
name|blob
parameter_list|)
block|{
return|return
name|getBinaryId
argument_list|(
name|blob
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteTree
argument_list|>
name|getChildren
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteTree
argument_list|>
name|children
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RemoteTree
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|getFilteredChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|depth
operator|<
name|filters
operator|.
name|getDepth
argument_list|()
condition|)
block|{
name|children
operator|.
name|put
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ContentRemoteTree
argument_list|(
name|child
argument_list|,
name|depth
operator|+
literal|1
argument_list|,
name|filters
argument_list|,
name|contentRemoteBinaries
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|children
operator|.
name|put
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|children
return|;
block|}
specifier|private
name|Iterable
argument_list|<
name|Tree
argument_list|>
name|getFilteredChildren
parameter_list|()
block|{
name|Iterable
argument_list|<
name|Tree
argument_list|>
name|result
init|=
name|tree
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|filters
operator|.
name|getChildrenStart
argument_list|()
operator|>
literal|0
condition|)
block|{
name|result
operator|=
name|Iterables
operator|.
name|skip
argument_list|(
name|result
argument_list|,
name|filters
operator|.
name|getChildrenStart
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filters
operator|.
name|getChildrenCount
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|result
operator|=
name|Iterables
operator|.
name|limit
argument_list|(
name|result
argument_list|,
name|filters
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Iterables
operator|.
name|filter
argument_list|(
name|result
argument_list|,
name|getNodeFilters
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Predicate
argument_list|<
name|Tree
argument_list|>
name|getNodeFilters
parameter_list|()
block|{
return|return
operator|new
name|Predicate
argument_list|<
name|Tree
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Tree
name|child
parameter_list|)
block|{
return|return
operator|new
name|Filters
argument_list|(
name|filters
operator|.
name|getNodeFilters
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasMoreChildren
parameter_list|()
block|{
if|if
condition|(
name|filters
operator|.
name|getChildrenCount
argument_list|()
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|start
init|=
name|filters
operator|.
name|getChildrenStart
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
literal|0
condition|)
block|{
name|start
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|count
init|=
name|filters
operator|.
name|getChildrenCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
name|count
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|max
init|=
name|start
operator|+
name|count
decl_stmt|;
return|return
name|tree
operator|.
name|getChildrenCount
argument_list|(
name|max
argument_list|)
operator|>
name|max
return|;
block|}
block|}
end_class

end_unit

