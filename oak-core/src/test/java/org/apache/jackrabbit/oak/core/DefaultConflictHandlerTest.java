begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultConflictHandlerTest
extends|extends
name|AbstractOakTest
block|{
specifier|private
name|Root
name|ourRoot
decl_stmt|;
specifier|private
name|Root
name|theirRoot
decl_stmt|;
specifier|private
name|CoreValue
name|ourValue
decl_stmt|;
specifier|private
name|CoreValue
name|theirValue
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|NodeState
name|createInitialState
parameter_list|(
name|MicroKernel
name|microKernel
parameter_list|)
block|{
name|String
name|jsop
init|=
literal|"^\"a\":1 ^\"b\":2 ^\"c\":3 +\"x\":{} +\"y\":{} +\"z\":{}"
decl_stmt|;
name|microKernel
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
name|jsop
argument_list|,
name|microKernel
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|"test data"
argument_list|)
expr_stmt|;
name|ourRoot
operator|=
operator|new
name|RootImpl
argument_list|(
name|store
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|theirRoot
operator|=
operator|new
name|RootImpl
argument_list|(
name|store
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|ourValue
operator|=
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|theirValue
operator|=
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
return|return
name|store
operator|.
name|getRoot
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddExistingPropertyOurs
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|theirValue
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|ourValue
argument_list|)
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|OURS
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|OURS
argument_list|)
expr_stmt|;
name|PropertyState
name|p
init|=
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ourValue
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeDeletedPropertyOurs
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|removeProperty
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"a"
argument_list|,
name|ourValue
argument_list|)
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|OURS
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|OURS
argument_list|)
expr_stmt|;
name|PropertyState
name|p
init|=
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ourValue
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeChangedPropertyOurs
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"a"
argument_list|,
name|theirValue
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"a"
argument_list|,
name|ourValue
argument_list|)
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|OURS
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|OURS
argument_list|)
expr_stmt|;
name|PropertyState
name|p
init|=
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ourValue
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteChangedPropertyOurs
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"a"
argument_list|,
name|theirValue
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|removeProperty
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|OURS
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|OURS
argument_list|)
expr_stmt|;
name|PropertyState
name|p
init|=
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddExistingNodeOurs
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"n"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|theirValue
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"n"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|ourValue
argument_list|)
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|OURS
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|OURS
argument_list|)
expr_stmt|;
name|Tree
name|n
init|=
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/n"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ourValue
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
literal|"p"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeDeletedNodeOurs
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/x"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/x"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|ourValue
argument_list|)
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|OURS
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|OURS
argument_list|)
expr_stmt|;
name|Tree
name|n
init|=
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/x"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ourValue
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
literal|"p"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteChangedNodeOurs
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/x"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|theirValue
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/x"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|OURS
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|OURS
argument_list|)
expr_stmt|;
name|Tree
name|n
init|=
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/x"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddExistingPropertyTheirs
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|theirValue
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|ourValue
argument_list|)
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|THEIRS
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|THEIRS
argument_list|)
expr_stmt|;
name|PropertyState
name|p
init|=
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|theirValue
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeDeletedPropertyTheirs
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|removeProperty
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"a"
argument_list|,
name|ourValue
argument_list|)
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|THEIRS
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|THEIRS
argument_list|)
expr_stmt|;
name|PropertyState
name|p
init|=
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeChangedPropertyTheirs
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"a"
argument_list|,
name|theirValue
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"a"
argument_list|,
name|ourValue
argument_list|)
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|THEIRS
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|THEIRS
argument_list|)
expr_stmt|;
name|PropertyState
name|p
init|=
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|theirValue
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteChangedPropertyTheirs
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"a"
argument_list|,
name|theirValue
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|removeProperty
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|THEIRS
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|THEIRS
argument_list|)
expr_stmt|;
name|PropertyState
name|p
init|=
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|theirValue
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddExistingNodeTheirs
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"n"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|theirValue
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"n"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|ourValue
argument_list|)
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|THEIRS
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|THEIRS
argument_list|)
expr_stmt|;
name|Tree
name|n
init|=
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/n"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|theirValue
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
literal|"p"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeDeletedNodeTheirs
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/x"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/x"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|ourValue
argument_list|)
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|THEIRS
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|THEIRS
argument_list|)
expr_stmt|;
name|Tree
name|n
init|=
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/x"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteChangedNodeTheirs
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|theirRoot
operator|.
name|getTree
argument_list|(
literal|"/x"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|theirValue
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|theirRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|THEIRS
argument_list|)
expr_stmt|;
name|ourRoot
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|THEIRS
argument_list|)
expr_stmt|;
name|Tree
name|n
init|=
name|ourRoot
operator|.
name|getTree
argument_list|(
literal|"/x"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|theirValue
argument_list|,
name|n
operator|.
name|getProperty
argument_list|(
literal|"p"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

