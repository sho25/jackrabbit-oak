begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|command
operator|.
name|CommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Commit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|command
operator|.
name|CommitCommandMongo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|command
operator|.
name|GetHeadRevisionCommandMongo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|command
operator|.
name|GetNodesCommandMongo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|command
operator|.
name|NodeExistsCommandMongo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|command
operator|.
name|CommandExecutorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|model
operator|.
name|CommitMongo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|model
operator|.
name|HeadMongo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|query
operator|.
name|FetchValidCommitsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|util
operator|.
name|MongoUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link NodeStore} for the {@code MongoDB}.  *  * @author<a href="mailto:pmarx@adobe.com>Philipp Marx</a>  */
end_comment

begin_class
specifier|public
class|class
name|NodeStoreMongo
implements|implements
name|NodeStore
block|{
specifier|private
specifier|static
specifier|final
name|long
name|WAIT_FOR_COMMIT_POLL_MILLIS
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|final
name|CommandExecutor
name|commandExecutor
decl_stmt|;
specifier|private
specifier|final
name|MongoConnection
name|mongoConnection
decl_stmt|;
comment|/**      * Constructs a new {@code NodeStoreMongo}.      *      * @param mongoConnection The {@link MongoConnection}.      */
specifier|public
name|NodeStoreMongo
parameter_list|(
name|MongoConnection
name|mongoConnection
parameter_list|)
block|{
name|this
operator|.
name|mongoConnection
operator|=
name|mongoConnection
expr_stmt|;
name|commandExecutor
operator|=
operator|new
name|CommandExecutorImpl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|commit
parameter_list|(
name|Commit
name|commit
parameter_list|)
throws|throws
name|Exception
block|{
name|Command
argument_list|<
name|Long
argument_list|>
name|command
init|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
decl_stmt|;
name|Long
name|revision
init|=
name|commandExecutor
operator|.
name|execute
argument_list|(
name|command
argument_list|)
decl_stmt|;
return|return
name|MongoUtil
operator|.
name|fromMongoRepresentation
argument_list|(
name|revision
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHeadRevision
parameter_list|()
throws|throws
name|Exception
block|{
name|Long
name|headRevision
init|=
name|commandExecutor
operator|.
name|execute
argument_list|(
operator|new
name|GetHeadRevisionCommandMongo
argument_list|(
name|mongoConnection
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|MongoUtil
operator|.
name|fromMongoRepresentation
argument_list|(
name|headRevision
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getNodes
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|int
name|depth
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|maxChildNodes
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
name|Command
argument_list|<
name|Node
argument_list|>
name|command
init|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|path
argument_list|,
name|MongoUtil
operator|.
name|toMongoRepresentation
argument_list|(
name|revisionId
argument_list|)
argument_list|,
name|depth
argument_list|)
decl_stmt|;
return|return
name|commandExecutor
operator|.
name|execute
argument_list|(
name|command
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|nodeExists
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
throws|throws
name|Exception
block|{
name|Command
argument_list|<
name|Boolean
argument_list|>
name|command
init|=
operator|new
name|NodeExistsCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|path
argument_list|,
name|MongoUtil
operator|.
name|toMongoRepresentation
argument_list|(
name|revisionId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|commandExecutor
operator|.
name|execute
argument_list|(
name|command
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getJournal
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|path
operator|=
operator|(
name|path
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|)
condition|?
literal|"/"
else|:
name|path
expr_stmt|;
name|boolean
name|filtered
init|=
operator|!
literal|"/"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// FIXME [Mete] There's more work here.
name|Long
name|fromRevision
init|=
name|MongoUtil
operator|.
name|toMongoRepresentation
argument_list|(
name|fromRevisionId
argument_list|)
decl_stmt|;
name|Long
name|toRevision
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|toRevisionId
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|toRevision
operator|=
operator|new
name|GetHeadRevisionCommandMongo
argument_list|(
name|mongoConnection
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// FIXME Handle
block|}
block|}
else|else
block|{
name|toRevision
operator|=
name|MongoUtil
operator|.
name|toMongoRepresentation
argument_list|(
name|toRevisionId
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|CommitMongo
argument_list|>
name|commits
init|=
operator|new
name|FetchValidCommitsQuery
argument_list|(
name|mongoConnection
argument_list|,
name|fromRevision
argument_list|,
name|toRevision
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|CommitMongo
name|toCommit
init|=
name|getCommit
argument_list|(
name|commits
argument_list|,
name|toRevision
argument_list|)
decl_stmt|;
name|CommitMongo
name|fromCommit
decl_stmt|;
if|if
condition|(
name|toRevision
operator|==
name|fromRevision
condition|)
block|{
name|fromCommit
operator|=
name|toCommit
expr_stmt|;
block|}
else|else
block|{
name|fromCommit
operator|=
name|getCommit
argument_list|(
name|commits
argument_list|,
name|fromRevision
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromCommit
operator|==
literal|null
operator|||
operator|(
name|fromCommit
operator|.
name|getTimestamp
argument_list|()
operator|>
name|toCommit
operator|.
name|getTimestamp
argument_list|()
operator|)
condition|)
block|{
comment|// negative range, return empty journal
return|return
literal|"[]"
return|;
block|}
block|}
name|JsopBuilder
name|commitBuff
init|=
operator|new
name|JsopBuilder
argument_list|()
operator|.
name|array
argument_list|()
decl_stmt|;
comment|// iterate over commits in chronological order,
comment|// starting with oldest commit
for|for
control|(
name|int
name|i
init|=
name|commits
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|CommitMongo
name|commit
init|=
name|commits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|//if (commit.getParentId() == null) {
comment|//   continue;
comment|//}
name|String
name|diff
init|=
name|commit
operator|.
name|getDiff
argument_list|()
decl_stmt|;
comment|// FIXME Check that filter really works.
if|if
condition|(
operator|!
name|filtered
operator|||
name|commit
operator|.
name|getAffectedPaths
argument_list|()
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|commitBuff
operator|.
name|object
argument_list|()
operator|.
name|key
argument_list|(
literal|"id"
argument_list|)
operator|.
name|value
argument_list|(
name|MongoUtil
operator|.
name|fromMongoRepresentation
argument_list|(
name|commit
operator|.
name|getRevisionId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|key
argument_list|(
literal|"ts"
argument_list|)
operator|.
name|value
argument_list|(
name|commit
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|key
argument_list|(
literal|"msg"
argument_list|)
operator|.
name|value
argument_list|(
name|commit
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|key
argument_list|(
literal|"changes"
argument_list|)
operator|.
name|value
argument_list|(
name|diff
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|commitBuff
operator|.
name|endArray
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRevisionHistory
parameter_list|(
name|long
name|since
parameter_list|,
name|int
name|maxEntries
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|path
operator|=
operator|(
name|path
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|)
condition|?
literal|"/"
else|:
name|path
expr_stmt|;
name|boolean
name|filtered
init|=
operator|!
literal|"/"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|maxEntries
operator|=
name|maxEntries
operator|<
literal|0
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|maxEntries
expr_stmt|;
name|List
argument_list|<
name|CommitMongo
argument_list|>
name|history
init|=
operator|new
name|FetchValidCommitsQuery
argument_list|(
name|mongoConnection
argument_list|,
name|maxEntries
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|JsopBuilder
name|buff
init|=
operator|new
name|JsopBuilder
argument_list|()
operator|.
name|array
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|history
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|CommitMongo
name|commit
init|=
name|history
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|commit
operator|.
name|getTimestamp
argument_list|()
operator|>=
name|since
condition|)
block|{
comment|// FIXME [Mete] Check that filter really works.
if|if
condition|(
operator|!
name|filtered
operator|||
name|commit
operator|.
name|getAffectedPaths
argument_list|()
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|buff
operator|.
name|object
argument_list|()
operator|.
name|key
argument_list|(
literal|"id"
argument_list|)
operator|.
name|value
argument_list|(
name|MongoUtil
operator|.
name|fromMongoRepresentation
argument_list|(
name|commit
operator|.
name|getRevisionId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|key
argument_list|(
literal|"ts"
argument_list|)
operator|.
name|value
argument_list|(
name|commit
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|key
argument_list|(
literal|"msg"
argument_list|)
operator|.
name|value
argument_list|(
name|commit
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|buff
operator|.
name|endArray
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|waitForCommit
parameter_list|(
name|String
name|oldHeadRevisionId
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|startTimestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|initialHeadRevisionId
init|=
name|getHeadRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeout
operator|<=
literal|0
condition|)
block|{
return|return
name|MongoUtil
operator|.
name|fromMongoRepresentation
argument_list|(
name|initialHeadRevisionId
argument_list|)
return|;
block|}
name|long
name|oldHeadRevision
init|=
name|MongoUtil
operator|.
name|toMongoRepresentation
argument_list|(
name|oldHeadRevisionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldHeadRevision
operator|<
name|initialHeadRevisionId
condition|)
block|{
return|return
name|MongoUtil
operator|.
name|fromMongoRepresentation
argument_list|(
name|initialHeadRevisionId
argument_list|)
return|;
block|}
name|long
name|waitForCommitPollMillis
init|=
name|Math
operator|.
name|min
argument_list|(
name|WAIT_FOR_COMMIT_POLL_MILLIS
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|headRevisionId
init|=
name|getHeadRevisionId
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|headRevisionId
operator|!=
name|initialHeadRevisionId
operator|||
name|now
operator|-
name|startTimestamp
operator|>=
name|timeout
condition|)
block|{
return|return
name|MongoUtil
operator|.
name|fromMongoRepresentation
argument_list|(
name|headRevisionId
argument_list|)
return|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|waitForCommitPollMillis
argument_list|)
expr_stmt|;
block|}
block|}
comment|// FIXME - Consolidate with getHeadRevision
specifier|private
name|long
name|getHeadRevisionId
parameter_list|()
block|{
name|DBCollection
name|headCollection
init|=
name|mongoConnection
operator|.
name|getHeadCollection
argument_list|()
decl_stmt|;
name|HeadMongo
name|headMongo
init|=
operator|(
name|HeadMongo
operator|)
name|headCollection
operator|.
name|findOne
argument_list|()
decl_stmt|;
name|long
name|headRevisionId
init|=
name|headMongo
operator|.
name|getHeadRevisionId
argument_list|()
decl_stmt|;
return|return
name|headRevisionId
return|;
block|}
comment|// FIXME - Move to a command.
specifier|private
name|CommitMongo
name|getCommit
parameter_list|(
name|List
argument_list|<
name|CommitMongo
argument_list|>
name|commits
parameter_list|,
name|Long
name|revisionId
parameter_list|)
block|{
for|for
control|(
name|CommitMongo
name|commit
range|:
name|commits
control|)
block|{
if|if
condition|(
name|commit
operator|.
name|getRevisionId
argument_list|()
operator|==
name|revisionId
condition|)
block|{
return|return
name|commit
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

