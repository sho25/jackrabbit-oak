begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|simple
operator|.
name|SimpleKernelImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|CoreValueFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * CoreValueUtilTest...  */
end_comment

begin_class
specifier|public
class|class
name|CoreValueUtilTest
block|{
comment|/**      * logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CoreValueUtilTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// TODO: use regular oak-repo setup
specifier|private
name|MicroKernel
name|microKernel
decl_stmt|;
specifier|private
name|CoreValueFactory
name|valueFactory
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|CoreValue
argument_list|,
name|String
argument_list|>
name|map
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|microKernel
operator|=
operator|new
name|SimpleKernelImpl
argument_list|(
literal|"mem:"
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|valueFactory
operator|=
operator|new
name|CoreValueFactoryImpl
argument_list|(
name|microKernel
argument_list|)
expr_stmt|;
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|CoreValue
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
literal|"\"abc\""
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"a:bc"
argument_list|)
argument_list|,
literal|"\"a:bc\""
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"a:bc"
argument_list|)
argument_list|,
literal|"\"a:bc\""
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"boo:abc"
argument_list|)
argument_list|,
literal|"\"str:boo:abc\""
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"str:abc"
argument_list|)
argument_list|,
literal|"\"str:str:abc\""
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"str:"
argument_list|)
argument_list|,
literal|"\"str:str:\""
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|12345
argument_list|)
argument_list|,
literal|"12345"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|1.23
argument_list|)
argument_list|,
literal|"\"dou:1.23\""
argument_list|)
expr_stmt|;
name|BigDecimal
name|bd
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"12345678901234567890"
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
name|bd
argument_list|)
argument_list|,
literal|"\"dec:"
operator|+
name|bd
operator|.
name|toString
argument_list|()
operator|+
literal|'\"'
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"2012-05-01T12:00.000:00GMT"
argument_list|,
name|PropertyType
operator|.
name|DATE
argument_list|)
argument_list|,
literal|"\"dat:2012-05-01T12:00.000:00GMT\""
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"jcr:primaryType"
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
argument_list|,
literal|"\"nam:jcr:primaryType\""
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"/jcr:system"
argument_list|,
name|PropertyType
operator|.
name|PATH
argument_list|)
argument_list|,
literal|"\"pat:/jcr:system\""
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"http://jackrabbit.apache.org"
argument_list|,
name|PropertyType
operator|.
name|URI
argument_list|)
argument_list|,
literal|"\"uri:http://jackrabbit.apache.org\""
argument_list|)
expr_stmt|;
name|String
name|uuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
name|uuid
argument_list|,
name|PropertyType
operator|.
name|REFERENCE
argument_list|)
argument_list|,
literal|"\"ref:"
operator|+
name|uuid
operator|+
literal|'\"'
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
name|uuid
argument_list|,
name|PropertyType
operator|.
name|WEAKREFERENCE
argument_list|)
argument_list|,
literal|"\"wea:"
operator|+
name|uuid
operator|+
literal|'\"'
argument_list|)
expr_stmt|;
name|CoreValue
name|binary
init|=
name|valueFactory
operator|.
name|createValue
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"123"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|binary
argument_list|,
literal|"\"bin:"
operator|+
name|binary
operator|.
name|getString
argument_list|()
operator|+
literal|'\"'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToJsonValue
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|CoreValue
name|v
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|json
init|=
name|map
operator|.
name|get
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
name|CoreValueUtil
operator|.
name|toJsonValue
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFromJsonValue
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|CoreValue
name|v
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|json
init|=
name|map
operator|.
name|get
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|JsopReader
name|reader
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|v
argument_list|,
name|CoreValueUtil
operator|.
name|fromJsopReader
argument_list|(
name|reader
argument_list|,
name|valueFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

