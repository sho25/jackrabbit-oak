begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|AuthenticationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|CompositePrincipalConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|SecurityProviderImplTest
block|{
specifier|private
name|SecurityProviderImpl
name|securityProvider
init|=
operator|new
name|SecurityProviderImpl
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testBindPrincipalConfiguration
parameter_list|()
block|{
name|PrincipalConfiguration
name|defaultConfig
init|=
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|defaultConfig
operator|instanceof
name|CompositePrincipalConfiguration
argument_list|)
expr_stmt|;
name|CompositePrincipalConfiguration
name|cpc
init|=
operator|(
name|CompositePrincipalConfiguration
operator|)
name|defaultConfig
decl_stmt|;
name|PrincipalConfiguration
name|pc
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|pc
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|securityProvider
operator|.
name|bindPrincipalConfiguration
argument_list|(
name|pc
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|pc
argument_list|,
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|defaultConfig
argument_list|,
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|securityProvider
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
if|if
condition|(
name|sc
operator|instanceof
name|PrincipalConfiguration
condition|)
block|{
name|assertSame
argument_list|(
name|defaultConfig
argument_list|,
name|sc
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|cpc
operator|.
name|getConfigurations
argument_list|()
operator|.
name|contains
argument_list|(
name|pc
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnbinPrincipalConfiguration
parameter_list|()
block|{
name|CompositePrincipalConfiguration
name|cpc
init|=
operator|(
name|CompositePrincipalConfiguration
operator|)
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|PrincipalConfiguration
name|pc
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|pc
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|securityProvider
operator|.
name|bindPrincipalConfiguration
argument_list|(
name|pc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cpc
operator|.
name|getConfigurations
argument_list|()
operator|.
name|contains
argument_list|(
name|pc
argument_list|)
argument_list|)
expr_stmt|;
name|securityProvider
operator|.
name|unbindPrincipalConfiguration
argument_list|(
name|pc
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cpc
operator|.
name|getConfigurations
argument_list|()
operator|.
name|contains
argument_list|(
name|pc
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindUserConfiguration
parameter_list|()
block|{
name|UserConfiguration
name|uc
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|securityProvider
operator|.
name|bindUserConfiguration
argument_list|(
name|uc
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|uc
argument_list|,
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|securityProvider
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
if|if
condition|(
name|sc
operator|instanceof
name|UserConfiguration
condition|)
block|{
name|assertSame
argument_list|(
name|uc
argument_list|,
name|sc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnBindUserConfiguration
parameter_list|()
block|{
name|UserConfiguration
name|uc
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|securityProvider
operator|.
name|bindUserConfiguration
argument_list|(
name|uc
argument_list|)
expr_stmt|;
name|securityProvider
operator|.
name|unbindUserConfiguration
argument_list|(
name|uc
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|securityProvider
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
if|if
condition|(
name|sc
operator|instanceof
name|UserConfiguration
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindAuthenticationConfiguration
parameter_list|()
block|{
name|AuthenticationConfiguration
name|ac
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AuthenticationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|securityProvider
operator|.
name|bindAuthenticationConfiguration
argument_list|(
name|ac
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ac
argument_list|,
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|AuthenticationConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|securityProvider
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
if|if
condition|(
name|sc
operator|instanceof
name|AuthenticationConfiguration
condition|)
block|{
name|assertSame
argument_list|(
name|ac
argument_list|,
name|sc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnBindAuthenticationConfiguration
parameter_list|()
block|{
name|AuthenticationConfiguration
name|ac
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AuthenticationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|securityProvider
operator|.
name|bindAuthenticationConfiguration
argument_list|(
name|ac
argument_list|)
expr_stmt|;
name|securityProvider
operator|.
name|unbindAuthenticationConfiguration
argument_list|(
name|ac
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|AuthenticationConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|securityProvider
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
if|if
condition|(
name|sc
operator|instanceof
name|AuthenticationConfiguration
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindPrivilegeConfiguration
parameter_list|()
block|{
name|PrivilegeConfiguration
name|pc
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PrivilegeConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|securityProvider
operator|.
name|bindPrivilegeConfiguration
argument_list|(
name|pc
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|pc
argument_list|,
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|PrivilegeConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|securityProvider
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
if|if
condition|(
name|sc
operator|instanceof
name|PrivilegeConfiguration
condition|)
block|{
name|assertSame
argument_list|(
name|pc
argument_list|,
name|sc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnBindPrivilegeConfiguration
parameter_list|()
block|{
name|PrivilegeConfiguration
name|pc
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PrivilegeConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|securityProvider
operator|.
name|bindPrivilegeConfiguration
argument_list|(
name|pc
argument_list|)
expr_stmt|;
name|securityProvider
operator|.
name|unbindPrivilegeConfiguration
argument_list|(
name|pc
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|PrivilegeConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|securityProvider
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
if|if
condition|(
name|sc
operator|instanceof
name|PrivilegeConfiguration
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

