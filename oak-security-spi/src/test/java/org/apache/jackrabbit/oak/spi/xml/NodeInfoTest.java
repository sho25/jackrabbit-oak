begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_class
specifier|public
class|class
name|NodeInfoTest
block|{
specifier|private
name|NodeInfo
name|nodeInfo
init|=
operator|new
name|NodeInfo
argument_list|(
literal|"name"
argument_list|,
literal|"primaryType"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"mixin1"
argument_list|,
literal|"mixin2"
argument_list|)
argument_list|,
literal|"uuid"
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testGetName
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"name"
argument_list|,
name|nodeInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrimaryTypeName
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"primaryType"
argument_list|,
name|nodeInfo
operator|.
name|getPrimaryTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMixinTypeName
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"mixin1"
argument_list|,
literal|"mixin2"
argument_list|)
argument_list|,
name|nodeInfo
operator|.
name|getMixinTypeNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMixinTypeNameEmpty
parameter_list|()
block|{
name|NodeInfo
name|ni
init|=
operator|new
name|NodeInfo
argument_list|(
literal|"name"
argument_list|,
literal|"primaryType"
argument_list|,
literal|null
argument_list|,
literal|"uuid"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|ni
operator|.
name|getMixinTypeNames
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetUUID
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"uuid"
argument_list|,
name|nodeInfo
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

