begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonEncoding
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteQueryParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteResults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|handler
operator|.
name|RemoteValues
operator|.
name|renderJson
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|handler
operator|.
name|RemoteValues
operator|.
name|renderJsonOrNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|handler
operator|.
name|ResponseUtils
operator|.
name|sendBadRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|handler
operator|.
name|ResponseUtils
operator|.
name|sendGone
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|handler
operator|.
name|ResponseUtils
operator|.
name|sendInternalServerError
import|;
end_import

begin_class
specifier|abstract
class|class
name|SearchRevisionHandler
implements|implements
name|Handler
block|{
specifier|protected
specifier|abstract
name|RemoteRevision
name|readRevision
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|RemoteSession
name|session
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|RemoteSession
name|session
init|=
operator|(
name|RemoteSession
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"session"
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|sendInternalServerError
argument_list|(
name|response
argument_list|,
literal|"session not found"
argument_list|)
expr_stmt|;
return|return;
block|}
name|RemoteRevision
name|revision
init|=
name|readRevision
argument_list|(
name|request
argument_list|,
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|revision
operator|==
literal|null
condition|)
block|{
name|sendGone
argument_list|(
name|response
argument_list|,
literal|"unable to read the revision"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|query
init|=
name|readQuery
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
name|sendBadRequest
argument_list|(
name|response
argument_list|,
literal|"query not specified"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|language
init|=
name|readLanguage
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|language
operator|==
literal|null
condition|)
block|{
name|sendBadRequest
argument_list|(
name|response
argument_list|,
literal|"language not specified"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Long
name|offset
init|=
name|readOffset
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|==
literal|null
condition|)
block|{
name|sendBadRequest
argument_list|(
name|response
argument_list|,
literal|"offset not specified"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Long
name|limit
init|=
name|readLimit
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|==
literal|null
condition|)
block|{
name|sendBadRequest
argument_list|(
name|response
argument_list|,
literal|"limit not specified"
argument_list|)
expr_stmt|;
return|return;
block|}
name|RemoteResults
name|results
decl_stmt|;
try|try
block|{
name|results
operator|=
name|session
operator|.
name|search
argument_list|(
name|revision
argument_list|,
name|query
argument_list|,
name|language
argument_list|,
name|offset
argument_list|,
name|limit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteQueryParseException
name|e
parameter_list|)
block|{
name|sendBadRequest
argument_list|(
name|response
argument_list|,
literal|"malformed query"
argument_list|)
expr_stmt|;
return|return;
block|}
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"Oak-Revision"
argument_list|,
name|revision
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|ServletOutputStream
name|stream
init|=
name|response
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|JsonGenerator
name|generator
init|=
operator|new
name|JsonFactory
argument_list|()
operator|.
name|createJsonGenerator
argument_list|(
name|stream
argument_list|,
name|JsonEncoding
operator|.
name|UTF8
argument_list|)
decl_stmt|;
name|renderResponse
argument_list|(
name|generator
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|generator
operator|.
name|flush
argument_list|()
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|readQuery
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
return|return
name|readStringParameter
argument_list|(
name|request
argument_list|,
literal|"query"
argument_list|)
return|;
block|}
specifier|private
name|String
name|readLanguage
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
return|return
name|readStringParameter
argument_list|(
name|request
argument_list|,
literal|"language"
argument_list|)
return|;
block|}
specifier|private
name|String
name|readStringParameter
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|request
operator|.
name|getParameter
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
name|Long
name|readOffset
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
return|return
name|readLongParameter
argument_list|(
name|request
argument_list|,
literal|"offset"
argument_list|)
return|;
block|}
specifier|private
name|Long
name|readLimit
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
return|return
name|readLongParameter
argument_list|(
name|request
argument_list|,
literal|"limit"
argument_list|)
return|;
block|}
specifier|private
name|Long
name|readLongParameter
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
name|value
init|=
name|readStringParameter
argument_list|(
name|request
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|,
literal|10
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|void
name|renderResponse
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|RemoteResults
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"total"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNumber
argument_list|(
name|results
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"columns"
argument_list|)
expr_stmt|;
name|renderStrings
argument_list|(
name|generator
argument_list|,
name|results
operator|.
name|getColumns
argument_list|()
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"selectors"
argument_list|)
expr_stmt|;
name|renderStrings
argument_list|(
name|generator
argument_list|,
name|results
operator|.
name|getSelectors
argument_list|()
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"results"
argument_list|)
expr_stmt|;
name|renderResults
argument_list|(
name|generator
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|renderStrings
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartArray
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|element
range|:
name|elements
control|)
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|renderResults
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|RemoteResults
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartArray
argument_list|()
expr_stmt|;
for|for
control|(
name|RemoteResult
name|result
range|:
name|results
control|)
block|{
name|renderResult
argument_list|(
name|generator
argument_list|,
name|results
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|renderResult
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|RemoteResults
name|results
parameter_list|,
name|RemoteResult
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"columns"
argument_list|)
expr_stmt|;
name|renderColumns
argument_list|(
name|generator
argument_list|,
name|results
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"selectors"
argument_list|)
expr_stmt|;
name|renderSelectors
argument_list|(
name|generator
argument_list|,
name|results
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|renderColumns
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|RemoteResults
name|results
parameter_list|,
name|RemoteResult
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|results
operator|.
name|getColumns
argument_list|()
control|)
block|{
name|generator
operator|.
name|writeFieldName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|renderJsonOrNull
argument_list|(
name|generator
argument_list|,
name|result
operator|.
name|getColumnValue
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|renderSelectors
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|RemoteResults
name|results
parameter_list|,
name|RemoteResult
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|results
operator|.
name|getSelectors
argument_list|()
control|)
block|{
name|generator
operator|.
name|writeFieldName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeString
argument_list|(
name|result
operator|.
name|getSelectorPath
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

