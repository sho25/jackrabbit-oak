begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|AbstractBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|MongoBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|WriteResult
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link BlobStore} for the {@code MongoDB} extending from  * {@link AbstractBlobStore}. Unlike {@link MongoGridFSBlobStore}, it saves blobs  * into a separate collection in {@link MongoDB} instead of GridFS.  *  * FIXME:  * -Do we need to create commands for retry etc.?  * -Implement GC  */
end_comment

begin_class
specifier|public
class|class
name|MongoBlobStore
extends|extends
name|AbstractBlobStore
block|{
specifier|public
specifier|static
specifier|final
name|String
name|COLLECTION_BLOBS
init|=
literal|"blobs"
decl_stmt|;
specifier|private
specifier|final
name|DB
name|db
decl_stmt|;
specifier|private
name|long
name|minLastModified
decl_stmt|;
comment|/**      * Constructs a new {@code MongoBlobStore}      *      * @param db The DB.      */
specifier|public
name|MongoBlobStore
parameter_list|(
name|DB
name|db
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|initBlobCollection
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|storeBlock
parameter_list|(
name|byte
index|[]
name|digest
parameter_list|,
name|int
name|level
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|id
init|=
name|StringUtils
operator|.
name|convertBytesToHex
argument_list|(
name|digest
argument_list|)
decl_stmt|;
comment|// Check if it already exists?
name|MongoBlob
name|mongoBlob
init|=
operator|new
name|MongoBlob
argument_list|()
decl_stmt|;
name|mongoBlob
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|mongoBlob
operator|.
name|setData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|mongoBlob
operator|.
name|setLevel
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|getBlobCollection
argument_list|()
operator|.
name|insert
argument_list|(
name|mongoBlob
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|byte
index|[]
name|readBlockFromBackend
parameter_list|(
name|BlockId
name|blockId
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|id
init|=
name|StringUtils
operator|.
name|convertBytesToHex
argument_list|(
name|blockId
operator|.
name|getDigest
argument_list|()
argument_list|)
decl_stmt|;
name|MongoBlob
name|blobMongo
init|=
name|getBlob
argument_list|(
name|id
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|blobMongo
operator|.
name|getData
argument_list|()
decl_stmt|;
if|if
condition|(
name|blockId
operator|.
name|getPos
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|data
return|;
block|}
name|int
name|len
init|=
call|(
name|int
call|)
argument_list|(
name|data
operator|.
name|length
operator|-
name|blockId
operator|.
name|getPos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|<
literal|0
condition|)
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
name|byte
index|[]
name|d2
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
operator|(
name|int
operator|)
name|blockId
operator|.
name|getPos
argument_list|()
argument_list|,
name|d2
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|d2
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startMark
parameter_list|()
throws|throws
name|Exception
block|{
name|minLastModified
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|markInUse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isMarkEnabled
parameter_list|()
block|{
return|return
name|minLastModified
operator|!=
literal|0
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|mark
parameter_list|(
name|BlockId
name|blockId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|minLastModified
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|String
name|id
init|=
name|StringUtils
operator|.
name|convertBytesToHex
argument_list|(
name|blockId
operator|.
name|getDigest
argument_list|()
argument_list|)
decl_stmt|;
name|DBObject
name|query
init|=
name|getBlobQuery
argument_list|(
name|id
argument_list|,
name|minLastModified
argument_list|)
decl_stmt|;
name|DBObject
name|update
init|=
operator|new
name|BasicDBObject
argument_list|(
literal|"$set"
argument_list|,
operator|new
name|BasicDBObject
argument_list|(
name|MongoBlob
operator|.
name|KEY_LAST_MOD
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|WriteResult
name|writeResult
init|=
name|getBlobCollection
argument_list|()
operator|.
name|update
argument_list|(
name|query
argument_list|,
name|update
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeResult
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Handle
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|sweep
parameter_list|()
throws|throws
name|Exception
block|{
name|DBObject
name|query
init|=
name|getBlobQuery
argument_list|(
literal|null
argument_list|,
name|minLastModified
argument_list|)
decl_stmt|;
name|long
name|beforeCount
init|=
name|getBlobCollection
argument_list|()
operator|.
name|count
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|WriteResult
name|writeResult
init|=
name|getBlobCollection
argument_list|()
operator|.
name|remove
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeResult
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Handle
block|}
name|long
name|afterCount
init|=
name|getBlobCollection
argument_list|()
operator|.
name|count
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|minLastModified
operator|=
literal|0
expr_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
name|beforeCount
operator|-
name|afterCount
argument_list|)
return|;
block|}
specifier|private
name|DBCollection
name|getBlobCollection
parameter_list|()
block|{
name|DBCollection
name|collection
init|=
name|db
operator|.
name|getCollection
argument_list|(
name|COLLECTION_BLOBS
argument_list|)
decl_stmt|;
name|collection
operator|.
name|setObjectClass
argument_list|(
name|MongoBlob
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|collection
return|;
block|}
specifier|private
name|void
name|initBlobCollection
parameter_list|()
block|{
if|if
condition|(
name|db
operator|.
name|collectionExists
argument_list|(
name|COLLECTION_BLOBS
argument_list|)
condition|)
block|{
return|return;
block|}
name|DBCollection
name|collection
init|=
name|getBlobCollection
argument_list|()
decl_stmt|;
name|DBObject
name|index
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|index
operator|.
name|put
argument_list|(
name|MongoBlob
operator|.
name|KEY_ID
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|DBObject
name|options
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"unique"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|collection
operator|.
name|ensureIndex
argument_list|(
name|index
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
specifier|private
name|MongoBlob
name|getBlob
parameter_list|(
name|String
name|id
parameter_list|,
name|long
name|lastMod
parameter_list|)
block|{
name|DBObject
name|query
init|=
name|getBlobQuery
argument_list|(
name|id
argument_list|,
name|lastMod
argument_list|)
decl_stmt|;
return|return
operator|(
name|MongoBlob
operator|)
name|getBlobCollection
argument_list|()
operator|.
name|findOne
argument_list|(
name|query
argument_list|)
return|;
block|}
specifier|private
name|DBObject
name|getBlobQuery
parameter_list|(
name|String
name|id
parameter_list|,
name|long
name|lastMod
parameter_list|)
block|{
name|QueryBuilder
name|queryBuilder
init|=
operator|new
name|QueryBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|queryBuilder
operator|=
name|queryBuilder
operator|.
name|and
argument_list|(
name|MongoBlob
operator|.
name|KEY_ID
argument_list|)
operator|.
name|is
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastMod
operator|>
literal|0
condition|)
block|{
name|queryBuilder
operator|=
name|queryBuilder
operator|.
name|and
argument_list|(
name|MongoBlob
operator|.
name|KEY_LAST_MOD
argument_list|)
operator|.
name|lessThan
argument_list|(
name|lastMod
argument_list|)
expr_stmt|;
block|}
return|return
name|queryBuilder
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class

end_unit

