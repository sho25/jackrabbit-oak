begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ResultRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|nodetype
operator|.
name|NodeTypeIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|ArrayBasedBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|AbstractQueryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|QueryEngine
operator|.
name|NO_BINDINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NODE_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|ExcerptTest
extends|extends
name|AbstractQueryTest
block|{
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
comment|//named so that it gets called after super.before :-/
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|def
init|=
name|rootTree
operator|.
name|addChild
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"testExcerpt"
argument_list|)
decl_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|,
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|EVALUATE_PATH_RESTRICTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|COMPAT_MODE
argument_list|,
name|IndexFormatVersion
operator|.
name|V2
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|properties
init|=
name|def
operator|.
name|addChild
argument_list|(
name|LuceneIndexConstants
operator|.
name|INDEX_RULES
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|addChild
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE
argument_list|)
decl_stmt|;
name|Tree
name|notIndexedProp
init|=
name|properties
operator|.
name|addChild
argument_list|(
literal|"baz"
argument_list|)
decl_stmt|;
name|notIndexedProp
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|relativeProp
init|=
name|properties
operator|.
name|addChild
argument_list|(
literal|"relative-baz"
argument_list|)
decl_stmt|;
name|relativeProp
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|relativeProp
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_USE_IN_EXCERPT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|relativeProp
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"relative/baz"
argument_list|)
expr_stmt|;
name|Tree
name|allProps
init|=
name|properties
operator|.
name|addChild
argument_list|(
literal|"allProps"
argument_list|)
decl_stmt|;
name|allProps
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|allProps
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|allProps
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_USE_IN_EXCERPT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|allProps
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
name|LuceneIndexConstants
operator|.
name|REGEX_ALL_PROPS
argument_list|)
expr_stmt|;
name|allProps
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_IS_REGEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
name|LuceneIndexEditorProvider
name|editorProvider
init|=
operator|new
name|LuceneIndexEditorProvider
argument_list|()
decl_stmt|;
name|LuceneIndexProvider
name|provider
init|=
operator|new
name|LuceneIndexProvider
argument_list|()
decl_stmt|;
name|NodeStore
name|nodeStore
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
return|return
operator|new
name|Oak
argument_list|(
name|nodeStore
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|Observer
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
name|editorProvider
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|QueryIndexProvider
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|NodeTypeIndexProvider
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getAllSelectedColumns
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|contentRoot
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"testRoot"
argument_list|)
decl_stmt|;
name|contentRoot
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"is fox ifoxing"
argument_list|)
expr_stmt|;
name|contentRoot
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"ifoxing fox"
argument_list|)
expr_stmt|;
name|contentRoot
operator|.
name|setProperty
argument_list|(
literal|"baz"
argument_list|,
literal|"fox ifoxing"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
name|newArrayList
argument_list|(
literal|"rep:excerpt"
argument_list|,
literal|"rep:excerpt(.)"
argument_list|,
literal|"rep:excerpt(foo)"
argument_list|,
literal|"rep:excerpt(bar)"
argument_list|)
decl_stmt|;
name|String
name|selectColumns
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|columns
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|col
lambda|->
literal|"["
operator|+
name|col
operator|+
literal|"]"
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"SELECT "
operator|+
name|selectColumns
operator|+
literal|" FROM [nt:base] WHERE CONTAINS(*, 'fox')"
decl_stmt|;
name|Result
name|result
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
name|SQL2
argument_list|,
name|NO_BINDINGS
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|resultIter
init|=
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resultIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ResultRow
name|firstRow
init|=
name|resultIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|PropertyValue
name|excerptValue
decl_stmt|;
name|String
name|excerpt
decl_stmt|;
for|for
control|(
name|String
name|col
range|:
name|columns
control|)
block|{
name|excerptValue
operator|=
name|firstRow
operator|.
name|getValue
argument_list|(
name|col
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|col
operator|+
literal|" not evaluated"
argument_list|,
name|excerptValue
argument_list|)
expr_stmt|;
name|excerpt
operator|=
name|excerptValue
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|col
operator|+
literal|" didn't evaluate correctly - got '"
operator|+
name|excerpt
operator|+
literal|"'"
argument_list|,
name|excerpt
operator|.
name|contains
argument_list|(
literal|"i<strong>fox</foxing>ing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeExcerpt
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|contentRoot
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"testRoot"
argument_list|)
decl_stmt|;
name|contentRoot
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"is fox ifoxing"
argument_list|)
expr_stmt|;
name|contentRoot
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"ifoxing fox"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|query
init|=
literal|"SELECT [rep:excerpt],[rep:excerpt(.)] FROM [nt:base] WHERE CONTAINS(*, 'fox')"
decl_stmt|;
name|Result
name|result
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
name|SQL2
argument_list|,
name|NO_BINDINGS
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|resultIter
init|=
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resultIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ResultRow
name|firstRow
init|=
name|resultIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|PropertyValue
name|nodeExcerpt
decl_stmt|;
name|String
name|excerpt1
decl_stmt|,
name|excerpt2
decl_stmt|;
name|nodeExcerpt
operator|=
name|firstRow
operator|.
name|getValue
argument_list|(
literal|"rep:excerpt"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"rep:excerpt not evaluated"
argument_list|,
name|nodeExcerpt
argument_list|)
expr_stmt|;
name|excerpt1
operator|=
name|nodeExcerpt
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"rep:excerpt didn't evaluate correctly - got '"
operator|+
name|excerpt1
operator|+
literal|"'"
argument_list|,
literal|"is<strong>fox</strong> ifoxing"
operator|.
name|equals
argument_list|(
name|excerpt1
argument_list|)
operator|||
literal|"ifoxing<strong>fox</strong>"
operator|.
name|equals
argument_list|(
name|excerpt1
argument_list|)
argument_list|)
expr_stmt|;
name|nodeExcerpt
operator|=
name|firstRow
operator|.
name|getValue
argument_list|(
literal|"rep:excerpt(.)"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"rep:excerpt(.) not evaluated"
argument_list|,
name|nodeExcerpt
argument_list|)
expr_stmt|;
name|excerpt2
operator|=
name|nodeExcerpt
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"excerpt extracted via rep:excerpt not same as rep:excerpt(.)"
argument_list|,
name|excerpt1
argument_list|,
name|excerpt2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonIndexedRequestedPropExcerpt
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|contentRoot
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"testRoot"
argument_list|)
decl_stmt|;
name|contentRoot
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"fox"
argument_list|)
expr_stmt|;
name|contentRoot
operator|.
name|setProperty
argument_list|(
literal|"baz"
argument_list|,
literal|"is fox ifoxing"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|query
init|=
literal|"SELECT [rep:excerpt(baz)] FROM [nt:base] WHERE CONTAINS(*, 'fox')"
decl_stmt|;
name|Result
name|result
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
name|SQL2
argument_list|,
name|NO_BINDINGS
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|resultIter
init|=
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resultIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ResultRow
name|firstRow
init|=
name|resultIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|PropertyValue
name|nodeExcerpt
init|=
name|firstRow
operator|.
name|getValue
argument_list|(
literal|"rep:excerpt(baz)"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"rep:excerpt(baz) if requested explicitly must be indexed to be evaluated"
argument_list|,
name|nodeExcerpt
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propExcerpt
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|contentRoot
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"testRoot"
argument_list|)
decl_stmt|;
name|contentRoot
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"is fox ifoxing"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|query
init|=
literal|"SELECT [rep:excerpt(foo)] FROM [nt:base] WHERE CONTAINS(*, 'fox')"
decl_stmt|;
name|Result
name|result
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
name|SQL2
argument_list|,
name|NO_BINDINGS
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|resultIter
init|=
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resultIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ResultRow
name|firstRow
init|=
name|resultIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|PropertyValue
name|nodeExcerpt
decl_stmt|;
name|String
name|excerpt
decl_stmt|;
name|nodeExcerpt
operator|=
name|firstRow
operator|.
name|getValue
argument_list|(
literal|"rep:excerpt(foo)"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"rep:excerpt(foo) not evaluated"
argument_list|,
name|nodeExcerpt
argument_list|)
expr_stmt|;
name|excerpt
operator|=
name|nodeExcerpt
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"rep:excerpt(foo) didn't evaluate correctly - got '"
operator|+
name|excerpt
operator|+
literal|"'"
argument_list|,
literal|"is<strong>fox</strong> ifoxing"
operator|.
name|equals
argument_list|(
name|excerpt
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexedNonRequestedPropExcerpt
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|contentRoot
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"testRoot"
argument_list|)
decl_stmt|;
name|contentRoot
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"is fox ifoxing"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|query
init|=
literal|"SELECT [rep:excerpt] FROM [nt:base] WHERE CONTAINS(*, 'fox')"
decl_stmt|;
name|Result
name|result
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
name|SQL2
argument_list|,
name|NO_BINDINGS
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|resultIter
init|=
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resultIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ResultRow
name|firstRow
init|=
name|resultIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|PropertyValue
name|nodeExcerpt
decl_stmt|;
name|String
name|excerpt
decl_stmt|;
name|nodeExcerpt
operator|=
name|firstRow
operator|.
name|getValue
argument_list|(
literal|"rep:excerpt(foo)"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"rep:excerpt(foo) not evaluated"
argument_list|,
name|nodeExcerpt
argument_list|)
expr_stmt|;
name|excerpt
operator|=
name|nodeExcerpt
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"rep:excerpt(foo) didn't evaluate correctly - got '"
operator|+
name|excerpt
operator|+
literal|"'"
argument_list|,
name|excerpt
operator|.
name|contains
argument_list|(
literal|"<strong>fox</strong>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"rep:excerpt(foo) highlighting inside words - got '"
operator|+
name|excerpt
operator|+
literal|"'"
argument_list|,
operator|!
name|excerpt
operator|.
name|contains
argument_list|(
literal|"i<strong>fox</strong>ing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonIndexedNonRequestedPropExcerpt
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|contentRoot
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"testRoot"
argument_list|)
decl_stmt|;
name|contentRoot
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"fox"
argument_list|)
expr_stmt|;
name|contentRoot
operator|.
name|setProperty
argument_list|(
literal|"baz"
argument_list|,
literal|"is fox ifoxing"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|query
init|=
literal|"SELECT [rep:excerpt] FROM [nt:base] WHERE CONTAINS(*, 'fox')"
decl_stmt|;
name|Result
name|result
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
name|SQL2
argument_list|,
name|NO_BINDINGS
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|resultIter
init|=
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resultIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ResultRow
name|firstRow
init|=
name|resultIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|PropertyValue
name|nodeExcerpt
decl_stmt|;
name|String
name|excerpt
decl_stmt|;
name|nodeExcerpt
operator|=
name|firstRow
operator|.
name|getValue
argument_list|(
literal|"rep:excerpt(baz)"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"rep:excerpt(baz) not evaluated"
argument_list|,
name|nodeExcerpt
argument_list|)
expr_stmt|;
name|excerpt
operator|=
name|nodeExcerpt
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"rep:excerpt(foo) didn't evaluate correctly - got '"
operator|+
name|excerpt
operator|+
literal|"'"
argument_list|,
name|excerpt
operator|.
name|contains
argument_list|(
literal|"<strong>fox</strong>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"rep:excerpt(baz) highlighting inside words - got '"
operator|+
name|excerpt
operator|+
literal|"'"
argument_list|,
operator|!
name|excerpt
operator|.
name|contains
argument_list|(
literal|"i<strong>fox</strong>ing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|relativePropExcerpt
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|contentRoot
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"testRoot"
argument_list|)
decl_stmt|;
name|contentRoot
operator|.
name|addChild
argument_list|(
literal|"relative"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"baz"
argument_list|,
literal|"is fox ifoxing"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|query
init|=
literal|"SELECT [rep:excerpt(relative/baz)] FROM [nt:base] WHERE CONTAINS([relative/baz], 'fox')"
decl_stmt|;
name|Result
name|result
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
name|SQL2
argument_list|,
name|NO_BINDINGS
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|resultIter
init|=
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resultIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ResultRow
name|firstRow
init|=
name|resultIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|PropertyValue
name|nodeExcerpt
decl_stmt|;
name|String
name|excerpt
decl_stmt|;
name|nodeExcerpt
operator|=
name|firstRow
operator|.
name|getValue
argument_list|(
literal|"rep:excerpt(relative/baz)"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"rep:excerpt(relative/baz) not evaluated"
argument_list|,
name|nodeExcerpt
argument_list|)
expr_stmt|;
name|excerpt
operator|=
name|nodeExcerpt
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"rep:excerpt(relative/baz) didn't evaluate correctly - got '"
operator|+
name|excerpt
operator|+
literal|"'"
argument_list|,
literal|"is<strong>fox</strong> ifoxing"
operator|.
name|equals
argument_list|(
name|excerpt
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|binaryExcerpt
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|contentRoot
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"testRoot"
argument_list|)
decl_stmt|;
name|String
name|binaryText
init|=
literal|"is fox foxing as a fox cub"
decl_stmt|;
name|Blob
name|blob
init|=
operator|new
name|ArrayBasedBlob
argument_list|(
name|binaryText
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|createFileNode
argument_list|(
name|contentRoot
argument_list|,
literal|"binaryNode"
argument_list|,
name|blob
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|query
init|=
literal|"SELECT [rep:excerpt] FROM [nt:base] WHERE CONTAINS(*, 'fox')"
decl_stmt|;
name|Result
name|result
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
name|SQL2
argument_list|,
name|NO_BINDINGS
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|resultIter
init|=
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resultIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ResultRow
name|firstRow
init|=
name|resultIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|PropertyValue
name|nodeExcerpt
decl_stmt|;
name|String
name|excerpt
decl_stmt|;
name|nodeExcerpt
operator|=
name|firstRow
operator|.
name|getValue
argument_list|(
literal|"rep:excerpt"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"rep:excerpt not evaluated"
argument_list|,
name|nodeExcerpt
argument_list|)
expr_stmt|;
name|excerpt
operator|=
name|nodeExcerpt
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
name|binaryText
operator|.
name|replaceAll
argument_list|(
literal|" fox "
argument_list|,
literal|"<strong>fox</strong> "
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"rep:excerpt didn't evaluate correctly - got '"
operator|+
name|excerpt
operator|+
literal|"'"
argument_list|,
name|excerpt
operator|.
name|contains
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

