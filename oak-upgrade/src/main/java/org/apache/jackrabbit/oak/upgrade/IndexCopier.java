begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|nodestate
operator|.
name|NodeStateCopier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isEmpty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_CONTENT_NODE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|UNIQUE_PROPERTY_NAME
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|IndexCopier
block|{
specifier|private
name|IndexCopier
parameter_list|()
block|{     }
comment|/**      * Copy all index definition and data from sourceRoot to targetRoot. The      * indexing data is filtered to include only content related to the passed      * list of paths.      *      * @param sourceRoot the source      * @param targetRoot the target      * @param includes indexing data for these paths will be copied      */
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|NodeState
name|sourceRoot
parameter_list|,
name|NodeBuilder
name|targetRoot
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|includes
parameter_list|)
block|{
name|NodeState
name|oakIndex
init|=
name|sourceRoot
operator|.
name|getChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|NodeBuilder
name|targetOakIndex
init|=
name|copySingleNode
argument_list|(
name|oakIndex
argument_list|,
name|targetRoot
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|child
range|:
name|oakIndex
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|NodeState
name|indexDef
init|=
name|child
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|indexDef
operator|.
name|getString
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|isEmpty
argument_list|(
name|type
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|NodeBuilder
name|targetIndexDef
init|=
name|copySingleNode
argument_list|(
name|child
argument_list|,
name|targetOakIndex
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
literal|"property"
case|:
if|if
condition|(
name|indexDef
operator|.
name|getBoolean
argument_list|(
name|UNIQUE_PROPERTY_NAME
argument_list|)
condition|)
block|{
name|copyUniqueIndex
argument_list|(
name|indexDef
argument_list|,
name|targetIndexDef
argument_list|,
name|includes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copyMirrorIndex
argument_list|(
name|indexDef
argument_list|,
name|targetIndexDef
argument_list|,
name|includes
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|"counter"
case|:
name|copyMirrorIndex
argument_list|(
name|indexDef
argument_list|,
name|targetIndexDef
argument_list|,
name|includes
argument_list|)
expr_stmt|;
case|case
literal|"lucene"
case|:
name|copyLuceneIndex
argument_list|(
name|indexDef
argument_list|,
name|targetIndexDef
argument_list|,
name|includes
argument_list|)
expr_stmt|;
default|default:
break|break;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|copyUniqueIndex
parameter_list|(
name|NodeState
name|indexDef
parameter_list|,
name|NodeBuilder
name|targetIndexDef
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|includes
parameter_list|)
block|{
name|NodeState
name|indexNode
init|=
name|indexDef
operator|.
name|getChildNode
argument_list|(
name|INDEX_CONTENT_NODE_NAME
argument_list|)
decl_stmt|;
name|NodeBuilder
name|targetIndexNode
init|=
name|copySingleNode
argument_list|(
name|indexNode
argument_list|,
name|targetIndexDef
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|attr
range|:
name|indexNode
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|entries
init|=
name|attr
operator|.
name|getNodeState
argument_list|()
operator|.
name|getStrings
argument_list|(
literal|"entry"
argument_list|)
decl_stmt|;
if|if
condition|(
name|entries
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|e
range|:
name|entries
control|)
block|{
if|if
condition|(
name|startsWithAny
argument_list|(
name|e
argument_list|,
name|includes
argument_list|)
condition|)
block|{
name|copySingleNode
argument_list|(
name|attr
argument_list|,
name|targetIndexNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|copyMirrorIndex
parameter_list|(
name|NodeState
name|indexDef
parameter_list|,
name|NodeBuilder
name|targetIndexDef
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|includes
parameter_list|)
block|{
name|NodeState
name|indexNode
init|=
name|indexDef
operator|.
name|getChildNode
argument_list|(
name|INDEX_CONTENT_NODE_NAME
argument_list|)
decl_stmt|;
name|NodeBuilder
name|targetIndexNode
init|=
name|copySingleNode
argument_list|(
name|indexNode
argument_list|,
name|targetIndexDef
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|attr
range|:
name|indexNode
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|NodeBuilder
name|targetAttr
init|=
name|copySingleNode
argument_list|(
name|attr
argument_list|,
name|targetIndexNode
argument_list|)
decl_stmt|;
name|NodeStateCopier
operator|.
name|builder
argument_list|()
operator|.
name|include
argument_list|(
name|includes
argument_list|)
operator|.
name|copy
argument_list|(
name|attr
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|targetAttr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|copyLuceneIndex
parameter_list|(
name|NodeState
name|indexDef
parameter_list|,
name|NodeBuilder
name|targetIndexDef
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|includes
parameter_list|)
block|{
name|NodeStateCopier
operator|.
name|builder
argument_list|()
operator|.
name|include
argument_list|(
name|singleton
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|.
name|copy
argument_list|(
name|indexDef
argument_list|,
name|targetIndexDef
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|NodeBuilder
name|copySingleNode
parameter_list|(
name|ChildNodeEntry
name|source
parameter_list|,
name|NodeBuilder
name|targetParent
parameter_list|)
block|{
return|return
name|copySingleNode
argument_list|(
name|source
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|targetParent
argument_list|,
name|source
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|NodeBuilder
name|copySingleNode
parameter_list|(
name|NodeState
name|source
parameter_list|,
name|NodeBuilder
name|targetParent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|NodeBuilder
name|target
init|=
name|targetParent
operator|.
name|child
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyState
name|p
range|:
name|source
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|target
operator|.
name|setProperty
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|target
return|;
block|}
specifier|private
specifier|static
name|boolean
name|startsWithAny
parameter_list|(
name|String
name|subject
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|patterns
parameter_list|)
block|{
for|for
control|(
name|String
name|p
range|:
name|patterns
control|)
block|{
if|if
condition|(
name|subject
operator|.
name|startsWith
argument_list|(
name|p
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

