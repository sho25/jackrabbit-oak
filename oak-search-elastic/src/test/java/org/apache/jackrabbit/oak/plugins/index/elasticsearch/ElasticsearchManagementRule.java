begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|delete
operator|.
name|DeleteIndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExternalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
class|class
name|ElasticsearchManagementRule
extends|extends
name|ExternalResource
implements|implements
name|ElasticsearchIndexCoordinateFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ElasticsearchManagementRule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ElasticsearchDockerRule
name|elasticsearch
init|=
operator|new
name|ElasticsearchDockerRule
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ElasticsearchConnectionFactory
name|connectionFactory
init|=
operator|new
name|ElasticsearchConnectionFactory
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|ElasticsearchIndexCoordinate
argument_list|>
name|indices
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|usingDocker
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Statement
name|apply
parameter_list|(
name|Statement
name|base
parameter_list|,
name|Description
name|description
parameter_list|)
block|{
name|Statement
name|s
init|=
name|super
operator|.
name|apply
argument_list|(
name|base
argument_list|,
name|description
argument_list|)
decl_stmt|;
comment|// see if local instance is available... initialize docker rule only if that's not the case
name|ElasticsearchCoordinate
name|esCoord
init|=
name|ElasticsearchCoordinateImpl
operator|.
name|construct
argument_list|(
name|connectionFactory
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ElasticsearchTestUtils
operator|.
name|isAvailable
argument_list|(
name|esCoord
argument_list|)
operator|&&
name|elasticsearch
operator|.
name|isDockerAvailable
argument_list|()
condition|)
block|{
name|s
operator|=
name|elasticsearch
operator|.
name|apply
argument_list|(
name|s
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|usingDocker
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
annotation|@
name|Override
specifier|public
name|ElasticsearchIndexCoordinate
name|getElasticsearchIndexCoordinate
parameter_list|(
name|IndexDefinition
name|indexDefinition
parameter_list|)
block|{
name|ElasticsearchCoordinate
name|esCoord
init|=
name|getElasticsearchCoordinate
argument_list|(
name|indexDefinition
operator|.
name|getDefinitionNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|ElasticsearchIndexCoordinate
name|esIdxCoord
init|=
operator|new
name|ElasticsearchIndexCoordinateImpl
argument_list|(
name|esCoord
argument_list|,
name|indexDefinition
argument_list|)
decl_stmt|;
name|indices
operator|.
name|add
argument_list|(
name|esIdxCoord
argument_list|)
expr_stmt|;
return|return
name|esIdxCoord
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|after
parameter_list|()
block|{
name|deletedIndices
argument_list|()
expr_stmt|;
name|connectionFactory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ElasticsearchCoordinate
name|getElasticsearchCoordinate
parameter_list|(
name|NodeState
name|indexDefinition
parameter_list|)
block|{
name|ElasticsearchCoordinate
name|esCoord
init|=
name|ElasticsearchCoordinateImpl
operator|.
name|construct
argument_list|(
name|connectionFactory
argument_list|,
name|indexDefinition
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ElasticsearchTestUtils
operator|.
name|isAvailable
argument_list|(
name|esCoord
argument_list|)
operator|&&
name|usingDocker
condition|)
block|{
name|int
name|port
init|=
name|elasticsearch
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|esCoord
operator|=
operator|new
name|ElasticsearchCoordinateImpl
argument_list|(
name|connectionFactory
argument_list|,
literal|"http"
argument_list|,
literal|"localhost"
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|ElasticsearchTestUtils
operator|.
name|isAvailable
argument_list|(
name|esCoord
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|esCoord
return|;
block|}
specifier|private
name|void
name|deletedIndices
parameter_list|()
block|{
name|indices
operator|.
name|forEach
argument_list|(
name|idxCoord
lambda|->
block|{
name|DeleteIndexRequest
name|request
init|=
operator|new
name|DeleteIndexRequest
argument_list|(
name|idxCoord
operator|.
name|getEsIndexName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|idxCoord
operator|.
name|getClient
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|delete
argument_list|(
name|request
argument_list|,
name|RequestOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaned up index {}"
argument_list|,
name|idxCoord
operator|.
name|getEsIndexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to cleanup index {}"
argument_list|,
name|idxCoord
operator|.
name|getEsIndexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

