begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|FileDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|SharedDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreTest
operator|.
name|FixtureHelper
operator|.
name|DATA_STORE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|copyInputStreamToFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreUtils
operator|.
name|randomStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreTest
operator|.
name|FixtureHelper
operator|.
name|DATA_STORE
operator|.
name|CACHING_FDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreTest
operator|.
name|FixtureHelper
operator|.
name|DATA_STORE
operator|.
name|FDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|SharedDataStoreTest
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|expectedEx
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
specifier|private
name|DATA_STORE
name|type
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{index}: ({0})"
argument_list|)
specifier|public
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|fixtures
parameter_list|()
block|{
return|return
name|FixtureHelper
operator|.
name|get
argument_list|()
return|;
block|}
specifier|static
class|class
name|FixtureHelper
block|{
enum|enum
name|DATA_STORE
block|{
name|CACHING_FDS
block|,
name|FDS
block|}
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|get
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|Object
index|[]
block|{
name|CACHING_FDS
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|FDS
block|}
argument_list|)
return|;
block|}
block|}
specifier|public
name|SharedDataStoreTest
parameter_list|(
name|DATA_STORE
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|type
operator|==
name|CACHING_FDS
condition|)
block|{
name|CachingFileDataStore
name|ds
init|=
operator|new
name|CachingFileDataStore
argument_list|()
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"fsBackendPath"
argument_list|,
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|PropertiesUtil
operator|.
name|populate
argument_list|(
name|ds
argument_list|,
name|Maps
operator|.
name|fromProperties
argument_list|(
name|props
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ds
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|ds
operator|.
name|init
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|dataStore
operator|=
name|ds
expr_stmt|;
block|}
else|else
block|{
name|OakFileDataStore
name|ds
init|=
operator|new
name|OakFileDataStore
argument_list|()
decl_stmt|;
name|ds
operator|.
name|init
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|dataStore
operator|=
name|ds
expr_stmt|;
block|}
block|}
specifier|protected
name|SharedDataStore
name|dataStore
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testGetAllIdentifiersRelative1
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"./target/oak-fds-test1"
argument_list|)
decl_stmt|;
name|testGetAllIdentifiers
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAllIdentifiersRelative2
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"./target"
argument_list|,
literal|"/fds/../oak-fds-test2"
argument_list|)
decl_stmt|;
name|testGetAllIdentifiers
argument_list|(
name|FilenameUtils
operator|.
name|normalize
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAllIdentifiers
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"./target"
argument_list|,
literal|"oak-fds-test3"
argument_list|)
decl_stmt|;
name|testGetAllIdentifiers
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testGetAllIdentifiers
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|unnormalizedPath
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|testDir
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|touch
argument_list|(
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"ab/cd/ef/abcdef"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|touch
argument_list|(
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"bc/de/fg/bcdefg"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|touch
argument_list|(
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"cd/ef/gh/cdefgh"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|touch
argument_list|(
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|FileDataStore
name|fds
init|=
operator|new
name|OakFileDataStore
argument_list|()
decl_stmt|;
name|fds
operator|.
name|setPath
argument_list|(
name|unnormalizedPath
argument_list|)
expr_stmt|;
name|fds
operator|.
name|init
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|DataIdentifier
argument_list|>
name|dis
init|=
name|fds
operator|.
name|getAllIdentifiers
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|fileNames
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Iterators
operator|.
name|transform
argument_list|(
name|dis
argument_list|,
operator|new
name|Function
argument_list|<
name|DataIdentifier
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|DataIdentifier
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedNames
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"abcdef"
argument_list|,
literal|"bcdefg"
argument_list|,
literal|"cdefgh"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedNames
argument_list|,
name|fileNames
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|cleanDirectory
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
block|}
comment|// AddMetadataRecord (Backend)
annotation|@
name|Test
specifier|public
name|void
name|testBackendAddMetadataRecordsFromInputStream
parameter_list|()
throws|throws
name|Exception
block|{
name|SharedDataStore
name|fds
init|=
name|dataStore
decl_stmt|;
for|for
control|(
name|boolean
name|fromInputStream
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
control|)
block|{
name|String
name|prefix
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s.META."
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|count
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|records
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|recordName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%sname.%d"
argument_list|,
name|prefix
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|String
name|data
init|=
name|String
operator|.
name|format
argument_list|(
literal|"testData%d"
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|records
operator|.
name|put
argument_list|(
name|recordName
argument_list|,
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromInputStream
condition|)
block|{
name|fds
operator|.
name|addMetadataRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|recordName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|File
name|testFile
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|copyInputStreamToFile
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|fds
operator|.
name|addMetadataRecord
argument_list|(
name|testFile
argument_list|,
name|recordName
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
name|fds
operator|.
name|getAllMetadataRecords
argument_list|(
name|prefix
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|records
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|DataRecord
name|record
init|=
name|fds
operator|.
name|getMetadataRecord
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|record
operator|.
name|getStream
argument_list|()
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|fds
operator|.
name|deleteMetadataRecord
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fds
operator|.
name|getAllMetadataRecords
argument_list|(
name|prefix
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendAddMetadataRecordFileNotFoundThrowsDataStoreException
parameter_list|()
throws|throws
name|IOException
block|{
name|SharedDataStore
name|fds
init|=
name|dataStore
decl_stmt|;
name|File
name|testFile
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|copyInputStreamToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|delete
argument_list|()
expr_stmt|;
try|try
block|{
name|fds
operator|.
name|addMetadataRecord
argument_list|(
name|testFile
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|FileNotFoundException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendAddMetadataRecordNullInputStreamThrowsNullPointerException
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|expectedEx
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedEx
operator|.
name|expectMessage
argument_list|(
literal|"input should not be null"
argument_list|)
expr_stmt|;
name|SharedDataStore
name|fds
init|=
name|dataStore
decl_stmt|;
name|fds
operator|.
name|addMetadataRecord
argument_list|(
operator|(
name|InputStream
operator|)
literal|null
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendAddMetadataRecordNullFileThrowsNullPointerException
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|expectedEx
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedEx
operator|.
name|expectMessage
argument_list|(
literal|"input should not be null"
argument_list|)
expr_stmt|;
name|SharedDataStore
name|fds
init|=
name|dataStore
decl_stmt|;
name|fds
operator|.
name|addMetadataRecord
argument_list|(
operator|(
name|File
operator|)
literal|null
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendAddMetadataRecordNullEmptyNameThrowsIllegalArgumentException
parameter_list|()
throws|throws
name|DataStoreException
throws|,
name|IOException
block|{
name|SharedDataStore
name|fds
init|=
name|dataStore
decl_stmt|;
specifier|final
name|String
name|data
init|=
literal|"testData"
decl_stmt|;
for|for
control|(
name|boolean
name|fromInputStream
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|name
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|null
argument_list|,
literal|""
argument_list|)
control|)
block|{
try|try
block|{
if|if
condition|(
name|fromInputStream
condition|)
block|{
name|fds
operator|.
name|addMetadataRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|File
name|testFile
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|copyInputStreamToFile
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|fds
operator|.
name|addMetadataRecord
argument_list|(
name|testFile
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"name should not be empty"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// GetMetadataRecord (Backend)
annotation|@
name|Test
specifier|public
name|void
name|testBackendGetMetadataRecordInvalidName
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|SharedDataStore
name|fds
init|=
name|dataStore
decl_stmt|;
name|fds
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|"testRecord"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|fds
operator|.
name|getMetadataRecord
argument_list|(
literal|"invalid"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|)
control|)
block|{
try|try
block|{
name|fds
operator|.
name|getMetadataRecord
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect to throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
name|fds
operator|.
name|deleteMetadataRecord
argument_list|(
literal|"testRecord"
argument_list|)
expr_stmt|;
block|}
comment|// GetAllMetadataRecords (Backend)
annotation|@
name|Test
specifier|public
name|void
name|testBackendGetAllMetadataRecordsPrefixMatchesAll
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|SharedDataStore
name|fds
init|=
name|dataStore
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fds
operator|.
name|getAllMetadataRecords
argument_list|(
literal|""
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|prefixAll
init|=
literal|"prefix1"
decl_stmt|;
name|String
name|prefixSome
init|=
literal|"prefix1.prefix2"
decl_stmt|;
name|String
name|prefixOne
init|=
literal|"prefix1.prefix3"
decl_stmt|;
name|String
name|prefixNone
init|=
literal|"prefix4"
decl_stmt|;
name|fds
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s.testRecord1"
argument_list|,
name|prefixAll
argument_list|)
argument_list|)
expr_stmt|;
name|fds
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s.testRecord2"
argument_list|,
name|prefixSome
argument_list|)
argument_list|)
expr_stmt|;
name|fds
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s.testRecord3"
argument_list|,
name|prefixSome
argument_list|)
argument_list|)
expr_stmt|;
name|fds
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|4
argument_list|,
literal|10
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s.testRecord4"
argument_list|,
name|prefixOne
argument_list|)
argument_list|)
expr_stmt|;
name|fds
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|"prefix5.testRecord5"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|fds
operator|.
name|getAllMetadataRecords
argument_list|(
literal|""
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|fds
operator|.
name|getAllMetadataRecords
argument_list|(
name|prefixAll
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fds
operator|.
name|getAllMetadataRecords
argument_list|(
name|prefixSome
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fds
operator|.
name|getAllMetadataRecords
argument_list|(
name|prefixOne
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fds
operator|.
name|getAllMetadataRecords
argument_list|(
name|prefixNone
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|fds
operator|.
name|deleteAllMetadataRecords
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fds
operator|.
name|getAllMetadataRecords
argument_list|(
literal|""
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendGetAllMetadataRecordsNullPrefixThrowsNullPointerException
parameter_list|()
block|{
name|expectedEx
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedEx
operator|.
name|expectMessage
argument_list|(
literal|"prefix should not be null"
argument_list|)
expr_stmt|;
name|SharedDataStore
name|fds
init|=
name|dataStore
decl_stmt|;
name|fds
operator|.
name|getAllMetadataRecords
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// DeleteMetadataRecord (Backend)
annotation|@
name|Test
specifier|public
name|void
name|testBackendDeleteMetadataRecord
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|SharedDataStore
name|fds
init|=
name|dataStore
decl_stmt|;
name|fds
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|)
control|)
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
try|try
block|{
name|fds
operator|.
name|deleteMetadataRecord
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{ }
block|}
else|else
block|{
name|fds
operator|.
name|deleteMetadataRecord
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|fds
operator|.
name|deleteMetadataRecord
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// DeleteAllMetadataRecords (Backend)
annotation|@
name|Test
specifier|public
name|void
name|testBackendDeleteAllMetadataRecordsPrefixMatchesAll
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|SharedDataStore
name|fds
init|=
name|dataStore
decl_stmt|;
name|String
name|prefixAll
init|=
literal|"prefix1"
decl_stmt|;
name|String
name|prefixSome
init|=
literal|"prefix1.prefix2"
decl_stmt|;
name|String
name|prefixOne
init|=
literal|"prefix1.prefix3"
decl_stmt|;
name|String
name|prefixNone
init|=
literal|"prefix4"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|prefixCounts
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|prefixCounts
operator|.
name|put
argument_list|(
name|prefixAll
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|prefixCounts
operator|.
name|put
argument_list|(
name|prefixSome
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|prefixCounts
operator|.
name|put
argument_list|(
name|prefixOne
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|prefixCounts
operator|.
name|put
argument_list|(
name|prefixNone
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|prefixCounts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|fds
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s.testRecord1"
argument_list|,
name|prefixAll
argument_list|)
argument_list|)
expr_stmt|;
name|fds
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s.testRecord2"
argument_list|,
name|prefixSome
argument_list|)
argument_list|)
expr_stmt|;
name|fds
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s.testRecord3"
argument_list|,
name|prefixSome
argument_list|)
argument_list|)
expr_stmt|;
name|fds
operator|.
name|addMetadataRecord
argument_list|(
name|randomStream
argument_list|(
literal|4
argument_list|,
literal|10
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s.testRecord4"
argument_list|,
name|prefixOne
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|preCount
init|=
name|fds
operator|.
name|getAllMetadataRecords
argument_list|(
literal|""
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|fds
operator|.
name|deleteAllMetadataRecords
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|deletedCount
init|=
name|preCount
operator|-
name|fds
operator|.
name|getAllMetadataRecords
argument_list|(
literal|""
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|deletedCount
argument_list|)
expr_stmt|;
name|fds
operator|.
name|deleteAllMetadataRecords
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendDeleteAllMetadataRecordsNoRecordsNoChange
parameter_list|()
block|{
name|SharedDataStore
name|fds
init|=
name|dataStore
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fds
operator|.
name|getAllMetadataRecords
argument_list|(
literal|""
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|fds
operator|.
name|deleteAllMetadataRecords
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fds
operator|.
name|getAllMetadataRecords
argument_list|(
literal|""
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackendDeleteAllMetadataRecordsNullPrefixThrowsNullPointerException
parameter_list|()
block|{
name|expectedEx
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|SharedDataStore
name|fds
init|=
name|dataStore
decl_stmt|;
name|fds
operator|.
name|deleteAllMetadataRecords
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

