begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|Reclaimers
operator|.
name|newOldReclaimer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|GCGeneration
import|;
end_import

begin_comment
comment|/**  * Instances of this class represent the result from a compaction. Either  * succeeded, aborted or skipped.  */
end_comment

begin_class
specifier|abstract
class|class
name|CompactionResult
block|{
annotation|@
name|Nonnull
specifier|private
specifier|final
name|GCGeneration
name|currentGeneration
decl_stmt|;
specifier|private
specifier|final
name|int
name|gcCount
decl_stmt|;
specifier|private
name|CompactionResult
parameter_list|(
annotation|@
name|Nonnull
name|GCGeneration
name|currentGeneration
parameter_list|,
name|int
name|gcCount
parameter_list|)
block|{
name|this
operator|.
name|currentGeneration
operator|=
name|currentGeneration
expr_stmt|;
name|this
operator|.
name|gcCount
operator|=
name|gcCount
expr_stmt|;
block|}
comment|/**      * Result of a succeeded compaction.      *      * @param gcType          the type of the succeeded compaction operation      * @param newGeneration   the generation successfully created by compaction      * @param gcOptions       the current GC options used by compaction      * @param compactedRootId the record id of the root created by compaction      */
specifier|static
name|CompactionResult
name|succeeded
parameter_list|(
annotation|@
name|Nonnull
name|SegmentGCOptions
operator|.
name|GCType
name|gcType
parameter_list|,
annotation|@
name|Nonnull
name|GCGeneration
name|newGeneration
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|SegmentGCOptions
name|gcOptions
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|RecordId
name|compactedRootId
parameter_list|,
name|int
name|gcCount
parameter_list|)
block|{
return|return
operator|new
name|CompactionResult
argument_list|(
name|newGeneration
argument_list|,
name|gcCount
argument_list|)
block|{
annotation|@
name|Override
name|Predicate
argument_list|<
name|GCGeneration
argument_list|>
name|reclaimer
parameter_list|()
block|{
return|return
name|newOldReclaimer
argument_list|(
name|gcType
argument_list|,
name|newGeneration
argument_list|,
name|gcOptions
operator|.
name|getRetainedGenerations
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
name|RecordId
name|getCompactedRootId
parameter_list|()
block|{
return|return
name|compactedRootId
return|;
block|}
block|}
return|;
block|}
comment|/**      * Result of an aborted compaction.      *      * @param currentGeneration the current generation of the store      * @param failedGeneration  the generation that compaction attempted to      *                          create      */
specifier|static
name|CompactionResult
name|aborted
parameter_list|(
annotation|@
name|Nonnull
name|GCGeneration
name|currentGeneration
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|GCGeneration
name|failedGeneration
parameter_list|,
name|int
name|gcCount
parameter_list|)
block|{
return|return
operator|new
name|CompactionResult
argument_list|(
name|currentGeneration
argument_list|,
name|gcCount
argument_list|)
block|{
annotation|@
name|Override
name|Predicate
argument_list|<
name|GCGeneration
argument_list|>
name|reclaimer
parameter_list|()
block|{
return|return
name|Reclaimers
operator|.
name|newExactReclaimer
argument_list|(
name|failedGeneration
argument_list|)
return|;
block|}
annotation|@
name|Override
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
comment|/**      * Result serving as a placeholder for a compaction that was skipped.      *      * @param lastGCType        type of the most recent gc operation. {@link      *                          SegmentGCOptions.GCType#FULL} if none.      * @param currentGeneration the current generation of the store      * @param gcOptions         the current GC options used by compaction      */
specifier|static
name|CompactionResult
name|skipped
parameter_list|(
annotation|@
name|Nonnull
name|SegmentGCOptions
operator|.
name|GCType
name|lastGCType
parameter_list|,
annotation|@
name|Nonnull
name|GCGeneration
name|currentGeneration
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|SegmentGCOptions
name|gcOptions
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|RecordId
name|compactedRootId
parameter_list|,
name|int
name|gcCount
parameter_list|)
block|{
return|return
operator|new
name|CompactionResult
argument_list|(
name|currentGeneration
argument_list|,
name|gcCount
argument_list|)
block|{
annotation|@
name|Override
name|Predicate
argument_list|<
name|GCGeneration
argument_list|>
name|reclaimer
parameter_list|()
block|{
return|return
name|Reclaimers
operator|.
name|newOldReclaimer
argument_list|(
name|lastGCType
argument_list|,
name|currentGeneration
argument_list|,
name|gcOptions
operator|.
name|getRetainedGenerations
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
name|RecordId
name|getCompactedRootId
parameter_list|()
block|{
return|return
name|compactedRootId
return|;
block|}
block|}
return|;
block|}
specifier|static
name|CompactionResult
name|notApplicable
parameter_list|(
name|int
name|count
parameter_list|)
block|{
return|return
operator|new
name|CompactionResult
argument_list|(
name|GCGeneration
operator|.
name|NULL
argument_list|,
name|count
argument_list|)
block|{
annotation|@
name|Override
name|Predicate
argument_list|<
name|GCGeneration
argument_list|>
name|reclaimer
parameter_list|()
block|{
return|return
name|generation
lambda|->
literal|false
return|;
block|}
annotation|@
name|Override
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
name|boolean
name|isNotApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
return|;
block|}
comment|/**      * @return a predicate determining which segments to {clean up} for the      * given compaction result.      */
specifier|abstract
name|Predicate
argument_list|<
name|GCGeneration
argument_list|>
name|reclaimer
parameter_list|()
function_decl|;
comment|/**      * @return {@code true} for succeeded and skipped, {@code false} otherwise.      */
specifier|abstract
name|boolean
name|isSuccess
parameter_list|()
function_decl|;
comment|/**      * @return the record id of the compacted root on {@link #isSuccess()      * success}, {@link RecordId#NULL} otherwise.      */
name|RecordId
name|getCompactedRootId
parameter_list|()
block|{
return|return
name|RecordId
operator|.
name|NULL
return|;
block|}
name|boolean
name|isNotApplicable
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * @return a diagnostic message describing the outcome of this compaction.      */
name|String
name|gcInfo
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"gc-count=%d,gc-status=%s,store-generation=%s,reclaim-predicate=%s"
argument_list|,
name|gcCount
argument_list|,
name|isSuccess
argument_list|()
condition|?
literal|"success"
else|:
literal|"failed"
argument_list|,
name|currentGeneration
argument_list|,
name|reclaimer
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

