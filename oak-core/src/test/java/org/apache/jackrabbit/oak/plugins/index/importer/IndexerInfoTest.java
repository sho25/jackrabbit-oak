begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|importer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsInAnyOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|IndexerInfoTest
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|basics
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexerInfo
name|info
init|=
operator|new
name|IndexerInfo
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|info
operator|.
name|save
argument_list|()
expr_stmt|;
name|IndexerInfo
name|info2
init|=
name|IndexerInfo
operator|.
name|fromDirectory
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|checkpoint
argument_list|,
name|info2
operator|.
name|checkpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexDirs
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexerInfo
name|info
init|=
operator|new
name|IndexerInfo
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|info
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|indexPaths
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/foo"
argument_list|,
literal|"/bar"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|indexPath
range|:
name|indexPaths
control|)
block|{
name|File
name|indexDir
init|=
operator|new
name|File
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
argument_list|,
name|indexPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|indexMeta
init|=
operator|new
name|File
argument_list|(
name|indexDir
argument_list|,
name|IndexerInfo
operator|.
name|INDEX_METADATA_FILE_NAME
argument_list|)
decl_stmt|;
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|IndexerInfo
operator|.
name|PROP_INDEX_PATH
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
name|indexDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|PropUtils
operator|.
name|writeTo
argument_list|(
name|p
argument_list|,
name|indexMeta
argument_list|,
literal|"index info"
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|indexes
init|=
name|info
operator|.
name|getIndexes
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|indexes
operator|.
name|keySet
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"/foo"
argument_list|,
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

