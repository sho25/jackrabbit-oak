begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|NodeStateAnalyzerFactory
operator|.
name|NodeStateResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|TokenizerChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|charfilter
operator|.
name|HTMLStripCharFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|charfilter
operator|.
name|MappingCharFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|LowerCaseFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|LowerCaseTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|StopFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|WhitespaceTokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|path
operator|.
name|PathHierarchyTokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|CharArraySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|ClasspathResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|StopwordAnalyzerBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_DATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|ANL_CHAR_FILTERS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|ANL_CLASS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|ANL_LUCENE_MATCH_VERSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|ANL_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|ANL_FILTERS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|ANL_TOKENIZER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|impl
operator|.
name|TreeConstants
operator|.
name|OAK_CHILD_ORDER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|NodeStateAnalyzerFactoryTest
block|{
specifier|private
name|NodeStateAnalyzerFactory
name|factory
init|=
operator|new
name|NodeStateAnalyzerFactory
argument_list|(
name|LuceneIndexConstants
operator|.
name|VERSION
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|analyzerViaReflection
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|nb
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|nb
operator|.
name|setProperty
argument_list|(
name|ANL_CLASS
argument_list|,
name|TestAnalyzer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TestAnalyzer
name|analyzer
init|=
operator|(
name|TestAnalyzer
operator|)
name|factory
operator|.
name|createInstance
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LuceneIndexConstants
operator|.
name|VERSION
argument_list|,
name|analyzer
operator|.
name|matchVersion
argument_list|)
expr_stmt|;
name|nb
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|ANL_LUCENE_MATCH_VERSION
argument_list|,
name|Version
operator|.
name|LUCENE_31
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|analyzer
operator|=
operator|(
name|TestAnalyzer
operator|)
name|factory
operator|.
name|createInstance
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Version field not picked from config"
argument_list|,
name|Version
operator|.
name|LUCENE_31
argument_list|,
name|analyzer
operator|.
name|matchVersion
argument_list|)
expr_stmt|;
name|byte
index|[]
name|stopWords
init|=
name|newCharArraySet
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|createFileNode
argument_list|(
name|nb
argument_list|,
name|LuceneIndexConstants
operator|.
name|ANL_STOPWORDS
argument_list|,
name|stopWords
argument_list|)
expr_stmt|;
name|analyzer
operator|=
operator|(
name|TestAnalyzer
operator|)
name|factory
operator|.
name|createInstance
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Configured stopword set not used"
argument_list|,
name|analyzer
operator|.
name|getStopwordSet
argument_list|()
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|analyzerByComposition_Tokenizer
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|nb
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
name|ANL_TOKENIZER
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ANL_NAME
argument_list|,
literal|"whitespace"
argument_list|)
expr_stmt|;
name|TokenizerChain
name|analyzer
init|=
operator|(
name|TokenizerChain
operator|)
name|factory
operator|.
name|createInstance
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|WhitespaceTokenizerFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|analyzer
operator|.
name|getTokenizer
argument_list|()
operator|.
name|getClassArg
argument_list|()
argument_list|)
expr_stmt|;
name|nb
operator|.
name|child
argument_list|(
name|ANL_TOKENIZER
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ANL_NAME
argument_list|,
literal|"pathhierarchy"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"delimiter"
argument_list|,
literal|"#"
argument_list|)
expr_stmt|;
name|analyzer
operator|=
operator|(
name|TokenizerChain
operator|)
name|factory
operator|.
name|createInstance
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PathHierarchyTokenizerFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|analyzer
operator|.
name|getTokenizer
argument_list|()
operator|.
name|getClassArg
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'#'
argument_list|,
name|getValue
argument_list|(
name|analyzer
operator|.
name|getTokenizer
argument_list|()
argument_list|,
literal|"delimiter"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|analyzerByComposition_TokenFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|nb
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
name|ANL_TOKENIZER
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ANL_NAME
argument_list|,
literal|"whitespace"
argument_list|)
expr_stmt|;
name|NodeBuilder
name|filters
init|=
name|nb
operator|.
name|child
argument_list|(
name|ANL_FILTERS
argument_list|)
decl_stmt|;
name|filters
operator|.
name|setProperty
argument_list|(
name|OAK_CHILD_ORDER
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"stop"
argument_list|,
literal|"LowerCase"
argument_list|)
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
name|filters
operator|.
name|child
argument_list|(
literal|"LowerCase"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ANL_NAME
argument_list|,
literal|"LowerCase"
argument_list|)
expr_stmt|;
comment|//name is optional. Derived from nodeName
name|filters
operator|.
name|child
argument_list|(
literal|"stop"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ANL_LUCENE_MATCH_VERSION
argument_list|,
name|Version
operator|.
name|LUCENE_31
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|TokenizerChain
name|analyzer
init|=
operator|(
name|TokenizerChain
operator|)
name|factory
operator|.
name|createInstance
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|analyzer
operator|.
name|getFilters
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//check the order
name|assertEquals
argument_list|(
name|StopFilterFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|analyzer
operator|.
name|getFilters
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClassArg
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LowerCaseFilterFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|analyzer
operator|.
name|getFilters
argument_list|()
index|[
literal|1
index|]
operator|.
name|getClassArg
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|analyzer
operator|.
name|getFilters
argument_list|()
index|[
literal|0
index|]
operator|.
name|isExplicitLuceneMatchVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|analyzerByComposition_CharFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|nb
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
name|ANL_TOKENIZER
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ANL_NAME
argument_list|,
literal|"whitespace"
argument_list|)
expr_stmt|;
name|NodeBuilder
name|filters
init|=
name|nb
operator|.
name|child
argument_list|(
name|ANL_CHAR_FILTERS
argument_list|)
decl_stmt|;
name|filters
operator|.
name|setProperty
argument_list|(
name|OAK_CHILD_ORDER
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"htmlStrip"
argument_list|,
literal|"mapping"
argument_list|)
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
name|filters
operator|.
name|child
argument_list|(
literal|"mapping"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ANL_NAME
argument_list|,
literal|"mapping"
argument_list|)
expr_stmt|;
name|filters
operator|.
name|child
argument_list|(
literal|"htmlStrip"
argument_list|)
expr_stmt|;
comment|//name is optional. Derived from nodeName
name|TokenizerChain
name|analyzer
init|=
operator|(
name|TokenizerChain
operator|)
name|factory
operator|.
name|createInstance
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|analyzer
operator|.
name|getCharFilters
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//check the order
name|assertEquals
argument_list|(
name|HTMLStripCharFilterFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|analyzer
operator|.
name|getCharFilters
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClassArg
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MappingCharFilterFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|analyzer
operator|.
name|getCharFilters
argument_list|()
index|[
literal|1
index|]
operator|.
name|getClassArg
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|analyzerByComposition_FileResource
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|nb
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|nb
operator|.
name|child
argument_list|(
name|ANL_TOKENIZER
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ANL_NAME
argument_list|,
literal|"whitespace"
argument_list|)
expr_stmt|;
name|NodeBuilder
name|filters
init|=
name|nb
operator|.
name|child
argument_list|(
name|ANL_FILTERS
argument_list|)
decl_stmt|;
comment|//name is optional. Derived from nodeName
name|NodeBuilder
name|stop
init|=
name|filters
operator|.
name|child
argument_list|(
literal|"stop"
argument_list|)
decl_stmt|;
name|stop
operator|.
name|setProperty
argument_list|(
literal|"words"
argument_list|,
literal|"set1.txt, set2.txt"
argument_list|)
expr_stmt|;
name|createFileNode
argument_list|(
name|stop
argument_list|,
literal|"set1.txt"
argument_list|,
name|newCharArraySet
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|createFileNode
argument_list|(
name|stop
argument_list|,
literal|"set2.txt"
argument_list|,
name|newCharArraySet
argument_list|(
literal|"foo1"
argument_list|,
literal|"bar1"
argument_list|)
argument_list|)
expr_stmt|;
name|TokenizerChain
name|analyzer
init|=
operator|(
name|TokenizerChain
operator|)
name|factory
operator|.
name|createInstance
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|analyzer
operator|.
name|getFilters
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//check the order
name|assertEquals
argument_list|(
name|StopFilterFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|analyzer
operator|.
name|getFilters
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClassArg
argument_list|()
argument_list|)
expr_stmt|;
name|StopFilterFactory
name|sff
init|=
operator|(
name|StopFilterFactory
operator|)
name|analyzer
operator|.
name|getFilters
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|sff
operator|.
name|getStopWords
argument_list|()
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sff
operator|.
name|getStopWords
argument_list|()
operator|.
name|contains
argument_list|(
literal|"foo1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeStateResourceLoader
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|testData
init|=
literal|"hello"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|NodeBuilder
name|nb
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createFileNode
argument_list|(
name|nb
argument_list|,
literal|"foo"
argument_list|,
name|testData
argument_list|)
expr_stmt|;
name|NodeStateResourceLoader
name|loader
init|=
operator|new
name|NodeStateResourceLoader
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|,
operator|new
name|ClasspathResourceLoader
argument_list|()
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|testData
argument_list|,
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|loader
operator|.
name|openResource
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeStateAsMap
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|nb
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|nb
operator|.
name|setProperty
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|setProperty
argument_list|(
literal|"b"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
name|factory
operator|.
name|convertNodeState
argument_list|(
name|nb
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|NodeBuilder
name|createFileNode
parameter_list|(
name|NodeBuilder
name|nb
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|byte
index|[]
name|content
parameter_list|)
block|{
return|return
name|nb
operator|.
name|child
argument_list|(
name|nodeName
argument_list|)
operator|.
name|child
argument_list|(
name|JCR_CONTENT
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_DATA
argument_list|,
name|content
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|newCharArraySet
parameter_list|(
name|String
modifier|...
name|words
parameter_list|)
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|word
range|:
name|words
control|)
block|{
name|pw
operator|.
name|println
argument_list|(
name|word
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|TestAnalyzer
extends|extends
name|StopwordAnalyzerBase
block|{
specifier|final
name|Version
name|matchVersion
decl_stmt|;
specifier|public
name|TestAnalyzer
parameter_list|(
name|Version
name|matchVersion
parameter_list|)
block|{
name|super
argument_list|(
name|matchVersion
argument_list|)
expr_stmt|;
name|this
operator|.
name|matchVersion
operator|=
name|matchVersion
expr_stmt|;
block|}
specifier|public
name|TestAnalyzer
parameter_list|(
name|Version
name|version
parameter_list|,
name|CharArraySet
name|stopwords
parameter_list|)
block|{
name|super
argument_list|(
name|version
argument_list|,
name|stopwords
argument_list|)
expr_stmt|;
name|this
operator|.
name|matchVersion
operator|=
name|version
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|,
specifier|final
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|TokenStreamComponents
argument_list|(
operator|new
name|LowerCaseTokenizer
argument_list|(
name|matchVersion
argument_list|,
name|reader
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|Object
name|getValue
parameter_list|(
name|Object
name|o
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|Field
name|f
init|=
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|f
operator|.
name|get
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
end_class

end_unit

