begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_comment
comment|/**  * A concurrency test tool.  */
end_comment

begin_class
specifier|public
class|class
name|Concurrent
block|{
specifier|private
name|Concurrent
parameter_list|()
block|{     }
comment|/**      * Run a task concurrently in 2 threads for 1 second.      *      * @param message the message      * @param task the task      * @throws Exception the first exception that is thrown (if any)      */
specifier|public
specifier|static
name|void
name|run
parameter_list|(
name|String
name|message
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|Exception
block|{
name|run
argument_list|(
name|message
argument_list|,
name|task
argument_list|,
literal|2
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|run
parameter_list|(
name|String
name|message
parameter_list|,
specifier|final
name|Task
name|task
parameter_list|,
name|int
name|threadCount
parameter_list|,
name|int
name|millis
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|AtomicBoolean
name|stopped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|exception
init|=
operator|new
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
literal|"Task "
operator|+
name|i
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|stopped
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|task
operator|.
name|call
argument_list|()
expr_stmt|;
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|exception
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|stopped
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|stopped
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
if|if
condition|(
name|threadCount
operator|==
literal|1
condition|)
block|{
name|long
name|stop
init|=
name|millis
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|stop
condition|)
block|{
name|task
operator|.
name|call
argument_list|()
expr_stmt|;
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|millis
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|Throwable
name|e
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|e
operator|==
literal|null
operator|&&
name|millis
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|millis
operator|-=
literal|10
expr_stmt|;
name|e
operator|=
name|exception
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|stopped
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|e
throw|;
block|}
throw|throw
operator|(
name|Error
operator|)
name|e
throw|;
block|}
block|}
specifier|public
interface|interface
name|Task
block|{
name|void
name|call
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
block|}
end_class

end_unit

