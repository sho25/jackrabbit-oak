begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|input
operator|.
name|NullInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|FileDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|junit
operator|.
name|TemporaryPort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentTestConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|client
operator|.
name|StandbyClientSync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|server
operator|.
name|StandbyServerSync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|test
operator|.
name|TemporaryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|test
operator|.
name|TemporaryFileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|RuleChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_class
specifier|public
class|class
name|StandbySegmentBlobTestIT
extends|extends
name|TestBase
block|{
comment|// `BLOB_SIZE` has to be chosen in such a way that is both:
comment|//
comment|// - Less than or equal to `minRecordLength` in the Blob Store. This is
comment|//   necessary in order to create a sufficiently long blob ID.
comment|// - Greater than or equal to `Segment.BLOB_ID_SMALL_LIMIT` in order to save
comment|//   the blob ID as a large, external blob ID.
comment|// - Greater than or equal to `Segment.MEDIUM_LIMIT`, otherwise the content
comment|//   of the binary will be written as a mere value record instead of a
comment|//   binary ID referencing an external binary.
comment|//
comment|// Since `Segment.MEDIUM_LIMIT` is the largest of the constants above, it is
comment|// sufficient to set `BLOB_SIZE` to `Segment.MEDIUM_LIMIT`.
specifier|private
specifier|static
specifier|final
name|int
name|BLOB_SIZE
init|=
literal|2
operator|*
name|SegmentTestConstants
operator|.
name|MEDIUM_LIMIT
decl_stmt|;
specifier|private
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|TemporaryBlobStore
name|blobStore
init|=
operator|new
name|TemporaryBlobStore
argument_list|(
name|folder
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureDataStore
parameter_list|(
name|FileDataStore
name|dataStore
parameter_list|)
block|{
name|dataStore
operator|.
name|setMinRecordLength
argument_list|(
name|BLOB_SIZE
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|private
name|TemporaryFileStore
name|serverFileStore
init|=
operator|new
name|TemporaryFileStore
argument_list|(
name|folder
argument_list|,
name|blobStore
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|TemporaryFileStore
name|clientFileStore
init|=
operator|new
name|TemporaryFileStore
argument_list|(
name|folder
argument_list|,
name|blobStore
argument_list|,
literal|true
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryPort
name|serverPort
init|=
operator|new
name|TemporaryPort
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|RuleChain
name|chain
init|=
name|RuleChain
operator|.
name|outerRule
argument_list|(
name|folder
argument_list|)
operator|.
name|around
argument_list|(
name|blobStore
argument_list|)
operator|.
name|around
argument_list|(
name|serverFileStore
argument_list|)
operator|.
name|around
argument_list|(
name|clientFileStore
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSyncWithLongBlobId
parameter_list|()
throws|throws
name|Exception
block|{
name|FileStore
name|primary
init|=
name|serverFileStore
operator|.
name|fileStore
argument_list|()
decl_stmt|;
name|FileStore
name|secondary
init|=
name|clientFileStore
operator|.
name|fileStore
argument_list|()
decl_stmt|;
name|NodeStore
name|store
init|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|primary
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
init|(
name|StandbyServerSync
name|serverSync
init|=
operator|new
name|StandbyServerSync
argument_list|(
name|serverPort
operator|.
name|getPort
argument_list|()
argument_list|,
name|primary
argument_list|,
name|MB
argument_list|)
init|;
name|StandbyClientSync
name|clientSync
operator|=
operator|new
name|StandbyClientSync
argument_list|(
name|getServerHost
argument_list|()
argument_list|,
name|serverPort
operator|.
name|getPort
argument_list|()
argument_list|,
name|secondary
argument_list|,
literal|false
argument_list|,
name|getClientTimeout
argument_list|()
argument_list|,
literal|false
argument_list|,
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|)
init|)
block|{
name|serverSync
operator|.
name|start
argument_list|()
expr_stmt|;
name|addTestContent
argument_list|(
name|store
argument_list|,
literal|"server"
argument_list|)
expr_stmt|;
name|primary
operator|.
name|flush
argument_list|()
expr_stmt|;
name|clientSync
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|primary
operator|.
name|getHead
argument_list|()
argument_list|,
name|secondary
operator|.
name|getHead
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyState
name|ps
init|=
name|secondary
operator|.
name|getHead
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"root"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"server"
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"testBlob"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|BINARY
operator|.
name|tag
argument_list|()
argument_list|,
name|ps
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
argument_list|)
expr_stmt|;
name|Blob
name|b
init|=
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|BLOB_SIZE
argument_list|,
name|b
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|addTestContent
parameter_list|(
name|NodeStore
name|store
parameter_list|,
name|String
name|child
parameter_list|)
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|content
init|=
name|builder
operator|.
name|child
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|content
operator|.
name|setProperty
argument_list|(
literal|"ts"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|Blob
name|blob
init|=
name|store
operator|.
name|createBlob
argument_list|(
operator|new
name|NullInputStream
argument_list|(
name|BLOB_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|content
operator|.
name|setProperty
argument_list|(
literal|"testBlob"
argument_list|,
name|blob
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

