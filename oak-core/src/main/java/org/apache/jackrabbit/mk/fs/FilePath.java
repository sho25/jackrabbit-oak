begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * A path to a file. It similar to the Java 7<code>java.nio.file.Path</code>,  * but simpler, and works with older versions of Java. It also implements the  * relevant methods found in<code>java.nio.file.FileSystem</code> and  *<code>FileSystems</code>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|FilePath
block|{
specifier|private
specifier|static
specifier|final
name|FilePath
name|DEFAULT
init|=
operator|new
name|FilePathDisk
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|FilePath
argument_list|>
name|providers
decl_stmt|;
comment|/**      * The prefix for temporary files.      */
specifier|private
specifier|static
name|String
name|tempRandom
decl_stmt|;
specifier|private
specifier|static
name|long
name|tempSequence
decl_stmt|;
comment|/**      * The complete path (which may be absolute or relative, depending on the      * file system).      */
specifier|protected
name|String
name|name
decl_stmt|;
comment|/**      * Get the file path object for the given path.      * This method is similar to Java 7<code>java.nio.file.FileSystem.getPath</code>.      * Windows-style '\' is replaced with '/'.      *      * @param path the path      * @return the file path object      */
specifier|public
specifier|static
name|FilePath
name|get
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|path
operator|=
name|path
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|2
condition|)
block|{
comment|// use the default provider if no prefix or
comment|// only a single character (drive name)
return|return
name|DEFAULT
operator|.
name|getPath
argument_list|(
name|path
argument_list|)
return|;
block|}
name|String
name|scheme
init|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|registerDefaultProviders
argument_list|()
expr_stmt|;
name|FilePath
name|p
init|=
name|providers
operator|.
name|get
argument_list|(
name|scheme
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
comment|// provider not found - use the default
name|p
operator|=
name|DEFAULT
expr_stmt|;
block|}
return|return
name|p
operator|.
name|getPath
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|registerDefaultProviders
parameter_list|()
block|{
if|if
condition|(
name|providers
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|FilePath
argument_list|>
name|map
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FilePath
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
operator|new
name|String
index|[]
block|{
literal|"org.apache.jackrabbit.mk.fs.FilePathDisk"
block|,
literal|"org.apache.jackrabbit.mk.fs.FilePathCache"
block|}
control|)
block|{
try|try
block|{
name|FilePath
name|p
init|=
operator|(
name|FilePath
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|c
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|p
operator|.
name|getScheme
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore - the files may be excluded in purpose
block|}
block|}
name|providers
operator|=
name|map
expr_stmt|;
block|}
block|}
comment|/**      * Register a file provider.      *      * @param provider the file provider      */
specifier|public
specifier|static
name|void
name|register
parameter_list|(
name|FilePath
name|provider
parameter_list|)
block|{
name|registerDefaultProviders
argument_list|()
expr_stmt|;
name|providers
operator|.
name|put
argument_list|(
name|provider
operator|.
name|getScheme
argument_list|()
argument_list|,
name|provider
argument_list|)
expr_stmt|;
block|}
comment|/**      * Unregister a file provider.      *      * @param provider the file provider      */
specifier|public
specifier|static
name|void
name|unregister
parameter_list|(
name|FilePath
name|provider
parameter_list|)
block|{
name|registerDefaultProviders
argument_list|()
expr_stmt|;
name|providers
operator|.
name|remove
argument_list|(
name|provider
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the size of a file in bytes      *      * @return the size in bytes      */
specifier|public
specifier|abstract
name|long
name|size
parameter_list|()
function_decl|;
comment|/**      * Rename a file if this is allowed.      *      * @param newName the new fully qualified file name      */
specifier|public
specifier|abstract
name|void
name|moveTo
parameter_list|(
name|FilePath
name|newName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Create a new file.      *      * @return true if creating was successful      */
specifier|public
specifier|abstract
name|boolean
name|createFile
parameter_list|()
function_decl|;
comment|/**      * Checks if a file exists.      *      * @return true if it exists      */
specifier|public
specifier|abstract
name|boolean
name|exists
parameter_list|()
function_decl|;
comment|/**      * Delete a file or directory if it exists.      * Directories may only be deleted if they are empty.      */
specifier|public
specifier|abstract
name|void
name|delete
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * List the files and directories in the given directory.      *      * @return the list of fully qualified file names      */
specifier|public
specifier|abstract
name|List
argument_list|<
name|FilePath
argument_list|>
name|newDirectoryStream
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Normalize a file name.      *      * @return the normalized file name      */
specifier|public
specifier|abstract
name|FilePath
name|toRealPath
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Get the parent directory of a file or directory.      *      * @return the parent directory name      */
specifier|public
specifier|abstract
name|FilePath
name|getParent
parameter_list|()
function_decl|;
comment|/**      * Check if it is a file or a directory.      *      * @return true if it is a directory      */
specifier|public
specifier|abstract
name|boolean
name|isDirectory
parameter_list|()
function_decl|;
comment|/**      * Check if the file name includes a path.      *      * @return if the file name is absolute      */
specifier|public
specifier|abstract
name|boolean
name|isAbsolute
parameter_list|()
function_decl|;
comment|/**      * Get the last modified date of a file      *      * @return the last modified date      */
specifier|public
specifier|abstract
name|long
name|lastModified
parameter_list|()
function_decl|;
comment|/**      * Check if the file is writable.      *      * @return if the file is writable      */
specifier|public
specifier|abstract
name|boolean
name|canWrite
parameter_list|()
function_decl|;
comment|/**      * Create a directory (all required parent directories already exist).      */
specifier|public
specifier|abstract
name|void
name|createDirectory
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Get the file or directory name (the last element of the path).      *      * @return the last element of the path      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
name|int
name|idx
init|=
name|Math
operator|.
name|max
argument_list|(
name|name
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
argument_list|,
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|idx
operator|<
literal|0
condition|?
name|name
else|:
name|name
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
return|;
block|}
comment|/**      * Create an output stream to write into the file.      *      * @param append if true, the file will grow, if false, the file will be      *            truncated first      * @return the output stream      */
specifier|public
specifier|abstract
name|OutputStream
name|newOutputStream
parameter_list|(
name|boolean
name|append
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Open a random access file object.      *      * @param mode the access mode. Supported are r, rw, rws, rwd      * @return the file object      */
specifier|public
specifier|abstract
name|FileChannel
name|open
parameter_list|(
name|String
name|mode
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Create an input stream to read from the file.      *      * @return the input stream      */
specifier|public
specifier|abstract
name|InputStream
name|newInputStream
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Disable the ability to write.      *      * @return true if the call was successful      */
specifier|public
specifier|abstract
name|boolean
name|setReadOnly
parameter_list|()
function_decl|;
comment|/**      * Create a new temporary file.      *      * @param suffix the suffix      * @param deleteOnExit if the file should be deleted when the virtual      *            machine exists      * @param inTempDir if the file should be stored in the temporary directory      * @return the name of the created file      */
specifier|public
name|FilePath
name|createTempFile
parameter_list|(
name|String
name|suffix
parameter_list|,
name|boolean
name|deleteOnExit
parameter_list|,
name|boolean
name|inTempDir
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|FilePath
name|p
init|=
name|getPath
argument_list|(
name|name
operator|+
name|getNextTempFileNamePart
argument_list|(
literal|false
argument_list|)
operator|+
name|suffix
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|p
operator|.
name|createFile
argument_list|()
condition|)
block|{
comment|// in theory, the random number could collide
name|getNextTempFileNamePart
argument_list|(
literal|true
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|p
operator|.
name|open
argument_list|(
literal|"rw"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|p
return|;
block|}
block|}
comment|/**      * Get the next temporary file name part (the part in the middle).      *      * @param newRandom if the random part of the filename should change      * @return the file name part      */
specifier|protected
specifier|static
specifier|synchronized
name|String
name|getNextTempFileNamePart
parameter_list|(
name|boolean
name|newRandom
parameter_list|)
block|{
if|if
condition|(
name|newRandom
operator|||
name|tempRandom
operator|==
literal|null
condition|)
block|{
name|byte
index|[]
name|prefix
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|tempRandom
operator|=
name|StringUtils
operator|.
name|convertBytesToHex
argument_list|(
name|prefix
argument_list|)
operator|+
literal|"."
expr_stmt|;
block|}
return|return
name|tempRandom
operator|+
name|tempSequence
operator|++
return|;
block|}
comment|/**      * Get the string representation. The returned string can be used to      * construct a new object.      *      * @return the path as a string      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Get the scheme (prefix) for this file provider.      * This is similar to<code>java.nio.file.spi.FileSystemProvider.getScheme</code>.      *      * @return the scheme      */
specifier|public
specifier|abstract
name|String
name|getScheme
parameter_list|()
function_decl|;
comment|/**      * Convert a file to a path. This is similar to      *<code>java.nio.file.spi.FileSystemProvider.getPath</code>, but may      * return an object even if the scheme doesn't match in case of the the      * default file provider.      *      * @param path the path      * @return the file path object      */
specifier|public
specifier|abstract
name|FilePath
name|getPath
parameter_list|(
name|String
name|path
parameter_list|)
function_decl|;
comment|/**      * Append an element to the path.      * This is similar to<code>java.nio.file.spi.FileSystemProvider.resolve</code>.      *      * @param other the relative path (might be null)      * @return the resolved path      */
specifier|public
specifier|abstract
name|FilePath
name|resolve
parameter_list|(
name|String
name|other
parameter_list|)
function_decl|;
block|}
end_class

end_unit

