begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|container
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|AzurePersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|AzureUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|AzuriteDockerRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|InvalidFileStoreVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobContainer
import|;
end_import

begin_class
specifier|public
class|class
name|SegmentAzureNodeStoreContainer
implements|implements
name|NodeStoreContainer
block|{
specifier|private
specifier|static
specifier|final
name|String
name|AZURE_ACCOUNT_NAME
init|=
literal|"devstoreaccount1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|AZURE_ACCOUNT_KEY
init|=
literal|"Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw=="
decl_stmt|;
specifier|private
specifier|final
name|String
name|dir
decl_stmt|;
specifier|private
specifier|final
name|BlobStoreContainer
name|blob
decl_stmt|;
specifier|private
specifier|final
name|CloudBlobContainer
name|container
decl_stmt|;
specifier|private
specifier|final
name|int
name|mappedPort
decl_stmt|;
specifier|private
name|File
name|tmpDir
decl_stmt|;
specifier|private
name|FileStore
name|fs
decl_stmt|;
specifier|public
name|SegmentAzureNodeStoreContainer
parameter_list|(
name|AzuriteDockerRule
name|azurite
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|azurite
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SegmentAzureNodeStoreContainer
parameter_list|(
name|AzuriteDockerRule
name|azurite
parameter_list|,
name|String
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|azurite
argument_list|,
literal|null
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SegmentAzureNodeStoreContainer
parameter_list|(
name|AzuriteDockerRule
name|azurite
parameter_list|,
name|BlobStoreContainer
name|blob
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|azurite
argument_list|,
name|blob
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SegmentAzureNodeStoreContainer
parameter_list|(
name|AzuriteDockerRule
name|azurite
parameter_list|,
name|BlobStoreContainer
name|blob
parameter_list|,
name|String
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|blob
operator|=
name|blob
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
operator|==
literal|null
condition|?
literal|"repository"
else|:
name|dir
expr_stmt|;
try|try
block|{
name|this
operator|.
name|container
operator|=
name|azurite
operator|.
name|getContainer
argument_list|(
literal|"oak-test"
argument_list|)
expr_stmt|;
name|this
operator|.
name|mappedPort
operator|=
name|azurite
operator|.
name|getMappedPort
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidKeyException
decl||
name|URISyntaxException
decl||
name|StorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NodeStore
name|open
parameter_list|()
throws|throws
name|IOException
block|{
name|AzurePersistence
name|azPersistence
init|=
literal|null
decl_stmt|;
try|try
block|{
name|azPersistence
operator|=
operator|new
name|AzurePersistence
argument_list|(
name|container
operator|.
name|getDirectoryReference
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|tmpDir
operator|=
name|Files
operator|.
name|createTempDir
argument_list|()
expr_stmt|;
name|FileStoreBuilder
name|builder
init|=
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
argument_list|(
name|tmpDir
argument_list|)
operator|.
name|withCustomPersistence
argument_list|(
name|azPersistence
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|blob
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|withBlobStore
argument_list|(
name|blob
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fs
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidFileStoreVersionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|fs
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|tmpDir
operator|!=
literal|null
condition|)
block|{
name|tmpDir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clean
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|AzureUtilities
operator|.
name|deleteAllEntries
argument_list|(
name|container
operator|.
name|getDirectoryReference
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
name|StringBuilder
name|description
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"az:"
argument_list|)
decl_stmt|;
name|description
operator|.
name|append
argument_list|(
literal|"DefaultEndpointsProtocol=https;"
argument_list|)
expr_stmt|;
name|description
operator|.
name|append
argument_list|(
literal|"AccountName="
argument_list|)
operator|.
name|append
argument_list|(
name|AZURE_ACCOUNT_NAME
argument_list|)
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
name|description
operator|.
name|append
argument_list|(
literal|"AccountKey="
argument_list|)
operator|.
name|append
argument_list|(
name|AZURE_ACCOUNT_KEY
argument_list|)
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
name|description
operator|.
name|append
argument_list|(
literal|"BlobEndpoint=http://127.0.0.1:"
argument_list|)
operator|.
name|append
argument_list|(
name|mappedPort
argument_list|)
operator|.
name|append
argument_list|(
literal|"/devstoreaccount1;"
argument_list|)
expr_stmt|;
name|description
operator|.
name|append
argument_list|(
literal|"ContainerName="
argument_list|)
operator|.
name|append
argument_list|(
name|container
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|description
operator|.
name|append
argument_list|(
literal|"Directory="
argument_list|)
operator|.
name|append
argument_list|(
name|dir
argument_list|)
expr_stmt|;
return|return
name|description
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

