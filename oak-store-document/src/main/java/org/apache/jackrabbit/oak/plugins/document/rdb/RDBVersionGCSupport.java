begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|filter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|SplitDocType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|RevisionVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|VersionGCSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDocumentStore
operator|.
name|QueryCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDocumentStore
operator|.
name|UnsupportedIndexedPropertyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|CloseableIterable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|AbstractIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * RDB specific version of {@link VersionGCSupport} which uses an extended query  * interface to fetch required {@link NodeDocument}s.  */
end_comment

begin_class
specifier|public
class|class
name|RDBVersionGCSupport
extends|extends
name|VersionGCSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RDBVersionGCSupport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|RDBDocumentStore
name|store
decl_stmt|;
comment|// 1: seek using historical, paging mode
comment|// 2: use custom single query directly using RDBDocumentStore API
specifier|private
specifier|static
specifier|final
name|int
name|MODE
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULTMODE
init|=
literal|2
decl_stmt|;
static|static
block|{
name|String
name|propName
init|=
name|RDBVersionGCSupport
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".MODE"
decl_stmt|;
name|String
name|value
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|,
literal|""
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|value
condition|)
block|{
case|case
literal|""
case|:
name|MODE
operator|=
name|DEFAULTMODE
expr_stmt|;
break|break;
case|case
literal|"1"
case|:
name|MODE
operator|=
literal|1
expr_stmt|;
break|break;
case|case
literal|"2"
case|:
name|MODE
operator|=
literal|2
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Ignoring unexpected value '"
operator|+
name|value
operator|+
literal|"' for system property "
operator|+
name|propName
argument_list|)
expr_stmt|;
name|MODE
operator|=
name|DEFAULTMODE
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|DEFAULTMODE
operator|!=
name|MODE
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Strategy for "
operator|+
name|RDBVersionGCSupport
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" set to "
operator|+
name|MODE
operator|+
literal|" (via system property "
operator|+
name|propName
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|RDBVersionGCSupport
parameter_list|(
name|RDBDocumentStore
name|store
parameter_list|)
block|{
name|super
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|getPossiblyDeletedDocs
parameter_list|(
specifier|final
name|long
name|fromModified
parameter_list|,
specifier|final
name|long
name|toModified
parameter_list|)
block|{
name|List
argument_list|<
name|QueryCondition
argument_list|>
name|conditions
init|=
operator|new
name|ArrayList
argument_list|<
name|QueryCondition
argument_list|>
argument_list|()
decl_stmt|;
name|conditions
operator|.
name|add
argument_list|(
operator|new
name|QueryCondition
argument_list|(
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|,
literal|"="
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|conditions
operator|.
name|add
argument_list|(
operator|new
name|QueryCondition
argument_list|(
name|NodeDocument
operator|.
name|MODIFIED_IN_SECS
argument_list|,
literal|"<"
argument_list|,
name|NodeDocument
operator|.
name|getModifiedInSecs
argument_list|(
name|toModified
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|conditions
operator|.
name|add
argument_list|(
operator|new
name|QueryCondition
argument_list|(
name|NodeDocument
operator|.
name|MODIFIED_IN_SECS
argument_list|,
literal|">="
argument_list|,
name|NodeDocument
operator|.
name|getModifiedInSecs
argument_list|(
name|fromModified
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|MODE
operator|==
literal|1
condition|)
block|{
return|return
name|getIterator
argument_list|(
name|RDBDocumentStore
operator|.
name|EMPTY_KEY_PATTERN
argument_list|,
name|conditions
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|store
operator|.
name|queryAsIterable
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|RDBDocumentStore
operator|.
name|EMPTY_KEY_PATTERN
argument_list|,
name|conditions
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|identifyGarbage
parameter_list|(
specifier|final
name|Set
argument_list|<
name|SplitDocType
argument_list|>
name|gcTypes
parameter_list|,
specifier|final
name|RevisionVector
name|sweepRevs
parameter_list|,
specifier|final
name|long
name|oldestRevTimeStamp
parameter_list|)
block|{
if|if
condition|(
name|MODE
operator|==
literal|1
condition|)
block|{
return|return
name|identifyGarbageMode1
argument_list|(
name|gcTypes
argument_list|,
name|sweepRevs
argument_list|,
name|oldestRevTimeStamp
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|identifyGarbageMode2
argument_list|(
name|gcTypes
argument_list|,
name|sweepRevs
argument_list|,
name|oldestRevTimeStamp
argument_list|)
return|;
block|}
block|}
specifier|private
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|getSplitDocuments
parameter_list|()
block|{
name|List
argument_list|<
name|QueryCondition
argument_list|>
name|conditions
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
comment|// absent support for SDTYPE as indexed property: exclude those
comment|// documents from the query which definitively aren't split documents
name|List
argument_list|<
name|String
argument_list|>
name|excludeKeyPatterns
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"_:/%"
argument_list|,
literal|"__:/%"
argument_list|,
literal|"___:/%"
argument_list|)
decl_stmt|;
return|return
name|getIterator
argument_list|(
name|excludeKeyPatterns
argument_list|,
name|conditions
argument_list|)
return|;
block|}
specifier|private
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|identifyGarbageMode1
parameter_list|(
specifier|final
name|Set
argument_list|<
name|SplitDocType
argument_list|>
name|gcTypes
parameter_list|,
specifier|final
name|RevisionVector
name|sweepRevs
parameter_list|,
specifier|final
name|long
name|oldestRevTimeStamp
parameter_list|)
block|{
return|return
name|filter
argument_list|(
name|getSplitDocuments
argument_list|()
argument_list|,
name|getGarbageCheckPredicate
argument_list|(
name|gcTypes
argument_list|,
name|sweepRevs
argument_list|,
name|oldestRevTimeStamp
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Predicate
argument_list|<
name|NodeDocument
argument_list|>
name|getGarbageCheckPredicate
parameter_list|(
specifier|final
name|Set
argument_list|<
name|SplitDocType
argument_list|>
name|gcTypes
parameter_list|,
specifier|final
name|RevisionVector
name|sweepRevs
parameter_list|,
specifier|final
name|long
name|oldestRevTimeStamp
parameter_list|)
block|{
return|return
operator|new
name|Predicate
argument_list|<
name|NodeDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeDocument
name|doc
parameter_list|)
block|{
return|return
name|gcTypes
operator|.
name|contains
argument_list|(
name|doc
operator|.
name|getSplitDocType
argument_list|()
argument_list|)
operator|&&
name|doc
operator|.
name|hasAllRevisionLessThan
argument_list|(
name|oldestRevTimeStamp
argument_list|)
operator|&&
operator|!
name|isDefaultNoBranchSplitNewerThan
argument_list|(
name|doc
argument_list|,
name|sweepRevs
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|private
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|identifyGarbageMode2
parameter_list|(
specifier|final
name|Set
argument_list|<
name|SplitDocType
argument_list|>
name|gcTypes
parameter_list|,
specifier|final
name|RevisionVector
name|sweepRevs
parameter_list|,
specifier|final
name|long
name|oldestRevTimeStamp
parameter_list|)
block|{
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|it1
decl_stmt|;
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|it2
decl_stmt|;
name|String
name|name1
decl_stmt|,
name|name2
decl_stmt|;
comment|// for schema 0 or 1 rows, we'll have to constrain the path
name|List
argument_list|<
name|String
argument_list|>
name|excludeKeyPatterns
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"_:/%"
argument_list|,
literal|"__:/%"
argument_list|,
literal|"___:/%"
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|gcTypeCodes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|SplitDocType
name|type
range|:
name|gcTypes
control|)
block|{
name|gcTypeCodes
operator|.
name|add
argument_list|(
name|type
operator|.
name|typeCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|QueryCondition
argument_list|>
name|conditions1
init|=
operator|new
name|ArrayList
argument_list|<
name|QueryCondition
argument_list|>
argument_list|()
decl_stmt|;
name|conditions1
operator|.
name|add
argument_list|(
operator|new
name|QueryCondition
argument_list|(
name|NodeDocument
operator|.
name|SD_TYPE
argument_list|,
literal|"in"
argument_list|,
name|gcTypeCodes
argument_list|)
argument_list|)
expr_stmt|;
name|conditions1
operator|.
name|add
argument_list|(
operator|new
name|QueryCondition
argument_list|(
name|NodeDocument
operator|.
name|SD_MAX_REV_TIME_IN_SECS
argument_list|,
literal|"<="
argument_list|,
name|NodeDocument
operator|.
name|getModifiedInSecs
argument_list|(
name|oldestRevTimeStamp
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|conditions1
operator|.
name|add
argument_list|(
operator|new
name|QueryCondition
argument_list|(
name|RDBDocumentStore
operator|.
name|VERSIONPROP
argument_list|,
literal|">="
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|name1
operator|=
literal|"version 2 query"
expr_stmt|;
name|it1
operator|=
name|store
operator|.
name|queryAsIterable
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|conditions1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueryCondition
argument_list|>
name|conditions2
init|=
operator|new
name|ArrayList
argument_list|<
name|QueryCondition
argument_list|>
argument_list|()
decl_stmt|;
name|conditions2
operator|.
name|add
argument_list|(
operator|new
name|QueryCondition
argument_list|(
name|RDBDocumentStore
operator|.
name|VERSIONPROP
argument_list|,
literal|"null or<"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|it2
operator|=
name|store
operator|.
name|queryAsIterable
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|excludeKeyPatterns
argument_list|,
name|conditions2
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|name2
operator|=
literal|"version<2 fallback on "
operator|+
name|excludeKeyPatterns
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedIndexedPropertyException
name|ex
parameter_list|)
block|{
comment|// this will happen if we query a table that doesn't have the SD*
comment|// columns - create a new query without the constraint, and let the
comment|// Java code filter the results
name|it1
operator|=
name|store
operator|.
name|queryAsIterable
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|excludeKeyPatterns
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|it2
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
name|name1
operator|=
literal|"version<2 fallback on "
operator|+
name|excludeKeyPatterns
expr_stmt|;
name|name2
operator|=
literal|""
expr_stmt|;
block|}
specifier|final
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|fit1
init|=
name|it1
decl_stmt|;
specifier|final
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|fit2
init|=
name|it2
decl_stmt|;
name|Predicate
argument_list|<
name|NodeDocument
argument_list|>
name|pred
init|=
name|getGarbageCheckPredicate
argument_list|(
name|gcTypes
argument_list|,
name|sweepRevs
argument_list|,
name|oldestRevTimeStamp
argument_list|)
decl_stmt|;
specifier|final
name|CountingPredicate
argument_list|<
name|NodeDocument
argument_list|>
name|cp1
init|=
operator|new
name|CountingPredicate
argument_list|<
name|NodeDocument
argument_list|>
argument_list|(
name|name1
argument_list|,
name|pred
argument_list|)
decl_stmt|;
specifier|final
name|CountingPredicate
argument_list|<
name|NodeDocument
argument_list|>
name|cp2
init|=
operator|new
name|CountingPredicate
argument_list|<
name|NodeDocument
argument_list|>
argument_list|(
name|name2
argument_list|,
name|pred
argument_list|)
decl_stmt|;
return|return
name|CloseableIterable
operator|.
name|wrap
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|Iterables
operator|.
name|filter
argument_list|(
name|fit1
argument_list|,
name|cp1
argument_list|)
argument_list|,
name|Iterables
operator|.
name|filter
argument_list|(
name|fit2
argument_list|,
name|cp2
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|Utils
operator|.
name|closeIfCloseable
argument_list|(
name|fit1
argument_list|)
expr_stmt|;
name|Utils
operator|.
name|closeIfCloseable
argument_list|(
name|fit2
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|stats1
init|=
name|cp1
operator|.
name|getStats
argument_list|()
decl_stmt|;
name|String
name|stats2
init|=
name|cp2
operator|.
name|getStats
argument_list|()
decl_stmt|;
name|String
name|message
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|stats1
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|message
operator|=
name|stats1
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|stats2
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|message
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|message
operator|+=
literal|", "
expr_stmt|;
block|}
name|message
operator|+=
name|stats2
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|message
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|CountingPredicate
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Predicate
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|Predicate
argument_list|<
name|T
argument_list|>
name|predicate
decl_stmt|;
specifier|private
name|int
name|count
decl_stmt|,
name|matches
decl_stmt|;
specifier|public
name|CountingPredicate
parameter_list|(
name|String
name|name
parameter_list|,
name|Predicate
argument_list|<
name|T
argument_list|>
name|predicate
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|predicate
operator|=
name|predicate
expr_stmt|;
block|}
specifier|public
name|String
name|getStats
parameter_list|()
block|{
return|return
name|count
operator|==
literal|0
condition|?
literal|""
else|:
operator|(
literal|"Predicate statistics for '"
operator|+
name|name
operator|+
literal|"': "
operator|+
name|matches
operator|+
literal|"/"
operator|+
name|count
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|T
name|doc
parameter_list|)
block|{
name|count
operator|+=
literal|1
expr_stmt|;
name|boolean
name|match
init|=
name|predicate
operator|.
name|apply
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|matches
operator|+=
operator|(
name|match
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|match
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getOldestDeletedOnceTimestamp
parameter_list|(
name|Clock
name|clock
parameter_list|,
name|long
name|precisionMs
parameter_list|)
block|{
name|long
name|modifiedMs
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getOldestDeletedOnceTimestamp()<- start"
argument_list|)
expr_stmt|;
try|try
block|{
name|long
name|modifiedSec
init|=
name|store
operator|.
name|getMinValue
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|NodeDocument
operator|.
name|MODIFIED_IN_SECS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|RDBDocumentStore
operator|.
name|EMPTY_KEY_PATTERN
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|QueryCondition
argument_list|(
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|,
literal|"="
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|modifiedMs
operator|=
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|modifiedSec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentStoreException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getMinValue(MODIFIED)"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|modifiedMs
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getOldestDeletedOnceTimestamp() -> {}"
argument_list|,
name|Utils
operator|.
name|timestampToString
argument_list|(
name|modifiedMs
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|modifiedMs
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getOldestDeletedOnceTimestamp() -> none found, return current time"
argument_list|)
expr_stmt|;
return|return
name|clock
operator|.
name|getTime
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDeletedOnceCount
parameter_list|()
block|{
return|return
name|store
operator|.
name|queryCount
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|RDBDocumentStore
operator|.
name|EMPTY_KEY_PATTERN
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|QueryCondition
argument_list|(
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|,
literal|"="
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|getIterator
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|excludeKeyPatterns
parameter_list|,
specifier|final
name|List
argument_list|<
name|QueryCondition
argument_list|>
name|conditions
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|NodeDocument
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|AbstractIterator
argument_list|<
name|NodeDocument
argument_list|>
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|int
name|BATCH_SIZE
init|=
literal|100
decl_stmt|;
specifier|private
name|String
name|startId
init|=
name|NodeDocument
operator|.
name|MIN_ID_VALUE
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|NodeDocument
argument_list|>
name|batch
init|=
name|nextBatch
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|NodeDocument
name|computeNext
parameter_list|()
block|{
comment|// read next batch if necessary
if|if
condition|(
operator|!
name|batch
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|batch
operator|=
name|nextBatch
argument_list|()
expr_stmt|;
block|}
name|NodeDocument
name|doc
decl_stmt|;
if|if
condition|(
name|batch
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|doc
operator|=
name|batch
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// remember current id
name|startId
operator|=
name|doc
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|=
name|endOfData
argument_list|()
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
specifier|private
name|Iterator
argument_list|<
name|NodeDocument
argument_list|>
name|nextBatch
parameter_list|()
block|{
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|result
init|=
name|store
operator|.
name|query
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|startId
argument_list|,
name|NodeDocument
operator|.
name|MAX_ID_VALUE
argument_list|,
name|excludeKeyPatterns
argument_list|,
name|conditions
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

