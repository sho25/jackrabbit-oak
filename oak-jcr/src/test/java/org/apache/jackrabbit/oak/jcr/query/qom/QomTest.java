begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|And
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|BindVariableValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|ChildNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|ChildNodeJoinCondition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Column
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Comparison
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|DescendantNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|DescendantNodeJoinCondition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|EquiJoinCondition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|FullTextSearch
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|FullTextSearchScore
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Length
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|LowerCase
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|NodeLocalName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|NodeName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Not
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Or
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|PropertyExistence
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|QueryObjectModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|QueryObjectModelConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|QueryObjectModelFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|SameNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|SameNodeJoinCondition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Selector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|UpperCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|AbstractRepositoryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests the QueryObjectModelFactory and other QOM classes.  */
end_comment

begin_class
specifier|public
class|class
name|QomTest
extends|extends
name|AbstractRepositoryTest
block|{
specifier|private
name|ValueFactory
name|vf
decl_stmt|;
specifier|private
name|QueryObjectModelFactory
name|f
decl_stmt|;
specifier|public
name|QomTest
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|)
block|{
name|super
argument_list|(
name|fixture
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|vf
operator|=
name|session
operator|.
name|getValueFactory
argument_list|()
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|f
operator|=
name|qm
operator|.
name|getQOMFactory
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|jcrNameConversion
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|assertEquals
argument_list|(
literal|"[nt:base]"
argument_list|,
name|f
operator|.
name|column
argument_list|(
literal|null
argument_list|,
name|NodeType
operator|.
name|NT_BASE
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[s1].[nt:base] = [s2].[nt:base]"
argument_list|,
name|f
operator|.
name|equiJoinCondition
argument_list|(
literal|"s1"
argument_list|,
name|NodeType
operator|.
name|NT_BASE
argument_list|,
literal|"s2"
argument_list|,
name|NodeType
operator|.
name|NT_BASE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CONTAINS([nt:base], null)"
argument_list|,
name|f
operator|.
name|fullTextSearch
argument_list|(
literal|null
argument_list|,
name|NodeType
operator|.
name|NT_BASE
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CAST('nt:base' AS NAME)"
argument_list|,
name|f
operator|.
name|literal
argument_list|(
name|vf
operator|.
name|createValue
argument_list|(
name|NodeType
operator|.
name|NT_BASE
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[nt:base] IS NOT NULL"
argument_list|,
name|f
operator|.
name|propertyExistence
argument_list|(
literal|null
argument_list|,
name|NodeType
operator|.
name|NT_BASE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[nt:base]"
argument_list|,
name|f
operator|.
name|propertyValue
argument_list|(
literal|null
argument_list|,
name|NodeType
operator|.
name|NT_BASE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[nt:base]"
argument_list|,
name|f
operator|.
name|selector
argument_list|(
name|NodeType
operator|.
name|NT_BASE
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Source
name|source1
init|=
name|f
operator|.
name|selector
argument_list|(
name|NodeType
operator|.
name|NT_BASE
argument_list|,
literal|"selector"
argument_list|)
decl_stmt|;
name|Column
index|[]
name|columns
init|=
operator|new
name|Column
index|[]
block|{
name|f
operator|.
name|column
argument_list|(
literal|"selector"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|}
decl_stmt|;
name|Constraint
name|constraint2
init|=
name|f
operator|.
name|childNode
argument_list|(
literal|"selector"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|QueryObjectModel
name|qom
init|=
name|f
operator|.
name|createQuery
argument_list|(
name|source1
argument_list|,
name|constraint2
argument_list|,
literal|null
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"select [selector].* from "
operator|+
literal|"[nt:base] AS [selector] "
operator|+
literal|"where ISCHILDNODE([selector], [/])"
argument_list|,
name|qom
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|and
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Constraint
name|c0
init|=
name|f
operator|.
name|propertyExistence
argument_list|(
literal|"x"
argument_list|,
literal|"c0"
argument_list|)
decl_stmt|;
name|Constraint
name|c1
init|=
name|f
operator|.
name|propertyExistence
argument_list|(
literal|"x"
argument_list|,
literal|"c1"
argument_list|)
decl_stmt|;
name|And
name|and
init|=
name|f
operator|.
name|and
argument_list|(
name|c0
argument_list|,
name|c1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|and
operator|.
name|getConstraint1
argument_list|()
argument_list|,
name|c0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|and
operator|.
name|getConstraint2
argument_list|()
argument_list|,
name|c1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"([x].[c0] IS NOT NULL) AND ([x].[c1] IS NOT NULL)"
argument_list|,
name|and
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ascending
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PropertyValue
name|p
init|=
name|f
operator|.
name|propertyValue
argument_list|(
literal|"selectorName"
argument_list|,
literal|"propertyName"
argument_list|)
decl_stmt|;
name|Ordering
name|o
init|=
name|f
operator|.
name|ascending
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p
argument_list|,
name|o
operator|.
name|getOperand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueryObjectModelConstants
operator|.
name|JCR_ORDER_ASCENDING
argument_list|,
name|o
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[selectorName].[propertyName]"
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|bindVariable
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|BindVariableValue
name|b
init|=
name|f
operator|.
name|bindVariable
argument_list|(
literal|"bindVariableName"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bindVariableName"
argument_list|,
name|b
operator|.
name|getBindVariableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"$bindVariableName"
argument_list|,
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|childNode
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|ChildNode
name|cn
init|=
name|f
operator|.
name|childNode
argument_list|(
literal|"selectorName"
argument_list|,
literal|"parentPath"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"selectorName"
argument_list|,
name|cn
operator|.
name|getSelectorName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"parentPath"
argument_list|,
name|cn
operator|.
name|getParentPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISCHILDNODE([selectorName], [parentPath])"
argument_list|,
name|cn
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISCHILDNODE([p])"
argument_list|,
name|f
operator|.
name|childNode
argument_list|(
literal|null
argument_list|,
literal|"p"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|childNodeJoinCondition
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|ChildNodeJoinCondition
name|c
init|=
name|f
operator|.
name|childNodeJoinCondition
argument_list|(
literal|"childSelectorName"
argument_list|,
literal|"parentSelectorName"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"childSelectorName"
argument_list|,
name|c
operator|.
name|getChildSelectorName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"parentSelectorName"
argument_list|,
name|c
operator|.
name|getParentSelectorName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISCHILDNODE([childSelectorName], [parentSelectorName])"
argument_list|,
name|c
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|column
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Column
name|c
init|=
name|f
operator|.
name|column
argument_list|(
literal|"selectorName"
argument_list|,
literal|"propertyName"
argument_list|,
literal|"columnName"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"selectorName"
argument_list|,
name|c
operator|.
name|getSelectorName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"propertyName"
argument_list|,
name|c
operator|.
name|getPropertyName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"columnName"
argument_list|,
name|c
operator|.
name|getColumnName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[selectorName].[propertyName] AS [columnName]"
argument_list|,
name|c
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[p]"
argument_list|,
name|f
operator|.
name|column
argument_list|(
literal|null
argument_list|,
literal|"p"
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[p] AS [c]"
argument_list|,
name|f
operator|.
name|column
argument_list|(
literal|null
argument_list|,
literal|"p"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[s].[p]"
argument_list|,
name|f
operator|.
name|column
argument_list|(
literal|"s"
argument_list|,
literal|"p"
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[s].[p] AS [c]"
argument_list|,
name|f
operator|.
name|column
argument_list|(
literal|"s"
argument_list|,
literal|"p"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[s].* AS [c]"
argument_list|,
name|f
operator|.
name|column
argument_list|(
literal|"s"
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"* AS [c]"
argument_list|,
name|f
operator|.
name|column
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|f
operator|.
name|column
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[s].*"
argument_list|,
name|f
operator|.
name|column
argument_list|(
literal|"s"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|comparison
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PropertyValue
name|p
init|=
name|f
operator|.
name|propertyValue
argument_list|(
literal|"selectorName"
argument_list|,
literal|"propertyName"
argument_list|)
decl_stmt|;
name|Literal
name|l
init|=
name|f
operator|.
name|literal
argument_list|(
name|vf
operator|.
name|createValue
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Comparison
name|c
init|=
name|f
operator|.
name|comparison
argument_list|(
name|p
argument_list|,
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_EQUAL_TO
argument_list|,
name|l
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p
argument_list|,
name|c
operator|.
name|getOperand1
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_EQUAL_TO
argument_list|,
name|c
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|l
argument_list|,
name|c
operator|.
name|getOperand2
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[selectorName].[propertyName] = 1"
argument_list|,
name|c
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|descendantNode
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|DescendantNode
name|d
init|=
name|f
operator|.
name|descendantNode
argument_list|(
literal|"selectorName"
argument_list|,
literal|"path"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"selectorName"
argument_list|,
name|d
operator|.
name|getSelectorName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|d
operator|.
name|getAncestorPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISDESCENDANTNODE([selectorName], [path])"
argument_list|,
name|d
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISDESCENDANTNODE([p])"
argument_list|,
name|f
operator|.
name|descendantNode
argument_list|(
literal|null
argument_list|,
literal|"p"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|descendantNodeJoinCondition
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|DescendantNodeJoinCondition
name|d
init|=
name|f
operator|.
name|descendantNodeJoinCondition
argument_list|(
literal|"descendantSelectorName"
argument_list|,
literal|"ancestorSelectorName"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"descendantSelectorName"
argument_list|,
name|d
operator|.
name|getDescendantSelectorName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ancestorSelectorName"
argument_list|,
name|d
operator|.
name|getAncestorSelectorName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISDESCENDANTNODE([descendantSelectorName], [ancestorSelectorName])"
argument_list|,
name|d
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|descending
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PropertyValue
name|p
init|=
name|f
operator|.
name|propertyValue
argument_list|(
literal|"selectorName"
argument_list|,
literal|"propertyName"
argument_list|)
decl_stmt|;
name|Ordering
name|o
init|=
name|f
operator|.
name|descending
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p
argument_list|,
name|o
operator|.
name|getOperand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueryObjectModelConstants
operator|.
name|JCR_ORDER_DESCENDING
argument_list|,
name|o
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[selectorName].[propertyName] DESC"
argument_list|,
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equiJoinCondition
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|EquiJoinCondition
name|e
init|=
name|f
operator|.
name|equiJoinCondition
argument_list|(
literal|"selector1Name"
argument_list|,
literal|"property1Name"
argument_list|,
literal|"selector2Name"
argument_list|,
literal|"property2Name"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"selector1Name"
argument_list|,
name|e
operator|.
name|getSelector1Name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"property1Name"
argument_list|,
name|e
operator|.
name|getProperty1Name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"selector2Name"
argument_list|,
name|e
operator|.
name|getSelector2Name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"property2Name"
argument_list|,
name|e
operator|.
name|getProperty2Name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[selector1Name].[property1Name] = [selector2Name].[property2Name]"
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fullTextSearch
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Literal
name|l
init|=
name|f
operator|.
name|literal
argument_list|(
name|vf
operator|.
name|createValue
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|FullTextSearch
name|x
init|=
name|f
operator|.
name|fullTextSearch
argument_list|(
literal|"selectorName"
argument_list|,
literal|"propertyName"
argument_list|,
name|l
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"selectorName"
argument_list|,
name|x
operator|.
name|getSelectorName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"propertyName"
argument_list|,
name|x
operator|.
name|getPropertyName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|l
argument_list|,
name|x
operator|.
name|getFullTextSearchExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CONTAINS([selectorName].[propertyName], 1)"
argument_list|,
name|x
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CONTAINS([p], null)"
argument_list|,
name|f
operator|.
name|fullTextSearch
argument_list|(
literal|null
argument_list|,
literal|"p"
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CONTAINS([s].[p], null)"
argument_list|,
name|f
operator|.
name|fullTextSearch
argument_list|(
literal|"s"
argument_list|,
literal|"p"
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CONTAINS([s].*, null)"
argument_list|,
name|f
operator|.
name|fullTextSearch
argument_list|(
literal|"s"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CONTAINS(*, null)"
argument_list|,
name|f
operator|.
name|fullTextSearch
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fullTextSearchScore
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|FullTextSearchScore
name|x
init|=
name|f
operator|.
name|fullTextSearchScore
argument_list|(
literal|"selectorName"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"selectorName"
argument_list|,
name|x
operator|.
name|getSelectorName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SCORE([selectorName])"
argument_list|,
name|x
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SCORE()"
argument_list|,
name|f
operator|.
name|fullTextSearchScore
argument_list|(
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|join
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Source
name|left
init|=
name|f
operator|.
name|selector
argument_list|(
literal|"nodeTypeName"
argument_list|,
literal|"selectorName"
argument_list|)
decl_stmt|;
name|Source
name|right
init|=
name|f
operator|.
name|selector
argument_list|(
literal|"nodeTypeName2"
argument_list|,
literal|"selectorName2"
argument_list|)
decl_stmt|;
name|ChildNodeJoinCondition
name|jc
init|=
name|f
operator|.
name|childNodeJoinCondition
argument_list|(
literal|"childSelectorName"
argument_list|,
literal|"parentSelectorName"
argument_list|)
decl_stmt|;
name|Join
name|j
init|=
name|f
operator|.
name|join
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|QueryObjectModelConstants
operator|.
name|JCR_JOIN_TYPE_INNER
argument_list|,
name|jc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|left
argument_list|,
name|j
operator|.
name|getLeft
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|right
argument_list|,
name|j
operator|.
name|getRight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueryObjectModelConstants
operator|.
name|JCR_JOIN_TYPE_INNER
argument_list|,
name|j
operator|.
name|getJoinType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|jc
argument_list|,
name|j
operator|.
name|getJoinCondition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISCHILDNODE([childSelectorName], [parentSelectorName])"
argument_list|,
name|jc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|length
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PropertyValue
name|p
init|=
name|f
operator|.
name|propertyValue
argument_list|(
literal|"selectorName"
argument_list|,
literal|"propertyName"
argument_list|)
decl_stmt|;
name|Length
name|l
init|=
name|f
operator|.
name|length
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p
argument_list|,
name|l
operator|.
name|getPropertyValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"LENGTH([selectorName].[propertyName])"
argument_list|,
name|l
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|literal
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Value
name|v
init|=
name|vf
operator|.
name|createValue
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Literal
name|l
init|=
name|f
operator|.
name|literal
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|v
argument_list|,
name|l
operator|.
name|getLiteralValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|l
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"'Joe''s'"
argument_list|,
name|f
operator|.
name|literal
argument_list|(
name|vf
operator|.
name|createValue
argument_list|(
literal|"Joe's"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"' - \" - '"
argument_list|,
name|f
operator|.
name|literal
argument_list|(
name|vf
operator|.
name|createValue
argument_list|(
literal|" - \" - "
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|lowerCase
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PropertyValue
name|p
init|=
name|f
operator|.
name|propertyValue
argument_list|(
literal|"selectorName"
argument_list|,
literal|"propertyName"
argument_list|)
decl_stmt|;
name|Length
name|length
init|=
name|f
operator|.
name|length
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|LowerCase
name|l
init|=
name|f
operator|.
name|lowerCase
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|length
argument_list|,
name|l
operator|.
name|getOperand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"LOWER(LENGTH([selectorName].[propertyName]))"
argument_list|,
name|l
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeLocalName
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|NodeLocalName
name|n
init|=
name|f
operator|.
name|nodeLocalName
argument_list|(
literal|"selectorName"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"selectorName"
argument_list|,
name|n
operator|.
name|getSelectorName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"LOCALNAME([selectorName])"
argument_list|,
name|n
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"LOCALNAME()"
argument_list|,
name|f
operator|.
name|nodeLocalName
argument_list|(
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeName
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|NodeName
name|n
init|=
name|f
operator|.
name|nodeName
argument_list|(
literal|"selectorName"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"selectorName"
argument_list|,
name|n
operator|.
name|getSelectorName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NAME([selectorName])"
argument_list|,
name|n
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NAME()"
argument_list|,
name|f
operator|.
name|nodeName
argument_list|(
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|not
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Constraint
name|c
init|=
name|f
operator|.
name|propertyExistence
argument_list|(
literal|"x"
argument_list|,
literal|"c0"
argument_list|)
decl_stmt|;
name|Not
name|n
init|=
name|f
operator|.
name|not
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|n
operator|.
name|getConstraint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[x].[c0] IS NOT NULL"
argument_list|,
name|c
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"* IS NOT NULL"
argument_list|,
name|f
operator|.
name|propertyExistence
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[s].* IS NOT NULL"
argument_list|,
name|f
operator|.
name|propertyExistence
argument_list|(
literal|"s"
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[p] IS NOT NULL"
argument_list|,
name|f
operator|.
name|propertyExistence
argument_list|(
literal|null
argument_list|,
literal|"p"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[s].[p] IS NOT NULL"
argument_list|,
name|f
operator|.
name|propertyExistence
argument_list|(
literal|"s"
argument_list|,
literal|"p"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|or
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Constraint
name|c0
init|=
name|f
operator|.
name|propertyExistence
argument_list|(
literal|"x"
argument_list|,
literal|"c0"
argument_list|)
decl_stmt|;
name|Constraint
name|c1
init|=
name|f
operator|.
name|propertyExistence
argument_list|(
literal|"x"
argument_list|,
literal|"c1"
argument_list|)
decl_stmt|;
name|Or
name|or
init|=
name|f
operator|.
name|or
argument_list|(
name|c0
argument_list|,
name|c1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|or
operator|.
name|getConstraint1
argument_list|()
argument_list|,
name|c0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|or
operator|.
name|getConstraint2
argument_list|()
argument_list|,
name|c1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"([x].[c0] IS NOT NULL) OR ([x].[c1] IS NOT NULL)"
argument_list|,
name|or
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyExistence
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PropertyExistence
name|pe
init|=
name|f
operator|.
name|propertyExistence
argument_list|(
literal|"selectorName"
argument_list|,
literal|"propertyName"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"selectorName"
argument_list|,
name|pe
operator|.
name|getSelectorName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"propertyName"
argument_list|,
name|pe
operator|.
name|getPropertyName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[selectorName].[propertyName] IS NOT NULL"
argument_list|,
name|pe
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"* IS NOT NULL"
argument_list|,
name|f
operator|.
name|propertyExistence
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[s].* IS NOT NULL"
argument_list|,
name|f
operator|.
name|propertyExistence
argument_list|(
literal|"s"
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[p] IS NOT NULL"
argument_list|,
name|f
operator|.
name|propertyExistence
argument_list|(
literal|null
argument_list|,
literal|"p"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[s].[p] IS NOT NULL"
argument_list|,
name|f
operator|.
name|propertyExistence
argument_list|(
literal|"s"
argument_list|,
literal|"p"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyValue
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PropertyValue
name|pv
init|=
name|f
operator|.
name|propertyValue
argument_list|(
literal|"selectorName"
argument_list|,
literal|"propertyName"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"selectorName"
argument_list|,
name|pv
operator|.
name|getSelectorName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"propertyName"
argument_list|,
name|pv
operator|.
name|getPropertyName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[selectorName].[propertyName]"
argument_list|,
name|pv
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|f
operator|.
name|propertyValue
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[s].*"
argument_list|,
name|f
operator|.
name|propertyValue
argument_list|(
literal|"s"
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[p]"
argument_list|,
name|f
operator|.
name|propertyValue
argument_list|(
literal|null
argument_list|,
literal|"p"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[s].[p]"
argument_list|,
name|f
operator|.
name|propertyValue
argument_list|(
literal|"s"
argument_list|,
literal|"p"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sameNode
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|SameNode
name|s
init|=
name|f
operator|.
name|sameNode
argument_list|(
literal|"selectorName"
argument_list|,
literal|"path"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"selectorName"
argument_list|,
name|s
operator|.
name|getSelectorName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|s
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISSAMENODE([selectorName], [path])"
argument_list|,
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISSAMENODE([path])"
argument_list|,
name|f
operator|.
name|sameNode
argument_list|(
literal|null
argument_list|,
literal|"path"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISSAMENODE([s], [path])"
argument_list|,
name|f
operator|.
name|sameNode
argument_list|(
literal|"s"
argument_list|,
literal|"path"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sameNodeJoinCondition
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|SameNodeJoinCondition
name|s
init|=
name|f
operator|.
name|sameNodeJoinCondition
argument_list|(
literal|"selector1Name"
argument_list|,
literal|"selector2Name"
argument_list|,
literal|"selector2Path"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"selector1Name"
argument_list|,
name|s
operator|.
name|getSelector1Name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"selector2Name"
argument_list|,
name|s
operator|.
name|getSelector2Name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"selector2Path"
argument_list|,
name|s
operator|.
name|getSelector2Path
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISSAMENODE([selector1Name], [selector2Name], [selector2Path])"
argument_list|,
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|selector
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Selector
name|s
init|=
name|f
operator|.
name|selector
argument_list|(
literal|"nodeTypeName"
argument_list|,
literal|"selectorName"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"nodeTypeName"
argument_list|,
name|s
operator|.
name|getNodeTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"selectorName"
argument_list|,
name|s
operator|.
name|getSelectorName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[nodeTypeName] AS [selectorName]"
argument_list|,
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[n]"
argument_list|,
name|f
operator|.
name|selector
argument_list|(
literal|"n"
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|upperCase
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PropertyValue
name|p
init|=
name|f
operator|.
name|propertyValue
argument_list|(
literal|"selectorName"
argument_list|,
literal|"propertyName"
argument_list|)
decl_stmt|;
name|Length
name|length
init|=
name|f
operator|.
name|length
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|UpperCase
name|u
init|=
name|f
operator|.
name|upperCase
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|length
argument_list|,
name|u
operator|.
name|getOperand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UPPER(LENGTH([selectorName].[propertyName]))"
argument_list|,
name|u
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createQuery
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Selector
name|s
init|=
name|f
operator|.
name|selector
argument_list|(
literal|"nt:file"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|BindVariableValue
name|b
init|=
name|f
operator|.
name|bindVariable
argument_list|(
literal|"var"
argument_list|)
decl_stmt|;
name|Constraint
name|c
init|=
name|f
operator|.
name|propertyExistence
argument_list|(
literal|"x"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|PropertyValue
name|p
init|=
name|f
operator|.
name|propertyValue
argument_list|(
literal|"x"
argument_list|,
literal|"propertyName"
argument_list|)
decl_stmt|;
name|c
operator|=
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|comparison
argument_list|(
name|p
argument_list|,
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_EQUAL_TO
argument_list|,
name|b
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|Ordering
name|o
init|=
name|f
operator|.
name|ascending
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|Column
name|col
init|=
name|f
operator|.
name|column
argument_list|(
literal|"x"
argument_list|,
literal|"propertyName"
argument_list|,
literal|"columnName"
argument_list|)
decl_stmt|;
name|Ordering
index|[]
name|ords
init|=
operator|new
name|Ordering
index|[]
block|{
name|o
block|}
decl_stmt|;
name|Column
index|[]
name|cols
init|=
operator|new
name|Column
index|[]
block|{
name|col
block|}
decl_stmt|;
name|QueryObjectModel
name|q
init|=
name|f
operator|.
name|createQuery
argument_list|(
name|s
argument_list|,
name|c
argument_list|,
name|ords
argument_list|,
name|cols
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Query
operator|.
name|JCR_JQOM
argument_list|,
name|q
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|bv
init|=
name|q
operator|.
name|getBindVariableNames
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bv
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"var"
argument_list|,
name|bv
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
argument_list|,
name|q
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|q
operator|.
name|getConstraint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o
argument_list|,
name|q
operator|.
name|getOrderings
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|col
argument_list|,
name|q
operator|.
name|getColumns
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|escapedName
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|assertEquals
argument_list|(
literal|"[[n]]]"
argument_list|,
name|f
operator|.
name|selector
argument_list|(
literal|"[n]"
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[[s]]].[[p]]]"
argument_list|,
name|f
operator|.
name|propertyValue
argument_list|(
literal|"[s]"
argument_list|,
literal|"[p]"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISSAMENODE([[s1]]], [[s2]]], [[p]]])"
argument_list|,
name|f
operator|.
name|sameNodeJoinCondition
argument_list|(
literal|"[s1]"
argument_list|,
literal|"[s2]"
argument_list|,
literal|"[p]"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISSAMENODE([[s]]], [[p]]])"
argument_list|,
name|f
operator|.
name|sameNode
argument_list|(
literal|"[s]"
argument_list|,
literal|"[p]"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

