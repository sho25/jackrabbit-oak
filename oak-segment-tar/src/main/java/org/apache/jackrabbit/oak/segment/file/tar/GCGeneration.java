begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Instances of this class represent the garbage collection generation related  * information of a segment. Each generation consists of a full and a tail part  * and a tail flag. The full and tail part are each increased by the respective  * garbage collection process. In the tail compaction case the segments written  * by the compactor will also have their tail flag set so cleanup can recognise  * them as not reclaimable (unless the full part is older then the number of  * retained generations). Segments written by normal repository writes will  * inherit the full and tail generations parts of the segments written by the  * previous compaction process. However the tail flag is never set for such  * segments ensuring cleanup after subsequent tail compactions can reclaim them  * once old enough (e.g. the tail part of the generation is older then the  * number of retained generations).  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|GCGeneration
block|{
specifier|public
specifier|static
specifier|final
name|GCGeneration
name|NULL
init|=
operator|new
name|GCGeneration
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|GCGeneration
name|newGCGeneration
parameter_list|(
name|int
name|full
parameter_list|,
name|int
name|tail
parameter_list|,
name|boolean
name|isTail
parameter_list|)
block|{
return|return
operator|new
name|GCGeneration
argument_list|(
name|full
argument_list|,
name|tail
argument_list|,
name|isTail
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|int
name|full
decl_stmt|;
specifier|private
specifier|final
name|int
name|tail
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isTail
decl_stmt|;
specifier|private
name|GCGeneration
parameter_list|(
name|int
name|full
parameter_list|,
name|int
name|tail
parameter_list|,
name|boolean
name|isTail
parameter_list|)
block|{
name|this
operator|.
name|full
operator|=
name|full
expr_stmt|;
name|this
operator|.
name|tail
operator|=
name|tail
expr_stmt|;
name|this
operator|.
name|isTail
operator|=
name|isTail
expr_stmt|;
block|}
specifier|public
name|int
name|getFull
parameter_list|()
block|{
return|return
name|full
return|;
block|}
specifier|public
name|int
name|getTail
parameter_list|()
block|{
return|return
name|tail
return|;
block|}
specifier|public
name|boolean
name|isTail
parameter_list|()
block|{
return|return
name|isTail
return|;
block|}
comment|/**      * Create a new instance with the full part incremented by one and the tail      * part and the tail flag left unchanged.      */
annotation|@
name|Nonnull
specifier|public
name|GCGeneration
name|nextFull
parameter_list|()
block|{
return|return
operator|new
name|GCGeneration
argument_list|(
name|full
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Create a new instance with the tail part incremented by one and the full      * part and the tail flag left unchanged.      */
annotation|@
name|Nonnull
specifier|public
name|GCGeneration
name|nextTail
parameter_list|()
block|{
return|return
operator|new
name|GCGeneration
argument_list|(
name|full
argument_list|,
name|tail
operator|+
literal|1
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Create a new instance with the tail flag unset and the full part and tail      * part left unchanged.      */
annotation|@
name|Nonnull
specifier|public
name|GCGeneration
name|nonTail
parameter_list|()
block|{
return|return
operator|new
name|GCGeneration
argument_list|(
name|full
argument_list|,
name|tail
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * The the difference of the full part between {@code this} and {@code      * that}.      */
specifier|public
name|int
name|compareFull
parameter_list|(
annotation|@
name|Nonnull
name|GCGeneration
name|that
parameter_list|)
block|{
return|return
name|full
operator|-
name|that
operator|.
name|full
return|;
block|}
comment|/**      * The the difference of the tail part between {@code this} and {@code      * that}.      */
specifier|public
name|int
name|compareTail
parameter_list|(
annotation|@
name|Nonnull
name|GCGeneration
name|that
parameter_list|)
block|{
return|return
name|tail
operator|-
name|that
operator|.
name|tail
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|other
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|other
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|GCGeneration
name|that
init|=
operator|(
name|GCGeneration
operator|)
name|other
decl_stmt|;
return|return
name|full
operator|==
name|that
operator|.
name|full
operator|&&
name|tail
operator|==
name|that
operator|.
name|tail
operator|&&
name|isTail
operator|==
name|that
operator|.
name|isTail
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|full
argument_list|,
name|tail
argument_list|,
name|isTail
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"GCGeneration{"
operator|+
literal|"full="
operator|+
name|full
operator|+
literal|','
operator|+
literal|"tail="
operator|+
name|tail
operator|+
literal|','
operator|+
literal|"isTail="
operator|+
name|isTail
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

