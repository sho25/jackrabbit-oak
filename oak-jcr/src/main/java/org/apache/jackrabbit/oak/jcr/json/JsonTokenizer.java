begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|json
operator|.
name|Token
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * Abstract base class for JSON tokenizers.  * A JSON tokenizer breaks a stream of character into {@link Token}s. It has  * a current {@link #pos() position} and methods for inspecting, reading and  * skipping the token at the current position.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|JsonTokenizer
block|{
comment|/**      * The current token which has been read ahead, if any.      * {@code null} otherwise.      */
specifier|protected
name|Token
name|currentToken
decl_stmt|;
comment|/**      * Copy constructor. To be used in conjunction with {@link #copy()}      * @param tokenizer      */
specifier|protected
name|JsonTokenizer
parameter_list|(
name|JsonTokenizer
name|tokenizer
parameter_list|)
block|{
name|currentToken
operator|=
name|tokenizer
operator|.
name|currentToken
expr_stmt|;
block|}
specifier|protected
name|JsonTokenizer
parameter_list|()
block|{ }
comment|/**      * Returns the current token without advancing the {@link #pos() position}      * @return  current token      */
specifier|public
name|Token
name|peek
parameter_list|()
block|{
if|if
condition|(
name|currentToken
operator|==
literal|null
condition|)
block|{
name|currentToken
operator|=
name|nextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|currentToken
return|;
block|}
comment|/**      * @param type      * @return  {@code true} if and only if the current token is of the given {@code type}      */
specifier|public
name|boolean
name|peek
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
return|return
name|peek
argument_list|()
operator|.
name|type
argument_list|()
operator|==
name|type
return|;
block|}
comment|/**      * Returns the current token and advances the {@link #pos() position}      * @return  current token      */
specifier|public
name|Token
name|read
parameter_list|()
block|{
if|if
condition|(
name|currentToken
operator|==
literal|null
condition|)
block|{
return|return
name|nextToken
argument_list|()
return|;
block|}
else|else
block|{
name|Token
name|token
init|=
name|currentToken
decl_stmt|;
name|currentToken
operator|=
literal|null
expr_stmt|;
return|return
name|token
return|;
block|}
block|}
comment|/**      * Returns the current token and advances the {@link #pos() position} if the token      * is of the given {@code type}.      * @param type      * @return  current token      * @throws ParseException  if the token is not of the given {@code type}.      */
specifier|public
name|Token
name|read
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|Token
name|token
init|=
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|type
argument_list|()
operator|==
name|type
condition|)
block|{
return|return
name|read
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|token
operator|.
name|pos
argument_list|()
argument_list|,
literal|"Expected token type "
operator|+
name|type
operator|+
literal|", found: "
operator|+
name|token
argument_list|)
throw|;
block|}
block|}
comment|/**      * Advances the {@link #pos() position} if the token is of the given {@code type}.      * @param type      * @return  {@code true} if and only if the is token is of the given {@code type}.      */
specifier|public
name|boolean
name|skip
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|peek
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|read
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * @return the current position      */
specifier|public
specifier|abstract
name|int
name|pos
parameter_list|()
function_decl|;
comment|/**      * Set the current position      * @param pos      */
specifier|public
specifier|abstract
name|void
name|setPos
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
comment|/**      * Create a copy of this tokenizer with the same state. Implementations usually      * create a new instance by calling the (overriden) {@link #JsonTokenizer(JsonTokenizer) copy constructor}.      * @return copy of this tokenizer      */
specifier|public
specifier|abstract
name|JsonTokenizer
name|copy
parameter_list|()
function_decl|;
comment|/**      * Read the next token from the input and advance the current {@link #pos() positon}.      * @return  next token      */
specifier|protected
specifier|abstract
name|Token
name|nextToken
parameter_list|()
function_decl|;
block|}
end_class

end_unit

