begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ResultRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ExplainResultTest
extends|extends
name|AbstractQueryTest
block|{
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
return|return
operator|new
name|Oak
argument_list|(
operator|new
name|MemoryNodeStore
argument_list|(
name|InitialContentHelper
operator|.
name|INITIAL_CONTENT
argument_list|)
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test_explain_xpath
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"explain_result.txt"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|xpath
init|=
literal|"/jcr:root/test//*"
decl_stmt|;
name|Result
name|result
init|=
name|executeQuery
argument_list|(
name|xpath
argument_list|,
literal|"xpath"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|rows
init|=
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|rows
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|rows
operator|.
name|next
argument_list|()
expr_stmt|;
name|count
operator|=
name|count
operator|+
literal|1
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"should exist 2 nodes"
argument_list|,
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|Result
name|explainResult
init|=
name|executeQuery
argument_list|(
literal|"explain "
operator|+
name|xpath
argument_list|,
literal|"xpath"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|explainCount
init|=
literal|0
decl_stmt|;
name|ResultRow
name|explainRow
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ResultRow
name|row
range|:
name|explainResult
operator|.
name|getRows
argument_list|()
control|)
block|{
if|if
condition|(
name|explainCount
operator|==
literal|0
condition|)
block|{
name|explainRow
operator|=
name|row
expr_stmt|;
block|}
name|explainCount
operator|=
name|explainCount
operator|+
literal|1
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"should exist 1 result"
argument_list|,
literal|1
argument_list|,
name|explainCount
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"explain row should not be null"
argument_list|,
name|explainRow
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"result should have 'plan' column"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|explainResult
operator|.
name|getColumnNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"plan"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"result should have 'statement' column"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|explainResult
operator|.
name|getColumnNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"statement"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|explainedStatement
init|=
name|explainRow
operator|.
name|getValue
argument_list|(
literal|"statement"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"'statement' should begin with 'select'"
argument_list|,
name|explainedStatement
operator|.
name|startsWith
argument_list|(
literal|"select"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"statement should contain original xpath with prefix 'xpath: '"
argument_list|,
name|explainedStatement
operator|.
name|contains
argument_list|(
literal|"xpath: "
operator|+
name|xpath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test_explain_sql1
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"explain_result.txt"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|sql1
init|=
literal|"select [jcr:path] from [nt:base] as a where isdescendantnode(a, '/test')"
decl_stmt|;
name|Result
name|result
init|=
name|executeQuery
argument_list|(
name|sql1
argument_list|,
literal|"sql"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ResultRow
name|row
range|:
name|result
operator|.
name|getRows
argument_list|()
control|)
block|{
name|count
operator|=
name|count
operator|+
literal|1
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"should exist 2 nodes"
argument_list|,
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|Result
name|explainResult
init|=
name|executeQuery
argument_list|(
literal|"explain "
operator|+
name|sql1
argument_list|,
literal|"sql"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|explainCount
init|=
literal|0
decl_stmt|;
name|ResultRow
name|explainRow
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ResultRow
name|row
range|:
name|explainResult
operator|.
name|getRows
argument_list|()
control|)
block|{
if|if
condition|(
name|explainCount
operator|==
literal|0
condition|)
block|{
name|explainRow
operator|=
name|row
expr_stmt|;
block|}
name|explainCount
operator|=
name|explainCount
operator|+
literal|1
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"should exist 1 result"
argument_list|,
literal|1
argument_list|,
name|explainCount
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"explain row should not be null"
argument_list|,
name|explainRow
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"result should have 'plan' column"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|explainResult
operator|.
name|getColumnNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"plan"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"result should have 'statement' column"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|explainResult
operator|.
name|getColumnNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"statement"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|explainedStatement
init|=
name|explainRow
operator|.
name|getValue
argument_list|(
literal|"statement"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"'statement' should begin with 'select'"
argument_list|,
name|explainedStatement
operator|.
name|startsWith
argument_list|(
literal|"select"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"explained statement should be same as original, without 'explain'"
argument_list|,
name|sql1
argument_list|,
name|explainedStatement
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test_explain_sql2
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"explain_result.txt"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|sql2
init|=
literal|"select [jcr:path] from [nt:base] as a where isdescendantnode(a, '/test')"
decl_stmt|;
name|Result
name|result
init|=
name|executeQuery
argument_list|(
name|sql2
argument_list|,
literal|"JCR-SQL2"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ResultRow
name|row
range|:
name|result
operator|.
name|getRows
argument_list|()
control|)
block|{
name|count
operator|=
name|count
operator|+
literal|1
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"should exist 2 nodes"
argument_list|,
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|Result
name|explainResult
init|=
name|executeQuery
argument_list|(
literal|"explain "
operator|+
name|sql2
argument_list|,
literal|"JCR-SQL2"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|explainCount
init|=
literal|0
decl_stmt|;
name|ResultRow
name|explainRow
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ResultRow
name|row
range|:
name|explainResult
operator|.
name|getRows
argument_list|()
control|)
block|{
if|if
condition|(
name|explainCount
operator|==
literal|0
condition|)
block|{
name|explainRow
operator|=
name|row
expr_stmt|;
block|}
name|explainCount
operator|=
name|explainCount
operator|+
literal|1
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"should exist 1 result"
argument_list|,
literal|1
argument_list|,
name|explainCount
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"explain row should not be null"
argument_list|,
name|explainRow
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"result should have 'plan' column"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|explainResult
operator|.
name|getColumnNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"plan"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"result should have 'statement' column"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|explainResult
operator|.
name|getColumnNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"statement"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|explainedStatement
init|=
name|explainRow
operator|.
name|getValue
argument_list|(
literal|"statement"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"'statement' should begin with 'select'"
argument_list|,
name|explainedStatement
operator|.
name|startsWith
argument_list|(
literal|"select"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"explained statement should be same as original, without 'explain'"
argument_list|,
name|sql2
argument_list|,
name|explainedStatement
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

