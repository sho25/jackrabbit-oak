begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|failover
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|failover
operator|.
name|codec
operator|.
name|Messages
operator|.
name|newGetSegmentReq
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFutureListener
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInboundHandlerAdapter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EventExecutorGroup
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|failover
operator|.
name|codec
operator|.
name|SegmentReply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|failover
operator|.
name|store
operator|.
name|FailoverStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|failover
operator|.
name|store
operator|.
name|RemoteSegmentLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ApplyDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|SegmentLoaderHandler
extends|extends
name|ChannelInboundHandlerAdapter
implements|implements
name|RemoteSegmentLoader
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SegmentLoaderHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|FailoverStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|String
name|clientID
decl_stmt|;
specifier|private
specifier|final
name|RecordId
name|head
decl_stmt|;
specifier|private
specifier|final
name|EventExecutorGroup
name|preloaderExecutor
decl_stmt|;
specifier|private
specifier|final
name|EventExecutorGroup
name|loaderExecutor
decl_stmt|;
specifier|private
name|int
name|timeoutMs
init|=
literal|5000
decl_stmt|;
specifier|private
name|ChannelHandlerContext
name|ctx
decl_stmt|;
specifier|final
name|BlockingQueue
argument_list|<
name|Segment
argument_list|>
name|segment
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Segment
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|SegmentLoaderHandler
parameter_list|(
specifier|final
name|FailoverStore
name|store
parameter_list|,
name|RecordId
name|head
parameter_list|,
name|EventExecutorGroup
name|preloaderExecutor
parameter_list|,
name|EventExecutorGroup
name|loaderExecutor
parameter_list|,
name|String
name|clientID
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|head
operator|=
name|head
expr_stmt|;
name|this
operator|.
name|preloaderExecutor
operator|=
name|preloaderExecutor
expr_stmt|;
name|this
operator|.
name|loaderExecutor
operator|=
name|loaderExecutor
expr_stmt|;
name|this
operator|.
name|clientID
operator|=
name|clientID
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelActive
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
block|{
name|this
operator|.
name|ctx
operator|=
name|ctx
expr_stmt|;
name|initSync
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|userEventTriggered
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Object
name|evt
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|evt
operator|instanceof
name|SegmentReply
condition|)
block|{
name|segment
operator|.
name|offer
argument_list|(
operator|(
operator|(
name|SegmentReply
operator|)
name|evt
operator|)
operator|.
name|getSegment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initSync
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"new head id "
operator|+
name|head
argument_list|)
expr_stmt|;
name|long
name|t
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|store
operator|.
name|setLoader
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|before
init|=
name|store
operator|.
name|getHead
argument_list|()
decl_stmt|;
name|SegmentNodeBuilder
name|builder
init|=
name|before
operator|.
name|builder
argument_list|()
decl_stmt|;
name|SegmentNodeState
name|current
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|head
argument_list|)
decl_stmt|;
name|current
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|ApplyDiff
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
name|store
operator|.
name|setHead
argument_list|(
name|before
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"#updated state (set head {}) in {}ms."
argument_list|,
name|ok
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Segment
name|readSegment
parameter_list|(
specifier|final
name|SegmentId
name|id
parameter_list|)
block|{
name|ctx
operator|.
name|writeAndFlush
argument_list|(
name|newGetSegmentReq
argument_list|(
name|this
operator|.
name|clientID
argument_list|,
name|id
argument_list|)
argument_list|)
operator|.
name|addListener
argument_list|(
name|reqListener
argument_list|)
expr_stmt|;
return|return
name|getSegment
argument_list|()
return|;
block|}
specifier|private
specifier|final
name|ChannelFutureListener
name|reqListener
init|=
operator|new
name|ChannelFutureListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
block|{
if|if
condition|(
operator|!
name|future
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|exceptionCaught
argument_list|(
name|ctx
argument_list|,
name|future
operator|.
name|cause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
specifier|public
name|Segment
name|getSegment
parameter_list|()
block|{
name|boolean
name|interrupted
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
return|return
name|segment
operator|.
name|poll
argument_list|(
name|timeoutMs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{
name|interrupted
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|interrupted
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed synchronizing state."
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|preloaderExecutor
operator|!=
literal|null
operator|&&
operator|!
name|preloaderExecutor
operator|.
name|isShuttingDown
argument_list|()
condition|)
block|{
name|preloaderExecutor
operator|.
name|shutdownGracefully
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|syncUninterruptibly
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|loaderExecutor
operator|!=
literal|null
operator|&&
operator|!
name|loaderExecutor
operator|.
name|isShuttingDown
argument_list|()
condition|)
block|{
name|loaderExecutor
operator|.
name|shutdownGracefully
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|syncUninterruptibly
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
operator|(
name|loaderExecutor
operator|!=
literal|null
operator|&&
operator|(
name|loaderExecutor
operator|.
name|isShuttingDown
argument_list|()
operator|||
name|loaderExecutor
operator|.
name|isShutdown
argument_list|()
operator|)
operator|)
return|;
block|}
block|}
end_class

end_unit

