begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|OakFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|OakRepositoryFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|RepositoryFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStoreHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|PathRev
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Revision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_class
specifier|public
class|class
name|PersistentCacheTest
extends|extends
name|AbstractTest
block|{
specifier|private
specifier|static
specifier|final
name|int
name|ITEMS_TO_ADD
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"items"
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CACHE_OPTIONS
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"cacheOptions"
argument_list|,
literal|"size=100,+compact,-async"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|StatisticsProvider
name|statsProvider
decl_stmt|;
specifier|private
name|Cache
argument_list|<
name|PathRev
argument_list|,
name|DocumentNodeState
argument_list|>
name|nodesCache
decl_stmt|;
specifier|private
name|DocumentNodeStore
name|dns
decl_stmt|;
specifier|private
name|AtomicLong
name|timestamp
init|=
operator|new
name|AtomicLong
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
specifier|public
name|PersistentCacheTest
parameter_list|(
name|StatisticsProvider
name|statsProvider
parameter_list|)
block|{
name|this
operator|.
name|statsProvider
operator|=
name|statsProvider
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Repository
index|[]
name|createRepository
parameter_list|(
name|RepositoryFixture
name|fixture
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"PersistentCacheStats.rejectedPut"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fixture
operator|instanceof
name|OakRepositoryFixture
condition|)
block|{
name|OakFixture
name|oakFixture
init|=
operator|(
operator|(
name|OakRepositoryFixture
operator|)
name|fixture
operator|)
operator|.
name|getOakFixture
argument_list|()
decl_stmt|;
if|if
condition|(
name|oakFixture
operator|instanceof
name|OakFixture
operator|.
name|MongoFixture
condition|)
block|{
name|OakFixture
operator|.
name|MongoFixture
name|mongoFixture
init|=
operator|(
name|OakFixture
operator|.
name|MongoFixture
operator|)
name|oakFixture
decl_stmt|;
name|DocumentNodeStoreBuilder
name|builder
init|=
name|mongoFixture
operator|.
name|getBuilder
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setStatisticsProvider
argument_list|(
name|statsProvider
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setPersistentCache
argument_list|(
literal|"target/persistentCache,time,"
operator|+
name|CACHE_OPTIONS
argument_list|)
expr_stmt|;
name|dns
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|nodesCache
operator|=
name|DocumentNodeStoreHelper
operator|.
name|getNodesCache
argument_list|(
name|dns
argument_list|)
expr_stmt|;
name|Oak
name|oak
init|=
operator|new
name|Oak
argument_list|(
name|dns
argument_list|)
decl_stmt|;
return|return
operator|new
name|Repository
index|[]
block|{
operator|new
name|Jcr
argument_list|(
name|oak
argument_list|)
operator|.
name|createRepository
argument_list|()
block|}
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Fixture "
operator|+
name|fixture
operator|+
literal|" not supported for this benchmark."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|runTest
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ITEMS_TO_ADD
condition|;
name|i
operator|++
control|)
block|{
name|PathRev
name|key
init|=
name|PathRev
operator|.
name|fromString
argument_list|(
literal|"/"
operator|+
name|timestamp
operator|.
name|getAndIncrement
argument_list|()
operator|+
literal|"@"
operator|+
operator|new
name|Revision
argument_list|(
name|timestamp
operator|.
name|getAndIncrement
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|nodesCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|dns
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|nodesCache
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|// read, so the entry is marked as used
block|}
block|}
block|}
end_class

end_unit

