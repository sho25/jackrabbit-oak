begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|hybrid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|spi
operator|.
name|JournalProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|spi
operator|.
name|JournalPropertyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
class|class
name|LuceneJournalPropertyBuilder
implements|implements
name|JournalPropertyBuilder
argument_list|<
name|LuceneDocumentHolder
argument_list|>
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LuceneJournalPropertyBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//Use HashMultimap to ensure that indexPath is not duplicated per node path
specifier|private
specifier|final
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|indexedNodes
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|limitWarningLogged
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxSize
decl_stmt|;
name|LuceneJournalPropertyBuilder
parameter_list|(
name|int
name|maxSize
parameter_list|)
block|{
name|this
operator|.
name|maxSize
operator|=
name|maxSize
expr_stmt|;
block|}
comment|//~---------------------------------< serialize>
annotation|@
name|Override
specifier|public
name|void
name|addProperty
parameter_list|(
annotation|@
name|Nullable
name|LuceneDocumentHolder
name|docHolder
parameter_list|)
block|{
if|if
condition|(
name|docHolder
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|LuceneDocInfo
name|d
range|:
name|docHolder
operator|.
name|getAllLuceneDocInfo
argument_list|()
control|)
block|{
if|if
condition|(
name|sizeWithinLimits
argument_list|()
condition|)
block|{
name|indexedNodes
operator|.
name|put
argument_list|(
name|d
operator|.
name|getDocPath
argument_list|()
argument_list|,
name|d
operator|.
name|getIndexPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|buildAsString
parameter_list|()
block|{
name|JsopWriter
name|json
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|json
operator|.
name|object
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|indexedNodes
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|json
operator|.
name|key
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|v
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|json
operator|.
name|value
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|json
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//~---------------------------------< deserialize>
annotation|@
name|Override
specifier|public
name|void
name|addSerializedProperty
parameter_list|(
annotation|@
name|Nullable
name|String
name|json
parameter_list|)
block|{
if|if
condition|(
name|json
operator|==
literal|null
operator|||
name|json
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|//TODO Add support for overflow
name|JsopReader
name|reader
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|reader
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reader
operator|.
name|matches
argument_list|(
literal|'}'
argument_list|)
condition|)
block|{
do|do
block|{
name|String
name|path
init|=
name|reader
operator|.
name|readString
argument_list|()
decl_stmt|;
name|reader
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|reader
operator|.
name|read
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
for|for
control|(
name|boolean
name|first
init|=
literal|true
init|;
operator|!
name|reader
operator|.
name|matches
argument_list|(
literal|']'
argument_list|)
condition|;
name|first
operator|=
literal|false
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|reader
operator|.
name|read
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sizeWithinLimits
argument_list|()
condition|)
block|{
name|indexedNodes
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|reader
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|reader
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
condition|)
do|;
name|reader
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|read
argument_list|(
name|JsopReader
operator|.
name|END
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|JournalProperty
name|build
parameter_list|()
block|{
return|return
operator|new
name|IndexedPaths
argument_list|(
name|indexedNodes
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|sizeWithinLimits
parameter_list|()
block|{
if|if
condition|(
name|indexedNodes
operator|.
name|size
argument_list|()
operator|>=
name|maxSize
condition|)
block|{
if|if
condition|(
operator|!
name|limitWarningLogged
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Max size of {} reached. Further addition of index path data would be dropped"
argument_list|,
name|maxSize
argument_list|)
expr_stmt|;
name|limitWarningLogged
operator|=
literal|true
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

