begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tika
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|csv
operator|.
name|CSVFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|csv
operator|.
name|CSVPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|CSVFileGenerator
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|File
name|outFile
decl_stmt|;
specifier|public
name|CSVFileGenerator
parameter_list|(
name|File
name|outFile
parameter_list|)
block|{
name|this
operator|.
name|outFile
operator|=
name|outFile
expr_stmt|;
block|}
specifier|public
name|void
name|generate
parameter_list|(
name|FluentIterable
argument_list|<
name|BinaryResource
argument_list|>
name|binaries
parameter_list|)
throws|throws
name|IOException
block|{
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
try|try
block|{
name|CSVPrinter
name|printer
init|=
operator|new
name|CSVPrinter
argument_list|(
name|Files
operator|.
name|newWriter
argument_list|(
name|outFile
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
name|CSVFileBinaryResourceProvider
operator|.
name|FORMAT
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|printer
argument_list|)
expr_stmt|;
for|for
control|(
name|BinaryResource
name|br
range|:
name|binaries
control|)
block|{
name|count
operator|++
expr_stmt|;
name|printer
operator|.
name|printRecord
argument_list|(
name|br
operator|.
name|getBlobId
argument_list|()
argument_list|,
name|br
operator|.
name|getByteSource
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|br
operator|.
name|getMimeType
argument_list|()
argument_list|,
name|br
operator|.
name|getEncoding
argument_list|()
argument_list|,
name|br
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Processed {} binaries so far"
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
name|printer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Generated csv output at {} with {} entries"
argument_list|,
name|outFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

