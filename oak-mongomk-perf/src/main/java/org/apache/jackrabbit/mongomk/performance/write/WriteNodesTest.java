begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|performance
operator|.
name|write
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|util
operator|.
name|MongoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Measures the time needed for creating different tree node structures.Only one  * mongoMk is used for writing operation.  *   * @author rogoz  *   */
end_comment

begin_class
specifier|public
class|class
name|WriteNodesTest
extends|extends
name|MultipleNodesTestBase
block|{
specifier|static
name|MicroKernel
name|mk
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|readConfig
argument_list|()
expr_stmt|;
name|initMongo
argument_list|()
expr_stmt|;
name|mk
operator|=
name|initMicroKernel
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|cleanDatabase
parameter_list|()
block|{
name|MongoUtil
operator|.
name|initDatabase
argument_list|(
name|mongoConnection
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Creates 10000 nodes, all with on the same level with the same parent 	 * node. 	 */
annotation|@
name|Test
specifier|public
name|void
name|addNodesInLine
parameter_list|()
block|{
name|int
name|nodesNumber
init|=
literal|10000
decl_stmt|;
name|TestUtil
operator|.
name|insertNode
argument_list|(
name|mk
argument_list|,
literal|"/"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|nodesNumber
argument_list|,
literal|"N"
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Creates 10000 nodes, all of them having 10 children nodes. 	 */
annotation|@
name|Test
specifier|public
name|void
name|addNodes10Children
parameter_list|()
block|{
name|int
name|nodesNumber
init|=
literal|10000
decl_stmt|;
name|TestUtil
operator|.
name|insertNode
argument_list|(
name|mk
argument_list|,
literal|"/"
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
name|nodesNumber
argument_list|,
literal|"N"
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Creates 10000 nodes, all of them having 100 children nodes. 	 */
annotation|@
name|Test
specifier|public
name|void
name|addNodes100Children
parameter_list|()
block|{
name|int
name|nodesNumber
init|=
literal|10000
decl_stmt|;
name|TestUtil
operator|.
name|insertNode
argument_list|(
name|mk
argument_list|,
literal|"/"
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
name|nodesNumber
argument_list|,
literal|"N"
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Creates 10000 nodes, all of them on different levels.Each node has one 	 * child only. 	 */
annotation|@
name|Test
specifier|public
name|void
name|addNodes1Child
parameter_list|()
block|{
name|int
name|nodesNumber
init|=
literal|2000
decl_stmt|;
name|TestUtil
operator|.
name|insertNode
argument_list|(
name|mk
argument_list|,
literal|"/"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|nodesNumber
argument_list|,
literal|"N"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

