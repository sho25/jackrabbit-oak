begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|impl
operator|.
name|ImmutableTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|ReadOnlyVersionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|VersionTreePermissionTest
extends|extends
name|AbstractSecurityTest
implements|implements
name|NodeTypeConstants
block|{
specifier|private
name|ReadOnlyVersionManager
name|vMgr
decl_stmt|;
specifier|private
name|PermissionProvider
name|pp
decl_stmt|;
specifier|private
name|Tree
name|testTree
decl_stmt|;
specifier|private
name|Field
name|vpField
decl_stmt|;
specifier|private
name|Field
name|tpImplTree
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|NodeUtil
name|testNode
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|testNode
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|testNode
operator|.
name|getTree
argument_list|()
argument_list|,
name|MIX_VERSIONABLE
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|AccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
literal|"/test"
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
literal|"/test"
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// create a structure in the version storage
name|testNode
operator|.
name|setBoolean
argument_list|(
name|JCR_ISCHECKEDOUT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testNode
operator|.
name|setBoolean
argument_list|(
name|JCR_ISCHECKEDOUT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testTree
operator|=
name|testNode
operator|.
name|getTree
argument_list|()
expr_stmt|;
name|vMgr
operator|=
name|ReadOnlyVersionManager
operator|.
name|getInstance
argument_list|(
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|pp
operator|=
name|getConfig
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|root
operator|.
name|getContentSession
argument_list|()
operator|.
name|getWorkspaceName
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|instanceof
name|PermissionProviderImpl
argument_list|)
expr_stmt|;
name|vpField
operator|=
name|VersionTreePermission
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"versionablePermission"
argument_list|)
expr_stmt|;
name|vpField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Class
name|cls
init|=
name|Class
operator|.
name|forName
argument_list|(
name|CompiledPermissionImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"$TreePermissionImpl"
argument_list|)
decl_stmt|;
name|tpImplTree
operator|=
name|cls
operator|.
name|getDeclaredField
argument_list|(
literal|"tree"
argument_list|)
expr_stmt|;
name|tpImplTree
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|exists
argument_list|()
condition|)
block|{
name|t
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|TreePermission
name|getVersionPermission
parameter_list|(
name|Root
name|root
parameter_list|,
name|PermissionProvider
name|pp
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|TreePermission
name|tp
init|=
name|pp
operator|.
name|getTreePermission
argument_list|(
name|t
argument_list|,
name|TreePermission
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|t
operator|=
name|t
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|tp
operator|=
name|pp
operator|.
name|getTreePermission
argument_list|(
name|t
argument_list|,
name|tp
argument_list|)
expr_stmt|;
block|}
return|return
name|tp
return|;
block|}
specifier|private
name|void
name|assertVersionPermission
parameter_list|(
annotation|@
name|Nonnull
name|TreePermission
name|tp
parameter_list|,
annotation|@
name|Nonnull
name|String
name|expectedPath
parameter_list|,
name|boolean
name|canRead
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|tp
operator|instanceof
name|VersionTreePermission
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|canRead
argument_list|,
name|tp
operator|.
name|canRead
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|canRead
argument_list|,
name|tp
operator|.
name|canRead
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"any"
argument_list|,
literal|"Value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|canRead
argument_list|,
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|canRead
argument_list|,
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|READ
argument_list|,
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"any"
argument_list|,
literal|"Value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|canRead
argument_list|,
name|tp
operator|.
name|canReadProperties
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|canReadAll
argument_list|()
argument_list|)
expr_stmt|;
name|VersionTreePermission
name|vtp
init|=
operator|(
name|VersionTreePermission
operator|)
name|tp
decl_stmt|;
name|TreePermission
name|delegatee
init|=
operator|(
name|TreePermission
operator|)
name|vpField
operator|.
name|get
argument_list|(
name|vtp
argument_list|)
decl_stmt|;
name|Tree
name|delegateeTree
init|=
operator|(
name|Tree
operator|)
name|tpImplTree
operator|.
name|get
argument_list|(
name|delegatee
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|delegateeTree
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTreePermission
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|versionHistory
init|=
name|checkNotNull
argument_list|(
name|vMgr
operator|.
name|getVersionHistory
argument_list|(
name|testTree
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|expectedPath
init|=
literal|"/test"
decl_stmt|;
name|TreePermission
name|tp
init|=
name|getVersionPermission
argument_list|(
name|root
argument_list|,
name|pp
argument_list|,
name|versionHistory
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertVersionPermission
argument_list|(
name|tp
argument_list|,
name|expectedPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|vTree
init|=
name|versionHistory
operator|.
name|getChild
argument_list|(
literal|"1.0"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|vTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|tp
operator|=
name|pp
operator|.
name|getTreePermission
argument_list|(
name|vTree
argument_list|,
name|tp
argument_list|)
expr_stmt|;
name|assertVersionPermission
argument_list|(
name|tp
argument_list|,
name|expectedPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|frozen
init|=
name|vTree
operator|.
name|getChild
argument_list|(
name|JCR_FROZENNODE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|frozen
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|tp
operator|=
name|pp
operator|.
name|getTreePermission
argument_list|(
name|frozen
argument_list|,
name|tp
argument_list|)
expr_stmt|;
name|assertVersionPermission
argument_list|(
name|tp
argument_list|,
name|expectedPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|t
init|=
name|frozen
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
control|)
block|{
name|t
operator|=
name|t
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|expectedPath
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|expectedPath
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|tp
operator|=
name|pp
operator|.
name|getTreePermission
argument_list|(
name|t
argument_list|,
name|tp
argument_list|)
expr_stmt|;
name|assertVersionPermission
argument_list|(
name|tp
argument_list|,
name|expectedPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChild
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|versionHistory
init|=
name|checkNotNull
argument_list|(
name|vMgr
operator|.
name|getVersionHistory
argument_list|(
name|testTree
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableTree
name|t
init|=
operator|(
name|ImmutableTree
operator|)
name|getRootProvider
argument_list|()
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|TreePermission
name|tp
init|=
name|pp
operator|.
name|getTreePermission
argument_list|(
name|t
argument_list|,
name|TreePermission
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|versionHistory
operator|.
name|getPath
argument_list|()
argument_list|)
control|)
block|{
name|t
operator|=
name|t
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|tp
operator|=
name|tp
operator|.
name|getChildPermission
argument_list|(
name|name
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|expectedPath
init|=
literal|"/test"
decl_stmt|;
name|assertVersionPermission
argument_list|(
name|tp
argument_list|,
literal|"/test"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NodeState
name|ns
init|=
name|t
operator|.
name|getChild
argument_list|(
literal|"1.0"
argument_list|)
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|tp
operator|=
name|tp
operator|.
name|getChildPermission
argument_list|(
literal|"1.0"
argument_list|,
name|ns
argument_list|)
expr_stmt|;
name|assertVersionPermission
argument_list|(
name|tp
argument_list|,
literal|"/test"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ns
operator|=
name|ns
operator|.
name|getChildNode
argument_list|(
name|JCR_FROZENNODE
argument_list|)
expr_stmt|;
name|tp
operator|=
name|tp
operator|.
name|getChildPermission
argument_list|(
name|JCR_FROZENNODE
argument_list|,
name|ns
argument_list|)
expr_stmt|;
name|assertVersionPermission
argument_list|(
name|tp
argument_list|,
literal|"/test"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
control|)
block|{
name|ns
operator|=
name|ns
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|expectedPath
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|expectedPath
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|tp
operator|=
name|tp
operator|.
name|getChildPermission
argument_list|(
name|name
argument_list|,
name|ns
argument_list|)
expr_stmt|;
name|assertVersionPermission
argument_list|(
name|tp
argument_list|,
name|expectedPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVersionableRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|versionHistory
init|=
name|checkNotNull
argument_list|(
name|vMgr
operator|.
name|getVersionHistory
argument_list|(
name|testTree
argument_list|)
argument_list|)
decl_stmt|;
name|testTree
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|pp
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|TreePermission
name|tp
init|=
name|getVersionPermission
argument_list|(
name|root
argument_list|,
name|pp
argument_list|,
name|versionHistory
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertVersionPermission
argument_list|(
name|tp
argument_list|,
literal|"/"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Tree
name|vTree
init|=
name|versionHistory
operator|.
name|getChild
argument_list|(
literal|"1.0"
argument_list|)
decl_stmt|;
name|tp
operator|=
name|pp
operator|.
name|getTreePermission
argument_list|(
name|vTree
argument_list|,
name|tp
argument_list|)
expr_stmt|;
name|assertVersionPermission
argument_list|(
name|tp
argument_list|,
literal|"/"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Tree
name|frozen
init|=
name|vTree
operator|.
name|getChild
argument_list|(
name|JCR_FROZENNODE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|frozen
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|tp
operator|=
name|pp
operator|.
name|getTreePermission
argument_list|(
name|frozen
argument_list|,
name|tp
argument_list|)
expr_stmt|;
name|assertVersionPermission
argument_list|(
name|tp
argument_list|,
literal|"/"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Tree
name|t
init|=
name|frozen
decl_stmt|;
name|String
name|expectedPath
init|=
literal|"/"
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
control|)
block|{
name|t
operator|=
name|t
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|expectedPath
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|expectedPath
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|tp
operator|=
name|pp
operator|.
name|getTreePermission
argument_list|(
name|t
argument_list|,
name|tp
argument_list|)
expr_stmt|;
name|assertVersionPermission
argument_list|(
name|tp
argument_list|,
name|expectedPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVersionableChildRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|root
operator|.
name|getTree
argument_list|(
literal|"/test/a/b/c"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|pp
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|versionHistory
init|=
name|checkNotNull
argument_list|(
name|vMgr
operator|.
name|getVersionHistory
argument_list|(
name|testTree
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|frozenCPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|versionHistory
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"1.0"
argument_list|,
name|JCR_FROZENNODE
argument_list|,
literal|"a/b/c"
argument_list|)
decl_stmt|;
name|TreePermission
name|tp
init|=
name|getVersionPermission
argument_list|(
name|root
argument_list|,
name|pp
argument_list|,
name|frozenCPath
argument_list|)
decl_stmt|;
name|assertVersionPermission
argument_list|(
name|tp
argument_list|,
literal|"/test/a/b/c"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|getTree
argument_list|(
literal|"/test/a"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|pp
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|tp
operator|=
name|getVersionPermission
argument_list|(
name|root
argument_list|,
name|pp
argument_list|,
name|frozenCPath
argument_list|)
expr_stmt|;
name|assertVersionPermission
argument_list|(
name|tp
argument_list|,
literal|"/test/a/b/c"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVersionableChildRemoved2
parameter_list|()
throws|throws
name|Exception
block|{
name|root
operator|.
name|getTree
argument_list|(
literal|"/test/a/b"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|pp
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|versionHistory
init|=
name|checkNotNull
argument_list|(
name|vMgr
operator|.
name|getVersionHistory
argument_list|(
name|testTree
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|frozenAPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|versionHistory
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"1.0"
argument_list|,
name|JCR_FROZENNODE
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|TreePermission
name|tp
init|=
name|getVersionPermission
argument_list|(
name|root
argument_list|,
name|pp
argument_list|,
name|frozenAPath
argument_list|)
decl_stmt|;
name|assertVersionPermission
argument_list|(
name|tp
argument_list|,
literal|"/test/a"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|frozenB
init|=
name|root
operator|.
name|getTree
argument_list|(
name|frozenAPath
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|tp
operator|=
name|pp
operator|.
name|getTreePermission
argument_list|(
name|frozenB
argument_list|,
name|tp
argument_list|)
expr_stmt|;
name|assertVersionPermission
argument_list|(
name|tp
argument_list|,
literal|"/test/a/b"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|frozenC
init|=
name|frozenB
operator|.
name|getChild
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|tp
operator|=
name|pp
operator|.
name|getTreePermission
argument_list|(
name|frozenC
argument_list|,
name|tp
argument_list|)
expr_stmt|;
name|assertVersionPermission
argument_list|(
name|tp
argument_list|,
literal|"/test/a/b/c"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

