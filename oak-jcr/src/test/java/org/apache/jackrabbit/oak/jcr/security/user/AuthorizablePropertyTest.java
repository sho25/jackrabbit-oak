begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * AuthorizablePropertyTest...  */
end_comment

begin_class
specifier|public
class|class
name|AuthorizablePropertyTest
extends|extends
name|AbstractUserTest
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|protectedUserProps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|protectedGroupProps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|protectedUserProps
operator|.
name|put
argument_list|(
name|UserConstants
operator|.
name|REP_PASSWORD
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|protectedUserProps
operator|.
name|put
argument_list|(
name|UserConstants
operator|.
name|REP_IMPERSONATORS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|protectedUserProps
operator|.
name|put
argument_list|(
name|UserConstants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|protectedGroupProps
operator|.
name|put
argument_list|(
name|UserConstants
operator|.
name|REP_MEMBERS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|protectedGroupProps
operator|.
name|put
argument_list|(
name|UserConstants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|checkProtected
parameter_list|(
name|Property
name|prop
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|assertTrue
argument_list|(
name|prop
operator|.
name|getDefinition
argument_list|()
operator|.
name|isProtected
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetProperty
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|String
name|propName
init|=
literal|"Fullname"
decl_stmt|;
name|Value
name|v
init|=
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"Super User"
argument_list|)
decl_stmt|;
try|try
block|{
name|user
operator|.
name|setProperty
argument_list|(
name|propName
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|(
literal|"Cannot test 'Authorizable.setProperty'."
argument_list|)
throw|;
block|}
try|try
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|user
operator|.
name|getPropertyNames
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|found
condition|;
control|)
block|{
name|found
operator|=
name|propName
operator|.
name|equals
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|found
argument_list|)
expr_stmt|;
name|found
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|user
operator|.
name|getPropertyNames
argument_list|(
literal|"."
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|found
condition|;
control|)
block|{
name|found
operator|=
name|propName
operator|.
name|equals
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|found
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|user
operator|.
name|hasProperty
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|user
operator|.
name|hasProperty
argument_list|(
literal|"./"
operator|+
name|propName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|v
argument_list|,
name|user
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|v
argument_list|,
name|user
operator|.
name|getProperty
argument_list|(
literal|"./"
operator|+
name|propName
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|user
operator|.
name|removeProperty
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|user
operator|.
name|hasProperty
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// try to remove the property again even if previous calls failed.
name|user
operator|.
name|removeProperty
argument_list|(
name|propName
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetMultiValueProperty
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|String
name|propName
init|=
literal|"Fullname"
decl_stmt|;
name|Value
index|[]
name|v
init|=
operator|new
name|Value
index|[]
block|{
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"Super User"
argument_list|)
block|}
decl_stmt|;
try|try
block|{
name|user
operator|.
name|setProperty
argument_list|(
name|propName
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|(
literal|"Cannot test 'Authorizable.setProperty'."
argument_list|)
throw|;
block|}
try|try
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|user
operator|.
name|getPropertyNames
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|found
condition|;
control|)
block|{
name|found
operator|=
name|propName
operator|.
name|equals
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|found
argument_list|)
expr_stmt|;
name|found
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|user
operator|.
name|getPropertyNames
argument_list|(
literal|"."
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|found
condition|;
control|)
block|{
name|found
operator|=
name|propName
operator|.
name|equals
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|found
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|user
operator|.
name|hasProperty
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|user
operator|.
name|hasProperty
argument_list|(
literal|"./"
operator|+
name|propName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|v
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|v
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
literal|"./"
operator|+
name|propName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|user
operator|.
name|removeProperty
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|user
operator|.
name|hasProperty
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// try to remove the property again even if previous calls failed.
name|user
operator|.
name|removeProperty
argument_list|(
name|propName
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPropertyByRelPath
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|Value
index|[]
name|v
init|=
operator|new
name|Value
index|[]
block|{
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"Super User"
argument_list|)
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|relPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|relPaths
operator|.
name|add
argument_list|(
literal|"testing/Fullname"
argument_list|)
expr_stmt|;
name|relPaths
operator|.
name|add
argument_list|(
literal|"testing/Email"
argument_list|)
expr_stmt|;
name|relPaths
operator|.
name|add
argument_list|(
literal|"testing/testing/testing/Fullname"
argument_list|)
expr_stmt|;
name|relPaths
operator|.
name|add
argument_list|(
literal|"testing/testing/testing/Email"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|relPath
range|:
name|relPaths
control|)
block|{
try|try
block|{
name|user
operator|.
name|setProperty
argument_list|(
name|relPath
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|user
operator|.
name|hasProperty
argument_list|(
name|relPath
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|propName
init|=
name|Text
operator|.
name|getName
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|user
operator|.
name|hasProperty
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// try to remove the property even if previous calls failed.
name|user
operator|.
name|removeProperty
argument_list|(
name|relPath
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPropertyInvalidRelativePath
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|Value
index|[]
name|v
init|=
operator|new
name|Value
index|[]
block|{
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"Super User"
argument_list|)
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|invalidPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// try setting outside of tree defined by the user.
name|invalidPaths
operator|.
name|add
argument_list|(
literal|"../testing/Fullname"
argument_list|)
expr_stmt|;
name|invalidPaths
operator|.
name|add
argument_list|(
literal|"../../testing/Fullname"
argument_list|)
expr_stmt|;
name|invalidPaths
operator|.
name|add
argument_list|(
literal|"testing/testing/../../../Fullname"
argument_list|)
expr_stmt|;
comment|// try absolute path -> must fail
name|invalidPaths
operator|.
name|add
argument_list|(
literal|"/testing/Fullname"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|invalidRelPath
range|:
name|invalidPaths
control|)
block|{
try|try
block|{
name|user
operator|.
name|setProperty
argument_list|(
name|invalidRelPath
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Modifications outside of the scope of the authorizable must fail. Path was: "
operator|+
name|invalidRelPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// success.
block|}
finally|finally
block|{
name|superuser
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPropertyByInvalidRelativePath
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|wrongPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|wrongPaths
operator|.
name|add
argument_list|(
literal|"../jcr:primaryType"
argument_list|)
expr_stmt|;
name|wrongPaths
operator|.
name|add
argument_list|(
literal|"../../jcr:primaryType"
argument_list|)
expr_stmt|;
name|wrongPaths
operator|.
name|add
argument_list|(
literal|"../testing/jcr:primaryType"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|wrongPaths
control|)
block|{
name|assertNull
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|invalidPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|invalidPaths
operator|.
name|add
argument_list|(
literal|"/testing/jcr:primaryType"
argument_list|)
expr_stmt|;
name|invalidPaths
operator|.
name|add
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
name|invalidPaths
operator|.
name|add
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|invalidPaths
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|invalidPath
range|:
name|invalidPaths
control|)
block|{
try|try
block|{
name|assertNull
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
name|invalidPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPropertyByInvalidRelativePath
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|wrongPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|wrongPaths
operator|.
name|add
argument_list|(
literal|"../jcr:primaryType"
argument_list|)
expr_stmt|;
name|wrongPaths
operator|.
name|add
argument_list|(
literal|"../../jcr:primaryType"
argument_list|)
expr_stmt|;
name|wrongPaths
operator|.
name|add
argument_list|(
literal|"../testing/jcr:primaryType"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|wrongPaths
control|)
block|{
name|assertFalse
argument_list|(
name|user
operator|.
name|hasProperty
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|invalidPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|invalidPaths
operator|.
name|add
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
name|invalidPaths
operator|.
name|add
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|invalidPaths
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|invalidPath
range|:
name|invalidPaths
control|)
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|user
operator|.
name|hasProperty
argument_list|(
name|invalidPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPropertyNames
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|String
name|propName
init|=
literal|"Fullname"
decl_stmt|;
name|Value
name|v
init|=
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"Super User"
argument_list|)
decl_stmt|;
try|try
block|{
name|user
operator|.
name|setProperty
argument_list|(
name|propName
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|(
literal|"Cannot test 'Authorizable.setProperty'."
argument_list|)
throw|;
block|}
try|try
block|{
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|user
operator|.
name|getPropertyNames
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|user
operator|.
name|hasProperty
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// try to remove the property again even if previous calls failed.
name|user
operator|.
name|removeProperty
argument_list|(
name|propName
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPropertyNamesByRelPath
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|String
name|relPath
init|=
literal|"testing/Fullname"
decl_stmt|;
name|Value
name|v
init|=
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"Super User"
argument_list|)
decl_stmt|;
try|try
block|{
name|user
operator|.
name|setProperty
argument_list|(
name|relPath
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|(
literal|"Cannot test 'Authorizable.setProperty'."
argument_list|)
throw|;
block|}
try|try
block|{
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|user
operator|.
name|getPropertyNames
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Fullname"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|user
operator|.
name|getPropertyNames
argument_list|(
literal|"testing"
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|rp
init|=
literal|"testing/"
operator|+
name|name
decl_stmt|;
name|assertFalse
argument_list|(
name|user
operator|.
name|hasProperty
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|user
operator|.
name|hasProperty
argument_list|(
name|rp
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
name|rp
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|user
operator|.
name|getPropertyNames
argument_list|(
literal|"./testing"
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|rp
init|=
literal|"testing/"
operator|+
name|name
decl_stmt|;
name|assertFalse
argument_list|(
name|user
operator|.
name|hasProperty
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|user
operator|.
name|hasProperty
argument_list|(
name|rp
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
name|rp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// try to remove the property again even if previous calls failed.
name|user
operator|.
name|removeProperty
argument_list|(
name|relPath
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPropertyNamesByInvalidRelPath
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|invalidPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|invalidPaths
operator|.
name|add
argument_list|(
literal|"../"
argument_list|)
expr_stmt|;
name|invalidPaths
operator|.
name|add
argument_list|(
literal|"../../"
argument_list|)
expr_stmt|;
name|invalidPaths
operator|.
name|add
argument_list|(
literal|"../testing"
argument_list|)
expr_stmt|;
name|invalidPaths
operator|.
name|add
argument_list|(
literal|"/testing"
argument_list|)
expr_stmt|;
name|invalidPaths
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|invalidRelPath
range|:
name|invalidPaths
control|)
block|{
try|try
block|{
name|user
operator|.
name|getPropertyNames
argument_list|(
name|invalidRelPath
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Calling Authorizable#getPropertyNames with "
operator|+
name|invalidRelPath
operator|+
literal|" must fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
comment|//    @Test FIXME OAK-502
comment|//    public void testGetPropertyNamesByInvalidRelPathThrowsAIOOBE() throws NotExecutableException, RepositoryException {
comment|//        user.getPropertyNames("");
comment|//    }
annotation|@
name|Test
specifier|public
name|void
name|testGetNotExistingProperty
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|String
name|hint
init|=
literal|"Fullname"
decl_stmt|;
name|String
name|propName
init|=
name|hint
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|user
operator|.
name|hasProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|propName
operator|=
name|hint
operator|+
name|i
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|user
operator|.
name|hasProperty
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetNullPropertyRemoves
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|Value
name|v
init|=
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"testValue"
argument_list|)
decl_stmt|;
try|try
block|{
name|user
operator|.
name|setProperty
argument_list|(
literal|"testProperty"
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
literal|"testMvProperty"
argument_list|,
operator|new
name|Value
index|[]
block|{
name|v
block|}
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|(
literal|"Cannot test 'Authorizable.setProperty'."
argument_list|)
throw|;
block|}
name|user
operator|.
name|setProperty
argument_list|(
literal|"testProperty"
argument_list|,
operator|(
name|Value
operator|)
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|user
operator|.
name|hasProperty
argument_list|(
literal|"testProperty"
argument_list|)
argument_list|)
expr_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
literal|"testMvProperty"
argument_list|,
operator|(
name|Value
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|user
operator|.
name|hasProperty
argument_list|(
literal|"testMvProperty"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleValueToMultiValue
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|Value
name|v
init|=
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"testValue"
argument_list|)
decl_stmt|;
try|try
block|{
name|user
operator|.
name|setProperty
argument_list|(
literal|"testProperty"
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|(
literal|"Cannot test 'Authorizable.setProperty'."
argument_list|)
throw|;
block|}
name|user
operator|.
name|setProperty
argument_list|(
literal|"testProperty"
argument_list|,
operator|new
name|Value
index|[]
block|{
name|v
block|}
argument_list|)
expr_stmt|;
name|Property
name|p
init|=
name|superuser
operator|.
name|getProperty
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
operator|+
literal|"/testProperty"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiValueToSingleValue
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|Value
name|v
init|=
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"testValue"
argument_list|)
decl_stmt|;
try|try
block|{
name|user
operator|.
name|setProperty
argument_list|(
literal|"testProperty"
argument_list|,
operator|new
name|Value
index|[]
block|{
name|v
block|}
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|(
literal|"Cannot test 'Authorizable.setProperty'."
argument_list|)
throw|;
block|}
name|user
operator|.
name|setProperty
argument_list|(
literal|"testProperty"
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|Property
name|p
init|=
name|superuser
operator|.
name|getProperty
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
operator|+
literal|"/testProperty"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|p
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveNotExistingProperty
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|String
name|hint
init|=
literal|"Fullname"
decl_stmt|;
name|String
name|propName
init|=
name|hint
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|user
operator|.
name|hasProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|propName
operator|=
name|hint
operator|+
name|i
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|user
operator|.
name|removeProperty
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetSpecialProperties
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|Value
name|v
init|=
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"any_value"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pName
range|:
name|protectedUserProps
operator|.
name|keySet
argument_list|()
control|)
block|{
try|try
block|{
name|boolean
name|isMultiValued
init|=
name|protectedUserProps
operator|.
name|get
argument_list|(
name|pName
argument_list|)
decl_stmt|;
if|if
condition|(
name|isMultiValued
condition|)
block|{
name|user
operator|.
name|setProperty
argument_list|(
name|pName
argument_list|,
operator|new
name|Value
index|[]
block|{
name|v
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|user
operator|.
name|setProperty
argument_list|(
name|pName
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"changing the '"
operator|+
name|pName
operator|+
literal|"' property on a User should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
finally|finally
block|{
name|superuser
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|pName
range|:
name|protectedGroupProps
operator|.
name|keySet
argument_list|()
control|)
block|{
try|try
block|{
name|boolean
name|isMultiValued
init|=
name|protectedGroupProps
operator|.
name|get
argument_list|(
name|pName
argument_list|)
decl_stmt|;
if|if
condition|(
name|isMultiValued
condition|)
block|{
name|group
operator|.
name|setProperty
argument_list|(
name|pName
argument_list|,
operator|new
name|Value
index|[]
block|{
name|v
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|group
operator|.
name|setProperty
argument_list|(
name|pName
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"changing the '"
operator|+
name|pName
operator|+
literal|"' property on a Group should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
finally|finally
block|{
name|superuser
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveSpecialProperties
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
for|for
control|(
name|String
name|pName
range|:
name|protectedUserProps
operator|.
name|keySet
argument_list|()
control|)
block|{
try|try
block|{
if|if
condition|(
name|user
operator|.
name|removeProperty
argument_list|(
name|pName
argument_list|)
condition|)
block|{
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"removing the '"
operator|+
name|pName
operator|+
literal|"' property on a User should fail."
argument_list|)
expr_stmt|;
block|}
comment|// else: property not present: fine as well.
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
finally|finally
block|{
name|superuser
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|pName
range|:
name|protectedGroupProps
operator|.
name|keySet
argument_list|()
control|)
block|{
try|try
block|{
if|if
condition|(
name|group
operator|.
name|removeProperty
argument_list|(
name|pName
argument_list|)
condition|)
block|{
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"removing the '"
operator|+
name|pName
operator|+
literal|"' property on a Group should fail."
argument_list|)
expr_stmt|;
block|}
comment|// else: property not present. fine as well.
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
finally|finally
block|{
name|superuser
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProtectedUserProperties
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|Node
name|n
init|=
name|getNode
argument_list|(
name|user
argument_list|,
name|superuser
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|hasProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PASSWORD
argument_list|)
condition|)
block|{
name|checkProtected
argument_list|(
name|n
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PASSWORD
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|.
name|hasProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|)
condition|)
block|{
name|checkProtected
argument_list|(
name|n
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|.
name|hasProperty
argument_list|(
name|UserConstants
operator|.
name|REP_IMPERSONATORS
argument_list|)
condition|)
block|{
name|checkProtected
argument_list|(
name|n
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_IMPERSONATORS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProtectedGroupProperties
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|Node
name|n
init|=
name|getNode
argument_list|(
name|group
argument_list|,
name|superuser
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|hasProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|)
condition|)
block|{
name|checkProtected
argument_list|(
name|n
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|.
name|hasProperty
argument_list|(
name|UserConstants
operator|.
name|REP_MEMBERS
argument_list|)
condition|)
block|{
name|checkProtected
argument_list|(
name|n
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_MEMBERS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMembersPropertyType
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|Node
name|n
init|=
name|getNode
argument_list|(
name|group
argument_list|,
name|superuser
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|n
operator|.
name|hasProperty
argument_list|(
name|UserConstants
operator|.
name|REP_MEMBERS
argument_list|)
condition|)
block|{
name|group
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
name|Property
name|p
init|=
name|n
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_MEMBERS
argument_list|)
decl_stmt|;
for|for
control|(
name|Value
name|v
range|:
name|p
operator|.
name|getValues
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|WEAKREFERENCE
argument_list|,
name|v
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetSpecialPropertiesDirectly
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|Node
name|n
init|=
name|getNode
argument_list|(
name|user
argument_list|,
name|superuser
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|pName
init|=
name|user
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|,
operator|new
name|StringValue
argument_list|(
literal|"any-value"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should have failed => change value back.
name|n
operator|.
name|setProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|,
operator|new
name|StringValue
argument_list|(
name|pName
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Attempt to change protected property rep:principalName should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConstraintViolationException
name|e
parameter_list|)
block|{
comment|// ok.
block|}
try|try
block|{
name|String
name|imperson
init|=
literal|"anyimpersonator"
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
name|UserConstants
operator|.
name|REP_IMPERSONATORS
argument_list|,
operator|new
name|Value
index|[]
block|{
operator|new
name|StringValue
argument_list|(
name|imperson
argument_list|)
block|}
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Attempt to change protected property rep:impersonators should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConstraintViolationException
name|e
parameter_list|)
block|{
comment|// ok.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveSpecialUserPropertiesDirectly
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|Node
name|n
init|=
name|getNode
argument_list|(
name|user
argument_list|,
name|superuser
argument_list|)
decl_stmt|;
try|try
block|{
name|n
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PASSWORD
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Attempt to remove protected property rep:password should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConstraintViolationException
name|e
parameter_list|)
block|{
comment|// ok.
block|}
try|try
block|{
if|if
condition|(
name|n
operator|.
name|hasProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|)
condition|)
block|{
name|n
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Attempt to remove protected property rep:principalName should fail."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ConstraintViolationException
name|e
parameter_list|)
block|{
comment|// ok.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveSpecialGroupPropertiesDirectly
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|Node
name|n
init|=
name|getNode
argument_list|(
name|group
argument_list|,
name|superuser
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|n
operator|.
name|hasProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|)
condition|)
block|{
name|n
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Attempt to remove protected property rep:principalName should fail."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ConstraintViolationException
name|e
parameter_list|)
block|{
comment|// ok.
block|}
try|try
block|{
if|if
condition|(
name|n
operator|.
name|hasProperty
argument_list|(
name|UserConstants
operator|.
name|REP_MEMBERS
argument_list|)
condition|)
block|{
name|n
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_MEMBERS
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Attempt to remove protected property rep:members should fail."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ConstraintViolationException
name|e
parameter_list|)
block|{
comment|// ok.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserGetProperties
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|Node
name|n
init|=
name|getNode
argument_list|(
name|user
argument_list|,
name|superuser
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyIterator
name|it
init|=
name|n
operator|.
name|getProperties
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Property
name|p
init|=
name|it
operator|.
name|nextProperty
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getDefinition
argument_list|()
operator|.
name|isProtected
argument_list|()
condition|)
block|{
name|assertFalse
argument_list|(
name|user
operator|.
name|hasProperty
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// authorizable defined property
name|assertTrue
argument_list|(
name|user
operator|.
name|hasProperty
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupGetProperties
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|Node
name|n
init|=
name|getNode
argument_list|(
name|group
argument_list|,
name|superuser
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyIterator
name|it
init|=
name|n
operator|.
name|getProperties
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Property
name|prop
init|=
name|it
operator|.
name|nextProperty
argument_list|()
decl_stmt|;
if|if
condition|(
name|prop
operator|.
name|getDefinition
argument_list|()
operator|.
name|isProtected
argument_list|()
condition|)
block|{
name|assertFalse
argument_list|(
name|group
operator|.
name|hasProperty
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|group
operator|.
name|getProperty
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// authorizable defined property
name|assertTrue
argument_list|(
name|group
operator|.
name|hasProperty
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|group
operator|.
name|getProperty
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleToMultiValued
parameter_list|()
throws|throws
name|Exception
block|{
name|UserManager
name|uMgr
init|=
name|getUserManager
argument_list|(
name|superuser
argument_list|)
decl_stmt|;
try|try
block|{
name|Value
name|v
init|=
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"anyValue"
argument_list|)
decl_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
literal|"someProp"
argument_list|,
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|uMgr
operator|.
name|isAutoSave
argument_list|()
condition|)
block|{
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|Value
index|[]
name|vs
init|=
operator|new
name|Value
index|[]
block|{
name|v
block|,
name|v
block|}
decl_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
literal|"someProp"
argument_list|,
name|vs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|uMgr
operator|.
name|isAutoSave
argument_list|()
condition|)
block|{
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|user
operator|.
name|removeProperty
argument_list|(
literal|"someProp"
argument_list|)
operator|&&
operator|!
name|uMgr
operator|.
name|isAutoSave
argument_list|()
condition|)
block|{
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiValuedToSingle
parameter_list|()
throws|throws
name|Exception
block|{
name|UserManager
name|uMgr
init|=
name|getUserManager
argument_list|(
name|superuser
argument_list|)
decl_stmt|;
try|try
block|{
name|Value
name|v
init|=
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"anyValue"
argument_list|)
decl_stmt|;
name|Value
index|[]
name|vs
init|=
operator|new
name|Value
index|[]
block|{
name|v
block|,
name|v
block|}
decl_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
literal|"someProp"
argument_list|,
name|vs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|uMgr
operator|.
name|isAutoSave
argument_list|()
condition|)
block|{
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|user
operator|.
name|setProperty
argument_list|(
literal|"someProp"
argument_list|,
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|uMgr
operator|.
name|isAutoSave
argument_list|()
condition|)
block|{
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|user
operator|.
name|removeProperty
argument_list|(
literal|"someProp"
argument_list|)
operator|&&
operator|!
name|uMgr
operator|.
name|isAutoSave
argument_list|()
condition|)
block|{
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

