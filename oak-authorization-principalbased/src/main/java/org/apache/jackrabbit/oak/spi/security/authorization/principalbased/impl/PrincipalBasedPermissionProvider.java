begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|ReadOnly
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeTypeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|ReadOnlyVersionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|AggregatedPermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|RepositoryPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBitsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|version
operator|.
name|VersionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
operator|.
name|ALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
operator|.
name|EMPTY
import|;
end_import

begin_class
class|class
name|PrincipalBasedPermissionProvider
implements|implements
name|AggregatedPermissionProvider
implements|,
name|Constants
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PrincipalBasedPermissionProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
specifier|private
specifier|final
name|String
name|workspaceName
decl_stmt|;
specifier|private
specifier|final
name|Iterable
name|principalPaths
decl_stmt|;
specifier|private
specifier|final
name|MgrProvider
name|mgrProvider
decl_stmt|;
specifier|private
specifier|final
name|TreeTypeProvider
name|typeProvider
decl_stmt|;
specifier|private
specifier|final
name|PrivilegeBits
name|modAcBits
decl_stmt|;
specifier|private
name|Root
name|immutableRoot
decl_stmt|;
specifier|private
name|RepositoryPermissionImpl
name|repositoryPermission
decl_stmt|;
specifier|private
name|EntryCache
name|entryCache
decl_stmt|;
name|PrincipalBasedPermissionProvider
parameter_list|(
annotation|@
name|NotNull
name|Root
name|root
parameter_list|,
annotation|@
name|NotNull
name|String
name|workspaceName
parameter_list|,
annotation|@
name|NotNull
name|Iterable
argument_list|<
name|String
argument_list|>
name|principalPaths
parameter_list|,
annotation|@
name|NotNull
name|PrincipalBasedAuthorizationConfiguration
name|authorizationConfiguration
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|workspaceName
operator|=
name|workspaceName
expr_stmt|;
name|this
operator|.
name|principalPaths
operator|=
name|principalPaths
expr_stmt|;
name|immutableRoot
operator|=
name|authorizationConfiguration
operator|.
name|getRootProvider
argument_list|()
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|mgrProvider
operator|=
operator|new
name|MgrProviderImpl
argument_list|(
name|authorizationConfiguration
argument_list|,
name|immutableRoot
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|typeProvider
operator|=
operator|new
name|TreeTypeProvider
argument_list|(
name|mgrProvider
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|modAcBits
operator|=
name|mgrProvider
operator|.
name|getPrivilegeBitsProvider
argument_list|()
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|entryCache
operator|=
operator|new
name|EntryCache
argument_list|(
name|immutableRoot
argument_list|,
name|principalPaths
argument_list|,
name|mgrProvider
operator|.
name|getRestrictionProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//-------------------------------------------------< PermissionProvider>---
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
block|{
name|immutableRoot
operator|=
name|mgrProvider
operator|.
name|getRootProvider
argument_list|()
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|mgrProvider
operator|.
name|reset
argument_list|(
name|immutableRoot
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|entryCache
operator|=
operator|new
name|EntryCache
argument_list|(
name|immutableRoot
argument_list|,
name|principalPaths
argument_list|,
name|mgrProvider
operator|.
name|getRestrictionProvider
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|repositoryPermission
operator|!=
literal|null
condition|)
block|{
name|repositoryPermission
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPrivileges
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|mgrProvider
operator|.
name|getPrivilegeBitsProvider
argument_list|()
operator|.
name|getPrivilegeNames
argument_list|(
name|getGrantedPrivilegeBits
argument_list|(
name|tree
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPrivileges
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|,
annotation|@
name|NotNull
name|String
modifier|...
name|privilegeNames
parameter_list|)
block|{
return|return
name|getGrantedPrivilegeBits
argument_list|(
name|tree
argument_list|)
operator|.
name|includes
argument_list|(
name|mgrProvider
operator|.
name|getPrivilegeBitsProvider
argument_list|()
operator|.
name|getBits
argument_list|(
name|privilegeNames
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|NotNull
name|RepositoryPermission
name|getRepositoryPermission
parameter_list|()
block|{
if|if
condition|(
name|repositoryPermission
operator|==
literal|null
condition|)
block|{
name|repositoryPermission
operator|=
operator|new
name|RepositoryPermissionImpl
argument_list|()
expr_stmt|;
block|}
return|return
name|repositoryPermission
return|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|NotNull
name|TreePermission
name|getTreePermission
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|,
annotation|@
name|NotNull
name|TreePermission
name|parentPermission
parameter_list|)
block|{
name|Tree
name|readOnly
init|=
name|getReadOnlyTree
argument_list|(
name|tree
argument_list|)
decl_stmt|;
name|TreeType
name|parentType
decl_stmt|;
if|if
condition|(
name|parentPermission
operator|instanceof
name|AbstractTreePermission
condition|)
block|{
name|parentType
operator|=
operator|(
operator|(
name|AbstractTreePermission
operator|)
name|parentPermission
operator|)
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|parentType
operator|=
operator|(
name|tree
operator|.
name|isRoot
argument_list|()
operator|)
condition|?
name|TreeType
operator|.
name|DEFAULT
else|:
name|typeProvider
operator|.
name|getType
argument_list|(
name|tree
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|getTreePermission
argument_list|(
name|readOnly
argument_list|,
name|typeProvider
operator|.
name|getType
argument_list|(
name|readOnly
argument_list|,
name|parentType
argument_list|)
argument_list|,
name|parentPermission
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
name|Tree
name|readOnly
init|=
name|getReadOnlyTree
argument_list|(
name|tree
argument_list|)
decl_stmt|;
name|TreeType
name|type
init|=
name|typeProvider
operator|.
name|getType
argument_list|(
name|readOnly
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|HIDDEN
case|:
return|return
literal|true
return|;
case|case
name|INTERNAL
case|:
return|return
literal|false
return|;
case|case
name|VERSION
case|:
if|if
condition|(
operator|!
name|isVersionStoreTree
argument_list|(
name|readOnly
argument_list|)
condition|)
block|{
name|Tree
name|versionableTree
init|=
name|getVersionableTree
argument_list|(
name|readOnly
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionableTree
operator|==
literal|null
condition|)
block|{
comment|// unable to determine the location of the versionable item -> deny access.
return|return
literal|false
return|;
block|}
comment|// reset the tree that is target for permission evaluation (see below)
name|readOnly
operator|=
name|versionableTree
expr_stmt|;
block|}
comment|// else: versionstore-tree is covered below
break|break;
case|case
name|ACCESS_CONTROL
case|:
if|if
condition|(
operator|!
name|isGrantedOnEffective
argument_list|(
name|readOnly
argument_list|,
name|permissions
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
default|default:
comment|// covered below
break|break;
block|}
return|return
name|isGranted
argument_list|(
name|readOnly
operator|.
name|getPath
argument_list|()
argument_list|,
name|EntryPredicate
operator|.
name|create
argument_list|(
name|readOnly
argument_list|,
name|property
argument_list|)
argument_list|,
name|EntryPredicate
operator|.
name|createParent
argument_list|(
name|readOnly
argument_list|,
name|permissions
argument_list|)
argument_list|,
name|permissions
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
annotation|@
name|NotNull
name|String
name|oakPath
parameter_list|,
annotation|@
name|NotNull
name|String
name|jcrActions
parameter_list|)
block|{
name|TreeLocation
name|location
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|immutableRoot
argument_list|,
name|oakPath
argument_list|)
decl_stmt|;
name|boolean
name|isAcContent
init|=
name|mgrProvider
operator|.
name|getContext
argument_list|()
operator|.
name|definesLocation
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|long
name|permissions
init|=
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|jcrActions
argument_list|,
name|location
argument_list|,
name|isAcContent
argument_list|)
decl_stmt|;
return|return
name|isGranted
argument_list|(
name|location
argument_list|,
name|permissions
argument_list|)
return|;
block|}
comment|//---------------------------------------< AggregatedPermissionProvider>---
annotation|@
name|Override
specifier|public
annotation|@
name|NotNull
name|PrivilegeBits
name|supportedPrivileges
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nullable
name|PrivilegeBits
name|privilegeBits
parameter_list|)
block|{
return|return
operator|(
name|privilegeBits
operator|!=
literal|null
operator|)
condition|?
name|privilegeBits
else|:
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|immutableRoot
argument_list|)
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|supportedPermissions
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
return|return
name|permissions
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|supportedPermissions
parameter_list|(
annotation|@
name|NotNull
name|TreeLocation
name|location
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
return|return
name|permissions
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|supportedPermissions
parameter_list|(
annotation|@
name|NotNull
name|TreePermission
name|treePermission
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
return|return
name|permissions
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
annotation|@
name|NotNull
name|TreeLocation
name|location
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
name|boolean
name|isGranted
init|=
literal|false
decl_stmt|;
name|PropertyState
name|property
init|=
name|location
operator|.
name|getProperty
argument_list|()
decl_stmt|;
name|TreeLocation
name|tl
init|=
operator|(
name|property
operator|==
literal|null
operator|)
condition|?
name|location
else|:
name|location
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Tree
name|tree
init|=
name|tl
operator|.
name|getTree
argument_list|()
decl_stmt|;
name|String
name|oakPath
init|=
name|location
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|tree
operator|!=
literal|null
condition|)
block|{
name|isGranted
operator|=
name|isGranted
argument_list|(
name|tree
argument_list|,
name|property
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|oakPath
operator|.
name|startsWith
argument_list|(
name|VersionConstants
operator|.
name|VERSION_STORE_PATH
argument_list|)
condition|)
block|{
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|parentPredicate
init|=
name|EntryPredicate
operator|.
name|createParent
argument_list|(
name|tl
operator|.
name|getPath
argument_list|()
argument_list|,
name|tl
operator|.
name|getParent
argument_list|()
operator|.
name|getTree
argument_list|()
argument_list|,
name|permissions
argument_list|)
decl_stmt|;
name|isGranted
operator|=
name|isGranted
argument_list|(
name|oakPath
argument_list|,
name|EntryPredicate
operator|.
name|create
argument_list|(
name|oakPath
argument_list|)
argument_list|,
name|parentPredicate
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Cannot determine permissions for non-existing location {} below the version storage"
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
return|return
name|isGranted
return|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|NotNull
name|TreePermission
name|getTreePermission
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|,
annotation|@
name|NotNull
name|TreeType
name|type
parameter_list|,
annotation|@
name|NotNull
name|TreePermission
name|parentPermission
parameter_list|)
block|{
name|Tree
name|readOnly
init|=
name|getReadOnlyTree
argument_list|(
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
name|readOnly
operator|.
name|isRoot
argument_list|()
condition|)
block|{
return|return
operator|new
name|RegularTreePermission
argument_list|(
name|readOnly
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|)
return|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|HIDDEN
case|:
return|return
name|ALL
return|;
case|case
name|INTERNAL
case|:
return|return
name|EMPTY
return|;
case|case
name|VERSION
case|:
if|if
condition|(
operator|!
name|isVersionStoreTree
argument_list|(
name|readOnly
argument_list|)
condition|)
block|{
if|if
condition|(
name|parentPermission
operator|instanceof
name|VersionTreePermission
condition|)
block|{
return|return
name|parentPermission
operator|.
name|getChildPermission
argument_list|(
name|readOnly
operator|.
name|getName
argument_list|()
argument_list|,
name|mgrProvider
operator|.
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|readOnly
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|Tree
name|versionableTree
init|=
name|getVersionableTree
argument_list|(
name|readOnly
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionableTree
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot retrieve versionable node for {}"
argument_list|,
name|readOnly
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|EMPTY
return|;
block|}
else|else
block|{
return|return
operator|new
name|VersionTreePermission
argument_list|(
name|readOnly
argument_list|,
name|versionableTree
argument_list|)
return|;
block|}
block|}
block|}
else|else
block|{
comment|// versionstorage -> regular tree permissions
return|return
operator|new
name|RegularTreePermission
argument_list|(
name|readOnly
argument_list|,
name|type
argument_list|)
return|;
block|}
case|case
name|ACCESS_CONTROL
case|:
default|default:
return|return
operator|new
name|RegularTreePermission
argument_list|(
name|readOnly
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
comment|//--------------------------------------------------------------------------
specifier|private
name|Iterator
argument_list|<
name|PermissionEntry
argument_list|>
name|getEntryIterator
parameter_list|(
annotation|@
name|NotNull
name|String
name|path
parameter_list|,
annotation|@
name|NotNull
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|EntryIterator
argument_list|(
name|path
argument_list|,
name|predicate
argument_list|,
name|entryCache
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isGranted
parameter_list|(
annotation|@
name|NotNull
name|String
name|path
parameter_list|,
annotation|@
name|NotNull
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|predicate
parameter_list|,
annotation|@
name|NotNull
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|parentPredicate
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
name|long
name|allows
init|=
name|Permissions
operator|.
name|NO_PERMISSION
decl_stmt|;
name|PrivilegeBits
name|bits
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|PrivilegeBits
name|parentBits
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|PermissionEntry
argument_list|>
name|it
init|=
name|getEntryIterator
argument_list|(
name|path
argument_list|,
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PermissionEntry
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|PrivilegeBits
name|entryBits
init|=
name|entry
operator|.
name|getPrivilegeBits
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentPredicate
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|parentBits
operator|.
name|add
argument_list|(
name|entryBits
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|predicate
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|bits
operator|.
name|add
argument_list|(
name|entryBits
argument_list|)
expr_stmt|;
block|}
name|allows
operator||=
name|PrivilegeBits
operator|.
name|calculatePermissions
argument_list|(
name|bits
argument_list|,
name|parentBits
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|allows
operator||
operator|~
name|permissions
operator|)
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isGrantedOnEffective
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|,
name|long
name|permission
parameter_list|)
block|{
name|long
name|toTest
init|=
name|permission
operator|&
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
decl_stmt|;
if|if
condition|(
name|Permissions
operator|.
name|NO_PERMISSION
operator|==
name|toTest
condition|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
name|String
name|effectivePath
init|=
name|getEffectivePath
argument_list|(
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
name|effectivePath
operator|==
literal|null
condition|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
elseif|else
if|if
condition|(
name|REPOSITORY_PERMISSION_PATH
operator|.
name|equals
argument_list|(
name|effectivePath
argument_list|)
condition|)
block|{
return|return
name|getRepositoryPermission
argument_list|()
operator|.
name|isGranted
argument_list|(
name|toTest
argument_list|)
return|;
block|}
else|else
block|{
name|Tree
name|effectiveTree
init|=
name|immutableRoot
operator|.
name|getTree
argument_list|(
name|effectivePath
argument_list|)
decl_stmt|;
return|return
name|isGranted
argument_list|(
name|effectiveTree
argument_list|,
literal|null
argument_list|,
name|toTest
argument_list|)
return|;
block|}
block|}
annotation|@
name|NotNull
specifier|private
name|PrivilegeBits
name|getGrantedPrivilegeBits
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|)
block|{
name|Tree
name|readOnly
init|=
operator|(
name|tree
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|getReadOnlyTree
argument_list|(
name|tree
argument_list|)
decl_stmt|;
name|PrivilegeBits
name|subtract
init|=
name|PrivilegeBits
operator|.
name|EMPTY
decl_stmt|;
if|if
condition|(
name|readOnly
operator|!=
literal|null
condition|)
block|{
name|TreeType
name|type
init|=
name|typeProvider
operator|.
name|getType
argument_list|(
name|readOnly
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|HIDDEN
case|:
case|case
name|INTERNAL
case|:
return|return
name|PrivilegeBits
operator|.
name|EMPTY
return|;
case|case
name|VERSION
case|:
if|if
condition|(
operator|!
name|isVersionStoreTree
argument_list|(
name|readOnly
argument_list|)
condition|)
block|{
name|Tree
name|versionableTree
init|=
name|getVersionableTree
argument_list|(
name|readOnly
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionableTree
operator|==
literal|null
condition|)
block|{
comment|// unable to determine the location of the versionable item -> deny access.
return|return
name|PrivilegeBits
operator|.
name|EMPTY
return|;
block|}
else|else
block|{
name|readOnly
operator|=
name|versionableTree
expr_stmt|;
block|}
block|}
break|break;
case|case
name|ACCESS_CONTROL
case|:
name|subtract
operator|=
name|getBitsToSubtract
argument_list|(
name|readOnly
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// covered below
break|break;
block|}
block|}
name|String
name|oakPath
decl_stmt|;
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|predicate
decl_stmt|;
if|if
condition|(
name|readOnly
operator|==
literal|null
condition|)
block|{
name|oakPath
operator|=
name|REPOSITORY_PERMISSION_PATH
expr_stmt|;
name|predicate
operator|=
name|EntryPredicate
operator|.
name|create
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|oakPath
operator|=
name|readOnly
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|predicate
operator|=
name|EntryPredicate
operator|.
name|create
argument_list|(
name|readOnly
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|PrivilegeBits
name|granted
init|=
name|getGrantedPrivilegeBits
argument_list|(
name|oakPath
argument_list|,
name|predicate
argument_list|)
decl_stmt|;
return|return
name|subtract
operator|.
name|isEmpty
argument_list|()
condition|?
name|granted
else|:
name|granted
operator|.
name|diff
argument_list|(
name|subtract
argument_list|)
return|;
block|}
comment|/**      * In case the tree of type access-control represents a principal-based entry or a restriction defined below,      * modify-access-control is only granted if it is also granted on the effective target path.      * Calculate if those permissions are granted and if not subtract them later from the final result.      *      * @param tree A read-only tree of type ACCESS_CONTROL.      * @return PrivilegeBits to be subtracted from the final result or {@link PrivilegeBits#EMPTY}, if the given tree      * does not represent a principal-based entry or both read and modify access control is granted and nothing needs to      * be subtracted.      */
annotation|@
name|NotNull
name|PrivilegeBits
name|getBitsToSubtract
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|)
block|{
name|String
name|effectivePath
init|=
name|getEffectivePath
argument_list|(
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
name|effectivePath
operator|==
literal|null
condition|)
block|{
return|return
name|PrivilegeBits
operator|.
name|EMPTY
return|;
block|}
else|else
block|{
return|return
name|modAcBits
operator|.
name|modifiable
argument_list|()
operator|.
name|diff
argument_list|(
name|getGrantedPrivilegeBits
argument_list|(
name|effectivePath
argument_list|,
name|EntryPredicate
operator|.
name|create
argument_list|(
name|effectivePath
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|NotNull
specifier|private
name|PrivilegeBits
name|getGrantedPrivilegeBits
parameter_list|(
annotation|@
name|NotNull
name|String
name|oakPath
parameter_list|,
annotation|@
name|NotNull
name|Predicate
argument_list|<
name|PermissionEntry
argument_list|>
name|predicate
parameter_list|)
block|{
name|PrivilegeBits
name|pb
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|PermissionEntry
argument_list|>
name|entries
init|=
name|getEntryIterator
argument_list|(
name|oakPath
argument_list|,
name|predicate
argument_list|)
decl_stmt|;
while|while
condition|(
name|entries
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|pb
operator|.
name|add
argument_list|(
name|entries
operator|.
name|next
argument_list|()
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|pb
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|Tree
name|getReadOnlyTree
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|)
block|{
if|if
condition|(
name|tree
operator|instanceof
name|ReadOnly
condition|)
block|{
return|return
name|tree
return|;
block|}
else|else
block|{
return|return
name|immutableRoot
operator|.
name|getTree
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Nullable
specifier|private
name|String
name|getEffectivePath
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|)
block|{
name|Tree
name|principalEntry
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|Utils
operator|.
name|isPrincipalEntry
argument_list|(
name|tree
argument_list|)
condition|)
block|{
name|principalEntry
operator|=
name|tree
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Utils
operator|.
name|isPrincipalEntry
argument_list|(
name|tree
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
name|principalEntry
operator|=
name|tree
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|principalEntry
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|principalEntry
operator|.
name|getProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
return|;
block|}
annotation|@
name|Nullable
specifier|private
name|Tree
name|getVersionableTree
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|versionTree
parameter_list|)
block|{
return|return
name|ReadOnlyVersionManager
operator|.
name|getInstance
argument_list|(
name|immutableRoot
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
operator|.
name|getVersionable
argument_list|(
name|versionTree
argument_list|,
name|workspaceName
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isVersionStoreTree
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|ReadOnlyVersionManager
operator|.
name|isVersionStoreTree
argument_list|(
name|tree
argument_list|)
return|;
block|}
annotation|@
name|NotNull
name|TreePermission
name|getTreePermission
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|nodeState
parameter_list|,
annotation|@
name|NotNull
name|AbstractTreePermission
name|parentTreePermission
parameter_list|)
block|{
name|Tree
name|readOnly
init|=
name|mgrProvider
operator|.
name|getTreeProvider
argument_list|()
operator|.
name|createReadOnlyTree
argument_list|(
name|parentTreePermission
operator|.
name|getTree
argument_list|()
argument_list|,
name|name
argument_list|,
name|nodeState
argument_list|)
decl_stmt|;
return|return
name|getTreePermission
argument_list|(
name|readOnly
argument_list|,
name|typeProvider
operator|.
name|getType
argument_list|(
name|readOnly
argument_list|,
name|parentTreePermission
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|parentTreePermission
argument_list|)
return|;
block|}
comment|//--------------------------------------------------------------------------
specifier|private
specifier|final
class|class
name|RepositoryPermissionImpl
implements|implements
name|RepositoryPermission
block|{
specifier|private
name|long
name|grantedPermissions
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
name|long
name|repositoryPermissions
parameter_list|)
block|{
return|return
name|Permissions
operator|.
name|includes
argument_list|(
name|getGranted
argument_list|()
argument_list|,
name|repositoryPermissions
argument_list|)
return|;
block|}
specifier|private
name|long
name|getGranted
parameter_list|()
block|{
if|if
condition|(
name|grantedPermissions
operator|==
operator|-
literal|1
condition|)
block|{
name|PrivilegeBits
name|pb
init|=
name|getGrantedPrivilegeBits
argument_list|(
name|REPOSITORY_PERMISSION_PATH
argument_list|,
name|EntryPredicate
operator|.
name|create
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|grantedPermissions
operator|=
name|PrivilegeBits
operator|.
name|calculatePermissions
argument_list|(
name|pb
argument_list|,
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|grantedPermissions
return|;
block|}
specifier|private
name|void
name|refresh
parameter_list|()
block|{
name|grantedPermissions
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
class|class
name|RegularTreePermission
extends|extends
name|AbstractTreePermission
block|{
name|RegularTreePermission
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|,
annotation|@
name|NotNull
name|TreeType
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|tree
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|PrincipalBasedPermissionProvider
name|getPermissionProvider
parameter_list|()
block|{
return|return
name|PrincipalBasedPermissionProvider
operator|.
name|this
return|;
block|}
block|}
specifier|private
specifier|final
class|class
name|VersionTreePermission
extends|extends
name|AbstractTreePermission
implements|implements
name|VersionConstants
block|{
specifier|private
specifier|final
name|Tree
name|versionTree
decl_stmt|;
name|VersionTreePermission
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|versionTree
parameter_list|,
annotation|@
name|NotNull
name|Tree
name|versionableTree
parameter_list|)
block|{
name|super
argument_list|(
name|versionableTree
argument_list|,
name|TreeType
operator|.
name|VERSION
argument_list|)
expr_stmt|;
name|this
operator|.
name|versionTree
operator|=
name|versionTree
expr_stmt|;
block|}
annotation|@
name|Override
name|PrincipalBasedPermissionProvider
name|getPermissionProvider
parameter_list|()
block|{
return|return
name|PrincipalBasedPermissionProvider
operator|.
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|NotNull
name|TreePermission
name|getChildPermission
parameter_list|(
annotation|@
name|NotNull
name|String
name|childName
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|childState
parameter_list|)
block|{
name|Tree
name|childVersionTree
init|=
name|mgrProvider
operator|.
name|getTreeProvider
argument_list|()
operator|.
name|createReadOnlyTree
argument_list|(
name|versionTree
argument_list|,
name|childName
argument_list|,
name|childState
argument_list|)
decl_stmt|;
name|Tree
name|childVersionableTree
decl_stmt|;
name|String
name|primaryType
init|=
name|NodeStateUtils
operator|.
name|getPrimaryTypeName
argument_list|(
name|childState
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERSION_NODE_NAMES
operator|.
name|contains
argument_list|(
name|childName
argument_list|)
operator|||
name|NT_VERSION
operator|.
name|equals
argument_list|(
name|primaryType
argument_list|)
condition|)
block|{
comment|// permissions of the original versionable node still apply to versioning related structure inside the
comment|// version histore tree (labels, references, the frozen node itself)
name|childVersionableTree
operator|=
name|getTree
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// internals of the frozen node -> build new child tree for evaluation
name|childVersionableTree
operator|=
name|getTree
argument_list|()
operator|.
name|getChild
argument_list|(
name|childName
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|VersionTreePermission
argument_list|(
name|childVersionTree
argument_list|,
name|childVersionableTree
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

