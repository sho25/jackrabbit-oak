begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|LazyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|GuestCredentials
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|TreeUtilTest
extends|extends
name|AbstractSecurityTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testJcrCreatedBy
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|JcrConstants
operator|.
name|NT_FOLDER
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
literal|"userId"
argument_list|)
decl_stmt|;
name|PropertyState
name|ps
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_CREATEDBY
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"userId"
argument_list|,
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJcrCreatedByNullUserId
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|JcrConstants
operator|.
name|NT_FOLDER
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|PropertyState
name|ps
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_CREATEDBY
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJcrLastModifiedBy
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|ntRoot
init|=
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|,
name|ntRoot
argument_list|,
literal|"userId"
argument_list|)
decl_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|tree
argument_list|,
name|NodeTypeConstants
operator|.
name|MIX_LASTMODIFIED
argument_list|,
name|ntRoot
argument_list|,
literal|"userId"
argument_list|)
expr_stmt|;
name|PropertyState
name|ps
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_LASTMODIFIEDBY
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"userId"
argument_list|,
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJcrLastModifiedByNullUserId
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|ntRoot
init|=
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|,
name|ntRoot
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|tree
argument_list|,
name|NodeTypeConstants
operator|.
name|MIX_LASTMODIFIED
argument_list|,
name|ntRoot
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|PropertyState
name|ps
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_LASTMODIFIEDBY
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrimaryTypeNameAccessible
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|tree
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|tree
argument_list|,
operator|new
name|LazyValue
argument_list|<
name|Tree
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Tree
name|createValue
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrimaryTypeNameNotAccessible
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|tree
argument_list|)
decl_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|)
init|)
block|{
name|Root
name|r
init|=
name|cs
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|r
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|r
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|LazyValue
argument_list|<
name|Tree
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Tree
name|createValue
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrimaryTypeNameNotAccessibleNew
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|testTree
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|Tree
name|t
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|t
operator|.
name|hasProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|t
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Tree
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|t
argument_list|,
operator|new
name|LazyValue
argument_list|<
name|Tree
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Tree
name|createValue
parameter_list|()
block|{
return|return
name|testTree
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMixinTypeNamesMissingAccessible
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|TreeUtil
operator|.
name|getMixinTypeNames
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|TreeUtil
operator|.
name|getMixinTypeNames
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|LazyValue
argument_list|<
name|Tree
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Tree
name|createValue
parameter_list|()
block|{
return|return
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMixinTypeNamesMissingNotAccessible
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|TreeUtil
operator|.
name|getMixinTypeNames
argument_list|(
name|tree
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|)
init|)
block|{
name|Root
name|guestRoot
init|=
name|cs
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|TreeUtil
operator|.
name|getMixinTypeNames
argument_list|(
name|guestRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|TreeUtil
operator|.
name|getMixinTypeNames
argument_list|(
name|guestRoot
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|LazyValue
argument_list|<
name|Tree
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Tree
name|createValue
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMixinTypeNamesPresentAccessible
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|testTree
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|testTree
argument_list|,
literal|"mix:title"
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
literal|"uid"
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|testTree
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|TreeUtil
operator|.
name|getMixinTypeNames
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|contains
argument_list|(
name|expected
argument_list|,
literal|"mix:title"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|expected
argument_list|,
name|TreeUtil
operator|.
name|getMixinTypeNames
argument_list|(
name|testTree
argument_list|,
operator|new
name|LazyValue
argument_list|<
name|Tree
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Tree
name|createValue
parameter_list|()
block|{
return|return
name|testTree
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMixinTypeNamesPresentNotAccessible
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|testTree
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|testTree
argument_list|,
literal|"mix:title"
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
literal|"uid"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|path
init|=
name|testTree
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|TreeUtil
operator|.
name|getMixinTypeNames
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|contains
argument_list|(
name|expected
argument_list|,
literal|"mix:title"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|)
init|)
block|{
name|Root
name|guestRoot
init|=
name|cs
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|TreeUtil
operator|.
name|getMixinTypeNames
argument_list|(
name|guestRoot
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|expected
argument_list|,
name|TreeUtil
operator|.
name|getMixinTypeNames
argument_list|(
name|guestRoot
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
argument_list|,
operator|new
name|LazyValue
argument_list|<
name|Tree
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Tree
name|createValue
parameter_list|()
block|{
return|return
name|testTree
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMixinTypeNamesPresentNotAccessibleNew
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|testTree
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|testTree
argument_list|,
literal|"mix:title"
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
literal|"uid"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|t
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|t
operator|.
name|hasProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|t
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Tree
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|TreeUtil
operator|.
name|getMixinTypeNames
argument_list|(
name|t
argument_list|,
operator|new
name|LazyValue
argument_list|<
name|Tree
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Tree
name|createValue
parameter_list|()
block|{
return|return
name|testTree
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

