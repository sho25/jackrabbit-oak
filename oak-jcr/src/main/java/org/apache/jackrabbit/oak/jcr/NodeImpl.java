begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|ItemNameMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|NodeIteratorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|PropertyIteratorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|util
operator|.
name|LogUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|value
operator|.
name|ValueConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|value
operator|.
name|ValueHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|InvalidItemStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ItemNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ItemVisitor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|OnParentVersionAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionHistory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Iterators
operator|.
name|filter
import|;
end_import

begin_comment
comment|/**  * {@code NodeImpl}...  */
end_comment

begin_class
specifier|public
class|class
name|NodeImpl
extends|extends
name|ItemImpl
implements|implements
name|Node
block|{
comment|/**      * logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NodeImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|NodeDelegate
name|dlg
decl_stmt|;
name|NodeImpl
parameter_list|(
name|NodeDelegate
name|dlg
parameter_list|)
block|{
name|super
argument_list|(
name|dlg
operator|.
name|getSessionDelegate
argument_list|()
argument_list|,
name|dlg
argument_list|)
expr_stmt|;
name|this
operator|.
name|dlg
operator|=
name|dlg
expr_stmt|;
block|}
comment|// TODO
specifier|public
name|String
name|getOakPath
parameter_list|()
block|{
return|return
name|dlg
operator|.
name|getPath
argument_list|()
return|;
block|}
comment|//---------------------------------------------------------------< Item>---
comment|/**      * @see javax.jcr.Item#isNode()      */
annotation|@
name|Override
specifier|public
name|boolean
name|isNode
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * @see javax.jcr.Item#getParent()      */
annotation|@
name|Override
specifier|public
name|Node
name|getParent
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
operator|new
name|NodeImpl
argument_list|(
name|dlg
operator|.
name|getParent
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Item#isNew()      */
annotation|@
name|Override
specifier|public
name|boolean
name|isNew
parameter_list|()
block|{
try|try
block|{
return|return
name|dlg
operator|.
name|getNodeStatus
argument_list|()
operator|==
name|Status
operator|.
name|NEW
return|;
block|}
catch|catch
parameter_list|(
name|InvalidItemStateException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * @see javax.jcr.Item#isModified()      */
annotation|@
name|Override
specifier|public
name|boolean
name|isModified
parameter_list|()
block|{
try|try
block|{
return|return
name|dlg
operator|.
name|getNodeStatus
argument_list|()
operator|==
name|Status
operator|.
name|MODIFIED
return|;
block|}
catch|catch
parameter_list|(
name|InvalidItemStateException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * @see javax.jcr.Item#remove()      */
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|dlg
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|/**      * @see Item#accept(javax.jcr.ItemVisitor)      */
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
name|ItemVisitor
name|visitor
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|visit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------< Node>---
comment|/**      * @see Node#addNode(String)      */
annotation|@
name|Override
specifier|public
name|Node
name|addNode
parameter_list|(
name|String
name|relPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|addNode
argument_list|(
name|relPath
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|addNode
parameter_list|(
name|String
name|relPath
parameter_list|,
name|String
name|primaryNodeTypeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
if|if
condition|(
name|primaryNodeTypeName
operator|==
literal|null
condition|)
block|{
comment|// TODO retrieve matching nt from effective definition based on name-matching.
name|primaryNodeTypeName
operator|=
name|NodeType
operator|.
name|NT_UNSTRUCTURED
expr_stmt|;
block|}
comment|// TODO: figure out the right place for this check
name|NodeTypeManager
name|ntm
init|=
name|sessionDelegate
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|NodeType
name|nt
init|=
name|ntm
operator|.
name|getNodeType
argument_list|(
name|primaryNodeTypeName
argument_list|)
decl_stmt|;
comment|// throws on not found
if|if
condition|(
name|nt
operator|.
name|isAbstract
argument_list|()
operator|||
name|nt
operator|.
name|isMixin
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|()
throw|;
block|}
comment|// TODO: END
name|NodeDelegate
name|added
init|=
name|dlg
operator|.
name|addNode
argument_list|(
name|toOakPath
argument_list|(
name|relPath
argument_list|)
argument_list|)
decl_stmt|;
name|Node
name|childNode
init|=
operator|new
name|NodeImpl
argument_list|(
name|added
argument_list|)
decl_stmt|;
name|childNode
operator|.
name|setPrimaryType
argument_list|(
name|primaryNodeTypeName
argument_list|)
expr_stmt|;
return|return
name|childNode
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|orderBefore
parameter_list|(
name|String
name|srcChildRelPath
parameter_list|,
name|String
name|destChildRelPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"TODO: ordering not supported"
argument_list|)
throw|;
block|}
comment|/**      * @see Node#setProperty(String, javax.jcr.Value)      */
annotation|@
name|Override
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Value
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|int
name|type
init|=
name|PropertyType
operator|.
name|UNDEFINED
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|value
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
return|return
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**      * @see Node#setProperty(String, javax.jcr.Value, int)      */
annotation|@
name|Override
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|jcrName
parameter_list|,
name|Value
name|value
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
name|int
name|targetType
init|=
name|getTargetType
argument_list|(
name|value
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|Value
name|targetValue
init|=
name|ValueHelper
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|targetType
argument_list|,
name|getValueFactory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|Property
name|p
init|=
name|getProperty
argument_list|(
name|jcrName
argument_list|)
decl_stmt|;
name|p
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
name|p
return|;
block|}
else|else
block|{
name|CoreValue
name|oakValue
init|=
name|ValueConverter
operator|.
name|toCoreValue
argument_list|(
name|targetValue
argument_list|,
name|sessionDelegate
argument_list|)
decl_stmt|;
return|return
operator|new
name|PropertyImpl
argument_list|(
name|dlg
operator|.
name|setProperty
argument_list|(
name|toOakPath
argument_list|(
name|jcrName
argument_list|)
argument_list|,
name|oakValue
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * @see Node#setProperty(String, javax.jcr.Value[])      */
annotation|@
name|Override
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Value
index|[]
name|values
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|int
name|type
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|length
operator|==
literal|0
operator|||
name|values
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|PropertyType
operator|.
name|UNDEFINED
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|values
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
return|return
name|setProperty
argument_list|(
name|name
argument_list|,
name|values
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|jcrName
parameter_list|,
name|Value
index|[]
name|values
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
name|int
name|targetType
init|=
name|getTargetType
argument_list|(
name|values
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|Value
index|[]
name|targetValues
init|=
name|ValueHelper
operator|.
name|convert
argument_list|(
name|values
argument_list|,
name|targetType
argument_list|,
name|getValueFactory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetValues
operator|==
literal|null
condition|)
block|{
name|Property
name|p
init|=
name|getProperty
argument_list|(
name|jcrName
argument_list|)
decl_stmt|;
name|p
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
name|p
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|CoreValue
argument_list|>
name|oakValue
init|=
name|ValueConverter
operator|.
name|toCoreValues
argument_list|(
name|targetValues
argument_list|,
name|sessionDelegate
argument_list|)
decl_stmt|;
return|return
operator|new
name|PropertyImpl
argument_list|(
name|dlg
operator|.
name|setProperty
argument_list|(
name|toOakPath
argument_list|(
name|jcrName
argument_list|)
argument_list|,
name|oakValue
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * @see Node#setProperty(String, String[])      */
annotation|@
name|Override
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
name|values
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|setProperty
argument_list|(
name|name
argument_list|,
name|values
argument_list|,
name|PropertyType
operator|.
name|UNDEFINED
argument_list|)
return|;
block|}
comment|/**      * @see Node#setProperty(String, String[], int)      */
annotation|@
name|Override
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
name|values
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Value
index|[]
name|vs
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|PropertyType
operator|.
name|UNDEFINED
condition|)
block|{
name|vs
operator|=
name|ValueHelper
operator|.
name|convert
argument_list|(
name|values
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|getValueFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vs
operator|=
name|ValueHelper
operator|.
name|convert
argument_list|(
name|values
argument_list|,
name|type
argument_list|,
name|getValueFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|setProperty
argument_list|(
name|name
argument_list|,
name|vs
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**      * @see Node#setProperty(String, String)      */
annotation|@
name|Override
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Value
name|v
init|=
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|value
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
decl_stmt|;
return|return
name|setProperty
argument_list|(
name|name
argument_list|,
name|v
argument_list|,
name|PropertyType
operator|.
name|UNDEFINED
argument_list|)
return|;
block|}
comment|/**      * @see Node#setProperty(String, String, int)      */
annotation|@
name|Override
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Value
name|v
init|=
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|value
argument_list|,
name|type
argument_list|)
decl_stmt|;
return|return
name|setProperty
argument_list|(
name|name
argument_list|,
name|v
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**      * @see Node#setProperty(String, InputStream)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|InputStream
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Value
name|v
init|=
operator|(
name|value
operator|==
literal|null
condition|?
literal|null
else|:
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
operator|)
decl_stmt|;
return|return
name|setProperty
argument_list|(
name|name
argument_list|,
name|v
argument_list|,
name|PropertyType
operator|.
name|BINARY
argument_list|)
return|;
block|}
comment|/**      * @see Node#setProperty(String, Binary)      */
annotation|@
name|Override
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Binary
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Value
name|v
init|=
operator|(
name|value
operator|==
literal|null
condition|?
literal|null
else|:
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
operator|)
decl_stmt|;
return|return
name|setProperty
argument_list|(
name|name
argument_list|,
name|v
argument_list|,
name|PropertyType
operator|.
name|BINARY
argument_list|)
return|;
block|}
comment|/**      * @see Node#setProperty(String, boolean)      */
annotation|@
name|Override
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|setProperty
argument_list|(
name|name
argument_list|,
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
argument_list|,
name|PropertyType
operator|.
name|BOOLEAN
argument_list|)
return|;
block|}
comment|/**      * @see Node#setProperty(String, double)      */
annotation|@
name|Override
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|setProperty
argument_list|(
name|name
argument_list|,
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
argument_list|,
name|PropertyType
operator|.
name|DOUBLE
argument_list|)
return|;
block|}
comment|/**      * @see Node#setProperty(String, BigDecimal)      */
annotation|@
name|Override
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|BigDecimal
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Value
name|v
init|=
operator|(
name|value
operator|==
literal|null
condition|?
literal|null
else|:
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
operator|)
decl_stmt|;
return|return
name|setProperty
argument_list|(
name|name
argument_list|,
name|v
argument_list|,
name|PropertyType
operator|.
name|DECIMAL
argument_list|)
return|;
block|}
comment|/**      * @see Node#setProperty(String, long)      */
annotation|@
name|Override
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|setProperty
argument_list|(
name|name
argument_list|,
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|)
return|;
block|}
comment|/**      * @see Node#setProperty(String, Calendar)      */
annotation|@
name|Override
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Calendar
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Value
name|v
init|=
operator|(
name|value
operator|==
literal|null
condition|?
literal|null
else|:
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
operator|)
decl_stmt|;
return|return
name|setProperty
argument_list|(
name|name
argument_list|,
name|v
argument_list|,
name|PropertyType
operator|.
name|DATE
argument_list|)
return|;
block|}
comment|/**      * @see Node#setProperty(String, Node)      */
annotation|@
name|Override
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Node
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Value
name|v
init|=
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|setProperty
argument_list|(
name|name
argument_list|,
name|v
argument_list|,
name|PropertyType
operator|.
name|REFERENCE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getNode
parameter_list|(
name|String
name|relPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
name|NodeImpl
name|node
init|=
name|getNodeOrNull
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
name|relPath
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|node
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NodeIterator
name|getNodes
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|NodeDelegate
argument_list|>
name|children
init|=
name|dlg
operator|.
name|getChildren
argument_list|()
decl_stmt|;
return|return
operator|new
name|NodeIteratorAdapter
argument_list|(
name|nodeIterator
argument_list|(
name|children
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeIterator
name|getNodes
parameter_list|(
specifier|final
name|String
name|namePattern
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|NodeDelegate
argument_list|>
name|children
init|=
name|filter
argument_list|(
name|dlg
operator|.
name|getChildren
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeDelegate
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|NodeDelegate
name|state
parameter_list|)
block|{
return|return
name|ItemNameMatcher
operator|.
name|matches
argument_list|(
name|toJcrPath
argument_list|(
name|state
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|namePattern
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|NodeIteratorAdapter
argument_list|(
name|nodeIterator
argument_list|(
name|children
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeIterator
name|getNodes
parameter_list|(
specifier|final
name|String
index|[]
name|nameGlobs
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|NodeDelegate
argument_list|>
name|children
init|=
name|filter
argument_list|(
name|dlg
operator|.
name|getChildren
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeDelegate
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|NodeDelegate
name|state
parameter_list|)
block|{
return|return
name|ItemNameMatcher
operator|.
name|matches
argument_list|(
name|toJcrPath
argument_list|(
name|state
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|nameGlobs
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|NodeIteratorAdapter
argument_list|(
name|nodeIterator
argument_list|(
name|children
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Property
name|getProperty
parameter_list|(
name|String
name|relPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
name|Property
name|property
init|=
name|getPropertyOrNull
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
name|relPath
operator|+
literal|" not found on "
operator|+
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|property
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PropertyIterator
name|getProperties
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|PropertyDelegate
argument_list|>
name|properties
init|=
name|dlg
operator|.
name|getProperties
argument_list|()
decl_stmt|;
return|return
operator|new
name|PropertyIteratorAdapter
argument_list|(
name|propertyIterator
argument_list|(
name|properties
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyIterator
name|getProperties
parameter_list|(
specifier|final
name|String
name|namePattern
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|PropertyDelegate
argument_list|>
name|properties
init|=
name|filter
argument_list|(
name|dlg
operator|.
name|getProperties
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|PropertyDelegate
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|PropertyDelegate
name|entry
parameter_list|)
block|{
return|return
name|ItemNameMatcher
operator|.
name|matches
argument_list|(
name|toJcrPath
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|namePattern
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|PropertyIteratorAdapter
argument_list|(
name|propertyIterator
argument_list|(
name|properties
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyIterator
name|getProperties
parameter_list|(
specifier|final
name|String
index|[]
name|nameGlobs
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|PropertyDelegate
argument_list|>
name|propertyNames
init|=
name|filter
argument_list|(
name|dlg
operator|.
name|getProperties
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|PropertyDelegate
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|PropertyDelegate
name|entry
parameter_list|)
block|{
return|return
name|ItemNameMatcher
operator|.
name|matches
argument_list|(
name|toJcrPath
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|nameGlobs
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|PropertyIteratorAdapter
argument_list|(
name|propertyIterator
argument_list|(
name|propertyNames
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Node#getPrimaryItem()      */
annotation|@
name|Override
specifier|public
name|Item
name|getPrimaryItem
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
name|String
name|name
init|=
name|getPrimaryNodeType
argument_list|()
operator|.
name|getPrimaryItemName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ItemNotFoundException
argument_list|(
literal|"No primary item present on node "
operator|+
name|LogUtil
operator|.
name|safeGetJCRPath
argument_list|(
name|this
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|hasProperty
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|hasNode
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|getNode
argument_list|(
name|name
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ItemNotFoundException
argument_list|(
literal|"Primary item "
operator|+
name|name
operator|+
literal|" does not exist on node "
operator|+
name|LogUtil
operator|.
name|safeGetJCRPath
argument_list|(
name|this
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**      * @see javax.jcr.Node#getUUID()      */
annotation|@
name|Override
specifier|public
name|String
name|getUUID
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasProperty
argument_list|(
name|Property
operator|.
name|JCR_UUID
argument_list|)
operator|&&
name|isNodeType
argument_list|(
name|NodeType
operator|.
name|MIX_REFERENCEABLE
argument_list|)
condition|)
block|{
return|return
name|getProperty
argument_list|(
name|Property
operator|.
name|JCR_UUID
argument_list|)
operator|.
name|getString
argument_list|()
return|;
block|}
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"Node is not referenceable."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIdentifier
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
if|if
condition|(
name|isNodeType
argument_list|(
name|NodeType
operator|.
name|MIX_REFERENCEABLE
argument_list|)
condition|)
block|{
return|return
name|getProperty
argument_list|(
name|Property
operator|.
name|JCR_UUID
argument_list|)
operator|.
name|getString
argument_list|()
return|;
block|}
else|else
block|{
comment|// TODO
return|return
name|dlg
operator|.
name|getPath
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getIndex
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// as long as we do not support same name siblings, index always is 1
return|return
literal|1
return|;
block|}
comment|/**      * @see javax.jcr.Node#getReferences()      */
annotation|@
name|Override
specifier|public
name|PropertyIterator
name|getReferences
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|getReferences
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyIterator
name|getReferences
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"TODO: Node.getReferences"
argument_list|)
throw|;
block|}
comment|/**      * @see javax.jcr.Node#getWeakReferences()      */
annotation|@
name|Override
specifier|public
name|PropertyIterator
name|getWeakReferences
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|getWeakReferences
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyIterator
name|getWeakReferences
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"TODO: Node.getWeakReferences"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNode
parameter_list|(
name|String
name|relPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
return|return
name|getNodeOrNull
argument_list|(
name|relPath
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasProperty
parameter_list|(
name|String
name|relPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
return|return
name|getPropertyOrNull
argument_list|(
name|relPath
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNodes
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
return|return
name|dlg
operator|.
name|getChildrenCount
argument_list|()
operator|!=
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasProperties
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
return|return
name|dlg
operator|.
name|getPropertyCount
argument_list|()
operator|!=
literal|0
return|;
block|}
comment|/**      * @see javax.jcr.Node#getPrimaryNodeType()      */
annotation|@
name|Override
specifier|public
name|NodeType
name|getPrimaryNodeType
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
comment|// TODO: check if transient changes to mixin-types are reflected here
name|NodeTypeManager
name|ntMgr
init|=
name|sessionDelegate
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|String
name|primaryNtName
init|=
name|getProperty
argument_list|(
name|Property
operator|.
name|JCR_PRIMARY_TYPE
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
return|return
name|ntMgr
operator|.
name|getNodeType
argument_list|(
name|primaryNtName
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Node#getMixinNodeTypes()      */
annotation|@
name|Override
specifier|public
name|NodeType
index|[]
name|getMixinNodeTypes
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
comment|// TODO: check if transient changes to mixin-types are reflected here
if|if
condition|(
name|hasProperty
argument_list|(
name|Property
operator|.
name|JCR_MIXIN_TYPES
argument_list|)
condition|)
block|{
name|NodeTypeManager
name|ntMgr
init|=
name|sessionDelegate
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|Value
index|[]
name|mixinNames
init|=
name|getProperty
argument_list|(
name|Property
operator|.
name|JCR_MIXIN_TYPES
argument_list|)
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|NodeType
index|[]
name|mixinTypes
init|=
operator|new
name|NodeType
index|[
name|mixinNames
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mixinNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|mixinTypes
index|[
name|i
index|]
operator|=
name|ntMgr
operator|.
name|getNodeType
argument_list|(
name|mixinNames
index|[
name|i
index|]
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|mixinTypes
return|;
block|}
else|else
block|{
return|return
operator|new
name|NodeType
index|[
literal|0
index|]
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNodeType
parameter_list|(
name|String
name|nodeTypeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
comment|// TODO: might be expanded, need a better way for this
name|String
name|jcrName
init|=
name|toJcrName
argument_list|(
name|toOakName
argument_list|(
name|nodeTypeName
argument_list|)
argument_list|)
decl_stmt|;
comment|// TODO: figure out the right place for this check
name|NodeTypeManager
name|ntm
init|=
name|sessionDelegate
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|NodeType
name|ntToCheck
init|=
name|ntm
operator|.
name|getNodeType
argument_list|(
name|jcrName
argument_list|)
decl_stmt|;
comment|// throws on not found
name|String
name|nameToCheck
init|=
name|ntToCheck
operator|.
name|getName
argument_list|()
decl_stmt|;
name|NodeType
name|currentPrimaryType
init|=
name|getPrimaryNodeType
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentPrimaryType
operator|.
name|isNodeType
argument_list|(
name|nameToCheck
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|NodeType
name|mixin
range|:
name|getMixinNodeTypes
argument_list|()
control|)
block|{
if|if
condition|(
name|mixin
operator|.
name|isNodeType
argument_list|(
name|nameToCheck
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// TODO: END
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPrimaryType
parameter_list|(
name|String
name|nodeTypeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
comment|// TODO: figure out the right place for this check
name|NodeTypeManager
name|ntm
init|=
name|sessionDelegate
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|NodeType
name|nt
init|=
name|ntm
operator|.
name|getNodeType
argument_list|(
name|nodeTypeName
argument_list|)
decl_stmt|;
comment|// throws on not found
if|if
condition|(
name|nt
operator|.
name|isAbstract
argument_list|()
operator|||
name|nt
operator|.
name|isMixin
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|()
throw|;
block|}
comment|// TODO: END
name|CoreValue
name|cv
init|=
name|ValueConverter
operator|.
name|toCoreValue
argument_list|(
name|nodeTypeName
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|,
name|sessionDelegate
argument_list|)
decl_stmt|;
name|dlg
operator|.
name|setProperty
argument_list|(
name|toOakPath
argument_list|(
name|Property
operator|.
name|JCR_PRIMARY_TYPE
argument_list|)
argument_list|,
name|cv
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addMixin
parameter_list|(
name|String
name|mixinName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
comment|// TODO: figure out the right place for this check
name|NodeTypeManager
name|ntm
init|=
name|sessionDelegate
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|ntm
operator|.
name|getNodeType
argument_list|(
name|mixinName
argument_list|)
expr_stmt|;
comment|// throws on not found
comment|// TODO: END
comment|// todo implement addMixin
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeMixin
parameter_list|(
name|String
name|mixinName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
comment|// todo implement removeMixin
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canAddMixin
parameter_list|(
name|String
name|mixinName
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// TODO: figure out the right place for this check
name|NodeTypeManager
name|ntm
init|=
name|sessionDelegate
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|ntm
operator|.
name|getNodeType
argument_list|(
name|mixinName
argument_list|)
expr_stmt|;
comment|// throws on not found
comment|// TODO: END
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeDefinition
name|getDefinition
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
comment|// TODO
return|return
operator|new
name|NodeDefinition
argument_list|()
block|{
comment|// This is a workaround to make AbstractJCRTest.cleanup happy
annotation|@
name|Override
specifier|public
name|boolean
name|isProtected
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMandatory
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAutoCreated
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getOnParentVersion
parameter_list|()
block|{
return|return
name|OnParentVersionAction
operator|.
name|COPY
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"default"
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeType
name|getDeclaringNodeType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeType
index|[]
name|getRequiredPrimaryTypes
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getRequiredPrimaryTypeNames
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDefaultPrimaryTypeName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeType
name|getDefaultPrimaryType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowsSameNameSiblings
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCorrespondingNodePath
parameter_list|(
name|String
name|workspaceName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"TODO: Node.getCorrespondingNodePath"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|String
name|srcWorkspace
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
name|ensureNoPendingSessionChanges
argument_list|()
expr_stmt|;
comment|// TODO
block|}
comment|/**      * @see javax.jcr.Node#checkin()      */
annotation|@
name|Override
specifier|public
name|Version
name|checkin
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|sessionDelegate
operator|.
name|getVersionManager
argument_list|()
operator|.
name|checkin
argument_list|(
name|getPath
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Node#checkout()      */
annotation|@
name|Override
specifier|public
name|void
name|checkout
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|sessionDelegate
operator|.
name|getVersionManager
argument_list|()
operator|.
name|checkout
argument_list|(
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see javax.jcr.Node#doneMerge(javax.jcr.version.Version)      */
annotation|@
name|Override
specifier|public
name|void
name|doneMerge
parameter_list|(
name|Version
name|version
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|sessionDelegate
operator|.
name|getVersionManager
argument_list|()
operator|.
name|doneMerge
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see javax.jcr.Node#cancelMerge(javax.jcr.version.Version)      */
annotation|@
name|Override
specifier|public
name|void
name|cancelMerge
parameter_list|(
name|Version
name|version
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|sessionDelegate
operator|.
name|getVersionManager
argument_list|()
operator|.
name|cancelMerge
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see javax.jcr.Node#merge(String, boolean)      */
annotation|@
name|Override
specifier|public
name|NodeIterator
name|merge
parameter_list|(
name|String
name|srcWorkspace
parameter_list|,
name|boolean
name|bestEffort
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|sessionDelegate
operator|.
name|getVersionManager
argument_list|()
operator|.
name|merge
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|srcWorkspace
argument_list|,
name|bestEffort
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Node#isCheckedOut()      */
annotation|@
name|Override
specifier|public
name|boolean
name|isCheckedOut
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|sessionDelegate
operator|.
name|getVersionManager
argument_list|()
operator|.
name|isCheckedOut
argument_list|(
name|getPath
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Node#restore(String, boolean)      */
annotation|@
name|Override
specifier|public
name|void
name|restore
parameter_list|(
name|String
name|versionName
parameter_list|,
name|boolean
name|removeExisting
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|sessionDelegate
operator|.
name|getVersionManager
argument_list|()
operator|.
name|restore
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|versionName
argument_list|,
name|removeExisting
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see javax.jcr.Node#restore(javax.jcr.version.Version, boolean)      */
annotation|@
name|Override
specifier|public
name|void
name|restore
parameter_list|(
name|Version
name|version
parameter_list|,
name|boolean
name|removeExisting
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|sessionDelegate
operator|.
name|getVersionManager
argument_list|()
operator|.
name|restore
argument_list|(
name|version
argument_list|,
name|removeExisting
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see javax.jcr.Node#restore(Version, String, boolean)      */
annotation|@
name|Override
specifier|public
name|void
name|restore
parameter_list|(
name|Version
name|version
parameter_list|,
name|String
name|relPath
parameter_list|,
name|boolean
name|removeExisting
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// additional checks are performed with subsequent calls.
if|if
condition|(
name|hasNode
argument_list|(
name|relPath
argument_list|)
condition|)
block|{
comment|// node at 'relPath' exists -> call restore on the target Node
name|getNode
argument_list|(
name|relPath
argument_list|)
operator|.
name|restore
argument_list|(
name|version
argument_list|,
name|removeExisting
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO
block|}
block|}
comment|/**      * @see javax.jcr.Node#restoreByLabel(String, boolean)      */
annotation|@
name|Override
specifier|public
name|void
name|restoreByLabel
parameter_list|(
name|String
name|versionLabel
parameter_list|,
name|boolean
name|removeExisting
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|sessionDelegate
operator|.
name|getVersionManager
argument_list|()
operator|.
name|restoreByLabel
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|versionLabel
argument_list|,
name|removeExisting
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see javax.jcr.Node#getVersionHistory()      */
annotation|@
name|Override
specifier|public
name|VersionHistory
name|getVersionHistory
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|sessionDelegate
operator|.
name|getVersionManager
argument_list|()
operator|.
name|getVersionHistory
argument_list|(
name|getPath
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Node#getBaseVersion()      */
annotation|@
name|Override
specifier|public
name|Version
name|getBaseVersion
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|sessionDelegate
operator|.
name|getVersionManager
argument_list|()
operator|.
name|getBaseVersion
argument_list|(
name|getPath
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Node#lock(boolean, boolean)      */
annotation|@
name|Override
specifier|public
name|Lock
name|lock
parameter_list|(
name|boolean
name|isDeep
parameter_list|,
name|boolean
name|isSessionScoped
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|sessionDelegate
operator|.
name|getLockManager
argument_list|()
operator|.
name|lock
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|isDeep
argument_list|,
name|isSessionScoped
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Node#getLock()      */
annotation|@
name|Override
specifier|public
name|Lock
name|getLock
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|sessionDelegate
operator|.
name|getLockManager
argument_list|()
operator|.
name|getLock
argument_list|(
name|getPath
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Node#unlock()      */
annotation|@
name|Override
specifier|public
name|void
name|unlock
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|sessionDelegate
operator|.
name|getLockManager
argument_list|()
operator|.
name|unlock
argument_list|(
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see javax.jcr.Node#holdsLock()      */
annotation|@
name|Override
specifier|public
name|boolean
name|holdsLock
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|sessionDelegate
operator|.
name|getLockManager
argument_list|()
operator|.
name|holdsLock
argument_list|(
name|getPath
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Node#isLocked() ()      */
annotation|@
name|Override
specifier|public
name|boolean
name|isLocked
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|sessionDelegate
operator|.
name|getLockManager
argument_list|()
operator|.
name|isLocked
argument_list|(
name|getPath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeIterator
name|getSharedSet
parameter_list|()
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"TODO: Node.getSharedSet"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeSharedSet
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// TODO
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeShare
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// TODO
block|}
comment|/**      * @see javax.jcr.Node#followLifecycleTransition(String)      */
annotation|@
name|Override
specifier|public
name|void
name|followLifecycleTransition
parameter_list|(
name|String
name|transition
parameter_list|)
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"Lifecycle Management is not supported"
argument_list|)
throw|;
block|}
comment|/**      * @see javax.jcr.Node#getAllowedLifecycleTransistions()      */
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getAllowedLifecycleTransistions
parameter_list|()
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"Lifecycle Management is not supported"
argument_list|)
throw|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
specifier|static
name|Iterator
argument_list|<
name|Node
argument_list|>
name|nodeIterator
parameter_list|(
name|Iterator
argument_list|<
name|NodeDelegate
argument_list|>
name|childNodes
parameter_list|)
block|{
return|return
name|Iterators
operator|.
name|map
argument_list|(
name|childNodes
argument_list|,
operator|new
name|Function1
argument_list|<
name|NodeDelegate
argument_list|,
name|Node
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Node
name|apply
parameter_list|(
name|NodeDelegate
name|state
parameter_list|)
block|{
return|return
operator|new
name|NodeImpl
argument_list|(
name|state
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Iterator
argument_list|<
name|Property
argument_list|>
name|propertyIterator
parameter_list|(
name|Iterator
argument_list|<
name|PropertyDelegate
argument_list|>
name|properties
parameter_list|)
block|{
return|return
name|Iterators
operator|.
name|map
argument_list|(
name|properties
argument_list|,
operator|new
name|Function1
argument_list|<
name|PropertyDelegate
argument_list|,
name|Property
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Property
name|apply
parameter_list|(
name|PropertyDelegate
name|propertyDelegate
parameter_list|)
block|{
return|return
operator|new
name|PropertyImpl
argument_list|(
name|propertyDelegate
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|NodeImpl
name|getNodeOrNull
parameter_list|(
name|String
name|relJcrPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NodeDelegate
name|nd
init|=
name|dlg
operator|.
name|getNodeOrNull
argument_list|(
name|toOakPath
argument_list|(
name|relJcrPath
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|nd
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|NodeImpl
argument_list|(
name|nd
argument_list|)
return|;
block|}
specifier|private
name|PropertyImpl
name|getPropertyOrNull
parameter_list|(
name|String
name|relJcrPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|PropertyDelegate
name|pd
init|=
name|dlg
operator|.
name|getPropertyOrNull
argument_list|(
name|toOakPath
argument_list|(
name|relJcrPath
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|pd
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|PropertyImpl
argument_list|(
name|pd
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|getTargetType
parameter_list|(
name|Value
name|value
parameter_list|,
name|int
name|type
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|PropertyType
operator|.
name|STRING
return|;
comment|// TODO: review again. rather use
comment|// property definition
block|}
else|else
block|{
return|return
name|value
operator|.
name|getType
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
name|int
name|getTargetType
parameter_list|(
name|Value
index|[]
name|values
parameter_list|,
name|int
name|type
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|PropertyType
operator|.
name|STRING
return|;
comment|// TODO: review again. rather use
comment|// property definition
block|}
else|else
block|{
comment|// TODO deal with values array containing a null value in the first
comment|// position
return|return
name|getTargetType
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

