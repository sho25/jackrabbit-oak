begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
operator|.
name|PropertyRestriction
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newLinkedHashSet
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ValuePatternUtil
block|{
comment|/**      * Get the longest prefix of restrictions on a property.      *      * @param filter the filter with all restrictions      * @param property the property      * @return the longest prefix, or null if none      */
annotation|@
name|CheckForNull
specifier|public
specifier|static
name|String
name|getLongestPrefix
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|String
name|property
parameter_list|)
block|{
name|boolean
name|first
init|=
literal|false
decl_stmt|,
name|last
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyRestriction
name|p
range|:
name|filter
operator|.
name|getPropertyRestrictions
argument_list|(
name|property
argument_list|)
control|)
block|{
if|if
condition|(
name|p
operator|.
name|isLike
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|p
operator|.
name|first
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|first
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|list
operator|.
name|add
argument_list|(
name|p
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|first
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|.
name|last
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|last
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|list
operator|.
name|add
argument_list|(
name|p
operator|.
name|last
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|last
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|first
operator|||
operator|!
name|last
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|prefix
init|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|list
control|)
block|{
while|while
condition|(
operator|!
name|s
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|prefix
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|prefix
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
return|return
name|prefix
return|;
block|}
annotation|@
name|CheckForNull
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getAllValues
parameter_list|(
name|PropertyRestriction
name|restriction
parameter_list|)
block|{
return|return
name|getValues
argument_list|(
name|restriction
argument_list|,
name|ValuePattern
operator|.
name|MATCH_ALL
argument_list|)
return|;
block|}
annotation|@
name|CheckForNull
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getValues
parameter_list|(
name|PropertyRestriction
name|restriction
parameter_list|,
name|ValuePattern
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|restriction
operator|.
name|firstIncluding
operator|&&
name|restriction
operator|.
name|lastIncluding
operator|&&
name|restriction
operator|.
name|first
operator|!=
literal|null
operator|&&
name|restriction
operator|.
name|first
operator|.
name|equals
argument_list|(
name|restriction
operator|.
name|last
argument_list|)
condition|)
block|{
comment|// "[property] = $value"
return|return
name|read
argument_list|(
name|restriction
operator|.
name|first
argument_list|,
name|pattern
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|restriction
operator|.
name|list
operator|!=
literal|null
condition|)
block|{
comment|// "[property] IN (...)
name|Set
argument_list|<
name|String
argument_list|>
name|values
init|=
name|newLinkedHashSet
argument_list|()
decl_stmt|;
comment|// keep order for testing
for|for
control|(
name|PropertyValue
name|value
range|:
name|restriction
operator|.
name|list
control|)
block|{
name|values
operator|.
name|addAll
argument_list|(
name|read
argument_list|(
name|value
argument_list|,
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
else|else
block|{
comment|// "[property] is not null" or "[property] is null"
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|CheckForNull
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|read
parameter_list|(
name|PropertyValue
name|value
parameter_list|,
name|ValuePattern
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|v
range|:
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|pattern
operator|.
name|matches
argument_list|(
name|v
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|values
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
block|}
end_class

end_unit

