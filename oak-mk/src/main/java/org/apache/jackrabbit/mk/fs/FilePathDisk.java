begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This file system stores files on disk.  * This is the most common file system.  */
end_comment

begin_class
specifier|public
class|class
name|FilePathDisk
extends|extends
name|FilePath
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CLASSPATH_PREFIX
init|=
literal|"classpath:"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FILE_SEPARATOR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_FILE_RETRY
init|=
literal|16
decl_stmt|;
annotation|@
name|Override
specifier|public
name|FilePathDisk
name|getPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|FilePathDisk
name|p
init|=
operator|new
name|FilePathDisk
argument_list|()
decl_stmt|;
name|p
operator|.
name|name
operator|=
name|translateFileName
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|name
argument_list|)
operator|.
name|length
argument_list|()
return|;
block|}
comment|/**      * Translate the file name to the native format. This will replace '\' with      * '/' and expand the home directory ('~').      *      * @param fileName the file name      * @return the native file name      */
specifier|protected
specifier|static
name|String
name|translateFileName
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|fileName
operator|=
name|fileName
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileName
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
name|fileName
operator|=
name|fileName
operator|.
name|substring
argument_list|(
literal|"file:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|expandUserHomeDirectory
argument_list|(
name|fileName
argument_list|)
return|;
block|}
comment|/**      * Expand '~' to the user home directory. It is only be expanded if the '~'      * stands alone, or is followed by '/' or '\'.      *      * @param fileName the file name      * @return the native file name      */
specifier|public
specifier|static
name|String
name|expandUserHomeDirectory
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
if|if
condition|(
name|fileName
operator|.
name|startsWith
argument_list|(
literal|"~"
argument_list|)
operator|&&
operator|(
name|fileName
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|||
name|fileName
operator|.
name|startsWith
argument_list|(
literal|"~/"
argument_list|)
operator|)
condition|)
block|{
name|String
name|userDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|fileName
operator|=
name|userDir
operator|+
name|fileName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|fileName
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|moveTo
parameter_list|(
name|FilePath
name|newName
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|oldFile
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|File
name|newFile
init|=
operator|new
name|File
argument_list|(
name|newName
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldFile
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|equals
argument_list|(
name|newFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|oldFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not rename "
operator|+
name|name
operator|+
literal|" (not found) to "
operator|+
name|newName
operator|.
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
name|newFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not rename "
operator|+
name|name
operator|+
literal|" to "
operator|+
name|newName
operator|+
literal|" (already exists)"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_FILE_RETRY
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|ok
init|=
name|oldFile
operator|.
name|renameTo
argument_list|(
name|newFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
return|return;
block|}
name|wait
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not rename "
operator|+
name|name
operator|+
literal|" to "
operator|+
name|newName
operator|.
name|name
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|void
name|wait
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|8
condition|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
try|try
block|{
comment|// sleep at most 256 ms
name|long
name|sleep
init|=
name|Math
operator|.
name|min
argument_list|(
literal|256
argument_list|,
name|i
operator|*
name|i
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleep
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|createFile
parameter_list|()
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_FILE_RETRY
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
return|return
name|file
operator|.
name|createNewFile
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// 'access denied' is really a concurrent access problem
name|wait
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|name
argument_list|)
operator|.
name|exists
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_FILE_RETRY
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|ok
init|=
name|file
operator|.
name|delete
argument_list|()
decl_stmt|;
if|if
condition|(
name|ok
operator|||
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
name|wait
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not delete "
operator|+
name|name
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|FilePath
argument_list|>
name|newDirectoryStream
parameter_list|()
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|FilePath
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|FilePath
argument_list|>
argument_list|()
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
index|[]
name|files
init|=
name|f
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
name|String
name|base
init|=
name|f
operator|.
name|getCanonicalPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|base
operator|.
name|endsWith
argument_list|(
name|FILE_SEPARATOR
argument_list|)
condition|)
block|{
name|base
operator|+=
name|FILE_SEPARATOR
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|len
init|=
name|files
operator|.
name|length
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|getPath
argument_list|(
name|base
operator|+
name|files
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canWrite
parameter_list|()
block|{
return|return
name|canWriteInternal
argument_list|(
operator|new
name|File
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|setReadOnly
parameter_list|()
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|f
operator|.
name|setReadOnly
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|FilePathDisk
name|toRealPath
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|fileName
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
decl_stmt|;
return|return
name|getPath
argument_list|(
name|fileName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FilePath
name|getParent
parameter_list|()
block|{
name|String
name|p
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
return|return
name|p
operator|==
literal|null
condition|?
literal|null
else|:
name|getPath
argument_list|(
name|p
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDirectory
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|name
argument_list|)
operator|.
name|isDirectory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAbsolute
parameter_list|()
block|{
if|if
condition|(
name|File
operator|.
name|separatorChar
operator|!=
literal|'/'
condition|)
block|{
comment|// Windows requires backslashes for isAbsolute() to work
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|File
argument_list|(
name|name
argument_list|)
operator|.
name|isAbsolute
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|lastModified
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|name
argument_list|)
operator|.
name|lastModified
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|canWriteInternal
parameter_list|(
name|File
name|file
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|canWrite
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// workaround for GAE which throws a
comment|// java.security.AccessControlException
return|return
literal|false
return|;
block|}
comment|// File.canWrite() does not respect windows user permissions,
comment|// so we must try to open it using the mode "rw".
comment|// See also http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4420020
name|RandomAccessFile
name|r
init|=
literal|null
decl_stmt|;
try|try
block|{
name|r
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"A file with this name already exists: "
operator|+
name|name
argument_list|)
throw|;
block|}
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_FILE_RETRY
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|dir
operator|.
name|exists
argument_list|()
operator|&&
name|dir
operator|.
name|isDirectory
argument_list|()
operator|)
operator|||
name|dir
operator|.
name|mkdir
argument_list|()
condition|)
block|{
return|return;
block|}
name|wait
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not create "
operator|+
name|name
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|OutputStream
name|newOutputStream
parameter_list|(
name|boolean
name|append
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|File
name|parent
init|=
name|file
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|FileUtils
operator|.
name|createDirectories
argument_list|(
name|parent
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|name
argument_list|,
name|append
argument_list|)
decl_stmt|;
return|return
name|out
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|newInputStream
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|>
literal|1
condition|)
block|{
comment|// if the : is in position 1, a windows file access is assumed: C:.. or D:
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|CLASSPATH_PREFIX
argument_list|)
condition|)
block|{
name|String
name|fileName
init|=
name|name
operator|.
name|substring
argument_list|(
name|CLASSPATH_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileName
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|fileName
operator|=
literal|"/"
operator|+
name|fileName
expr_stmt|;
block|}
name|InputStream
name|in
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Resource "
operator|+
name|fileName
argument_list|)
throw|;
block|}
return|return
name|in
return|;
block|}
comment|// otherwise an URL is assumed
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
name|url
operator|.
name|openStream
argument_list|()
decl_stmt|;
return|return
name|in
return|;
block|}
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|in
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileChannel
name|open
parameter_list|(
name|String
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FileDisk
argument_list|(
name|name
argument_list|,
name|mode
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|"file"
return|;
block|}
annotation|@
name|Override
specifier|public
name|FilePath
name|createTempFile
parameter_list|(
name|String
name|suffix
parameter_list|,
name|boolean
name|deleteOnExit
parameter_list|,
name|boolean
name|inTempDir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileName
init|=
name|name
operator|+
literal|"."
decl_stmt|;
name|String
name|prefix
init|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|File
name|dir
decl_stmt|;
if|if
condition|(
name|inTempDir
condition|)
block|{
name|dir
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|,
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
name|FileUtils
operator|.
name|createDirectories
argument_list|(
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|prefix
operator|+
name|getNextTempFileNamePart
argument_list|(
literal|false
argument_list|)
operator|+
name|suffix
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|f
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
comment|// in theory, the random number could collide
name|getNextTempFileNamePart
argument_list|(
literal|true
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|deleteOnExit
condition|)
block|{
try|try
block|{
name|f
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// sometimes this throws a NullPointerException
comment|// at java.io.DeleteOnExitHook.add(DeleteOnExitHook.java:33)
comment|// we can ignore it
block|}
block|}
return|return
name|get
argument_list|(
name|f
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|FilePath
name|resolve
parameter_list|(
name|String
name|other
parameter_list|)
block|{
return|return
name|other
operator|==
literal|null
condition|?
name|this
else|:
name|getPath
argument_list|(
name|name
operator|+
literal|"/"
operator|+
name|other
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|/**  * Uses java.io.RandomAccessFile to access a file.  */
end_comment

begin_class
class|class
name|FileDisk
extends|extends
name|FileBase
block|{
specifier|private
specifier|final
name|RandomAccessFile
name|file
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
name|long
name|pos
decl_stmt|;
name|FileDisk
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|mode
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|this
operator|.
name|file
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|fileName
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|fileName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|force
parameter_list|(
name|boolean
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
name|file
operator|.
name|getFD
argument_list|()
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FileChannel
name|truncate
parameter_list|(
name|long
name|newLength
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|newLength
operator|<
name|file
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// some implementations actually only support truncate
name|file
operator|.
name|setLength
argument_list|(
name|newLength
argument_list|)
expr_stmt|;
name|pos
operator|=
name|Math
operator|.
name|min
argument_list|(
name|pos
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|FileLock
name|tryLock
parameter_list|(
name|long
name|position
parameter_list|,
name|long
name|size
parameter_list|,
name|boolean
name|shared
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|file
operator|.
name|getChannel
argument_list|()
operator|.
name|tryLock
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|implCloseChannel
parameter_list|()
throws|throws
name|IOException
block|{
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|position
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|pos
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|size
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|file
operator|.
name|length
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|ByteBuffer
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
name|file
operator|.
name|read
argument_list|(
name|dst
operator|.
name|array
argument_list|()
argument_list|,
name|dst
operator|.
name|position
argument_list|()
argument_list|,
name|dst
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|pos
operator|+=
name|len
expr_stmt|;
name|dst
operator|.
name|position
argument_list|(
name|dst
operator|.
name|position
argument_list|()
operator|+
name|len
argument_list|)
expr_stmt|;
block|}
return|return
name|len
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileChannel
name|position
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|pos
operator|!=
name|pos
condition|)
block|{
name|file
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|write
parameter_list|(
name|ByteBuffer
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
name|src
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|file
operator|.
name|write
argument_list|(
name|src
operator|.
name|array
argument_list|()
argument_list|,
name|src
operator|.
name|position
argument_list|()
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|src
operator|.
name|position
argument_list|(
name|src
operator|.
name|position
argument_list|()
operator|+
name|len
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|len
expr_stmt|;
return|return
name|len
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

