begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_comment
comment|/**  * Performs a rollback of a commit based on a list of changes. Changes are  * rolled back by applying the reverse operation to the document store.  */
end_comment

begin_class
class|class
name|Rollback
block|{
specifier|static
specifier|final
name|Rollback
name|FAILED
init|=
operator|new
name|Rollback
argument_list|(
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|""
argument_list|)
block|{
annotation|@
name|Override
name|void
name|perform
parameter_list|(
annotation|@
name|NotNull
name|DocumentStore
name|store
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"rollback failed"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
specifier|static
specifier|final
name|Rollback
name|NONE
init|=
operator|new
name|Rollback
argument_list|(
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|""
argument_list|)
block|{
annotation|@
name|Override
name|void
name|perform
parameter_list|(
annotation|@
name|NotNull
name|DocumentStore
name|store
parameter_list|)
throws|throws
name|DocumentStoreException
block|{         }
block|}
decl_stmt|;
specifier|private
specifier|final
name|Revision
name|revision
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|changed
decl_stmt|;
specifier|private
specifier|final
name|String
name|commitRootId
decl_stmt|;
comment|/**      * Creates a new rollback for the given commit revision.      *      * @param revision the commit revision.      * @param changed the changes to revert.      * @param commitRootId the id of the commit root document.      */
name|Rollback
parameter_list|(
annotation|@
name|NotNull
name|Revision
name|revision
parameter_list|,
annotation|@
name|NotNull
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|changed
parameter_list|,
annotation|@
name|NotNull
name|String
name|commitRootId
parameter_list|)
block|{
name|this
operator|.
name|revision
operator|=
name|revision
expr_stmt|;
name|this
operator|.
name|changed
operator|=
name|checkNotNull
argument_list|(
name|changed
argument_list|)
expr_stmt|;
name|this
operator|.
name|commitRootId
operator|=
name|checkNotNull
argument_list|(
name|commitRootId
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs the rollback. If this operation fails with a      * {@link DocumentStoreException}, then only some of the rollback may have      * been performed.      *      * @param store the store where to apply the rollback.      * @throws DocumentStoreException if any of the operations fails.      */
name|void
name|perform
parameter_list|(
annotation|@
name|NotNull
name|DocumentStore
name|store
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
name|checkNotNull
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|reverseOps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|UpdateOp
name|op
range|:
name|changed
control|)
block|{
name|UpdateOp
name|reverse
init|=
name|op
operator|.
name|getReverseOperation
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|isNew
argument_list|()
condition|)
block|{
name|NodeDocument
operator|.
name|setDeletedOnce
argument_list|(
name|reverse
argument_list|)
expr_stmt|;
block|}
comment|// do not create document if it doesn't exist
name|reverse
operator|.
name|setNew
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reverseOps
operator|.
name|add
argument_list|(
name|reverse
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|reverseOps
argument_list|)
expr_stmt|;
name|removeCollisionMarker
argument_list|(
name|store
argument_list|,
name|commitRootId
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|removeCollisionMarker
parameter_list|(
name|DocumentStore
name|store
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|UpdateOp
name|removeCollision
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|NodeDocument
operator|.
name|removeCollision
argument_list|(
name|removeCollision
argument_list|,
name|revision
argument_list|)
expr_stmt|;
name|store
operator|.
name|findAndUpdate
argument_list|(
name|NODES
argument_list|,
name|removeCollision
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

