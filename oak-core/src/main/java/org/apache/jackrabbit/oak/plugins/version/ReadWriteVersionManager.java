begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_BASEVERSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_CREATED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_ISCHECKEDOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PREDECESSORS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_ROOTVERSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SUCCESSORS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_VERSIONABLEUUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_VERSIONHISTORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_VERSIONLABELS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_VERSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_VERSIONHISTORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_VERSIONLABELS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|Utils
operator|.
name|uuidFromNode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionConstants
operator|.
name|REP_VERSIONSTORAGE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|IdentifierManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|ImmutableRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|ImmutableTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|ReadOnlyNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|TODO
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * TODO document  */
end_comment

begin_class
class|class
name|ReadWriteVersionManager
extends|extends
name|ReadOnlyVersionManager
block|{
specifier|private
specifier|final
name|NodeBuilder
name|versionStorageNode
decl_stmt|;
specifier|private
specifier|final
name|NodeBuilder
name|workspaceRoot
decl_stmt|;
specifier|private
name|ReadOnlyNodeTypeManager
name|ntMgr
decl_stmt|;
name|ReadWriteVersionManager
parameter_list|(
name|NodeBuilder
name|versionStorageNode
parameter_list|,
name|NodeBuilder
name|workspaceRoot
parameter_list|)
block|{
name|this
operator|.
name|versionStorageNode
operator|=
name|checkNotNull
argument_list|(
name|versionStorageNode
argument_list|)
expr_stmt|;
name|this
operator|.
name|workspaceRoot
operator|=
name|checkNotNull
argument_list|(
name|workspaceRoot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|protected
name|Tree
name|getVersionStorage
parameter_list|()
block|{
return|return
operator|new
name|ImmutableTree
argument_list|(
name|versionStorageNode
operator|.
name|getNodeState
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|protected
name|Root
name|getWorkspaceRoot
parameter_list|()
block|{
return|return
operator|new
name|ImmutableRoot
argument_list|(
name|workspaceRoot
operator|.
name|getNodeState
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|protected
name|ReadOnlyNodeTypeManager
name|getNodeTypeManager
parameter_list|()
block|{
if|if
condition|(
name|ntMgr
operator|==
literal|null
condition|)
block|{
name|ntMgr
operator|=
name|ReadOnlyNodeTypeManager
operator|.
name|getInstance
argument_list|(
name|getWorkspaceRoot
argument_list|()
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
return|return
name|ntMgr
return|;
block|}
comment|/**      * Gets or creates the version history for the given      * {@code versionable} node.      *      * @param versionable the versionable node.      * @return the version history node.      * @throws IllegalArgumentException if the given node does not have a      *                                  {@code jcr:uuid} property.      */
annotation|@
name|Nonnull
name|NodeBuilder
name|getOrCreateVersionHistory
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|versionable
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|checkNotNull
argument_list|(
name|versionable
argument_list|)
expr_stmt|;
name|String
name|vUUID
init|=
name|uuidFromNode
argument_list|(
name|versionable
argument_list|)
decl_stmt|;
name|String
name|relPath
init|=
name|getVersionHistoryPath
argument_list|(
name|vUUID
argument_list|)
decl_stmt|;
name|NodeBuilder
name|node
init|=
name|versionStorageNode
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|PathUtils
operator|.
name|elements
argument_list|(
name|relPath
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|node
operator|=
name|node
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|hasProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
condition|)
block|{
name|String
name|nt
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|nt
operator|=
name|REP_VERSIONSTORAGE
expr_stmt|;
block|}
else|else
block|{
comment|// last path element denotes nt:versionHistory node
name|nt
operator|=
name|NT_VERSIONHISTORY
expr_stmt|;
block|}
name|node
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|nt
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
block|}
comment|// use jcr:rootVersion node to detect if we need to initialize the
comment|// version history
if|if
condition|(
operator|!
name|node
operator|.
name|hasChildNode
argument_list|(
name|JCR_ROOTVERSION
argument_list|)
condition|)
block|{
comment|// jcr:versionableUuuid property
name|node
operator|.
name|setProperty
argument_list|(
name|JCR_VERSIONABLEUUID
argument_list|,
name|vUUID
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|JCR_UUID
argument_list|,
name|IdentifierManager
operator|.
name|generateUUID
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
comment|// jcr:versionLabels child node
name|NodeBuilder
name|vLabels
init|=
name|node
operator|.
name|child
argument_list|(
name|JCR_VERSIONLABELS
argument_list|)
decl_stmt|;
name|vLabels
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_VERSIONLABELS
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
comment|// jcr:rootVersion child node
name|createVersion
argument_list|(
name|node
argument_list|,
name|versionable
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|public
name|void
name|checkout
parameter_list|(
name|NodeBuilder
name|versionable
parameter_list|)
block|{
name|versionable
operator|.
name|setProperty
argument_list|(
name|JCR_ISCHECKEDOUT
argument_list|,
literal|true
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|PropertyState
name|baseVersion
init|=
name|versionable
operator|.
name|getProperty
argument_list|(
name|JCR_BASEVERSION
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|predecessors
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|baseVersion
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCE
argument_list|)
argument_list|)
decl_stmt|;
name|versionable
operator|.
name|setProperty
argument_list|(
name|JCR_PREDECESSORS
argument_list|,
name|predecessors
argument_list|,
name|Type
operator|.
name|REFERENCES
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkin
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|versionable
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|history
init|=
name|getOrCreateVersionHistory
argument_list|(
name|versionable
argument_list|)
decl_stmt|;
name|createVersion
argument_list|(
name|history
argument_list|,
name|versionable
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|restore
parameter_list|(
name|NodeBuilder
name|versionable
parameter_list|)
block|{
name|TODO
operator|.
name|unimplemented
argument_list|()
expr_stmt|;
block|}
comment|// TODO: more methods that modify versions
comment|//------------------------------< internal>--------------------------------
comment|/**      * Creates a version in the given version history. If the given version      * history does not yet have a version, then a root version is created and      * the versionable node is in a checked out state. Otherwise a version is      * created and the versionable node is set to checked in.      *      * @param vHistory the version history node.      * @param versionable the versionable node.      * @return the created version (nt:version) node.      * @throws CommitFailedException if creating the version fails. E.g. because      * the versionable node contains a OPV item with ABORT.      */
specifier|private
name|NodeBuilder
name|createVersion
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|vHistory
parameter_list|,
annotation|@
name|Nonnull
name|NodeBuilder
name|versionable
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|CommitFailedException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|predecessors
decl_stmt|;
name|NodeBuilder
name|version
decl_stmt|;
name|boolean
name|isRootVersion
decl_stmt|;
if|if
condition|(
operator|!
name|vHistory
operator|.
name|hasChildNode
argument_list|(
name|JCR_ROOTVERSION
argument_list|)
condition|)
block|{
comment|// create root version
name|isRootVersion
operator|=
literal|true
expr_stmt|;
name|predecessors
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|version
operator|=
name|vHistory
operator|.
name|child
argument_list|(
name|JCR_ROOTVERSION
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|isRootVersion
operator|=
literal|false
expr_stmt|;
name|checkState
argument_list|(
name|versionable
operator|.
name|hasProperty
argument_list|(
name|JCR_PREDECESSORS
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyState
name|state
init|=
name|versionable
operator|.
name|getProperty
argument_list|(
name|JCR_PREDECESSORS
argument_list|)
decl_stmt|;
name|predecessors
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|state
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCES
argument_list|)
argument_list|)
expr_stmt|;
name|version
operator|=
name|vHistory
operator|.
name|child
argument_list|(
name|calculateVersion
argument_list|(
name|vHistory
argument_list|,
name|versionable
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|versionUUID
init|=
name|IdentifierManager
operator|.
name|generateUUID
argument_list|()
decl_stmt|;
name|version
operator|.
name|setProperty
argument_list|(
name|JCR_UUID
argument_list|,
name|versionUUID
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|version
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_VERSION
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|version
operator|.
name|setProperty
argument_list|(
name|JCR_CREATED
argument_list|,
name|now
argument_list|,
name|Type
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|version
operator|.
name|setProperty
argument_list|(
name|JCR_PREDECESSORS
argument_list|,
name|predecessors
argument_list|,
name|Type
operator|.
name|REFERENCES
argument_list|)
expr_stmt|;
name|version
operator|.
name|setProperty
argument_list|(
name|JCR_SUCCESSORS
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Type
operator|.
name|REFERENCES
argument_list|)
expr_stmt|;
comment|// update successors of versions identified by predecessors
comment|// FIXME: inefficient because it iterates over all versions
for|for
control|(
name|String
name|name
range|:
name|vHistory
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|JCR_VERSIONLABELS
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|NodeBuilder
name|predecessor
init|=
name|vHistory
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|predecessors
operator|.
name|contains
argument_list|(
name|uuidFromNode
argument_list|(
name|predecessor
argument_list|)
argument_list|)
condition|)
block|{
name|PropertyState
name|state
init|=
name|predecessor
operator|.
name|getProperty
argument_list|(
name|JCR_SUCCESSORS
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Missing "
operator|+
name|JCR_SUCCESSORS
operator|+
literal|" property on "
operator|+
name|predecessor
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|refs
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|state
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCES
argument_list|)
argument_list|)
decl_stmt|;
name|refs
operator|.
name|add
argument_list|(
name|versionUUID
argument_list|)
expr_stmt|;
name|predecessor
operator|.
name|setProperty
argument_list|(
name|JCR_SUCCESSORS
argument_list|,
name|refs
argument_list|,
name|Type
operator|.
name|REFERENCES
argument_list|)
expr_stmt|;
block|}
block|}
comment|// jcr:frozenNode of created version
name|VersionableState
name|versionableState
init|=
name|VersionableState
operator|.
name|fromVersion
argument_list|(
name|version
argument_list|,
name|versionable
argument_list|,
name|ntMgr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isRootVersion
condition|)
block|{
name|versionableState
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
comment|// set jcr:isCheckedOut, jcr:versionHistory, jcr:baseVersion and
comment|// jcr:predecessors on versionable node
name|versionable
operator|.
name|setProperty
argument_list|(
name|JCR_ISCHECKEDOUT
argument_list|,
name|isRootVersion
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|versionable
operator|.
name|setProperty
argument_list|(
name|JCR_VERSIONHISTORY
argument_list|,
name|uuidFromNode
argument_list|(
name|vHistory
argument_list|)
argument_list|,
name|Type
operator|.
name|REFERENCE
argument_list|)
expr_stmt|;
name|versionable
operator|.
name|setProperty
argument_list|(
name|JCR_BASEVERSION
argument_list|,
name|versionUUID
argument_list|,
name|Type
operator|.
name|REFERENCE
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRootVersion
condition|)
block|{
comment|// set predecessors to base version if this is the root version
name|predecessors
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|versionUUID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// otherwise clear predecessors for check-in
name|predecessors
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|versionable
operator|.
name|setProperty
argument_list|(
name|JCR_PREDECESSORS
argument_list|,
name|predecessors
argument_list|,
name|Type
operator|.
name|REFERENCES
argument_list|)
expr_stmt|;
return|return
name|version
return|;
block|}
comment|/**      *<i>Copied from Apache Jackrabbit Core</i>      *<p>      * Calculates the name of the new version that will be created by a      * checkin call. The name is determined as follows:      *<ul>      *<li> first the predecessor version with the shortest name is searched.      *<li> if that predecessor version is the root version, the new version gets      *      the name "{number of successors}+1" + ".0"      *<li> if that predecessor version has no successor, the last digit of it's      *      version number is incremented.      *<li> if that predecessor version has successors but the incremented name      *      does not exist, that name is used.      *<li> otherwise a ".0" is added to the name until a non conflicting name      *      is found.      *<ul>      *</p>      * Example Graph:      *<pre>      * jcr:rootVersion      *  |     |      * 1.0   2.0      *  |      * 1.1      *  |      * 1.2 ---\  ------\      *  |      \        \      * 1.3   1.2.0   1.2.0.0      *  |      |      * 1.4   1.2.1 ----\      *  |      |        \      * 1.5   1.2.2   1.2.1.0      *  |      |        |      * 1.6     |     1.2.1.1      *  |-----/      * 1.7      *</pre>      *      * @param history the version history      * @param versionable the node to checkin      * @return the new version name      * @throws IllegalStateException if mandatory version properties are missing.      */
specifier|protected
name|String
name|calculateVersion
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|history
parameter_list|,
annotation|@
name|Nonnull
name|NodeBuilder
name|versionable
parameter_list|)
throws|throws
name|IllegalStateException
block|{
comment|// 1. search a predecessor, suitable for generating the new name
name|PropertyState
name|predecessors
init|=
name|versionable
operator|.
name|getProperty
argument_list|(
name|JCR_PREDECESSORS
argument_list|)
decl_stmt|;
if|if
condition|(
name|predecessors
operator|==
literal|null
operator|||
name|predecessors
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
block|{
name|String
name|message
decl_stmt|;
if|if
condition|(
name|predecessors
operator|==
literal|null
condition|)
block|{
name|message
operator|=
literal|"Mandatory jcr:predecessors property missing on node "
operator|+
name|uuidFromNode
argument_list|(
name|versionable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
literal|"Mandatory jcr:predecessors property is empty on node "
operator|+
name|uuidFromNode
argument_list|(
name|versionable
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|// FIXME: inefficient because it iterates over all versions!
name|Set
argument_list|<
name|String
argument_list|>
name|uuids
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|predecessors
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCES
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|best
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|history
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|JCR_VERSIONLABELS
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|NodeBuilder
name|child
init|=
name|history
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|uuids
operator|.
name|contains
argument_list|(
name|uuidFromNode
argument_list|(
name|child
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|best
operator|==
literal|null
operator|||
name|name
operator|.
name|length
argument_list|()
operator|<
name|best
operator|.
name|length
argument_list|()
condition|)
block|{
name|best
operator|=
name|name
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|best
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"Could not find 'best' predecessor node for "
operator|+
name|uuidFromNode
argument_list|(
name|versionable
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|// 2. generate version name (assume no namespaces in version names)
name|String
name|versionName
init|=
name|best
decl_stmt|;
name|int
name|pos
init|=
name|versionName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
block|{
name|String
name|newVersionName
init|=
name|versionName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
operator|+
literal|1
argument_list|)
operator|+
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|versionName
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
argument_list|)
operator|+
literal|1
operator|)
decl_stmt|;
while|while
condition|(
name|history
operator|.
name|hasChildNode
argument_list|(
name|newVersionName
argument_list|)
condition|)
block|{
name|versionName
operator|+=
literal|".0"
expr_stmt|;
name|newVersionName
operator|=
name|versionName
expr_stmt|;
block|}
return|return
name|newVersionName
return|;
block|}
else|else
block|{
comment|// best is root version
name|checkState
argument_list|(
name|history
operator|.
name|hasChildNode
argument_list|(
name|JCR_ROOTVERSION
argument_list|)
argument_list|)
expr_stmt|;
name|NodeBuilder
name|v
init|=
name|history
operator|.
name|getChildNode
argument_list|(
name|JCR_ROOTVERSION
argument_list|)
decl_stmt|;
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|getProperty
argument_list|(
name|JCR_SUCCESSORS
argument_list|)
operator|.
name|count
argument_list|()
operator|+
literal|1
argument_list|)
operator|+
literal|".0"
return|;
block|}
block|}
block|}
end_class

end_unit

