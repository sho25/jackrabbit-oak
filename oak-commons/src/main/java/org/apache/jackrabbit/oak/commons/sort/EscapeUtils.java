begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|sort
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_comment
comment|/**  * Utility class to escape '\n', '\r', '\' char  * while being written to file and unescape then upon getting  * read from file. This is used by StringSort and ExternalSort  * to handle data which contains line break. If left unescaped  * then such data interferes with the processing of such utilities  */
end_comment

begin_class
specifier|abstract
class|class
name|EscapeUtils
block|{
specifier|static
name|String
name|escapeLineBreak
parameter_list|(
annotation|@
name|Nullable
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|escapingRequired
argument_list|(
name|line
argument_list|)
condition|)
block|{
name|line
operator|=
name|escape
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
return|return
name|line
return|;
block|}
specifier|static
name|String
name|unescapeLineBreaks
parameter_list|(
annotation|@
name|Nullable
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|unescapingRequired
argument_list|(
name|line
argument_list|)
condition|)
block|{
name|line
operator|=
name|unescape
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
return|return
name|line
return|;
block|}
specifier|private
specifier|static
name|boolean
name|escapingRequired
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|int
name|len
init|=
name|line
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|line
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|'\\'
case|:
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|unescapingRequired
parameter_list|(
name|String
name|line
parameter_list|)
block|{
return|return
name|line
operator|.
name|indexOf
argument_list|(
literal|'\\'
argument_list|)
operator|>=
literal|0
return|;
block|}
specifier|private
specifier|static
name|String
name|escape
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|int
name|len
init|=
name|line
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|len
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|line
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|/*               Here we need not worry about unicode chars               because UTF-16 represents supplementary characters using               code units whose values are not used for BMP characters               i.e. ASCII chars              */
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'\n'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\n"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\r'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\r"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\\'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\\\"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|unescape
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|int
name|len
init|=
name|line
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|len
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|line
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
name|checkState
argument_list|(
name|i
operator|<
name|len
operator|-
literal|1
argument_list|,
literal|"Expected one more char after '\\' at [%s] in [%s]"
argument_list|,
name|i
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|char
name|nextChar
init|=
name|line
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|nextChar
condition|)
block|{
case|case
literal|'n'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
break|break;
case|case
literal|'r'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
break|break;
case|case
literal|'\\'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
break|break;
default|default:
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected char [%c] found at %d of [%s]. "
operator|+
literal|"Expected '\\' or 'r' or 'n"
argument_list|,
name|nextChar
argument_list|,
name|i
argument_list|,
name|line
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

