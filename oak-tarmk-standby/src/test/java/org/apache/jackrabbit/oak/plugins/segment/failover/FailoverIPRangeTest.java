begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|failover
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|failover
operator|.
name|client
operator|.
name|FailoverClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|failover
operator|.
name|server
operator|.
name|FailoverServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentTestUtils
operator|.
name|addTestContent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_class
specifier|public
class|class
name|FailoverIPRangeTest
extends|extends
name|TestBase
block|{
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpServerAndClient
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
block|{
name|closeServerAndClient
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverAllClients
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestWithConfig
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverLocalClient
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestWithConfig
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"127.0.0.1"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverLocalClientUseIPv6
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|noDualStackSupport
condition|)
block|{
name|createTestWithConfig
argument_list|(
literal|"::1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"::1"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverWrongClient
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestWithConfig
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"127.0.0.2"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverWrongClientIPv6
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|noDualStackSupport
condition|)
block|{
name|createTestWithConfig
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"::2"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverLocalhost
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestWithConfig
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"localhost"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverInvalidName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestWithConfig
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"foobar"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverValidIPRangeStart
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestWithConfig
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"127.0.0.1-127.0.0.2"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverValidIPRangeEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestWithConfig
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"127.0.0.0-127.0.0.1"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverValidIPRange
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestWithConfig
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"127.0.0.0-127.0.0.2"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverInvalidRange
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestWithConfig
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"127.0.0.2-127.0.0.1"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverCorrectList
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestWithConfig
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"foobar"
block|,
literal|"127-128"
block|,
literal|"126.0.0.1"
block|,
literal|"127.0.0.0-127.255.255.255"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverCorrectListIPv6
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|noDualStackSupport
condition|)
block|{
name|createTestWithConfig
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"foobar"
block|,
literal|"122-126"
block|,
literal|"::1"
block|,
literal|"126.0.0.1"
block|,
literal|"127.0.0.0-127.255.255.255"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverWrongList
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestWithConfig
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"foobar"
block|,
literal|"126.0.0.1"
block|,
literal|"::2"
block|,
literal|"128.0.0.1-255.255.255.255"
block|,
literal|"128.0.0.0-127.255.255.255"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverCorrectListUseIPv6
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|noDualStackSupport
condition|)
block|{
name|createTestWithConfig
argument_list|(
literal|"::1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobar"
block|,
literal|"127-128"
block|,
literal|"0:0:0:0:0:0:0:1"
block|,
literal|"126.0.0.1"
block|,
literal|"127.0.0.0-127.255.255.255"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverCorrectListIPv6UseIPv6
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|noDualStackSupport
condition|)
block|{
name|createTestWithConfig
argument_list|(
literal|"::1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobar"
block|,
literal|"122-126"
block|,
literal|"::1"
block|,
literal|"126.0.0.1"
block|,
literal|"127.0.0.0-127.255.255.255"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverWrongListUseIPv6
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|noDualStackSupport
condition|)
block|{
name|createTestWithConfig
argument_list|(
literal|"::1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobar"
block|,
literal|"126.0.0.1"
block|,
literal|"::2"
block|,
literal|"128.0.0.1-255.255.255.255"
block|,
literal|"128.0.0.0-127.255.255.255"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createTestWithConfig
parameter_list|(
name|String
index|[]
name|ipRanges
parameter_list|,
name|boolean
name|expectedToWork
parameter_list|)
throws|throws
name|Exception
block|{
name|createTestWithConfig
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|ipRanges
argument_list|,
name|expectedToWork
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createTestWithConfig
parameter_list|(
name|String
name|host
parameter_list|,
name|String
index|[]
name|ipRanges
parameter_list|,
name|boolean
name|expectedToWork
parameter_list|)
throws|throws
name|Exception
block|{
name|NodeStore
name|store
init|=
operator|new
name|SegmentNodeStore
argument_list|(
name|storeS
argument_list|)
decl_stmt|;
specifier|final
name|FailoverServer
name|server
init|=
operator|new
name|FailoverServer
argument_list|(
name|port
argument_list|,
name|storeS
argument_list|,
name|ipRanges
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|addTestContent
argument_list|(
name|store
argument_list|,
literal|"server"
argument_list|)
expr_stmt|;
name|storeS
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// this speeds up the test a little bit...
name|FailoverClient
name|cl
init|=
operator|new
name|FailoverClient
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|storeC
argument_list|)
decl_stmt|;
name|cl
operator|.
name|run
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|expectedToWork
condition|)
block|{
name|assertEquals
argument_list|(
name|storeS
operator|.
name|getHead
argument_list|()
argument_list|,
name|storeC
operator|.
name|getHead
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
literal|"stores are equal but shouldn't!"
argument_list|,
name|storeS
operator|.
name|getHead
argument_list|()
operator|.
name|equals
argument_list|(
name|storeC
operator|.
name|getHead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
name|cl
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

