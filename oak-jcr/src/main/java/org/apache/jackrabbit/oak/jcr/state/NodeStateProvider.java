begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|state
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|map
operator|.
name|LRUMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|SessionImpl
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|configuration
operator|.
name|RepositoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|state
operator|.
name|ChangeTree
operator|.
name|NodeDelta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|util
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|util
operator|.
name|Unchecked
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|NodeStateProvider
block|{
specifier|private
specifier|final
name|Context
name|sessionContext
decl_stmt|;
specifier|private
specifier|final
name|TransientSpace
name|transientSpace
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|TransientNodeState
argument_list|>
name|cache
decl_stmt|;
specifier|public
name|NodeStateProvider
parameter_list|(
name|Context
name|sessionContext
parameter_list|,
name|TransientSpace
name|transientSpace
parameter_list|)
block|{
name|this
operator|.
name|sessionContext
operator|=
name|sessionContext
expr_stmt|;
name|this
operator|.
name|transientSpace
operator|=
name|transientSpace
expr_stmt|;
name|RepositoryConfiguration
name|config
init|=
name|sessionContext
operator|.
name|getGlobalContext
argument_list|()
operator|.
name|getInstance
argument_list|(
name|RepositoryConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|getNodeStateCacheSize
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|cache
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|cache
operator|=
name|Unchecked
operator|.
name|cast
argument_list|(
operator|new
name|LRUMap
argument_list|(
name|config
operator|.
name|getNodeStateCacheSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|TransientNodeState
name|getNodeState
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|TransientNodeState
name|state
init|=
name|cache
operator|==
literal|null
condition|?
literal|null
else|:
name|cache
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|NodeDelta
name|delta
init|=
name|transientSpace
operator|.
name|getNodeDelta
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|delta
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|state
operator|=
operator|new
name|TransientNodeState
argument_list|(
name|sessionContext
argument_list|,
name|delta
argument_list|)
expr_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|state
return|;
block|}
specifier|public
name|void
name|release
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|cache
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|//------------------------------------------< internal/private>---
name|TransientNodeState
name|getNodeState
parameter_list|(
name|NodeDelta
name|nodeDelta
parameter_list|)
block|{
name|Path
name|path
init|=
name|nodeDelta
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|TransientNodeState
name|state
init|=
name|cache
operator|==
literal|null
condition|?
literal|null
else|:
name|cache
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|state
operator|=
operator|new
name|TransientNodeState
argument_list|(
name|sessionContext
argument_list|,
name|nodeDelta
argument_list|)
expr_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|state
return|;
block|}
name|NodeDelta
name|getNodeDelta
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|transientSpace
operator|.
name|getNodeDelta
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_class

end_unit

