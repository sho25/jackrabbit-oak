begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|RowIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
operator|.
name|wikipedia
operator|.
name|WikipediaImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|JcrCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|OakRepositoryFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|RepositoryFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneInitializerHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_class
specifier|public
class|class
name|FullTextSearchTest
extends|extends
name|AbstractTest
argument_list|<
name|FullTextSearchTest
operator|.
name|TestContext
argument_list|>
block|{
comment|/**      * Pattern used to find words and other searchable tokens within the      * imported Wikipedia pages.      */
specifier|private
specifier|static
specifier|final
name|Pattern
name|WORD_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\p{LD}{3,}"
argument_list|)
decl_stmt|;
specifier|private
name|int
name|maxSampleSize
init|=
literal|100
decl_stmt|;
specifier|private
specifier|final
name|WikipediaImport
name|importer
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|sampleSet
init|=
name|newHashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|42
argument_list|)
decl_stmt|;
comment|//fixed seed
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|maxRowsToFetch
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"maxRowsToFetch"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|private
name|TestContext
name|defaultContext
decl_stmt|;
specifier|public
name|FullTextSearchTest
parameter_list|(
name|File
name|dump
parameter_list|,
name|boolean
name|flat
parameter_list|,
name|boolean
name|doReport
parameter_list|)
block|{
name|this
operator|.
name|importer
operator|=
operator|new
name|WikipediaImport
argument_list|(
name|dump
argument_list|,
name|flat
argument_list|,
name|doReport
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|pageAdded
parameter_list|(
name|String
name|title
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|%
literal|1000
operator|==
literal|0
operator|&&
name|sampleSet
operator|.
name|size
argument_list|()
operator|<
name|maxSampleSize
operator|&&
name|text
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|words
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|Matcher
name|matcher
init|=
name|WORD_PATTERN
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|words
operator|.
name|add
argument_list|(
name|matcher
operator|.
name|group
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|words
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sampleSet
operator|.
name|add
argument_list|(
name|words
operator|.
name|get
argument_list|(
name|words
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeSuite
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|.
name|setSeed
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|sampleSet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|importer
operator|.
name|importWikipedia
argument_list|(
name|loginWriter
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// allow some time for the indexer to catch up
name|defaultContext
operator|=
operator|new
name|TestContext
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|TestContext
name|prepareThreadExecutionContext
parameter_list|()
block|{
return|return
operator|new
name|TestContext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|runTest
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
name|defaultContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|protected
name|void
name|runTest
parameter_list|(
name|TestContext
name|ec
parameter_list|)
throws|throws
name|Exception
block|{
name|QueryManager
name|qm
init|=
name|ec
operator|.
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
comment|// TODO verify why "order by jcr:score()" accounts for what looks
comment|// like> 20% of the perf lost in Collections.sort
for|for
control|(
name|String
name|word
range|:
name|ec
operator|.
name|words
control|)
block|{
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"//*[jcr:contains(@text, '"
operator|+
name|word
operator|+
literal|"')] "
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
decl_stmt|;
name|QueryResult
name|r
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|RowIterator
name|it
init|=
name|r
operator|.
name|getRows
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|rows
init|=
literal|0
init|;
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
name|rows
operator|<
name|maxRowsToFetch
condition|;
name|rows
operator|++
control|)
block|{
name|Node
name|n
init|=
name|it
operator|.
name|nextRow
argument_list|()
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|ec
operator|.
name|hash
operator|+=
name|n
operator|.
name|getProperty
argument_list|(
literal|"text"
argument_list|)
operator|.
name|getString
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|ec
operator|.
name|hash
operator|+=
name|n
operator|.
name|getProperty
argument_list|(
literal|"title"
argument_list|)
operator|.
name|getString
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
block|}
block|}
class|class
name|TestContext
block|{
specifier|final
name|Session
name|session
init|=
name|loginWriter
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|words
init|=
name|getRandomWords
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
literal|0
decl_stmt|;
comment|// summary variable to prevent JIT compiler tricks
block|}
specifier|private
name|String
index|[]
name|getRandomWords
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|samples
init|=
name|newArrayList
argument_list|(
name|sampleSet
argument_list|)
decl_stmt|;
name|String
index|[]
name|words
init|=
operator|new
name|String
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|words
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|words
index|[
name|i
index|]
operator|=
name|samples
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|samples
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|words
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Repository
index|[]
name|createRepository
parameter_list|(
name|RepositoryFixture
name|fixture
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|fixture
operator|instanceof
name|OakRepositoryFixture
condition|)
block|{
return|return
operator|(
operator|(
name|OakRepositoryFixture
operator|)
name|fixture
operator|)
operator|.
name|setUpCluster
argument_list|(
literal|1
argument_list|,
operator|new
name|JcrCustomizer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Jcr
name|customize
parameter_list|(
name|Jcr
name|jcr
parameter_list|)
block|{
name|LuceneIndexProvider
name|provider
init|=
operator|new
name|LuceneIndexProvider
argument_list|()
decl_stmt|;
name|jcr
operator|.
name|with
argument_list|(
operator|(
name|QueryIndexProvider
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|Observer
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|LuceneIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|LuceneInitializerHelper
argument_list|(
literal|"luceneGlobal"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|jcr
return|;
block|}
block|}
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|createRepository
argument_list|(
name|fixture
argument_list|)
return|;
block|}
block|}
end_class

end_unit

