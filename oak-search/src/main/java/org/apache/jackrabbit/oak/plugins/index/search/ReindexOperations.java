begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|IndexDefinition
operator|.
name|INDEX_DEFINITION_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|spi
operator|.
name|editor
operator|.
name|FulltextIndexEditorContext
operator|.
name|configureUniqueId
import|;
end_import

begin_class
specifier|public
class|class
name|ReindexOperations
block|{
specifier|private
specifier|final
name|NodeState
name|root
decl_stmt|;
specifier|private
specifier|final
name|NodeBuilder
name|definitionBuilder
decl_stmt|;
specifier|private
specifier|final
name|String
name|indexPath
decl_stmt|;
specifier|public
name|ReindexOperations
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|NodeBuilder
name|definitionBuilder
parameter_list|,
name|String
name|indexPath
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|definitionBuilder
operator|=
name|definitionBuilder
expr_stmt|;
name|this
operator|.
name|indexPath
operator|=
name|indexPath
expr_stmt|;
block|}
specifier|public
name|IndexDefinition
name|apply
parameter_list|(
name|boolean
name|useStateFromBuilder
parameter_list|)
block|{
name|IndexFormatVersion
name|version
init|=
name|IndexDefinition
operator|.
name|determineVersionForFreshIndex
argument_list|(
name|definitionBuilder
argument_list|)
decl_stmt|;
name|definitionBuilder
operator|.
name|setProperty
argument_list|(
name|IndexDefinition
operator|.
name|INDEX_VERSION
argument_list|,
name|version
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|//Avoid obtaining the latest NodeState from builder as that would force purge of current transient state
comment|//as index definition does not get modified as part of IndexUpdate run in most case we rely on base state
comment|//For case where index definition is rewritten there we get fresh state
name|NodeState
name|defnState
init|=
name|useStateFromBuilder
condition|?
name|definitionBuilder
operator|.
name|getNodeState
argument_list|()
else|:
name|definitionBuilder
operator|.
name|getBaseState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|IndexDefinition
operator|.
name|isDisableStoredIndexDefinition
argument_list|()
condition|)
block|{
name|definitionBuilder
operator|.
name|setChildNode
argument_list|(
name|INDEX_DEFINITION_NODE
argument_list|,
name|NodeStateCloner
operator|.
name|cloneVisibleState
argument_list|(
name|defnState
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|uid
init|=
name|configureUniqueId
argument_list|(
name|definitionBuilder
argument_list|)
decl_stmt|;
comment|//Refresh the index definition based on update builder state
return|return
name|IndexDefinition
operator|.
name|newBuilder
argument_list|(
name|root
argument_list|,
name|defnState
argument_list|,
name|indexPath
argument_list|)
operator|.
name|version
argument_list|(
name|version
argument_list|)
operator|.
name|uid
argument_list|(
name|uid
argument_list|)
operator|.
name|reindex
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

