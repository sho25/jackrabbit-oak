begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|ImmutableACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|PrincipalPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|NT_REP_PRINCIPAL_ENTRY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_EFFECTIVE_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_PRINCIPAL_POLICY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests for PrincipalBasedAccessControlManager where the editing session (based on a regular user with default  * permission evaluation) lacks permissions to read/modify access control on the target system-principal.  */
end_comment

begin_class
specifier|public
class|class
name|AccessControlManagerLimitedUserTest
extends|extends
name|AbstractPrincipalBasedTest
implements|implements
name|PrivilegeConstants
block|{
name|Principal
name|systemPrincipal
decl_stmt|;
name|String
name|systemPrincipalPath
decl_stmt|;
name|Principal
name|testPrincipal
decl_stmt|;
name|Root
name|testRoot
decl_stmt|;
name|JackrabbitAccessControlManager
name|testAcMgr
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|User
name|systemUser
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|systemPrincipalPath
operator|=
name|systemUser
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|systemPrincipal
operator|=
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
name|testPrincipal
operator|=
name|createTestPrincipal
argument_list|()
expr_stmt|;
name|setupContentTrees
argument_list|(
name|TEST_OAK_PATH
argument_list|)
expr_stmt|;
comment|// grant test-user full read access (but not read-access control!)
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
comment|// trigger creation of principal policy with testPrincipal with 2 random entries
name|PrincipalPolicyImpl
name|policy
init|=
name|setupPrincipalBasedAccessControl
argument_list|(
name|systemPrincipal
argument_list|,
name|testContentJcrPath
argument_list|,
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|)
decl_stmt|;
name|addPrincipalBasedEntry
argument_list|(
name|policy
argument_list|,
literal|null
argument_list|,
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|=
name|createTestRoot
argument_list|()
expr_stmt|;
name|testAcMgr
operator|=
name|createAccessControlManager
argument_list|(
name|testRoot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|testRoot
operator|!=
literal|null
condition|)
block|{
name|testRoot
operator|.
name|getContentSession
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
name|Principal
name|createTestPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
return|;
block|}
name|Root
name|createTestRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|testUser
init|=
name|getTestUser
argument_list|()
decl_stmt|;
return|return
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|,
name|testUser
operator|.
name|getID
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getLatestRoot
argument_list|()
return|;
block|}
name|void
name|grant
parameter_list|(
annotation|@
name|NotNull
name|Principal
name|principal
parameter_list|,
annotation|@
name|Nullable
name|String
name|path
parameter_list|,
annotation|@
name|NotNull
name|String
modifier|...
name|privNames
parameter_list|)
throws|throws
name|Exception
block|{
name|addDefaultEntry
argument_list|(
name|path
argument_list|,
name|principal
argument_list|,
name|privNames
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertEmptyPolicies
parameter_list|(
annotation|@
name|NotNull
name|AccessControlPolicy
index|[]
name|policies
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertPolicies
parameter_list|(
annotation|@
name|NotNull
name|AccessControlPolicy
index|[]
name|policies
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|JackrabbitAccessControlList
argument_list|>
name|expectedClass
parameter_list|,
name|int
name|expectedSize
parameter_list|,
name|int
name|expectedEntrySize
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedSize
operator|>
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|expectedClass
operator|.
name|isAssignableFrom
argument_list|(
name|policies
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedEntrySize
argument_list|,
operator|(
operator|(
name|JackrabbitAccessControlList
operator|)
name|policies
index|[
literal|0
index|]
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertEntry
parameter_list|(
annotation|@
name|NotNull
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
name|entry
parameter_list|,
annotation|@
name|Nullable
name|String
name|effectivePath
parameter_list|,
annotation|@
name|NotNull
name|PrivilegeBits
name|expectedBits
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedBits
argument_list|,
name|entry
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|effectivePath
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|entry
operator|.
name|getEffectivePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|effectivePath
argument_list|,
name|entry
operator|.
name|getEffectivePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|NotNull
specifier|private
name|String
name|getPolicyPath
parameter_list|()
throws|throws
name|Exception
block|{
name|JackrabbitAccessControlPolicy
index|[]
name|policies
init|=
name|createAccessControlManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPolicies
argument_list|(
name|systemPrincipal
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|PathUtils
operator|.
name|concat
argument_list|(
operator|(
operator|(
name|PrincipalPolicyImpl
operator|)
name|policies
index|[
literal|0
index|]
operator|)
operator|.
name|getOakPath
argument_list|()
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|String
name|getEntryPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|policyTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|getPolicyPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|policyTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|policyTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|Utils
operator|.
name|isPrincipalEntry
argument_list|(
name|child
argument_list|)
condition|)
block|{
return|return
name|child
operator|.
name|getPath
argument_list|()
return|;
block|}
block|}
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"unable to locate policy entry"
argument_list|)
throw|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetApplicableByPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|testAcMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|testJcrPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetPoliciesByPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|testJcrPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetEffectiveByPathNoAccess
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|testJcrPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetEffectiveByNullPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetEffectiveByRooyPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetEffectiveByPathReadAccessControlOnPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant testuser read-access control on testPrincipal-path but NOT on effective paths null and /oak:content
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// since default permission evaluation is in charge for 'testUser' -> access to full principal policy is now
comment|// granted
name|AccessControlPolicy
index|[]
name|effective
init|=
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
operator|(
name|String
operator|)
name|testJcrPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|effective
index|[
literal|0
index|]
operator|instanceof
name|PrincipalPolicyImpl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectiveByPathMissingReadAccessControlOnPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test-user: granted read-access-control on effective null-path
name|grant
argument_list|(
name|testPrincipal
argument_list|,
literal|null
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
comment|// test-user: granted read-access-control on effective /oak:content
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|testJcrPath
argument_list|,
literal|3
argument_list|)
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertEmptyPolicies
argument_list|(
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEmptyPolicies
argument_list|(
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|testJcrPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetApplicableByPrincipalNoAccess
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|testAcMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|systemPrincipal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetPoliciesByPrincipalNoAccess
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|systemPrincipal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetEffectiveByPrincipalNoAccess
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|systemPrincipal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPoliciesByPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant testuser read-access control on testPrincipal-path but NOT on effective paths null and /oak:content
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// no read-ac permission on effective paths
name|assertPolicies
argument_list|(
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|systemPrincipal
argument_list|)
argument_list|,
name|PrincipalPolicyImpl
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// grant testuser read-access control on /oak:content
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|testContentJcrPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertPolicies
argument_list|(
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|systemPrincipal
argument_list|)
argument_list|,
name|PrincipalPolicyImpl
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// additionally grant testuser read-access control on null
name|grant
argument_list|(
name|testPrincipal
argument_list|,
literal|null
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertPolicies
argument_list|(
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|systemPrincipal
argument_list|)
argument_list|,
name|PrincipalPolicyImpl
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectiveByPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant testuser read-access control on testPrincipal-path but NOT on effective paths null and /oak:content
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// read-access-control is only granted for the principalpolicy itself
name|assertPolicies
argument_list|(
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|systemPrincipal
argument_list|)
argument_list|)
argument_list|,
name|ImmutableACL
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// grant testuser read-access control on /oak:content
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|testContentJcrPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertPolicies
argument_list|(
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|systemPrincipal
argument_list|)
argument_list|)
argument_list|,
name|ImmutableACL
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// additionally grant testuser read-access control on null
name|grant
argument_list|(
name|testPrincipal
argument_list|,
literal|null
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertPolicies
argument_list|(
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|systemPrincipal
argument_list|)
argument_list|)
argument_list|,
name|ImmutableACL
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSetPolicyMissingModifyAccessControlOnPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|PrincipalPolicyImpl
name|policy
init|=
operator|(
name|PrincipalPolicyImpl
operator|)
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|systemPrincipal
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
literal|null
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_WORKSPACE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|testAcMgr
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSetPolicyMissingModifyAccessControlOnEffectivePath
parameter_list|()
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|PrincipalPolicyImpl
name|policy
init|=
operator|(
name|PrincipalPolicyImpl
operator|)
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|systemPrincipal
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
literal|null
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_WORKSPACE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|testAcMgr
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSetPolicyMissingModifyAccessControlOnEffectivePath2
parameter_list|()
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|testContentJcrPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|PrincipalPolicyImpl
name|policy
init|=
operator|(
name|PrincipalPolicyImpl
operator|)
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|systemPrincipal
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
literal|null
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_WORKSPACE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|testAcMgr
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|testContentJcrPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|testPrincipal
argument_list|,
literal|null
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|PrincipalPolicyImpl
name|policy
init|=
operator|(
name|PrincipalPolicyImpl
operator|)
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|systemPrincipal
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
literal|null
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_WORKSPACE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|testAcMgr
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemovePolicyMissingModifyAccessControlOnPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|PrincipalPolicyImpl
name|policy
init|=
operator|(
name|PrincipalPolicyImpl
operator|)
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|systemPrincipal
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|testAcMgr
operator|.
name|removePolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemovePolicyMissingModifyAccessControlOnEffectivePath
parameter_list|()
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|PrincipalPolicyImpl
name|policy
init|=
operator|(
name|PrincipalPolicyImpl
operator|)
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|systemPrincipal
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|testAcMgr
operator|.
name|removePolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemovePolicyMissingModifyAccessControlOnEffectivePath2
parameter_list|()
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|testContentJcrPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|PrincipalPolicyImpl
name|policy
init|=
operator|(
name|PrincipalPolicyImpl
operator|)
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|systemPrincipal
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|testAcMgr
operator|.
name|removePolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|testPrincipal
argument_list|,
literal|null
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|testContentJcrPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|PrincipalPolicyImpl
name|policy
init|=
operator|(
name|PrincipalPolicyImpl
operator|)
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|systemPrincipal
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|testAcMgr
operator|.
name|removePolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePolicyWithNonEntryChild
parameter_list|()
throws|throws
name|Exception
block|{
comment|// clear all entries from policy
name|PrincipalPolicyImpl
name|policy
init|=
name|getPrincipalPolicyImpl
argument_list|(
name|systemPrincipal
argument_list|,
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|AccessControlEntry
name|entry
range|:
name|policy
operator|.
name|getAccessControlEntries
argument_list|()
control|)
block|{
name|policy
operator|.
name|removeAccessControlEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
comment|// grant permission to read/modify policy
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// transiently add non-entry tree
name|Tree
name|policyTree
init|=
name|testRoot
operator|.
name|getTree
argument_list|(
name|getPolicyPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|policyTree
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|policyTree
argument_list|,
literal|"nonEntry"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|policy
operator|=
name|getPrincipalPolicyImpl
argument_list|(
name|systemPrincipal
argument_list|,
name|testAcMgr
argument_list|)
expr_stmt|;
name|testAcMgr
operator|.
name|removePolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemovePolicyMissingEffectivePaths
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant permission to read/modify policy
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// first read policy
name|PrincipalPolicyImpl
name|policy
init|=
name|getPrincipalPolicyImpl
argument_list|(
name|systemPrincipal
argument_list|,
name|testAcMgr
argument_list|)
decl_stmt|;
comment|// transiently remove rep:effectivePath properties from all entries.
name|Tree
name|policyTree
init|=
name|testRoot
operator|.
name|getTree
argument_list|(
name|getPolicyPath
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|policyTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|child
operator|.
name|removeProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|)
expr_stmt|;
block|}
comment|// removing policy must fail, because effective paths cannot be evaluated
name|testAcMgr
operator|.
name|removePolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testHasPrivilegeSystemUser
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test session has no access
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|testContentJcrPath
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|systemPrincipal
argument_list|)
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testHasPrivilegeSystemUserWithPartialReadAc
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant read-ac access on principal policy (but not on targetPath)
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|testContentJcrPath
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|systemPrincipal
argument_list|)
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegeSystemUserWithPartialReadAc2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant read-ac access on effective path -> no entries accessible
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|testContentJcrPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|testContentJcrPath
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|systemPrincipal
argument_list|)
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegeSystemUserWithReadAc
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant read-ac access on effective path and on principal policy
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|testContentJcrPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// default model lacks jcr:nodeTypeManagement privilege -> not granted
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|testContentJcrPath
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|systemPrincipal
argument_list|)
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|addDefaultEntry
argument_list|(
name|testContentJcrPath
argument_list|,
name|systemPrincipal
argument_list|,
name|JCR_READ
argument_list|,
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// once default model grants permissions as well -> granted
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|testContentJcrPath
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|systemPrincipal
argument_list|)
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// but combination read/nt-mgt is not granted because jcr:read is missing on principal-based setup.
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|testContentJcrPath
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|systemPrincipal
argument_list|)
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetPrivilegeSystemUser
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test session has no access
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|systemPrincipal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetPrivilegeSystemUserWithPartialReadAc
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant read ac on principal policy but not on target path
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|systemPrincipal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegeSystemUserWithPartialReadAc2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant read-ac access on target path (but not on principal policy)
name|grant
argument_list|(
name|testPrincipal
argument_list|,
literal|null
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|systemPrincipal
argument_list|)
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegeSystemUserWithWithReadAc
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant read-ac access on effective path and on principal policy
name|grant
argument_list|(
name|testPrincipal
argument_list|,
literal|null
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// default model lacks jcr:nodeTypeManagement privilege -> not granted
name|assertArrayEquals
argument_list|(
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|,
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|systemPrincipal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|addDefaultEntry
argument_list|(
literal|null
argument_list|,
name|systemPrincipal
argument_list|,
name|JCR_NAMESPACE_MANAGEMENT
argument_list|,
name|REP_PRIVILEGE_MANAGEMENT
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// once default model grants namespace-mgt privilege as well -> granted
comment|// but not rep:privilegeMgt because the principal-based model doesn't grant that one
name|assertArrayEquals
argument_list|(
name|privilegesFromNames
argument_list|(
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
argument_list|,
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|systemPrincipal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadPolicyTree
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|policyTree
init|=
name|testRoot
operator|.
name|getTree
argument_list|(
name|getPolicyPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policyTree
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|policyTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadPolicyTreeWithReadAc
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant read-ac access and check again
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|policyTree
init|=
name|testRoot
operator|.
name|getTree
argument_list|(
name|getPolicyPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policyTree
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policyTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadEntryTree
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|entryTree
init|=
name|testRoot
operator|.
name|getTree
argument_list|(
name|getEntryPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|entryTree
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entryTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadEntryTreeWithReadAc
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant read-ac access and check again
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|entryTree
init|=
name|testRoot
operator|.
name|getTree
argument_list|(
name|getEntryPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|entryTree
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entryTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddEntryTree
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant read-ac access on principal policy
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
try|try
block|{
name|Tree
name|policyTree
init|=
name|testRoot
operator|.
name|getTree
argument_list|(
name|getPolicyPath
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|entry
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|policyTree
argument_list|,
literal|"entry"
argument_list|,
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|,
name|TEST_OAK_PATH
argument_list|,
name|Type
operator|.
name|PATH
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|REP_PRIVILEGES
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|CommitFailedException
operator|.
name|ACCESS
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddEntryTreeModAcOnSystemPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant read-ac + mod-ac access on principal policy
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
try|try
block|{
name|Tree
name|policyTree
init|=
name|testRoot
operator|.
name|getTree
argument_list|(
name|getPolicyPath
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|entry
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|policyTree
argument_list|,
literal|"entry"
argument_list|,
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|,
name|TEST_OAK_PATH
argument_list|,
name|Type
operator|.
name|PATH
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|REP_PRIVILEGES
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|CommitFailedException
operator|.
name|ACCESS
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddEntryTreeModAcOnEffectivePath
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant read-ac + mod-ac access on effective path only -> cannot read principal policy
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|testJcrPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|policyTree
init|=
name|testRoot
operator|.
name|getTree
argument_list|(
name|getPolicyPath
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|entry
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|policyTree
argument_list|,
literal|"entry"
argument_list|,
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntryTreeFullModAc
parameter_list|()
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|testJcrPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|policyTree
init|=
name|testRoot
operator|.
name|getTree
argument_list|(
name|getPolicyPath
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|entry
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|policyTree
argument_list|,
literal|"entry"
argument_list|,
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|,
name|TEST_OAK_PATH
argument_list|,
name|Type
operator|.
name|PATH
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|REP_PRIVILEGES
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemovePolicyTree
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant read-ac access on principal policy
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
try|try
block|{
name|testRoot
operator|.
name|getTree
argument_list|(
name|getPolicyPath
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|CommitFailedException
operator|.
name|ACCESS
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemovePolicyTreeWithModAcOnSystemPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant read-ac + mod-ac access on principal policy but not on target paths
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
try|try
block|{
name|testRoot
operator|.
name|getTree
argument_list|(
name|getPolicyPath
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|CommitFailedException
operator|.
name|ACCESS
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemovePolicyTreeWithModAcOnOneEffectivePath
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant read-ac + mod-ac access on principal policy and on testcontent target paths (but not on null path)
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|testContentJcrPath
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
try|try
block|{
name|testRoot
operator|.
name|getTree
argument_list|(
name|getPolicyPath
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|CommitFailedException
operator|.
name|ACCESS
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemovePolicyTreeWithModAcOnOneEffectivePath2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant read-ac + mod-ac access on principal policy and on nul target paths (but not on testcontent path)
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|testPrincipal
argument_list|,
literal|null
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
try|try
block|{
name|testRoot
operator|.
name|getTree
argument_list|(
name|getPolicyPath
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|CommitFailedException
operator|.
name|ACCESS
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemoveEmptyPolicyTree
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPolicy
name|policy
init|=
name|getPrincipalPolicyImpl
argument_list|(
name|systemPrincipal
argument_list|,
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|AccessControlEntry
name|entry
range|:
operator|(
operator|(
name|PrincipalPolicyImpl
operator|)
name|policy
operator|)
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|policy
operator|.
name|removeAccessControlEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
comment|// grant permission to read policy
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|policyTree
init|=
name|testRoot
operator|.
name|getTree
argument_list|(
name|getPolicyPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|policyTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|policyTree
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemoveEntryTree
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant read-ac access on principal policy
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
try|try
block|{
name|testRoot
operator|.
name|getTree
argument_list|(
name|getEntryPath
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|CommitFailedException
operator|.
name|ACCESS
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemoveEntryTreeModAcOnSystemPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant read-ac + mod-ac access on principal policy but not on target path
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
try|try
block|{
name|testRoot
operator|.
name|getTree
argument_list|(
name|getEntryPath
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|CommitFailedException
operator|.
name|ACCESS
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemoveEntryTreeModAcOnEffectivePath
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant read-ac on principal policy but not mod-ac
comment|// on target path grant mod-ac
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|testContentJcrPath
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
try|try
block|{
name|testRoot
operator|.
name|getTree
argument_list|(
name|getEntryPath
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|CommitFailedException
operator|.
name|ACCESS
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveEntryTreeFullModAc
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant read-ac and mod-ac on principal policy
comment|// on target path grant mod-ac
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|systemPrincipalPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|testPrincipal
argument_list|,
name|testContentJcrPath
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|getTree
argument_list|(
name|getEntryPath
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

