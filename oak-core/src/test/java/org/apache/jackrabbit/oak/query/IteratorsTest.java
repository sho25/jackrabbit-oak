begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryEngineSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Tests the filtering iterators.  */
end_comment

begin_class
specifier|public
class|class
name|IteratorsTest
block|{
specifier|private
name|QueryEngineSettings
name|settings
init|=
operator|new
name|QueryEngineSettings
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Integer
argument_list|>
name|INT_COMP
init|=
operator|new
name|Comparator
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Integer
name|o1
parameter_list|,
name|Integer
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|distinct
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newDistinct
argument_list|(
name|it
argument_list|()
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newDistinct
argument_list|(
name|it
argument_list|(
literal|1
argument_list|)
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1, 2"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newDistinct
argument_list|(
name|it
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1, 2, 3"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newDistinct
argument_list|(
name|it
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|limit
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newLimit
argument_list|(
name|it
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newLimit
argument_list|(
name|it
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newLimit
argument_list|(
name|it
argument_list|()
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newLimit
argument_list|(
name|it
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newLimit
argument_list|(
name|it
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newLimit
argument_list|(
name|it
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newLimit
argument_list|(
name|it
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newLimit
argument_list|(
name|it
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1, 2"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newLimit
argument_list|(
name|it
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newLimit
argument_list|(
name|it
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1, 2"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newLimit
argument_list|(
name|it
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1, 2, 3"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newLimit
argument_list|(
name|it
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1, 2, 3"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newLimit
argument_list|(
name|it
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|offset
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newOffset
argument_list|(
name|it
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newOffset
argument_list|(
name|it
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1, 2"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newOffset
argument_list|(
name|it
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newOffset
argument_list|(
name|it
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newOffset
argument_list|(
name|it
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newOffset
argument_list|(
name|it
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newOffset
argument_list|(
name|it
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newOffset
argument_list|(
name|it
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2, 3"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newOffset
argument_list|(
name|it
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sort
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newSort
argument_list|(
name|it
argument_list|(
operator|new
name|Integer
index|[]
block|{}
argument_list|)
argument_list|,
name|INT_COMP
argument_list|,
literal|0
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newSort
argument_list|(
name|it
argument_list|(
literal|1
argument_list|)
argument_list|,
name|INT_COMP
argument_list|,
literal|0
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newSort
argument_list|(
name|it
argument_list|(
literal|1
argument_list|)
argument_list|,
name|INT_COMP
argument_list|,
literal|1
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newSort
argument_list|(
name|it
argument_list|(
literal|1
argument_list|)
argument_list|,
name|INT_COMP
argument_list|,
literal|2
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newSort
argument_list|(
name|it
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|INT_COMP
argument_list|,
literal|1
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newSort
argument_list|(
name|it
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|INT_COMP
argument_list|,
literal|1
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1, 2"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newSort
argument_list|(
name|it
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|INT_COMP
argument_list|,
literal|2
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1, 2"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newSort
argument_list|(
name|it
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|INT_COMP
argument_list|,
literal|2
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1, 1, 2"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newSort
argument_list|(
name|it
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|INT_COMP
argument_list|,
literal|3
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortCompareCalls
parameter_list|()
block|{
name|sortCompareCalls
argument_list|(
literal|10000
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sortCompareCalls
argument_list|(
literal|10000
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|sortCompareCalls
argument_list|(
literal|10000
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|sortCompareCalls
argument_list|(
literal|10000
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|sortCompareCalls
argument_list|(
literal|10000
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|sortCompareCalls
argument_list|(
literal|10000
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|sortCompareCalls
argument_list|(
literal|10000
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
name|sortCompareCalls
argument_list|(
literal|10000
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
name|sortCompareCalls
argument_list|(
literal|10000
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|sortCompareCalls
parameter_list|(
name|int
name|count
parameter_list|,
name|int
name|keep
parameter_list|)
block|{
name|int
name|len
init|=
literal|1000
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Integer
index|[]
name|list
init|=
operator|new
name|Integer
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|list
index|[
name|i
index|]
operator|=
name|r
operator|.
name|nextInt
argument_list|()
expr_stmt|;
block|}
specifier|final
name|AtomicInteger
name|compareCalls
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|Comparator
argument_list|<
name|Integer
argument_list|>
name|comp
init|=
operator|new
name|Comparator
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Integer
name|o1
parameter_list|,
name|Integer
name|o2
parameter_list|)
block|{
name|compareCalls
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|it
init|=
name|FilterIterators
operator|.
name|newSort
argument_list|(
name|it
argument_list|(
name|list
argument_list|)
argument_list|,
name|comp
argument_list|,
name|keep
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|int
name|old
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|x
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|x
operator|>=
name|old
argument_list|)
expr_stmt|;
name|old
operator|=
name|x
expr_stmt|;
block|}
comment|// n * log2(n)
name|int
name|maxCompAll
init|=
call|(
name|int
call|)
argument_list|(
name|len
operator|*
name|Math
operator|.
name|log
argument_list|(
name|len
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|maxCompKeep
init|=
call|(
name|int
call|)
argument_list|(
name|len
operator|*
name|Math
operator|.
name|log
argument_list|(
literal|3.0
operator|*
name|keep
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|maxComp
init|=
name|Math
operator|.
name|min
argument_list|(
name|maxCompAll
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|maxCompKeep
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|compareCalls
operator|.
name|get
argument_list|()
operator|<=
name|maxComp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|combined
parameter_list|()
block|{
comment|// no filtering
name|assertEquals
argument_list|(
literal|"3, 3, 2, 1"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newCombinedFilter
argument_list|(
name|it
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// distinct
name|assertEquals
argument_list|(
literal|"3, 2, 1"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newCombinedFilter
argument_list|(
name|it
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// order by
name|assertEquals
argument_list|(
literal|"1, 2, 3, 3"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newCombinedFilter
argument_list|(
name|it
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|0
argument_list|,
name|INT_COMP
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// distinct& order by
name|assertEquals
argument_list|(
literal|"1, 2, 3"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newCombinedFilter
argument_list|(
name|it
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|0
argument_list|,
name|INT_COMP
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// limit
name|assertEquals
argument_list|(
literal|"3, 3"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newCombinedFilter
argument_list|(
name|it
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// offset
name|assertEquals
argument_list|(
literal|"3, 2, 1"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newCombinedFilter
argument_list|(
name|it
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// limit& offset
name|assertEquals
argument_list|(
literal|"3, 2"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newCombinedFilter
argument_list|(
name|it
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// distinct& limit& offset
name|assertEquals
argument_list|(
literal|"2, 1"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newCombinedFilter
argument_list|(
name|it
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// distinct& limit& offset& order by
name|assertEquals
argument_list|(
literal|"2, 3"
argument_list|,
name|toString
argument_list|(
name|FilterIterators
operator|.
name|newCombinedFilter
argument_list|(
name|it
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
name|INT_COMP
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|>
name|Iterator
argument_list|<
name|K
argument_list|>
name|it
parameter_list|(
name|K
modifier|...
name|x
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|x
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|>
name|String
name|toString
parameter_list|(
name|Iterator
argument_list|<
name|K
argument_list|>
name|it
parameter_list|)
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|buff
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
comment|// expected
block|}
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

