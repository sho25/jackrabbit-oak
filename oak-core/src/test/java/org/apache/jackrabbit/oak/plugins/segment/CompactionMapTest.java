begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|get
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|io
operator|.
name|File
operator|.
name|createTempFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|CompactionMap
operator|.
name|sum
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|TestUtils
operator|.
name|randomRecordIdMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|CompactionMapTest
block|{
specifier|private
specifier|final
name|FileStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|referenceMap1
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|referenceMap2
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|referenceMap3
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|referenceMap
init|=
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|PartialCompactionMap
name|compactionMap1
decl_stmt|;
specifier|private
specifier|final
name|PartialCompactionMap
name|compactionMap2
decl_stmt|;
specifier|private
specifier|final
name|PartialCompactionMap
name|compactionMap3
decl_stmt|;
specifier|private
specifier|final
name|CompactionMap
name|compactionMap
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
specifier|public
specifier|static
name|List
argument_list|<
name|Boolean
index|[]
argument_list|>
name|fixtures
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|Boolean
index|[]
block|{
literal|true
block|}
argument_list|,
operator|new
name|Boolean
index|[]
block|{
literal|false
block|}
argument_list|)
return|;
block|}
specifier|private
name|PartialCompactionMap
name|createCompactionMap
parameter_list|(
name|boolean
name|persisted
parameter_list|)
block|{
if|if
condition|(
name|persisted
condition|)
block|{
return|return
operator|new
name|PersistedCompactionMap
argument_list|(
name|store
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|InMemoryCompactionMap
argument_list|(
name|store
operator|.
name|getTracker
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Nonnull
specifier|private
specifier|static
name|File
name|mkDir
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|directory
init|=
name|createTempFile
argument_list|(
name|CompactionMapTest
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|"dir"
argument_list|,
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
name|directory
operator|.
name|delete
argument_list|()
expr_stmt|;
name|directory
operator|.
name|mkdir
argument_list|()
expr_stmt|;
return|return
name|directory
return|;
block|}
specifier|public
name|CompactionMapTest
parameter_list|(
name|boolean
name|usePersistedMap
parameter_list|)
throws|throws
name|IOException
block|{
name|store
operator|=
name|FileStore
operator|.
name|newFileStore
argument_list|(
name|mkDir
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|compactionMap1
operator|=
name|createCompactionMap
argument_list|(
name|usePersistedMap
argument_list|)
expr_stmt|;
name|referenceMap1
operator|=
name|randomRecordIdMap
argument_list|(
name|rnd
argument_list|,
name|store
operator|.
name|getTracker
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|compactionMap1
argument_list|,
name|referenceMap1
argument_list|)
expr_stmt|;
name|referenceMap
operator|.
name|putAll
argument_list|(
name|referenceMap1
argument_list|)
expr_stmt|;
name|compactionMap2
operator|=
name|createCompactionMap
argument_list|(
name|usePersistedMap
argument_list|)
expr_stmt|;
name|referenceMap2
operator|=
name|randomRecordIdMap
argument_list|(
name|rnd
argument_list|,
name|store
operator|.
name|getTracker
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|compactionMap2
argument_list|,
name|referenceMap2
argument_list|)
expr_stmt|;
name|referenceMap
operator|.
name|putAll
argument_list|(
name|referenceMap2
argument_list|)
expr_stmt|;
name|compactionMap3
operator|=
name|createCompactionMap
argument_list|(
name|usePersistedMap
argument_list|)
expr_stmt|;
name|referenceMap3
operator|=
name|randomRecordIdMap
argument_list|(
name|rnd
argument_list|,
name|store
operator|.
name|getTracker
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|compactionMap3
argument_list|,
name|referenceMap3
argument_list|)
expr_stmt|;
name|referenceMap
operator|.
name|putAll
argument_list|(
name|referenceMap3
argument_list|)
expr_stmt|;
name|this
operator|.
name|compactionMap
operator|=
name|CompactionMap
operator|.
name|EMPTY
operator|.
name|cons
argument_list|(
name|compactionMap3
argument_list|)
operator|.
name|cons
argument_list|(
name|compactionMap2
argument_list|)
operator|.
name|cons
argument_list|(
name|compactionMap1
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|putAll
parameter_list|(
name|PartialCompactionMap
name|map1
parameter_list|,
name|Map
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|recordIdRecordIdMap
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|tuple
range|:
name|recordIdRecordIdMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|map1
operator|.
name|put
argument_list|(
name|tuple
operator|.
name|getKey
argument_list|()
argument_list|,
name|tuple
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkExistingKeys
parameter_list|()
block|{
for|for
control|(
name|Entry
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|reference
range|:
name|referenceMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|reference
operator|.
name|getValue
argument_list|()
argument_list|,
name|compactionMap
operator|.
name|get
argument_list|(
operator|(
name|reference
operator|.
name|getKey
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkNonExistingKeys
parameter_list|()
block|{
for|for
control|(
name|RecordId
name|keys
range|:
name|randomRecordIdMap
argument_list|(
name|rnd
argument_list|,
name|store
operator|.
name|getTracker
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|referenceMap
operator|.
name|containsKey
argument_list|(
name|keys
argument_list|)
condition|)
block|{
name|assertNull
argument_list|(
name|compactionMap
operator|.
name|get
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeSome
parameter_list|()
block|{
name|Set
argument_list|<
name|UUID
argument_list|>
name|removedUUIDs
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|1
operator|+
name|rnd
operator|.
name|nextInt
argument_list|(
name|referenceMap
operator|.
name|size
argument_list|()
argument_list|)
condition|;
name|k
operator|++
control|)
block|{
name|RecordId
name|key
init|=
name|get
argument_list|(
name|referenceMap
operator|.
name|keySet
argument_list|()
argument_list|,
name|rnd
operator|.
name|nextInt
argument_list|(
name|referenceMap
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|removedUUIDs
operator|.
name|add
argument_list|(
name|key
operator|.
name|asUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|compactionMap
operator|.
name|remove
argument_list|(
name|removedUUIDs
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|reference
range|:
name|referenceMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RecordId
name|key
init|=
name|reference
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|removedUUIDs
operator|.
name|contains
argument_list|(
name|key
operator|.
name|asUUID
argument_list|()
argument_list|)
condition|)
block|{
name|assertNull
argument_list|(
name|compactionMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|reference
operator|.
name|getValue
argument_list|()
argument_list|,
name|compactionMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|long
name|countUUIDs
parameter_list|(
name|Set
argument_list|<
name|RecordId
argument_list|>
name|recordIds
parameter_list|)
block|{
name|Set
argument_list|<
name|UUID
argument_list|>
name|uuids
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|RecordId
name|recordId
range|:
name|recordIds
control|)
block|{
name|uuids
operator|.
name|add
argument_list|(
name|recordId
operator|.
name|asUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|uuids
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeGeneration
parameter_list|()
block|{
name|compactionMap1
operator|.
name|compress
argument_list|()
expr_stmt|;
name|compactionMap2
operator|.
name|compress
argument_list|()
expr_stmt|;
name|compactionMap3
operator|.
name|compress
argument_list|()
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|long
index|[]
block|{
literal|10
block|,
literal|10
block|,
literal|10
block|}
argument_list|,
name|compactionMap
operator|.
name|getSegmentCounts
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|long
index|[]
block|{
literal|100
block|,
literal|100
block|,
literal|100
block|}
argument_list|,
name|compactionMap
operator|.
name|getRecordCounts
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|expectedDepth
init|=
literal|3
decl_stmt|;
name|long
name|expectedSize
init|=
name|countUUIDs
argument_list|(
name|referenceMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedDepth
argument_list|,
name|compactionMap
operator|.
name|getDepth
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|sum
argument_list|(
name|compactionMap
operator|.
name|getSegmentCounts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|referenceMap
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|referenceMap2
argument_list|,
name|referenceMap1
argument_list|,
name|referenceMap3
argument_list|)
control|)
block|{
name|Set
argument_list|<
name|UUID
argument_list|>
name|removedUUIDs
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|RecordId
name|key
range|:
name|referenceMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|removedUUIDs
operator|.
name|add
argument_list|(
name|key
operator|.
name|asUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|compactionMap
operator|.
name|remove
argument_list|(
name|removedUUIDs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|--
name|expectedDepth
argument_list|,
name|compactionMap
operator|.
name|getDepth
argument_list|()
argument_list|)
expr_stmt|;
name|expectedSize
operator|-=
name|removedUUIDs
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|sum
argument_list|(
name|compactionMap
operator|.
name|getSegmentCounts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

