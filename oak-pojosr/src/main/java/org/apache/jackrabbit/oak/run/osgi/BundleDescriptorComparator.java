begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|de
operator|.
name|kalpatec
operator|.
name|pojosr
operator|.
name|framework
operator|.
name|launch
operator|.
name|BundleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * Comparator to simulate start level support of OSgi framework by ordering the startup  * sequence. This is required to ensure that required configured is provisioned with  * ConfigAdmin before the SCR bundle starts  */
end_comment

begin_class
class|class
name|BundleDescriptorComparator
implements|implements
name|Comparator
argument_list|<
name|BundleDescriptor
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|Integer
name|DEFAULT_START_LEVEL
init|=
literal|20
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|startLevels
decl_stmt|;
specifier|public
name|BundleDescriptorComparator
parameter_list|()
block|{
name|startLevels
operator|=
name|defaultStartLevels
argument_list|()
expr_stmt|;
block|}
specifier|public
name|BundleDescriptorComparator
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|startLevels
parameter_list|)
block|{
name|this
operator|.
name|startLevels
operator|=
name|startLevels
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|defaultStartLevels
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|defaultLevels
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|defaultLevels
operator|.
name|put
argument_list|(
literal|"org.apache.sling.commons.logservice"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|defaultLevels
operator|.
name|put
argument_list|(
literal|"org.apache.felix.configadmin"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|defaultLevels
operator|.
name|put
argument_list|(
literal|"org.apache.felix.fileinstall"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|defaultLevels
operator|.
name|put
argument_list|(
literal|"org.apache.felix.scr"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|defaultLevels
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|BundleDescriptor
name|o1
parameter_list|,
name|BundleDescriptor
name|o2
parameter_list|)
block|{
return|return
name|getStartLevel
argument_list|(
name|o1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|getStartLevel
argument_list|(
name|o2
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Integer
name|getStartLevel
parameter_list|(
name|BundleDescriptor
name|bd
parameter_list|)
block|{
name|String
name|symbolicName
init|=
name|bd
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BUNDLE_SYMBOLICNAME
argument_list|)
decl_stmt|;
name|Integer
name|level
init|=
name|startLevels
operator|.
name|get
argument_list|(
name|symbolicName
argument_list|)
decl_stmt|;
if|if
condition|(
name|level
operator|==
literal|null
condition|)
block|{
name|level
operator|=
name|DEFAULT_START_LEVEL
expr_stmt|;
block|}
return|return
name|level
return|;
block|}
block|}
end_class

end_unit

