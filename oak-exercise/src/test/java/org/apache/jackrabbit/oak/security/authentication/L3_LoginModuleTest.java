begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|GuestCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NoSuchWorkspaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Authentication  * =============================================================================  *  * Title: LoginModule  * -----------------------------------------------------------------------------  *  * Goal:  * Understand the role of {@link javax.security.auth.spi.LoginModule}s in the Oak  * authentication setup, the way multiple login modules can be configured (both  * in OSGi and Java based setups) and how they interact.  *  * Exercises:  *  * - Overview  *   Search the Oak code base for implementations of {@link javax.security.auth.spi.LoginModule}  *   and describe their behaviour|intention and the interactions they may have  *   when combined in a certain order.  *  * - {@link #testLogin()}  *   Learn how different login modules interact by modifing the JAAS setup.  *   In this test-scenario this can easily be achieved by overriding the  *   {@link #getConfiguration()} method.  *   Change the JAAS configuration and use the {@link #testLogin()} method to  *   walk through the login. For example  *> look at ConfigurationUtil for various options  *> manually create a different configuration with different control flags  *> create a configuration that also includes the {@link CustomLoginModule}  *   Discuss your findings  *  *  * Additional Exercises  * -----------------------------------------------------------------------------  *  * In an OSGi base setup like Sling (i.e. Granite|CQ) you can perform the  * following exercises to deepen your understanding of the {@code LoginModule}  * mechanism.  *  * - Instead of modifying the JAAS configuration in the Java code (or a jaas  *   configuration file) use the system console to change the order and control  *   flag of the various login modules.  *   Same as {@link #testLogin()} but with configuration changed in OSGi.  *  *  * Advanced Exercises  * -----------------------------------------------------------------------------  *  * Use the {@link org.apache.jackrabbit.oak.security.authentication.CustomLoginModule}  * stub to make advanced exercises wrt {@link javax.security.auth.spi.LoginModule}:  *  * - {@link #testCustomCredentialsLogin}  *   Adjust the JAAS configuration and complete the  *   {@link org.apache.jackrabbit.oak.security.authentication.CustomLoginModule}  *   such that the test passes; i.e. that you can perform a successful login with  *   {@link org.apache.jackrabbit.oak.security.authentication.CustomCredentials}.  *  *   Play with the {@link javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag}  *   in the configuration such that a successful login with the custom module succeeds.  *  *   Alternatively you could for example map the a given loginID to a particular  *   user in the repository and use the shared state of the login modules to pass  *   around credentials, login name etc.  *  *  * Related Exercises  * -----------------------------------------------------------------------------  *  * - {@link L8_PreAuthTest}  * - {@link L9_NullLoginTest}  *  *</pre>  *  * @see javax.security.auth.spi.LoginModule  * @see javax.security.auth.login.Configuration  */
end_comment

begin_class
specifier|public
class|class
name|L3_LoginModuleTest
extends|extends
name|AbstractSecurityTest
block|{
annotation|@
name|Override
specifier|protected
name|Configuration
name|getConfiguration
parameter_list|()
block|{
comment|// EXERCISE: modify the JAAS configuration
comment|// EXERCISE: - look at ConfigurationUtil for various options
comment|// EXERCISE: - manually create a different configuration with different control flags
comment|// EXERCISE: - create a configuration that also includes the {@link CustomLoginModule}
return|return
name|super
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogin
parameter_list|()
throws|throws
name|LoginException
throws|,
name|NoSuchWorkspaceException
throws|,
name|IOException
block|{
name|ContentSession
name|contentSession
init|=
name|login
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|)
decl_stmt|;
name|contentSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomCredentialsLogin
parameter_list|()
throws|throws
name|LoginException
throws|,
name|RepositoryException
throws|,
name|IOException
block|{
name|String
name|loginID
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|String
name|pw
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|ContentSession
name|contentSession
init|=
name|login
argument_list|(
operator|new
name|CustomCredentials
argument_list|(
name|loginID
argument_list|,
name|pw
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
argument_list|)
decl_stmt|;
comment|// EXERCISE: add verification of the AuthInfo according to your implementation of the custom login module.
name|contentSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

