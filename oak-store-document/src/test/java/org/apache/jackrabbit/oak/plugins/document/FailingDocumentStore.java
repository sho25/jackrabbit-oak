begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_comment
comment|/**  * Wraps a document store and can be instructed to fail operations.  */
end_comment

begin_class
class|class
name|FailingDocumentStore
extends|extends
name|DocumentStoreWrapper
block|{
specifier|private
specifier|final
name|Random
name|random
decl_stmt|;
specifier|private
specifier|volatile
name|double
name|p
decl_stmt|;
specifier|private
name|AtomicLong
name|failAfter
init|=
operator|new
name|AtomicLong
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|private
name|AtomicLong
name|numFailures
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
class|class
name|Fail
block|{
specifier|private
name|Fail
parameter_list|()
block|{
name|never
argument_list|()
expr_stmt|;
block|}
name|Fail
name|after
parameter_list|(
name|int
name|numOps
parameter_list|)
block|{
name|p
operator|=
operator|-
literal|1
expr_stmt|;
name|failAfter
operator|.
name|set
argument_list|(
name|numOps
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|void
name|never
parameter_list|()
block|{
name|p
operator|=
operator|-
literal|1
expr_stmt|;
name|numFailures
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|failAfter
operator|.
name|set
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
name|void
name|once
parameter_list|()
block|{
name|numFailures
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|void
name|eternally
parameter_list|()
block|{
name|numFailures
operator|.
name|set
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
name|Fail
name|randomly
parameter_list|(
name|double
name|probability
parameter_list|)
block|{
name|p
operator|=
name|probability
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
name|FailingDocumentStore
parameter_list|(
name|DocumentStore
name|store
parameter_list|,
name|long
name|seed
parameter_list|)
block|{
name|this
argument_list|(
name|store
argument_list|,
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|FailingDocumentStore
parameter_list|(
name|DocumentStore
name|store
parameter_list|)
block|{
name|this
argument_list|(
name|store
argument_list|,
operator|new
name|Random
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FailingDocumentStore
parameter_list|(
name|DocumentStore
name|store
parameter_list|,
name|Random
name|r
parameter_list|)
block|{
name|super
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|this
operator|.
name|random
operator|=
name|r
expr_stmt|;
block|}
name|Fail
name|fail
parameter_list|()
block|{
return|return
operator|new
name|Fail
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|void
name|remove
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|maybeFail
argument_list|()
expr_stmt|;
name|super
operator|.
name|remove
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|void
name|remove
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
comment|// redirect to single document remove method
for|for
control|(
name|String
name|k
range|:
name|keys
control|)
block|{
name|remove
argument_list|(
name|collection
argument_list|,
name|k
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|int
name|remove
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|UpdateOp
operator|.
name|Key
argument_list|,
name|UpdateOp
operator|.
name|Condition
argument_list|>
argument_list|>
name|toRemove
parameter_list|)
block|{
name|int
name|num
init|=
literal|0
decl_stmt|;
comment|// remove individually
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|UpdateOp
operator|.
name|Key
argument_list|,
name|UpdateOp
operator|.
name|Condition
argument_list|>
argument_list|>
name|rm
range|:
name|toRemove
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|maybeFail
argument_list|()
expr_stmt|;
name|num
operator|+=
name|super
operator|.
name|remove
argument_list|(
name|collection
argument_list|,
name|singletonMap
argument_list|(
name|rm
operator|.
name|getKey
argument_list|()
argument_list|,
name|rm
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|num
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|int
name|remove
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|indexedProperty
parameter_list|,
name|long
name|startValue
parameter_list|,
name|long
name|endValue
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
name|maybeFail
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|remove
argument_list|(
name|collection
argument_list|,
name|indexedProperty
argument_list|,
name|startValue
argument_list|,
name|endValue
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|boolean
name|create
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|updateOps
parameter_list|)
block|{
comment|// create individually
for|for
control|(
name|UpdateOp
name|op
range|:
name|updateOps
control|)
block|{
name|maybeFail
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|super
operator|.
name|create
argument_list|(
name|collection
argument_list|,
name|singletonList
argument_list|(
name|op
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|void
name|update
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|,
name|UpdateOp
name|updateOp
parameter_list|)
block|{
comment|// update individually
for|for
control|(
name|String
name|k
range|:
name|keys
control|)
block|{
name|maybeFail
argument_list|()
expr_stmt|;
name|super
operator|.
name|update
argument_list|(
name|collection
argument_list|,
name|singletonList
argument_list|(
name|k
argument_list|)
argument_list|,
name|updateOp
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|createOrUpdate
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|UpdateOp
name|update
parameter_list|)
block|{
name|maybeFail
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|createOrUpdate
argument_list|(
name|collection
argument_list|,
name|update
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|createOrUpdate
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|updateOps
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// redirect to single document createOrUpdate
for|for
control|(
name|UpdateOp
name|op
range|:
name|updateOps
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|createOrUpdate
argument_list|(
name|collection
argument_list|,
name|op
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|findAndUpdate
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|UpdateOp
name|update
parameter_list|)
block|{
name|maybeFail
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|findAndUpdate
argument_list|(
name|collection
argument_list|,
name|update
argument_list|)
return|;
block|}
specifier|private
name|void
name|maybeFail
parameter_list|()
block|{
if|if
condition|(
name|random
operator|.
name|nextFloat
argument_list|()
operator|<
name|p
operator|||
name|failAfter
operator|.
name|getAndDecrement
argument_list|()
operator|<=
literal|0
condition|)
block|{
if|if
condition|(
name|numFailures
operator|.
name|getAndDecrement
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"write operation failed"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

