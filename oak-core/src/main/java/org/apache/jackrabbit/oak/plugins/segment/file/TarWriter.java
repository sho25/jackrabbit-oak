begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkPositionIndexes
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|reverse
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newLinkedHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newTreeMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Segment
operator|.
name|REF_COUNT_OFFSET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentId
operator|.
name|isDataSegmentId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CRC32
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A writer for tar files. It is also used to read entries while the file is  * still open.  */
end_comment

begin_class
class|class
name|TarWriter
implements|implements
name|Closeable
block|{
comment|/** Logger instance */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TarWriter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Magic byte sequence at the end of the index block.      *<p>      *<ul>      *<li>For each segment in that file, an index entry that contains the UUID,      * the offset within the file and the size of the segment. Sorted by UUID,      * to allow using interpolation search.</li>      *<li>      * The index footer, which contains metadata of the index (the size,      * checksum).</li>      *</ul>      */
specifier|static
specifier|final
name|int
name|INDEX_MAGIC
init|=
operator|(
literal|'\n'
operator|<<
literal|24
operator|)
operator|+
operator|(
literal|'0'
operator|<<
literal|16
operator|)
operator|+
operator|(
literal|'K'
operator|<<
literal|8
operator|)
operator|+
literal|'\n'
decl_stmt|;
comment|/**      * Magic byte sequence at the end of the graph block.      *<p>      * The file is read from the end (the tar file is read from the end: the      * last entry is the index, then the graph). File format:      *<ul>      *<li>0 padding to make the footer end at a 512 byte boundary</li>      *<li>The list of UUIDs (segments included the graph; this includes      * segments in this tar file, and referenced segments in tar files with a      * lower sequence number). 16 bytes each.</li>      *<li>The graph data. The index of the source segment UUID (in the above      * list, 4 bytes), then the list of referenced segments (the indexes of      * those; 4 bytes each). Then the list is terminated by -1.</li>      *<li>The last part is the footer, which contains metadata of the graph      * (size, checksum, the number of UUIDs).</li>      *</ul>      *       */
specifier|static
specifier|final
name|int
name|GRAPH_MAGIC
init|=
operator|(
literal|'\n'
operator|<<
literal|24
operator|)
operator|+
operator|(
literal|'0'
operator|<<
literal|16
operator|)
operator|+
operator|(
literal|'G'
operator|<<
literal|8
operator|)
operator|+
literal|'\n'
decl_stmt|;
comment|/** The tar file block size. */
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|512
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ZERO_BYTES
init|=
operator|new
name|byte
index|[
name|BLOCK_SIZE
index|]
decl_stmt|;
specifier|static
specifier|final
name|int
name|getPaddingSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|int
name|remainder
init|=
name|size
operator|%
name|BLOCK_SIZE
decl_stmt|;
if|if
condition|(
name|remainder
operator|>
literal|0
condition|)
block|{
return|return
name|BLOCK_SIZE
operator|-
name|remainder
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
comment|/**      * The file being written. This instance is also used as an additional      * synchronization point by {@link #flush()} and {@link #close()} to      * allow {@link #flush()} to work concurrently with normal reads and      * writes, but not with a concurrent {@link #close()}.      */
specifier|private
specifier|final
name|File
name|file
decl_stmt|;
comment|/**      * File handle. Initialized lazily in      * {@link #writeEntry(long, long, byte[], int, int)} to avoid creating      * an extra empty file when just reading from the repository.      * Should only be accessed from synchronized code.      */
specifier|private
name|RandomAccessFile
name|access
init|=
literal|null
decl_stmt|;
specifier|private
name|FileChannel
name|channel
init|=
literal|null
decl_stmt|;
comment|/**      * Flag to indicate a closed writer. Accessing a closed writer is illegal.      * Should only be accessed from synchronized code.      */
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
comment|/**      * Map of the entries that have already been written. Used by the      * {@link #containsEntry(long, long)} and {@link #readEntry(long, long)}      * methods to retrieve data from this file while it's still being written,      * and finally by the {@link #close()} method to generate the tar index.      * The map is ordered in the order that entries have been written.      *<p>      * Should only be accessed from synchronized code.      */
specifier|private
specifier|final
name|Map
argument_list|<
name|UUID
argument_list|,
name|TarEntry
argument_list|>
name|index
init|=
name|newLinkedHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|UUID
argument_list|>
name|references
init|=
name|newHashSet
argument_list|()
decl_stmt|;
comment|/**      * Segment graph of the entries that have already been written.      */
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|graph
init|=
name|newTreeMap
argument_list|()
decl_stmt|;
name|TarWriter
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
comment|/**      * Returns the number of segments written so far to this tar file.      *      * @return number of segments written so far      */
specifier|synchronized
name|int
name|count
parameter_list|()
block|{
return|return
name|index
operator|.
name|size
argument_list|()
return|;
block|}
specifier|synchronized
name|Set
argument_list|<
name|UUID
argument_list|>
name|getUUIDs
parameter_list|()
block|{
return|return
name|newHashSet
argument_list|(
name|index
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
specifier|synchronized
name|boolean
name|containsEntry
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
block|{
name|checkState
argument_list|(
operator|!
name|closed
argument_list|)
expr_stmt|;
return|return
name|index
operator|.
name|containsKey
argument_list|(
operator|new
name|UUID
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * If the given segment is in this file, get the byte buffer that allows      * reading it.      *       * @param msb the most significant bits of the segment id      * @param lsb the least significant bits of the segment id      * @return the byte buffer, or null if not in this file      */
name|ByteBuffer
name|readEntry
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
throws|throws
name|IOException
block|{
name|checkState
argument_list|(
operator|!
name|closed
argument_list|)
expr_stmt|;
name|TarEntry
name|entry
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|entry
operator|=
name|index
operator|.
name|get
argument_list|(
operator|new
name|UUID
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|checkState
argument_list|(
name|channel
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// implied by entry != null
name|ByteBuffer
name|data
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|entry
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|channel
operator|.
name|read
argument_list|(
name|data
argument_list|,
name|entry
operator|.
name|offset
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|rewind
argument_list|()
expr_stmt|;
return|return
name|data
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
name|long
name|writeEntry
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|checkPositionIndexes
argument_list|(
name|offset
argument_list|,
name|offset
operator|+
name|size
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|UUID
name|uuid
init|=
operator|new
name|UUID
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
decl_stmt|;
name|CRC32
name|checksum
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|String
name|entryName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s.%08x"
argument_list|,
name|uuid
argument_list|,
name|checksum
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|header
init|=
name|newEntryHeader
argument_list|(
name|entryName
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Writing segment {} to {}"
argument_list|,
name|uuid
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
name|writeEntry
argument_list|(
name|uuid
argument_list|,
name|header
argument_list|,
name|data
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
return|;
block|}
specifier|private
specifier|synchronized
name|long
name|writeEntry
parameter_list|(
name|UUID
name|uuid
parameter_list|,
name|byte
index|[]
name|header
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|checkState
argument_list|(
operator|!
name|closed
argument_list|)
expr_stmt|;
if|if
condition|(
name|access
operator|==
literal|null
condition|)
block|{
name|access
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
name|channel
operator|=
name|access
operator|.
name|getChannel
argument_list|()
expr_stmt|;
block|}
name|access
operator|.
name|write
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|access
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|int
name|padding
init|=
name|getPaddingSize
argument_list|(
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|padding
operator|>
literal|0
condition|)
block|{
name|access
operator|.
name|write
argument_list|(
name|ZERO_BYTES
argument_list|,
literal|0
argument_list|,
name|padding
argument_list|)
expr_stmt|;
block|}
name|long
name|length
init|=
name|access
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|checkState
argument_list|(
name|length
operator|<=
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|TarEntry
name|entry
init|=
operator|new
name|TarEntry
argument_list|(
name|uuid
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|,
call|(
name|int
call|)
argument_list|(
name|length
operator|-
name|size
operator|-
name|padding
argument_list|)
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|index
operator|.
name|put
argument_list|(
name|uuid
argument_list|,
name|entry
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDataSegmentId
argument_list|(
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
condition|)
block|{
name|ByteBuffer
name|segment
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|segment
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|refcount
init|=
name|segment
operator|.
name|get
argument_list|(
name|pos
operator|+
name|REF_COUNT_OFFSET
argument_list|)
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
name|refcount
operator|!=
literal|0
condition|)
block|{
name|int
name|refend
init|=
name|pos
operator|+
literal|16
operator|*
operator|(
name|refcount
operator|+
literal|1
operator|)
decl_stmt|;
name|List
argument_list|<
name|UUID
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|refcount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|refpos
init|=
name|pos
operator|+
literal|16
init|;
name|refpos
operator|<
name|refend
condition|;
name|refpos
operator|+=
literal|16
control|)
block|{
name|UUID
name|refid
init|=
operator|new
name|UUID
argument_list|(
name|segment
operator|.
name|getLong
argument_list|(
name|refpos
argument_list|)
argument_list|,
name|segment
operator|.
name|getLong
argument_list|(
name|refpos
operator|+
literal|8
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|containsKey
argument_list|(
name|refid
argument_list|)
condition|)
block|{
name|references
operator|.
name|add
argument_list|(
name|refid
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|refid
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|graph
operator|.
name|put
argument_list|(
name|uuid
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|length
return|;
block|}
comment|/**      * Flushes the entries that have so far been written to the disk.      * This method is<em>not</em> synchronized to allow concurrent reads      * and writes to proceed while the file is being flushed. However,      * this method<em>is</em> carefully synchronized with {@link #close()}      * to prevent accidental flushing of an already closed file.      *      * @throws IOException if the tar file could not be flushed      */
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|file
init|)
block|{
name|FileDescriptor
name|descriptor
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|access
operator|!=
literal|null
operator|&&
operator|!
name|closed
condition|)
block|{
name|descriptor
operator|=
name|access
operator|.
name|getFD
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|descriptor
operator|!=
literal|null
condition|)
block|{
name|descriptor
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|isDirty
parameter_list|()
block|{
return|return
name|access
operator|!=
literal|null
return|;
block|}
comment|/**      * Closes this tar file.      *      * @throws IOException if the tar file could not be closed      */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Mark this writer as closed. Note that we only need to synchronize
comment|// this part, as no other synchronized methods should get invoked
comment|// once close() has been initiated (see related checkState calls).
synchronized|synchronized
init|(
name|this
init|)
block|{
name|checkState
argument_list|(
operator|!
name|closed
argument_list|)
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
comment|// If nothing was written to this file, then we're already done.
if|if
condition|(
name|access
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Complete the tar file by adding the graph, the index and the
comment|// trailing two zero blocks. This code is synchronized on the file
comment|// instance to  ensure that no concurrent thread is still flushing
comment|// the file when we close the file handle.
synchronized|synchronized
init|(
name|file
init|)
block|{
name|writeGraph
argument_list|()
expr_stmt|;
name|writeIndex
argument_list|()
expr_stmt|;
name|access
operator|.
name|write
argument_list|(
name|ZERO_BYTES
argument_list|)
expr_stmt|;
name|access
operator|.
name|write
argument_list|(
name|ZERO_BYTES
argument_list|)
expr_stmt|;
name|access
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeGraph
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|UUID
argument_list|>
name|uuids
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|index
operator|.
name|size
argument_list|()
operator|+
name|references
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|uuids
operator|.
name|addAll
argument_list|(
name|index
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|uuids
operator|.
name|addAll
argument_list|(
name|references
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|uuids
argument_list|)
expr_stmt|;
name|int
name|graphSize
init|=
name|uuids
operator|.
name|size
argument_list|()
operator|*
literal|16
operator|+
literal|16
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|UUID
argument_list|>
name|list
range|:
name|graph
operator|.
name|values
argument_list|()
control|)
block|{
name|graphSize
operator|+=
literal|4
operator|+
name|list
operator|.
name|size
argument_list|()
operator|*
literal|4
operator|+
literal|4
expr_stmt|;
block|}
name|int
name|padding
init|=
name|getPaddingSize
argument_list|(
name|graphSize
argument_list|)
decl_stmt|;
name|String
name|graphName
init|=
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|".gph"
decl_stmt|;
name|byte
index|[]
name|header
init|=
name|newEntryHeader
argument_list|(
name|graphName
argument_list|,
name|graphSize
operator|+
name|padding
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|graphSize
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|UUID
argument_list|,
name|Integer
argument_list|>
name|refmap
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|UUID
name|uuid
range|:
name|uuids
control|)
block|{
name|buffer
operator|.
name|putLong
argument_list|(
name|uuid
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putLong
argument_list|(
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
name|refmap
operator|.
name|put
argument_list|(
name|uuid
argument_list|,
name|index
operator|++
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|entry
range|:
name|graph
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|buffer
operator|.
name|putInt
argument_list|(
name|refmap
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|UUID
name|refid
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|buffer
operator|.
name|putInt
argument_list|(
name|refmap
operator|.
name|get
argument_list|(
name|refid
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|putInt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|CRC32
name|checksum
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
operator|(
name|int
operator|)
name|checksum
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
name|uuids
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
name|graphSize
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
name|GRAPH_MAGIC
argument_list|)
expr_stmt|;
name|access
operator|.
name|write
argument_list|(
name|header
argument_list|)
expr_stmt|;
if|if
condition|(
name|padding
operator|>
literal|0
condition|)
block|{
comment|// padding comes *before* the graph!
name|access
operator|.
name|write
argument_list|(
name|ZERO_BYTES
argument_list|,
literal|0
argument_list|,
name|padding
argument_list|)
expr_stmt|;
block|}
name|access
operator|.
name|write
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeIndex
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|indexSize
init|=
name|index
operator|.
name|size
argument_list|()
operator|*
literal|24
operator|+
literal|16
decl_stmt|;
name|int
name|padding
init|=
name|getPaddingSize
argument_list|(
name|indexSize
argument_list|)
decl_stmt|;
name|String
name|indexName
init|=
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|".idx"
decl_stmt|;
name|byte
index|[]
name|header
init|=
name|newEntryHeader
argument_list|(
name|indexName
argument_list|,
name|indexSize
operator|+
name|padding
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|indexSize
argument_list|)
decl_stmt|;
name|TarEntry
index|[]
name|sorted
init|=
name|index
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|TarEntry
index|[
name|index
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|sorted
argument_list|,
name|TarEntry
operator|.
name|IDENTIFIER_ORDER
argument_list|)
expr_stmt|;
for|for
control|(
name|TarEntry
name|entry
range|:
name|sorted
control|)
block|{
name|buffer
operator|.
name|putLong
argument_list|(
name|entry
operator|.
name|msb
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putLong
argument_list|(
name|entry
operator|.
name|lsb
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
name|entry
operator|.
name|offset
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
name|entry
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CRC32
name|checksum
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
operator|(
name|int
operator|)
name|checksum
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
name|index
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
name|padding
operator|+
name|indexSize
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
name|INDEX_MAGIC
argument_list|)
expr_stmt|;
name|access
operator|.
name|write
argument_list|(
name|header
argument_list|)
expr_stmt|;
if|if
condition|(
name|padding
operator|>
literal|0
condition|)
block|{
comment|// padding comes *before* the index!
name|access
operator|.
name|write
argument_list|(
name|ZERO_BYTES
argument_list|,
literal|0
argument_list|,
name|padding
argument_list|)
expr_stmt|;
block|}
name|access
operator|.
name|write
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|newEntryHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|header
init|=
operator|new
name|byte
index|[
name|BLOCK_SIZE
index|]
decl_stmt|;
comment|// File name
name|byte
index|[]
name|nameBytes
init|=
name|name
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nameBytes
argument_list|,
literal|0
argument_list|,
name|header
argument_list|,
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|nameBytes
operator|.
name|length
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// File mode
name|System
operator|.
name|arraycopy
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%07o"
argument_list|,
literal|0400
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
literal|0
argument_list|,
name|header
argument_list|,
literal|100
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// User's numeric user ID
name|System
operator|.
name|arraycopy
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%07o"
argument_list|,
literal|0
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
literal|0
argument_list|,
name|header
argument_list|,
literal|108
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// Group's numeric user ID
name|System
operator|.
name|arraycopy
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%07o"
argument_list|,
literal|0
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
literal|0
argument_list|,
name|header
argument_list|,
literal|116
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// File size in bytes (octal basis)
name|System
operator|.
name|arraycopy
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%011o"
argument_list|,
name|size
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
literal|0
argument_list|,
name|header
argument_list|,
literal|124
argument_list|,
literal|11
argument_list|)
expr_stmt|;
comment|// Last modification time in numeric Unix time format (octal)
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%011o"
argument_list|,
name|time
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
literal|0
argument_list|,
name|header
argument_list|,
literal|136
argument_list|,
literal|11
argument_list|)
expr_stmt|;
comment|// Checksum for header record
name|System
operator|.
name|arraycopy
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|}
argument_list|,
literal|0
argument_list|,
name|header
argument_list|,
literal|148
argument_list|,
literal|8
argument_list|)
expr_stmt|;
comment|// Type flag
name|header
index|[
literal|156
index|]
operator|=
literal|'0'
expr_stmt|;
comment|// Compute checksum
name|int
name|checksum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|header
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|checksum
operator|+=
name|header
index|[
name|i
index|]
operator|&
literal|0xff
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%06o\0 "
argument_list|,
name|checksum
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
literal|0
argument_list|,
name|header
argument_list|,
literal|148
argument_list|,
literal|8
argument_list|)
expr_stmt|;
return|return
name|header
return|;
block|}
comment|/**      * Add all segment ids that are reachable from {@code referencedIds} via      * this writer's segment graph and subsequently remove those segment ids      * from {@code referencedIds} that are in this {@code TarWriter}. The      * latter can't be cleaned up anyway because they are not be present in      * any of the readers.      *      * @param referencedIds      * @throws IOException      */
specifier|synchronized
name|void
name|collectReferences
parameter_list|(
name|Set
argument_list|<
name|UUID
argument_list|>
name|referencedIds
parameter_list|)
block|{
for|for
control|(
name|UUID
name|uuid
range|:
name|reverse
argument_list|(
name|newArrayList
argument_list|(
name|index
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|referencedIds
operator|.
name|remove
argument_list|(
name|uuid
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|UUID
argument_list|>
name|refs
init|=
name|graph
operator|.
name|get
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
if|if
condition|(
name|refs
operator|!=
literal|null
condition|)
block|{
name|referencedIds
operator|.
name|addAll
argument_list|(
name|refs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//------------------------------------------------------------< Object>--
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|file
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

