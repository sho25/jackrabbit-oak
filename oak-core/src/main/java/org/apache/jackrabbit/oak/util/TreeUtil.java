begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BOOLEAN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|TreeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Utility providing common operations for the {@code Tree} that are not provided  * by the API.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|TreeUtil
block|{
specifier|private
name|TreeUtil
parameter_list|()
block|{     }
annotation|@
name|CheckForNull
specifier|public
specifier|static
name|String
name|getPrimaryTypeName
parameter_list|(
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|getString
argument_list|(
name|tree
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
return|;
block|}
annotation|@
name|CheckForNull
specifier|public
specifier|static
name|String
index|[]
name|getStrings
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
name|PropertyState
name|property
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|Iterables
operator|.
name|toArray
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|STRINGS
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
block|}
annotation|@
name|CheckForNull
specifier|public
specifier|static
name|String
name|getString
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
name|PropertyState
name|property
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
operator|&&
operator|!
name|property
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Returns the boolean representation of the property with the specified      * {@code propertyName}. If the property does not exist or      * {@link org.apache.jackrabbit.oak.api.PropertyState#isArray() is an array}      * this method returns {@code false}.      *      * @param tree         The target tree.      * @param propertyName The name of the property.      * @return the boolean representation of the property state with the given      *         name. This utility returns {@code false} if the property does not exist      *         or is an multivalued property.      */
specifier|public
specifier|static
name|boolean
name|getBoolean
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
name|PropertyState
name|property
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
return|return
name|property
operator|!=
literal|null
operator|&&
operator|!
name|property
operator|.
name|isArray
argument_list|()
operator|&&
name|property
operator|.
name|getValue
argument_list|(
name|BOOLEAN
argument_list|)
return|;
block|}
comment|/**      * Return the tree location located at the passed {@code path} from the      * {@code start} location.      * Parent (<em>..</em>) and current (<em>.</em>) elements in the path are      * interpreted as the parent of the current location and the current      * location, respectively. Empty elements are ignored.      *      * @param start  start location      * @param path  path from the start location      * @return  tree location located at {@code path} from {@code start}      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|TreeLocation
name|getTreeLocation
parameter_list|(
name|TreeLocation
name|start
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|TreeLocation
name|loc
init|=
name|start
decl_stmt|;
for|for
control|(
name|String
name|element
range|:
name|Text
operator|.
name|explode
argument_list|(
name|path
argument_list|,
literal|'/'
argument_list|,
literal|false
argument_list|)
control|)
block|{
if|if
condition|(
name|PathUtils
operator|.
name|denotesParent
argument_list|(
name|element
argument_list|)
condition|)
block|{
name|loc
operator|=
name|loc
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|denotesCurrent
argument_list|(
name|element
argument_list|)
condition|)
block|{
name|loc
operator|=
name|loc
operator|.
name|getChild
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
comment|// else . -> skip to next element
block|}
return|return
name|loc
return|;
block|}
comment|/**      * Return the tree location located at the passed {@code path} from the      * location of the {@code start} tree.      * Equivalent to {@code getTreeLocation(start.getLocation(), path)}.      *      * @param start  start tree      * @param path  path from the start tree      * @return  tree location located at {@code path} from {@code start}      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|TreeLocation
name|getTreeLocation
parameter_list|(
name|Tree
name|start
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
name|getTreeLocation
argument_list|(
name|start
operator|.
name|getLocation
argument_list|()
argument_list|,
name|path
argument_list|)
return|;
block|}
comment|/**      * Return the tree located at the passed {@code path} from the {@code start}      * location or {@code null} if no such tree exists or is accessible.      * Equivalent to {@code getTreeLocation(start, path).getTree()}.      *      * @param start  start location      * @param path  path from the start location      * @return  tree located at {@code path} from {@code start} or {@code null}      */
annotation|@
name|CheckForNull
specifier|public
specifier|static
name|Tree
name|getTree
parameter_list|(
name|TreeLocation
name|start
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
name|getTreeLocation
argument_list|(
name|start
argument_list|,
name|path
argument_list|)
operator|.
name|getTree
argument_list|()
return|;
block|}
comment|/**      * Return the tree located at the passed {@code path} from the location of      * the {@code start} tree or {@code null} if no such tree exists or is accessible.      * Equivalent to {@code getTreeLocation(start.getLocation(), path).getTree()}.      *      * @param start  start tree      * @param path  path from the start tree      * @return  tree located at {@code path} from {@code start} or {@code null}      */
annotation|@
name|CheckForNull
specifier|public
specifier|static
name|Tree
name|getTree
parameter_list|(
name|Tree
name|start
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
name|getTreeLocation
argument_list|(
name|start
operator|.
name|getLocation
argument_list|()
argument_list|,
name|path
argument_list|)
operator|.
name|getTree
argument_list|()
return|;
block|}
block|}
end_class

end_unit

