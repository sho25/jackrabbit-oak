begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMapWithExpectedSize
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newLinkedHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newTreeMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSetWithExpectedSize
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
operator|.
name|wrap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
operator|.
name|REF_COUNT_OFFSET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
operator|.
name|getGcGeneration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentId
operator|.
name|isDataSegmentId
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|TarWriter
operator|.
name|BINARY_REFERENCES_MAGIC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|TarWriter
operator|.
name|GRAPH_MAGIC
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CRC32
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|ReferenceCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentGraph
operator|.
name|SegmentGraphVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
class|class
name|TarReader
implements|implements
name|Closeable
block|{
comment|/** Logger instance */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TarReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|GC_LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TarReader
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-GC"
argument_list|)
decl_stmt|;
comment|/** Magic byte sequence at the end of the index block. */
specifier|private
specifier|static
specifier|final
name|int
name|INDEX_MAGIC
init|=
name|TarWriter
operator|.
name|INDEX_MAGIC
decl_stmt|;
comment|/**      * Pattern of the segment entry names. Note the trailing (\\..*)? group      * that's included for compatibility with possible future extensions.      */
specifier|private
specifier|static
specifier|final
name|Pattern
name|NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})"
operator|+
literal|"(\\.([0-9a-f]{8}))?(\\..*)?"
argument_list|)
decl_stmt|;
comment|/** The tar file block size. */
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
name|TarWriter
operator|.
name|BLOCK_SIZE
decl_stmt|;
specifier|static
name|int
name|getEntrySize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
name|BLOCK_SIZE
operator|+
name|size
operator|+
name|TarWriter
operator|.
name|getPaddingSize
argument_list|(
name|size
argument_list|)
return|;
block|}
specifier|static
name|TarReader
name|open
parameter_list|(
name|File
name|file
parameter_list|,
name|boolean
name|memoryMapping
parameter_list|)
throws|throws
name|IOException
block|{
name|TarReader
name|reader
init|=
name|openFirstFileWithValidIndex
argument_list|(
name|singletonList
argument_list|(
name|file
argument_list|)
argument_list|,
name|memoryMapping
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
name|reader
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to open tar file "
operator|+
name|file
argument_list|)
throw|;
block|}
block|}
comment|/**      * Creates a TarReader instance for reading content from a tar file.      * If there exist multiple generations of the same tar file, they are      * all passed to this method. The latest generation with a valid tar      * index (which is a good indication of general validity of the file)      * is opened and the other generations are removed to clean things up.      * If none of the generations has a valid index, then something must have      * gone wrong and we'll try recover as much content as we can from the      * existing tar generations.      *      * @param files      * @param memoryMapping      * @return      * @throws IOException      */
specifier|static
name|TarReader
name|open
parameter_list|(
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
name|files
parameter_list|,
name|boolean
name|memoryMapping
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedMap
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
name|sorted
init|=
name|newTreeMap
argument_list|()
decl_stmt|;
name|sorted
operator|.
name|putAll
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
name|sorted
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|TarReader
name|reader
init|=
name|openFirstFileWithValidIndex
argument_list|(
name|list
argument_list|,
name|memoryMapping
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
name|reader
return|;
block|}
comment|// no generation has a valid index, so recover as much as we can
name|log
operator|.
name|warn
argument_list|(
literal|"Could not find a valid tar index in {}, recovering..."
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|LinkedHashMap
argument_list|<
name|UUID
argument_list|,
name|byte
index|[]
argument_list|>
name|entries
init|=
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|sorted
operator|.
name|values
argument_list|()
control|)
block|{
name|collectFileEntries
argument_list|(
name|file
argument_list|,
name|entries
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// regenerate the first generation based on the recovered data
name|File
name|file
init|=
name|sorted
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|generateTarFile
argument_list|(
name|entries
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|reader
operator|=
name|openFirstFileWithValidIndex
argument_list|(
name|singletonList
argument_list|(
name|file
argument_list|)
argument_list|,
name|memoryMapping
argument_list|)
expr_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
name|reader
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to open recovered tar file "
operator|+
name|file
argument_list|)
throw|;
block|}
block|}
specifier|static
name|TarReader
name|openRO
parameter_list|(
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
name|files
parameter_list|,
name|boolean
name|memoryMapping
parameter_list|,
name|boolean
name|recover
parameter_list|)
throws|throws
name|IOException
block|{
comment|// for readonly store only try the latest generation of a given
comment|// tar file to prevent any rollback or rewrite
name|File
name|file
init|=
name|files
operator|.
name|get
argument_list|(
name|Collections
operator|.
name|max
argument_list|(
name|files
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TarReader
name|reader
init|=
name|openFirstFileWithValidIndex
argument_list|(
name|singletonList
argument_list|(
name|file
argument_list|)
argument_list|,
name|memoryMapping
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
name|reader
return|;
block|}
if|if
condition|(
name|recover
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not find a valid tar index in {}, recovering read-only"
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|// collecting the entries (without touching the original file) and
comment|// writing them into an artificial tar file '.ro.bak'
name|LinkedHashMap
argument_list|<
name|UUID
argument_list|,
name|byte
index|[]
argument_list|>
name|entries
init|=
name|newLinkedHashMap
argument_list|()
decl_stmt|;
name|collectFileEntries
argument_list|(
name|file
argument_list|,
name|entries
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|file
operator|=
name|findAvailGen
argument_list|(
name|file
argument_list|,
literal|".ro.bak"
argument_list|)
expr_stmt|;
name|generateTarFile
argument_list|(
name|entries
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|reader
operator|=
name|openFirstFileWithValidIndex
argument_list|(
name|singletonList
argument_list|(
name|file
argument_list|)
argument_list|,
name|memoryMapping
argument_list|)
expr_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
name|reader
return|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to open tar file "
operator|+
name|file
argument_list|)
throw|;
block|}
comment|/**      * Collects all entries from the given file and optionally backs-up the      * file, by renaming it to a ".bak" extension      *       * @param file      * @param entries      * @param backup      * @throws IOException      */
specifier|private
specifier|static
name|void
name|collectFileEntries
parameter_list|(
name|File
name|file
parameter_list|,
name|LinkedHashMap
argument_list|<
name|UUID
argument_list|,
name|byte
index|[]
argument_list|>
name|entries
parameter_list|,
name|boolean
name|backup
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Recovering segments from tar file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
try|try
block|{
name|RandomAccessFile
name|access
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"r"
argument_list|)
decl_stmt|;
try|try
block|{
name|recoverEntries
argument_list|(
name|file
argument_list|,
name|access
argument_list|,
name|entries
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|access
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not read tar file {}, skipping..."
argument_list|,
name|file
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|backup
condition|)
block|{
name|backupSafely
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Regenerates a tar file from a list of entries.      *       * @param entries      * @param file      * @throws IOException      */
specifier|private
specifier|static
name|void
name|generateTarFile
parameter_list|(
name|LinkedHashMap
argument_list|<
name|UUID
argument_list|,
name|byte
index|[]
argument_list|>
name|entries
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Regenerating tar file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|TarWriter
name|writer
init|=
operator|new
name|TarWriter
argument_list|(
name|file
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|UUID
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|entries
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|UUID
name|uuid
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|generation
init|=
name|getGcGeneration
argument_list|(
name|wrap
argument_list|(
name|data
argument_list|)
argument_list|,
name|uuid
argument_list|)
decl_stmt|;
name|writer
operator|.
name|writeEntry
argument_list|(
name|uuid
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|generation
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Backup this tar file for manual inspection. Something went      * wrong earlier so we want to prevent the data from being      * accidentally removed or overwritten.      *      * @param file      * @throws IOException      */
specifier|private
specifier|static
name|void
name|backupSafely
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|backup
init|=
name|findAvailGen
argument_list|(
name|file
argument_list|,
literal|".bak"
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Backing up {} to {}"
argument_list|,
name|file
argument_list|,
name|backup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|renameTo
argument_list|(
name|backup
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Renaming failed, so using copy to backup {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|file
argument_list|,
name|backup
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not remove broken tar file "
operator|+
name|file
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Fine next available generation number so that a generated file doesn't      * overwrite another existing file.      *       * @param file      */
specifier|private
specifier|static
name|File
name|findAvailGen
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|ext
parameter_list|)
block|{
name|File
name|parent
init|=
name|file
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
name|File
name|backup
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
name|name
operator|+
name|ext
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|backup
operator|.
name|exists
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|backup
operator|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
name|name
operator|+
literal|"."
operator|+
name|i
operator|+
name|ext
argument_list|)
expr_stmt|;
block|}
return|return
name|backup
return|;
block|}
specifier|private
specifier|static
name|TarReader
name|openFirstFileWithValidIndex
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|files
parameter_list|,
name|boolean
name|memoryMapping
parameter_list|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|RandomAccessFile
name|access
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"r"
argument_list|)
decl_stmt|;
try|try
block|{
name|ByteBuffer
name|index
init|=
name|loadAndValidateIndex
argument_list|(
name|access
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No index found in tar file {}, skipping..."
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// found a file with a valid index, drop the others
for|for
control|(
name|File
name|other
range|:
name|files
control|)
block|{
if|if
condition|(
name|other
operator|!=
name|file
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Removing unused tar file {}"
argument_list|,
name|other
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|memoryMapping
condition|)
block|{
try|try
block|{
name|FileAccess
name|mapped
init|=
operator|new
name|FileAccess
operator|.
name|Mapped
argument_list|(
name|access
argument_list|)
decl_stmt|;
comment|// re-read the index, now with memory mapping
name|int
name|indexSize
init|=
name|index
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|index
operator|=
name|mapped
operator|.
name|read
argument_list|(
name|mapped
operator|.
name|length
argument_list|()
operator|-
name|indexSize
operator|-
literal|16
operator|-
literal|1024
argument_list|,
name|indexSize
argument_list|)
expr_stmt|;
return|return
operator|new
name|TarReader
argument_list|(
name|file
argument_list|,
name|mapped
argument_list|,
name|index
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to mmap tar file {}. Falling back to normal file "
operator|+
literal|"IO, which will negatively impact repository performance. "
operator|+
literal|"This problem may have been caused by restrictions on the "
operator|+
literal|"amount of virtual memory available to the JVM. Please make "
operator|+
literal|"sure that a 64-bit JVM is being used and that the process "
operator|+
literal|"has access to unlimited virtual memory (ulimit option -v)."
argument_list|,
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|FileAccess
name|random
init|=
operator|new
name|FileAccess
operator|.
name|Random
argument_list|(
name|access
argument_list|)
decl_stmt|;
comment|// prevent the finally block from closing the file
comment|// as the returned TarReader will take care of that
name|access
operator|=
literal|null
expr_stmt|;
return|return
operator|new
name|TarReader
argument_list|(
name|file
argument_list|,
name|random
argument_list|,
name|index
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|access
operator|!=
literal|null
condition|)
block|{
name|access
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not read tar file {}, skipping..."
argument_list|,
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Tries to read an existing index from the given tar file. The index is      * returned if it is found and looks valid (correct checksum, passes      * sanity checks).      *      * @param file tar file      * @param name name of the tar file, for logging purposes      * @return tar index, or {@code null} if not found or not valid      * @throws IOException if the tar file could not be read      */
specifier|private
specifier|static
name|ByteBuffer
name|loadAndValidateIndex
parameter_list|(
name|RandomAccessFile
name|file
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|length
init|=
name|file
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|%
name|BLOCK_SIZE
operator|!=
literal|0
operator|||
name|length
argument_list|<
literal|6
operator|*
name|BLOCK_SIZE
operator|||
name|length
argument_list|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unexpected size {} of tar file {}"
argument_list|,
name|length
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// unexpected file size
block|}
comment|// read the index metadata just before the two final zero blocks
name|ByteBuffer
name|meta
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|file
operator|.
name|seek
argument_list|(
name|length
operator|-
literal|2
operator|*
name|BLOCK_SIZE
operator|-
literal|16
argument_list|)
expr_stmt|;
name|file
operator|.
name|readFully
argument_list|(
name|meta
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|crc32
init|=
name|meta
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|meta
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|bytes
init|=
name|meta
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|magic
init|=
name|meta
operator|.
name|getInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|magic
operator|!=
name|INDEX_MAGIC
condition|)
block|{
return|return
literal|null
return|;
comment|// magic byte mismatch
block|}
if|if
condition|(
name|count
operator|<
literal|1
operator|||
name|bytes
operator|<
name|count
operator|*
name|TarEntry
operator|.
name|SIZE
operator|+
literal|16
operator|||
name|bytes
operator|%
name|BLOCK_SIZE
operator|!=
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid index metadata in tar file {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// impossible entry and/or byte counts
block|}
comment|// this involves seeking backwards in the file, which might not
comment|// perform well, but that's OK since we only do this once per file
name|ByteBuffer
name|index
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|count
operator|*
name|TarEntry
operator|.
name|SIZE
argument_list|)
decl_stmt|;
name|file
operator|.
name|seek
argument_list|(
name|length
operator|-
literal|2
operator|*
name|BLOCK_SIZE
operator|-
literal|16
operator|-
name|count
operator|*
name|TarEntry
operator|.
name|SIZE
argument_list|)
expr_stmt|;
name|file
operator|.
name|readFully
argument_list|(
name|index
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|mark
argument_list|()
expr_stmt|;
name|CRC32
name|checksum
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|long
name|limit
init|=
name|length
operator|-
literal|2
operator|*
name|BLOCK_SIZE
operator|-
name|bytes
operator|-
name|BLOCK_SIZE
decl_stmt|;
name|long
name|lastmsb
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
name|long
name|lastlsb
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
name|byte
index|[]
name|entry
init|=
operator|new
name|byte
index|[
name|TarEntry
operator|.
name|SIZE
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|index
operator|.
name|get
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|ByteBuffer
name|buffer
init|=
name|wrap
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|long
name|msb
init|=
name|buffer
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|buffer
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|buffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|buffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastmsb
operator|>
name|msb
operator|||
operator|(
name|lastmsb
operator|==
name|msb
operator|&&
name|lastlsb
operator|>
name|lsb
operator|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Incorrect index ordering in tar file {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|lastmsb
operator|==
name|msb
operator|&&
name|lastlsb
operator|==
name|lsb
operator|&&
name|i
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Duplicate index entry in tar file {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|offset
operator|<
literal|0
operator|||
name|offset
operator|%
name|BLOCK_SIZE
operator|!=
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid index entry offset in tar file {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|size
argument_list|<
literal|1
operator|||
name|offset
operator|+
name|size
argument_list|>
name|limit
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid index entry size in tar file {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|lastmsb
operator|=
name|msb
expr_stmt|;
name|lastlsb
operator|=
name|lsb
expr_stmt|;
block|}
if|if
condition|(
name|crc32
operator|!=
operator|(
name|int
operator|)
name|checksum
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid index checksum in tar file {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// checksum mismatch
block|}
name|index
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|index
return|;
block|}
comment|/**      * Scans through the tar file, looking for all segment entries.      *      * @throws IOException if the tar file could not be read      */
specifier|private
specifier|static
name|void
name|recoverEntries
parameter_list|(
name|File
name|file
parameter_list|,
name|RandomAccessFile
name|access
parameter_list|,
name|LinkedHashMap
argument_list|<
name|UUID
argument_list|,
name|byte
index|[]
argument_list|>
name|entries
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|header
init|=
operator|new
name|byte
index|[
name|BLOCK_SIZE
index|]
decl_stmt|;
while|while
condition|(
name|access
operator|.
name|getFilePointer
argument_list|()
operator|+
name|BLOCK_SIZE
operator|<=
name|access
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// read the tar header block
name|access
operator|.
name|readFully
argument_list|(
name|header
argument_list|)
expr_stmt|;
comment|// compute the header checksum
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BLOCK_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|sum
operator|+=
name|header
index|[
name|i
index|]
operator|&
literal|0xff
expr_stmt|;
block|}
comment|// identify possible zero block
if|if
condition|(
name|sum
operator|==
literal|0
operator|&&
name|access
operator|.
name|getFilePointer
argument_list|()
operator|+
literal|2
operator|*
name|BLOCK_SIZE
operator|==
name|access
operator|.
name|length
argument_list|()
condition|)
block|{
return|return;
comment|// found the zero blocks at the end of the file
block|}
comment|// replace the actual stored checksum with spaces for comparison
for|for
control|(
name|int
name|i
init|=
literal|148
init|;
name|i
operator|<
literal|148
operator|+
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|sum
operator|-=
name|header
index|[
name|i
index|]
operator|&
literal|0xff
expr_stmt|;
name|sum
operator|+=
literal|' '
expr_stmt|;
block|}
name|byte
index|[]
name|checkbytes
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%06o\0 "
argument_list|,
name|sum
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|checkbytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|checkbytes
index|[
name|i
index|]
operator|!=
name|header
index|[
literal|148
operator|+
name|i
index|]
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid entry checksum at offset {} in tar file {}, skipping..."
argument_list|,
name|access
operator|.
name|getFilePointer
argument_list|()
operator|-
name|BLOCK_SIZE
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The header checksum passes, so read the entry name and size
name|ByteBuffer
name|buffer
init|=
name|wrap
argument_list|(
name|header
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|readString
argument_list|(
name|buffer
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|position
argument_list|(
literal|124
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|readNumber
argument_list|(
name|buffer
argument_list|,
literal|12
argument_list|)
decl_stmt|;
if|if
condition|(
name|access
operator|.
name|getFilePointer
argument_list|()
operator|+
name|size
operator|>
name|access
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// checksum was correct, so the size field should be accurate
name|log
operator|.
name|warn
argument_list|(
literal|"Partial entry {} in tar file {}, ignoring..."
argument_list|,
name|name
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return;
block|}
name|Matcher
name|matcher
init|=
name|NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|UUID
name|id
init|=
name|UUID
operator|.
name|fromString
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|checksum
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|checksum
operator|!=
literal|null
operator|||
operator|!
name|entries
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|access
operator|.
name|readFully
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// skip possible padding to stay at block boundaries
name|long
name|position
init|=
name|access
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|long
name|remainder
init|=
name|position
operator|%
name|BLOCK_SIZE
decl_stmt|;
if|if
condition|(
name|remainder
operator|!=
literal|0
condition|)
block|{
name|access
operator|.
name|seek
argument_list|(
name|position
operator|+
operator|(
name|BLOCK_SIZE
operator|-
name|remainder
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checksum
operator|!=
literal|null
condition|)
block|{
name|CRC32
name|crc
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|crc
operator|.
name|update
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|crc
operator|.
name|getValue
argument_list|()
operator|!=
name|Long
operator|.
name|parseLong
argument_list|(
name|checksum
argument_list|,
literal|16
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Checksum mismatch in entry {} of tar file {}, skipping..."
argument_list|,
name|name
argument_list|,
name|file
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|entries
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|".idx"
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unexpected entry {} in tar file {}, skipping..."
argument_list|,
name|name
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|long
name|position
init|=
name|access
operator|.
name|getFilePointer
argument_list|()
operator|+
name|size
decl_stmt|;
name|long
name|remainder
init|=
name|position
operator|%
name|BLOCK_SIZE
decl_stmt|;
if|if
condition|(
name|remainder
operator|!=
literal|0
condition|)
block|{
name|position
operator|+=
name|BLOCK_SIZE
operator|-
name|remainder
expr_stmt|;
block|}
name|access
operator|.
name|seek
argument_list|(
name|position
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|final
name|File
name|file
decl_stmt|;
specifier|private
specifier|final
name|FileAccess
name|access
decl_stmt|;
specifier|private
specifier|final
name|ByteBuffer
name|index
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|closed
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|hasGraph
decl_stmt|;
specifier|private
name|TarReader
parameter_list|(
name|File
name|file
parameter_list|,
name|FileAccess
name|access
parameter_list|,
name|ByteBuffer
name|index
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|access
operator|=
name|access
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
name|long
name|size
parameter_list|()
block|{
return|return
name|file
operator|.
name|length
argument_list|()
return|;
block|}
comment|/**      * Returns the number of segments in this tar file.      *      * @return number of segments      */
name|int
name|count
parameter_list|()
block|{
return|return
name|index
operator|.
name|capacity
argument_list|()
operator|/
name|TarEntry
operator|.
name|SIZE
return|;
block|}
comment|/**      * Iterates over all entries in this tar file and calls      * {@link TarEntryVisitor#visit(long, long, File, int, int)} on them.      *      * @param visitor entry visitor      */
name|void
name|accept
parameter_list|(
name|TarEntryVisitor
name|visitor
parameter_list|)
block|{
name|int
name|position
init|=
name|index
operator|.
name|position
argument_list|()
decl_stmt|;
while|while
condition|(
name|position
operator|<
name|index
operator|.
name|limit
argument_list|()
condition|)
block|{
name|visitor
operator|.
name|visit
argument_list|(
name|index
operator|.
name|getLong
argument_list|(
name|position
argument_list|)
argument_list|,
name|index
operator|.
name|getLong
argument_list|(
name|position
operator|+
literal|8
argument_list|)
argument_list|,
name|file
argument_list|,
name|index
operator|.
name|getInt
argument_list|(
name|position
operator|+
literal|16
argument_list|)
argument_list|,
name|index
operator|.
name|getInt
argument_list|(
name|position
operator|+
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|position
operator|+=
name|TarEntry
operator|.
name|SIZE
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|UUID
argument_list|>
name|getUUIDs
parameter_list|()
block|{
name|Set
argument_list|<
name|UUID
argument_list|>
name|uuids
init|=
name|newHashSetWithExpectedSize
argument_list|(
name|index
operator|.
name|remaining
argument_list|()
operator|/
name|TarEntry
operator|.
name|SIZE
argument_list|)
decl_stmt|;
name|int
name|position
init|=
name|index
operator|.
name|position
argument_list|()
decl_stmt|;
while|while
condition|(
name|position
operator|<
name|index
operator|.
name|limit
argument_list|()
condition|)
block|{
name|uuids
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
name|index
operator|.
name|getLong
argument_list|(
name|position
argument_list|)
argument_list|,
name|index
operator|.
name|getLong
argument_list|(
name|position
operator|+
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|position
operator|+=
name|TarEntry
operator|.
name|SIZE
expr_stmt|;
block|}
return|return
name|uuids
return|;
block|}
name|boolean
name|containsEntry
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
block|{
return|return
name|findEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
comment|/**      * If the given segment is in this file, get the byte buffer that allows      * reading it.      *<p>      * Whether or not this will read from the file depends on whether memory      * mapped files are used or not.      *       * @param msb the most significant bits of the segment id      * @param lsb the least significant bits of the segment id      * @return the byte buffer, or null if not in this file      */
name|ByteBuffer
name|readEntry
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|position
init|=
name|findEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
decl_stmt|;
if|if
condition|(
name|position
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|access
operator|.
name|read
argument_list|(
name|index
operator|.
name|getInt
argument_list|(
name|position
operator|+
literal|16
argument_list|)
argument_list|,
name|index
operator|.
name|getInt
argument_list|(
name|position
operator|+
literal|20
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Find the position of the given segment in the tar file.      * It uses the tar index if available.      *       * @param msb the most significant bits of the segment id      * @param lsb the least significant bits of the segment id      * @return the position in the file, or -1 if not found      */
specifier|private
name|int
name|findEntry
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
block|{
comment|// The segment identifiers are randomly generated with uniform
comment|// distribution, so we can use interpolation search to find the
comment|// matching entry in the index. The average runtime is O(log log n).
name|int
name|lowIndex
init|=
literal|0
decl_stmt|;
name|int
name|highIndex
init|=
name|index
operator|.
name|remaining
argument_list|()
operator|/
name|TarEntry
operator|.
name|SIZE
operator|-
literal|1
decl_stmt|;
name|float
name|lowValue
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
name|float
name|highValue
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|float
name|targetValue
init|=
name|msb
decl_stmt|;
while|while
condition|(
name|lowIndex
operator|<=
name|highIndex
condition|)
block|{
name|int
name|guessIndex
init|=
name|lowIndex
operator|+
name|Math
operator|.
name|round
argument_list|(
operator|(
name|highIndex
operator|-
name|lowIndex
operator|)
operator|*
operator|(
name|targetValue
operator|-
name|lowValue
operator|)
operator|/
operator|(
name|highValue
operator|-
name|lowValue
operator|)
argument_list|)
decl_stmt|;
name|int
name|position
init|=
name|index
operator|.
name|position
argument_list|()
operator|+
name|guessIndex
operator|*
name|TarEntry
operator|.
name|SIZE
decl_stmt|;
name|long
name|m
init|=
name|index
operator|.
name|getLong
argument_list|(
name|position
argument_list|)
decl_stmt|;
if|if
condition|(
name|msb
operator|<
name|m
condition|)
block|{
name|highIndex
operator|=
name|guessIndex
operator|-
literal|1
expr_stmt|;
name|highValue
operator|=
name|m
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|msb
operator|>
name|m
condition|)
block|{
name|lowIndex
operator|=
name|guessIndex
operator|+
literal|1
expr_stmt|;
name|lowValue
operator|=
name|m
expr_stmt|;
block|}
else|else
block|{
comment|// getting close...
name|long
name|l
init|=
name|index
operator|.
name|getLong
argument_list|(
name|position
operator|+
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
name|lsb
operator|<
name|l
condition|)
block|{
name|highIndex
operator|=
name|guessIndex
operator|-
literal|1
expr_stmt|;
name|highValue
operator|=
name|m
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lsb
operator|>
name|l
condition|)
block|{
name|lowIndex
operator|=
name|guessIndex
operator|+
literal|1
expr_stmt|;
name|lowValue
operator|=
name|m
expr_stmt|;
block|}
else|else
block|{
comment|// found it!
return|return
name|position
return|;
block|}
block|}
block|}
comment|// not found
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|TarEntry
index|[]
name|getEntries
parameter_list|()
block|{
name|TarEntry
index|[]
name|entries
init|=
operator|new
name|TarEntry
index|[
name|index
operator|.
name|remaining
argument_list|()
operator|/
name|TarEntry
operator|.
name|SIZE
index|]
decl_stmt|;
name|int
name|position
init|=
name|index
operator|.
name|position
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|position
operator|<
name|index
operator|.
name|limit
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|entries
index|[
name|i
index|]
operator|=
operator|new
name|TarEntry
argument_list|(
name|index
operator|.
name|getLong
argument_list|(
name|position
argument_list|)
argument_list|,
name|index
operator|.
name|getLong
argument_list|(
name|position
operator|+
literal|8
argument_list|)
argument_list|,
name|index
operator|.
name|getInt
argument_list|(
name|position
operator|+
literal|16
argument_list|)
argument_list|,
name|index
operator|.
name|getInt
argument_list|(
name|position
operator|+
literal|20
argument_list|)
argument_list|,
name|index
operator|.
name|getInt
argument_list|(
name|position
operator|+
literal|24
argument_list|)
argument_list|)
expr_stmt|;
name|position
operator|+=
name|TarEntry
operator|.
name|SIZE
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|entries
argument_list|,
name|TarEntry
operator|.
name|OFFSET_ORDER
argument_list|)
expr_stmt|;
return|return
name|entries
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|List
argument_list|<
name|UUID
argument_list|>
name|getReferences
parameter_list|(
name|TarEntry
name|entry
parameter_list|,
name|UUID
name|id
parameter_list|,
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|graph
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|graph
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|UUID
argument_list|>
name|uuids
init|=
name|graph
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
return|return
name|uuids
operator|==
literal|null
condition|?
name|Collections
operator|.
expr|<
name|UUID
operator|>
name|emptyList
argument_list|()
else|:
name|uuids
return|;
block|}
else|else
block|{
comment|// a pre-compiled graph is not available, so read the
comment|// references directly from this segment
name|ByteBuffer
name|segment
init|=
name|access
operator|.
name|read
argument_list|(
name|entry
operator|.
name|offset
argument_list|()
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|entry
operator|.
name|size
argument_list|()
argument_list|,
literal|16
operator|*
literal|256
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|segment
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|refCount
init|=
name|segment
operator|.
name|get
argument_list|(
name|pos
operator|+
name|REF_COUNT_OFFSET
argument_list|)
operator|&
literal|0xff
decl_stmt|;
name|int
name|refEnd
init|=
name|pos
operator|+
literal|16
operator|*
operator|(
name|refCount
operator|+
literal|1
operator|)
decl_stmt|;
name|List
argument_list|<
name|UUID
argument_list|>
name|refIds
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|refPos
init|=
name|pos
operator|+
literal|16
init|;
name|refPos
operator|<
name|refEnd
condition|;
name|refPos
operator|+=
literal|16
control|)
block|{
name|refIds
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
name|segment
operator|.
name|getLong
argument_list|(
name|refPos
argument_list|)
argument_list|,
name|segment
operator|.
name|getLong
argument_list|(
name|refPos
operator|+
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|refIds
return|;
block|}
block|}
comment|/**      * Build the graph of segments reachable from an initial set of segments      * @param roots     the initial set of segments      * @param visitor   visitor receiving call back while following the segment graph      * @throws IOException      */
specifier|public
name|void
name|traverseSegmentGraph
parameter_list|(
annotation|@
name|Nonnull
name|Set
argument_list|<
name|UUID
argument_list|>
name|roots
parameter_list|,
annotation|@
name|Nonnull
name|SegmentGraphVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|roots
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|graph
init|=
name|getGraph
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TarEntry
index|[]
name|entries
init|=
name|getEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|entries
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|TarEntry
name|entry
init|=
name|entries
index|[
name|i
index|]
decl_stmt|;
name|UUID
name|id
init|=
operator|new
name|UUID
argument_list|(
name|entry
operator|.
name|msb
argument_list|()
argument_list|,
name|entry
operator|.
name|lsb
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|roots
operator|.
name|remove
argument_list|(
name|id
argument_list|)
operator|&&
name|isDataSegmentId
argument_list|(
name|entry
operator|.
name|lsb
argument_list|()
argument_list|)
condition|)
block|{
comment|// this is a referenced data segment, so follow the graph
for|for
control|(
name|UUID
name|refId
range|:
name|getReferences
argument_list|(
name|entry
argument_list|,
name|id
argument_list|,
name|graph
argument_list|)
control|)
block|{
name|visitor
operator|.
name|accept
argument_list|(
name|id
argument_list|,
name|refId
argument_list|)
expr_stmt|;
name|roots
operator|.
name|add
argument_list|(
name|refId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// this segment is not referenced anywhere
name|visitor
operator|.
name|accept
argument_list|(
name|id
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Calculate the ids of the segments directly referenced from {@code referenceIds}      * through forward references.      *      * @param referencedIds  The initial set of ids to start from. On return it      *                       contains the set of direct forward references.      *      * @throws IOException      */
name|void
name|calculateForwardReferences
parameter_list|(
name|Set
argument_list|<
name|UUID
argument_list|>
name|referencedIds
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|graph
init|=
name|getGraph
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TarEntry
index|[]
name|entries
init|=
name|getEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|entries
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|TarEntry
name|entry
init|=
name|entries
index|[
name|i
index|]
decl_stmt|;
name|UUID
name|id
init|=
operator|new
name|UUID
argument_list|(
name|entry
operator|.
name|msb
argument_list|()
argument_list|,
name|entry
operator|.
name|lsb
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|referencedIds
operator|.
name|remove
argument_list|(
name|id
argument_list|)
condition|)
block|{
if|if
condition|(
name|isDataSegmentId
argument_list|(
name|entry
operator|.
name|lsb
argument_list|()
argument_list|)
condition|)
block|{
name|referencedIds
operator|.
name|addAll
argument_list|(
name|getReferences
argument_list|(
name|entry
argument_list|,
name|id
argument_list|,
name|graph
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Collect the references of those blobs that are reachable from any segment with a      * generation at or above {@code minGeneration}.      * @param collector      * @param minGeneration      */
name|void
name|collectBlobReferences
parameter_list|(
name|ReferenceCollector
name|collector
parameter_list|,
name|int
name|minGeneration
parameter_list|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|UUID
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|generations
init|=
name|getBinaryReferences
argument_list|()
decl_stmt|;
if|if
condition|(
name|generations
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|UUID
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|entry
range|:
name|generations
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|<
name|minGeneration
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Set
argument_list|<
name|String
argument_list|>
name|references
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|reference
range|:
name|references
control|)
block|{
name|collector
operator|.
name|addReference
argument_list|(
name|reference
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Collect reclaimable segments.      * A data segment is reclaimable iff its generation is in the {@code reclaimGeneration}      * predicate.      * A bulk segment is reclaimable if it is not in {@code bulkRefs} or if it is transitively      * reachable through a non reclaimable data segment.      *      * @param bulkRefs  bulk segment gc roots      * @param reclaim   reclaimable segments      * @param reclaimGeneration  reclaim generation predicate for data segments      * @throws IOException      */
name|void
name|mark
parameter_list|(
name|Set
argument_list|<
name|UUID
argument_list|>
name|bulkRefs
parameter_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
name|reclaim
parameter_list|,
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|reclaimGeneration
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|graph
init|=
name|getGraph
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|TarEntry
index|[]
name|entries
init|=
name|getEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|entries
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
comment|// A bulk segments is *always* written before any data segment referencing it.
comment|// Backward iteration ensures we see all references to bulk segments before
comment|// we see the bulk segment itself. Therefore we can remove a bulk reference
comment|// from the bulkRefs set once we encounter it, which save us some memory and
comment|// CPU on subsequent look-ups.
name|TarEntry
name|entry
init|=
name|entries
index|[
name|i
index|]
decl_stmt|;
name|UUID
name|id
init|=
operator|new
name|UUID
argument_list|(
name|entry
operator|.
name|msb
argument_list|()
argument_list|,
name|entry
operator|.
name|lsb
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|isDataSegmentId
argument_list|(
name|entry
operator|.
name|lsb
argument_list|()
argument_list|)
operator|&&
operator|!
name|bulkRefs
operator|.
name|remove
argument_list|(
name|id
argument_list|)
operator|)
operator|||
operator|(
name|isDataSegmentId
argument_list|(
name|entry
operator|.
name|lsb
argument_list|()
argument_list|)
operator|&&
name|reclaimGeneration
operator|.
name|apply
argument_list|(
name|entry
operator|.
name|generation
argument_list|()
argument_list|)
operator|)
condition|)
block|{
comment|// non referenced bulk segment or old data segment
name|reclaim
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isDataSegmentId
argument_list|(
name|entry
operator|.
name|lsb
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|UUID
name|refId
range|:
name|getReferences
argument_list|(
name|entry
argument_list|,
name|id
argument_list|,
name|graph
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|isDataSegmentId
argument_list|(
name|refId
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
condition|)
block|{
comment|// keep the extra check for bulk segments for the case where a
comment|// pre-compiled graph is not available (graph == null) and
comment|// getReferences also includes data references
name|bulkRefs
operator|.
name|add
argument_list|(
name|refId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**      * Remove reclaimable segments and collect actually reclaimed segments.      * @param reclaim       segments to reclaim      * @param reclaimed     actually reclaimed segments      * @return              reader resulting from the reclamation process      * @throws IOException      */
name|TarReader
name|sweep
parameter_list|(
annotation|@
name|Nonnull
name|Set
argument_list|<
name|UUID
argument_list|>
name|reclaim
parameter_list|,
annotation|@
name|Nonnull
name|Set
argument_list|<
name|UUID
argument_list|>
name|reclaimed
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Cleaning up {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|UUID
argument_list|>
name|cleaned
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|int
name|size
init|=
literal|0
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|TarEntry
index|[]
name|entries
init|=
name|getEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TarEntry
name|entry
init|=
name|entries
index|[
name|i
index|]
decl_stmt|;
name|UUID
name|id
init|=
operator|new
name|UUID
argument_list|(
name|entry
operator|.
name|msb
argument_list|()
argument_list|,
name|entry
operator|.
name|lsb
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reclaim
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|cleaned
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|entries
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|size
operator|+=
name|getEntrySize
argument_list|(
name|entry
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|+=
literal|1
expr_stmt|;
block|}
block|}
name|size
operator|+=
name|getEntrySize
argument_list|(
name|TarEntry
operator|.
name|SIZE
operator|*
name|count
operator|+
literal|16
argument_list|)
expr_stmt|;
name|size
operator|+=
literal|2
operator|*
name|BLOCK_SIZE
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"None of the entries of {} are referenceable."
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|logCleanedSegments
argument_list|(
name|cleaned
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|size
operator|>=
name|access
operator|.
name|length
argument_list|()
operator|*
literal|3
operator|/
literal|4
operator|&&
name|hasGraph
argument_list|()
condition|)
block|{
comment|// the space savings are not worth it at less than 25%,
comment|// unless this tar file lacks a pre-compiled segment graph
comment|// in which case we'll always generate a new tar file with
comment|// the graph to speed up future garbage collection runs.
name|log
operator|.
name|debug
argument_list|(
literal|"Not enough space savings. ({}/{}). Skipping clean up of {}"
argument_list|,
name|access
operator|.
name|length
argument_list|()
operator|-
name|size
argument_list|,
name|access
operator|.
name|length
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
operator|!
name|hasGraph
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Recovering {}, which is missing its graph."
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|int
name|pos
init|=
name|name
operator|.
name|length
argument_list|()
operator|-
literal|"a.tar"
operator|.
name|length
argument_list|()
decl_stmt|;
name|char
name|generation
init|=
name|name
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|generation
operator|==
literal|'z'
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No garbage collection after reaching generation z: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|File
name|newFile
init|=
operator|new
name|File
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
operator|+
call|(
name|char
call|)
argument_list|(
name|generation
operator|+
literal|1
argument_list|)
operator|+
literal|".tar"
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Writing new generation {}"
argument_list|,
name|newFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TarWriter
name|writer
init|=
operator|new
name|TarWriter
argument_list|(
name|newFile
argument_list|)
decl_stmt|;
for|for
control|(
name|TarEntry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|entry
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|access
operator|.
name|read
argument_list|(
name|entry
operator|.
name|offset
argument_list|()
argument_list|,
name|entry
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEntry
argument_list|(
name|entry
operator|.
name|msb
argument_list|()
argument_list|,
name|entry
operator|.
name|lsb
argument_list|()
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|entry
operator|.
name|size
argument_list|()
argument_list|,
name|entry
operator|.
name|generation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|TarReader
name|reader
init|=
name|openFirstFileWithValidIndex
argument_list|(
name|singletonList
argument_list|(
name|newFile
argument_list|)
argument_list|,
name|access
operator|.
name|isMemoryMapped
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|logCleanedSegments
argument_list|(
name|cleaned
argument_list|)
expr_stmt|;
name|reclaimed
operator|.
name|addAll
argument_list|(
name|cleaned
argument_list|)
expr_stmt|;
return|return
name|reader
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to open cleaned up tar file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
specifier|private
name|void
name|logCleanedSegments
parameter_list|(
name|Set
argument_list|<
name|UUID
argument_list|>
name|cleaned
parameter_list|)
block|{
name|StringBuilder
name|uuids
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|newLine
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|,
literal|"\n"
argument_list|)
operator|+
literal|"        "
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
name|String
name|sep
init|=
literal|""
decl_stmt|;
for|for
control|(
name|UUID
name|uuid
range|:
name|cleaned
control|)
block|{
name|uuids
operator|.
name|append
argument_list|(
name|sep
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|++
operator|%
literal|4
operator|==
literal|0
condition|)
block|{
name|uuids
operator|.
name|append
argument_list|(
name|newLine
argument_list|)
expr_stmt|;
block|}
name|uuids
operator|.
name|append
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
name|sep
operator|=
literal|", "
expr_stmt|;
block|}
name|GC_LOG
operator|.
name|info
argument_list|(
literal|"TarMK cleaned segments from {}: {}"
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|,
name|uuids
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return  {@code true} iff this reader has been closed      * @see #close()      */
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|access
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//-----------------------------------------------------------< private>--
comment|/**      * Loads and parses the optional pre-compiled graph entry from the given tar      * file.      *      * @return the parsed graph, or {@code null} if one was not found      * @throws IOException if the tar file could not be read      */
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|getGraph
parameter_list|(
name|boolean
name|bulkOnly
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBuffer
name|graph
init|=
name|loadGraph
argument_list|()
decl_stmt|;
if|if
condition|(
name|graph
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|parseGraph
argument_list|(
name|graph
argument_list|,
name|bulkOnly
argument_list|)
return|;
block|}
block|}
specifier|private
name|boolean
name|hasGraph
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasGraph
condition|)
block|{
try|try
block|{
name|loadGraph
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{ }
block|}
return|return
name|hasGraph
return|;
block|}
specifier|private
name|int
name|getIndexEntrySize
parameter_list|()
block|{
return|return
name|getEntrySize
argument_list|(
name|index
operator|.
name|remaining
argument_list|()
operator|+
literal|16
argument_list|)
return|;
block|}
specifier|private
name|int
name|getGraphEntrySize
parameter_list|()
block|{
name|ByteBuffer
name|buffer
decl_stmt|;
try|try
block|{
name|buffer
operator|=
name|loadGraph
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|getEntrySize
argument_list|(
name|buffer
operator|.
name|getInt
argument_list|(
name|buffer
operator|.
name|limit
argument_list|()
operator|-
literal|8
argument_list|)
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|UUID
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|getBinaryReferences
parameter_list|()
block|{
name|ByteBuffer
name|buffer
decl_stmt|;
try|try
block|{
name|buffer
operator|=
name|loadBinaryReferences
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|parseBinaryReferences
argument_list|(
name|buffer
argument_list|)
return|;
block|}
specifier|private
name|ByteBuffer
name|loadBinaryReferences
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|end
init|=
name|access
operator|.
name|length
argument_list|()
operator|-
literal|2
operator|*
name|BLOCK_SIZE
operator|-
name|getIndexEntrySize
argument_list|()
operator|-
name|getGraphEntrySize
argument_list|()
decl_stmt|;
name|ByteBuffer
name|meta
init|=
name|access
operator|.
name|read
argument_list|(
name|end
operator|-
literal|16
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|int
name|crc32
init|=
name|meta
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|meta
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|meta
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|magic
init|=
name|meta
operator|.
name|getInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|magic
operator|!=
name|BINARY_REFERENCES_MAGIC
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid binary references magic number"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|count
operator|<
literal|0
operator|||
name|size
operator|<
name|count
operator|*
literal|22
operator|+
literal|16
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid binary references size or count"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|ByteBuffer
name|buffer
init|=
name|access
operator|.
name|read
argument_list|(
name|end
operator|-
name|size
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
operator|-
literal|16
index|]
decl_stmt|;
name|buffer
operator|.
name|mark
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|CRC32
name|checksum
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
call|(
name|int
call|)
argument_list|(
name|checksum
operator|.
name|getValue
argument_list|()
argument_list|)
operator|!=
name|crc32
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid binary references checksum"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|buffer
return|;
block|}
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|UUID
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|parseBinaryReferences
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|int
name|nGenerations
init|=
name|buffer
operator|.
name|getInt
argument_list|(
name|buffer
operator|.
name|limit
argument_list|()
operator|-
literal|12
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|UUID
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|binaryReferences
init|=
name|newHashMapWithExpectedSize
argument_list|(
name|nGenerations
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nGenerations
condition|;
name|i
operator|++
control|)
block|{
name|int
name|generation
init|=
name|buffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|segmentCount
init|=
name|buffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|UUID
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|segments
init|=
name|newHashMapWithExpectedSize
argument_list|(
name|segmentCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|segmentCount
condition|;
name|j
operator|++
control|)
block|{
name|long
name|msb
init|=
name|buffer
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|buffer
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|int
name|referenceCount
init|=
name|buffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|references
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|referenceCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|referenceCount
condition|;
name|k
operator|++
control|)
block|{
name|int
name|length
init|=
name|buffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|references
operator|.
name|add
argument_list|(
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|segments
operator|.
name|put
argument_list|(
operator|new
name|UUID
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
argument_list|,
name|references
argument_list|)
expr_stmt|;
block|}
name|binaryReferences
operator|.
name|put
argument_list|(
name|generation
argument_list|,
name|segments
argument_list|)
expr_stmt|;
block|}
return|return
name|binaryReferences
return|;
block|}
comment|/**      * Loads the optional pre-compiled graph entry from the given tar file.      *      * @return graph buffer, or {@code null} if one was not found      * @throws IOException if the tar file could not be read      */
specifier|private
name|ByteBuffer
name|loadGraph
parameter_list|()
throws|throws
name|IOException
block|{
comment|// read the graph metadata just before the tar index entry
name|int
name|pos
init|=
name|access
operator|.
name|length
argument_list|()
operator|-
literal|2
operator|*
name|BLOCK_SIZE
operator|-
name|getIndexEntrySize
argument_list|()
decl_stmt|;
name|ByteBuffer
name|meta
init|=
name|access
operator|.
name|read
argument_list|(
name|pos
operator|-
literal|16
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|int
name|crc32
init|=
name|meta
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|meta
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|bytes
init|=
name|meta
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|magic
init|=
name|meta
operator|.
name|getInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|magic
operator|!=
name|GRAPH_MAGIC
condition|)
block|{
return|return
literal|null
return|;
comment|// magic byte mismatch
block|}
if|if
condition|(
name|count
operator|<
literal|0
operator|||
name|bytes
argument_list|<
name|count
operator|*
literal|16
operator|+
literal|16
operator|||
name|BLOCK_SIZE
operator|+
name|bytes
argument_list|>
name|pos
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid graph metadata in tar file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// impossible uuid and/or byte counts
block|}
comment|// this involves seeking backwards in the file, which might not
comment|// perform well, but that's OK since we only do this once per file
name|ByteBuffer
name|graph
init|=
name|access
operator|.
name|read
argument_list|(
name|pos
operator|-
name|bytes
argument_list|,
name|bytes
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|bytes
operator|-
literal|16
index|]
decl_stmt|;
name|graph
operator|.
name|mark
argument_list|()
expr_stmt|;
name|graph
operator|.
name|get
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|graph
operator|.
name|reset
argument_list|()
expr_stmt|;
name|CRC32
name|checksum
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|crc32
operator|!=
operator|(
name|int
operator|)
name|checksum
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid graph checksum in tar file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// checksum mismatch
block|}
name|hasGraph
operator|=
literal|true
expr_stmt|;
return|return
name|graph
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|parseGraph
parameter_list|(
name|ByteBuffer
name|graphByteBuffer
parameter_list|,
name|boolean
name|bulkOnly
parameter_list|)
block|{
name|int
name|count
init|=
name|graphByteBuffer
operator|.
name|getInt
argument_list|(
name|graphByteBuffer
operator|.
name|limit
argument_list|()
operator|-
literal|12
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|graphByteBuffer
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|limit
argument_list|(
name|graphByteBuffer
operator|.
name|limit
argument_list|()
operator|-
literal|16
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UUID
argument_list|>
name|uuids
init|=
name|newArrayListWithCapacity
argument_list|(
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|uuids
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
name|buffer
operator|.
name|getLong
argument_list|()
argument_list|,
name|buffer
operator|.
name|getLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|graph
init|=
name|newHashMap
argument_list|()
decl_stmt|;
while|while
condition|(
name|buffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|UUID
name|uuid
init|=
name|uuids
operator|.
name|get
argument_list|(
name|buffer
operator|.
name|getInt
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|UUID
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|int
name|refid
init|=
name|buffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
while|while
condition|(
name|refid
operator|!=
operator|-
literal|1
condition|)
block|{
name|UUID
name|ref
init|=
name|uuids
operator|.
name|get
argument_list|(
name|refid
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bulkOnly
operator|||
operator|!
name|isDataSegmentId
argument_list|(
name|ref
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|refid
operator|=
name|buffer
operator|.
name|getInt
argument_list|()
expr_stmt|;
block|}
name|graph
operator|.
name|put
argument_list|(
name|uuid
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
return|return
name|graph
return|;
block|}
specifier|private
specifier|static
name|String
name|readString
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|fieldSize
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|fieldSize
index|]
decl_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|n
operator|<
name|fieldSize
operator|&&
name|b
index|[
name|n
index|]
operator|!=
literal|0
condition|)
block|{
name|n
operator|++
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|n
argument_list|,
name|UTF_8
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|readNumber
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|fieldSize
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|fieldSize
index|]
decl_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|int
name|number
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldSize
condition|;
name|i
operator|++
control|)
block|{
name|int
name|digit
init|=
name|b
index|[
name|i
index|]
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
literal|'0'
operator|<=
name|digit
operator|&&
name|digit
operator|<=
literal|'7'
condition|)
block|{
name|number
operator|=
name|number
operator|*
literal|8
operator|+
name|digit
operator|-
literal|'0'
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|number
return|;
block|}
name|File
name|getFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
comment|//------------------------------------------------------------< Object>--
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|file
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

