begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|autosave
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_class
specifier|public
class|class
name|GroupImplTest
extends|extends
name|AbstractAutoSaveTest
block|{
specifier|private
name|Group
name|dlg
decl_stmt|;
specifier|private
name|User
name|memberDlg
decl_stmt|;
specifier|private
name|GroupImpl
name|group
decl_stmt|;
annotation|@
name|Before
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|Group
name|g
init|=
name|mgrDlg
operator|.
name|createGroup
argument_list|(
literal|"g"
argument_list|)
decl_stmt|;
name|memberDlg
operator|=
name|mgrDlg
operator|.
name|createUser
argument_list|(
literal|"u"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|memberDlg
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|dlg
operator|=
name|spy
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dlg
operator|instanceof
name|GroupImpl
argument_list|)
expr_stmt|;
name|group
operator|=
operator|new
name|GroupImpl
argument_list|(
name|dlg
argument_list|,
name|autosaveMgr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|dlg
operator|.
name|remove
argument_list|()
expr_stmt|;
name|memberDlg
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDeclaredMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|group
operator|.
name|getDeclaredMembers
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dlg
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getDeclaredMembers
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|group
operator|.
name|getMembers
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dlg
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getMembers
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsDeclaredMember
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|u
init|=
operator|new
name|UserImpl
argument_list|(
name|memberDlg
argument_list|,
name|autosaveMgr
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|group
operator|.
name|isDeclaredMember
argument_list|(
name|memberDlg
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|group
operator|.
name|isDeclaredMember
argument_list|(
name|u
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dlg
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isDeclaredMember
argument_list|(
name|memberDlg
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dlg
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|isDeclaredMember
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsMember
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|u
init|=
operator|new
name|UserImpl
argument_list|(
name|memberDlg
argument_list|,
name|autosaveMgr
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|group
operator|.
name|isMember
argument_list|(
name|memberDlg
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|group
operator|.
name|isMember
argument_list|(
name|u
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dlg
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isMember
argument_list|(
name|memberDlg
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dlg
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|isMember
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddInvalidMember
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|group
operator|.
name|addMember
argument_list|(
name|getTestUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dlg
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|addMember
argument_list|(
name|getTestUser
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|autosaveMgr
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|autosave
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddMember
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|u
init|=
operator|new
name|UserImpl
argument_list|(
name|getTestUser
argument_list|()
argument_list|,
name|autosaveMgr
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|group
operator|.
name|addMember
argument_list|(
name|u
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dlg
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|addMember
argument_list|(
name|getTestUser
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|autosaveMgr
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|autosave
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddMembersById
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"m1"
argument_list|,
literal|"m2"
argument_list|,
literal|"m3"
argument_list|)
argument_list|,
name|group
operator|.
name|addMembers
argument_list|(
literal|"m1"
argument_list|,
literal|"m2"
argument_list|,
literal|"m3"
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dlg
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|addMembers
argument_list|(
literal|"m1"
argument_list|,
literal|"m2"
argument_list|,
literal|"m3"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|autosaveMgr
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|autosave
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveInvalidMember
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|group
operator|.
name|removeMember
argument_list|(
name|memberDlg
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dlg
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|removeMember
argument_list|(
name|memberDlg
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|autosaveMgr
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|autosave
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveMember
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|u
init|=
operator|new
name|UserImpl
argument_list|(
name|memberDlg
argument_list|,
name|autosaveMgr
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|group
operator|.
name|removeMember
argument_list|(
name|u
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dlg
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|removeMember
argument_list|(
name|memberDlg
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|autosaveMgr
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|autosave
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveMembersById
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|,
name|group
operator|.
name|removeMembers
argument_list|(
literal|"u"
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dlg
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|removeMembers
argument_list|(
literal|"u"
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|autosaveMgr
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|autosave
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

