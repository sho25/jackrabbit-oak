begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newLinkedList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|AbstractTree
operator|.
name|OAK_CHILD_ORDER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|MISSING_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|MoveDetector
operator|.
name|SOURCE_PATH
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|handler
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_comment
comment|/**  * Generator of a traversable view of events.  */
end_comment

begin_class
specifier|public
class|class
name|EventGenerator
block|{
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|Runnable
argument_list|>
name|continuations
init|=
name|newLinkedList
argument_list|()
decl_stmt|;
comment|/**      * Create a new instance of a {@code EventGenerator} reporting events to the      * passed {@code listener} after filtering with the passed {@code filter}.      */
specifier|public
name|EventGenerator
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|before
parameter_list|,
annotation|@
name|Nonnull
name|NodeState
name|after
parameter_list|,
annotation|@
name|Nonnull
name|ChangeHandler
name|handler
parameter_list|)
block|{
name|continuations
operator|.
name|add
argument_list|(
operator|new
name|DiffContinuation
argument_list|(
name|handler
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isComplete
parameter_list|()
block|{
return|return
name|continuations
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|generate
parameter_list|()
block|{
if|if
condition|(
operator|!
name|continuations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|continuations
operator|.
name|removeFirst
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|DiffContinuation
implements|implements
name|NodeStateDiff
implements|,
name|Runnable
block|{
comment|/**          * The diff handler of the parent node, or {@code null} for the root.          */
specifier|private
specifier|final
name|DiffContinuation
name|parent
decl_stmt|;
comment|/**          * The name of this node, or the empty string for the root.          */
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|/**          * Before state, or {@code MISSING_NODE} if this node was added.          */
specifier|private
specifier|final
name|NodeState
name|before
decl_stmt|;
comment|/**          * After state, or {@code MISSING_NODE} if this node was removed.          */
specifier|private
specifier|final
name|NodeState
name|after
decl_stmt|;
comment|/**          * Filtered handler of detected content changes.          */
specifier|private
specifier|final
name|ChangeHandler
name|handler
decl_stmt|;
name|DiffContinuation
parameter_list|(
name|ChangeHandler
name|handler
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|before
operator|=
name|before
expr_stmt|;
name|this
operator|.
name|after
operator|=
name|after
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
block|}
specifier|private
name|DiffContinuation
parameter_list|(
name|DiffContinuation
name|parent
parameter_list|,
name|ChangeHandler
name|handler
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|before
operator|=
name|before
expr_stmt|;
name|this
operator|.
name|after
operator|=
name|after
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
block|}
comment|//------------------------------------------------------< Runnable>--
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|before
operator|==
name|MISSING_NODE
condition|)
block|{
comment|// postponed handling of added nodes
name|parent
operator|.
name|handleAddedNode
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|after
operator|==
name|MISSING_NODE
condition|)
block|{
comment|// postponed handling of removed nodes
name|parent
operator|.
name|handleDeletedNode
argument_list|(
name|name
argument_list|,
name|before
argument_list|)
expr_stmt|;
block|}
block|}
comment|// process changes below this node
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|//-------------------------------------------------< NodeStateDiff>--
annotation|@
name|Override
specifier|public
name|boolean
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
name|handler
operator|.
name|propertyAdded
argument_list|(
name|after
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
comment|// check for reordering of child nodes
if|if
condition|(
name|OAK_CHILD_ORDER
operator|.
name|equals
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|handleReorderedNodes
argument_list|(
name|before
operator|.
name|getValue
argument_list|(
name|NAMES
argument_list|)
argument_list|,
name|after
operator|.
name|getValue
argument_list|(
name|NAMES
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|propertyChanged
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
name|handler
operator|.
name|propertyDeleted
argument_list|(
name|before
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
if|if
condition|(
operator|!
name|addChildEventGenerator
argument_list|(
name|name
argument_list|,
name|MISSING_NODE
argument_list|,
name|after
argument_list|)
condition|)
block|{
name|handleAddedNode
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
expr_stmt|;
comment|// not postponed
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|addChildEventGenerator
argument_list|(
name|name
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
if|if
condition|(
operator|!
name|addChildEventGenerator
argument_list|(
name|name
argument_list|,
name|before
argument_list|,
name|MISSING_NODE
argument_list|)
condition|)
block|{
name|handleDeletedNode
argument_list|(
name|name
argument_list|,
name|before
argument_list|)
expr_stmt|;
comment|// not postponed
block|}
return|return
literal|true
return|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
name|boolean
name|addChildEventGenerator
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|ChangeHandler
name|h
init|=
name|handler
operator|.
name|getChildHandler
argument_list|(
name|name
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|!=
literal|null
condition|)
block|{
name|continuations
operator|.
name|add
argument_list|(
operator|new
name|DiffContinuation
argument_list|(
name|this
argument_list|,
name|h
argument_list|,
name|name
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|void
name|handleAddedNode
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|PropertyState
name|sourceProperty
init|=
name|after
operator|.
name|getProperty
argument_list|(
name|SOURCE_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceProperty
operator|!=
literal|null
condition|)
block|{
name|String
name|sourcePath
init|=
name|sourceProperty
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
decl_stmt|;
name|handler
operator|.
name|nodeMoved
argument_list|(
name|sourcePath
argument_list|,
name|name
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|nodeAdded
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|handleDeletedNode
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
name|handler
operator|.
name|nodeDeleted
argument_list|(
name|name
argument_list|,
name|before
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleReorderedNodes
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|before
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|after
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|afterNames
init|=
name|newArrayList
argument_list|(
name|after
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|beforeNames
init|=
name|newArrayList
argument_list|(
name|before
argument_list|)
decl_stmt|;
name|afterNames
operator|.
name|retainAll
argument_list|(
name|beforeNames
argument_list|)
expr_stmt|;
name|beforeNames
operator|.
name|retainAll
argument_list|(
name|afterNames
argument_list|)
expr_stmt|;
comment|// Selection sort beforeNames into afterNames recording the swaps as we go
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|afterNames
operator|.
name|size
argument_list|()
condition|;
name|a
operator|++
control|)
block|{
name|String
name|afterName
init|=
name|afterNames
operator|.
name|get
argument_list|(
name|a
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|b
init|=
name|a
init|;
name|b
operator|<
name|beforeNames
operator|.
name|size
argument_list|()
condition|;
name|b
operator|++
control|)
block|{
name|String
name|beforeName
init|=
name|beforeNames
operator|.
name|get
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
name|b
operator|&&
name|beforeName
operator|.
name|equals
argument_list|(
name|afterName
argument_list|)
condition|)
block|{
name|beforeNames
operator|.
name|set
argument_list|(
name|b
argument_list|,
name|beforeNames
operator|.
name|get
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|beforeNames
operator|.
name|set
argument_list|(
name|a
argument_list|,
name|beforeName
argument_list|)
expr_stmt|;
name|String
name|destName
init|=
name|beforeNames
operator|.
name|get
argument_list|(
name|a
operator|+
literal|1
argument_list|)
decl_stmt|;
name|NodeState
name|afterChild
init|=
name|this
operator|.
name|after
operator|.
name|getChildNode
argument_list|(
name|afterName
argument_list|)
decl_stmt|;
name|handler
operator|.
name|nodeReordered
argument_list|(
name|destName
argument_list|,
name|afterName
argument_list|,
name|afterChild
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

