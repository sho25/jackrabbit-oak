begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|simple
operator|.
name|NodeImpl
import|;
end_import

begin_comment
comment|/**  * Traverse the nodes in two repositories / revisions / nodes in order to  * synchronize them or list the differences.  *<p>  * If the target is not set, the tool can be used to list or backup the content,  * for (data store) garbage collection, or similar.  */
end_comment

begin_class
specifier|public
class|class
name|Sync
block|{
specifier|private
name|MicroKernel
name|sourceMk
decl_stmt|,
name|targetMk
decl_stmt|;
specifier|private
name|String
name|sourceRev
decl_stmt|,
name|targetRev
decl_stmt|;
specifier|private
name|String
name|sourcePath
decl_stmt|,
name|targetPath
init|=
literal|"/"
decl_stmt|;
specifier|private
name|boolean
name|useContentHashOptimization
decl_stmt|;
specifier|private
name|int
name|childNodesPerBatch
init|=
literal|100
decl_stmt|;
specifier|private
name|Handler
name|handler
decl_stmt|;
comment|/**      * Set the source (required).      *      * @param mk the source      * @param rev the revision      * @param path the path      */
specifier|public
name|void
name|setSource
parameter_list|(
name|MicroKernel
name|mk
parameter_list|,
name|String
name|rev
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|sourceMk
operator|=
name|mk
expr_stmt|;
name|sourceRev
operator|=
name|rev
expr_stmt|;
name|sourcePath
operator|=
name|path
expr_stmt|;
block|}
comment|/**      * Set the target (optional). If not set, the tool assumes no nodes exist on      * the target.      *      * @param mk the target      * @param rev the revision      * @param path the path      */
specifier|public
name|void
name|setTarget
parameter_list|(
name|MicroKernel
name|mk
parameter_list|,
name|String
name|rev
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|targetMk
operator|=
name|mk
expr_stmt|;
name|targetRev
operator|=
name|rev
expr_stmt|;
name|targetPath
operator|=
name|path
expr_stmt|;
block|}
comment|/**      * Whether to use the content hash optimization if available.      *      * @return true if the optimization should be used      */
specifier|public
name|boolean
name|getUseContentHashOptimization
parameter_list|()
block|{
return|return
name|useContentHashOptimization
return|;
block|}
comment|/**      * Use the content hash optimization if available.      *      * @param useContentHashOptimization the new value      */
specifier|public
name|void
name|setUseContentHashOptimization
parameter_list|(
name|boolean
name|useContentHashOptimization
parameter_list|)
block|{
name|this
operator|.
name|useContentHashOptimization
operator|=
name|useContentHashOptimization
expr_stmt|;
block|}
comment|/**      * Get the number of child nodes to request in one call.      *      * @return the number of child nodes to request      */
specifier|public
name|int
name|getChildNodesPerBatch
parameter_list|()
block|{
return|return
name|childNodesPerBatch
return|;
block|}
comment|/**      * Set the number of child nodes to request in one call.      *      * @param childNodesPerBatch the number of child nodes to request      */
specifier|public
name|void
name|setChildNodesPerBatch
parameter_list|(
name|int
name|childNodesPerBatch
parameter_list|)
block|{
name|this
operator|.
name|childNodesPerBatch
operator|=
name|childNodesPerBatch
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|(
name|Handler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
name|visit
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|String
name|relPath
parameter_list|)
block|{
name|String
name|source
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|sourcePath
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|String
name|target
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|targetPath
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|NodeImpl
name|s
init|=
literal|null
decl_stmt|,
name|t
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sourceMk
operator|.
name|nodeExists
argument_list|(
name|source
argument_list|,
name|sourceRev
argument_list|)
condition|)
block|{
name|s
operator|=
name|NodeImpl
operator|.
name|parse
argument_list|(
name|sourceMk
operator|.
name|getNodes
argument_list|(
name|source
argument_list|,
name|sourceRev
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|childNodesPerBatch
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|targetMk
operator|!=
literal|null
operator|&&
name|targetMk
operator|.
name|nodeExists
argument_list|(
name|target
argument_list|,
name|targetRev
argument_list|)
condition|)
block|{
name|t
operator|=
name|NodeImpl
operator|.
name|parse
argument_list|(
name|targetMk
operator|.
name|getNodes
argument_list|(
name|target
argument_list|,
name|targetRev
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|childNodesPerBatch
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|t
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|s
operator|==
name|t
condition|)
block|{
comment|// both don't exist - ok
return|return;
block|}
elseif|else
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|handler
operator|.
name|removeNode
argument_list|(
name|target
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|handler
operator|.
name|addNode
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// properties
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|getPropertyCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|s
operator|.
name|getProperty
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|sourceValue
init|=
name|s
operator|.
name|getPropertyValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|targetValue
init|=
name|t
operator|!=
literal|null
operator|&&
name|t
operator|.
name|hasProperty
argument_list|(
name|name
argument_list|)
condition|?
name|t
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|sourceValue
operator|.
name|equals
argument_list|(
name|targetValue
argument_list|)
condition|)
block|{
name|handler
operator|.
name|setProperty
argument_list|(
name|target
argument_list|,
name|name
argument_list|,
name|sourceValue
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|t
operator|.
name|getPropertyCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|t
operator|.
name|getProperty
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// if it exists in the source, it's already updated
if|if
condition|(
operator|!
name|s
operator|.
name|hasProperty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|handler
operator|.
name|setProperty
argument_list|(
name|target
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// child nodes
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|s
operator|.
name|getTotalChildNodeCount
argument_list|()
operator|>
name|s
operator|.
name|getChildNodeCount
argument_list|()
condition|?
name|getAllChildNodeNames
argument_list|(
name|sourceMk
argument_list|,
name|source
argument_list|,
name|sourceRev
argument_list|,
name|childNodesPerBatch
argument_list|)
else|:
name|s
operator|.
name|getChildNodeNames
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|visit
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|relPath
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|it
operator|=
name|t
operator|.
name|getTotalChildNodeCount
argument_list|()
operator|>
name|t
operator|.
name|getChildNodeCount
argument_list|()
condition|?
name|getAllChildNodeNames
argument_list|(
name|targetMk
argument_list|,
name|target
argument_list|,
name|targetRev
argument_list|,
name|childNodesPerBatch
argument_list|)
else|:
name|t
operator|.
name|getChildNodeNames
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|exists
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// if it exists in the source, it's already updated
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|getTotalChildNodeCount
argument_list|()
operator|>
name|s
operator|.
name|getChildNodeCount
argument_list|()
operator|&&
name|sourceMk
operator|.
name|nodeExists
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|source
argument_list|,
name|name
argument_list|)
argument_list|,
name|sourceRev
argument_list|)
condition|)
block|{
comment|// if it exists in the source, it's already updated
comment|// (in this case, there are many child nodes)
block|}
else|else
block|{
name|visit
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|relPath
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Get a child node name iterator that batches node names. This work      * efficiently for small and big child node lists.      *      * @param mk the implementation      * @param path the path      * @param rev the revision      * @param batchSize the batch size      * @return a child node name iterator      */
specifier|public
specifier|static
name|Iterator
argument_list|<
name|String
argument_list|>
name|getAllChildNodeNames
parameter_list|(
specifier|final
name|MicroKernel
name|mk
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|String
name|rev
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|private
name|long
name|offset
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|String
argument_list|>
name|current
decl_stmt|;
block|{
name|nextBatch
parameter_list|()
constructor_decl|;
block|}
specifier|private
name|void
name|nextBatch
parameter_list|()
block|{
name|NodeImpl
name|n
init|=
name|NodeImpl
operator|.
name|parse
argument_list|(
name|mk
operator|.
name|getNodes
argument_list|(
name|path
argument_list|,
name|rev
argument_list|,
literal|0
argument_list|,
name|offset
argument_list|,
name|batchSize
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|current
operator|=
name|n
operator|.
name|getChildNodeNames
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|batchSize
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|current
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|nextBatch
argument_list|()
expr_stmt|;
block|}
return|return
name|current
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|current
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|nextBatch
argument_list|()
expr_stmt|;
block|}
return|return
name|current
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
comment|/**      * The sync handler.      */
specifier|public
interface|interface
name|Handler
block|{
comment|/**          * The given node needs to be added to the target.          *          * @param path the path          */
name|void
name|addNode
parameter_list|(
name|String
name|path
parameter_list|)
function_decl|;
comment|/**          * The given node needs to be removed from the target.          *          * @param target the path          */
name|void
name|removeNode
parameter_list|(
name|String
name|target
parameter_list|)
function_decl|;
comment|/**          * The given property needs to be set on the target.          *          * @param target the path          * @param property the property name          * @param value the new value, or null to remove it          */
name|void
name|setProperty
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|property
parameter_list|,
name|String
name|value
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

