begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|action
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|MongoNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|MongoCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|QueryBuilder
import|;
end_import

begin_comment
comment|/**  * An action for fetching a commit. An exception is thrown if a commit with the  * revision id does not exist.  */
end_comment

begin_class
specifier|public
class|class
name|FetchCommitAction
extends|extends
name|BaseAction
argument_list|<
name|MongoCommit
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FetchCommitAction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|long
name|revisionId
decl_stmt|;
comment|/**      * Constructs a new {@link FetchCommitAction}      *      * @param nodeStore Node store.      * @param revisionId Revision id.      */
specifier|public
name|FetchCommitAction
parameter_list|(
name|MongoNodeStore
name|nodeStore
parameter_list|,
name|long
name|revisionId
parameter_list|)
block|{
name|super
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
name|this
operator|.
name|revisionId
operator|=
name|revisionId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MongoCommit
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|DBCollection
name|commitCollection
init|=
name|nodeStore
operator|.
name|getCommitCollection
argument_list|()
decl_stmt|;
name|DBObject
name|query
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
name|MongoCommit
operator|.
name|KEY_FAILED
argument_list|)
operator|.
name|notEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
operator|.
name|and
argument_list|(
name|MongoCommit
operator|.
name|KEY_REVISION_ID
argument_list|)
operator|.
name|is
argument_list|(
name|revisionId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing query: {}"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|DBObject
name|dbObject
init|=
name|commitCollection
operator|.
name|findOne
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbObject
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Commit with revision %d could not be found"
argument_list|,
name|revisionId
argument_list|)
argument_list|)
throw|;
block|}
return|return
operator|(
name|MongoCommit
operator|)
name|dbObject
return|;
block|}
block|}
end_class

end_unit

