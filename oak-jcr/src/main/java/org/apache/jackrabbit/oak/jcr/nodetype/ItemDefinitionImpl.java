begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|nodetype
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ItemDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|OnParentVersionAction
import|;
end_import

begin_comment
comment|/**  * Adapter class for turning an in-content property or node definition  * node ("nt:propertyDefinition" or "nt:childNodeDefinition") to an  * {@link ItemDefinition} instance.  */
end_comment

begin_class
class|class
name|ItemDefinitionImpl
extends|extends
name|TypeNode
implements|implements
name|ItemDefinition
block|{
specifier|private
specifier|final
name|NodeType
name|type
decl_stmt|;
specifier|protected
name|ItemDefinitionImpl
parameter_list|(
name|NodeType
name|type
parameter_list|,
name|Node
name|node
parameter_list|)
block|{
name|super
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|protected
name|void
name|appendItemCND
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|requiredType
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|requiredType
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|requiredType
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
operator|.
name|append
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAutoCreated
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" autocreated"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isMandatory
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" mandatory"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isProtected
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" protected"
argument_list|)
expr_stmt|;
block|}
name|int
name|opv
init|=
name|getOnParentVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|opv
operator|!=
name|OnParentVersionAction
operator|.
name|COPY
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|OnParentVersionAction
operator|.
name|nameFromValue
argument_list|(
name|opv
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//----------------------------------------------------< ItemDefinition>--
annotation|@
name|Override
specifier|public
name|NodeType
name|getDeclaringNodeType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/** CND:<pre>- jcr:name (NAME) protected</pre> */
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getString
argument_list|(
name|Property
operator|.
name|JCR_NAME
argument_list|,
literal|"*"
argument_list|)
return|;
block|}
comment|/** CND:<pre>- jcr:autoCreated (BOOLEAN) protected mandatory</pre> */
annotation|@
name|Override
specifier|public
name|boolean
name|isAutoCreated
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|Property
operator|.
name|JCR_AUTOCREATED
argument_list|)
return|;
block|}
comment|/** CND:<pre>- jcr:mandatory (BOOLEAN) protected mandatory</pre> */
annotation|@
name|Override
specifier|public
name|boolean
name|isMandatory
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|Property
operator|.
name|JCR_MANDATORY
argument_list|)
return|;
block|}
comment|/**      * CND:      *<pre>      * - jcr:onParentVersion (STRING) protected mandatory      *&lt; 'COPY', 'VERSION', 'INITIALIZE', 'COMPUTE', 'IGNORE', 'ABORT'      *</pre>      */
annotation|@
name|Override
specifier|public
name|int
name|getOnParentVersion
parameter_list|()
block|{
try|try
block|{
return|return
name|OnParentVersionAction
operator|.
name|valueFromName
argument_list|(
name|getString
argument_list|(
name|Property
operator|.
name|JCR_ON_PARENT_VERSION
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
name|illegalState
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** CND:<pre>- jcr:protected (BOOLEAN) protected mandatory</pre> */
annotation|@
name|Override
specifier|public
name|boolean
name|isProtected
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|Property
operator|.
name|JCR_PROTECTED
argument_list|)
return|;
block|}
block|}
end_class

end_unit

