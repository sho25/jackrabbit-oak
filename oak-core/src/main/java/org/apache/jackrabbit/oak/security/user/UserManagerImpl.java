begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|query
operator|.
name|XPathQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|query
operator|.
name|XPathQueryEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|MembershipProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|action
operator|.
name|AuthorizableAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * UserManagerImpl...  */
end_comment

begin_class
specifier|public
class|class
name|UserManagerImpl
implements|implements
name|UserManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UserManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Session
name|session
decl_stmt|;
specifier|private
specifier|final
name|NamePathMapper
name|namePathMapper
decl_stmt|;
specifier|private
specifier|final
name|UserProvider
name|userProvider
decl_stmt|;
specifier|private
specifier|final
name|MembershipProvider
name|membershipProvider
decl_stmt|;
specifier|private
specifier|final
name|ConfigurationParameters
name|config
decl_stmt|;
specifier|public
name|UserManagerImpl
parameter_list|(
name|Session
name|session
parameter_list|,
name|NamePathMapper
name|namePathMapper
parameter_list|,
name|UserProvider
name|userProvider
parameter_list|,
name|MembershipProvider
name|membershipProvider
parameter_list|,
name|ConfigurationParameters
name|config
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|this
operator|.
name|namePathMapper
operator|=
name|namePathMapper
expr_stmt|;
name|this
operator|.
name|userProvider
operator|=
name|userProvider
expr_stmt|;
name|this
operator|.
name|membershipProvider
operator|=
name|membershipProvider
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
comment|//--------------------------------------------------------< UserManager>---
comment|/**      * @see UserManager#getAuthorizable(String)      */
annotation|@
name|Override
specifier|public
name|Authorizable
name|getAuthorizable
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkIsLive
argument_list|()
expr_stmt|;
name|Authorizable
name|authorizable
init|=
literal|null
decl_stmt|;
name|Tree
name|tree
init|=
name|getUserProvider
argument_list|()
operator|.
name|getAuthorizable
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|!=
literal|null
condition|)
block|{
name|authorizable
operator|=
name|getAuthorizable
argument_list|(
name|id
argument_list|,
name|tree
argument_list|)
expr_stmt|;
block|}
return|return
name|authorizable
return|;
block|}
comment|/**      * @see UserManager#getAuthorizable(Principal)      */
annotation|@
name|Override
specifier|public
name|Authorizable
name|getAuthorizable
parameter_list|(
name|Principal
name|principal
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkIsLive
argument_list|()
expr_stmt|;
return|return
name|getAuthorizable
argument_list|(
name|getUserProvider
argument_list|()
operator|.
name|getAuthorizableByPrincipal
argument_list|(
name|principal
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * @see UserManager#getAuthorizableByPath(String)      */
annotation|@
name|Override
specifier|public
name|Authorizable
name|getAuthorizableByPath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkIsLive
argument_list|()
expr_stmt|;
name|String
name|oakPath
init|=
name|namePathMapper
operator|.
name|getOakPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|oakPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Invalid path "
operator|+
name|path
argument_list|)
throw|;
block|}
return|return
name|getAuthorizable
argument_list|(
name|getUserProvider
argument_list|()
operator|.
name|getAuthorizableByPath
argument_list|(
name|oakPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|findAuthorizables
parameter_list|(
name|String
name|relPath
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|findAuthorizables
argument_list|(
name|relPath
argument_list|,
name|value
argument_list|,
name|SEARCH_TYPE_AUTHORIZABLE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|findAuthorizables
parameter_list|(
name|String
name|relPath
parameter_list|,
name|String
name|value
parameter_list|,
name|int
name|searchType
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkIsLive
argument_list|()
expr_stmt|;
name|String
index|[]
name|oakPaths
init|=
operator|new
name|String
index|[]
block|{
name|namePathMapper
operator|.
name|getOakPath
argument_list|(
name|relPath
argument_list|)
block|}
decl_stmt|;
name|AuthorizableType
name|authorizableType
init|=
name|getAuthorizableType
argument_list|(
name|searchType
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Tree
argument_list|>
name|result
init|=
name|userProvider
operator|.
name|findAuthorizables
argument_list|(
name|oakPaths
argument_list|,
name|value
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|authorizableType
argument_list|)
decl_stmt|;
return|return
name|AuthorizableIterator
operator|.
name|create
argument_list|(
name|result
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|findAuthorizables
parameter_list|(
name|Query
name|query
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkIsLive
argument_list|()
expr_stmt|;
name|XPathQueryBuilder
name|builder
init|=
operator|new
name|XPathQueryBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|build
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
operator|new
name|XPathQueryEvaluator
argument_list|(
name|builder
argument_list|,
name|this
argument_list|,
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
argument_list|,
name|namePathMapper
argument_list|)
operator|.
name|eval
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|User
name|createUser
parameter_list|(
specifier|final
name|String
name|userID
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Principal
name|principal
init|=
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|userID
return|;
block|}
block|}
decl_stmt|;
return|return
name|createUser
argument_list|(
name|userID
argument_list|,
name|password
argument_list|,
name|principal
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|User
name|createUser
parameter_list|(
name|String
name|userID
parameter_list|,
name|String
name|password
parameter_list|,
name|Principal
name|principal
parameter_list|,
name|String
name|intermediatePath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkIsLive
argument_list|()
expr_stmt|;
name|checkValidID
argument_list|(
name|userID
argument_list|)
expr_stmt|;
name|checkValidPrincipal
argument_list|(
name|principal
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|intermediatePath
operator|!=
literal|null
condition|)
block|{
name|intermediatePath
operator|=
name|namePathMapper
operator|.
name|getOakPath
argument_list|(
name|intermediatePath
argument_list|)
expr_stmt|;
block|}
name|Tree
name|userTree
init|=
name|userProvider
operator|.
name|createUser
argument_list|(
name|userID
argument_list|,
name|intermediatePath
argument_list|)
decl_stmt|;
name|setPrincipal
argument_list|(
name|userTree
argument_list|,
name|principal
argument_list|)
expr_stmt|;
if|if
condition|(
name|password
operator|!=
literal|null
condition|)
block|{
name|userProvider
operator|.
name|setPassword
argument_list|(
name|userTree
argument_list|,
name|password
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|User
name|user
init|=
operator|new
name|UserImpl
argument_list|(
name|userID
argument_list|,
name|userTree
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|onCreate
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"User created: "
operator|+
name|userID
argument_list|)
expr_stmt|;
return|return
name|user
return|;
block|}
annotation|@
name|Override
specifier|public
name|Group
name|createGroup
parameter_list|(
specifier|final
name|String
name|groupID
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Principal
name|principal
init|=
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|groupID
return|;
block|}
block|}
decl_stmt|;
return|return
name|createGroup
argument_list|(
name|groupID
argument_list|,
name|principal
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Group
name|createGroup
parameter_list|(
name|Principal
name|principal
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|createGroup
argument_list|(
name|principal
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Group
name|createGroup
parameter_list|(
name|Principal
name|principal
parameter_list|,
name|String
name|intermediatePath
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|createGroup
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|principal
argument_list|,
name|intermediatePath
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Group
name|createGroup
parameter_list|(
name|String
name|groupID
parameter_list|,
name|Principal
name|principal
parameter_list|,
name|String
name|intermediatePath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkIsLive
argument_list|()
expr_stmt|;
name|checkValidID
argument_list|(
name|groupID
argument_list|)
expr_stmt|;
name|checkValidPrincipal
argument_list|(
name|principal
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|intermediatePath
operator|!=
literal|null
condition|)
block|{
name|intermediatePath
operator|=
name|namePathMapper
operator|.
name|getOakPath
argument_list|(
name|intermediatePath
argument_list|)
expr_stmt|;
block|}
name|Tree
name|groupTree
init|=
name|getUserProvider
argument_list|()
operator|.
name|createGroup
argument_list|(
name|groupID
argument_list|,
name|intermediatePath
argument_list|)
decl_stmt|;
name|setPrincipal
argument_list|(
name|groupTree
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|Group
name|group
init|=
operator|new
name|GroupImpl
argument_list|(
name|groupID
argument_list|,
name|groupTree
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|onCreate
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Group created: "
operator|+
name|groupID
argument_list|)
expr_stmt|;
return|return
name|group
return|;
block|}
comment|/**      * Always returns {@code false}. Any modifications made to this user      * manager instance require a subsequent call to {@link javax.jcr.Session#save()}      * in order to have the changes persisted.      *      * @see org.apache.jackrabbit.api.security.user.UserManager#isAutoSave()      */
annotation|@
name|Override
specifier|public
name|boolean
name|isAutoSave
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Changing the auto-save behavior is not supported by this implementation      * and this method always throws {@code UnsupportedRepositoryOperationException}      *      * @see UserManager#autoSave(boolean)      */
annotation|@
name|Override
specifier|public
name|void
name|autoSave
parameter_list|(
name|boolean
name|enable
parameter_list|)
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"Session#save() is always required."
argument_list|)
throw|;
block|}
comment|//--------------------------------------------------------------------------
comment|/**      * Let the configured {@code AuthorizableAction}s perform additional      * tasks associated with the creation of the new user before the      * corresponding new node is persisted.      *      * @param user The new user.      * @param password The password.      * @throws RepositoryException If an exception occurs.      */
name|void
name|onCreate
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|AuthorizableAction
name|action
range|:
name|getAuthorizableActions
argument_list|()
control|)
block|{
name|action
operator|.
name|onCreate
argument_list|(
name|user
argument_list|,
name|password
argument_list|,
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Let the configured {@code AuthorizableAction}s perform additional      * tasks associated with the creation of the new group before the      * corresponding new node is persisted.      *      * @param group The new group.      * @throws RepositoryException If an exception occurs.      */
name|void
name|onCreate
parameter_list|(
name|Group
name|group
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|AuthorizableAction
name|action
range|:
name|getAuthorizableActions
argument_list|()
control|)
block|{
name|action
operator|.
name|onCreate
argument_list|(
name|group
argument_list|,
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Let the configured {@code AuthorizableAction}s perform any clean      * up tasks related to the authorizable removal (before the corresponding      * node gets removed).      *      * @param authorizable The authorizable to be removed.      * @throws RepositoryException If an exception occurs.      */
name|void
name|onRemove
parameter_list|(
name|Authorizable
name|authorizable
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|AuthorizableAction
name|action
range|:
name|getAuthorizableActions
argument_list|()
control|)
block|{
name|action
operator|.
name|onRemove
argument_list|(
name|authorizable
argument_list|,
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Let the configured {@code AuthorizableAction}s perform additional      * tasks associated with password changing of a given user before the      * corresponding property is being changed.      *      * @param user The target user.      * @param password The new password.      * @throws RepositoryException If an exception occurs.      */
name|void
name|onPasswordChange
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|AuthorizableAction
name|action
range|:
name|getAuthorizableActions
argument_list|()
control|)
block|{
name|action
operator|.
name|onPasswordChange
argument_list|(
name|user
argument_list|,
name|password
argument_list|,
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|AuthorizableAction
index|[]
name|getAuthorizableActions
parameter_list|()
block|{
return|return
name|config
operator|.
name|getConfigValue
argument_list|(
name|UserConstants
operator|.
name|PARAM_AUTHORIZABLE_ACTIONS
argument_list|,
operator|new
name|AuthorizableAction
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|//--------------------------------------------------------------------------
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
name|NamePathMapper
name|getNamePathMapper
parameter_list|()
block|{
return|return
name|namePathMapper
return|;
block|}
name|UserProvider
name|getUserProvider
parameter_list|()
block|{
return|return
name|userProvider
return|;
block|}
name|MembershipProvider
name|getMembershipProvider
parameter_list|()
block|{
return|return
name|membershipProvider
return|;
block|}
name|PrincipalProvider
name|getPrincipalProvider
parameter_list|()
throws|throws
name|RepositoryException
block|{
if|if
condition|(
operator|!
operator|(
name|session
operator|instanceof
name|JackrabbitSession
operator|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"Principal management not supported"
argument_list|)
throw|;
block|}
name|JackrabbitSession
name|js
init|=
operator|(
name|JackrabbitSession
operator|)
name|session
decl_stmt|;
return|return
operator|(
operator|(
name|PrincipalManagerImpl
operator|)
name|js
operator|.
name|getPrincipalManager
argument_list|()
operator|)
operator|.
name|getPrincipalProvider
argument_list|()
return|;
block|}
annotation|@
name|CheckForNull
name|Authorizable
name|getAuthorizable
parameter_list|(
name|Tree
name|tree
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getAuthorizable
argument_list|(
name|userProvider
operator|.
name|getAuthorizableId
argument_list|(
name|tree
argument_list|)
argument_list|,
name|tree
argument_list|)
return|;
block|}
annotation|@
name|CheckForNull
specifier|private
name|Authorizable
name|getAuthorizable
parameter_list|(
name|String
name|id
parameter_list|,
name|Tree
name|tree
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|tree
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|userProvider
operator|.
name|isAuthorizableType
argument_list|(
name|tree
argument_list|,
name|AuthorizableType
operator|.
name|USER
argument_list|)
condition|)
block|{
return|return
operator|new
name|UserImpl
argument_list|(
name|userProvider
operator|.
name|getAuthorizableId
argument_list|(
name|tree
argument_list|)
argument_list|,
name|tree
argument_list|,
name|this
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|userProvider
operator|.
name|isAuthorizableType
argument_list|(
name|tree
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|)
condition|)
block|{
return|return
operator|new
name|GroupImpl
argument_list|(
name|userProvider
operator|.
name|getAuthorizableId
argument_list|(
name|tree
argument_list|)
argument_list|,
name|tree
argument_list|,
name|this
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Not a user or group tree "
operator|+
name|tree
operator|.
name|getPath
argument_list|()
operator|+
literal|'.'
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|checkValidID
parameter_list|(
name|String
name|ID
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|ID
operator|==
literal|null
operator|||
name|ID
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid ID "
operator|+
name|ID
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|getAuthorizable
argument_list|(
name|ID
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AuthorizableExistsException
argument_list|(
literal|"Authorizable with ID "
operator|+
name|ID
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|checkValidPrincipal
parameter_list|(
name|Principal
name|principal
parameter_list|,
name|boolean
name|isGroup
parameter_list|)
block|{
if|if
condition|(
name|principal
operator|==
literal|null
operator|||
name|principal
operator|.
name|getName
argument_list|()
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Principal may not be null and must have a valid name."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isGroup
operator|&&
name|EveryonePrincipal
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"'everyone' is a reserved group principal name."
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|setPrincipal
parameter_list|(
name|Tree
name|userTree
parameter_list|,
name|Principal
name|principal
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|getUserProvider
argument_list|()
operator|.
name|setPrincipalName
argument_list|(
name|userTree
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkIsLive
parameter_list|()
throws|throws
name|RepositoryException
block|{
if|if
condition|(
operator|!
name|session
operator|.
name|isLive
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"UserManager has been closed."
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|AuthorizableType
name|getAuthorizableType
parameter_list|(
name|int
name|searchType
parameter_list|)
block|{
switch|switch
condition|(
name|searchType
condition|)
block|{
case|case
name|UserManager
operator|.
name|SEARCH_TYPE_USER
case|:
return|return
name|AuthorizableType
operator|.
name|USER
return|;
case|case
name|UserManager
operator|.
name|SEARCH_TYPE_GROUP
case|:
return|return
name|AuthorizableType
operator|.
name|GROUP
return|;
case|case
name|UserManager
operator|.
name|SEARCH_TYPE_AUTHORIZABLE
case|:
return|return
name|AuthorizableType
operator|.
name|AUTHORIZABLE
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid search type "
operator|+
name|searchType
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

