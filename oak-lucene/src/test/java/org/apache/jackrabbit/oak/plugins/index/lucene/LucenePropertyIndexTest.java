begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ComparisonChain
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|nodetype
operator|.
name|NodeTypeIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|AbstractQueryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO8601
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NODE_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|INCLUDE_PROPERTY_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|ORDERED_PROP_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|PROP_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexEditorTest
operator|.
name|createCal
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TestUtil
operator|.
name|useV2
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|OrderedIndex
operator|.
name|OrderDirection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
operator|.
name|createProperty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|matchers
operator|.
name|JUnitMatchers
operator|.
name|containsString
import|;
end_import

begin_class
specifier|public
class|class
name|LucenePropertyIndexTest
extends|extends
name|AbstractQueryTest
block|{
comment|/**      * Set the size to twice the batch size to test the pagination with sorting      */
specifier|static
specifier|final
name|int
name|NUMBER_OF_NODES
init|=
name|LucenePropertyIndex
operator|.
name|LUCENE_QUERY_BATCH_SIZE
operator|*
literal|2
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|createTestIndexNode
parameter_list|()
throws|throws
name|Exception
block|{
name|setTraversalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
name|LuceneIndexProvider
name|provider
init|=
operator|new
name|LuceneIndexProvider
argument_list|()
decl_stmt|;
return|return
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|QueryIndexProvider
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|Observer
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|LuceneIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|NodeTypeIndexProvider
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fulltextSearchWithCustomAnalyzer
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createFulltextIndex
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|useV2
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|Tree
name|anl
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|LuceneIndexConstants
operator|.
name|ANALYZERS
argument_list|)
operator|.
name|addChild
argument_list|(
name|LuceneIndexConstants
operator|.
name|ANL_DEFAULT
argument_list|)
decl_stmt|;
name|anl
operator|.
name|addChild
argument_list|(
name|LuceneIndexConstants
operator|.
name|ANL_TOKENIZER
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|ANL_NAME
argument_list|,
literal|"whitespace"
argument_list|)
expr_stmt|;
name|anl
operator|.
name|addChild
argument_list|(
name|LuceneIndexConstants
operator|.
name|ANL_FILTERS
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"stop"
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"fox jumping"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select * from [nt:base] where CONTAINS(*, 'fox was jumping')"
argument_list|,
name|asList
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Tree
name|createFulltextIndex
parameter_list|(
name|Tree
name|index
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Tree
name|def
init|=
name|index
operator|.
name|addChild
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|addChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|,
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|INCLUDE_PROPERTY_TYPES
argument_list|,
name|of
argument_list|(
name|PropertyType
operator|.
name|TYPENAME_STRING
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|index
operator|.
name|getChild
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexSelection
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"test2"
argument_list|,
name|of
argument_list|(
literal|"propc"
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo2"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propc"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"e"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propd"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|propaQuery
init|=
literal|"select [jcr:path] from [nt:base] where [propa] = 'foo'"
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|propaQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propc] = 'foo'"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propaQuery
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 'foo2'"
argument_list|,
name|asList
argument_list|(
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propc] = 'foo'"
argument_list|,
name|asList
argument_list|(
literal|"/test/d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexSelectionVsNodeType
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|luceneIndex
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|)
argument_list|)
decl_stmt|;
comment|// decrease cost of lucene property index
name|luceneIndex
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|ENTRY_COUNT_PROPERTY_NAME
argument_list|,
literal|5L
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
comment|// Decrease cost of node type index
name|Tree
name|nodeTypeIndex
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"nodetype"
argument_list|)
decl_stmt|;
name|nodeTypeIndex
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|ENTRY_COUNT_PROPERTY_NAME
argument_list|,
literal|50L
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|nodeTypeIndex
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|KEY_COUNT_PROPERTY_NAME
argument_list|,
literal|10L
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|15
condition|;
name|idx
operator|++
control|)
block|{
name|Tree
name|a
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"n"
operator|+
name|idx
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
literal|"/test/n"
operator|+
name|idx
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|propaQuery
init|=
literal|"select [jcr:path] from [nt:unstructured] where [propa] = 'foo'"
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|propaQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propaQuery
argument_list|,
name|paths
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|declaringNodeTypeSameProp
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|indexWithType
init|=
name|createIndex
argument_list|(
literal|"test2"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|)
argument_list|)
decl_stmt|;
name|indexWithType
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|IndexConstants
operator|.
name|DECLARING_NODE_TYPES
argument_list|,
name|of
argument_list|(
literal|"nt:unstructured"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|a
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|Tree
name|b
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|propabQuery
init|=
literal|"select [jcr:path] from [nt:unstructured] where [propa] = 'foo'"
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|propabQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propabQuery
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|propcdQuery
init|=
literal|"select [jcr:path] from [nt:base] where [propa] = 'foo'"
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|propcdQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propcdQuery
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|,
literal|"/test/d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|declaringNodeTypeSingleIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|indexWithType
init|=
name|createIndex
argument_list|(
literal|"test2"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|indexWithType
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|IndexConstants
operator|.
name|DECLARING_NODE_TYPES
argument_list|,
name|of
argument_list|(
literal|"nt:unstructured"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|a
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|Tree
name|b
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|propabQuery
init|=
literal|"select [jcr:path] from [nt:unstructured] where [propb] = 'baz' and "
operator|+
literal|"[propa] = 'foo'"
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|propabQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propabQuery
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|propNoIdxQuery
init|=
literal|"select [jcr:path] from [nt:base] where [propb] = 'baz'"
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|propNoIdxQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"no-index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propNoIdxQuery
argument_list|,
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|emptyIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 'foo'"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyExistenceQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa is not null"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rangeQueriesWithLong
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_LONG
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]>= 20"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]>= 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]>= 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]<= 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]< 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 20 or [propa] = 10 "
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]> 10 and [propa]< 30"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] in (10,20)"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa is not null"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|determinePropTypeFromRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
comment|//Do not provide type information
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]>= 20"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]>= 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]>= 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]<= 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]< 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 20 or [propa] = 10 "
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]> 10 and [propa]< 30"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] in (10,20)"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa is not null"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rangeQueriesWithDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_DOUBLE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|10.1
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|20.4
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|30.7
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]>= 20.3"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 20.4"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]<= 20.5"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]< 20.4"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]> 10.5 and [propa]< 30"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa is not null"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rangeQueriesWithString
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"b is b"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"e"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"g"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa = 'a'"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Check that string props are not tokenized
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa = 'b is b'"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa in ('a', 'c')"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propb]>= 'f'"
argument_list|,
name|asList
argument_list|(
literal|"/test/d"
argument_list|,
literal|"/test/e"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propb]<= 'f'"
argument_list|,
name|asList
argument_list|(
literal|"/test/c"
argument_list|,
literal|"/test/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propb]> 'e'"
argument_list|,
name|asList
argument_list|(
literal|"/test/d"
argument_list|,
literal|"/test/e"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propb]< 'g'"
argument_list|,
name|asList
argument_list|(
literal|"/test/c"
argument_list|,
literal|"/test/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa is not null"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rangeQueriesWithDate
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_DATE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
name|createCal
argument_list|(
literal|"14/02/2014"
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
name|createCal
argument_list|(
literal|"14/03/2014"
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
name|createCal
argument_list|(
literal|"14/04/2014"
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]>= "
operator|+
name|dt
argument_list|(
literal|"15/02/2014"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]<="
operator|+
name|dt
argument_list|(
literal|"15/03/2014"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]< "
operator|+
name|dt
argument_list|(
literal|"14/03/2014"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]> "
operator|+
name|dt
argument_list|(
literal|"15/02/2014"
argument_list|)
operator|+
literal|" and [propa]< "
operator|+
name|dt
argument_list|(
literal|"13/04/2014"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa is not null"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|likeQueriesWithString
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"humpty"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"dumpty"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"humpy"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa like 'hum%'"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa like '%ty'"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa like '%ump%'"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nativeQueries
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
expr_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FUNC_NAME
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"humpty"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"dumpty"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"humpy"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where native('foo', 'propa:(humpty OR dumpty)')"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithRelativeProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|parent
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
name|parent
argument_list|,
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"b/propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|parent
operator|.
name|addChild
argument_list|(
literal|"test2"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] as s where [b/propa] = 'a'"
argument_list|,
name|asList
argument_list|(
literal|"/test2/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexDefinitionBelowRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|parent
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
name|parent
argument_list|,
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|EVALUATE_PATH_RESTRICTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|parent
operator|.
name|addChild
argument_list|(
literal|"test2"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] as s where ISDESCENDANTNODE(s, '/test') and propa = 'a'"
argument_list|,
name|asList
argument_list|(
literal|"/test/test2/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexDefinitionBelowRoot2
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|parent
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
name|parent
argument_list|,
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|EVALUATE_PATH_RESTRICTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|parent
operator|.
name|addChild
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test3"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] as s where ISDESCENDANTNODE(s, '/test/test2') and propa = 'a'"
argument_list|,
name|asList
argument_list|(
literal|"/test/test2/test3/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithLong
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_LONG
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertSortedLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithLong_OrderedProps
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|INCLUDE_PROPERTY_NAMES
argument_list|,
name|of
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|ORDERED_PROP_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_LONG
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertSortedLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithLong_NotIndexed
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|ORDERED_PROP_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_LONG
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
literal|"select [jcr:path] from [nt:base] order by [foo]"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|createDataForLongProp
argument_list|()
decl_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] order by [foo]"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|)
argument_list|)
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base]  order by [foo] DESC"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|DESC
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithLong_NotIndexed_relativeProps
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|ORDERED_PROP_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo/bar"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_LONG
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
literal|"select [jcr:path] from [nt:base] order by [foo/bar]"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1"
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|values
init|=
name|createLongs
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|child
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] order by [foo/bar]"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|)
argument_list|)
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base]  order by [foo/bar] DESC"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|DESC
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|assertSortedLong
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|createDataForLongProp
argument_list|()
decl_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo]"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|)
argument_list|)
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo] DESC"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|DESC
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Tuple
argument_list|>
name|createDataForLongProp
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|values
init|=
name|createLongs
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|child
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|tuples
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|tuples
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_DOUBLE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertSortedDouble
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithDouble_OrderedProps
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|INCLUDE_PROPERTY_NAMES
argument_list|,
name|of
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|ORDERED_PROP_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_DOUBLE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertSortedDouble
argument_list|()
expr_stmt|;
block|}
name|void
name|assertSortedDouble
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|values
init|=
name|createDoubles
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|child
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|tuples
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo]"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|)
argument_list|)
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo] DESC"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|DESC
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithString
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertSortedString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithString_OrderedProps
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|INCLUDE_PROPERTY_NAMES
argument_list|,
name|of
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|ORDERED_PROP_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertSortedString
argument_list|()
expr_stmt|;
block|}
name|void
name|assertSortedString
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|createStrings
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|child
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|tuples
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo]"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|)
argument_list|)
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo] DESC"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|DESC
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithDate
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_DATE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertSortedDate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithDate_OrderedProps
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|INCLUDE_PROPERTY_NAMES
argument_list|,
name|of
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|ORDERED_PROP_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_DATE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertSortedDate
argument_list|()
expr_stmt|;
block|}
name|void
name|assertSortedDate
parameter_list|()
throws|throws
name|ParseException
throws|,
name|CommitFailedException
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Calendar
argument_list|>
name|values
init|=
name|createDates
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|child
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|tuples
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo]"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|)
argument_list|)
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo] DESC"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|DESC
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithDateStringMixed_OrderedProps
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|INCLUDE_PROPERTY_NAMES
argument_list|,
name|of
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|ORDERED_PROP_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_DATE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Calendar
argument_list|>
name|values
init|=
name|createDates
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|child
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|child
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|child
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Add the path of property added as timestamp string in the sorted list
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo]"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"/test/n0"
argument_list|)
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Append the path of property added as timestamp string to the sorted list
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo] DESC"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|DESC
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"/test/n0"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithStringAndLong
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"baz"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_LONG
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|int
name|firstPropSize
init|=
literal|5
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|createStrings
argument_list|(
name|firstPropSize
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|longValues
init|=
name|createLongs
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple2
argument_list|>
name|tuples
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|val
init|=
name|values
operator|.
name|get
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|firstPropSize
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|child
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"baz"
argument_list|,
name|longValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|tuples
operator|.
name|add
argument_list|(
operator|new
name|Tuple2
argument_list|(
name|val
argument_list|,
name|longValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo] asc, [baz] desc"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexTimeFieldBoost
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Index Definition
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|,
literal|"propc"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FULL_TEXT_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|propNode
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
decl_stmt|;
comment|// property definition for index test1
name|Tree
name|propA
init|=
name|propNode
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
decl_stmt|;
name|propA
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_STRING
argument_list|)
expr_stmt|;
name|propA
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|Tree
name|propB
init|=
name|propNode
operator|.
name|addChild
argument_list|(
literal|"propb"
argument_list|)
decl_stmt|;
name|propB
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_STRING
argument_list|)
expr_stmt|;
name|propB
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|Tree
name|propC
init|=
name|propNode
operator|.
name|addChild
argument_list|(
literal|"propc"
argument_list|)
decl_stmt|;
name|propC
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_STRING
argument_list|)
expr_stmt|;
name|propC
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|4.0
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// create test data
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propc"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|queryString
init|=
literal|"//* [jcr:contains(., 'foo' )]"
decl_stmt|;
comment|// verify results ordering
comment|// which should be /test/c (boost = 4.0), /test/a(boost = 2.0), /test/b (1.0)
name|assertOrderedQuery
argument_list|(
name|queryString
argument_list|,
name|asList
argument_list|(
literal|"/test/c"
argument_list|,
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|,
name|XPATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexTimeFieldBoostAndRelativeProperty
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Index Definition
name|Tree
name|index
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|indexDefn
init|=
name|createTestIndexNode
argument_list|(
name|index
argument_list|,
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
argument_list|)
decl_stmt|;
name|useV2
argument_list|(
name|indexDefn
argument_list|)
expr_stmt|;
name|addPropertyDefn
argument_list|(
name|indexDefn
argument_list|,
literal|"jcr:content/metadata/title"
argument_list|,
literal|4.0
argument_list|)
expr_stmt|;
name|addPropertyDefn
argument_list|(
name|indexDefn
argument_list|,
literal|"jcr:content/metadata/title2"
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|addPropertyDefn
argument_list|(
name|indexDefn
argument_list|,
literal|"propa"
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// create test data
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|usc
argument_list|(
name|test
argument_list|,
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo foo foo"
argument_list|)
expr_stmt|;
name|usc
argument_list|(
name|test
argument_list|,
literal|"b"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"jcr:content"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"metadata"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"title"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|usc
argument_list|(
name|test
argument_list|,
literal|"c"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"jcr:content"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"metadata"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"title2"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|queryString
init|=
literal|"//element(*, oak:Unstructured)[jcr:contains(., 'foo' )]"
decl_stmt|;
comment|// verify results ordering
comment|// which should be /test/c (boost = 4.0), /test/a(boost = 2.0), /test/b (1.0)
name|assertOrderedQuery
argument_list|(
name|queryString
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|,
name|XPATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Tree
name|usc
parameter_list|(
name|Tree
name|parent
parameter_list|,
name|String
name|childName
parameter_list|)
block|{
name|Tree
name|child
init|=
name|parent
operator|.
name|addChild
argument_list|(
name|childName
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"oak:Unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|private
name|Tree
name|addPropertyDefn
parameter_list|(
name|Tree
name|indexDefn
parameter_list|,
name|String
name|propName
parameter_list|,
name|double
name|boost
parameter_list|)
block|{
name|Tree
name|props
init|=
name|TestUtil
operator|.
name|newRulePropTree
argument_list|(
name|indexDefn
argument_list|,
literal|"oak:Unstructured"
argument_list|)
decl_stmt|;
name|Tree
name|prop
init|=
name|props
operator|.
name|addChild
argument_list|(
name|TestUtil
operator|.
name|unique
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
decl_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
name|propName
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_PROPERTY_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
name|boost
argument_list|)
expr_stmt|;
return|return
name|prop
return|;
block|}
specifier|private
name|void
name|assertOrderedQuery
parameter_list|(
name|String
name|sql
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|)
block|{
name|assertOrderedQuery
argument_list|(
name|sql
argument_list|,
name|paths
argument_list|,
name|SQL2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertOrderedQuery
parameter_list|(
name|String
name|sql
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|,
name|String
name|language
parameter_list|,
name|boolean
name|skipSort
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|executeQuery
argument_list|(
name|sql
argument_list|,
name|language
argument_list|,
literal|true
argument_list|,
name|skipSort
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|paths
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|//TODO Test for range with Date. Check for precision
specifier|private
name|String
name|explain
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|String
name|explain
init|=
literal|"explain "
operator|+
name|query
decl_stmt|;
return|return
name|executeQuery
argument_list|(
name|explain
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
name|Tree
name|createIndex
parameter_list|(
name|String
name|name
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|propNames
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Tree
name|index
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
return|return
name|createIndex
argument_list|(
name|index
argument_list|,
name|name
argument_list|,
name|propNames
argument_list|)
return|;
block|}
specifier|private
name|Tree
name|createIndex
parameter_list|(
name|Tree
name|index
parameter_list|,
name|String
name|name
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|propNames
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Tree
name|def
init|=
name|index
operator|.
name|addChild
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|addChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|,
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FULL_TEXT_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|INCLUDE_PROPERTY_NAMES
argument_list|,
name|propNames
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|index
operator|.
name|getChild
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|dt
parameter_list|(
name|String
name|date
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"CAST ('%s' AS DATE)"
argument_list|,
name|ISO8601
operator|.
name|format
argument_list|(
name|createCal
argument_list|(
name|date
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getSortedPaths
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
parameter_list|,
name|OrderDirection
name|dir
parameter_list|)
block|{
if|if
condition|(
name|OrderDirection
operator|.
name|DESC
operator|==
name|dir
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|tuples
argument_list|,
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|tuples
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Tuple
name|t
range|:
name|tuples
control|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|t
operator|.
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|paths
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getSortedPaths
parameter_list|(
name|List
argument_list|<
name|Tuple2
argument_list|>
name|tuples
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|tuples
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Tuple2
name|t
range|:
name|tuples
control|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|t
operator|.
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|paths
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Long
argument_list|>
name|createLongs
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|values
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|values
argument_list|)
expr_stmt|;
return|return
name|values
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Double
argument_list|>
name|createDoubles
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|values
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|rnd
operator|.
name|nextDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|values
argument_list|)
expr_stmt|;
return|return
name|values
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|createStrings
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"value%04d"
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|values
argument_list|)
expr_stmt|;
return|return
name|values
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Calendar
argument_list|>
name|createDates
parameter_list|(
name|int
name|n
parameter_list|)
throws|throws
name|ParseException
block|{
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Calendar
argument_list|>
name|values
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|createCal
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%02d/%02d/2%03d"
argument_list|,
name|rnd
operator|.
name|nextInt
argument_list|(
literal|26
argument_list|)
operator|+
literal|1
argument_list|,
name|rnd
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|+
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|values
argument_list|)
expr_stmt|;
return|return
name|values
return|;
block|}
specifier|private
specifier|static
class|class
name|Tuple
implements|implements
name|Comparable
argument_list|<
name|Tuple
argument_list|>
block|{
specifier|final
name|Comparable
name|value
decl_stmt|;
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
name|Tuple
parameter_list|(
name|Comparable
name|value
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Tuple
name|o
parameter_list|)
block|{
return|return
name|value
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Tuple{"
operator|+
literal|"value="
operator|+
name|value
operator|+
literal|", path='"
operator|+
name|path
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|Tuple2
implements|implements
name|Comparable
argument_list|<
name|Tuple2
argument_list|>
block|{
specifier|final
name|Comparable
name|value
decl_stmt|;
specifier|final
name|Comparable
name|value2
decl_stmt|;
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
name|Tuple2
parameter_list|(
name|Comparable
name|value
parameter_list|,
name|Comparable
name|value2
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|value2
operator|=
name|value2
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Tuple2
name|o
parameter_list|)
block|{
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compare
argument_list|(
name|value
argument_list|,
name|o
operator|.
name|value
argument_list|)
operator|.
name|compare
argument_list|(
name|value2
argument_list|,
name|o
operator|.
name|value2
argument_list|,
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Tuple2{"
operator|+
literal|"value="
operator|+
name|value
operator|+
literal|", value2="
operator|+
name|value2
operator|+
literal|", path='"
operator|+
name|path
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
block|}
block|}
end_class

end_unit

