begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|Comparison
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|DynamicOperand
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|QueryObjectModelConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|QueryObjectModelFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|StaticOperand
import|;
end_import

begin_comment
comment|/**  * Enumeration of the JCR 2.0 query operators.  *  * @since Apache Jackrabbit 2.0  */
end_comment

begin_enum
specifier|public
enum|enum
name|Operator
block|{
name|EQ
argument_list|(
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_EQUAL_TO
argument_list|,
literal|"="
argument_list|)
block|,
name|NE
argument_list|(
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_NOT_EQUAL_TO
argument_list|,
literal|"!="
argument_list|,
literal|"<>"
argument_list|)
block|,
name|GT
argument_list|(
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_GREATER_THAN
argument_list|,
literal|">"
argument_list|)
block|,
name|GE
argument_list|(
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_GREATER_THAN_OR_EQUAL_TO
argument_list|,
literal|">="
argument_list|)
block|,
name|LT
argument_list|(
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_LESS_THAN
argument_list|,
literal|"<"
argument_list|)
block|,
name|LE
argument_list|(
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_LESS_THAN_OR_EQUAL_TO
argument_list|,
literal|"<="
argument_list|)
block|,
name|LIKE
argument_list|(
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_LIKE
argument_list|,
literal|null
argument_list|,
literal|"like"
argument_list|)
block|;
comment|/**      * JCR name of this operator.      */
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|/**      * This operator in XPath syntax.      */
specifier|private
specifier|final
name|String
name|xpath
decl_stmt|;
comment|/**      * This operator in SQL syntax.      */
specifier|private
specifier|final
name|String
name|sql
decl_stmt|;
name|Operator
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|op
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|op
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
name|Operator
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|xpath
parameter_list|,
name|String
name|sql
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|xpath
operator|=
name|xpath
expr_stmt|;
name|this
operator|.
name|sql
operator|=
name|sql
expr_stmt|;
block|}
comment|/**      * Returns a comparison between the given operands using this operator.      *      * @param factory factory for creating the comparison      * @param left operand on the left hand side      * @param right operand on the right hand side      * @return comparison      * @throws RepositoryException if the comparison can not be created      */
specifier|public
name|Comparison
name|comparison
parameter_list|(
name|QueryObjectModelFactory
name|factory
parameter_list|,
name|DynamicOperand
name|left
parameter_list|,
name|StaticOperand
name|right
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|factory
operator|.
name|comparison
argument_list|(
name|left
argument_list|,
name|name
argument_list|,
name|right
argument_list|)
return|;
block|}
comment|/**      * Formats an XPath constraint with this operator and the given operands.      * The operands are simply used as-is, without any quoting or escaping.      *      * @param a first operand      * @param b second operand      * @return XPath constraint, {@code a op b} or      *         {@code jcr:like(a, b)} for {@link #LIKE}      */
specifier|public
name|String
name|formatXpath
parameter_list|(
name|String
name|a
parameter_list|,
name|String
name|b
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|LIKE
condition|)
block|{
return|return
literal|"jcr:like("
operator|+
name|a
operator|+
literal|", "
operator|+
name|b
operator|+
literal|')'
return|;
block|}
return|return
name|a
operator|+
literal|' '
operator|+
name|xpath
operator|+
literal|' '
operator|+
name|b
return|;
block|}
comment|/**      * Formats an SQL constraint with this operator and the given operands.      * The operands are simply used as-is, without any quoting or escaping.      *      * @param a first operand      * @param b second operand      * @return SQL constraint, {@code a op b}      */
specifier|public
name|String
name|formatSql
parameter_list|(
name|String
name|a
parameter_list|,
name|String
name|b
parameter_list|)
block|{
return|return
name|a
operator|+
literal|' '
operator|+
name|sql
operator|+
literal|' '
operator|+
name|b
return|;
block|}
comment|/**      * Returns the JCR 2.0 name of this query operator.      *      * @see QueryObjectModelConstants      * @return JCR name of this operator      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Returns an array of the names of all the JCR 2.0 query operators.      *      * @return names of all query operators      */
specifier|public
specifier|static
name|String
index|[]
name|getAllQueryOperators
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
name|EQ
operator|.
name|toString
argument_list|()
block|,
name|NE
operator|.
name|toString
argument_list|()
block|,
name|GT
operator|.
name|toString
argument_list|()
block|,
name|GE
operator|.
name|toString
argument_list|()
block|,
name|LT
operator|.
name|toString
argument_list|()
block|,
name|LE
operator|.
name|toString
argument_list|()
block|,
name|LIKE
operator|.
name|toString
argument_list|()
block|}
return|;
block|}
comment|/**      * Returns the operator with the given JCR name.      *      * @param name JCR name of an operator      * @return operator with the given name      */
specifier|public
specifier|static
name|Operator
name|getOperatorByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|Operator
name|operator
range|:
name|Operator
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|operator
operator|.
name|name
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|operator
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown operator name: "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
end_enum

end_unit

