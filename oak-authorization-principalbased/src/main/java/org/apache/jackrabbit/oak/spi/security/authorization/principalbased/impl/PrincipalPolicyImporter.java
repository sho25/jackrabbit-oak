begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|FilterProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ImportBehavior
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|PropInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedItemImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedNodeImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedPropertyImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ReferenceChangeTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|REP_NODE_PATH
import|;
end_import

begin_comment
comment|/**  * Implementation of the {@link ProtectedNodeImporter} and {@link ProtectedPropertyImporter}for principal policies.  */
end_comment

begin_class
class|class
name|PrincipalPolicyImporter
implements|implements
name|ProtectedNodeImporter
implements|,
name|ProtectedPropertyImporter
implements|,
name|Constants
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PrincipalPolicyImporter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
specifier|final
name|MgrProvider
name|mgrProvider
decl_stmt|;
specifier|private
specifier|final
name|FilterProvider
name|filterProvider
decl_stmt|;
specifier|private
name|Filter
name|filter
decl_stmt|;
specifier|private
name|AuthorizationConfiguration
name|authorizationConfiguration
decl_stmt|;
specifier|private
name|int
name|importBehavior
decl_stmt|;
specifier|private
name|boolean
name|initialized
decl_stmt|;
specifier|private
name|PrincipalPolicyImpl
name|policy
decl_stmt|;
specifier|private
name|Entry
name|entry
decl_stmt|;
name|PrincipalPolicyImporter
parameter_list|(
annotation|@
name|NotNull
name|FilterProvider
name|filterProvider
parameter_list|,
annotation|@
name|NotNull
name|MgrProvider
name|mgrProvider
parameter_list|)
block|{
name|this
operator|.
name|filterProvider
operator|=
name|filterProvider
expr_stmt|;
name|this
operator|.
name|mgrProvider
operator|=
name|mgrProvider
expr_stmt|;
block|}
comment|//----------------------------------------------< ProtectedItemImporter>---
annotation|@
name|Override
specifier|public
name|boolean
name|init
parameter_list|(
annotation|@
name|NotNull
name|Session
name|session
parameter_list|,
annotation|@
name|NotNull
name|Root
name|root
parameter_list|,
annotation|@
name|NotNull
name|NamePathMapper
name|namePathMapper
parameter_list|,
name|boolean
name|isWorkspaceImport
parameter_list|,
name|int
name|uuidBehavior
parameter_list|,
annotation|@
name|NotNull
name|ReferenceChangeTracker
name|referenceTracker
parameter_list|,
annotation|@
name|NotNull
name|SecurityProvider
name|securityProvider
parameter_list|)
block|{
if|if
condition|(
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Already initialized"
argument_list|)
throw|;
block|}
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|mgrProvider
operator|.
name|reset
argument_list|(
name|root
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
name|filter
operator|=
name|filterProvider
operator|.
name|getFilter
argument_list|(
name|mgrProvider
operator|.
name|getSecurityProvider
argument_list|()
argument_list|,
name|root
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
name|authorizationConfiguration
operator|=
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|importBehavior
operator|=
name|ImportBehavior
operator|.
name|valueFromString
argument_list|(
name|authorizationConfiguration
operator|.
name|getParameters
argument_list|()
operator|.
name|getConfigValue
argument_list|(
name|ProtectedItemImporter
operator|.
name|PARAM_IMPORT_BEHAVIOR
argument_list|,
name|ImportBehavior
operator|.
name|NAME_ABORT
argument_list|)
argument_list|)
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
return|return
name|initialized
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processReferences
parameter_list|()
block|{
comment|// nothing to do
block|}
comment|//------------------------------------------< ProtectedPropertyImporter>---
annotation|@
name|Override
specifier|public
name|boolean
name|handlePropInfo
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|parent
parameter_list|,
annotation|@
name|NotNull
name|PropInfo
name|protectedPropInfo
parameter_list|,
annotation|@
name|NotNull
name|PropertyDefinition
name|def
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkState
argument_list|(
name|initialized
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Utils
operator|.
name|isPrincipalPolicyTree
argument_list|(
name|parent
argument_list|)
operator|||
operator|!
name|isValidPrincipalProperty
argument_list|(
name|protectedPropInfo
argument_list|,
name|def
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|accessControlledPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|parent
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|filterProvider
operator|.
name|handlesPath
argument_list|(
name|accessControlledPath
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Unable to import principal policy. Access controlled path '{}' outside of path supported by FilterProvider."
argument_list|,
name|accessControlledPath
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|String
name|principalName
init|=
name|protectedPropInfo
operator|.
name|getTextValue
argument_list|()
operator|.
name|getString
argument_list|()
decl_stmt|;
name|Principal
name|principal
init|=
name|filter
operator|.
name|getValidPrincipal
argument_list|(
name|accessControlledPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Unable to lookup principal by path = {}. Creating by name {}."
argument_list|,
name|accessControlledPath
argument_list|,
name|principalName
argument_list|)
expr_stmt|;
name|principal
operator|=
operator|new
name|PrincipalImpl
argument_list|(
name|principalName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|principalName
operator|.
name|equals
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Principal name mismatch expected '{}' but was '{}'."
argument_list|,
name|principalName
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
literal|"Principal name mismatch."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Utils
operator|.
name|canHandle
argument_list|(
name|principal
argument_list|,
name|filter
argument_list|,
name|importBehavior
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Cannot handle principal {} with name = {}"
argument_list|,
name|principal
argument_list|,
name|principalName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// make sure editing session has ability to read access control
name|session
operator|.
name|checkPermission
argument_list|(
name|accessControlledPath
argument_list|,
name|Permissions
operator|.
name|getString
argument_list|(
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|policy
operator|=
operator|new
name|PrincipalPolicyImpl
argument_list|(
name|principal
argument_list|,
name|accessControlledPath
argument_list|,
name|mgrProvider
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertiesCompleted
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|protectedParent
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkState
argument_list|(
name|initialized
argument_list|)
expr_stmt|;
comment|// make sure also an empty policy (with entries) is being written (see also #end(Tree) below)
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isValidProtectedParent
argument_list|(
name|protectedParent
argument_list|,
name|policy
argument_list|)
condition|)
block|{
name|getAccessControlManager
argument_list|()
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Protected parent {} does not match path of PrincipalAccessControlList {}."
argument_list|,
name|protectedParent
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
operator|.
name|getOakPath
argument_list|()
argument_list|)
expr_stmt|;
name|getAccessControlManager
argument_list|()
operator|.
name|removePolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//----------------------------------------------< ProtectedNodeImporter>---
annotation|@
name|Override
specifier|public
name|boolean
name|start
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|protectedParent
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkState
argument_list|(
name|initialized
argument_list|)
expr_stmt|;
comment|// the policy node was added during the regular import (it's parent must not be protected)
comment|// and the principal-name property must have been processed by the ProtectedPropertyImporter
return|return
name|policy
operator|!=
literal|null
operator|&&
name|isValidProtectedParent
argument_list|(
name|protectedParent
argument_list|,
name|policy
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|end
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|protectedParent
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkState
argument_list|(
name|policy
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|isValidProtectedParent
argument_list|(
name|protectedParent
argument_list|,
name|policy
argument_list|)
condition|)
block|{
name|getAccessControlManager
argument_list|()
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Protected parent {} does not match path of PrincipalAccessControlList {}."
argument_list|,
name|protectedParent
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
operator|.
name|getOakPath
argument_list|()
argument_list|)
expr_stmt|;
name|getAccessControlManager
argument_list|()
operator|.
name|removePolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
name|policy
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startChildInfo
parameter_list|(
annotation|@
name|NotNull
name|NodeInfo
name|childInfo
parameter_list|,
annotation|@
name|NotNull
name|List
argument_list|<
name|PropInfo
argument_list|>
name|propInfos
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkState
argument_list|(
name|policy
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|String
name|ntName
init|=
name|getOakName
argument_list|(
name|childInfo
operator|.
name|getPrimaryTypeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|NT_REP_PRINCIPAL_ENTRY
operator|.
name|equals
argument_list|(
name|ntName
argument_list|)
condition|)
block|{
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
literal|"Invalid child node sequence: Entries must not be nested."
argument_list|)
throw|;
block|}
name|entry
operator|=
operator|new
name|Entry
argument_list|(
name|propInfos
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|NT_REP_RESTRICTIONS
operator|.
name|equals
argument_list|(
name|ntName
argument_list|)
condition|)
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
literal|"Invalid child node sequence: Restriction must be associated with an Entry"
argument_list|)
throw|;
block|}
name|entry
operator|.
name|addRestrictions
argument_list|(
name|propInfos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
literal|"Invalid child node '"
operator|+
name|childInfo
operator|.
name|getName
argument_list|()
operator|+
literal|"' with type "
operator|+
name|ntName
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endChildInfo
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|checkState
argument_list|(
name|policy
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|applyTo
argument_list|(
name|policy
argument_list|)
expr_stmt|;
comment|// reset the child entry
name|entry
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
name|boolean
name|isValidPrincipalProperty
parameter_list|(
annotation|@
name|NotNull
name|PropInfo
name|propertyInfo
parameter_list|,
annotation|@
name|NotNull
name|PropertyDefinition
name|def
parameter_list|)
block|{
return|return
name|REP_PRINCIPAL_NAME
operator|.
name|equals
argument_list|(
name|getOakName
argument_list|(
name|propertyInfo
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|&&
operator|!
name|def
operator|.
name|isMultiple
argument_list|()
operator|&&
name|NT_REP_PRINCIPAL_POLICY
operator|.
name|equals
argument_list|(
name|getOakName
argument_list|(
name|def
operator|.
name|getDeclaringNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isValidProtectedParent
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|protectedParent
parameter_list|,
annotation|@
name|NotNull
name|PrincipalPolicyImpl
name|policy
parameter_list|)
block|{
name|String
name|accessControlledPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|protectedParent
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|accessControlledPath
operator|.
name|equals
argument_list|(
name|policy
operator|.
name|getOakPath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nullable
specifier|private
name|String
name|getOakName
parameter_list|(
annotation|@
name|Nullable
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|name
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|getNamePathMapper
argument_list|()
operator|.
name|getOakNameOrNull
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
name|AccessControlManager
name|getAccessControlManager
parameter_list|()
block|{
return|return
name|authorizationConfiguration
operator|.
name|getAccessControlManager
argument_list|(
name|mgrProvider
operator|.
name|getRoot
argument_list|()
argument_list|,
name|mgrProvider
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|NamePathMapper
name|getNamePathMapper
parameter_list|()
block|{
return|return
name|mgrProvider
operator|.
name|getNamePathMapper
argument_list|()
return|;
block|}
comment|//--------------------------------------------------------------------------
specifier|private
specifier|final
class|class
name|Entry
block|{
specifier|private
name|String
name|effectivePath
decl_stmt|;
specifier|private
specifier|final
name|Iterable
argument_list|<
name|Privilege
argument_list|>
name|privileges
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Value
index|[]
argument_list|>
name|mvRestrictions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Entry
parameter_list|(
annotation|@
name|NotNull
name|List
argument_list|<
name|PropInfo
argument_list|>
name|propInfos
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Iterable
argument_list|<
name|Privilege
argument_list|>
name|privs
init|=
literal|null
decl_stmt|;
for|for
control|(
name|PropInfo
name|prop
range|:
name|propInfos
control|)
block|{
name|String
name|oakName
init|=
name|getOakName
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|REP_EFFECTIVE_PATH
operator|.
name|equals
argument_list|(
name|oakName
argument_list|)
operator|&&
name|PropertyType
operator|.
name|PATH
operator|==
name|prop
operator|.
name|getType
argument_list|()
condition|)
block|{
name|effectivePath
operator|=
name|extractEffectivePath
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|REP_PRIVILEGES
operator|.
name|equals
argument_list|(
name|oakName
argument_list|)
operator|&&
name|PropertyType
operator|.
name|NAME
operator|==
name|prop
operator|.
name|getType
argument_list|()
condition|)
block|{
name|privs
operator|=
name|getPrivileges
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|prop
operator|.
name|getTextValues
argument_list|()
argument_list|,
name|textValue
lambda|->
name|textValue
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
literal|"Unsupported property '"
operator|+
name|oakName
operator|+
literal|"' with type "
operator|+
name|prop
operator|.
name|getType
argument_list|()
operator|+
literal|" within policy entry of type rep:PrincipalEntry"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|privs
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
literal|"Entries for PrincipalAccessControlList must specify the privileges to be granted."
argument_list|)
throw|;
block|}
name|privileges
operator|=
name|privs
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Privilege
argument_list|>
name|getPrivileges
parameter_list|(
annotation|@
name|NotNull
name|Iterable
argument_list|<
name|String
argument_list|>
name|jcrPrivNames
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|Privilege
argument_list|>
name|privs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|PrivilegeManager
name|privilegeManager
init|=
name|mgrProvider
operator|.
name|getPrivilegeManager
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|privName
range|:
name|jcrPrivNames
control|)
block|{
name|privs
operator|.
name|add
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|privName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|privs
return|;
block|}
specifier|private
name|void
name|addRestrictions
parameter_list|(
annotation|@
name|NotNull
name|List
argument_list|<
name|PropInfo
argument_list|>
name|propInfos
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkState
argument_list|(
name|restrictions
operator|.
name|isEmpty
argument_list|()
operator|&&
name|mvRestrictions
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"Multiple restriction nodes."
argument_list|)
expr_stmt|;
for|for
control|(
name|PropInfo
name|prop
range|:
name|propInfos
control|)
block|{
name|String
name|restrictionName
init|=
name|prop
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|REP_NODE_PATH
operator|.
name|equals
argument_list|(
name|getOakName
argument_list|(
name|restrictionName
argument_list|)
argument_list|)
condition|)
block|{
name|checkState
argument_list|(
name|effectivePath
operator|==
literal|null
argument_list|,
literal|"Attempt to overwrite rep:effectivePath property with rep:nodePath restriction."
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Extracting rep:effectivePath from rep:nodePath restriction."
argument_list|)
expr_stmt|;
name|effectivePath
operator|=
name|extractEffectivePath
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|targetType
init|=
name|policy
operator|.
name|getRestrictionType
argument_list|(
name|restrictionName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Value
argument_list|>
name|values
init|=
name|prop
operator|.
name|getValues
argument_list|(
name|targetType
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|.
name|isMultiValueRestriction
argument_list|(
name|restrictionName
argument_list|)
condition|)
block|{
name|mvRestrictions
operator|.
name|put
argument_list|(
name|restrictionName
argument_list|,
name|values
operator|.
name|toArray
argument_list|(
operator|new
name|Value
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|restrictions
operator|.
name|put
argument_list|(
name|restrictionName
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**          * Work around the fact that {@link org.apache.jackrabbit.oak.namepath.impl.NamePathMapperImpl#getJcrName(String)}          * transforms an empty path value to the current element ("."), which is not a valid path for {@code rep:effectivePath},          * which expects an absolute path or null.          *          * @param prop The prop info containing the effective path.          * @return An empty string if the text value of the given property info is "." or the text value otherwise.          * @throws RepositoryException          */
specifier|private
name|String
name|extractEffectivePath
parameter_list|(
annotation|@
name|NotNull
name|PropInfo
name|prop
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|ep
init|=
name|prop
operator|.
name|getTextValue
argument_list|()
operator|.
name|getString
argument_list|()
decl_stmt|;
return|return
operator|(
name|PathUtils
operator|.
name|denotesCurrent
argument_list|(
name|ep
argument_list|)
operator|)
condition|?
literal|""
else|:
name|ep
return|;
block|}
specifier|private
name|void
name|applyTo
parameter_list|(
annotation|@
name|NotNull
name|PrincipalPolicyImpl
name|policy
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|effectivePath
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Missing rep:effectivePath for entry {} of policy at {}"
argument_list|,
name|this
argument_list|,
name|policy
operator|.
name|getOakPath
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
literal|"Entries for PrincipalAccessControlList must specify an effective path."
argument_list|)
throw|;
block|}
name|policy
operator|.
name|addEntry
argument_list|(
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|effectivePath
argument_list|)
argument_list|,
name|Iterables
operator|.
name|toArray
argument_list|(
name|privileges
argument_list|,
name|Privilege
operator|.
name|class
argument_list|)
argument_list|,
name|restrictions
argument_list|,
name|mvRestrictions
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

