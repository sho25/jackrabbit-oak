begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CheckpointMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|IndexStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|ManagementOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexPathService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|ActiveDeletedBlobCollectorFactory
operator|.
name|ActiveDeletedBlobCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Tracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|transform
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|IndexStatsMBean
operator|.
name|STATUS_RUNNING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|ManagementOperation
operator|.
name|Status
operator|.
name|failed
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|ManagementOperation
operator|.
name|Status
operator|.
name|initiated
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|ManagementOperation
operator|.
name|done
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|ManagementOperation
operator|.
name|newManagementOperation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FulltextIndexConstants
operator|.
name|INDEX_DATA_CHILD_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|OakDirectory
operator|.
name|PROP_UNSAFE_FOR_ACTIVE_DELETION
import|;
end_import

begin_class
specifier|public
class|class
name|ActiveDeletedBlobCollectorMBeanImpl
implements|implements
name|ActiveDeletedBlobCollectorMBean
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ActiveDeletedBlobCollectorMBeanImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OP_NAME
init|=
literal|"Active lucene index blobs collection"
decl_stmt|;
comment|/**      * Actively deleted blob must be deleted for at least this long (in seconds)      */
specifier|private
specifier|final
name|long
name|MIN_BLOB_AGE_TO_ACTIVELY_DELETE
init|=
name|Long
operator|.
name|getLong
argument_list|(
literal|"oak.active.deletion.minAge"
argument_list|,
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toSeconds
argument_list|(
literal|24
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|ACTIVE_DELETION_DISABLED
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"oak.active.deletion.disabled"
argument_list|)
decl_stmt|;
name|Clock
name|clock
init|=
name|Clock
operator|.
name|SIMPLE
decl_stmt|;
comment|// package private for tests
annotation|@
name|NotNull
specifier|private
specifier|final
name|ActiveDeletedBlobCollector
name|activeDeletedBlobCollector
decl_stmt|;
annotation|@
name|NotNull
specifier|private
name|Whiteboard
name|whiteboard
decl_stmt|;
annotation|@
name|NotNull
specifier|private
specifier|final
name|GarbageCollectableBlobStore
name|blobStore
decl_stmt|;
annotation|@
name|NotNull
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
specifier|private
specifier|final
name|NodeStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|IndexPathService
name|indexPathService
decl_stmt|;
specifier|private
specifier|final
name|AsyncIndexInfoService
name|asyncIndexInfoService
decl_stmt|;
specifier|private
name|ManagementOperation
argument_list|<
name|Void
argument_list|>
name|gcOp
init|=
name|done
argument_list|(
name|OP_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**      * @param activeDeletedBlobCollector    deleted index blobs collector      * @param whiteboard                    An instance of {@link Whiteboard}. It will be      *                                      used to get checkpoing manager mbean.      * @param store                         {@link NodeStore} instance to access repository state      * @param indexPathService              {@link IndexPathService} instance to collect indexes available in      *                                                              the repository      * @param asyncIndexInfoService         {@link AsyncIndexInfoService} instance to acess state of async      *                                                                   indexer lanes      * @param blobStore                     An instance of {@link GarbageCollectableBlobStore}. It will be      *                                      used to purge blobs which have been deleted from lucene indexes.      * @param executor                      executor for running the collection task      */
specifier|public
name|ActiveDeletedBlobCollectorMBeanImpl
parameter_list|(
annotation|@
name|NotNull
name|ActiveDeletedBlobCollector
name|activeDeletedBlobCollector
parameter_list|,
annotation|@
name|NotNull
name|Whiteboard
name|whiteboard
parameter_list|,
annotation|@
name|NotNull
name|NodeStore
name|store
parameter_list|,
annotation|@
name|NotNull
name|IndexPathService
name|indexPathService
parameter_list|,
annotation|@
name|NotNull
name|AsyncIndexInfoService
name|asyncIndexInfoService
parameter_list|,
annotation|@
name|NotNull
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
annotation|@
name|NotNull
name|Executor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|activeDeletedBlobCollector
operator|=
name|checkNotNull
argument_list|(
name|activeDeletedBlobCollector
argument_list|)
expr_stmt|;
name|this
operator|.
name|whiteboard
operator|=
name|checkNotNull
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|indexPathService
operator|=
name|indexPathService
expr_stmt|;
name|this
operator|.
name|asyncIndexInfoService
operator|=
name|asyncIndexInfoService
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|checkNotNull
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|checkNotNull
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Active blob collector initialized with minAge: {}"
argument_list|,
name|MIN_BLOB_AGE_TO_ACTIVELY_DELETE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDisabled
parameter_list|()
block|{
return|return
name|ACTIVE_DELETION_DISABLED
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|CompositeData
name|startActiveCollection
parameter_list|()
block|{
if|if
condition|(
name|isDisabled
argument_list|()
condition|)
block|{
return|return
name|ManagementOperation
operator|.
name|Status
operator|.
name|none
argument_list|(
name|gcOp
argument_list|,
literal|"Active deletion is disabled"
argument_list|)
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
if|if
condition|(
name|gcOp
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|long
name|safeTimestampForDeletedBlobs
init|=
name|getSafeTimestampForDeletedBlobs
argument_list|()
decl_stmt|;
if|if
condition|(
name|safeTimestampForDeletedBlobs
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|failed
argument_list|(
name|OP_NAME
operator|+
literal|" couldn't be run as a safe timestamp for"
operator|+
literal|" purging lucene index blobs couldn't be evaluated"
argument_list|)
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
name|gcOp
operator|=
name|newManagementOperation
argument_list|(
name|OP_NAME
argument_list|,
parameter_list|()
lambda|->
block|{
name|activeDeletedBlobCollector
operator|.
name|purgeBlobsDeleted
argument_list|(
name|safeTimestampForDeletedBlobs
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|gcOp
argument_list|)
expr_stmt|;
return|return
name|initiated
argument_list|(
name|gcOp
argument_list|,
name|OP_NAME
operator|+
literal|" started"
argument_list|)
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|failed
argument_list|(
name|OP_NAME
operator|+
literal|" already running"
argument_list|)
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|CompositeData
name|cancelActiveCollection
parameter_list|()
block|{
if|if
condition|(
operator|!
name|gcOp
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|newManagementOperation
argument_list|(
name|OP_NAME
argument_list|,
call|(
name|Callable
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
name|gcOp
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
block|;
name|activeDeletedBlobCollector
operator|.
name|cancelBlobCollection
argument_list|()
argument_list|;
return|return
literal|null
return|;
block|}
block|)
block|)
class|;
end_class

begin_return
return|return
name|initiated
argument_list|(
name|gcOp
argument_list|,
literal|"Active lucene index blobs collection cancelled"
argument_list|)
operator|.
name|toCompositeData
argument_list|()
return|;
end_return

begin_block
unit|} else
block|{
return|return
name|failed
argument_list|(
name|OP_NAME
operator|+
literal|" not running"
argument_list|)
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
end_block

begin_function
unit|}      @
name|NotNull
annotation|@
name|Override
specifier|public
name|CompositeData
name|getActiveCollectionStatus
parameter_list|()
block|{
return|return
name|gcOp
operator|.
name|getStatus
argument_list|()
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|isActiveDeletionUnsafe
parameter_list|()
block|{
return|return
name|activeDeletedBlobCollector
operator|.
name|isActiveDeletionUnsafe
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|flagActiveDeletionUnsafeForCurrentState
parameter_list|()
block|{
name|activeDeletedBlobCollector
operator|.
name|flagActiveDeletionUnsafe
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|waitForRunningIndexCycles
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Some indexers were still found running. Resume and quit gracefully"
argument_list|)
expr_stmt|;
name|activeDeletedBlobCollector
operator|.
name|flagActiveDeletionUnsafe
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|markCurrentIndexFilesUnsafeForActiveDeletion
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not set current index files unsafe for active deletion. Resume and quit gracefully"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|activeDeletedBlobCollector
operator|.
name|flagActiveDeletionUnsafe
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|flagActiveDeletionSafe
parameter_list|()
block|{
name|activeDeletedBlobCollector
operator|.
name|flagActiveDeletionUnsafe
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Wait for running index cycles for 2 minutes.      *      * @return true if all running index cycles have been through; false otherwise      */
end_comment

begin_function
specifier|private
name|boolean
name|waitForRunningIndexCycles
parameter_list|()
block|{
name|Map
argument_list|<
name|IndexStatsMBean
argument_list|,
name|Long
argument_list|>
name|origIndexLaneToExecutinoCountMap
init|=
name|Maps
operator|.
name|asMap
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|StreamSupport
operator|.
name|stream
argument_list|(
name|asyncIndexInfoService
operator|.
name|getAsyncLanes
argument_list|()
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|lane
lambda|->
name|asyncIndexInfoService
operator|.
name|getInfo
argument_list|(
name|lane
argument_list|)
operator|.
name|getStatsMBean
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|bean
lambda|->
block|{
name|String
name|beanStatus
argument_list|;                             try
block|{
if|if
condition|(
name|bean
operator|!=
literal|null
condition|)
block|{
name|beanStatus
operator|=
name|bean
operator|.
name|getStatus
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception during getting status for {}. Ignoring this indexer lane"
argument_list|,
name|bean
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|STATUS_RUNNING
operator|.
name|equals
argument_list|(
name|beanStatus
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
unit|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
end_expr_stmt

begin_operator
unit|)
operator|,
end_operator

begin_expr_stmt
name|IndexStatsMBean
operator|::
name|getTotalExecutionCount
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_if
if|if
condition|(
operator|!
name|origIndexLaneToExecutinoCountMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Found running index lanes ({}). Sleep a bit before continuing."
argument_list|,
name|transform
argument_list|(
name|origIndexLaneToExecutinoCountMap
operator|.
name|keySet
argument_list|()
argument_list|,
name|IndexStatsMBean
operator|::
name|getName
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Thread interrupted during initial wait"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
end_if

begin_decl_stmt
name|long
name|start
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
end_decl_stmt

begin_while
while|while
condition|(
operator|!
name|origIndexLaneToExecutinoCountMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|IndexStatsMBean
argument_list|,
name|Long
argument_list|>
name|indexLaneEntry
init|=
name|origIndexLaneToExecutinoCountMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|IndexStatsMBean
name|indexLaneBean
init|=
name|indexLaneEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|long
name|oldExecCnt
init|=
name|indexLaneEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|newExecCnt
init|=
name|indexLaneBean
operator|.
name|getTotalExecutionCount
argument_list|()
decl_stmt|;
name|String
name|beanStatus
init|=
name|indexLaneBean
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|STATUS_RUNNING
operator|.
name|equals
argument_list|(
name|beanStatus
argument_list|)
operator|||
name|oldExecCnt
operator|!=
name|newExecCnt
condition|)
block|{
name|origIndexLaneToExecutinoCountMap
operator|.
name|remove
argument_list|(
name|indexLaneBean
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Lane {} has moved - oldExecCnt {}, newExecCnt {}"
argument_list|,
name|indexLaneBean
operator|.
name|getName
argument_list|()
argument_list|,
name|oldExecCnt
argument_list|,
name|newExecCnt
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|clock
operator|.
name|getTime
argument_list|()
operator|-
name|start
operator|>
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Timed out while waiting for running index lane executions"
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Lane {} still has execution count {}. Waiting...."
argument_list|,
name|indexLaneBean
operator|.
name|getName
argument_list|()
argument_list|,
name|newExecCnt
argument_list|)
expr_stmt|;
try|try
block|{
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Thread interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
end_while

begin_return
return|return
name|origIndexLaneToExecutinoCountMap
operator|.
name|isEmpty
argument_list|()
return|;
end_return

begin_function
unit|}      private
name|void
name|markCurrentIndexFilesUnsafeForActiveDeletion
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|indexPath
range|:
name|indexPathService
operator|.
name|getIndexPaths
argument_list|()
control|)
block|{
name|markCurrentIndexFilesUnsafeForActiveDeletionFor
argument_list|(
name|rootBuilder
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|merge
argument_list|(
name|rootBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|markCurrentIndexFilesUnsafeForActiveDeletionFor
parameter_list|(
name|NodeBuilder
name|rootBuilder
parameter_list|,
name|String
name|indexPath
parameter_list|)
block|{
name|NodeBuilder
name|indexPathBuilder
init|=
name|getBuilderForPath
argument_list|(
name|rootBuilder
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|TYPE_LUCENE
operator|.
name|equals
argument_list|(
name|indexPathBuilder
operator|.
name|getProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|)
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring index {} as it's not a lucene index"
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
return|return;
block|}
name|NodeBuilder
name|dataNodeBuilder
init|=
name|indexPathBuilder
operator|.
name|getChildNode
argument_list|(
name|INDEX_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|indexFileName
range|:
name|dataNodeBuilder
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
name|NodeBuilder
name|indexFileBuilder
init|=
name|dataNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|indexFileName
argument_list|)
decl_stmt|;
name|indexFileBuilder
operator|.
name|setProperty
argument_list|(
name|PROP_UNSAFE_FOR_ACTIVE_DELETION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
specifier|static
name|NodeBuilder
name|getBuilderForPath
parameter_list|(
name|NodeBuilder
name|rootBuilder
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|NodeBuilder
name|builder
init|=
name|rootBuilder
decl_stmt|;
for|for
control|(
name|String
name|elem
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|builder
operator|=
name|builder
operator|.
name|getChildNode
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
end_function

begin_function
specifier|private
name|long
name|getSafeTimestampForDeletedBlobs
parameter_list|()
block|{
name|long
name|timestamp
init|=
name|clock
operator|.
name|getTime
argument_list|()
operator|-
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|MIN_BLOB_AGE_TO_ACTIVELY_DELETE
argument_list|)
decl_stmt|;
name|long
name|minCheckpointTimestamp
init|=
name|getOldestCheckpointCreationTimestamp
argument_list|()
decl_stmt|;
if|if
condition|(
name|minCheckpointTimestamp
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|minCheckpointTimestamp
return|;
block|}
if|if
condition|(
name|minCheckpointTimestamp
operator|<
name|timestamp
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Oldest checkpoint timestamp ({}) is older than buffer period ({}) for deleted blobs."
operator|+
literal|" Using that instead"
argument_list|,
name|minCheckpointTimestamp
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|minCheckpointTimestamp
expr_stmt|;
block|}
return|return
name|timestamp
return|;
block|}
end_function

begin_function
specifier|private
name|long
name|getOldestCheckpointCreationTimestamp
parameter_list|()
block|{
name|Tracker
argument_list|<
name|CheckpointMBean
argument_list|>
name|tracker
init|=
name|whiteboard
operator|.
name|track
argument_list|(
name|CheckpointMBean
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|CheckpointMBean
argument_list|>
name|services
init|=
name|tracker
operator|.
name|getServices
argument_list|()
decl_stmt|;
if|if
condition|(
name|services
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|services
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOldestCheckpointCreationTimestamp
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|services
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to get checkpoint mbean. No service of required type found."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to get checkpoint mbean. Multiple services of required type found."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
finally|finally
block|{
name|tracker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_function

unit|}
end_unit

