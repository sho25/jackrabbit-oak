begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|builder
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Commit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Instruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Instruction
operator|.
name|AddNodeInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Instruction
operator|.
name|AddPropertyInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Instruction
operator|.
name|CopyNodeInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Instruction
operator|.
name|MoveNodeInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Instruction
operator|.
name|RemoveNodeInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Instruction
operator|.
name|SetPropertyInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|InstructionAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|builder
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:pmarx@adobe.com>Philipp Marx</a>  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"javadoc"
argument_list|)
specifier|public
class|class
name|CommitBuilderImplTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MESSAGE
init|=
literal|"This is a simple commit"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ROOT
init|=
literal|"/"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSimpleAdd
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+\"a\" : { \"int\" : 1 } \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+\"a/b\" : { \"string\" : \"foo\" } \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+\"a/c\" : { \"bool\" : true }"
argument_list|)
expr_stmt|;
name|Commit
name|commit
init|=
name|this
operator|.
name|buildAndAssertCommit
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Instruction
argument_list|>
name|instructions
init|=
name|commit
operator|.
name|getInstructions
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|instructions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|InstructionAssert
operator|.
name|assertAddNodeInstruction
argument_list|(
operator|(
name|AddNodeInstruction
operator|)
name|instructions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"/a"
argument_list|)
expr_stmt|;
name|InstructionAssert
operator|.
name|assertAddPropertyInstruction
argument_list|(
operator|(
name|AddPropertyInstruction
operator|)
name|instructions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"/a"
argument_list|,
literal|"int"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|InstructionAssert
operator|.
name|assertAddNodeInstruction
argument_list|(
operator|(
name|AddNodeInstruction
operator|)
name|instructions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"/a/b"
argument_list|)
expr_stmt|;
name|InstructionAssert
operator|.
name|assertAddPropertyInstruction
argument_list|(
operator|(
name|AddPropertyInstruction
operator|)
name|instructions
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|"/a/b"
argument_list|,
literal|"string"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|InstructionAssert
operator|.
name|assertAddNodeInstruction
argument_list|(
operator|(
name|AddNodeInstruction
operator|)
name|instructions
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|"/a/c"
argument_list|)
expr_stmt|;
name|InstructionAssert
operator|.
name|assertAddPropertyInstruction
argument_list|(
operator|(
name|AddPropertyInstruction
operator|)
name|instructions
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|"/a/c"
argument_list|,
literal|"bool"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleCopy
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"*\"a\" : \"b\"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"*\"a/b\" : \"a/c\"\n"
argument_list|)
expr_stmt|;
name|Commit
name|commit
init|=
name|this
operator|.
name|buildAndAssertCommit
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Instruction
argument_list|>
name|instructions
init|=
name|commit
operator|.
name|getInstructions
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|instructions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|InstructionAssert
operator|.
name|assertCopyNodeInstruction
argument_list|(
operator|(
name|CopyNodeInstruction
operator|)
name|instructions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"/"
argument_list|,
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
expr_stmt|;
name|InstructionAssert
operator|.
name|assertCopyNodeInstruction
argument_list|(
operator|(
name|CopyNodeInstruction
operator|)
name|instructions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"/"
argument_list|,
literal|"/a/b"
argument_list|,
literal|"/a/c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleMove
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|">\"a\" : \"b\"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|">\"a/b\" : \"a/c\"\n"
argument_list|)
expr_stmt|;
name|Commit
name|commit
init|=
name|this
operator|.
name|buildAndAssertCommit
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Instruction
argument_list|>
name|instructions
init|=
name|commit
operator|.
name|getInstructions
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|instructions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|InstructionAssert
operator|.
name|assertMoveNodeInstruction
argument_list|(
operator|(
name|MoveNodeInstruction
operator|)
name|instructions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"/"
argument_list|,
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
expr_stmt|;
name|InstructionAssert
operator|.
name|assertMoveNodeInstruction
argument_list|(
operator|(
name|MoveNodeInstruction
operator|)
name|instructions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"/"
argument_list|,
literal|"/a/b"
argument_list|,
literal|"/a/c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"-\"a\""
argument_list|)
expr_stmt|;
comment|// TODO properties
name|Commit
name|commit
init|=
name|this
operator|.
name|buildAndAssertCommit
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Instruction
argument_list|>
name|instructions
init|=
name|commit
operator|.
name|getInstructions
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|instructions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|InstructionAssert
operator|.
name|assertRemoveNodeInstruction
argument_list|(
operator|(
name|RemoveNodeInstruction
operator|)
name|instructions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"/a"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleSet
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"^\"a\" : \"b\"\n"
argument_list|)
expr_stmt|;
name|Commit
name|commit
init|=
name|this
operator|.
name|buildAndAssertCommit
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Instruction
argument_list|>
name|instructions
init|=
name|commit
operator|.
name|getInstructions
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|instructions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|InstructionAssert
operator|.
name|assertSetPropertyInstruction
argument_list|(
operator|(
name|SetPropertyInstruction
operator|)
name|instructions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"/"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Commit
name|buildAndAssertCommit
parameter_list|(
name|String
name|commitString
parameter_list|)
throws|throws
name|Exception
block|{
name|Commit
name|commit
init|=
name|CommitBuilder
operator|.
name|build
argument_list|(
name|ROOT
argument_list|,
name|commitString
argument_list|,
name|MESSAGE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MESSAGE
argument_list|,
name|commit
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|commit
operator|.
name|getRevisionId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|commit
return|;
block|}
block|}
end_class

end_unit

