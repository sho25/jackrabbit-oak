begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|RDBMeta
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RDBMeta
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Tries to find a suitable binary type      */
annotation|@
name|CheckForNull
specifier|public
specifier|static
name|String
name|findBinaryType
parameter_list|(
name|DatabaseMetaData
name|md
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|binaryType
init|=
literal|null
decl_stmt|;
name|String
name|dbtype
init|=
name|getDataBaseName
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|ResultSet
name|rs
init|=
name|md
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|type
init|=
name|rs
operator|.
name|getInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|rs
operator|.
name|getInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Type information from "
operator|+
name|dbtype
operator|+
literal|" -> "
operator|+
name|name
operator|+
literal|" "
operator|+
name|type
operator|+
literal|" "
operator|+
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|type
operator|==
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|BINARY
operator|||
name|type
operator|==
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|VARBINARY
operator|)
operator|&&
operator|(
name|size
operator|==
literal|0
operator|||
name|size
operator|>
literal|65535
operator|)
condition|)
block|{
name|binaryType
operator|=
name|name
expr_stmt|;
block|}
block|}
return|return
name|binaryType
return|;
block|}
specifier|public
specifier|static
name|String
name|getDataBaseName
parameter_list|(
name|DatabaseMetaData
name|md
parameter_list|)
block|{
try|try
block|{
return|return
name|md
operator|.
name|getDatabaseProductName
argument_list|()
operator|+
literal|" "
operator|+
name|md
operator|.
name|getDatabaseMajorVersion
argument_list|()
operator|+
literal|"."
operator|+
name|md
operator|.
name|getDatabaseMinorVersion
argument_list|()
operator|+
literal|" ("
operator|+
name|md
operator|.
name|getDriverName
argument_list|()
operator|+
literal|" "
operator|+
name|md
operator|.
name|getDriverVersion
argument_list|()
operator|+
literal|")"
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
return|return
literal|"(Could not determine DB type: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
block|}
end_class

end_unit

