begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|index
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CRC32
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|Buffer
import|;
end_import

begin_comment
comment|/**  * Builds an index incrementally in memory, and serializes its contents into a  * sequence of bytes.  */
end_comment

begin_class
specifier|public
class|class
name|IndexWriter
block|{
specifier|private
specifier|static
class|class
name|Entry
block|{
name|long
name|msb
decl_stmt|;
name|long
name|lsb
decl_stmt|;
name|int
name|offset
decl_stmt|;
name|int
name|size
decl_stmt|;
name|int
name|generation
decl_stmt|;
name|int
name|fullGeneration
decl_stmt|;
name|boolean
name|isCompacted
decl_stmt|;
block|}
comment|/**      * Create a new {@link IndexWriter} for the specified block size. The block      * size is needed to ensure that the data produced by the returned {@link      * IndexWriter} is aligned to a specified boundary, i.e. is a multiple of      * the block size.      *      * @param blockSize The block size. It must be strictly positive.      * @return An index of {@link IndexWriter}.      */
specifier|public
specifier|static
name|IndexWriter
name|newIndexWriter
parameter_list|(
name|int
name|blockSize
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|blockSize
operator|>
literal|0
argument_list|,
literal|"Invalid block size"
argument_list|)
expr_stmt|;
return|return
operator|new
name|IndexWriter
argument_list|(
name|blockSize
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|int
name|blockSize
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|IndexWriter
parameter_list|(
name|int
name|blockSize
parameter_list|)
block|{
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
block|}
comment|/**      * Add an entry to this index.      *      * @param msb            The most significant bits of the entry identifier.      * @param lsb            The least significant bits of the entry      *                       identifier.      * @param offset         The position of the entry in the file.      * @param size           The size of the entry.      * @param generation     The generation of the entry.      * @param fullGeneration The full generation of the entry.      * @param isCompacted    Whether the entry is generated as part of a      *                       compaction operation.      */
specifier|public
name|void
name|addEntry
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|generation
parameter_list|,
name|int
name|fullGeneration
parameter_list|,
name|boolean
name|isCompacted
parameter_list|)
block|{
name|Entry
name|entry
init|=
operator|new
name|Entry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|msb
operator|=
name|msb
expr_stmt|;
name|entry
operator|.
name|lsb
operator|=
name|lsb
expr_stmt|;
name|entry
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|entry
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|entry
operator|.
name|generation
operator|=
name|generation
expr_stmt|;
name|entry
operator|.
name|fullGeneration
operator|=
name|fullGeneration
expr_stmt|;
name|entry
operator|.
name|isCompacted
operator|=
name|isCompacted
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
comment|/**      * Serializes the content of the index. The returned array of bytes is      * always a multiple of the block size specified when this {@link      * IndexWriter} was created.      *      * @return the serialized content of the index.      */
specifier|public
name|byte
index|[]
name|write
parameter_list|()
block|{
name|int
name|dataSize
init|=
name|entries
operator|.
name|size
argument_list|()
operator|*
name|IndexEntryV2
operator|.
name|SIZE
operator|+
name|IndexV2
operator|.
name|FOOTER_SIZE
decl_stmt|;
name|int
name|totalSize
init|=
operator|(
operator|(
name|dataSize
operator|+
name|blockSize
operator|-
literal|1
operator|)
operator|/
name|blockSize
operator|)
operator|*
name|blockSize
decl_stmt|;
name|Buffer
name|buffer
init|=
name|Buffer
operator|.
name|allocate
argument_list|(
name|totalSize
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|position
argument_list|(
name|totalSize
operator|-
name|dataSize
argument_list|)
expr_stmt|;
name|entries
operator|.
name|sort
argument_list|(
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|a
operator|.
name|msb
operator|<
name|b
operator|.
name|msb
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|a
operator|.
name|msb
operator|>
name|b
operator|.
name|msb
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|a
operator|.
name|lsb
operator|<
name|b
operator|.
name|lsb
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|a
operator|.
name|lsb
operator|>
name|b
operator|.
name|lsb
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|buffer
operator|.
name|putLong
argument_list|(
name|entry
operator|.
name|msb
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putLong
argument_list|(
name|entry
operator|.
name|lsb
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
name|entry
operator|.
name|offset
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
name|entry
operator|.
name|size
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
name|entry
operator|.
name|generation
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
name|entry
operator|.
name|fullGeneration
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|put
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|entry
operator|.
name|isCompacted
condition|?
literal|1
else|:
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CRC32
name|checksum
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|,
name|totalSize
operator|-
name|dataSize
argument_list|,
name|dataSize
operator|-
name|IndexV2
operator|.
name|FOOTER_SIZE
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
operator|(
name|int
operator|)
name|checksum
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
name|totalSize
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
name|IndexLoaderV2
operator|.
name|MAGIC
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|array
argument_list|()
return|;
block|}
block|}
end_class

end_unit

