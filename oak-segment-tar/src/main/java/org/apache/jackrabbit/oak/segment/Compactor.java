begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|concat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|BinaryPropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MultiBinaryPropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ApplyDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
import|;
end_import

begin_comment
comment|/**  * Tool for compacting segments.  */
end_comment

begin_class
specifier|public
class|class
name|Compactor
block|{
comment|/** Logger instance */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Compactor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SegmentReader
name|reader
decl_stmt|;
specifier|private
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
specifier|private
specifier|final
name|SegmentWriter
name|writer
decl_stmt|;
comment|/**      * Filters nodes that will be included in the compaction map, allowing for      * optimization in case of an offline compaction      */
specifier|private
specifier|final
name|Predicate
argument_list|<
name|NodeState
argument_list|>
name|includeInMap
init|=
operator|new
name|OfflineCompactionPredicate
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ProgressTracker
name|progress
init|=
operator|new
name|ProgressTracker
argument_list|()
decl_stmt|;
comment|/**      * Map from {@link #getBlobKey(Blob) blob keys} to matching compacted blob      * record identifiers. Used to de-duplicate copies of the same binary      * values.      */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RecordId
argument_list|>
argument_list|>
name|binaries
init|=
name|newHashMap
argument_list|()
decl_stmt|;
comment|/**      * Flag to use content equality verification before actually compacting the      * state, on the childNodeChanged diff branch (Used in Backup scenario)      */
specifier|private
name|boolean
name|contentEqualityCheck
decl_stmt|;
comment|/**      * Allows the cancellation of the compaction process. If this      * {@code Supplier} returns {@code true}, this compactor will cancel      * compaction and return a partial {@code SegmentNodeState} containing the      * changes compacted before the cancellation.      */
specifier|private
specifier|final
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|cancel
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|cacheSize
decl_stmt|;
static|static
block|{
name|Integer
name|ci
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"compress-interval"
argument_list|)
decl_stmt|;
name|Integer
name|size
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.segment.compaction.cacheSize"
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|cacheSize
operator|=
name|size
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ci
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Deprecated argument 'compress-interval', please use 'oak.segment.compaction.cacheSize' instead."
argument_list|)
expr_stmt|;
name|cacheSize
operator|=
name|ci
expr_stmt|;
block|}
else|else
block|{
name|cacheSize
operator|=
literal|100000
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|RecordCache
argument_list|<
name|RecordId
argument_list|>
name|cache
init|=
name|RecordCache
operator|.
expr|<
name|RecordId
operator|>
name|factory
argument_list|(
name|cacheSize
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|public
name|Compactor
parameter_list|(
name|SegmentReader
name|reader
parameter_list|,
name|SegmentWriter
name|writer
parameter_list|,
name|BlobStore
name|blobStore
parameter_list|,
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|cancel
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
name|this
operator|.
name|cancel
operator|=
name|cancel
expr_stmt|;
block|}
specifier|private
name|SegmentNodeBuilder
name|process
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|NodeState
name|onto
parameter_list|)
throws|throws
name|IOException
block|{
name|SegmentNodeBuilder
name|builder
init|=
operator|new
name|SegmentNodeBuilder
argument_list|(
name|writer
operator|.
name|writeNode
argument_list|(
name|onto
argument_list|)
argument_list|,
name|writer
argument_list|)
decl_stmt|;
operator|new
name|CompactDiff
argument_list|(
name|builder
argument_list|)
operator|.
name|diff
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * Compact the differences between a {@code before} and a {@code after} on      * top of an {@code onto} state.      *       * @param before      *            the before state      * @param after      *            the after state      * @param onto      *            the onto state      * @return the compacted state      */
specifier|public
name|SegmentNodeState
name|compact
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|NodeState
name|onto
parameter_list|)
throws|throws
name|IOException
block|{
name|progress
operator|.
name|start
argument_list|()
expr_stmt|;
name|SegmentNodeState
name|compacted
init|=
name|process
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|onto
argument_list|)
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|progress
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return
name|compacted
return|;
block|}
specifier|private
class|class
name|CompactDiff
extends|extends
name|ApplyDiff
block|{
specifier|private
name|IOException
name|exception
decl_stmt|;
comment|/**          * Current processed path, or null if the trace log is not enabled at          * the beginning of the compaction call. The null check will also be          * used to verify if a trace log will be needed or not          */
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
name|CompactDiff
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|this
operator|.
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|path
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|CompactDiff
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|childName
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|path
operator|=
name|concat
argument_list|(
name|path
argument_list|,
name|childName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|path
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|boolean
name|diff
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|CancelableDiff
argument_list|(
name|this
argument_list|,
name|cancel
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|exception
argument_list|)
throw|;
block|}
return|return
name|success
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"propertyAdded {}/{}"
argument_list|,
name|path
argument_list|,
name|after
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|progress
operator|.
name|onProperty
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|propertyAdded
argument_list|(
name|compact
argument_list|(
name|after
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"propertyChanged {}/{}"
argument_list|,
name|path
argument_list|,
name|after
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|progress
operator|.
name|onProperty
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|propertyChanged
argument_list|(
name|before
argument_list|,
name|compact
argument_list|(
name|after
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"childNodeAdded {}/{}"
argument_list|,
name|path
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|RecordId
name|id
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|after
operator|instanceof
name|SegmentNodeState
condition|)
block|{
name|id
operator|=
operator|(
operator|(
name|SegmentNodeState
operator|)
name|after
operator|)
operator|.
name|getRecordId
argument_list|()
expr_stmt|;
name|RecordId
name|compactedId
init|=
name|cache
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|compactedId
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setChildNode
argument_list|(
name|name
argument_list|,
operator|new
name|SegmentNodeState
argument_list|(
name|reader
argument_list|,
name|writer
argument_list|,
name|compactedId
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|progress
operator|.
name|onNode
argument_list|()
expr_stmt|;
try|try
block|{
name|NodeBuilder
name|child
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
operator|new
name|CompactDiff
argument_list|(
name|child
argument_list|,
name|path
argument_list|,
name|name
argument_list|)
operator|.
name|diff
argument_list|(
name|EMPTY_NODE
argument_list|,
name|after
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|SegmentNodeState
name|state
init|=
name|writer
operator|.
name|writeNode
argument_list|(
name|child
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
name|name
argument_list|,
name|state
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
name|includeInMap
operator|.
name|apply
argument_list|(
name|after
argument_list|)
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|state
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"childNodeChanged {}/{}"
argument_list|,
name|path
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|RecordId
name|id
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|after
operator|instanceof
name|SegmentNodeState
condition|)
block|{
name|id
operator|=
operator|(
operator|(
name|SegmentNodeState
operator|)
name|after
operator|)
operator|.
name|getRecordId
argument_list|()
expr_stmt|;
name|RecordId
name|compactedId
init|=
name|cache
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|compactedId
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setChildNode
argument_list|(
name|name
argument_list|,
operator|new
name|SegmentNodeState
argument_list|(
name|reader
argument_list|,
name|writer
argument_list|,
name|compactedId
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|contentEqualityCheck
operator|&&
name|before
operator|.
name|equals
argument_list|(
name|after
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|progress
operator|.
name|onNode
argument_list|()
expr_stmt|;
try|try
block|{
name|NodeBuilder
name|child
init|=
name|builder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
operator|new
name|CompactDiff
argument_list|(
name|child
argument_list|,
name|path
argument_list|,
name|name
argument_list|)
operator|.
name|diff
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|RecordId
name|compactedId
init|=
name|writer
operator|.
name|writeNode
argument_list|(
name|child
operator|.
name|getNodeState
argument_list|()
argument_list|)
operator|.
name|getRecordId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|compactedId
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|private
name|PropertyState
name|compact
parameter_list|(
name|PropertyState
name|property
parameter_list|)
block|{
name|String
name|name
init|=
name|property
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Type
argument_list|<
name|?
argument_list|>
name|type
init|=
name|property
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|BINARY
condition|)
block|{
name|Blob
name|blob
init|=
name|compact
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|BinaryPropertyState
operator|.
name|binaryProperty
argument_list|(
name|name
argument_list|,
name|blob
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|BINARIES
condition|)
block|{
name|List
argument_list|<
name|Blob
argument_list|>
name|blobs
init|=
operator|new
name|ArrayList
argument_list|<
name|Blob
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Blob
name|blob
range|:
name|property
operator|.
name|getValue
argument_list|(
name|BINARIES
argument_list|)
control|)
block|{
name|blobs
operator|.
name|add
argument_list|(
name|compact
argument_list|(
name|blob
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|MultiBinaryPropertyState
operator|.
name|binaryPropertyFromBlob
argument_list|(
name|name
argument_list|,
name|blobs
argument_list|)
return|;
block|}
else|else
block|{
name|Object
name|value
init|=
name|property
operator|.
name|getValue
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
comment|/**      * Compacts (and de-duplicates) the given blob.      *       * @param blob      *            blob to be compacted      * @return compacted blob      */
specifier|private
name|Blob
name|compact
parameter_list|(
name|Blob
name|blob
parameter_list|)
block|{
if|if
condition|(
name|blob
operator|instanceof
name|SegmentBlob
condition|)
block|{
name|SegmentBlob
name|sb
init|=
operator|(
name|SegmentBlob
operator|)
name|blob
decl_stmt|;
try|try
block|{
comment|// Check if we've already cloned this specific record
name|RecordId
name|id
init|=
name|sb
operator|.
name|getRecordId
argument_list|()
decl_stmt|;
name|RecordId
name|compactedId
init|=
name|cache
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|compactedId
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SegmentBlob
argument_list|(
name|blobStore
argument_list|,
name|compactedId
argument_list|)
return|;
block|}
name|progress
operator|.
name|onBinary
argument_list|()
expr_stmt|;
comment|// if the blob is external, just clone it
if|if
condition|(
name|sb
operator|.
name|isExternal
argument_list|()
condition|)
block|{
name|SegmentBlob
name|clone
init|=
name|writer
operator|.
name|writeBlob
argument_list|(
name|sb
argument_list|)
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|clone
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|clone
return|;
block|}
comment|// if the blob is inlined, just clone it
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|<
name|Segment
operator|.
name|MEDIUM_LIMIT
condition|)
block|{
name|SegmentBlob
name|clone
init|=
name|writer
operator|.
name|writeBlob
argument_list|(
name|blob
argument_list|)
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|clone
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|clone
return|;
block|}
comment|// alternatively look if the exact same binary has been cloned
name|String
name|key
init|=
name|getBlobKey
argument_list|(
name|blob
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RecordId
argument_list|>
name|ids
init|=
name|binaries
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RecordId
name|duplicateId
range|:
name|ids
control|)
block|{
if|if
condition|(
operator|new
name|SegmentBlob
argument_list|(
name|blobStore
argument_list|,
name|duplicateId
argument_list|)
operator|.
name|equals
argument_list|(
name|sb
argument_list|)
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|duplicateId
argument_list|)
expr_stmt|;
return|return
operator|new
name|SegmentBlob
argument_list|(
name|blobStore
argument_list|,
name|duplicateId
argument_list|)
return|;
block|}
block|}
block|}
comment|// if not, clone the large blob and keep track of the result
name|sb
operator|=
name|writer
operator|.
name|writeBlob
argument_list|(
name|blob
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|sb
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|==
literal|null
condition|)
block|{
name|ids
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
name|binaries
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
name|ids
operator|.
name|add
argument_list|(
name|sb
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to compact a blob"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// fall through
block|}
block|}
comment|// no way to compact this blob, so we'll just keep it as-is
return|return
name|blob
return|;
block|}
specifier|private
specifier|static
name|String
name|getBlobKey
parameter_list|(
name|Blob
name|blob
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|stream
init|=
name|blob
operator|.
name|getNewStream
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|SegmentWriter
operator|.
name|BLOCK_SIZE
index|]
decl_stmt|;
name|int
name|n
init|=
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
decl_stmt|;
return|return
name|blob
operator|.
name|length
argument_list|()
operator|+
literal|":"
operator|+
name|Hashing
operator|.
name|sha1
argument_list|()
operator|.
name|hashBytes
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
return|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ProgressTracker
block|{
specifier|private
specifier|final
name|long
name|logAt
init|=
name|Long
operator|.
name|getLong
argument_list|(
literal|"compaction-progress-log"
argument_list|,
literal|150000
argument_list|)
decl_stmt|;
specifier|private
name|long
name|start
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|nodes
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|properties
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|binaries
init|=
literal|0
decl_stmt|;
name|void
name|start
parameter_list|()
block|{
name|nodes
operator|=
literal|0
expr_stmt|;
name|properties
operator|=
literal|0
expr_stmt|;
name|binaries
operator|=
literal|0
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
name|void
name|onNode
parameter_list|()
block|{
if|if
condition|(
operator|++
name|nodes
operator|%
name|logAt
operator|==
literal|0
condition|)
block|{
name|logProgress
argument_list|(
name|start
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|onProperty
parameter_list|()
block|{
name|properties
operator|++
expr_stmt|;
block|}
name|void
name|onBinary
parameter_list|()
block|{
name|binaries
operator|++
expr_stmt|;
block|}
name|void
name|stop
parameter_list|()
block|{
name|logProgress
argument_list|(
name|start
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|logProgress
parameter_list|(
name|long
name|start
parameter_list|,
name|boolean
name|done
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Compacted {} nodes, {} properties, {} binaries in {} ms."
argument_list|,
name|nodes
argument_list|,
name|properties
argument_list|,
name|binaries
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
if|if
condition|(
name|done
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Finished compaction: {} nodes, {} properties, {} binaries."
argument_list|,
name|nodes
argument_list|,
name|properties
argument_list|,
name|binaries
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|OfflineCompactionPredicate
implements|implements
name|Predicate
argument_list|<
name|NodeState
argument_list|>
block|{
comment|/**          * over 64K in size, node will be included in the compaction map          */
specifier|private
specifier|static
specifier|final
name|long
name|offlineThreshold
init|=
literal|65536
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeState
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|.
name|getChildNodeCount
argument_list|(
literal|2
argument_list|)
operator|>
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
name|long
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PropertyState
name|ps
range|:
name|state
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|Type
argument_list|<
name|?
argument_list|>
name|type
init|=
name|ps
operator|.
name|getType
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ps
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|long
name|size
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|BINARY
operator|||
name|type
operator|==
name|BINARIES
condition|)
block|{
name|Blob
name|blob
init|=
name|ps
operator|.
name|getValue
argument_list|(
name|BINARY
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|blob
operator|instanceof
name|SegmentBlob
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|SegmentBlob
operator|)
name|blob
operator|)
operator|.
name|isExternal
argument_list|()
condition|)
block|{
name|size
operator|+=
name|blob
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|size
operator|+=
name|blob
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|size
operator|=
name|ps
operator|.
name|size
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|count
operator|+=
name|size
expr_stmt|;
if|if
condition|(
name|size
operator|>=
name|offlineThreshold
operator|||
name|count
operator|>=
name|offlineThreshold
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|void
name|setContentEqualityCheck
parameter_list|(
name|boolean
name|contentEqualityCheck
parameter_list|)
block|{
name|this
operator|.
name|contentEqualityCheck
operator|=
name|contentEqualityCheck
expr_stmt|;
block|}
block|}
end_class

end_unit

