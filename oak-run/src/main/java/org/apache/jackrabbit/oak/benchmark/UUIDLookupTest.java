begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|InvalidItemStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
operator|.
name|util
operator|.
name|OakIndexUtils
import|;
end_import

begin_class
specifier|public
class|class
name|UUIDLookupTest
extends|extends
name|AbstractTest
block|{
specifier|private
specifier|static
specifier|final
name|int
name|NODE_COUNT
init|=
literal|100
decl_stmt|;
specifier|private
name|int
name|noOfIndex
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"noOfIndex"
argument_list|,
literal|60
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|lookupByQuery
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"lookupByQuery"
argument_list|)
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|Node
name|root
decl_stmt|;
specifier|protected
name|Query
name|createQuery
parameter_list|(
name|QueryManager
name|manager
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|manager
operator|.
name|createQuery
argument_list|(
literal|"SELECT * FROM [nt:base] WHERE [jcr:uuid] = "
operator|+
name|i
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeSuite
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|session
operator|=
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|ensurePropertyIndexes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidItemStateException
name|e
parameter_list|)
block|{
comment|// some other oak instance probably created the same
comment|// index definition concurrently. refresh and try again
comment|// do not catch exception if it fails again.
name|session
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ensurePropertyIndexes
argument_list|()
expr_stmt|;
block|}
name|root
operator|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"testroot"
operator|+
name|TEST_ID
argument_list|,
literal|"nt:unstructured"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NODE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|root
operator|.
name|addNode
argument_list|(
literal|"node"
operator|+
name|i
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"jcr:uuid"
argument_list|,
name|createUUID
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|String
name|lookupMode
init|=
name|lookupByQuery
condition|?
literal|"query"
else|:
literal|"Session#getNodeByIdentifier"
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"No of indexes (%s) %d, Lookup by (%s)[%s] %n"
argument_list|,
name|noOfIndex
argument_list|,
name|noOfIndex
argument_list|,
literal|"lookupByQuery"
argument_list|,
name|lookupMode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|runTest
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|lookupByQuery
condition|)
block|{
name|QueryManager
name|manager
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NODE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Query
name|query
init|=
name|createQuery
argument_list|(
name|manager
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|NodeIterator
name|iterator
init|=
name|query
operator|.
name|execute
argument_list|()
operator|.
name|getNodes
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|node
init|=
name|iterator
operator|.
name|nextNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getProperty
argument_list|(
literal|"jcr:uuid"
argument_list|)
operator|.
name|getLong
argument_list|()
operator|!=
name|i
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid test result: "
operator|+
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NODE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|session
operator|.
name|getNodeByIdentifier
argument_list|(
name|createUUID
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterSuite
parameter_list|()
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NODE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|root
operator|.
name|getNode
argument_list|(
literal|"node"
operator|+
name|i
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|root
operator|.
name|remove
argument_list|()
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|ensurePropertyIndexes
parameter_list|()
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|noOfIndex
condition|;
name|i
operator|++
control|)
block|{
operator|new
name|OakIndexUtils
operator|.
name|PropertyIndex
argument_list|()
operator|.
name|property
argument_list|(
literal|"testcount"
operator|+
name|i
argument_list|)
operator|.
name|create
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|createUUID
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
operator|new
name|UUID
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

