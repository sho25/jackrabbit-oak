begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|PROPERTY_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
operator|.
name|TYPE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|AbstractQueryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SinglePropertyIndexQueryTests
extends|extends
name|AbstractQueryTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|INDEXED_PROPERTY
init|=
literal|"indexedProperty"
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
return|return
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|createTestIndexNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|index
init|=
name|super
operator|.
name|createTestIndexNode
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TYPE
argument_list|)
decl_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
name|PROPERTY_NAMES
argument_list|,
name|of
argument_list|(
name|INDEXED_PROPERTY
argument_list|)
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|oak2146
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|statement
init|=
literal|"//*[ "
operator|+
literal|"(@"
operator|+
name|INDEXED_PROPERTY
operator|+
literal|" = 'a' or @"
operator|+
name|INDEXED_PROPERTY
operator|+
literal|" = 'c') "
operator|+
literal|"and "
operator|+
literal|"(@"
operator|+
name|INDEXED_PROPERTY
operator|+
literal|" = 'b' or @"
operator|+
name|INDEXED_PROPERTY
operator|+
literal|" = 'd')]"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|Tree
name|content
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
comment|// adding /content/node1 { a, b }
name|Tree
name|node
init|=
name|content
operator|.
name|addChild
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|INDEXED_PROPERTY
argument_list|,
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// adding /content/node2 { c, d }
name|node
operator|=
name|content
operator|.
name|addChild
argument_list|(
literal|"node2"
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|INDEXED_PROPERTY
argument_list|,
name|of
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// adding nodes with {a, x} and {c, x} these should not be returned
name|node
operator|=
name|content
operator|.
name|addChild
argument_list|(
literal|"node3"
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|INDEXED_PROPERTY
argument_list|,
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"x"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
expr_stmt|;
name|node
operator|=
name|content
operator|.
name|addChild
argument_list|(
literal|"node4"
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|INDEXED_PROPERTY
argument_list|,
name|of
argument_list|(
literal|"c"
argument_list|,
literal|"x"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
name|statement
argument_list|,
literal|"xpath"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

