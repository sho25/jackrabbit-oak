begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Measure impact of synchronous token cleanup on the repository login with  * tokens over multiple users. Concurrency can be set via the benchmark runner.  *  * Default expiration time login tokens is 2 hours, this benchmark uses 15  * seconds to allow for cleanup during the benchmark.  *  */
end_comment

begin_class
specifier|public
class|class
name|LoginWithTokensTest
extends|extends
name|AbstractLoginTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|REL_TEST_PATH
init|=
literal|"testPath"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USER
init|=
literal|"user"
decl_stmt|;
specifier|private
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|// defaults to 10k
specifier|private
specifier|final
name|int
name|numberOfUsers
decl_stmt|;
specifier|private
specifier|final
name|long
name|tknExpy
init|=
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|15
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|long
name|cleanupThreshold
init|=
literal|100
decl_stmt|;
specifier|public
name|LoginWithTokensTest
parameter_list|(
name|int
name|numberOfUsers
parameter_list|)
block|{
name|super
argument_list|(
literal|"admin"
argument_list|,
literal|true
argument_list|,
name|DEFAULT_ITERATIONS
argument_list|)
expr_stmt|;
name|this
operator|.
name|numberOfUsers
operator|=
name|numberOfUsers
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|customConfigurationParameters
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ConfigurationParameters
name|prepare
parameter_list|(
name|ConfigurationParameters
name|conf
parameter_list|)
block|{
name|ConfigurationParameters
name|tkns
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|TokenProvider
operator|.
name|PARAM_TOKEN_EXPIRATION
argument_list|,
name|tknExpy
argument_list|,
literal|"tokenCleanupThreshold"
argument_list|,
name|cleanupThreshold
argument_list|)
decl_stmt|;
name|ConfigurationParameters
name|tokenConfig
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|TokenConfiguration
operator|.
name|NAME
argument_list|,
name|tkns
argument_list|)
decl_stmt|;
return|return
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|conf
argument_list|,
name|tokenConfig
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeSuite
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|beforeSuite
argument_list|()
expr_stmt|;
name|Session
name|s
init|=
name|loginAdministrative
argument_list|()
decl_stmt|;
try|try
block|{
name|UserManager
name|userManager
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|s
operator|)
operator|.
name|getUserManager
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfUsers
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|USER
operator|+
name|i
decl_stmt|;
name|userManager
operator|.
name|createUser
argument_list|(
name|id
argument_list|,
name|id
argument_list|,
operator|new
name|PrincipalImpl
argument_list|(
name|id
argument_list|)
argument_list|,
name|REL_TEST_PATH
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|save
argument_list|()
expr_stmt|;
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"setup done, created "
operator|+
name|numberOfUsers
operator|+
literal|" users."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterSuite
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|s
init|=
name|loginAdministrative
argument_list|()
decl_stmt|;
try|try
block|{
name|Authorizable
name|authorizable
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|s
operator|)
operator|.
name|getUserManager
argument_list|()
operator|.
name|getAuthorizable
argument_list|(
name|USER
operator|+
literal|"0"
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorizable
operator|!=
literal|null
condition|)
block|{
name|Node
name|n
init|=
name|s
operator|.
name|getNode
argument_list|(
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|authorizable
operator|.
name|getPath
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|n
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|s
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|runTest
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Repository
name|repository
init|=
name|getRepository
argument_list|()
decl_stmt|;
name|String
name|t
init|=
name|USER
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|numberOfUsers
argument_list|)
decl_stmt|;
name|SimpleCredentials
name|creds
init|=
operator|new
name|SimpleCredentials
argument_list|(
name|t
argument_list|,
name|t
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|creds
operator|.
name|setAttribute
argument_list|(
literal|".token"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|repository
operator|.
name|login
argument_list|(
name|creds
argument_list|)
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

