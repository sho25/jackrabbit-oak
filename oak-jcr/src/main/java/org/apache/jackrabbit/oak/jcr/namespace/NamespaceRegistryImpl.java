begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|namespace
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
operator|.
name|NamespaceMappings
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link NamespaceRegistry} based on {@link NamespaceMappings}.  */
end_comment

begin_class
specifier|public
class|class
name|NamespaceRegistryImpl
implements|implements
name|NamespaceRegistry
block|{
specifier|private
specifier|final
name|NamespaceMappings
name|nsMappings
decl_stmt|;
specifier|public
name|NamespaceRegistryImpl
parameter_list|(
name|ContentSession
name|session
parameter_list|)
block|{
name|this
operator|.
name|nsMappings
operator|=
operator|new
name|NamespaceMappings
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
comment|//--------------------------------------------------< NamespaceRegistry>---
annotation|@
name|Override
specifier|public
name|void
name|registerNamespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkMutablePrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|checkMutableURI
argument_list|(
name|uri
argument_list|)
expr_stmt|;
try|try
block|{
name|nsMappings
operator|.
name|registerNamespace
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Failed to register namespace mapping from "
operator|+
name|prefix
operator|+
literal|" to "
operator|+
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|unregisterNamespace
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkMutablePrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|nsMappings
operator|.
name|getURI
argument_list|(
name|prefix
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NamespaceException
argument_list|(
literal|"prefix '"
operator|+
name|prefix
operator|+
literal|"' is unused"
argument_list|)
throw|;
block|}
name|nsMappings
operator|.
name|unregisterNamespace
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Failed to unregister a namespace mapping with prefix "
operator|+
name|prefix
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getPrefixes
parameter_list|()
throws|throws
name|RepositoryException
block|{
try|try
block|{
return|return
name|nsMappings
operator|.
name|getPrefixes
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Failed to retrieve registered namespace prefixes"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getURIs
parameter_list|()
throws|throws
name|RepositoryException
block|{
try|try
block|{
return|return
name|nsMappings
operator|.
name|getURIs
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Failed to retrieve registered namespace URIs"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getURI
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|RepositoryException
block|{
try|try
block|{
name|String
name|uri
init|=
name|nsMappings
operator|.
name|getURI
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NamespaceException
argument_list|(
literal|"No namespace registered for prefix "
operator|+
name|prefix
argument_list|)
throw|;
block|}
return|return
name|uri
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Failed to retrieve the namespace URI for prefix "
operator|+
name|prefix
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPrefix
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|RepositoryException
block|{
try|try
block|{
name|String
name|prefix
init|=
name|nsMappings
operator|.
name|getPrefix
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NamespaceException
argument_list|(
literal|"No namespace registered for prefix "
operator|+
name|prefix
argument_list|)
throw|;
block|}
return|return
name|prefix
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Failed to retrieve the namespace prefix for URI "
operator|+
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|checkMutablePrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|NamespaceException
block|{
if|if
condition|(
literal|"jcr"
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
operator|||
literal|"nt"
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
operator|||
literal|"mix"
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
operator|||
literal|"sv"
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
operator|||
name|prefix
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"xml"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NamespaceException
argument_list|(
literal|"Can not map or remap prefix '"
operator|+
name|prefix
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|checkMutableURI
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|NamespaceException
block|{
if|if
condition|(
literal|"http://www.jcp.org/jcr/1.0"
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|||
literal|"http://www.jcp.org/jcr/nt/1.0"
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|||
literal|"http://www.jcp.org/jcr/mix/1.0"
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|||
literal|"http://www.jcp.org/jcr/sv/1.0"
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NamespaceException
argument_list|(
literal|"Can not map or remap uri '"
operator|+
name|uri
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

