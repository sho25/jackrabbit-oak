begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_comment
comment|/**  * Represents a value that can be assigned to a property in the repository.  * Client of the remote repository provides values as instances of this class.  */
end_comment

begin_class
specifier|public
class|class
name|RemoteValue
block|{
comment|/**      * A generic interface to represent a supplier of an item.      *<p/>      * In the specific, it is used by values whose underlying implementation is      * an {@code InputStream}. To enable multiple traversals of {@code      * InputStream}s, the value is wrapped by this interface to effectively have      * a factory over the underlying {@code InputStream}.      *      * @param<T> Type of the item this object is able to create.      */
specifier|public
specifier|static
interface|interface
name|Supplier
parameter_list|<
name|T
parameter_list|>
block|{
name|T
name|get
parameter_list|()
function_decl|;
block|}
comment|/**      * This class helps executing logic that depends on the type of a remote      * value. Instead of manually branching code depending on the result of      * {@code isText}, {@code isBoolean} and so on, a handler can be implemented      * to provide different logic for different types.      */
specifier|public
specifier|static
class|class
name|TypeHandler
block|{
specifier|public
name|void
name|isBinary
parameter_list|(
name|Supplier
argument_list|<
name|InputStream
argument_list|>
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isMultiBinary
parameter_list|(
name|Iterable
argument_list|<
name|Supplier
argument_list|<
name|InputStream
argument_list|>
argument_list|>
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isBinaryId
parameter_list|(
name|String
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isMultiBinaryId
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isBoolean
parameter_list|(
name|Boolean
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isMultiBoolean
parameter_list|(
name|Iterable
argument_list|<
name|Boolean
argument_list|>
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isDate
parameter_list|(
name|Long
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isMultiDate
parameter_list|(
name|Iterable
argument_list|<
name|Long
argument_list|>
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isDecimal
parameter_list|(
name|BigDecimal
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isMultiDecimal
parameter_list|(
name|Iterable
argument_list|<
name|BigDecimal
argument_list|>
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isDouble
parameter_list|(
name|Double
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isMultiDouble
parameter_list|(
name|Iterable
argument_list|<
name|Double
argument_list|>
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isLong
parameter_list|(
name|Long
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isMultiLong
parameter_list|(
name|Iterable
argument_list|<
name|Long
argument_list|>
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isName
parameter_list|(
name|String
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isMultiName
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isPath
parameter_list|(
name|String
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isMultiPath
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isReference
parameter_list|(
name|String
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isMultiReference
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isText
parameter_list|(
name|String
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isMultiText
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isUri
parameter_list|(
name|String
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isMultiUri
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isWeakReference
parameter_list|(
name|String
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isMultiWeakReference
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|isUnknown
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"case not handled"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Create a remote value of type string.      *      * @param value The string wrapped by the remote value.      * @return A remote value of type string wrapping the provided value.      */
specifier|public
specifier|static
name|RemoteValue
name|toText
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isText
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|asText
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote multi-value of type string.      *      * @param value The collection of strings wrapped by the remote value.      * @return A remote multi-value of type string wrapping the provided      * collection of strings.      */
specifier|public
specifier|static
name|RemoteValue
name|toMultiText
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isMultiText
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|asMultiText
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote value of type binary.      *      * @param value The factory of input streams wrapped by the remote value.      * @return A remote value of type binary wrapping the provided factory of      * input streams.      */
specifier|public
specifier|static
name|RemoteValue
name|toBinary
parameter_list|(
specifier|final
name|Supplier
argument_list|<
name|InputStream
argument_list|>
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isBinary
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Supplier
argument_list|<
name|InputStream
argument_list|>
name|asBinary
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote multi-value of type binary.      *      * @param value The collection of factories of input streams wrapped by the      *              remote value.      * @return A remote multi-value of type binary wrapping the provided      * collection of input streams.      */
specifier|public
specifier|static
name|RemoteValue
name|toMultiBinary
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|Supplier
argument_list|<
name|InputStream
argument_list|>
argument_list|>
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isMultiBinary
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Supplier
argument_list|<
name|InputStream
argument_list|>
argument_list|>
name|asMultiBinary
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote value of type binary ID.      *      * @param value The binary ID wrapped by the remote value.      * @return A remote value wrapping the provided binary ID.      */
specifier|public
specifier|static
name|RemoteValue
name|toBinaryId
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isBinaryId
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|asBinaryId
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote multi-value of type binary ID.      *      * @param value The collection of binary IDs wrapped by the remote value.      * @return A remote multi-value wrapping the provided collection of binary      * IDs.      */
specifier|public
specifier|static
name|RemoteValue
name|toMultiBinaryId
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isMultiBinaryId
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|asMultiBinaryId
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote value of type long.      *      * @param value The long to wrap in a remote value.      * @return A remote value of type long wrapping the provided long value.      */
specifier|public
specifier|static
name|RemoteValue
name|toLong
parameter_list|(
specifier|final
name|long
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isLong
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|asLong
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote multi-value of type long.      *      * @param value The collection of long values to wrap in a remote value.      * @return A remote multi-value of type long wrapping the provided      * collection of long values.      */
specifier|public
specifier|static
name|RemoteValue
name|toMultiLong
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|Long
argument_list|>
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isMultiLong
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Long
argument_list|>
name|asMultiLong
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote value of type double.      *      * @param value The double value to wrap into a remote value.      * @return A remote value wrapping the provided remote value.      */
specifier|public
specifier|static
name|RemoteValue
name|toDouble
parameter_list|(
specifier|final
name|double
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isDouble
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Double
name|asDouble
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote multi-value of type double.      *      * @param value The collection of double values to wrap into a remote      *              value.      * @return A remote multi-value of type double wrapping the provided      * collection of double values.      */
specifier|public
specifier|static
name|RemoteValue
name|toMultiDouble
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|Double
argument_list|>
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isMultiDouble
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Double
argument_list|>
name|asMultiDouble
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote value of type date.      *      * @param value The date to wrap into a remote value. The date is expressed      *              in milliseconds since January 1, 1970, 00:00:00 GMT.      * @return A remote value of type date wrapping the provided date.      */
specifier|public
specifier|static
name|RemoteValue
name|toDate
parameter_list|(
specifier|final
name|long
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isDate
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|asDate
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote multi-value of type date.      *      * @param value The collection of dates to wrap into a remote value. Every      *              date is expressed in milliseconds since January 1, 1970,      *              00:00:00 GMT.      * @return A remote multi-value of type date wrapping the provided      * collection of dates.      */
specifier|public
specifier|static
name|RemoteValue
name|toMultiDate
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|Long
argument_list|>
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isMultiDate
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Long
argument_list|>
name|asMultiDate
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote value of type boolean.      *      * @param value The boolean value to wrap into a remote value.      * @return A remote value wrapping the provided boolean value.      */
specifier|public
specifier|static
name|RemoteValue
name|toBoolean
parameter_list|(
specifier|final
name|boolean
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isBoolean
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|asBoolean
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote multi-value of type boolean.      *      * @param value The collection of boolean values to wrap into a remote      *              value.      * @return A remote value wrapping the provided collection of boolean      * values.      */
specifier|public
specifier|static
name|RemoteValue
name|toMultiBoolean
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|Boolean
argument_list|>
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isMultiBoolean
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Boolean
argument_list|>
name|asMultiBoolean
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote value of type name.      *      * @param value The name to wrap into a remote value. A name is represented      *              as a string.      * @return A remote value of type name wrapping the provided string.      */
specifier|public
specifier|static
name|RemoteValue
name|toName
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isName
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|asName
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote multi-value of type name.      *      * @param value The collection of names to wrap into a remote value. Every      *              name is represented by a string.      * @return A remote multi-value of type name wrapping the provided      * collection of strings.      */
specifier|public
specifier|static
name|RemoteValue
name|toMultiName
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isMultiName
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|asMultiName
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote value of type path.      *      * @param value The path to wrap into the remote value. A path is      *              represented by a string.      * @return A remote value of type path wrapping the provided string.      */
specifier|public
specifier|static
name|RemoteValue
name|toPath
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isPath
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|asPath
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote multi-value of type path.      *      * @param value The collection of paths to wrap into a remote value. Every      *              path is represented by a string.      * @return A remote multi-value of type path wrapping the provided strings.      */
specifier|public
specifier|static
name|RemoteValue
name|toMultiPath
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isMultiPath
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|asMultiPath
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote value of type reference.      *      * @param value The reference to wrap in a remote value. The reference is      *              represented by a string.      * @return A remote value of type reference wrapping the provided string.      */
specifier|public
specifier|static
name|RemoteValue
name|toReference
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isReference
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|asReference
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote multi-value of type reference.      *      * @param value The collection of references to wrap in a remote value.      *              Every reference is represented by a string.      * @return A remote multi-value of type reference wrapping the provided      * collection of strings.      */
specifier|public
specifier|static
name|RemoteValue
name|toMultiReference
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isMultiReference
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|asMultiReference
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote value of type weak reference.      *      * @param value The weak reference to wrap into a remote value. The weak      *              reference is represented by a string value.      * @return A remote value of type weak reference wrapping the provided      * string value.      */
specifier|public
specifier|static
name|RemoteValue
name|toWeakReference
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isWeakReference
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|asWeakReference
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote multi-value of type weak reference.      *      * @param value The collection of weak references to wrap into a remote      *              value. Every weak reference is represented by a string.      * @return A remote multi-value of type weak reference wrapping the provided      * collection of strings.      */
specifier|public
specifier|static
name|RemoteValue
name|toMultiWeakReference
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isMultiWeakReference
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|asMultiWeakReference
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote value of type URI.      *      * @param value The string representation of the URI to wrap into a remote      *              value.      * @return A remote value of type URI wrapping the provided string.      */
specifier|public
specifier|static
name|RemoteValue
name|toUri
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isUri
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|asUri
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote multi-value of type URI.      *      * @param value The collection of URIs to wrap into the remote value. Every      *              URI is represented by a string.      * @return A remote multi-value of type URI wrapping the provided collection      * of strings.      */
specifier|public
specifier|static
name|RemoteValue
name|toMultiUri
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isMultiUri
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|asMultiUri
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote value of type decimal.      *      * @param value The decimal to wrap into a remote value.      * @return A remote value of type decimal wrapping the provided decimal      * value.      */
specifier|public
specifier|static
name|RemoteValue
name|toDecimal
parameter_list|(
specifier|final
name|BigDecimal
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isDecimal
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|BigDecimal
name|asDecimal
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a remote multi-value of type decimal.      *      * @param value The collection of decimals to wrap into a remote value.      * @return A remote multi-value of type decimal wrapping the provided      * collection of decimals.      */
specifier|public
specifier|static
name|RemoteValue
name|toMultiDecimal
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|BigDecimal
argument_list|>
name|value
parameter_list|)
block|{
return|return
operator|new
name|RemoteValue
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isMultiDecimal
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|BigDecimal
argument_list|>
name|asMultiDecimal
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
specifier|private
name|RemoteValue
parameter_list|()
block|{      }
comment|/**      * Check if this remote value is of type string.      *      * @return {@code true} if this remote value is of type string, {@code      * false} otherwise.      */
specifier|public
name|boolean
name|isText
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote string value.      *      * @return The string wrapped by this remote value if this remote value is      * of type string, {@code null} otherwise.      */
specifier|public
name|String
name|asText
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is a multi-value of type string.      *      * @return {@code true} if this remote value is a multi-value of type      * string, {@code false} otherwise.      */
specifier|public
name|boolean
name|isMultiText
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote string multi-value.      *      * @return The collection of strings wrapped by this remote value if this      * remote value is a multi-value of type string, {@code null} otherwise.      */
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|asMultiText
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is of type binary.      *      * @return {@code true} if this remote value is of type binary, {@code      * false} otherwise.      */
specifier|public
name|boolean
name|isBinary
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote boolean value.      *      * @return The value of this remote value if this remote value is of type      * binary, {@code null} otherwise.      */
specifier|public
name|Supplier
argument_list|<
name|InputStream
argument_list|>
name|asBinary
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is a multi-value of type binary.      *      * @return {@code true} if this remote value is a multi-value of type      * binary, {@code false} otherwise.      */
specifier|public
name|boolean
name|isMultiBinary
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote binary multi-value.      *      * @return The value of this remote value if this remote value is a      * multi-value of type binary, {@code null} otherwise.      */
specifier|public
name|Iterable
argument_list|<
name|Supplier
argument_list|<
name|InputStream
argument_list|>
argument_list|>
name|asMultiBinary
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is of type binary ID.      *      * @return {@code true} if this remote value is of type binary ID, {@code      * false} otherwise.      */
specifier|public
name|boolean
name|isBinaryId
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote binary ID multi-value.      *      * @return The value of this remote value if this remote value is of type      * binary ID, {@code null} otherwise.      */
specifier|public
name|String
name|asBinaryId
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is a multi-value of type binary ID.      *      * @return {@code true} if this remote value is a multi-value of type binary      * ID, {@code false} otherwise.      */
specifier|public
name|boolean
name|isMultiBinaryId
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Return the value of this remote binary ID multi-value.      *      * @return The value of this remote value if this remote value is a      * multi-value of type binary ID, {@code null} otherwise.      */
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|asMultiBinaryId
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is of type long.      *      * @return {@code true} if this remote value is of type long, {@code false}      * otherwise.      */
specifier|public
name|boolean
name|isLong
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote long multi-value.      *      * @return The value of this remote value if this remote value is of type      * long, {@code null} otherwise.      */
specifier|public
name|Long
name|asLong
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is a multi-value of type long.      *      * @return {@code true} if this value is a multi-value of type long, {@code      * false} otherwise.      */
specifier|public
name|boolean
name|isMultiLong
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote multi-value of type long.      *      * @return The value of this remote value if this remote value is a      * multi-value of type long, {@code null} otherwise.      */
specifier|public
name|Iterable
argument_list|<
name|Long
argument_list|>
name|asMultiLong
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is of type double.      *      * @return {@code true} if this remote value is of type long, {@code false}      * otherwise.      */
specifier|public
name|boolean
name|isDouble
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote value of type double.      *      * @return The value of this remote value if this remote value is of type      * double, {@code null} otherwise.      */
specifier|public
name|Double
name|asDouble
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is a multi-value of type double.      *      * @return {@code true} if this remote value is a multi-value of type      * double, {@code false} otherwise.      */
specifier|public
name|boolean
name|isMultiDouble
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote multi-value of type double.      *      * @return The value of this remote value if this remote value is a      * multi-value of type double, {@code null} otherwise.      */
specifier|public
name|Iterable
argument_list|<
name|Double
argument_list|>
name|asMultiDouble
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is of type date.      *      * @return {@code true} if this remote value is of type date, {@code false}      * otherwise.      */
specifier|public
name|boolean
name|isDate
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote multi-value of type date.      *      * @return The value of this remote value if this remote value is of type      * date, {@code null} otherwise.      */
specifier|public
name|Long
name|asDate
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is a multi-value of type date.      *      * @return {@code true} if this remote value is a multi-value of type date,      * {@code false} otherwise.      */
specifier|public
name|boolean
name|isMultiDate
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote multi-value of type date.      *      * @return The value of this remote value if this remote value is a      * multi-value of type date, {@code null} otherwise.      */
specifier|public
name|Iterable
argument_list|<
name|Long
argument_list|>
name|asMultiDate
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is of type boolean.      *      * @return {@code true} if this remote value is fo type boolean, {@code      * false} otherwise.      */
specifier|public
name|boolean
name|isBoolean
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote value of type boolean.      *      * @return The value of this remote value if this remote value is of type      * boolean, false otherwise.      */
specifier|public
name|boolean
name|asBoolean
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Check if this remote value is a multi-value of type boolean.      *      * @return {@code true} if this remote value is a multi-value of type      * boolean, {@code false} otherwise.      */
specifier|public
name|boolean
name|isMultiBoolean
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote multi-value of type boolean.      *      * @return The value of this remote value if this remote value is a      * multi-value of type boolean, {@code null} otherwise.      */
specifier|public
name|Iterable
argument_list|<
name|Boolean
argument_list|>
name|asMultiBoolean
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is of type name.      *      * @return {@code true} if this remote value is of type name, {@code false}      * otherwise.      */
specifier|public
name|boolean
name|isName
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote value of type name.      *      * @return The value of this remote value if this remote value is of type      * name, {@code null} otherwise.      */
specifier|public
name|String
name|asName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is a multi-value of type name.      *      * @return {@code true} if this remote value is a multi-value of type name,      * {@code false} otherwise.      */
specifier|public
name|boolean
name|isMultiName
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote multi-value of type name.      *      * @return The value of this remote value if this remote value is a      * multi-value of type name, {@code null} otherwise.      */
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|asMultiName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this value is of type path.      *      * @return {@code true} if this remote value is of type path, {@code false}      * otherwise.      */
specifier|public
name|boolean
name|isPath
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote value of type path.      *      * @return The value of this remote value if this remote value is of type      * path, {@code null} otherwise.      */
specifier|public
name|String
name|asPath
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is a multi-value of type path.      *      * @return {@code true} if this remote value is a multi-value of type path,      * {@code false} otherwise.      */
specifier|public
name|boolean
name|isMultiPath
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote multi-value of type path.      *      * @return The value of this remote value if this remote value is a      * multi-value of type path, {@code null} otherwise.      */
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|asMultiPath
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is of type reference.      *      * @return {@code true} if this remote value is of type reference, {@code      * false} otherwise.      */
specifier|public
name|boolean
name|isReference
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote value of type reference.      *      * @return The value of this remote value if this remote value is of type      * reference, {@code null} otherwise.      */
specifier|public
name|String
name|asReference
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is a multi-value of type reference.      *      * @return {@code true} if this remote value is a multi-value of type      * reference, {@code false} otherwise.      */
specifier|public
name|boolean
name|isMultiReference
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote multi-value of type reference.      *      * @return The value of this remote value if this remote value is a      * multi-value of type reference, {@code null} otherwise.      */
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|asMultiReference
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is of type weak reference.      *      * @return {@code true} if this remote value is fo type weak reference,      * {@code false} otherwise.      */
specifier|public
name|boolean
name|isWeakReference
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote value of type weak reference.      *      * @return The value of this remote value if this remote value is of type      * weak reference, {@code null} otherwise.      */
specifier|public
name|String
name|asWeakReference
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is a multi-value of type weak reference.      *      * @return {@code true} if this remote value is a multi-value of type weak      * reference, {@code false} otherwise.      */
specifier|public
name|boolean
name|isMultiWeakReference
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote multi-value of type weak reference.      *      * @return The value of this remote value if this remote value is a      * multi-value of type weak reference, {@code null} otherwise.      */
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|asMultiWeakReference
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is of type decimal.      *      * @return {@code true} if this remote value is of type decimal, {@code      * false} otherwise.      */
specifier|public
name|boolean
name|isDecimal
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote value of type decimal.      *      * @return The value of this remote value if this remote value is of type      * decimal, {@code null} otherwise.      */
specifier|public
name|BigDecimal
name|asDecimal
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is a multi-value of type decimal.      *      * @return {@code true} if this remote value is a multi-value of type      * decimal, {@code false} otherwise.      */
specifier|public
name|boolean
name|isMultiDecimal
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote multi-value of type decimal.      *      * @return The value of this remote value if this remote value is a      * multi-value of type decimal, {@code null} otherwise.      */
specifier|public
name|Iterable
argument_list|<
name|BigDecimal
argument_list|>
name|asMultiDecimal
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is of type URI.      *      * @return {@code true} if this remote value is of type URI, {@code false}      * otherwise.      */
specifier|public
name|boolean
name|isUri
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote value of type URI.      *      * @return The value of this remote value if this remote value is of type      * URI, {@code null} otherwise.      */
specifier|public
name|String
name|asUri
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if this remote value is a multi-value of type URI.      *      * @return {@code true} if this remote value is a multi-value of type URI,      * {@code false} otherwise.      */
specifier|public
name|boolean
name|isMultiUri
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Read the value of this remote multi-value of type URI.      *      * @return The value of this remote value if this remote value is a      * multi-value of type URI, {@code null} otherwise.      */
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|asMultiUri
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Calls a method of the provided handler according to the type of this      * remote value.      *      * @param handler Handler containing logic to be executing according to the      *                type of this remote value.      */
specifier|public
name|void
name|whenType
parameter_list|(
name|TypeHandler
name|handler
parameter_list|)
block|{
if|if
condition|(
name|isBinary
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isBinary
argument_list|(
name|asBinary
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isMultiBinary
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isMultiBinary
argument_list|(
name|asMultiBinary
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isBinaryId
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isBinaryId
argument_list|(
name|asBinaryId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isMultiBinaryId
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isMultiBinaryId
argument_list|(
name|asMultiBinaryId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isBoolean
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isBoolean
argument_list|(
name|asBoolean
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isMultiBoolean
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isMultiBoolean
argument_list|(
name|asMultiBoolean
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isDate
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isDate
argument_list|(
name|asDate
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isMultiDate
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isMultiDate
argument_list|(
name|asMultiDate
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isDecimal
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isDecimal
argument_list|(
name|asDecimal
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isMultiDecimal
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isMultiDecimal
argument_list|(
name|asMultiDecimal
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isDouble
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isDouble
argument_list|(
name|asDouble
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isMultiDouble
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isMultiDouble
argument_list|(
name|asMultiDouble
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isLong
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isLong
argument_list|(
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isMultiLong
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isMultiLong
argument_list|(
name|asMultiLong
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isName
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isName
argument_list|(
name|asName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isMultiName
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isMultiName
argument_list|(
name|asMultiName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isPath
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isPath
argument_list|(
name|asPath
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isMultiPath
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isMultiPath
argument_list|(
name|asMultiPath
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isReference
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isReference
argument_list|(
name|asReference
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isMultiReference
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isMultiReference
argument_list|(
name|asMultiReference
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isText
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isText
argument_list|(
name|asText
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isMultiText
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isMultiText
argument_list|(
name|asMultiText
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isUri
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isUri
argument_list|(
name|asUri
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isMultiUri
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isMultiUri
argument_list|(
name|asMultiUri
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isWeakReference
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isWeakReference
argument_list|(
name|asWeakReference
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isMultiWeakReference
argument_list|()
condition|)
block|{
name|handler
operator|.
name|isMultiWeakReference
argument_list|(
name|asMultiWeakReference
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|handler
operator|.
name|isUnknown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

