begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|stats
operator|.
name|RepositoryStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|stats
operator|.
name|RepositoryStatistics
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|stats
operator|.
name|RepositoryStatisticsImpl
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|DefaultStatisticsProvider
implements|implements
name|StatisticsProvider
block|{
specifier|private
specifier|final
name|RepositoryStatisticsImpl
name|repoStats
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SimpleStats
argument_list|>
name|statsMeters
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|public
name|DefaultStatisticsProvider
parameter_list|(
name|ScheduledExecutorService
name|executor
parameter_list|)
block|{
name|this
operator|.
name|repoStats
operator|=
operator|new
name|RepositoryStatisticsImpl
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RepositoryStatistics
name|getStats
parameter_list|()
block|{
return|return
name|repoStats
return|;
block|}
annotation|@
name|Override
specifier|public
name|MeterStats
name|getMeter
parameter_list|(
name|String
name|name
parameter_list|,
name|StatsOptions
name|options
parameter_list|)
block|{
return|return
name|getStats
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|SimpleStats
operator|.
name|Type
operator|.
name|METER
argument_list|,
name|options
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CounterStats
name|getCounterStats
parameter_list|(
name|String
name|name
parameter_list|,
name|StatsOptions
name|options
parameter_list|)
block|{
return|return
name|getStats
argument_list|(
name|name
argument_list|,
literal|false
argument_list|,
name|SimpleStats
operator|.
name|Type
operator|.
name|COUNTER
argument_list|,
name|options
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TimerStats
name|getTimer
parameter_list|(
name|String
name|name
parameter_list|,
name|StatsOptions
name|options
parameter_list|)
block|{
return|return
name|getStats
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|SimpleStats
operator|.
name|Type
operator|.
name|TIMER
argument_list|,
name|options
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HistogramStats
name|getHistogram
parameter_list|(
name|String
name|name
parameter_list|,
name|StatsOptions
name|options
parameter_list|)
block|{
return|return
name|getStats
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|SimpleStats
operator|.
name|Type
operator|.
name|HISTOGRAM
argument_list|,
name|options
argument_list|)
return|;
block|}
specifier|private
specifier|synchronized
name|SimpleStats
name|getStats
parameter_list|(
name|String
name|type
parameter_list|,
name|boolean
name|resetValueEachSecond
parameter_list|,
name|SimpleStats
operator|.
name|Type
name|statsType
parameter_list|,
name|StatsOptions
name|options
parameter_list|)
block|{
name|Type
name|enumType
init|=
name|Type
operator|.
name|getType
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|SimpleStats
name|stats
init|=
name|statsMeters
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|enumType
operator|!=
literal|null
condition|)
block|{
name|stats
operator|=
operator|new
name|SimpleStats
argument_list|(
name|repoStats
operator|.
name|getCounter
argument_list|(
name|enumType
argument_list|)
argument_list|,
name|statsType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|options
operator|.
name|isTimeSeriesEnabled
argument_list|()
condition|)
block|{
name|stats
operator|=
operator|new
name|SimpleStats
argument_list|(
name|repoStats
operator|.
name|getCounter
argument_list|(
name|type
argument_list|,
name|resetValueEachSecond
argument_list|)
argument_list|,
name|statsType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stats
operator|=
operator|new
name|SimpleStats
argument_list|(
operator|new
name|AtomicLong
argument_list|()
argument_list|,
name|statsType
argument_list|)
expr_stmt|;
block|}
name|statsMeters
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|stats
argument_list|)
expr_stmt|;
block|}
return|return
name|stats
return|;
block|}
block|}
end_class

end_unit

