begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_comment
comment|/**  * Default implementation of the {@link TreeTypeProvider} interface.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|TreeTypeProviderImpl
implements|implements
name|TreeTypeProvider
block|{
specifier|private
specifier|final
name|Context
name|contextInfo
decl_stmt|;
specifier|public
name|TreeTypeProviderImpl
parameter_list|(
annotation|@
name|Nonnull
name|Context
name|contextInfo
parameter_list|)
block|{
name|this
operator|.
name|contextInfo
operator|=
name|contextInfo
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getType
parameter_list|(
name|ImmutableTree
name|tree
parameter_list|)
block|{
if|if
condition|(
name|tree
operator|.
name|isRoot
argument_list|()
condition|)
block|{
return|return
name|TYPE_DEFAULT
return|;
block|}
name|ImmutableTree
name|parent
init|=
name|tree
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|int
name|type
decl_stmt|;
switch|switch
condition|(
name|parent
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|TYPE_HIDDEN
case|:
name|type
operator|=
name|TYPE_HIDDEN
expr_stmt|;
break|break;
case|case
name|TYPE_VERSION
case|:
name|type
operator|=
name|TYPE_VERSION
expr_stmt|;
break|break;
case|case
name|TYPE_PERMISSION_STORE
case|:
name|type
operator|=
name|TYPE_PERMISSION_STORE
expr_stmt|;
break|break;
case|case
name|TYPE_AC
case|:
name|type
operator|=
name|TYPE_AC
expr_stmt|;
break|break;
default|default:
name|String
name|name
init|=
name|tree
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|NodeStateUtils
operator|.
name|isHidden
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|type
operator|=
name|TYPE_HIDDEN
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|VersionConstants
operator|.
name|VERSION_STORE_ROOT_NAMES
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|type
operator|=
name|TYPE_VERSION
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PermissionConstants
operator|.
name|REP_PERMISSION_STORE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|type
operator|=
name|TYPE_PERMISSION_STORE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|contextInfo
operator|.
name|definesContextRoot
argument_list|(
name|tree
argument_list|)
condition|)
block|{
name|type
operator|=
name|TYPE_AC
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|TYPE_DEFAULT
expr_stmt|;
block|}
block|}
return|return
name|type
return|;
block|}
block|}
end_class

end_unit

