begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|api
operator|.
name|security
operator|.
name|AbstractAccessControlTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_comment
comment|/**  * Base class for testing access control evaluation using JCR API.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractEvaluationTest
extends|extends
name|AbstractAccessControlTest
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|EMPTY_RESTRICTIONS
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|REP_WRITE
init|=
literal|"rep:write"
decl_stmt|;
specifier|protected
name|User
name|testUser
decl_stmt|;
specifier|protected
name|Credentials
name|creds
decl_stmt|;
specifier|protected
name|Group
name|testGroup
decl_stmt|;
specifier|private
name|Session
name|testSession
decl_stmt|;
specifier|private
name|AccessControlManager
name|testAccessControlManager
decl_stmt|;
specifier|private
name|Node
name|trn
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|toClear
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
try|try
block|{
name|UserManager
name|uMgr
init|=
name|getUserManager
argument_list|(
name|superuser
argument_list|)
decl_stmt|;
comment|// create the testUser
name|String
name|uid
init|=
literal|"testUser"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|creds
operator|=
operator|new
name|SimpleCredentials
argument_list|(
name|uid
argument_list|,
name|uid
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|testUser
operator|=
name|uMgr
operator|.
name|createUser
argument_list|(
name|uid
argument_list|,
name|uid
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|superuser
operator|.
name|logout
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|After
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|testSession
operator|!=
literal|null
operator|&&
name|testSession
operator|.
name|isLive
argument_list|()
condition|)
block|{
name|testSession
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|path
range|:
name|toClear
control|)
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|AccessControlPolicy
name|policy
range|:
name|policies
control|)
block|{
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|path
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|testGroup
operator|!=
literal|null
condition|)
block|{
name|testGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|testUser
operator|!=
literal|null
condition|)
block|{
name|testUser
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|UserManager
name|getUserManager
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|NotExecutableException
block|{
if|if
condition|(
operator|!
operator|(
name|session
operator|instanceof
name|JackrabbitSession
operator|)
condition|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|()
throw|;
block|}
try|try
block|{
return|return
operator|(
operator|(
name|JackrabbitSession
operator|)
name|session
operator|)
operator|.
name|getUserManager
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|()
throw|;
block|}
block|}
specifier|protected
name|Session
name|getTestSession
parameter_list|()
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|testSession
operator|==
literal|null
condition|)
block|{
name|testSession
operator|=
name|getHelper
argument_list|()
operator|.
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
name|creds
argument_list|)
expr_stmt|;
block|}
return|return
name|testSession
return|;
block|}
specifier|protected
name|AccessControlManager
name|getTestAccessControlManager
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|testAccessControlManager
operator|==
literal|null
condition|)
block|{
name|testAccessControlManager
operator|=
name|getAccessControlManager
argument_list|(
name|getTestSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|testAccessControlManager
return|;
block|}
specifier|protected
name|Group
name|getTestGroup
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|testGroup
operator|==
literal|null
condition|)
block|{
name|UserManager
name|umgr
init|=
name|getUserManager
argument_list|(
name|superuser
argument_list|)
decl_stmt|;
name|testGroup
operator|=
name|umgr
operator|.
name|createGroup
argument_list|(
literal|"testGroup"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
expr_stmt|;
name|testGroup
operator|.
name|addMember
argument_list|(
name|testUser
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
return|return
name|testGroup
return|;
block|}
specifier|protected
name|Node
name|getTestNode
parameter_list|()
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|trn
operator|==
literal|null
condition|)
block|{
name|trn
operator|=
name|getTestSession
argument_list|()
operator|.
name|getNode
argument_list|(
name|testRootNode
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|trn
return|;
block|}
specifier|protected
name|void
name|assertPrivilege
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|privName
parameter_list|,
name|boolean
name|isAllow
parameter_list|)
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromName
argument_list|(
name|privName
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|isAllow
argument_list|,
name|getTestAccessControlManager
argument_list|()
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|privs
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|checkReadOnly
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|privs
init|=
name|getTestAccessControlManager
argument_list|()
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_READ
argument_list|)
argument_list|,
name|privs
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|JackrabbitAccessControlList
name|modify
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|privilege
parameter_list|,
name|boolean
name|isAllow
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|modify
argument_list|(
name|path
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|privilegesFromName
argument_list|(
name|privilege
argument_list|)
argument_list|,
name|isAllow
argument_list|,
name|EMPTY_RESTRICTIONS
argument_list|)
return|;
block|}
specifier|private
name|JackrabbitAccessControlList
name|modify
parameter_list|(
name|String
name|path
parameter_list|,
name|Principal
name|principal
parameter_list|,
name|Privilege
index|[]
name|privileges
parameter_list|,
name|boolean
name|isAllow
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
parameter_list|)
throws|throws
name|Exception
block|{
name|JackrabbitAccessControlList
name|tmpl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|tmpl
operator|.
name|addEntry
argument_list|(
name|principal
argument_list|,
name|privileges
argument_list|,
name|isAllow
argument_list|,
name|restrictions
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|tmpl
operator|.
name|getPath
argument_list|()
argument_list|,
name|tmpl
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// remember for clean up during tearDown
name|toClear
operator|.
name|add
argument_list|(
name|tmpl
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tmpl
return|;
block|}
specifier|protected
name|JackrabbitAccessControlList
name|allow
parameter_list|(
name|String
name|nPath
parameter_list|,
name|Privilege
index|[]
name|privileges
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|modify
argument_list|(
name|nPath
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|privileges
argument_list|,
literal|true
argument_list|,
name|EMPTY_RESTRICTIONS
argument_list|)
return|;
block|}
specifier|protected
name|JackrabbitAccessControlList
name|allow
parameter_list|(
name|String
name|nPath
parameter_list|,
name|Privilege
index|[]
name|privileges
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|modify
argument_list|(
name|nPath
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|privileges
argument_list|,
literal|true
argument_list|,
name|restrictions
argument_list|)
return|;
block|}
specifier|protected
name|JackrabbitAccessControlList
name|allow
parameter_list|(
name|String
name|nPath
parameter_list|,
name|Principal
name|principal
parameter_list|,
name|Privilege
index|[]
name|privileges
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|modify
argument_list|(
name|nPath
argument_list|,
name|principal
argument_list|,
name|privileges
argument_list|,
literal|true
argument_list|,
name|restrictions
argument_list|)
return|;
block|}
specifier|protected
name|JackrabbitAccessControlList
name|deny
parameter_list|(
name|String
name|nPath
parameter_list|,
name|Privilege
index|[]
name|privileges
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|modify
argument_list|(
name|nPath
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|privileges
argument_list|,
literal|false
argument_list|,
name|EMPTY_RESTRICTIONS
argument_list|)
return|;
block|}
specifier|protected
name|JackrabbitAccessControlList
name|deny
parameter_list|(
name|String
name|nPath
parameter_list|,
name|Privilege
index|[]
name|privileges
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|modify
argument_list|(
name|nPath
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|privileges
argument_list|,
literal|false
argument_list|,
name|restrictions
argument_list|)
return|;
block|}
specifier|protected
name|JackrabbitAccessControlList
name|deny
parameter_list|(
name|String
name|nPath
parameter_list|,
name|Principal
name|principal
parameter_list|,
name|Privilege
index|[]
name|privileges
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|modify
argument_list|(
name|nPath
argument_list|,
name|principal
argument_list|,
name|privileges
argument_list|,
literal|false
argument_list|,
name|restrictions
argument_list|)
return|;
block|}
block|}
end_class

end_unit

