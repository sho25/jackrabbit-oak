begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|FilterBuilder
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|FilterBuilderTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|allShortcutsExcludeAll
parameter_list|()
block|{
name|FilterBuilder
name|builder
init|=
operator|new
name|FilterBuilder
argument_list|()
decl_stmt|;
name|Condition
name|condition
init|=
name|builder
operator|.
name|all
argument_list|(
name|builder
operator|.
name|path
argument_list|(
literal|"path"
argument_list|)
argument_list|,
name|builder
operator|.
name|excludeAll
argument_list|()
argument_list|,
name|builder
operator|.
name|path
argument_list|(
literal|"path"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ConstantFilter
operator|.
name|EXCLUDE_ALL
argument_list|,
name|condition
operator|.
name|createFilter
argument_list|(
name|EMPTY_NODE
argument_list|,
name|EMPTY_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|emptyAllShortcuts
parameter_list|()
block|{
name|FilterBuilder
name|builder
init|=
operator|new
name|FilterBuilder
argument_list|()
decl_stmt|;
name|Condition
name|condition
init|=
name|builder
operator|.
name|all
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ConstantFilter
operator|.
name|INCLUDE_ALL
argument_list|,
name|condition
operator|.
name|createFilter
argument_list|(
name|EMPTY_NODE
argument_list|,
name|EMPTY_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|anyShortcutsIncludeAll
parameter_list|()
block|{
name|FilterBuilder
name|builder
init|=
operator|new
name|FilterBuilder
argument_list|()
decl_stmt|;
name|Condition
name|condition
init|=
name|builder
operator|.
name|any
argument_list|(
name|builder
operator|.
name|path
argument_list|(
literal|"path"
argument_list|)
argument_list|,
name|builder
operator|.
name|includeAll
argument_list|()
argument_list|,
name|builder
operator|.
name|path
argument_list|(
literal|"path"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ConstantFilter
operator|.
name|INCLUDE_ALL
argument_list|,
name|condition
operator|.
name|createFilter
argument_list|(
name|EMPTY_NODE
argument_list|,
name|EMPTY_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|emptyAnyShortcuts
parameter_list|()
block|{
name|FilterBuilder
name|builder
init|=
operator|new
name|FilterBuilder
argument_list|()
decl_stmt|;
name|Condition
name|condition
init|=
name|builder
operator|.
name|any
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ConstantFilter
operator|.
name|EXCLUDE_ALL
argument_list|,
name|condition
operator|.
name|createFilter
argument_list|(
name|EMPTY_NODE
argument_list|,
name|EMPTY_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

