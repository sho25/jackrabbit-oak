begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Branch
operator|.
name|BranchCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|DefaultNodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|TestUtils
operator|.
name|asDocumentState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|TestUtils
operator|.
name|persistToBranch
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|getRootDocument
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|BranchTest
block|{
annotation|@
name|Rule
specifier|public
name|DocumentMKBuilderProvider
name|builderProvider
init|=
operator|new
name|DocumentMKBuilderProvider
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|getModifiedPathsUntil
parameter_list|()
block|{
name|UnmergedBranches
name|branches
init|=
operator|new
name|UnmergedBranches
argument_list|()
decl_stmt|;
name|RevisionVector
name|base
init|=
operator|new
name|RevisionVector
argument_list|(
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Revision
name|c1
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
operator|.
name|asBranchRevision
argument_list|()
decl_stmt|;
name|Branch
name|b
init|=
name|branches
operator|.
name|create
argument_list|(
name|base
argument_list|,
name|c1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|BranchCommit
name|bc1
init|=
name|b
operator|.
name|getCommit
argument_list|(
name|c1
argument_list|)
decl_stmt|;
name|bc1
operator|.
name|track
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|Revision
name|c2
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
operator|.
name|asBranchRevision
argument_list|()
decl_stmt|;
name|b
operator|.
name|addCommit
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|BranchCommit
name|bc2
init|=
name|b
operator|.
name|getCommit
argument_list|(
name|c2
argument_list|)
decl_stmt|;
name|bc2
operator|.
name|track
argument_list|(
literal|"/bar"
argument_list|)
expr_stmt|;
name|Revision
name|c3
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
operator|.
name|asBranchRevision
argument_list|()
decl_stmt|;
name|b
operator|.
name|rebase
argument_list|(
name|c3
argument_list|,
operator|new
name|RevisionVector
argument_list|(
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|c4
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
operator|.
name|asBranchRevision
argument_list|()
decl_stmt|;
name|b
operator|.
name|addCommit
argument_list|(
name|c4
argument_list|)
expr_stmt|;
name|BranchCommit
name|bc4
init|=
name|b
operator|.
name|getCommit
argument_list|(
name|c4
argument_list|)
decl_stmt|;
name|bc4
operator|.
name|track
argument_list|(
literal|"/baz"
argument_list|)
expr_stmt|;
name|Revision
name|c5
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
operator|.
name|asBranchRevision
argument_list|()
decl_stmt|;
try|try
block|{
name|b
operator|.
name|getModifiedPathsUntil
argument_list|(
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must fail with IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|assertModifiedPaths
argument_list|(
name|b
operator|.
name|getModifiedPathsUntil
argument_list|(
name|c1
argument_list|)
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
name|assertModifiedPaths
argument_list|(
name|b
operator|.
name|getModifiedPathsUntil
argument_list|(
name|c2
argument_list|)
argument_list|,
literal|"/foo"
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
name|assertModifiedPaths
argument_list|(
name|b
operator|.
name|getModifiedPathsUntil
argument_list|(
name|c3
argument_list|)
argument_list|,
literal|"/foo"
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
name|assertModifiedPaths
argument_list|(
name|b
operator|.
name|getModifiedPathsUntil
argument_list|(
name|c4
argument_list|)
argument_list|,
literal|"/foo"
argument_list|,
literal|"/bar"
argument_list|,
literal|"/baz"
argument_list|)
expr_stmt|;
name|assertModifiedPaths
argument_list|(
name|b
operator|.
name|getModifiedPathsUntil
argument_list|(
name|c5
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"OAK-8012"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|orphanedBranchTest
parameter_list|()
block|{
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|persistToBranch
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
comment|// start again
name|ns
operator|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|hasProperty
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compareBranchStates
parameter_list|()
block|{
name|DocumentNodeStore
name|ns
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ns
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|DocumentStore
name|store
init|=
name|ns
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|persistToBranch
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|NodeState
name|s1
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|persistToBranch
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|NodeState
name|s2
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|changes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|NodeStateDiff
name|diff
init|=
operator|new
name|DefaultNodeStateDiff
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|changes
operator|.
name|add
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|propertyChanged
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|s2
operator|.
name|compareAgainstBaseState
argument_list|(
name|s1
argument_list|,
name|diff
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changes
argument_list|,
name|contains
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeDocument
name|root
init|=
name|getRootDocument
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|RevisionVector
name|br
init|=
name|asDocumentState
argument_list|(
name|s1
argument_list|)
operator|.
name|getRootRevision
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|isBranch
argument_list|()
argument_list|)
expr_stmt|;
name|DocumentNodeState
name|state
init|=
name|root
operator|.
name|getNodeAtRevision
argument_list|(
name|ns
argument_list|,
name|br
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|state
operator|.
name|getString
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertModifiedPaths
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|actual
parameter_list|,
name|String
modifier|...
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|expected
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

