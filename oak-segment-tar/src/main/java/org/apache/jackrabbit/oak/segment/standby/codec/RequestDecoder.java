begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|codec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|MessageToMessageDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|RequestDecoder
extends|extends
name|MessageToMessageDecoder
argument_list|<
name|String
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RequestDecoder
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|decode
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|String
name|msg
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|out
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|request
init|=
name|Messages
operator|.
name|extractMessageFrom
argument_list|(
name|msg
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Received invalid message {}, ignoring"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|fireChannelRead
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|startsWith
argument_list|(
name|Messages
operator|.
name|GET_BLOB
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Parsed 'get blob' request"
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
operator|new
name|GetBlobRequest
argument_list|(
name|Messages
operator|.
name|extractClientFrom
argument_list|(
name|msg
argument_list|)
argument_list|,
name|request
operator|.
name|substring
argument_list|(
name|Messages
operator|.
name|GET_BLOB
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|equalsIgnoreCase
argument_list|(
name|Messages
operator|.
name|GET_HEAD
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Parsed 'get head' message"
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
operator|new
name|GetHeadRequest
argument_list|(
name|Messages
operator|.
name|extractClientFrom
argument_list|(
name|msg
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|startsWith
argument_list|(
name|Messages
operator|.
name|GET_SEGMENT
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Parsed 'get segment' message"
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
operator|new
name|GetSegmentRequest
argument_list|(
name|Messages
operator|.
name|extractClientFrom
argument_list|(
name|msg
argument_list|)
argument_list|,
name|request
operator|.
name|substring
argument_list|(
name|Messages
operator|.
name|GET_SEGMENT
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Received unrecognizable message {}, dropping"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

