begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StandardSystemProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|ActiveDeletedBlobCollectorFactory
operator|.
name|ActiveDeletedBlobCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|ActiveDeletedBlobCollectorFactory
operator|.
name|ActiveDeletedBlobCollectorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|ActiveDeletedBlobCollectorFactory
operator|.
name|BlobDeletionCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|internal
operator|.
name|util
operator|.
name|collections
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystems
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFilePermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|sameThreadExecutor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexCommitCallback
operator|.
name|IndexProgress
operator|.
name|COMMIT_FAILED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexCommitCallback
operator|.
name|IndexProgress
operator|.
name|COMMIT_SUCCEDED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsInAnyOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_class
specifier|public
class|class
name|ActiveDeletedBlobCollectorTest
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|blobCollectionRoot
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|Clock
name|clock
decl_stmt|;
specifier|private
name|ChunkDeletionTrackingBlobStore
name|blobStore
decl_stmt|;
specifier|private
name|ActiveDeletedBlobCollector
name|adbc
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|clock
operator|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
expr_stmt|;
name|blobStore
operator|=
operator|new
name|ChunkDeletionTrackingBlobStore
argument_list|()
expr_stmt|;
name|createBlobCollector
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createBlobCollector
parameter_list|()
block|{
name|adbc
operator|=
operator|new
name|ActiveDeletedBlobCollectorImpl
argument_list|(
name|clock
argument_list|,
operator|new
name|File
argument_list|(
name|blobCollectionRoot
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"/a"
argument_list|)
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|simpleCase
parameter_list|()
throws|throws
name|Exception
block|{
name|BlobDeletionCallback
name|bdc
init|=
name|adbc
operator|.
name|getBlobDeletionCallback
argument_list|()
decl_stmt|;
name|bdc
operator|.
name|deleted
argument_list|(
literal|"blobId"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|bdc
operator|.
name|commitProgress
argument_list|(
name|COMMIT_SUCCEDED
argument_list|)
expr_stmt|;
name|adbc
operator|.
name|purgeBlobsDeleted
argument_list|(
name|clock
operator|.
name|getTimeIncreasing
argument_list|()
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
name|verifyBlobsDeleted
argument_list|(
literal|"blobId"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noopDoesNothing
parameter_list|()
throws|throws
name|Exception
block|{
name|adbc
operator|=
name|ActiveDeletedBlobCollectorFactory
operator|.
name|NOOP
expr_stmt|;
name|BlobDeletionCallback
name|bdc
init|=
name|adbc
operator|.
name|getBlobDeletionCallback
argument_list|()
decl_stmt|;
name|bdc
operator|.
name|deleted
argument_list|(
literal|"blobId"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|bdc
operator|.
name|commitProgress
argument_list|(
name|COMMIT_SUCCEDED
argument_list|)
expr_stmt|;
name|adbc
operator|.
name|purgeBlobsDeleted
argument_list|(
name|clock
operator|.
name|getTimeIncreasing
argument_list|()
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
name|verifyBlobsDeleted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|blobTimestampMustBeBiggerThanFileTimestamp
parameter_list|()
throws|throws
name|Exception
block|{
name|BlobDeletionCallback
name|bdc1
init|=
name|adbc
operator|.
name|getBlobDeletionCallback
argument_list|()
decl_stmt|;
name|bdc1
operator|.
name|deleted
argument_list|(
literal|"blobId1"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|bdc1
operator|.
name|commitProgress
argument_list|(
name|COMMIT_SUCCEDED
argument_list|)
expr_stmt|;
name|BlobDeletionCallback
name|bdc2
init|=
name|adbc
operator|.
name|getBlobDeletionCallback
argument_list|()
decl_stmt|;
name|bdc2
operator|.
name|deleted
argument_list|(
literal|"blobId2"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|BlobDeletionCallback
name|bdc3
init|=
name|adbc
operator|.
name|getBlobDeletionCallback
argument_list|()
decl_stmt|;
name|bdc3
operator|.
name|deleted
argument_list|(
literal|"blobId3"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
name|bdc3
operator|.
name|commitProgress
argument_list|(
name|COMMIT_SUCCEDED
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|clock
operator|.
name|getTimeIncreasing
argument_list|()
decl_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|bdc2
operator|.
name|commitProgress
argument_list|(
name|COMMIT_SUCCEDED
argument_list|)
expr_stmt|;
name|adbc
operator|.
name|purgeBlobsDeleted
argument_list|(
name|time
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
comment|//blobId2 is committed later
name|verifyBlobsDeleted
argument_list|(
literal|"blobId1"
argument_list|,
literal|"blobId3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|uncommittedDeletionsMustNotBePurged
parameter_list|()
throws|throws
name|Exception
block|{
name|BlobDeletionCallback
name|bdc1
init|=
name|adbc
operator|.
name|getBlobDeletionCallback
argument_list|()
decl_stmt|;
name|bdc1
operator|.
name|deleted
argument_list|(
literal|"blobId1"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|bdc1
operator|.
name|commitProgress
argument_list|(
name|COMMIT_FAILED
argument_list|)
expr_stmt|;
name|BlobDeletionCallback
name|bdc2
init|=
name|adbc
operator|.
name|getBlobDeletionCallback
argument_list|()
decl_stmt|;
name|bdc2
operator|.
name|deleted
argument_list|(
literal|"blobId2"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|bdc2
operator|.
name|commitProgress
argument_list|(
name|COMMIT_SUCCEDED
argument_list|)
expr_stmt|;
name|adbc
operator|.
name|purgeBlobsDeleted
argument_list|(
name|clock
operator|.
name|getTimeIncreasing
argument_list|()
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
comment|//blobId2 is committed later
name|verifyBlobsDeleted
argument_list|(
literal|"blobId2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteBlobsDespiteFileExplicitlyPurgedBeforeRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|BlobDeletionCallback
name|bdc
init|=
name|adbc
operator|.
name|getBlobDeletionCallback
argument_list|()
decl_stmt|;
name|bdc
operator|.
name|deleted
argument_list|(
literal|"blobId1"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|bdc
operator|.
name|commitProgress
argument_list|(
name|COMMIT_SUCCEDED
argument_list|)
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|createBlobCollector
argument_list|()
expr_stmt|;
name|bdc
operator|=
name|adbc
operator|.
name|getBlobDeletionCallback
argument_list|()
expr_stmt|;
name|bdc
operator|.
name|deleted
argument_list|(
literal|"blobId2"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|bdc
operator|.
name|commitProgress
argument_list|(
name|COMMIT_SUCCEDED
argument_list|)
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|createBlobCollector
argument_list|()
expr_stmt|;
name|bdc
operator|=
name|adbc
operator|.
name|getBlobDeletionCallback
argument_list|()
expr_stmt|;
name|bdc
operator|.
name|deleted
argument_list|(
literal|"blobId3"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
name|bdc
operator|.
name|commitProgress
argument_list|(
name|COMMIT_SUCCEDED
argument_list|)
expr_stmt|;
name|adbc
operator|.
name|purgeBlobsDeleted
argument_list|(
name|clock
operator|.
name|getTimeIncreasing
argument_list|()
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
name|verifyBlobsDeleted
argument_list|(
literal|"blobId1"
argument_list|,
literal|"blobId2"
argument_list|,
literal|"blobId3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multiThreadedCommits
parameter_list|()
throws|throws
name|Exception
block|{
name|clock
operator|=
name|Clock
operator|.
name|SIMPLE
expr_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|adbc
operator|=
name|ActiveDeletedBlobCollectorFactory
operator|.
name|newInstance
argument_list|(
operator|new
name|File
argument_list|(
name|blobCollectionRoot
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|executorService
argument_list|)
expr_stmt|;
name|int
name|numThreads
init|=
literal|4
decl_stmt|;
name|int
name|numBlobsPerThread
init|=
literal|500
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|threadIndex
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|threadIndex
operator|.
name|get
argument_list|()
operator|<
name|numThreads
condition|;
name|threadIndex
operator|.
name|incrementAndGet
argument_list|()
control|)
block|{
name|threads
operator|.
name|add
argument_list|(
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|private
name|int
name|thisThreadNum
init|=
name|threadIndex
operator|.
name|get
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|blobCnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|blobCnt
operator|<
name|numBlobsPerThread
condition|)
block|{
name|BlobDeletionCallback
name|bdc
init|=
name|adbc
operator|.
name|getBlobDeletionCallback
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|blobCnt
operator|<
name|numBlobsPerThread
condition|;
control|)
block|{
name|String
name|id
init|=
literal|"Thread"
operator|+
name|thisThreadNum
operator|+
literal|"Blob"
operator|+
name|blobCnt
decl_stmt|;
name|bdc
operator|.
name|deleted
argument_list|(
name|id
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|blobCnt
operator|++
expr_stmt|;
if|if
condition|(
name|Math
operator|.
name|random
argument_list|()
operator|>
literal|0.5
condition|)
block|{
break|break;
block|}
block|}
name|bdc
operator|.
name|commitProgress
argument_list|(
name|COMMIT_SUCCEDED
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// Push one more commit to flush out any remaining ones
name|adbc
operator|.
name|getBlobDeletionCallback
argument_list|()
operator|.
name|commitProgress
argument_list|(
name|COMMIT_SUCCEDED
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|deletedChunks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numThreads
operator|*
name|numBlobsPerThread
operator|*
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|threadNum
init|=
literal|0
init|;
name|threadNum
operator|<
name|numThreads
condition|;
name|threadNum
operator|++
control|)
block|{
for|for
control|(
name|int
name|blobCnt
init|=
literal|0
init|;
name|blobCnt
operator|<
name|numBlobsPerThread
condition|;
name|blobCnt
operator|++
control|)
block|{
name|String
name|id
init|=
literal|"Thread"
operator|+
name|threadNum
operator|+
literal|"Blob"
operator|+
name|blobCnt
decl_stmt|;
name|Iterators
operator|.
name|addAll
argument_list|(
name|deletedChunks
argument_list|,
name|blobStore
operator|.
name|resolveChunks
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|adbc
operator|.
name|purgeBlobsDeleted
argument_list|(
name|clock
operator|.
name|getTimeIncreasing
argument_list|()
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|blobStore
operator|.
name|deletedChunkIds
argument_list|,
name|containsInAnyOrder
argument_list|(
name|deletedChunks
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|inaccessibleWorkDirGivesNoop
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeNotWindows
argument_list|()
expr_stmt|;
name|File
name|rootDir
init|=
name|blobCollectionRoot
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|File
name|unwritableExistingRootFolder
init|=
operator|new
name|File
argument_list|(
name|rootDir
argument_list|,
literal|"existingRoot"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|unwritableExistingRootFolder
argument_list|)
expr_stmt|;
name|File
name|unwritableNonExistingRootFolder
init|=
operator|new
name|File
argument_list|(
name|unwritableExistingRootFolder
argument_list|,
literal|"existingRoot"
argument_list|)
decl_stmt|;
name|Path
name|unwritableExistingPath
init|=
name|FileSystems
operator|.
name|getDefault
argument_list|()
operator|.
name|getPath
argument_list|(
name|unwritableExistingRootFolder
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Files
operator|.
name|setPosixFilePermissions
argument_list|(
name|unwritableExistingPath
argument_list|,
name|Sets
operator|.
name|newSet
argument_list|(
name|PosixFilePermission
operator|.
name|OWNER_READ
argument_list|,
name|PosixFilePermission
operator|.
name|GROUP_READ
argument_list|,
name|PosixFilePermission
operator|.
name|OTHERS_READ
argument_list|)
argument_list|)
expr_stmt|;
name|adbc
operator|=
name|ActiveDeletedBlobCollectorFactory
operator|.
name|newInstance
argument_list|(
name|unwritableExistingRootFolder
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unwritable existing root folder must have NOOP active blob collector"
argument_list|,
name|ActiveDeletedBlobCollectorFactory
operator|.
name|NOOP
argument_list|,
name|adbc
argument_list|)
expr_stmt|;
name|adbc
operator|=
name|ActiveDeletedBlobCollectorFactory
operator|.
name|newInstance
argument_list|(
name|unwritableNonExistingRootFolder
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unwritable non-existing root folder must have NOOP active blob collector"
argument_list|,
name|ActiveDeletedBlobCollectorFactory
operator|.
name|NOOP
argument_list|,
name|adbc
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyBlobsDeleted
parameter_list|(
name|String
modifier|...
name|blobIds
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|chunkIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|blobId
range|:
name|blobIds
control|)
block|{
name|chunkIds
operator|.
name|addAll
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|blobStore
operator|.
name|resolveChunks
argument_list|(
name|blobId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|blobStore
operator|.
name|deletedChunkIds
argument_list|,
name|containsInAnyOrder
argument_list|(
name|chunkIds
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assumeNotWindows
parameter_list|()
block|{
name|assumeTrue
argument_list|(
operator|!
name|StandardSystemProperty
operator|.
name|OS_NAME
operator|.
name|value
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"windows"
argument_list|)
argument_list|)
expr_stmt|;
block|}
class|class
name|ChunkDeletionTrackingBlobStore
implements|implements
name|GarbageCollectableBlobStore
block|{
name|List
argument_list|<
name|String
argument_list|>
name|deletedChunkIds
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|writeBlob
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|writeBlob
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|BlobOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|readBlob
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getBlobLength
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getBlobId
parameter_list|(
annotation|@
name|Nonnull
name|String
name|reference
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReference
parameter_list|(
annotation|@
name|Nonnull
name|String
name|blobId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBlockSize
parameter_list|(
name|int
name|x
parameter_list|)
block|{          }
annotation|@
name|Override
specifier|public
name|String
name|writeBlob
parameter_list|(
name|String
name|tempFileName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|sweep
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startMark
parameter_list|()
throws|throws
name|IOException
block|{          }
annotation|@
name|Override
specifier|public
name|void
name|clearInUse
parameter_list|()
block|{          }
annotation|@
name|Override
specifier|public
name|void
name|clearCache
parameter_list|()
block|{          }
annotation|@
name|Override
specifier|public
name|long
name|getBlockSizeMin
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getAllChunkIds
parameter_list|(
name|long
name|maxLastModifiedTime
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteChunks
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|chunkIds
parameter_list|,
name|long
name|maxLastModifiedTime
parameter_list|)
throws|throws
name|Exception
block|{
name|deletedChunkIds
operator|.
name|addAll
argument_list|(
name|chunkIds
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|countDeleteChunks
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|chunkIds
parameter_list|,
name|long
name|maxLastModifiedTime
parameter_list|)
throws|throws
name|Exception
block|{
name|deletedChunkIds
operator|.
name|addAll
argument_list|(
name|chunkIds
argument_list|)
expr_stmt|;
return|return
name|chunkIds
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|resolveChunks
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Iterators
operator|.
name|forArray
argument_list|(
name|blobId
operator|+
literal|"-1"
argument_list|,
name|blobId
operator|+
literal|"-2"
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

