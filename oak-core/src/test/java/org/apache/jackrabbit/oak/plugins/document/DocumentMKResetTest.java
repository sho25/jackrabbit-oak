begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests DocumentMKs implementation of NodeStore.reset(String, String).  */
end_comment

begin_class
specifier|public
class|class
name|DocumentMKResetTest
extends|extends
name|BaseDocumentMKTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|resetToCurrentBranchHead
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rev
operator|=
name|addNodes
argument_list|(
name|rev
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
name|String
name|reset
init|=
name|mk
operator|.
name|reset
argument_list|(
name|rev
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|diff
argument_list|(
name|rev
argument_list|,
name|reset
argument_list|,
literal|"/"
argument_list|,
literal|0
argument_list|)
operator|.
name|length
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|resetTrunk
parameter_list|()
block|{
name|String
name|rev
init|=
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
try|try
block|{
name|mk
operator|.
name|reset
argument_list|(
name|rev
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"DocumentStoreException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentStoreException
name|expected
parameter_list|)
block|{}
block|}
annotation|@
name|Test
specifier|public
name|void
name|resetNonAncestor
parameter_list|()
block|{
name|String
name|rev
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
name|String
name|branch
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|branch
operator|=
name|addNodes
argument_list|(
name|branch
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|reset
argument_list|(
name|branch
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"DocumentStoreException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentStoreException
name|expected
parameter_list|)
block|{}
block|}
annotation|@
name|Test
specifier|public
name|void
name|resetBranch
parameter_list|()
block|{
name|String
name|branch
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|branch
operator|=
name|addNodes
argument_list|(
name|branch
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
name|String
name|head
init|=
name|addNodes
argument_list|(
name|branch
argument_list|,
literal|"/bar"
argument_list|)
decl_stmt|;
name|assertNodesExist
argument_list|(
name|head
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
name|head
operator|=
name|mk
operator|.
name|reset
argument_list|(
name|head
argument_list|,
name|branch
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
name|head
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|resetConflictAddExistingNode
parameter_list|()
block|{
name|String
name|b0
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
name|String
name|b1
init|=
name|addNodes
argument_list|(
name|b0
argument_list|,
literal|"/bar"
argument_list|)
decl_stmt|;
name|String
name|b2
init|=
name|addNodes
argument_list|(
name|b1
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|b2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"merge with conflict must fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentStoreException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|String
name|b3
init|=
name|mk
operator|.
name|reset
argument_list|(
name|b2
argument_list|,
name|b1
argument_list|)
decl_stmt|;
name|String
name|rev
init|=
name|mk
operator|.
name|merge
argument_list|(
name|b3
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNodesExist
argument_list|(
name|rev
argument_list|,
literal|"/foo"
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|resetConflictRemoveRemovedNode
parameter_list|()
block|{
name|String
name|rev
init|=
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/foo"
argument_list|,
literal|"/bar"
argument_list|)
decl_stmt|;
name|String
name|b0
init|=
name|mk
operator|.
name|branch
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|removeNodes
argument_list|(
literal|null
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
name|String
name|b1
init|=
name|removeNodes
argument_list|(
name|b0
argument_list|,
literal|"/bar"
argument_list|)
decl_stmt|;
name|String
name|b2
init|=
name|removeNodes
argument_list|(
name|b1
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|b2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"merge with conflict must fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentStoreException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|String
name|b3
init|=
name|mk
operator|.
name|reset
argument_list|(
name|b2
argument_list|,
name|b1
argument_list|)
decl_stmt|;
name|rev
operator|=
name|mk
operator|.
name|merge
argument_list|(
name|b3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNodesNotExist
argument_list|(
name|rev
argument_list|,
literal|"/foo"
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|resetConflictAddExistingProperty
parameter_list|()
block|{
name|addNodes
argument_list|(
literal|null
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
name|String
name|b0
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"^\"/foo/p1\":1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|b1
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"^\"/foo/p2\":1"
argument_list|,
name|b0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|b2
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"^\"/foo/p1\":1"
argument_list|,
name|b1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|mk
operator|.
name|merge
argument_list|(
name|b2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"merge with conflict must fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentStoreException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|String
name|b3
init|=
name|mk
operator|.
name|reset
argument_list|(
name|b2
argument_list|,
name|b1
argument_list|)
decl_stmt|;
name|String
name|rev
init|=
name|mk
operator|.
name|merge
argument_list|(
name|b3
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertPropExists
argument_list|(
name|rev
argument_list|,
literal|"/foo"
argument_list|,
literal|"p1"
argument_list|)
expr_stmt|;
name|assertPropExists
argument_list|(
name|rev
argument_list|,
literal|"/foo"
argument_list|,
literal|"p2"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

