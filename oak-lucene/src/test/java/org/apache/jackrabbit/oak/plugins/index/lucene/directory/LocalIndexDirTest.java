begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|LocalIndexDirTest
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|basicStuff
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexMeta
name|m
init|=
operator|new
name|IndexMeta
argument_list|(
literal|"/a/b"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|File
name|baseDir
init|=
name|createDirWithIndexMetaFile
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|LocalIndexDir
name|dir
init|=
operator|new
name|LocalIndexDir
argument_list|(
name|baseDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dir
operator|.
name|getJcrPath
argument_list|()
argument_list|,
name|m
operator|.
name|indexPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dir
operator|.
name|getFSPath
argument_list|()
argument_list|,
name|baseDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dir
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|invalidDir
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|LocalIndexDir
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonEmptyDir
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexMeta
name|m
init|=
operator|new
name|IndexMeta
argument_list|(
literal|"/a/b"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|File
name|baseDir
init|=
name|createDirWithIndexMetaFile
argument_list|(
name|m
argument_list|)
decl_stmt|;
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|LocalIndexDir
name|dir
init|=
operator|new
name|LocalIndexDir
argument_list|(
name|baseDir
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|dir
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|comparison
parameter_list|()
throws|throws
name|Exception
block|{
name|LocalIndexDir
name|dir
init|=
operator|new
name|LocalIndexDir
argument_list|(
name|createDirWithIndexMetaFile
argument_list|(
operator|new
name|IndexMeta
argument_list|(
literal|"/a/b"
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LocalIndexDir
name|dir2
init|=
operator|new
name|LocalIndexDir
argument_list|(
name|createDirWithIndexMetaFile
argument_list|(
operator|new
name|IndexMeta
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|200
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LocalIndexDir
name|dir3
init|=
operator|new
name|LocalIndexDir
argument_list|(
name|createDirWithIndexMetaFile
argument_list|(
operator|new
name|IndexMeta
argument_list|(
literal|"/a"
argument_list|,
literal|300
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LocalIndexDir
argument_list|>
name|dirs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|dirs
operator|.
name|add
argument_list|(
name|dir2
argument_list|)
expr_stmt|;
name|dirs
operator|.
name|add
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dirs
operator|.
name|add
argument_list|(
name|dir3
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|dirs
argument_list|,
name|Collections
operator|.
expr|<
name|LocalIndexDir
operator|>
name|reverseOrder
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|dirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getJcrPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b/c"
argument_list|,
name|dirs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getJcrPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b"
argument_list|,
name|dirs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getJcrPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|File
name|createDirWithIndexMetaFile
parameter_list|(
name|IndexMeta
name|m
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|baseDir
init|=
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|File
name|indexMeta
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|IndexRootDirectory
operator|.
name|INDEX_METADATA_FILE_NAME
argument_list|)
decl_stmt|;
name|m
operator|.
name|writeTo
argument_list|(
name|indexMeta
argument_list|)
expr_stmt|;
return|return
name|baseDir
return|;
block|}
block|}
end_class

end_unit

