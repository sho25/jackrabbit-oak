begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
operator|.
name|toStringHelper
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Queues
operator|.
name|newLinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_comment
comment|/**  * A {@code ChangeDispatcher} instance records changes to a {@link NodeStore}  * and dispatches them to interested parties.  *<p>  * Actual changes are reported by calling {@link #beforeCommit(NodeState)},  * {@link #localCommit(NodeState, CommitInfo)} and {@link #afterCommit(NodeState)} in that order:  *<pre>       NodeState root = store.getRoot();       branch.rebase();       changeDispatcher.beforeCommit(root);       try {           NodeState head = branch.getHead();           branch.merge();           changeDispatcher.localCommit(head);       } finally {           changeDispatcher.afterCommit(store.getRoot());       }  *</pre>  *<p>  * The {@link #addObserver(Observer)} method registers an {@link Observer} for receiving  * notifications about all changes reported to this instance.  */
end_comment

begin_class
specifier|public
class|class
name|ChangeDispatcher
implements|implements
name|Observable
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|Listener
argument_list|>
name|listeners
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|NodeStore
name|store
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|volatile
name|NodeState
name|root
decl_stmt|;
comment|/**      * Create a new instance for recording changes to {@code store}.      * @param store  the node store to record changes for      */
specifier|public
name|ChangeDispatcher
parameter_list|(
annotation|@
name|Nonnull
name|NodeStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|checkNotNull
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Register a new {@link Observer} for receiving notifications about changes reported to      * this change dispatcher. Changes are reported asynchronously. Clients need to      * call {@link java.io.Closeable#close()} close} on the returned {@code Closeable} instance      * to stop receiving notifications.      *      * @return  a {@link Closeable} instance      */
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Closeable
name|addObserver
parameter_list|(
name|Observer
name|observer
parameter_list|)
block|{
name|Listener
name|listener
init|=
operator|new
name|Listener
argument_list|(
name|observer
argument_list|,
name|root
argument_list|)
decl_stmt|;
name|listener
operator|.
name|start
argument_list|()
expr_stmt|;
name|register
argument_list|(
name|listener
argument_list|)
expr_stmt|;
return|return
name|listener
return|;
block|}
specifier|private
specifier|final
name|AtomicLong
name|changeCount
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|inLocalCommit
parameter_list|()
block|{
return|return
name|changeCount
operator|.
name|get
argument_list|()
operator|%
literal|2
operator|==
literal|1
return|;
block|}
comment|/**      * Call with the latest persisted root node state right before persisting further changes.      * Calling this method marks this instance to be inside a local commit.      *<p>      * The differences from the root node state passed to the last call to      * {@link #afterCommit(NodeState)} to {@code root} are reported as cluster external      * changes to any listener.      *      * @param root  latest persisted root node state.      * @throws IllegalStateException  if inside a local commit      */
specifier|public
specifier|synchronized
name|void
name|beforeCommit
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|)
block|{
name|checkState
argument_list|(
operator|!
name|inLocalCommit
argument_list|()
argument_list|)
expr_stmt|;
name|changeCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|externalChange
argument_list|(
name|checkNotNull
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Call right after changes have been successfully persisted passing      * the new root node state resulting from the persist operation.      *<p>      * The differences from the root node state passed to the last call to      * {@link #beforeCommit(NodeState)} to {@code root} are reported as      * cluster local changes to any listener in case non-{@code null}      * commit information is provided. If no local commit information is      * given, then no local changes are reported and the committed changes      * will only show up as an aggregate with any concurrent external changes      * reported during the {@link #afterCommit(NodeState)} call.      *      * @param root root node state just persisted      * @param info commit information      * @throws IllegalStateException  if not inside a local commit      */
specifier|public
specifier|synchronized
name|void
name|localCommit
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|,
annotation|@
name|Nonnull
name|CommitInfo
name|info
parameter_list|)
block|{
name|checkState
argument_list|(
name|inLocalCommit
argument_list|()
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|root
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
block|}
comment|/**      * Call to mark the end of a persist operation passing the latest persisted root node state.      * Calling this method marks this instance to not be inside a local commit.      *<p>      * The difference from the root node state passed to the las call to      * {@link #localCommit(NodeState, CommitInfo)} to {@code root} are reported as cluster external      * changes to any listener.       * @param root  latest persisted root node state.      * @throws IllegalStateException  if not inside a local commit      */
specifier|public
specifier|synchronized
name|void
name|afterCommit
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|)
block|{
name|checkState
argument_list|(
name|inLocalCommit
argument_list|()
argument_list|)
expr_stmt|;
name|externalChange
argument_list|(
name|checkNotNull
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|changeCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|externalChange
parameter_list|()
block|{
if|if
condition|(
operator|!
name|inLocalCommit
argument_list|()
condition|)
block|{
name|long
name|c
init|=
name|changeCount
operator|.
name|get
argument_list|()
decl_stmt|;
name|NodeState
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
decl_stmt|;
comment|// Need to get root outside sync. See OAK-959
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|c
operator|==
name|changeCount
operator|.
name|get
argument_list|()
operator|&&
operator|!
name|inLocalCommit
argument_list|()
condition|)
block|{
name|externalChange
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|synchronized
name|void
name|externalChange
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
if|if
condition|(
operator|!
name|root
operator|.
name|equals
argument_list|(
name|this
operator|.
name|root
argument_list|)
condition|)
block|{
name|add
argument_list|(
name|root
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|register
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
synchronized|synchronized
init|(
name|listeners
init|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|unregister
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
synchronized|synchronized
init|(
name|listeners
init|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|add
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
for|for
control|(
name|Listener
name|l
range|:
name|getListeners
argument_list|()
control|)
block|{
name|l
operator|.
name|contentChanged
argument_list|(
name|root
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Listener
index|[]
name|getListeners
parameter_list|()
block|{
synchronized|synchronized
init|(
name|listeners
init|)
block|{
return|return
name|listeners
operator|.
name|toArray
argument_list|(
operator|new
name|Listener
index|[
name|listeners
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
comment|//------------------------------------------------------------< Listener>---
comment|/**      * Listener thread receiving changes reported into {@code ChangeDispatcher} and      * asynchronously distributing these to an associated {@link Observer}.      */
specifier|private
class|class
name|Listener
extends|extends
name|Thread
implements|implements
name|Closeable
implements|,
name|Observer
block|{
specifier|private
specifier|final
name|LinkedBlockingQueue
argument_list|<
name|Commit
argument_list|>
name|commits
init|=
name|newLinkedBlockingQueue
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Observer
name|observer
decl_stmt|;
specifier|private
name|boolean
name|blocked
init|=
literal|false
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|stopping
decl_stmt|;
name|Listener
parameter_list|(
name|Observer
name|observer
parameter_list|,
name|NodeState
name|root
parameter_list|)
block|{
name|this
operator|.
name|observer
operator|=
name|checkNotNull
argument_list|(
name|observer
argument_list|)
expr_stmt|;
name|commits
operator|.
name|add
argument_list|(
operator|new
name|Commit
argument_list|(
name|root
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setPriority
argument_list|(
name|Thread
operator|.
name|MIN_PRIORITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|contentChanged
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
name|Commit
name|commit
init|=
operator|new
name|Commit
argument_list|(
name|root
argument_list|,
name|blocked
condition|?
literal|null
else|:
name|info
argument_list|)
decl_stmt|;
name|blocked
operator|=
operator|!
name|commits
operator|.
name|offer
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
operator|!
name|stopping
condition|)
block|{
if|if
condition|(
name|commits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|externalChange
argument_list|()
expr_stmt|;
block|}
name|Commit
name|commit
init|=
name|commits
operator|.
name|poll
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|commit
operator|!=
literal|null
condition|)
block|{
name|observer
operator|.
name|contentChanged
argument_list|(
name|commit
operator|.
name|getRoot
argument_list|()
argument_list|,
name|commit
operator|.
name|getCommitInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|checkState
argument_list|(
operator|!
name|stopping
argument_list|,
literal|"Change processor already stopped"
argument_list|)
expr_stmt|;
name|unregister
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|stopping
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|!=
name|this
condition|)
block|{
try|try
block|{
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interruption while waiting for the listener thread to terminate"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|//------------------------------------------------------------< Commit>---
specifier|private
specifier|static
class|class
name|Commit
block|{
specifier|private
specifier|final
name|NodeState
name|root
decl_stmt|;
specifier|private
specifier|final
name|CommitInfo
name|commitInfo
decl_stmt|;
name|Commit
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|,
annotation|@
name|Nullable
name|CommitInfo
name|commitInfo
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|checkNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|this
operator|.
name|commitInfo
operator|=
name|commitInfo
expr_stmt|;
block|}
annotation|@
name|Nonnull
name|NodeState
name|getRoot
parameter_list|()
block|{
return|return
name|root
return|;
block|}
annotation|@
name|CheckForNull
name|CommitInfo
name|getCommitInfo
parameter_list|()
block|{
return|return
name|commitInfo
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toStringHelper
argument_list|(
name|this
argument_list|)
operator|.
name|add
argument_list|(
literal|"root"
argument_list|,
name|root
argument_list|)
operator|.
name|add
argument_list|(
literal|"commit info"
argument_list|,
name|commitInfo
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

