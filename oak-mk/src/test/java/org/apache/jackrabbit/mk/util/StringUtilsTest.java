begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Test the string utilities.  */
end_comment

begin_class
specifier|public
class|class
name|StringUtilsTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testHex
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"0123"
argument_list|,
name|StringUtils
operator|.
name|convertBytesToHex
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0x01
block|,
operator|(
name|byte
operator|)
literal|0x23
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"89bd"
argument_list|,
name|StringUtils
operator|.
name|convertBytesToHex
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0x89
block|,
operator|(
name|byte
operator|)
literal|0xbd
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"face"
argument_list|,
name|StringUtils
operator|.
name|convertBytesToHex
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xfa
block|,
operator|(
name|byte
operator|)
literal|0xce
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtilsTest
operator|.
name|assertEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xfa
block|,
operator|(
name|byte
operator|)
literal|0xce
block|}
argument_list|,
name|StringUtils
operator|.
name|convertHexToBytes
argument_list|(
literal|"face"
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtilsTest
operator|.
name|assertEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xfa
block|,
operator|(
name|byte
operator|)
literal|0xce
block|}
argument_list|,
name|StringUtils
operator|.
name|convertHexToBytes
argument_list|(
literal|"fAcE"
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtilsTest
operator|.
name|assertEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xfa
block|,
operator|(
name|byte
operator|)
literal|0xce
block|}
argument_list|,
name|StringUtils
operator|.
name|convertHexToBytes
argument_list|(
literal|"FaCe"
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtilsTest
operator|.
name|assertEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0x09
block|,
operator|(
name|byte
operator|)
literal|0xaf
block|}
argument_list|,
name|StringUtils
operator|.
name|convertHexToBytes
argument_list|(
literal|"09af"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
operator|new
name|String
index|[]
block|{
literal|"120"
block|,
literal|"1/"
block|,
literal|"9:"
block|,
literal|"fast"
block|,
literal|"a`"
block|,
literal|"ag"
block|,
literal|"0@"
block|,
literal|"aG"
block|}
control|)
block|{
try|try
block|{
name|StringUtils
operator|.
name|convertHexToBytes
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
block|}
end_class

end_unit

