begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|fixtures
operator|.
name|nodestore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|fixtures
operator|.
name|datastore
operator|.
name|DataStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Utility methods for NodeStoreFixtures and DataStoreFixtures.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|FixtureUtils
block|{
comment|/** Return a nice label for jUnit Parameterized tests for fixtures */
specifier|public
specifier|static
name|String
name|getFixtureLabel
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|,
name|DataStoreFixture
name|dataStoreFixture
parameter_list|)
block|{
name|String
name|nodeStoreName
init|=
name|fixture
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|StringUtils
operator|.
name|removeEnd
argument_list|(
name|nodeStoreName
argument_list|,
literal|"Fixture"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataStoreFixture
operator|!=
literal|null
condition|)
block|{
name|String
name|dataStoreName
init|=
name|dataStoreFixture
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
return|return
name|name
operator|+
literal|"_"
operator|+
name|StringUtils
operator|.
name|removeEnd
argument_list|(
name|dataStoreName
argument_list|,
literal|"Fixture"
argument_list|)
return|;
block|}
return|return
name|name
return|;
block|}
comment|/** Create a temporary folder inside the maven build folder "target". */
specifier|public
specifier|static
name|File
name|createTempFolder
parameter_list|()
throws|throws
name|IOException
block|{
comment|// create temp folder inside maven's "target" folder
name|File
name|parent
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
decl_stmt|;
name|File
name|tempFolder
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"junit"
argument_list|,
literal|""
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|tempFolder
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tempFolder
operator|.
name|mkdir
argument_list|()
expr_stmt|;
return|return
name|tempFolder
return|;
block|}
comment|/**      * Load data store *.properties from path in system property, local file or file inside user home directory.      * Returns null if no file was found.      */
annotation|@
name|Nullable
specifier|public
specifier|static
name|Properties
name|loadDataStoreProperties
parameter_list|(
name|String
name|systemProperty
parameter_list|,
name|String
name|defaultFileName
parameter_list|,
name|String
name|homeFolderName
parameter_list|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|systemProperty
argument_list|,
name|defaultFileName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|,
name|homeFolderName
argument_list|,
name|defaultFileName
argument_list|)
operator|.
name|toFile
argument_list|()
expr_stmt|;
block|}
name|props
operator|.
name|load
argument_list|(
operator|new
name|FileReader
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|props
return|;
block|}
block|}
end_class

end_unit

