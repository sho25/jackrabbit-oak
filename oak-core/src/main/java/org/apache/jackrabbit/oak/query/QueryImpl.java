begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law  * or agreed to in writing, software distributed under the License is  * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the specific language  * governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|AstElementFactory
operator|.
name|copyElementAndCheckReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
operator|.
name|SizePrecision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|JcrPathParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|counter
operator|.
name|jmx
operator|.
name|NodeCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryOptions
operator|.
name|Traversal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|AndImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|AstVisitorBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|BindVariableValueImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|ChildNodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|ChildNodeJoinConditionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|CoalesceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|ColumnImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|ComparisonImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|ConstraintImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|DescendantNodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|DescendantNodeJoinConditionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|DynamicOperandImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|EquiJoinConditionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|FullTextSearchImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|FullTextSearchScoreImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|InImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|JoinConditionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|JoinImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|JoinType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|LengthImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|LiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|LowerCaseImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|NativeFunctionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|NodeLocalNameImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|NodeNameImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|NotImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|OrImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|OrderingImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|PropertyExistenceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|PropertyInexistenceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|PropertyValueImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|SameNodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|SameNodeJoinConditionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|SelectorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|SimilarImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|SourceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|SpellcheckImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|SuggestImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|UpperCaseImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|FilterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|TraversingIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|plan
operator|.
name|ExecutionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|plan
operator|.
name|SelectorExecutionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|stats
operator|.
name|QueryStatsData
operator|.
name|QueryExecutionStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
operator|.
name|PathRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|AdvancedQueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|IndexPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|OrderEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|OrderEntry
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|AbstractIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_comment
comment|/**  * Represents a parsed query.  */
end_comment

begin_class
specifier|public
class|class
name|QueryImpl
implements|implements
name|Query
block|{
specifier|public
specifier|static
specifier|final
name|UnsupportedOperationException
name|TOO_MANY_UNION
init|=
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Too many union queries"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|MAX_UNION
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.sql2MaxUnion"
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueryImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QueryExecutionStats
name|stats
decl_stmt|;
specifier|private
name|boolean
name|potentiallySlowTraversalQueryLogged
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Ordering
argument_list|<
name|QueryIndex
argument_list|>
name|MINIMAL_COST_ORDERING
init|=
operator|new
name|Ordering
argument_list|<
name|QueryIndex
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|QueryIndex
name|left
parameter_list|,
name|QueryIndex
name|right
parameter_list|)
block|{
return|return
name|Double
operator|.
name|compare
argument_list|(
name|left
operator|.
name|getMinimumCost
argument_list|()
argument_list|,
name|right
operator|.
name|getMinimumCost
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|SourceImpl
name|source
decl_stmt|;
specifier|private
name|String
name|statement
decl_stmt|;
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|PropertyValue
argument_list|>
name|bindVariableMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PropertyValue
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|selectorIndexes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|SelectorImpl
argument_list|>
name|selectors
init|=
operator|new
name|ArrayList
argument_list|<
name|SelectorImpl
argument_list|>
argument_list|()
decl_stmt|;
name|ConstraintImpl
name|constraint
decl_stmt|;
comment|/**      * Whether fallback to the traversing index is supported if no other index      * is available. This is enabled by default and can be disabled for testing      * purposes.      */
specifier|private
name|boolean
name|traversalEnabled
init|=
literal|true
decl_stmt|;
comment|/**      * The query option to be used for this query.      */
specifier|private
name|QueryOptions
name|queryOptions
init|=
operator|new
name|QueryOptions
argument_list|()
decl_stmt|;
specifier|private
name|OrderingImpl
index|[]
name|orderings
decl_stmt|;
specifier|private
name|ColumnImpl
index|[]
name|columns
decl_stmt|;
comment|/**      * The columns that make a row distinct. This is all columns      * except for "jcr:score".      */
specifier|private
name|boolean
index|[]
name|distinctColumns
decl_stmt|;
specifier|private
name|boolean
name|explain
decl_stmt|,
name|measure
decl_stmt|;
specifier|private
name|boolean
name|distinct
decl_stmt|;
specifier|private
name|long
name|limit
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|long
name|offset
decl_stmt|;
specifier|private
name|long
name|size
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|boolean
name|prepared
decl_stmt|;
specifier|private
name|ExecutionContext
name|context
decl_stmt|;
comment|/**      * whether the object has been initialised or not      */
specifier|private
name|boolean
name|init
decl_stmt|;
specifier|private
name|boolean
name|isSortedByIndex
decl_stmt|;
specifier|private
specifier|final
name|NamePathMapper
name|namePathMapper
decl_stmt|;
specifier|private
name|double
name|estimatedCost
decl_stmt|;
specifier|private
specifier|final
name|QueryEngineSettings
name|settings
decl_stmt|;
specifier|private
name|boolean
name|warnedHidden
decl_stmt|;
specifier|private
name|boolean
name|isInternal
decl_stmt|;
specifier|private
name|boolean
name|potentiallySlowTraversalQuery
decl_stmt|;
name|QueryImpl
parameter_list|(
name|String
name|statement
parameter_list|,
name|SourceImpl
name|source
parameter_list|,
name|ConstraintImpl
name|constraint
parameter_list|,
name|ColumnImpl
index|[]
name|columns
parameter_list|,
name|NamePathMapper
name|mapper
parameter_list|,
name|QueryEngineSettings
name|settings
parameter_list|,
name|QueryExecutionStats
name|stats
parameter_list|)
block|{
name|this
operator|.
name|statement
operator|=
name|statement
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|constraint
operator|=
name|constraint
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|namePathMapper
operator|=
name|mapper
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
block|{
specifier|final
name|QueryImpl
name|query
init|=
name|this
decl_stmt|;
if|if
condition|(
name|constraint
operator|!=
literal|null
condition|)
block|{
comment|// need to do this *before* the visitation below, as the
comment|// simplify() method does not always keep the query reference
comment|// passed in setQuery(). TODO: avoid that mutability concern
name|constraint
operator|=
name|constraint
operator|.
name|simplify
argument_list|()
expr_stmt|;
block|}
operator|new
name|AstVisitorBase
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|BindVariableValueImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|bindVariableMap
operator|.
name|put
argument_list|(
name|node
operator|.
name|getBindVariableName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|ChildNodeImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|node
operator|.
name|bindSelector
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|ChildNodeJoinConditionImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|node
operator|.
name|bindSelector
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|CoalesceImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|visit
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|ColumnImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|DescendantNodeImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|node
operator|.
name|bindSelector
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|DescendantNodeJoinConditionImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|node
operator|.
name|bindSelector
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|EquiJoinConditionImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|node
operator|.
name|bindSelector
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|FullTextSearchImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|node
operator|.
name|bindSelector
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|visit
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|NativeFunctionImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|node
operator|.
name|bindSelector
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|visit
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|SimilarImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|node
operator|.
name|bindSelector
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|visit
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|SpellcheckImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|node
operator|.
name|bindSelector
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|visit
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|SuggestImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|node
operator|.
name|bindSelector
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|visit
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|FullTextSearchScoreImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|node
operator|.
name|bindSelector
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|LiteralImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|NodeLocalNameImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|node
operator|.
name|bindSelector
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|NodeNameImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|node
operator|.
name|bindSelector
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|PropertyExistenceImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|node
operator|.
name|bindSelector
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|PropertyInexistenceImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|node
operator|.
name|bindSelector
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|PropertyValueImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|node
operator|.
name|bindSelector
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|SameNodeImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|node
operator|.
name|bindSelector
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|SameNodeJoinConditionImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|node
operator|.
name|bindSelector
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|SelectorImpl
name|node
parameter_list|)
block|{
name|String
name|name
init|=
name|node
operator|.
name|getSelectorName
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectorIndexes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|selectors
operator|.
name|size
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Two selectors with the same name: "
operator|+
name|name
argument_list|)
throw|;
block|}
name|selectors
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|LengthImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|visit
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|UpperCaseImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|visit
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|LowerCaseImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|visit
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|ComparisonImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|visit
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|InImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|visit
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|AndImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|visit
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|OrImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|visit
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|NotImpl
name|node
parameter_list|)
block|{
name|node
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|visit
argument_list|(
name|node
argument_list|)
return|;
block|}
block|}
operator|.
name|visit
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|source
operator|.
name|setQueryConstraint
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnImpl
name|column
range|:
name|columns
control|)
block|{
name|column
operator|.
name|bindSelector
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
name|distinctColumns
operator|=
operator|new
name|boolean
index|[
name|columns
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ColumnImpl
name|c
init|=
name|columns
index|[
name|i
index|]
decl_stmt|;
name|boolean
name|distinct
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|QueryConstants
operator|.
name|JCR_SCORE
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getPropertyName
argument_list|()
argument_list|)
condition|)
block|{
name|distinct
operator|=
literal|false
expr_stmt|;
block|}
name|distinctColumns
index|[
name|i
index|]
operator|=
name|distinct
expr_stmt|;
block|}
name|init
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ColumnImpl
index|[]
name|getColumns
parameter_list|()
block|{
return|return
name|columns
return|;
block|}
specifier|public
name|ConstraintImpl
name|getConstraint
parameter_list|()
block|{
return|return
name|constraint
return|;
block|}
specifier|public
name|OrderingImpl
index|[]
name|getOrderings
parameter_list|()
block|{
return|return
name|orderings
return|;
block|}
specifier|public
name|SourceImpl
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|bindValue
parameter_list|(
name|String
name|varName
parameter_list|,
name|PropertyValue
name|value
parameter_list|)
block|{
name|bindVariableMap
operator|.
name|put
argument_list|(
name|varName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLimit
parameter_list|(
name|long
name|limit
parameter_list|)
block|{
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setOffset
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setExplain
parameter_list|(
name|boolean
name|explain
parameter_list|)
block|{
name|this
operator|.
name|explain
operator|=
name|explain
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMeasure
parameter_list|(
name|boolean
name|measure
parameter_list|)
block|{
name|this
operator|.
name|measure
operator|=
name|measure
expr_stmt|;
block|}
specifier|public
name|void
name|setDistinct
parameter_list|(
name|boolean
name|distinct
parameter_list|)
block|{
name|this
operator|.
name|distinct
operator|=
name|distinct
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ResultImpl
name|executeQuery
parameter_list|()
block|{
return|return
operator|new
name|ResultImpl
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ResultRowImpl
argument_list|>
name|getRows
parameter_list|()
block|{
name|prepare
argument_list|()
expr_stmt|;
if|if
condition|(
name|explain
condition|)
block|{
name|String
name|plan
init|=
name|getPlan
argument_list|()
decl_stmt|;
if|if
condition|(
name|measure
condition|)
block|{
name|plan
operator|+=
literal|" cost: { "
operator|+
name|getIndexCostInfo
argument_list|()
operator|+
literal|" }"
expr_stmt|;
block|}
name|columns
operator|=
operator|new
name|ColumnImpl
index|[]
block|{
operator|new
name|ColumnImpl
argument_list|(
literal|"explain"
argument_list|,
literal|"plan"
argument_list|,
literal|"plan"
argument_list|)
block|}
expr_stmt|;
name|ResultRowImpl
name|r
init|=
operator|new
name|ResultRowImpl
argument_list|(
name|this
argument_list|,
name|Tree
operator|.
name|EMPTY_ARRAY
argument_list|,
operator|new
name|PropertyValue
index|[]
block|{
name|PropertyValues
operator|.
name|newString
argument_list|(
name|plan
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|r
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logDebug
argument_list|(
literal|"query execute "
operator|+
name|statement
argument_list|)
expr_stmt|;
name|logDebug
argument_list|(
literal|"query plan "
operator|+
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RowIterator
name|rowIt
init|=
operator|new
name|RowIterator
argument_list|(
name|context
operator|.
name|getBaseState
argument_list|()
argument_list|)
decl_stmt|;
name|Comparator
argument_list|<
name|ResultRowImpl
argument_list|>
name|orderBy
decl_stmt|;
if|if
condition|(
name|isSortedByIndex
condition|)
block|{
name|orderBy
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|orderBy
operator|=
name|ResultRowImpl
operator|.
name|getComparator
argument_list|(
name|orderings
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|ResultRowImpl
argument_list|>
name|it
init|=
name|FilterIterators
operator|.
name|newCombinedFilter
argument_list|(
name|rowIt
argument_list|,
name|distinct
argument_list|,
name|limit
argument_list|,
name|offset
argument_list|,
name|orderBy
argument_list|,
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|orderBy
operator|!=
literal|null
condition|)
block|{
comment|// this will force the rows to be read, so that the size is known
name|it
operator|.
name|hasNext
argument_list|()
expr_stmt|;
comment|// we need the size, and there is no other way to get it right now
comment|// but we also have to take limit and offset into account
name|long
name|read
init|=
name|rowIt
operator|.
name|getReadCount
argument_list|()
decl_stmt|;
comment|// we will ignore whatever is behind 'limit+offset'
name|read
operator|=
name|Math
operator|.
name|min
argument_list|(
name|saturatedAdd
argument_list|(
name|limit
argument_list|,
name|offset
argument_list|)
argument_list|,
name|read
argument_list|)
expr_stmt|;
comment|// and we will skip 'offset' entries
name|read
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|read
operator|-
name|offset
argument_list|)
expr_stmt|;
name|size
operator|=
name|read
expr_stmt|;
block|}
if|if
condition|(
name|measure
condition|)
block|{
comment|// return the measuring iterator delegating the readCounts to the rowIterator
name|it
operator|=
operator|new
name|MeasuringIterator
argument_list|(
name|this
argument_list|,
name|it
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|setColumns
parameter_list|(
name|ColumnImpl
index|[]
name|col
parameter_list|)
block|{
name|columns
operator|=
name|col
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|long
name|getReadCount
parameter_list|()
block|{
return|return
name|rowIt
operator|.
name|getReadCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getSelectorScanCount
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|selectorReadCounts
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|SelectorImpl
name|selector
range|:
name|selectors
control|)
block|{
name|selectorReadCounts
operator|.
name|put
argument_list|(
name|selector
operator|.
name|getSelectorName
argument_list|()
argument_list|,
name|selector
operator|.
name|getScanCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|selectorReadCounts
return|;
block|}
block|}
expr_stmt|;
block|}
return|return
name|it
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSortedByIndex
parameter_list|()
block|{
return|return
name|isSortedByIndex
return|;
block|}
specifier|private
name|boolean
name|canSortByIndex
parameter_list|()
block|{
name|boolean
name|canSortByIndex
init|=
literal|false
decl_stmt|;
comment|// TODO add issue about order by optimization for multiple selectors
if|if
condition|(
name|orderings
operator|!=
literal|null
operator|&&
name|selectors
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|IndexPlan
name|plan
init|=
name|selectors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getExecutionPlan
argument_list|()
operator|.
name|getIndexPlan
argument_list|()
decl_stmt|;
if|if
condition|(
name|plan
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|list
init|=
name|plan
operator|.
name|getSortOrder
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
operator|&&
name|list
operator|.
name|size
argument_list|()
operator|==
name|orderings
operator|.
name|length
condition|)
block|{
name|canSortByIndex
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|OrderEntry
name|e
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|OrderingImpl
name|o
init|=
name|orderings
index|[
name|i
index|]
decl_stmt|;
name|DynamicOperandImpl
name|op
init|=
name|o
operator|.
name|getOperand
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|op
operator|instanceof
name|PropertyValueImpl
operator|)
condition|)
block|{
comment|// ordered by a function: currently not supported
name|canSortByIndex
operator|=
literal|false
expr_stmt|;
break|break;
block|}
comment|// we only have one selector, so no need to check that
comment|// TODO support joins
name|String
name|pn
init|=
operator|(
operator|(
name|PropertyValueImpl
operator|)
name|op
operator|)
operator|.
name|getPropertyName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pn
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getPropertyName
argument_list|()
argument_list|)
condition|)
block|{
comment|// ordered by another property
name|canSortByIndex
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|o
operator|.
name|isDescending
argument_list|()
operator|!=
operator|(
name|e
operator|.
name|getOrder
argument_list|()
operator|==
name|Order
operator|.
name|DESCENDING
operator|)
condition|)
block|{
comment|// ordered ascending versus descending
name|canSortByIndex
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
return|return
name|canSortByIndex
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPlan
parameter_list|()
block|{
return|return
name|source
operator|.
name|getPlan
argument_list|(
name|context
operator|.
name|getBaseState
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIndexCostInfo
parameter_list|()
block|{
return|return
name|source
operator|.
name|getIndexCostInfo
argument_list|(
name|context
operator|.
name|getBaseState
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getEstimatedCost
parameter_list|()
block|{
return|return
name|estimatedCost
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|prepare
parameter_list|()
block|{
if|if
condition|(
name|prepared
condition|)
block|{
return|return;
block|}
name|prepared
operator|=
literal|true
expr_stmt|;
name|List
argument_list|<
name|SourceImpl
argument_list|>
name|sources
init|=
name|source
operator|.
name|getInnerJoinSelectors
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|JoinConditionImpl
argument_list|>
name|conditions
init|=
name|source
operator|.
name|getInnerJoinConditions
argument_list|()
decl_stmt|;
if|if
condition|(
name|sources
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
comment|// simple case (no join)
name|estimatedCost
operator|=
name|source
operator|.
name|prepare
argument_list|()
operator|.
name|getEstimatedCost
argument_list|()
expr_stmt|;
name|isSortedByIndex
operator|=
name|canSortByIndex
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// use a greedy algorithm
name|SourceImpl
name|result
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|SourceImpl
argument_list|>
name|available
init|=
operator|new
name|HashSet
argument_list|<
name|SourceImpl
argument_list|>
argument_list|()
decl_stmt|;
comment|// the query is only slow if all possible join orders are slow
comment|// (in theory, due to using the greedy algorithm, a query might be considered
comment|// slow even thought there is a plan that doesn't need to use traversal, but
comment|// only for 3-way and higher joins, and only if traversal is considered very fast)
name|boolean
name|isPotentiallySlowJoin
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|sources
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|bestIndex
init|=
literal|0
decl_stmt|;
name|double
name|bestCost
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|ExecutionPlan
name|bestPlan
init|=
literal|null
decl_stmt|;
name|SourceImpl
name|best
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sources
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SourceImpl
name|test
init|=
name|buildJoin
argument_list|(
name|result
argument_list|,
name|sources
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|conditions
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|==
literal|null
condition|)
block|{
comment|// no join condition
continue|continue;
block|}
name|ExecutionPlan
name|testPlan
init|=
name|test
operator|.
name|prepare
argument_list|()
decl_stmt|;
name|double
name|cost
init|=
name|testPlan
operator|.
name|getEstimatedCost
argument_list|()
decl_stmt|;
if|if
condition|(
name|best
operator|==
literal|null
operator|||
name|cost
operator|<
name|bestCost
condition|)
block|{
name|bestPlan
operator|=
name|testPlan
expr_stmt|;
name|bestCost
operator|=
name|cost
expr_stmt|;
name|bestIndex
operator|=
name|i
expr_stmt|;
name|best
operator|=
name|test
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|potentiallySlowTraversalQuery
condition|)
block|{
name|isPotentiallySlowJoin
operator|=
literal|false
expr_stmt|;
block|}
name|test
operator|.
name|unprepare
argument_list|()
expr_stmt|;
block|}
name|available
operator|.
name|add
argument_list|(
name|sources
operator|.
name|remove
argument_list|(
name|bestIndex
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|best
expr_stmt|;
name|best
operator|.
name|prepare
argument_list|(
name|bestPlan
argument_list|)
expr_stmt|;
block|}
name|potentiallySlowTraversalQuery
operator|=
name|isPotentiallySlowJoin
expr_stmt|;
name|estimatedCost
operator|=
name|result
operator|.
name|prepare
argument_list|()
operator|.
name|getEstimatedCost
argument_list|()
expr_stmt|;
name|source
operator|=
name|result
expr_stmt|;
name|isSortedByIndex
operator|=
name|canSortByIndex
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|SourceImpl
name|buildJoin
parameter_list|(
name|SourceImpl
name|result
parameter_list|,
name|SourceImpl
name|last
parameter_list|,
name|List
argument_list|<
name|JoinConditionImpl
argument_list|>
name|conditions
parameter_list|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
name|last
return|;
block|}
name|List
argument_list|<
name|SourceImpl
argument_list|>
name|selectors
init|=
name|result
operator|.
name|getInnerJoinSelectors
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|SourceImpl
argument_list|>
name|oldSelectors
init|=
operator|new
name|HashSet
argument_list|<
name|SourceImpl
argument_list|>
argument_list|()
decl_stmt|;
name|oldSelectors
operator|.
name|addAll
argument_list|(
name|selectors
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|SourceImpl
argument_list|>
name|newSelectors
init|=
operator|new
name|HashSet
argument_list|<
name|SourceImpl
argument_list|>
argument_list|()
decl_stmt|;
name|newSelectors
operator|.
name|addAll
argument_list|(
name|selectors
argument_list|)
expr_stmt|;
name|newSelectors
operator|.
name|add
argument_list|(
name|last
argument_list|)
expr_stmt|;
for|for
control|(
name|JoinConditionImpl
name|j
range|:
name|conditions
control|)
block|{
comment|// only join conditions can now be evaluated,
comment|// but couldn't be evaluated before
if|if
condition|(
operator|!
name|j
operator|.
name|canEvaluate
argument_list|(
name|oldSelectors
argument_list|)
operator|&&
name|j
operator|.
name|canEvaluate
argument_list|(
name|newSelectors
argument_list|)
condition|)
block|{
name|JoinImpl
name|join
init|=
operator|new
name|JoinImpl
argument_list|(
name|result
argument_list|,
name|last
argument_list|,
name|JoinType
operator|.
name|INNER
argument_list|,
name|j
argument_list|)
decl_stmt|;
return|return
name|join
return|;
block|}
block|}
comment|// no join condition was found
return|return
literal|null
return|;
block|}
comment|/**      *<b>!Test purpose only!<b>      *       * this creates a filter for the given query      *       */
name|Filter
name|createFilter
parameter_list|(
name|boolean
name|preparing
parameter_list|)
block|{
return|return
name|source
operator|.
name|createFilter
argument_list|(
name|preparing
argument_list|)
return|;
block|}
comment|/**      * Abstract decorating iterator for measure queries. The iterator delegates to the underlying actual      * query iterator to lazily execute and return counts.      */
specifier|abstract
specifier|static
class|class
name|MeasuringIterator
extends|extends
name|AbstractIterator
argument_list|<
name|ResultRowImpl
argument_list|>
block|{
specifier|private
name|Iterator
argument_list|<
name|ResultRowImpl
argument_list|>
name|delegate
decl_stmt|;
specifier|private
name|Query
name|query
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ResultRowImpl
argument_list|>
name|results
decl_stmt|;
specifier|private
name|boolean
name|init
decl_stmt|;
name|MeasuringIterator
parameter_list|(
name|Query
name|query
parameter_list|,
name|Iterator
argument_list|<
name|ResultRowImpl
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|results
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ResultRowImpl
name|computeNext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|init
condition|)
block|{
name|getRows
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|results
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
name|void
name|getRows
parameter_list|()
block|{
comment|// run the query
while|while
condition|(
name|delegate
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|delegate
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|ColumnImpl
index|[]
name|columns
init|=
operator|new
name|ColumnImpl
index|[]
block|{
operator|new
name|ColumnImpl
argument_list|(
literal|"measure"
argument_list|,
literal|"selector"
argument_list|,
literal|"selector"
argument_list|)
block|,
operator|new
name|ColumnImpl
argument_list|(
literal|"measure"
argument_list|,
literal|"scanCount"
argument_list|,
literal|"scanCount"
argument_list|)
block|}
decl_stmt|;
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|ResultRowImpl
name|r
init|=
operator|new
name|ResultRowImpl
argument_list|(
name|query
argument_list|,
name|Tree
operator|.
name|EMPTY_ARRAY
argument_list|,
operator|new
name|PropertyValue
index|[]
block|{
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"query"
argument_list|)
block|,
name|PropertyValues
operator|.
name|newLong
argument_list|(
name|getReadCount
argument_list|()
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|selectorScanCount
init|=
name|getSelectorScanCount
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|selector
range|:
name|selectorScanCount
operator|.
name|keySet
argument_list|()
control|)
block|{
name|r
operator|=
operator|new
name|ResultRowImpl
argument_list|(
name|query
argument_list|,
name|Tree
operator|.
name|EMPTY_ARRAY
argument_list|,
operator|new
name|PropertyValue
index|[]
block|{
name|PropertyValues
operator|.
name|newString
argument_list|(
name|selector
argument_list|)
block|,
name|PropertyValues
operator|.
name|newLong
argument_list|(
name|selectorScanCount
operator|.
name|get
argument_list|(
name|selector
argument_list|)
argument_list|)
block|,                     }
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|init
operator|=
literal|true
expr_stmt|;
block|}
comment|/**          * Set the measure specific columns in the query object          * @param columns the measure specific columns          */
specifier|protected
specifier|abstract
name|void
name|setColumns
parameter_list|(
name|ColumnImpl
index|[]
name|columns
parameter_list|)
function_decl|;
comment|/**          * Retrieve the selector scan count          * @return map of selector to scan count          */
specifier|protected
specifier|abstract
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getSelectorScanCount
parameter_list|()
function_decl|;
comment|/**          * Retrieve the query read count          * @return count          */
specifier|protected
specifier|abstract
name|long
name|getReadCount
parameter_list|()
function_decl|;
comment|/**          * Retrieves the actual query iterator          * @return the delegate          */
specifier|protected
name|Iterator
argument_list|<
name|ResultRowImpl
argument_list|>
name|getDelegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
block|}
comment|/**      * An iterator over result rows.      */
class|class
name|RowIterator
implements|implements
name|Iterator
argument_list|<
name|ResultRowImpl
argument_list|>
block|{
specifier|private
specifier|final
name|NodeState
name|rootState
decl_stmt|;
specifier|private
name|ResultRowImpl
name|current
decl_stmt|;
specifier|private
name|boolean
name|started
decl_stmt|,
name|end
decl_stmt|;
specifier|private
name|long
name|rowIndex
decl_stmt|;
name|RowIterator
parameter_list|(
name|NodeState
name|rootState
parameter_list|)
block|{
name|this
operator|.
name|rootState
operator|=
name|rootState
expr_stmt|;
block|}
specifier|public
name|long
name|getReadCount
parameter_list|()
block|{
return|return
name|rowIndex
return|;
block|}
specifier|private
name|void
name|fetchNext
parameter_list|()
block|{
if|if
condition|(
name|end
condition|)
block|{
return|return;
block|}
name|long
name|nanos
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|oldIndex
init|=
name|rowIndex
decl_stmt|;
if|if
condition|(
operator|!
name|started
condition|)
block|{
name|source
operator|.
name|execute
argument_list|(
name|rootState
argument_list|)
expr_stmt|;
name|started
operator|=
literal|true
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|source
operator|.
name|next
argument_list|()
condition|)
block|{
if|if
condition|(
name|constraint
operator|==
literal|null
operator|||
name|constraint
operator|.
name|evaluate
argument_list|()
condition|)
block|{
name|current
operator|=
name|currentRow
argument_list|()
expr_stmt|;
name|rowIndex
operator|++
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|constraint
operator|!=
literal|null
operator|&&
name|constraint
operator|.
name|evaluateStop
argument_list|()
condition|)
block|{
name|current
operator|=
literal|null
expr_stmt|;
name|end
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|current
operator|=
literal|null
expr_stmt|;
name|end
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|nanos
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|nanos
expr_stmt|;
name|stats
operator|.
name|read
argument_list|(
name|rowIndex
operator|-
name|oldIndex
argument_list|,
name|rowIndex
argument_list|,
name|nanos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|end
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
name|fetchNext
argument_list|()
expr_stmt|;
block|}
return|return
operator|!
name|end
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultRowImpl
name|next
parameter_list|()
block|{
if|if
condition|(
name|end
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
name|fetchNext
argument_list|()
expr_stmt|;
block|}
name|ResultRowImpl
name|r
init|=
name|current
decl_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
return|return
name|r
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
name|ResultRowImpl
name|currentRow
parameter_list|()
block|{
name|int
name|selectorCount
init|=
name|selectors
operator|.
name|size
argument_list|()
decl_stmt|;
name|Tree
index|[]
name|trees
init|=
operator|new
name|Tree
index|[
name|selectorCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|selectorCount
condition|;
name|i
operator|++
control|)
block|{
name|SelectorImpl
name|s
init|=
name|selectors
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|trees
index|[
name|i
index|]
operator|=
name|s
operator|.
name|currentTree
argument_list|()
expr_stmt|;
block|}
name|int
name|columnCount
init|=
name|columns
operator|.
name|length
decl_stmt|;
name|PropertyValue
index|[]
name|values
init|=
operator|new
name|PropertyValue
index|[
name|columnCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnCount
condition|;
name|i
operator|++
control|)
block|{
name|ColumnImpl
name|c
init|=
name|columns
index|[
name|i
index|]
decl_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|c
operator|.
name|currentProperty
argument_list|()
expr_stmt|;
block|}
name|PropertyValue
index|[]
name|orderValues
decl_stmt|;
if|if
condition|(
name|orderings
operator|==
literal|null
condition|)
block|{
name|orderValues
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|int
name|size
init|=
name|orderings
operator|.
name|length
decl_stmt|;
name|orderValues
operator|=
operator|new
name|PropertyValue
index|[
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|orderValues
index|[
name|i
index|]
operator|=
name|orderings
index|[
name|i
index|]
operator|.
name|getOperand
argument_list|()
operator|.
name|currentProperty
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ResultRowImpl
argument_list|(
name|this
argument_list|,
name|trees
argument_list|,
name|values
argument_list|,
name|distinctColumns
argument_list|,
name|orderValues
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSelectorIndex
parameter_list|(
name|String
name|selectorName
parameter_list|)
block|{
name|Integer
name|index
init|=
name|selectorIndexes
operator|.
name|get
argument_list|(
name|selectorName
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown selector: "
operator|+
name|selectorName
argument_list|)
throw|;
block|}
return|return
name|index
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColumnIndex
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
return|return
name|getColumnIndex
argument_list|(
name|columns
argument_list|,
name|columnName
argument_list|)
return|;
block|}
specifier|static
name|int
name|getColumnIndex
parameter_list|(
name|ColumnImpl
index|[]
name|columns
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|size
init|=
name|columns
operator|.
name|length
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|ColumnImpl
name|c
init|=
name|columns
index|[
name|i
index|]
decl_stmt|;
name|String
name|cn
init|=
name|c
operator|.
name|getColumnName
argument_list|()
decl_stmt|;
if|if
condition|(
name|cn
operator|!=
literal|null
operator|&&
name|cn
operator|.
name|equals
argument_list|(
name|columnName
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|PropertyValue
name|getBindVariableValue
parameter_list|(
name|String
name|bindVariableName
parameter_list|)
block|{
name|PropertyValue
name|v
init|=
name|bindVariableMap
operator|.
name|get
argument_list|(
name|bindVariableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bind variable value not set: "
operator|+
name|bindVariableName
argument_list|)
throw|;
block|}
return|return
name|v
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getSelectorNames
parameter_list|()
block|{
name|String
index|[]
name|list
init|=
operator|new
name|String
index|[
name|selectors
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|list
index|[
name|i
index|]
operator|=
name|selectors
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getSelectorName
argument_list|()
expr_stmt|;
block|}
comment|// reverse names to that for xpath,
comment|// the first selector is the same as the node iterator
name|Collections
operator|.
name|reverse
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBindVariableNames
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|bindVariableMap
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTraversalEnabled
parameter_list|(
name|boolean
name|traversalEnabled
parameter_list|)
block|{
name|this
operator|.
name|traversalEnabled
operator|=
name|traversalEnabled
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setQueryOptions
parameter_list|(
name|QueryOptions
name|options
parameter_list|)
block|{
name|this
operator|.
name|queryOptions
operator|=
name|options
expr_stmt|;
block|}
specifier|public
name|SelectorExecutionPlan
name|getBestSelectorExecutionPlan
parameter_list|(
name|FilterImpl
name|filter
parameter_list|)
block|{
return|return
name|getBestSelectorExecutionPlan
argument_list|(
name|context
operator|.
name|getBaseState
argument_list|()
argument_list|,
name|filter
argument_list|,
name|context
operator|.
name|getIndexProvider
argument_list|()
argument_list|,
name|traversalEnabled
argument_list|)
return|;
block|}
specifier|private
name|SelectorExecutionPlan
name|getBestSelectorExecutionPlan
parameter_list|(
name|NodeState
name|rootState
parameter_list|,
name|FilterImpl
name|filter
parameter_list|,
name|QueryIndexProvider
name|indexProvider
parameter_list|,
name|boolean
name|traversalEnabled
parameter_list|)
block|{
name|QueryIndex
name|bestIndex
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logDebug
argument_list|(
literal|"cost using filter "
operator|+
name|filter
argument_list|)
expr_stmt|;
block|}
name|double
name|bestCost
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|IndexPlan
name|bestPlan
init|=
literal|null
decl_stmt|;
comment|// Sort the indexes according to their minimum cost to be able to skip the remaining indexes if the cost of the
comment|// current index is below the minimum cost of the next index.
name|List
argument_list|<
name|?
extends|extends
name|QueryIndex
argument_list|>
name|queryIndexes
init|=
name|MINIMAL_COST_ORDERING
operator|.
name|sortedCopy
argument_list|(
name|indexProvider
operator|.
name|getQueryIndexes
argument_list|(
name|rootState
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|sortOrder
init|=
name|getSortOrder
argument_list|(
name|filter
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queryIndexes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QueryIndex
name|index
init|=
name|queryIndexes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|double
name|minCost
init|=
name|index
operator|.
name|getMinimumCost
argument_list|()
decl_stmt|;
if|if
condition|(
name|minCost
operator|>
name|bestCost
condition|)
block|{
comment|// Stop looking if the minimum cost is higher than the current best cost
break|break;
block|}
name|double
name|cost
decl_stmt|;
name|String
name|indexName
init|=
name|index
operator|.
name|getIndexName
argument_list|()
decl_stmt|;
name|IndexPlan
name|indexPlan
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|index
operator|instanceof
name|AdvancedQueryIndex
condition|)
block|{
name|AdvancedQueryIndex
name|advIndex
init|=
operator|(
name|AdvancedQueryIndex
operator|)
name|index
decl_stmt|;
name|long
name|maxEntryCount
init|=
name|limit
decl_stmt|;
if|if
condition|(
name|offset
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|offset
operator|+
name|limit
operator|<
literal|0
condition|)
block|{
comment|// long overflow
name|maxEntryCount
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
else|else
block|{
name|maxEntryCount
operator|=
name|offset
operator|+
name|limit
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|IndexPlan
argument_list|>
name|ipList
init|=
name|advIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
name|sortOrder
argument_list|,
name|rootState
argument_list|)
decl_stmt|;
name|cost
operator|=
name|Double
operator|.
name|POSITIVE_INFINITY
expr_stmt|;
for|for
control|(
name|IndexPlan
name|p
range|:
name|ipList
control|)
block|{
name|long
name|entryCount
init|=
name|p
operator|.
name|getEstimatedEntryCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getSupportsPathRestriction
argument_list|()
condition|)
block|{
name|entryCount
operator|=
name|scaleEntryCount
argument_list|(
name|rootState
argument_list|,
name|filter
argument_list|,
name|entryCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sortOrder
operator|==
literal|null
operator|||
name|p
operator|.
name|getSortOrder
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// if the query is unordered, or
comment|// if the query contains "order by" and the index can sort on that,
comment|// then we don't need to read all entries from the index
name|entryCount
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxEntryCount
argument_list|,
name|entryCount
argument_list|)
expr_stmt|;
block|}
name|double
name|c
init|=
name|p
operator|.
name|getCostPerExecution
argument_list|()
operator|+
name|entryCount
operator|*
name|p
operator|.
name|getCostPerEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|plan
init|=
name|advIndex
operator|.
name|getPlanDescription
argument_list|(
name|p
argument_list|,
name|rootState
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"cost for [%s] of type (%s) with plan [%s] is %1.2f"
argument_list|,
name|p
operator|.
name|getPlanName
argument_list|()
argument_list|,
name|indexName
argument_list|,
name|plan
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|logDebug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|<
name|cost
condition|)
block|{
name|cost
operator|=
name|c
expr_stmt|;
name|indexPlan
operator|=
name|p
expr_stmt|;
block|}
block|}
if|if
condition|(
name|indexPlan
operator|!=
literal|null
operator|&&
name|indexPlan
operator|.
name|getPlanName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|indexName
operator|+=
literal|"["
operator|+
name|indexPlan
operator|.
name|getPlanName
argument_list|()
operator|+
literal|"]"
expr_stmt|;
block|}
block|}
else|else
block|{
name|cost
operator|=
name|index
operator|.
name|getCost
argument_list|(
name|filter
argument_list|,
name|rootState
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logDebug
argument_list|(
literal|"cost for "
operator|+
name|indexName
operator|+
literal|" is "
operator|+
name|cost
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cost
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"cost below 0 for "
operator|+
name|indexName
operator|+
literal|" is "
operator|+
name|cost
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cost
operator|<
name|bestCost
condition|)
block|{
name|bestCost
operator|=
name|cost
expr_stmt|;
name|bestIndex
operator|=
name|index
expr_stmt|;
name|bestPlan
operator|=
name|indexPlan
expr_stmt|;
block|}
block|}
name|potentiallySlowTraversalQuery
operator|=
name|bestIndex
operator|==
literal|null
expr_stmt|;
if|if
condition|(
name|traversalEnabled
condition|)
block|{
name|TraversingIndex
name|traversal
init|=
operator|new
name|TraversingIndex
argument_list|()
decl_stmt|;
name|double
name|cost
init|=
name|traversal
operator|.
name|getCost
argument_list|(
name|filter
argument_list|,
name|rootState
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logDebug
argument_list|(
literal|"cost for "
operator|+
name|traversal
operator|.
name|getIndexName
argument_list|()
operator|+
literal|" is "
operator|+
name|cost
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cost
operator|<
name|bestCost
operator|||
name|bestCost
operator|==
name|Double
operator|.
name|POSITIVE_INFINITY
condition|)
block|{
name|bestCost
operator|=
name|cost
expr_stmt|;
name|bestPlan
operator|=
literal|null
expr_stmt|;
name|bestIndex
operator|=
name|traversal
expr_stmt|;
if|if
condition|(
name|potentiallySlowTraversalQuery
condition|)
block|{
name|potentiallySlowTraversalQuery
operator|=
name|traversal
operator|.
name|isPotentiallySlow
argument_list|(
name|filter
argument_list|,
name|rootState
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|SelectorExecutionPlan
argument_list|(
name|filter
operator|.
name|getSelector
argument_list|()
argument_list|,
name|bestIndex
argument_list|,
name|bestPlan
argument_list|,
name|bestCost
argument_list|)
return|;
block|}
specifier|private
name|long
name|scaleEntryCount
parameter_list|(
name|NodeState
name|rootState
parameter_list|,
name|FilterImpl
name|filter
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|PathRestriction
name|r
init|=
name|filter
operator|.
name|getPathRestriction
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|PathRestriction
operator|.
name|ALL_CHILDREN
condition|)
block|{
return|return
name|count
return|;
block|}
name|String
name|path
init|=
name|filter
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|JoinConditionImpl
operator|.
name|SPECIAL_PATH_PREFIX
argument_list|)
condition|)
block|{
comment|// don't know the path currently, could be root
return|return
name|count
return|;
block|}
name|long
name|filterPathCount
init|=
name|NodeCounter
operator|.
name|getEstimatedNodeCount
argument_list|(
name|rootState
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterPathCount
operator|<
literal|0
condition|)
block|{
comment|// don't know
return|return
name|count
return|;
block|}
name|long
name|totalNodesCount
init|=
name|NodeCounter
operator|.
name|getEstimatedNodeCount
argument_list|(
name|rootState
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|totalNodesCount
operator|<=
literal|0
condition|)
block|{
name|totalNodesCount
operator|=
literal|1
expr_stmt|;
block|}
comment|// same logic as for the property index (see ContentMirrorStoreStrategy):
comment|// assume nodes in the index are evenly distributed in the repository (old idea)
name|long
name|countScaledDown
init|=
call|(
name|long
call|)
argument_list|(
operator|(
name|double
operator|)
name|count
operator|/
name|totalNodesCount
operator|*
name|filterPathCount
argument_list|)
decl_stmt|;
comment|// assume 80% of the indexed nodes are in this subtree
name|long
name|mostNodesFromThisSubtree
init|=
call|(
name|long
call|)
argument_list|(
name|filterPathCount
operator|*
literal|0.8
argument_list|)
decl_stmt|;
comment|// count can at most be the assumed subtree size
name|count
operator|=
name|Math
operator|.
name|min
argument_list|(
name|count
argument_list|,
name|mostNodesFromThisSubtree
argument_list|)
expr_stmt|;
comment|// this in theory should not have any effect,
comment|// except if the above estimates are incorrect,
comment|// so this is just for safety feature
name|count
operator|=
name|Math
operator|.
name|max
argument_list|(
name|count
argument_list|,
name|countScaledDown
argument_list|)
expr_stmt|;
return|return
name|count
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPotentiallySlow
parameter_list|()
block|{
return|return
name|potentiallySlowTraversalQuery
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|verifyNotPotentiallySlow
parameter_list|()
block|{
if|if
condition|(
name|potentiallySlowTraversalQuery
condition|)
block|{
name|QueryOptions
operator|.
name|Traversal
name|traversal
init|=
name|queryOptions
operator|.
name|traversal
decl_stmt|;
if|if
condition|(
name|traversal
operator|==
name|Traversal
operator|.
name|DEFAULT
condition|)
block|{
comment|// use the (configured) default
name|traversal
operator|=
name|settings
operator|.
name|getFailTraversal
argument_list|()
condition|?
name|Traversal
operator|.
name|FAIL
else|:
name|Traversal
operator|.
name|WARN
expr_stmt|;
block|}
else|else
block|{
comment|// explicitly set in the query
name|traversal
operator|=
name|queryOptions
operator|.
name|traversal
expr_stmt|;
block|}
name|String
name|message
init|=
literal|"Traversal query (query without index): "
operator|+
name|statement
operator|+
literal|"; consider creating an index"
decl_stmt|;
switch|switch
condition|(
name|traversal
condition|)
block|{
case|case
name|DEFAULT
case|:
comment|// not possible (changed to either FAIL or WARN above)
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
case|case
name|OK
case|:
break|break;
case|case
name|WARN
case|:
if|if
condition|(
operator|!
name|potentiallySlowTraversalQueryLogged
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|potentiallySlowTraversalQueryLogged
operator|=
literal|true
expr_stmt|;
block|}
break|break;
case|case
name|FAIL
case|:
if|if
condition|(
operator|!
name|potentiallySlowTraversalQueryLogged
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|potentiallySlowTraversalQueryLogged
operator|=
literal|true
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|getSortOrder
parameter_list|(
name|FilterImpl
name|filter
parameter_list|)
block|{
if|if
condition|(
name|orderings
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ArrayList
argument_list|<
name|OrderEntry
argument_list|>
name|sortOrder
init|=
operator|new
name|ArrayList
argument_list|<
name|OrderEntry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OrderingImpl
name|o
range|:
name|orderings
control|)
block|{
name|DynamicOperandImpl
name|op
init|=
name|o
operator|.
name|getOperand
argument_list|()
decl_stmt|;
name|OrderEntry
name|e
init|=
name|op
operator|.
name|getOrderEntry
argument_list|(
name|filter
operator|.
name|getSelector
argument_list|()
argument_list|,
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|sortOrder
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sortOrder
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|sortOrder
return|;
block|}
specifier|private
name|void
name|logDebug
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|isInternal
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setExecutionContext
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setOrderings
parameter_list|(
name|OrderingImpl
index|[]
name|orderings
parameter_list|)
block|{
name|this
operator|.
name|orderings
operator|=
name|orderings
expr_stmt|;
block|}
specifier|public
name|NamePathMapper
name|getNamePathMapper
parameter_list|()
block|{
return|return
name|namePathMapper
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tree
name|getTree
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|NodeStateUtils
operator|.
name|isHiddenPath
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|warnedHidden
condition|)
block|{
name|warnedHidden
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Hidden tree traversed: {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
return|return
name|context
operator|.
name|getRoot
argument_list|()
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMeasureOrExplainEnabled
parameter_list|()
block|{
return|return
name|explain
operator|||
name|measure
return|;
block|}
comment|/**      * Validate the path is syntactically correct, and convert it to an Oak      * internal path (including namespace remapping if needed).      *       * @param path the path      * @return the the converted path      */
specifier|public
name|String
name|getOakPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|JcrPathParser
operator|.
name|validate
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid path: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|String
name|p
init|=
name|namePathMapper
operator|.
name|getOakPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid path or namespace prefix: "
operator|+
name|path
argument_list|)
throw|;
block|}
return|return
name|p
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"select "
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ColumnImpl
name|c
range|:
name|columns
control|)
block|{
if|if
condition|(
name|i
operator|++
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|" from "
argument_list|)
operator|.
name|append
argument_list|(
name|source
argument_list|)
expr_stmt|;
if|if
condition|(
name|constraint
operator|!=
literal|null
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|" where "
argument_list|)
operator|.
name|append
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|orderings
operator|!=
literal|null
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|" order by "
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|OrderingImpl
name|o
range|:
name|orderings
control|)
block|{
if|if
condition|(
name|i
operator|++
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|(
name|SizePrecision
name|precision
parameter_list|,
name|long
name|max
parameter_list|)
block|{
comment|// Note: DISTINCT is ignored
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// "order by" was used, so we know the size
return|return
name|size
return|;
block|}
return|return
name|Math
operator|.
name|min
argument_list|(
name|limit
argument_list|,
name|source
operator|.
name|getSize
argument_list|(
name|context
operator|.
name|getBaseState
argument_list|()
argument_list|,
name|precision
argument_list|,
name|max
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStatement
parameter_list|()
block|{
return|return
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|statement
argument_list|)
condition|?
name|toString
argument_list|()
else|:
name|statement
return|;
block|}
specifier|public
name|QueryEngineSettings
name|getSettings
parameter_list|()
block|{
return|return
name|settings
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setInternal
parameter_list|(
name|boolean
name|isInternal
parameter_list|)
block|{
name|this
operator|.
name|isInternal
operator|=
name|isInternal
expr_stmt|;
block|}
specifier|public
name|ExecutionContext
name|getExecutionContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
comment|/**      * Add two values, but don't let it overflow or underflow.      *       * @param x the first value      * @param y the second value      * @return the sum, or Long.MIN_VALUE for underflow, or Long.MAX_VALUE for      *         overflow      */
specifier|public
specifier|static
name|long
name|saturatedAdd
parameter_list|(
name|long
name|x
parameter_list|,
name|long
name|y
parameter_list|)
block|{
name|BigInteger
name|min
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
name|BigInteger
name|max
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|BigInteger
name|sum
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
operator|.
name|add
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|y
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|sum
operator|.
name|min
argument_list|(
name|max
argument_list|)
operator|.
name|max
argument_list|(
name|min
argument_list|)
operator|.
name|longValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|buildAlternativeQuery
parameter_list|()
block|{
name|Query
name|result
init|=
name|this
decl_stmt|;
if|if
condition|(
name|constraint
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|ConstraintImpl
argument_list|>
name|unionList
decl_stmt|;
try|try
block|{
name|unionList
operator|=
name|constraint
operator|.
name|convertToUnion
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// too many union
return|return
name|this
return|;
block|}
if|if
condition|(
name|unionList
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// there are some cases where multiple ORs simplify into a single one. If we get a
comment|// union list of just one we don't really have to UNION anything.
name|QueryImpl
name|left
init|=
literal|null
decl_stmt|;
name|Query
name|right
init|=
literal|null
decl_stmt|;
comment|// we have something to do here.
for|for
control|(
name|ConstraintImpl
name|c
range|:
name|unionList
control|)
block|{
if|if
condition|(
name|right
operator|!=
literal|null
condition|)
block|{
name|right
operator|=
name|newAlternativeUnionQuery
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// pulling left to the right
if|if
condition|(
name|left
operator|!=
literal|null
condition|)
block|{
name|right
operator|=
name|left
expr_stmt|;
block|}
block|}
comment|// cloning original query
name|left
operator|=
operator|(
name|QueryImpl
operator|)
name|this
operator|.
name|copyOf
argument_list|()
expr_stmt|;
comment|// cloning the constraints and assigning to new query
name|left
operator|.
name|constraint
operator|=
operator|(
name|ConstraintImpl
operator|)
name|copyElementAndCheckReference
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// re-composing the statement for better debug messages
name|left
operator|.
name|statement
operator|=
name|recomposeStatement
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|newAlternativeUnionQuery
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|String
name|recomposeStatement
parameter_list|(
annotation|@
name|NotNull
name|QueryImpl
name|query
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|String
name|original
init|=
name|query
operator|.
name|getStatement
argument_list|()
decl_stmt|;
name|String
name|origUpper
init|=
name|original
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|StringBuilder
name|recomputed
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|String
name|where
init|=
literal|" WHERE "
decl_stmt|;
specifier|final
name|String
name|orderBy
init|=
literal|" ORDER BY "
decl_stmt|;
name|int
name|whereOffset
init|=
name|where
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|getConstraint
argument_list|()
operator|==
literal|null
condition|)
block|{
name|recomputed
operator|.
name|append
argument_list|(
name|original
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|recomputed
operator|.
name|append
argument_list|(
name|original
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|origUpper
operator|.
name|indexOf
argument_list|(
name|where
argument_list|)
operator|+
name|whereOffset
argument_list|)
argument_list|)
expr_stmt|;
name|recomputed
operator|.
name|append
argument_list|(
name|query
operator|.
name|getConstraint
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|origUpper
operator|.
name|indexOf
argument_list|(
name|orderBy
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|recomputed
operator|.
name|append
argument_list|(
name|original
operator|.
name|substring
argument_list|(
name|origUpper
operator|.
name|indexOf
argument_list|(
name|orderBy
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|recomputed
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Convenience method for creating a UnionQueryImpl with proper settings.      *       * @param left the first subquery      * @param right the second subquery      * @return the union query      */
specifier|private
name|UnionQueryImpl
name|newAlternativeUnionQuery
parameter_list|(
annotation|@
name|NotNull
name|Query
name|left
parameter_list|,
annotation|@
name|NotNull
name|Query
name|right
parameter_list|)
block|{
name|UnionQueryImpl
name|u
init|=
operator|new
name|UnionQueryImpl
argument_list|(
literal|false
argument_list|,
name|checkNotNull
argument_list|(
name|left
argument_list|,
literal|"`left` cannot be null"
argument_list|)
argument_list|,
name|checkNotNull
argument_list|(
name|right
argument_list|,
literal|"`right` cannot be null"
argument_list|)
argument_list|,
name|this
operator|.
name|settings
argument_list|)
decl_stmt|;
name|u
operator|.
name|setExplain
argument_list|(
name|explain
argument_list|)
expr_stmt|;
name|u
operator|.
name|setMeasure
argument_list|(
name|measure
argument_list|)
expr_stmt|;
name|u
operator|.
name|setInternal
argument_list|(
name|isInternal
argument_list|)
expr_stmt|;
return|return
name|u
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|copyOf
parameter_list|()
block|{
if|if
condition|(
name|isInit
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"QueryImpl cannot be cloned once initialised."
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ColumnImpl
argument_list|>
name|cols
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnImpl
name|c
range|:
name|columns
control|)
block|{
name|cols
operator|.
name|add
argument_list|(
operator|(
name|ColumnImpl
operator|)
name|copyElementAndCheckReference
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QueryImpl
name|copy
init|=
operator|new
name|QueryImpl
argument_list|(
name|this
operator|.
name|statement
argument_list|,
operator|(
name|SourceImpl
operator|)
name|copyElementAndCheckReference
argument_list|(
name|this
operator|.
name|source
argument_list|)
argument_list|,
name|this
operator|.
name|constraint
argument_list|,
name|cols
operator|.
name|toArray
argument_list|(
operator|new
name|ColumnImpl
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|this
operator|.
name|namePathMapper
argument_list|,
name|this
operator|.
name|settings
argument_list|,
name|this
operator|.
name|stats
argument_list|)
decl_stmt|;
name|copy
operator|.
name|explain
operator|=
name|this
operator|.
name|explain
expr_stmt|;
name|copy
operator|.
name|distinct
operator|=
name|this
operator|.
name|distinct
expr_stmt|;
return|return
name|copy
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInit
parameter_list|()
block|{
return|return
name|init
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInternal
parameter_list|()
block|{
return|return
name|isInternal
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsUnfilteredFullTextCondition
parameter_list|()
block|{
return|return
name|constraint
operator|.
name|containsUnfilteredFullTextCondition
argument_list|()
return|;
block|}
specifier|public
name|QueryOptions
name|getQueryOptions
parameter_list|()
block|{
return|return
name|queryOptions
return|;
block|}
specifier|public
name|QueryExecutionStats
name|getQueryExecutionStats
parameter_list|()
block|{
return|return
name|stats
return|;
block|}
block|}
end_class

end_unit

