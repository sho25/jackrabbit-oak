begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TypeAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_class
specifier|public
class|class
name|OakWordTokenFilter
extends|extends
name|CompoundWordTokenFilterBase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ALPHANUM_TYPE
init|=
name|StandardTokenizer
operator|.
name|TOKEN_TYPES
index|[
name|StandardTokenizer
operator|.
name|ALPHANUM
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|SEPARATORS
init|=
operator|new
name|char
index|[]
block|{
literal|'_'
block|,
literal|'.'
block|}
decl_stmt|;
specifier|private
specifier|final
name|char
index|[]
name|separators
decl_stmt|;
specifier|private
specifier|final
name|TypeAttribute
name|typeAtt
init|=
name|addAttribute
argument_list|(
name|TypeAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|OakWordTokenFilter
parameter_list|(
name|Version
name|version
parameter_list|,
name|TokenStream
name|in
parameter_list|,
name|char
index|[]
name|separators
parameter_list|)
block|{
name|super
argument_list|(
name|version
argument_list|,
name|in
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|separators
operator|=
name|separators
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|this
operator|.
name|separators
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OakWordTokenFilter
parameter_list|(
name|Version
name|version
parameter_list|,
name|TokenStream
name|in
parameter_list|)
block|{
name|this
argument_list|(
name|version
argument_list|,
name|in
argument_list|,
name|SEPARATORS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|decompose
parameter_list|()
block|{
if|if
condition|(
name|ALPHANUM_TYPE
operator|.
name|equals
argument_list|(
name|typeAtt
operator|.
name|type
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|int
name|len
init|=
name|termAtt
operator|.
name|length
argument_list|()
decl_stmt|;
name|char
index|[]
name|buffer
init|=
name|termAtt
operator|.
name|buffer
argument_list|()
decl_stmt|;
name|int
name|tokenLen
init|=
literal|0
decl_stmt|;
name|boolean
name|foundOne
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|separators
argument_list|,
name|buffer
index|[
name|i
index|]
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|foundOne
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|tokenLen
operator|>
literal|0
condition|)
block|{
name|CompoundToken
name|ct
init|=
operator|new
name|CompoundToken
argument_list|(
name|i
operator|-
name|tokenLen
argument_list|,
name|tokenLen
argument_list|)
decl_stmt|;
name|tokens
operator|.
name|add
argument_list|(
name|ct
argument_list|)
expr_stmt|;
block|}
name|tokenLen
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|tokenLen
operator|++
expr_stmt|;
block|}
block|}
comment|// if there's no split, don't return anything, let the parent
comment|// tokenizer return the full token
if|if
condition|(
name|foundOne
operator|&&
name|tokenLen
operator|>
literal|0
condition|)
block|{
name|CompoundToken
name|ct
init|=
operator|new
name|CompoundToken
argument_list|(
name|len
operator|-
name|tokenLen
argument_list|,
name|tokenLen
argument_list|)
decl_stmt|;
name|tokens
operator|.
name|add
argument_list|(
name|ct
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

