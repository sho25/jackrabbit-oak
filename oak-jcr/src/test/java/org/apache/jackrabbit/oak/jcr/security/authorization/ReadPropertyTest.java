begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @since OAK 1.0 : jcr:read is an aggregation of read property and node privileges.  */
end_comment

begin_class
specifier|public
class|class
name|ReadPropertyTest
extends|extends
name|AbstractEvaluationTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testReadProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|deny
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|itemExists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|propertyPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|propertyPaths
operator|.
name|add
argument_list|(
name|childPPath
argument_list|)
expr_stmt|;
name|propertyPaths
operator|.
name|add
argument_list|(
name|childchildPPath
argument_list|)
expr_stmt|;
name|propertyPaths
operator|.
name|add
argument_list|(
name|path
operator|+
literal|"/jcr:primaryType"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|pPath
range|:
name|propertyPaths
control|)
block|{
name|assertTrue
argument_list|(
name|testSession
operator|.
name|itemExists
argument_list|(
name|pPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|propertyExists
argument_list|(
name|pPath
argument_list|)
argument_list|)
expr_stmt|;
name|Property
name|p
init|=
name|testSession
operator|.
name|getProperty
argument_list|(
name|pPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pPath
argument_list|,
name|p
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDenyReadProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|itemExists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|propertyPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|propertyPaths
operator|.
name|add
argument_list|(
name|childPPath
argument_list|)
expr_stmt|;
name|propertyPaths
operator|.
name|add
argument_list|(
name|childchildPPath
argument_list|)
expr_stmt|;
name|propertyPaths
operator|.
name|add
argument_list|(
name|path
operator|+
literal|"/jcr:primaryType"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|pPath
range|:
name|propertyPaths
control|)
block|{
name|assertFalse
argument_list|(
name|testSession
operator|.
name|itemExists
argument_list|(
name|pPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|propertyExists
argument_list|(
name|pPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadProperty2
parameter_list|()
throws|throws
name|Exception
block|{
name|deny
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|itemExists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|propertyPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|propertyPaths
operator|.
name|add
argument_list|(
name|childPPath
argument_list|)
expr_stmt|;
name|propertyPaths
operator|.
name|add
argument_list|(
name|childchildPPath
argument_list|)
expr_stmt|;
name|propertyPaths
operator|.
name|add
argument_list|(
name|path
operator|+
literal|"/jcr:primaryType"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|pPath
range|:
name|propertyPaths
control|)
block|{
name|assertTrue
argument_list|(
name|testSession
operator|.
name|itemExists
argument_list|(
name|pPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|propertyExists
argument_list|(
name|pPath
argument_list|)
argument_list|)
expr_stmt|;
name|Property
name|p
init|=
name|testSession
operator|.
name|getProperty
argument_list|(
name|pPath
argument_list|)
decl_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetParent
parameter_list|()
throws|throws
name|Exception
block|{
name|deny
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|propertyPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|propertyPaths
operator|.
name|add
argument_list|(
name|childPPath
argument_list|)
expr_stmt|;
name|propertyPaths
operator|.
name|add
argument_list|(
name|childchildPPath
argument_list|)
expr_stmt|;
name|propertyPaths
operator|.
name|add
argument_list|(
name|path
operator|+
literal|"/jcr:primaryType"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|pPath
range|:
name|propertyPaths
control|)
block|{
name|Property
name|p
init|=
name|testSession
operator|.
name|getProperty
argument_list|(
name|pPath
argument_list|)
decl_stmt|;
try|try
block|{
name|Node
name|n
init|=
name|p
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPath
parameter_list|()
throws|throws
name|Exception
block|{
name|deny
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|propertyPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|propertyPaths
operator|.
name|add
argument_list|(
name|childPPath
argument_list|)
expr_stmt|;
name|propertyPaths
operator|.
name|add
argument_list|(
name|childchildPPath
argument_list|)
expr_stmt|;
name|propertyPaths
operator|.
name|add
argument_list|(
name|path
operator|+
literal|"/jcr:primaryType"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|pPath
range|:
name|propertyPaths
control|)
block|{
name|Property
name|p
init|=
name|testSession
operator|.
name|getProperty
argument_list|(
name|pPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pPath
argument_list|,
name|p
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|deny
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|propertyPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|propertyPaths
operator|.
name|add
argument_list|(
name|childPPath
argument_list|)
expr_stmt|;
name|propertyPaths
operator|.
name|add
argument_list|(
name|childchildPPath
argument_list|)
expr_stmt|;
name|propertyPaths
operator|.
name|add
argument_list|(
name|path
operator|+
literal|"/jcr:primaryType"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|pPath
range|:
name|propertyPaths
control|)
block|{
name|Property
name|p
init|=
name|testSession
operator|.
name|getProperty
argument_list|(
name|pPath
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|p
operator|.
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|p
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

