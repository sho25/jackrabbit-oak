begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|hasItem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|junit
operator|.
name|LogCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|reference
operator|.
name|ReferenceIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|AbstractQueryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Level
import|;
end_import

begin_class
specifier|public
class|class
name|OrderedPropertyIndexProviderTest
extends|extends
name|AbstractQueryTest
block|{
specifier|private
specifier|final
name|LogCustomizer
name|custom
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|OrderedPropertyIndexProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|enable
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|createTestIndexNode
parameter_list|()
throws|throws
name|Exception
block|{
comment|// no index definitions OOTB
block|}
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
return|return
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|ReferenceIndexProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OrderedPropertyIndexProvider
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|singleQueryRun
parameter_list|()
block|{
name|custom
operator|.
name|starting
argument_list|()
expr_stmt|;
name|executeQuery
argument_list|(
literal|"SELECT * FROM [oak:Unstructured]"
argument_list|,
name|SQL2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logs
init|=
name|custom
operator|.
name|getLogs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|logs
argument_list|,
name|hasItem
argument_list|(
name|OrderedIndex
operator|.
name|DEPRECATION_MESSAGE
argument_list|)
argument_list|)
expr_stmt|;
name|custom
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleQueryRuns
parameter_list|()
block|{
specifier|final
name|int
name|executions
init|=
literal|16
decl_stmt|;
specifier|final
name|int
name|trackEvery
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|numTraces
init|=
name|executions
operator|/
name|trackEvery
decl_stmt|;
name|OrderedPropertyIndexProvider
operator|.
name|setThreshold
argument_list|(
name|trackEvery
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedLogs
init|=
name|Collections
operator|.
name|nCopies
argument_list|(
name|numTraces
argument_list|,
name|OrderedIndex
operator|.
name|DEPRECATION_MESSAGE
argument_list|)
decl_stmt|;
name|custom
operator|.
name|starting
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|executions
condition|;
name|i
operator|++
control|)
block|{
name|executeQuery
argument_list|(
literal|"SELECT * FROM [oak:Unstructured]"
argument_list|,
name|SQL2
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|custom
operator|.
name|getLogs
argument_list|()
argument_list|,
name|is
argument_list|(
name|expectedLogs
argument_list|)
argument_list|)
expr_stmt|;
name|custom
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

