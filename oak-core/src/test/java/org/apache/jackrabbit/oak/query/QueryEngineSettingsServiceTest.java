begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|QueryEngineSettingsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|testing
operator|.
name|mock
operator|.
name|osgi
operator|.
name|junit
operator|.
name|OsgiContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|QueryEngineSettingsServiceTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|UNSET
init|=
literal|"UNSET"
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|OsgiContext
name|context
init|=
operator|new
name|OsgiContext
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|sysPropNames
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|QueryEngineSettings
operator|.
name|OAK_QUERY_LIMIT_IN_MEMORY
argument_list|,
name|QueryEngineSettings
operator|.
name|OAK_QUERY_LIMIT_READS
argument_list|,
name|QueryEngineSettings
operator|.
name|OAK_QUERY_FAIL_TRAVERSAL
argument_list|)
decl_stmt|;
specifier|private
name|QueryEngineSettingsService
name|settingsService
init|=
operator|new
name|QueryEngineSettingsService
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sysPropValues
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|collectExistingValues
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|resetSysProps
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|sysPropValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|UNSET
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|System
operator|.
name|clearProperty
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|osgiConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryEngineSettings
name|settings
init|=
operator|new
name|QueryEngineSettings
argument_list|()
decl_stmt|;
name|context
operator|.
name|registerService
argument_list|(
name|QueryEngineSettingsMBean
operator|.
name|class
argument_list|,
name|settings
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|QueryEngineSettingsService
operator|.
name|QUERY_LIMIT_READS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|QueryEngineSettingsService
operator|.
name|QUERY_LIMIT_IN_MEMORY
argument_list|,
literal|142
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|QueryEngineSettingsService
operator|.
name|QUERY_FAIL_TRAVERSAL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|registerInjectActivateService
argument_list|(
name|settingsService
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|settings
operator|.
name|getLimitReads
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|142
argument_list|,
name|settings
operator|.
name|getLimitInMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|settings
operator|.
name|getFailTraversal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sysPropSupercedes
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|QueryEngineSettings
operator|.
name|OAK_QUERY_LIMIT_IN_MEMORY
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|QueryEngineSettings
operator|.
name|OAK_QUERY_LIMIT_READS
argument_list|,
literal|"11"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|QueryEngineSettings
operator|.
name|OAK_QUERY_FAIL_TRAVERSAL
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|QueryEngineSettings
name|settings
init|=
operator|new
name|QueryEngineSettings
argument_list|()
decl_stmt|;
name|context
operator|.
name|registerService
argument_list|(
name|QueryEngineSettingsMBean
operator|.
name|class
argument_list|,
name|settings
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|QueryEngineSettingsService
operator|.
name|QUERY_LIMIT_READS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|QueryEngineSettingsService
operator|.
name|QUERY_LIMIT_IN_MEMORY
argument_list|,
literal|142
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|QueryEngineSettingsService
operator|.
name|QUERY_FAIL_TRAVERSAL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|registerInjectActivateService
argument_list|(
name|settingsService
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|settings
operator|.
name|getLimitReads
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|settings
operator|.
name|getLimitInMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|settings
operator|.
name|getFailTraversal
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|collectExistingValues
parameter_list|()
block|{
for|for
control|(
name|String
name|key
range|:
name|sysPropNames
control|)
block|{
name|String
name|value
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|sysPropValues
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sysPropValues
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|UNSET
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

