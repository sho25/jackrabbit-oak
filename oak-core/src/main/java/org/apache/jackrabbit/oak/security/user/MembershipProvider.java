begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|RangeIteratorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|util
operator|.
name|UserUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|PropertyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|PropertyUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|WEAKREFERENCE
import|;
end_import

begin_comment
comment|/**  * {@code MembershipProvider} implementation storing group membership information  * with the {@code Tree} associated with a given {@link org.apache.jackrabbit.api.security.user.Group}.  * Depending on the configuration there are two variants on how group members  * are recorded:  *<p/>  *<h3>Membership stored in multi-valued property</h3>  * This is the default way of storing membership information with the following  * characteristics:  *<ul>  *<li>Multivalued property {@link #REP_MEMBERS}</li>  *<li>Property type: {@link javax.jcr.PropertyType#WEAKREFERENCE}</li>  *<li>Used if the config option {@link org.apache.jackrabbit.oak.spi.security.user.UserConstants#PARAM_GROUP_MEMBERSHIP_SPLIT_SIZE} is missing or&lt;4</li>  *</ul>  *<p/>  *<h3>Membership stored in individual properties</h3>  * Variant to store group membership based on the  * {@link org.apache.jackrabbit.oak.spi.security.user.UserConstants#PARAM_GROUP_MEMBERSHIP_SPLIT_SIZE} configuration parameter:  *<p/>  *<ul>  *<li>Membership information stored underneath a {@link #REP_MEMBERS} node hierarchy</li>  *<li>Individual member information is stored each in a {@link javax.jcr.PropertyType#WEAKREFERENCE}  * property</li>  *<li>Node hierarchy is split based on the {@link org.apache.jackrabbit.oak.spi.security.user.UserConstants#PARAM_GROUP_MEMBERSHIP_SPLIT_SIZE}  * configuration parameter.</li>  *<li>{@link org.apache.jackrabbit.oak.spi.security.user.UserConstants#PARAM_GROUP_MEMBERSHIP_SPLIT_SIZE} must be greater than 4  * in order to turn on this behavior</li>  *</ul>  *<p/>  *<h3>Compatibility</h3>  * This membership provider is able to deal with both options being present in  * the content. If the {@link org.apache.jackrabbit.oak.spi.security.user.UserConstants#PARAM_GROUP_MEMBERSHIP_SPLIT_SIZE} configuration  * parameter is modified later on, existing membership information is not  * modified or converted to the new structure.  */
end_comment

begin_class
class|class
name|MembershipProvider
extends|extends
name|AuthorizableBaseProvider
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MembershipProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|splitSize
decl_stmt|;
name|MembershipProvider
parameter_list|(
name|Root
name|root
parameter_list|,
name|ConfigurationParameters
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|root
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|int
name|splitValue
init|=
name|config
operator|.
name|getConfigValue
argument_list|(
name|PARAM_GROUP_MEMBERSHIP_SPLIT_SIZE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitValue
operator|!=
literal|0
operator|&&
name|splitValue
operator|<
literal|4
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid value {} for {}. Expected integer>= 4 or 0"
argument_list|,
name|splitValue
argument_list|,
name|PARAM_GROUP_MEMBERSHIP_SPLIT_SIZE
argument_list|)
expr_stmt|;
name|splitValue
operator|=
literal|0
expr_stmt|;
block|}
name|this
operator|.
name|splitSize
operator|=
name|splitValue
expr_stmt|;
block|}
annotation|@
name|Nonnull
name|Iterator
argument_list|<
name|String
argument_list|>
name|getMembership
parameter_list|(
name|Tree
name|authorizableTree
parameter_list|,
name|boolean
name|includeInherited
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|groupPaths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|refPaths
init|=
name|identifierManager
operator|.
name|getReferences
argument_list|(
literal|true
argument_list|,
name|authorizableTree
argument_list|,
name|REP_MEMBERS
argument_list|,
name|NT_REP_GROUP
argument_list|,
name|NT_REP_MEMBERS
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|propPath
range|:
name|refPaths
control|)
block|{
name|int
name|index
init|=
name|propPath
operator|.
name|indexOf
argument_list|(
literal|'/'
operator|+
name|REP_MEMBERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|groupPaths
operator|.
name|add
argument_list|(
name|propPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Not a membership reference property "
operator|+
name|propPath
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|groupPaths
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeInherited
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|getAllMembership
argument_list|(
name|groupPaths
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|RangeIteratorAdapter
argument_list|(
name|it
argument_list|,
name|groupPaths
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Nonnull
name|Iterator
argument_list|<
name|String
argument_list|>
name|getMembers
parameter_list|(
name|Tree
name|groupTree
parameter_list|,
name|AuthorizableType
name|authorizableType
parameter_list|,
name|boolean
name|includeInherited
parameter_list|)
block|{
name|Iterable
name|memberPaths
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|useMemberNode
argument_list|(
name|groupTree
argument_list|)
condition|)
block|{
name|Tree
name|membersTree
init|=
name|groupTree
operator|.
name|getChild
argument_list|(
name|REP_MEMBERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|membersTree
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"not implemented: retrieve members from member-node hierarchy"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|PropertyState
name|property
init|=
name|groupTree
operator|.
name|getProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|vs
init|=
name|property
operator|.
name|getValue
argument_list|(
name|STRINGS
argument_list|)
decl_stmt|;
name|memberPaths
operator|=
name|Iterables
operator|.
name|filter
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|vs
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|String
name|value
parameter_list|)
block|{
return|return
name|identifierManager
operator|.
name|getPath
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|,
name|WEAKREFERENCE
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|,
name|Predicates
operator|.
expr|<
name|String
operator|>
name|notNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
name|it
init|=
name|memberPaths
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeInherited
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|getAllMembers
argument_list|(
name|it
argument_list|,
name|authorizableType
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|RangeIteratorAdapter
argument_list|(
name|it
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|memberPaths
argument_list|)
argument_list|)
return|;
block|}
block|}
name|boolean
name|isMember
parameter_list|(
name|Tree
name|groupTree
parameter_list|,
name|Tree
name|authorizableTree
parameter_list|,
name|boolean
name|includeInherited
parameter_list|)
block|{
if|if
condition|(
name|includeInherited
condition|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|groupPaths
init|=
name|getMembership
argument_list|(
name|authorizableTree
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|groupTree
operator|.
name|getPath
argument_list|()
decl_stmt|;
while|while
condition|(
name|groupPaths
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|groupPaths
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|useMemberNode
argument_list|(
name|groupTree
argument_list|)
condition|)
block|{
name|Tree
name|membersTree
init|=
name|groupTree
operator|.
name|getChild
argument_list|(
name|REP_MEMBERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|membersTree
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// FIXME: testing for property name in jr2 wasn't correct.
comment|// TODO OAK-482: add implementation
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"not implemented: isMembers determined from member-node hierarchy"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|PropertyState
name|property
init|=
name|groupTree
operator|.
name|getProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|members
init|=
name|property
operator|.
name|getValue
argument_list|(
name|STRINGS
argument_list|)
decl_stmt|;
name|String
name|authorizableUUID
init|=
name|getContentID
argument_list|(
name|authorizableTree
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|v
range|:
name|members
control|)
block|{
if|if
condition|(
name|authorizableUUID
operator|.
name|equals
argument_list|(
name|v
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
comment|// no a member of the specified group
return|return
literal|false
return|;
block|}
name|boolean
name|addMember
parameter_list|(
name|Tree
name|groupTree
parameter_list|,
name|Tree
name|newMemberTree
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|addMember
argument_list|(
name|groupTree
argument_list|,
name|newMemberTree
operator|.
name|getName
argument_list|()
argument_list|,
name|getContentID
argument_list|(
name|newMemberTree
argument_list|)
argument_list|)
return|;
block|}
name|boolean
name|addMember
parameter_list|(
name|Tree
name|groupTree
parameter_list|,
name|String
name|treeName
parameter_list|,
name|String
name|memberContentId
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|useMemberNode
argument_list|(
name|groupTree
argument_list|)
condition|)
block|{
name|NodeUtil
name|groupNode
init|=
operator|new
name|NodeUtil
argument_list|(
name|groupTree
argument_list|)
decl_stmt|;
name|NodeUtil
name|membersNode
init|=
name|groupNode
operator|.
name|getOrAddChild
argument_list|(
name|REP_MEMBERS
argument_list|,
name|NT_REP_MEMBERS
argument_list|)
decl_stmt|;
comment|// TODO OAK-482: add implementation that allows to index group members
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"not implemented: addMember with member-node hierarchy"
argument_list|)
throw|;
block|}
else|else
block|{
name|PropertyBuilder
argument_list|<
name|String
argument_list|>
name|propertyBuilder
init|=
name|getMembersPropertyBuilder
argument_list|(
name|groupTree
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyBuilder
operator|.
name|hasValue
argument_list|(
name|memberContentId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|propertyBuilder
operator|.
name|addValue
argument_list|(
name|memberContentId
argument_list|)
expr_stmt|;
block|}
name|groupTree
operator|.
name|setProperty
argument_list|(
name|propertyBuilder
operator|.
name|getPropertyState
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
name|boolean
name|removeMember
parameter_list|(
name|Tree
name|groupTree
parameter_list|,
name|Tree
name|memberTree
parameter_list|)
block|{
if|if
condition|(
name|useMemberNode
argument_list|(
name|groupTree
argument_list|)
condition|)
block|{
name|Tree
name|membersTree
init|=
name|groupTree
operator|.
name|getChild
argument_list|(
name|REP_MEMBERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|membersTree
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// TODO OAK-482: add implementation
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"not implemented: remove member from member-node hierarchy"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|String
name|toRemove
init|=
name|getContentID
argument_list|(
name|memberTree
argument_list|)
decl_stmt|;
name|PropertyBuilder
argument_list|<
name|String
argument_list|>
name|propertyBuilder
init|=
name|getMembersPropertyBuilder
argument_list|(
name|groupTree
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyBuilder
operator|.
name|hasValue
argument_list|(
name|toRemove
argument_list|)
condition|)
block|{
name|propertyBuilder
operator|.
name|removeValue
argument_list|(
name|toRemove
argument_list|)
expr_stmt|;
if|if
condition|(
name|propertyBuilder
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|groupTree
operator|.
name|removeProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|groupTree
operator|.
name|setProperty
argument_list|(
name|propertyBuilder
operator|.
name|getPropertyState
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
comment|// nothing changed
name|log
operator|.
name|debug
argument_list|(
literal|"Authorizable {} was not member of {}"
argument_list|,
name|memberTree
operator|.
name|getName
argument_list|()
argument_list|,
name|groupTree
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**      * Returns {@code true} if the given {@code newMember} is a Group      * and contains {@code this} Group as declared or inherited member.      *      * @param newMemberTree  The new member to be tested for cyclic membership.      * @param groupContentId The content ID of the group.      * @return true if the 'newMember' is a group and 'this' is an declared or      *         inherited member of it.      */
name|boolean
name|isCyclicMembership
parameter_list|(
name|Tree
name|newMemberTree
parameter_list|,
name|String
name|groupContentId
parameter_list|)
block|{
if|if
condition|(
name|UserUtil
operator|.
name|isType
argument_list|(
name|newMemberTree
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|getMembers
argument_list|(
name|newMemberTree
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|,
literal|true
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|contentId
init|=
name|getContentID
argument_list|(
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupContentId
operator|.
name|equals
argument_list|(
name|contentId
argument_list|)
condition|)
block|{
comment|// found cyclic group membership
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|//-----------------------------------------< private MembershipProvider>---
specifier|private
name|PropertyBuilder
argument_list|<
name|String
argument_list|>
name|getMembersPropertyBuilder
parameter_list|(
name|Tree
name|groupTree
parameter_list|)
block|{
name|PropertyState
name|property
init|=
name|groupTree
operator|.
name|getProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|==
literal|null
condition|)
block|{
return|return
name|PropertyUtil
operator|.
name|getPropertyBuilder
argument_list|(
name|WEAKREFERENCE
argument_list|,
name|REP_MEMBERS
argument_list|,
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|PropertyUtil
operator|.
name|getPropertyBuilder
argument_list|(
name|WEAKREFERENCE
argument_list|,
name|property
argument_list|)
return|;
block|}
block|}
specifier|private
name|boolean
name|useMemberNode
parameter_list|(
name|Tree
name|groupTree
parameter_list|)
block|{
return|return
name|splitSize
operator|>=
literal|4
operator|&&
operator|!
name|groupTree
operator|.
name|hasProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
return|;
block|}
comment|/**      * Returns an iterator of authorizables which includes all indirect members      * of the given iterator of authorizables.      *      * @param declaredMembers  Iterator containing the paths to the declared members.      * @param authorizableType Flag used to filter the result by authorizable type.      * @return Iterator of Authorizable objects      */
specifier|private
name|Iterator
argument_list|<
name|String
argument_list|>
name|getAllMembers
parameter_list|(
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|declaredMembers
parameter_list|,
specifier|final
name|AuthorizableType
name|authorizableType
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Iterator
argument_list|<
name|String
argument_list|>
argument_list|>
name|inheritedMembers
init|=
operator|new
name|Iterator
argument_list|<
name|Iterator
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|declaredMembers
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|next
parameter_list|()
block|{
name|String
name|memberPath
init|=
name|declaredMembers
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|memberPath
operator|==
literal|null
condition|)
block|{
return|return
name|Iterators
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Iterators
operator|.
name|concat
argument_list|(
name|Iterators
operator|.
name|singletonIterator
argument_list|(
name|memberPath
argument_list|)
argument_list|,
name|inherited
argument_list|(
name|memberPath
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|private
name|Iterator
argument_list|<
name|String
argument_list|>
name|inherited
parameter_list|(
name|String
name|authorizablePath
parameter_list|)
block|{
name|Tree
name|group
init|=
name|getByPath
argument_list|(
name|authorizablePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|UserUtil
operator|.
name|isType
argument_list|(
name|group
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|)
condition|)
block|{
return|return
name|getMembers
argument_list|(
name|group
argument_list|,
name|authorizableType
argument_list|,
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Iterators
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
block|}
block|}
decl_stmt|;
return|return
name|Iterators
operator|.
name|filter
argument_list|(
name|Iterators
operator|.
name|concat
argument_list|(
name|inheritedMembers
argument_list|)
argument_list|,
operator|new
name|ProcessedPathPredicate
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Iterator
argument_list|<
name|String
argument_list|>
name|getAllMembership
parameter_list|(
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|groupPaths
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Iterator
argument_list|<
name|String
argument_list|>
argument_list|>
name|inheritedMembership
init|=
operator|new
name|Iterator
argument_list|<
name|Iterator
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|groupPaths
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|next
parameter_list|()
block|{
name|String
name|groupPath
init|=
name|groupPaths
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|Iterators
operator|.
name|concat
argument_list|(
name|Iterators
operator|.
name|singletonIterator
argument_list|(
name|groupPath
argument_list|)
argument_list|,
name|inherited
argument_list|(
name|groupPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|private
name|Iterator
argument_list|<
name|String
argument_list|>
name|inherited
parameter_list|(
name|String
name|authorizablePath
parameter_list|)
block|{
name|Tree
name|group
init|=
name|getByPath
argument_list|(
name|authorizablePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|UserUtil
operator|.
name|isType
argument_list|(
name|group
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|)
condition|)
block|{
return|return
name|getMembership
argument_list|(
name|group
argument_list|,
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Iterators
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
block|}
block|}
decl_stmt|;
return|return
name|Iterators
operator|.
name|filter
argument_list|(
name|Iterators
operator|.
name|concat
argument_list|(
name|inheritedMembership
argument_list|)
argument_list|,
operator|new
name|ProcessedPathPredicate
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|ProcessedPathPredicate
implements|implements
name|Predicate
argument_list|<
name|String
argument_list|>
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|processed
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|String
name|path
parameter_list|)
block|{
return|return
name|processed
operator|.
name|add
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

