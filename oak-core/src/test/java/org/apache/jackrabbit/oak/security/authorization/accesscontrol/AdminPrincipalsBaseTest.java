begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicyIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|AdminPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|SystemPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AdminPrincipalsBaseTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|static
specifier|final
name|String
name|ADMINISTRATORS_PRINCIPAL_NAME
init|=
literal|"administrators"
decl_stmt|;
name|AccessControlList
name|acl
decl_stmt|;
name|Principal
name|administrativePrincipal
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|Tree
name|rootNode
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|rootNode
argument_list|,
literal|"testNode"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|administrativePrincipal
operator|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createGroup
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
name|ADMINISTRATORS_PRINCIPAL_NAME
argument_list|)
argument_list|)
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|AccessControlPolicyIterator
name|itr
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
literal|"/testNode"
argument_list|)
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
operator|&&
name|acl
operator|==
literal|null
condition|)
block|{
name|AccessControlPolicy
name|policy
init|=
name|itr
operator|.
name|nextAccessControlPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|policy
operator|instanceof
name|AccessControlList
condition|)
block|{
name|acl
operator|=
operator|(
name|AccessControlList
operator|)
name|policy
expr_stmt|;
block|}
block|}
if|if
condition|(
name|acl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"No applicable policy found."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|root
operator|.
name|getTree
argument_list|(
literal|"/testNode"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|Authorizable
name|gr
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|administrativePrincipal
argument_list|)
decl_stmt|;
if|if
condition|(
name|gr
operator|!=
literal|null
condition|)
block|{
name|gr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
specifier|abstract
name|void
name|assertResult
parameter_list|(
name|boolean
name|success
parameter_list|)
throws|throws
name|Exception
function_decl|;
specifier|abstract
name|void
name|assertException
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**      * Test if the ACL code properly deals the creation of ACEs for administrative      * principals which have full access anyway.      *      * @since Oak 1.1.1      * @see<a href="https://issues.apache.org/jira/browse/OAK-2158">OAK-2158</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testAdminPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|boolean
name|success
init|=
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
operator|new
name|AdminPrincipal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"admin"
return|;
block|}
block|}
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
decl_stmt|;
name|assertResult
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|assertException
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAdminAuthInfoPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
for|for
control|(
name|Principal
name|p
range|:
name|adminSession
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getPrincipals
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|AdminPrincipal
condition|)
block|{
name|boolean
name|success
init|=
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|p
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
decl_stmt|;
name|assertResult
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|assertException
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Test if the ACL code properly deals the creation of ACEs for system      * principals which have full access anyway.      *      * @since Oak 1.3.0      * @see<a href="https://issues.apache.org/jira/browse/OAK-2955">OAK-2955</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testSystemPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|boolean
name|success
init|=
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|SystemPrincipal
operator|.
name|INSTANCE
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
decl_stmt|;
name|assertResult
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|assertException
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Test if the ACL code properly deals the creation of ACEs for configured      * admin-principals, which have full access anyway.      *      * @since Oak 1.3.0      * @see<a href="https://issues.apache.org/jira/browse/OAK-2955">OAK-2955</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testConfiguredAdministrativePrincipal
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|boolean
name|success
init|=
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|administrativePrincipal
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
decl_stmt|;
name|assertResult
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|assertException
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

