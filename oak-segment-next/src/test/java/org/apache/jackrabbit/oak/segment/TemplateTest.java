begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
operator|.
name|createProperty
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|PropertyTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Template
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TemplateTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testHashCode
parameter_list|()
throws|throws
name|IOException
block|{
comment|// child node null vs ""
name|PropertyState
name|primary
init|=
name|createProperty
argument_list|(
literal|"primary"
argument_list|,
literal|"primary"
argument_list|)
decl_stmt|;
name|PropertyState
name|mixin
init|=
name|createProperty
argument_list|(
literal|"mixin"
argument_list|,
literal|"mixin"
argument_list|)
decl_stmt|;
name|PropertyTemplate
index|[]
name|properties
init|=
operator|new
name|PropertyTemplate
index|[
literal|0
index|]
decl_stmt|;
name|Template
name|t0
init|=
operator|new
name|Template
argument_list|(
name|primary
argument_list|,
name|mixin
argument_list|,
name|properties
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Template
name|t1
init|=
operator|new
name|Template
argument_list|(
name|primary
argument_list|,
name|mixin
argument_list|,
name|properties
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|t0
operator|.
name|hashCode
argument_list|()
argument_list|,
name|t1
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCode2
parameter_list|()
throws|throws
name|IOException
block|{
comment|// mixins null vs []
name|PropertyState
name|primary
init|=
name|createProperty
argument_list|(
literal|"primary"
argument_list|,
literal|"primary"
argument_list|)
decl_stmt|;
name|PropertyState
name|mixin
init|=
name|createProperty
argument_list|(
literal|"mixin"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
decl_stmt|;
name|PropertyTemplate
index|[]
name|properties
init|=
operator|new
name|PropertyTemplate
index|[
literal|0
index|]
decl_stmt|;
name|String
name|childNode
init|=
literal|"c"
decl_stmt|;
name|Template
name|t0
init|=
operator|new
name|Template
argument_list|(
name|primary
argument_list|,
literal|null
argument_list|,
name|properties
argument_list|,
name|childNode
argument_list|)
decl_stmt|;
name|Template
name|t1
init|=
operator|new
name|Template
argument_list|(
name|primary
argument_list|,
name|mixin
argument_list|,
name|properties
argument_list|,
name|childNode
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|t0
operator|.
name|hashCode
argument_list|()
argument_list|,
name|t1
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEquals
parameter_list|()
throws|throws
name|IOException
block|{
comment|// same properties, different order
name|PropertyState
name|primary
init|=
name|createProperty
argument_list|(
literal|"primary"
argument_list|,
literal|"primary"
argument_list|)
decl_stmt|;
name|PropertyState
name|mixin
init|=
name|createProperty
argument_list|(
literal|"mixin"
argument_list|,
literal|"mixin"
argument_list|)
decl_stmt|;
name|PropertyTemplate
name|p0
init|=
operator|new
name|PropertyTemplate
argument_list|(
name|createProperty
argument_list|(
literal|"p0"
argument_list|,
literal|"v0"
argument_list|)
argument_list|)
decl_stmt|;
name|PropertyTemplate
name|p1
init|=
operator|new
name|PropertyTemplate
argument_list|(
name|createProperty
argument_list|(
literal|"p1"
argument_list|,
literal|"v1"
argument_list|)
argument_list|)
decl_stmt|;
name|PropertyTemplate
index|[]
name|pt0
init|=
operator|new
name|PropertyTemplate
index|[]
block|{
name|p0
block|,
name|p1
block|}
decl_stmt|;
name|PropertyTemplate
index|[]
name|pt1
init|=
operator|new
name|PropertyTemplate
index|[]
block|{
name|p1
block|,
name|p0
block|}
decl_stmt|;
name|String
name|childNode
init|=
literal|"c"
decl_stmt|;
name|Template
name|t0
init|=
operator|new
name|Template
argument_list|(
name|primary
argument_list|,
name|mixin
argument_list|,
name|pt0
argument_list|,
name|childNode
argument_list|)
decl_stmt|;
name|Template
name|t1
init|=
operator|new
name|Template
argument_list|(
name|primary
argument_list|,
name|mixin
argument_list|,
name|pt1
argument_list|,
name|childNode
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|t0
argument_list|,
name|t1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

