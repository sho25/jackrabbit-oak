begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|indexversion
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|spi
operator|.
name|query
operator|.
name|IndexName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/*     Main operation of this class is to mark IndexName's with operations  */
end_comment

begin_class
specifier|public
class|class
name|IndexVersionOperation
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IndexVersionOperation
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|IndexName
name|indexName
decl_stmt|;
specifier|private
name|Operation
name|operation
decl_stmt|;
specifier|public
name|IndexVersionOperation
parameter_list|(
name|IndexName
name|indexName
parameter_list|)
block|{
name|this
operator|.
name|indexName
operator|=
name|indexName
expr_stmt|;
name|this
operator|.
name|operation
operator|=
name|Operation
operator|.
name|NOOP
expr_stmt|;
block|}
specifier|public
name|void
name|setOperation
parameter_list|(
name|Operation
name|operation
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
block|}
specifier|public
name|Operation
name|getOperation
parameter_list|()
block|{
return|return
name|this
operator|.
name|operation
return|;
block|}
specifier|public
name|IndexName
name|getIndexName
parameter_list|()
block|{
return|return
name|this
operator|.
name|indexName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|getIndexName
argument_list|()
operator|+
literal|" operation:"
operator|+
name|this
operator|.
name|getOperation
argument_list|()
return|;
block|}
comment|/**      * @param indexDefParentNode   NodeState of parent of baseIndex      * @param indexNameObjectList  This is a list of IndexName Objects with same baseIndexName on which operations will be applied.      * @param purgeThresholdMillis after which a fully functional index is eligible for purge operations      * @return This method returns an IndexVersionOperation list i.e indexNameObjectList marked with operations      */
specifier|public
specifier|static
name|List
argument_list|<
name|IndexVersionOperation
argument_list|>
name|generateIndexVersionOperationList
parameter_list|(
name|NodeState
name|indexDefParentNode
parameter_list|,
name|List
argument_list|<
name|IndexName
argument_list|>
name|indexNameObjectList
parameter_list|,
name|long
name|purgeThresholdMillis
parameter_list|)
block|{
name|int
name|activeProductVersion
init|=
operator|-
literal|1
decl_stmt|;
name|List
argument_list|<
name|IndexName
argument_list|>
name|reverseSortedIndexNameList
init|=
name|getReverseSortedIndexNameList
argument_list|(
name|indexNameObjectList
argument_list|)
decl_stmt|;
name|removeDisabledCustomIndexesFromList
argument_list|(
name|indexDefParentNode
argument_list|,
name|reverseSortedIndexNameList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexVersionOperation
argument_list|>
name|indexVersionOperationList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexName
name|indexNameObject
range|:
name|reverseSortedIndexNameList
control|)
block|{
name|NodeState
name|indexNode
init|=
name|indexDefParentNode
operator|.
name|getChildNode
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|indexNameObject
operator|.
name|getNodeName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|/*             All Indexes are by default NOOP until we get index which is active for more than threshold limit              */
if|if
condition|(
name|activeProductVersion
operator|==
operator|-
literal|1
condition|)
block|{
name|indexVersionOperationList
operator|.
name|add
argument_list|(
operator|new
name|IndexVersionOperation
argument_list|(
name|indexNameObject
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexNode
operator|.
name|hasChildNode
argument_list|(
name|IndexDefinition
operator|.
name|STATUS_NODE
argument_list|)
condition|)
block|{
if|if
condition|(
name|indexNode
operator|.
name|getChildNode
argument_list|(
name|IndexDefinition
operator|.
name|STATUS_NODE
argument_list|)
operator|.
name|getProperty
argument_list|(
name|IndexDefinition
operator|.
name|REINDEX_COMPLETION_TIMESTAMP
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|reindexCompletionTime
init|=
name|indexDefParentNode
operator|.
name|getChildNode
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|indexNameObject
operator|.
name|getNodeName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|IndexDefinition
operator|.
name|STATUS_NODE
argument_list|)
operator|.
name|getProperty
argument_list|(
name|IndexDefinition
operator|.
name|REINDEX_COMPLETION_TIMESTAMP
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|long
name|reindexCompletionTimeInMillis
init|=
name|PurgeOldVersionUtils
operator|.
name|getMillisFromString
argument_list|(
name|reindexCompletionTime
argument_list|)
decl_stmt|;
name|long
name|currentTimeInMillis
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentTimeInMillis
operator|-
name|reindexCompletionTimeInMillis
operator|>
name|purgeThresholdMillis
condition|)
block|{
name|activeProductVersion
operator|=
name|indexNameObject
operator|.
name|getProductVersion
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|IndexDefinition
operator|.
name|REINDEX_COMPLETION_TIMESTAMP
operator|+
literal|" property is not set for index "
operator|+
name|indexNameObject
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|/*             Once we found active index, we mark all its custom version with DELETE             and OOTB same product version index with DELETE_HIDDEN_AND_DISABLE              */
if|if
condition|(
name|indexNameObject
operator|.
name|getProductVersion
argument_list|()
operator|==
name|activeProductVersion
operator|&&
name|indexNameObject
operator|.
name|getCustomerVersion
argument_list|()
operator|==
literal|0
condition|)
block|{
name|IndexVersionOperation
name|indexVersionOperation
init|=
operator|new
name|IndexVersionOperation
argument_list|(
name|indexNameObject
argument_list|)
decl_stmt|;
name|indexVersionOperation
operator|.
name|setOperation
argument_list|(
name|Operation
operator|.
name|DELETE_HIDDEN_AND_DISABLE
argument_list|)
expr_stmt|;
name|indexVersionOperationList
operator|.
name|add
argument_list|(
name|indexVersionOperation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IndexVersionOperation
name|indexVersionOperation
init|=
operator|new
name|IndexVersionOperation
argument_list|(
name|indexNameObject
argument_list|)
decl_stmt|;
name|indexVersionOperation
operator|.
name|setOperation
argument_list|(
name|Operation
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|indexVersionOperationList
operator|.
name|add
argument_list|(
name|indexVersionOperation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|isValidIndexVersionOperationList
argument_list|(
name|indexVersionOperationList
argument_list|)
condition|)
block|{
name|indexVersionOperationList
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
return|return
name|indexVersionOperationList
return|;
block|}
comment|/*         returns IndexNameObjects in descending order of version i.e from newest version to oldest     */
specifier|private
specifier|static
name|List
argument_list|<
name|IndexName
argument_list|>
name|getReverseSortedIndexNameList
parameter_list|(
name|List
argument_list|<
name|IndexName
argument_list|>
name|indexNameObjectList
parameter_list|)
block|{
name|List
argument_list|<
name|IndexName
argument_list|>
name|reverseSortedIndexNameObjectList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|indexNameObjectList
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|reverseSortedIndexNameObjectList
argument_list|,
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|reverseSortedIndexNameObjectList
return|;
block|}
comment|/**      * @param indexVersionOperations      * @return true if the IndexVersionOperation list passes following criteria.      * For merging indexes we need baseIndex and latest custom index.      * So we first validate that if there are custom indexes than OOTB index with same product must be marked with DELETE_HIDDEN_AND_DISABLE      */
specifier|private
specifier|static
name|boolean
name|isValidIndexVersionOperationList
parameter_list|(
name|List
argument_list|<
name|IndexVersionOperation
argument_list|>
name|indexVersionOperations
parameter_list|)
block|{
name|boolean
name|isValid
init|=
literal|false
decl_stmt|;
name|IndexVersionOperation
name|lastNoopOperationIndexVersion
init|=
literal|null
decl_stmt|;
name|IndexVersionOperation
name|indexWithDeleteHiddenOp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|IndexVersionOperation
name|indexVersionOperation
range|:
name|indexVersionOperations
control|)
block|{
if|if
condition|(
name|indexVersionOperation
operator|.
name|getOperation
argument_list|()
operator|==
name|Operation
operator|.
name|NOOP
condition|)
block|{
name|lastNoopOperationIndexVersion
operator|=
name|indexVersionOperation
expr_stmt|;
block|}
if|if
condition|(
name|indexVersionOperation
operator|.
name|getOperation
argument_list|()
operator|==
name|Operation
operator|.
name|DELETE_HIDDEN_AND_DISABLE
condition|)
block|{
name|indexWithDeleteHiddenOp
operator|=
name|indexVersionOperation
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastNoopOperationIndexVersion
operator|.
name|getIndexName
argument_list|()
operator|.
name|getCustomerVersion
argument_list|()
operator|==
literal|0
condition|)
block|{
name|isValid
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastNoopOperationIndexVersion
operator|.
name|getIndexName
argument_list|()
operator|.
name|getCustomerVersion
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|indexWithDeleteHiddenOp
operator|!=
literal|null
operator|&&
name|lastNoopOperationIndexVersion
operator|.
name|getIndexName
argument_list|()
operator|.
name|getProductVersion
argument_list|()
operator|==
name|indexWithDeleteHiddenOp
operator|.
name|getIndexName
argument_list|()
operator|.
name|getProductVersion
argument_list|()
condition|)
block|{
name|isValid
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isValid
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"IndexVersionOperation List is not valid for index {}"
argument_list|,
name|lastNoopOperationIndexVersion
operator|.
name|getIndexName
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|isValid
return|;
block|}
specifier|private
specifier|static
name|void
name|removeDisabledCustomIndexesFromList
parameter_list|(
name|NodeState
name|indexDefParentNode
parameter_list|,
name|List
argument_list|<
name|IndexName
argument_list|>
name|indexNameObjectList
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexNameObjectList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|NodeState
name|indexNode
init|=
name|indexDefParentNode
operator|.
name|getChildNode
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|indexNameObjectList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getNodeName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexNode
operator|.
name|getProperty
argument_list|(
literal|"type"
argument_list|)
operator|!=
literal|null
operator|&&
literal|"disabled"
operator|.
name|equals
argument_list|(
name|indexNode
operator|.
name|getProperty
argument_list|(
literal|"type"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
condition|)
block|{
name|indexNameObjectList
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*         NOOP means : No operation to be performed index Node         DELETE_HIDDEN_AND_DISABLE: This operation means that we should disable this indexNode and delete all hidden nodes under it         DELETE: Delete this index altogether      */
enum|enum
name|Operation
block|{
name|NOOP
block|,
name|DELETE_HIDDEN_AND_DISABLE
block|,
name|DELETE
block|}
block|}
end_class

end_unit

