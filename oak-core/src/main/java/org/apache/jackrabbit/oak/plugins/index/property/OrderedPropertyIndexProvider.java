begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|QueryIndexProvider
operator|.
name|class
argument_list|)
specifier|public
class|class
name|OrderedPropertyIndexProvider
implements|implements
name|QueryIndexProvider
block|{
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_NO_INDEX_CACHE_TIMEOUT
init|=
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|30
argument_list|)
decl_stmt|;
comment|/**      * How often it should check for a new ordered property index.      */
specifier|private
specifier|static
name|long
name|noIndexCacheTimeout
init|=
name|DEFAULT_NO_INDEX_CACHE_TIMEOUT
decl_stmt|;
comment|/**      * The last time when it checked for the existence of an ordered property index AND could not find any.      */
specifier|private
specifier|volatile
name|long
name|lastNegativeIndexCheck
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|QueryIndex
argument_list|>
name|getQueryIndexes
parameter_list|(
name|NodeState
name|nodeState
parameter_list|)
block|{
return|return
name|ImmutableList
operator|.
expr|<
name|QueryIndex
operator|>
name|of
argument_list|(
operator|new
name|OrderedPropertyIndex
argument_list|(
name|this
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * @return<code>true</code> if there may be any ordered indexes below the root path      */
name|boolean
name|mayHaveRootIndexes
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastNegativeIndexCheck
operator|>
name|noIndexCacheTimeout
return|;
block|}
comment|/**      * Indicates whether or not there are ordered indexes below the root path      *      * @param hasRootIndexes      */
name|void
name|indicateRootIndexes
parameter_list|(
name|boolean
name|hasRootIndexes
parameter_list|)
block|{
name|lastNegativeIndexCheck
operator|=
name|hasRootIndexes
condition|?
literal|0
else|:
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setCacheTimeoutForTesting
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|noIndexCacheTimeout
operator|=
name|timeout
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|resetCacheTimeoutForTesting
parameter_list|()
block|{
name|noIndexCacheTimeout
operator|=
name|DEFAULT_NO_INDEX_CACHE_TIMEOUT
expr_stmt|;
block|}
block|}
end_class

end_unit

