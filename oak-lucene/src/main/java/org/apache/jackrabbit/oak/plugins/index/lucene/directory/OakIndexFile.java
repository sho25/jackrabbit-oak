begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_DATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARY
import|;
end_import

begin_interface
specifier|public
interface|interface
name|OakIndexFile
block|{
specifier|static
name|OakIndexFile
name|getOakIndexFile
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeBuilder
name|file
parameter_list|,
name|String
name|dirDetails
parameter_list|,
annotation|@
name|NotNull
name|BlobFactory
name|blobFactory
parameter_list|)
block|{
return|return
name|getOakIndexFile
argument_list|(
name|name
argument_list|,
name|file
argument_list|,
name|dirDetails
argument_list|,
name|blobFactory
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|static
name|OakIndexFile
name|getOakIndexFile
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeBuilder
name|file
parameter_list|,
name|String
name|dirDetails
parameter_list|,
annotation|@
name|NotNull
name|BlobFactory
name|blobFactory
parameter_list|,
name|boolean
name|streamingWriteEnabled
parameter_list|)
block|{
name|boolean
name|useStreaming
decl_stmt|;
name|PropertyState
name|property
init|=
name|file
operator|.
name|getProperty
argument_list|(
name|JCR_DATA
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
comment|//reading
name|useStreaming
operator|=
name|property
operator|.
name|getType
argument_list|()
operator|==
name|BINARY
expr_stmt|;
block|}
else|else
block|{
comment|//writing
name|useStreaming
operator|=
name|streamingWriteEnabled
expr_stmt|;
block|}
return|return
name|useStreaming
condition|?
operator|new
name|OakStreamingIndexFile
argument_list|(
name|name
argument_list|,
name|file
argument_list|,
name|dirDetails
argument_list|,
name|blobFactory
argument_list|)
else|:
operator|new
name|OakBufferedIndexFile
argument_list|(
name|name
argument_list|,
name|file
argument_list|,
name|dirDetails
argument_list|,
name|blobFactory
argument_list|)
return|;
block|}
comment|/**      * @return if the file implementation supports copying data from {@link DataInput} directly.      */
name|boolean
name|supportsCopyFromDataInput
parameter_list|()
function_decl|;
comment|/**      * @return name of the index being accessed      */
name|String
name|getName
parameter_list|()
function_decl|;
comment|/**      * @return length of index file      */
name|long
name|length
parameter_list|()
function_decl|;
name|boolean
name|isClosed
parameter_list|()
function_decl|;
name|void
name|close
parameter_list|()
function_decl|;
comment|/**      * @return current location of access      */
name|long
name|position
parameter_list|()
function_decl|;
comment|/**      * Seek current location of access to {@code pos}      * @param pos      * @throws IOException      */
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Duplicates this instance to be used by a different consumer/thread.      * State of the cloned instance is same as original. Once cloned, the states      * would change separately according to how are they accessed.      *      * @return cloned instance      */
name|OakIndexFile
name|clone
parameter_list|()
function_decl|;
comment|/**      * Read {@code len} number of bytes from underlying storage and copy them      * into byte array {@code b} starting at {@code offset}      * @param b byte array to copy contents read from storage      * @param offset index into {@code b} where the copy begins      * @param len numeber of bytes to be read from storage      * @throws IOException      */
name|void
name|readBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Writes {@code len} number of bytes from byte array {@code b}      * starting at {@code offset} into the underlying storage      * @param b byte array to copy contents into the storage      * @param offset index into {@code b} where the copy begins      * @param len numeber of bytes to be written to storage      * @throws IOException      */
name|void
name|writeBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Copy numBytes bytes from input to ourself. */
name|void
name|copyBytes
parameter_list|(
name|DataInput
name|input
parameter_list|,
name|long
name|numBytes
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Flushes the content into storage. Before calling this method, written      * content only exist in memory      * @throws IOException      */
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
end_interface

end_unit

