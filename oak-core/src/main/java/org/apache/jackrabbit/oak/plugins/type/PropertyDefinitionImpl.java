begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|type
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
operator|.
name|TYPENAME_UNDEFINED
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|QueryObjectModelConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NameMapper
import|;
end_import

begin_comment
comment|/**  *<pre>  * [nt:propertyDefinition]  *   ...  * - jcr:requiredType (STRING) protected mandatory  *< 'STRING', 'URI', 'BINARY', 'LONG', 'DOUBLE',  *     'DECIMAL', 'BOOLEAN', 'DATE', 'NAME', 'PATH',  *     'REFERENCE', 'WEAKREFERENCE', 'UNDEFINED'  * - jcr:valueConstraints (STRING) protected multiple  * - jcr:defaultValues (UNDEFINED) protected multiple  * - jcr:multiple (BOOLEAN) protected mandatory  * - jcr:availableQueryOperators (NAME) protected mandatory multiple  * - jcr:isFullTextSearchable (BOOLEAN) protected mandatory  * - jcr:isQueryOrderable (BOOLEAN) protected mandatory  *</pre>  */
end_comment

begin_class
class|class
name|PropertyDefinitionImpl
extends|extends
name|ItemDefinitionImpl
implements|implements
name|PropertyDefinition
block|{
specifier|private
specifier|static
name|String
index|[]
name|DEFAULT_QOPS
init|=
operator|new
name|String
index|[]
block|{
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_EQUAL_TO
block|,
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_NOT_EQUAL_TO
block|,
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_GREATER_THAN
block|,
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_GREATER_THAN_OR_EQUAL_TO
block|,
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_LESS_THAN
block|,
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_LESS_THAN_OR_EQUAL_TO
block|,
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_LIKE
block|}
decl_stmt|;
specifier|public
name|PropertyDefinitionImpl
parameter_list|(
name|NodeType
name|type
parameter_list|,
name|NameMapper
name|mapper
parameter_list|,
name|Tree
name|tree
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|mapper
argument_list|,
name|tree
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRequiredType
parameter_list|()
block|{
name|String
name|type
init|=
name|getString
argument_list|(
literal|"jcr:requiredType"
argument_list|,
name|TYPENAME_UNDEFINED
argument_list|)
decl_stmt|;
if|if
condition|(
name|PropertyType
operator|.
name|TYPENAME_BINARY
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|PropertyType
operator|.
name|BINARY
return|;
block|}
elseif|else
if|if
condition|(
name|PropertyType
operator|.
name|TYPENAME_BOOLEAN
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|PropertyType
operator|.
name|BOOLEAN
return|;
block|}
elseif|else
if|if
condition|(
name|PropertyType
operator|.
name|TYPENAME_DATE
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|PropertyType
operator|.
name|DATE
return|;
block|}
elseif|else
if|if
condition|(
name|PropertyType
operator|.
name|TYPENAME_DECIMAL
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|PropertyType
operator|.
name|DECIMAL
return|;
block|}
elseif|else
if|if
condition|(
name|PropertyType
operator|.
name|TYPENAME_DOUBLE
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|PropertyType
operator|.
name|DOUBLE
return|;
block|}
elseif|else
if|if
condition|(
name|PropertyType
operator|.
name|TYPENAME_LONG
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|PropertyType
operator|.
name|LONG
return|;
block|}
elseif|else
if|if
condition|(
name|PropertyType
operator|.
name|TYPENAME_NAME
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|PropertyType
operator|.
name|NAME
return|;
block|}
elseif|else
if|if
condition|(
name|PropertyType
operator|.
name|TYPENAME_PATH
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|PropertyType
operator|.
name|PATH
return|;
block|}
elseif|else
if|if
condition|(
name|PropertyType
operator|.
name|TYPENAME_REFERENCE
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|PropertyType
operator|.
name|REFERENCE
return|;
block|}
elseif|else
if|if
condition|(
name|PropertyType
operator|.
name|TYPENAME_STRING
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|PropertyType
operator|.
name|STRING
return|;
block|}
elseif|else
if|if
condition|(
name|PropertyType
operator|.
name|TYPENAME_URI
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|PropertyType
operator|.
name|URI
return|;
block|}
elseif|else
if|if
condition|(
name|PropertyType
operator|.
name|TYPENAME_WEAKREFERENCE
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|PropertyType
operator|.
name|WEAKREFERENCE
return|;
block|}
else|else
block|{
return|return
name|PropertyType
operator|.
name|UNDEFINED
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getValueConstraints
parameter_list|()
block|{
name|String
index|[]
name|constraints
init|=
name|getStrings
argument_list|(
literal|"jcr:valueConstraints"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|constraints
operator|!=
literal|null
condition|)
block|{
name|int
name|type
init|=
name|getRequiredType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|PropertyType
operator|.
name|NAME
operator|||
name|type
operator|==
name|PropertyType
operator|.
name|PATH
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|constraints
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// TODO: namespace mapping
block|}
block|}
block|}
return|return
name|constraints
return|;
block|}
annotation|@
name|Override
specifier|public
name|Value
index|[]
name|getDefaultValues
parameter_list|()
block|{
return|return
operator|new
name|Value
index|[
literal|0
index|]
return|;
comment|// TODO
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMultiple
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
literal|"jcr:multiple"
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getAvailableQueryOperators
parameter_list|()
block|{
return|return
name|getStrings
argument_list|(
literal|"jcr:availableQueryOperators"
argument_list|,
name|DEFAULT_QOPS
operator|.
name|clone
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFullTextSearchable
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
literal|"jcr:isFullTextSearchable"
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isQueryOrderable
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
literal|"jcr:isQueryOrderable"
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
end_class

end_unit

