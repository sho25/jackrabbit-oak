begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|command
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|BaseMongoMicroKernelTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|MongoAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Commit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|SimpleNodeScenario
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|util
operator|.
name|MongoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|util
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for {@code CommitCommandMongo}  */
end_comment

begin_class
specifier|public
class|class
name|CommitCommandTest
extends|extends
name|BaseMongoMicroKernelTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|initialCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|Commit
name|commit
init|=
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\" : { \"b\" : {} , \"c\" : {} }"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CommitCommand
name|command
init|=
operator|new
name|CommitCommand
argument_list|(
name|getNodeStore
argument_list|()
argument_list|,
name|commit
argument_list|)
decl_stmt|;
name|Long
name|revisionId
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|revisionId
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodesExist
argument_list|(
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%1$s\" : { \"b#%1$s\" : {} , \"c#%1$s\" : {} } } }"
argument_list|,
name|revisionId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertCommitExists
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertCommitContainsAffectedPaths
argument_list|(
name|MongoUtil
operator|.
name|fromMongoRepresentation
argument_list|(
name|commit
operator|.
name|getRevisionId
argument_list|()
argument_list|)
argument_list|,
literal|"/"
argument_list|,
literal|"/a"
argument_list|,
literal|"/a/b"
argument_list|,
literal|"/a/c"
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertHeadRevision
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNextRevision
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ontainsAllAffectedNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleNodeScenario
name|scenario
init|=
operator|new
name|SimpleNodeScenario
argument_list|(
name|mk
argument_list|)
decl_stmt|;
name|String
name|rev1
init|=
name|scenario
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|rev2
init|=
name|scenario
operator|.
name|update_A_and_add_D_and_E
argument_list|()
decl_stmt|;
name|MongoAssert
operator|.
name|assertCommitContainsAffectedPaths
argument_list|(
name|rev1
argument_list|,
literal|"/"
argument_list|,
literal|"/a"
argument_list|,
literal|"/a/b"
argument_list|,
literal|"/a/c"
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertCommitContainsAffectedPaths
argument_list|(
name|rev2
argument_list|,
literal|"/a"
argument_list|,
literal|"/a/b"
argument_list|,
literal|"/a/d"
argument_list|,
literal|"/a/b/e"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noOtherNodesTouched
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rev1
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\" : {} +\"b\" : {} +\"c\" : {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|rev2
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/a"
argument_list|,
literal|"+\"d\": {} +\"e\" : {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/"
argument_list|,
name|rev1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/a"
argument_list|,
name|rev1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/b"
argument_list|,
name|rev1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/c"
argument_list|,
name|rev1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/a/d"
argument_list|,
name|rev1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/a/e"
argument_list|,
name|rev1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/"
argument_list|,
name|rev2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/a"
argument_list|,
name|rev2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/b"
argument_list|,
name|rev2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/c"
argument_list|,
name|rev2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/a/d"
argument_list|,
name|rev2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/a/e"
argument_list|,
name|rev2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

