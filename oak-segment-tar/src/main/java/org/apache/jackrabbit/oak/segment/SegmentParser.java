begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|ListRecord
operator|.
name|LEVEL_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
operator|.
name|MEDIUM_LIMIT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
operator|.
name|RECORD_ID_BYTES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
operator|.
name|SMALL_LIMIT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentWriter
operator|.
name|BLOCK_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Template
operator|.
name|MANY_CHILD_NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Template
operator|.
name|ZERO_CHILD_NODES
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * {@code SegmentParser} serves as a base class for parsing segments.  *<p>  * This base class provides means for parsing segments into their various  * kinds of record. Descendants typically parametrise its behaviour by  * overriding the {@code on...()} methods as needed. By default those  * methods just initiate the traversal of the same named record.  *<p>  * A typical usage for e.g. printing out the sizes of all templates  * would look as follows:  *<pre>       new TestParser() {           protected void onTemplate(RecordId parentId, RecordId templateId) {               TemplateInfo templateInfo = parseTemplate(parentId, templateId);               System.out.println(templateInfo.size);           }      }.parseNode(null, nodeId);  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|SegmentParser
block|{
comment|/**      * Type of blobs (and strings)      */
specifier|public
enum|enum
name|BlobType
block|{
comment|/** Small:< {@link Segment#SMALL_LIMIT}. */
name|SMALL
block|,
comment|/** Medium:< {@link Segment#MEDIUM_LIMIT} */
name|MEDIUM
block|,
comment|/** Long:>=  {@link Segment#MEDIUM_LIMIT} */
name|LONG
block|,
comment|/** External blob (i.e. in {@link BlobStore}. */
name|EXTERNAL
block|}
comment|/**      * Result type of {@link #parseNode(RecordId)}.      */
specifier|public
specifier|static
class|class
name|NodeInfo
block|{
comment|/** Id of this record*/
specifier|public
specifier|final
name|RecordId
name|nodeId
decl_stmt|;
comment|/** Stable id of this node */
specifier|public
specifier|final
name|String
name|stableId
decl_stmt|;
comment|/** Number of child nodes */
specifier|public
specifier|final
name|int
name|nodeCount
decl_stmt|;
comment|/** Number of properties */
specifier|public
specifier|final
name|int
name|propertyCount
decl_stmt|;
comment|/** Size in bytes of this node */
specifier|public
specifier|final
name|int
name|size
decl_stmt|;
specifier|public
name|NodeInfo
parameter_list|(
name|RecordId
name|nodeId
parameter_list|,
name|String
name|stableId
parameter_list|,
name|int
name|nodeCount
parameter_list|,
name|int
name|propertyCount
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|stableId
operator|=
name|stableId
expr_stmt|;
name|this
operator|.
name|nodeCount
operator|=
name|nodeCount
expr_stmt|;
name|this
operator|.
name|propertyCount
operator|=
name|propertyCount
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
block|}
comment|/**      * Result type of {@link #parseTemplate(RecordId)}.      */
specifier|public
specifier|static
class|class
name|TemplateInfo
block|{
comment|/** Id of this record */
specifier|public
specifier|final
name|RecordId
name|templateId
decl_stmt|;
comment|/** Nodes of this type have a primary type */
specifier|public
specifier|final
name|boolean
name|hasPrimaryType
decl_stmt|;
comment|/** Nodes of this type have mixins */
specifier|public
specifier|final
name|boolean
name|hasMixinType
decl_stmt|;
comment|/** Nodes with this type have no child nodes */
specifier|public
specifier|final
name|boolean
name|zeroChildNodes
decl_stmt|;
comment|/** Nodes of this type have more than one child node */
specifier|public
specifier|final
name|boolean
name|manyChildNodes
decl_stmt|;
comment|/** Number of mixins */
specifier|public
specifier|final
name|int
name|mixinCount
decl_stmt|;
comment|/** Number of properties */
specifier|public
specifier|final
name|int
name|propertyCount
decl_stmt|;
comment|/** Size in bytes of this template */
specifier|public
specifier|final
name|int
name|size
decl_stmt|;
specifier|public
name|TemplateInfo
parameter_list|(
name|RecordId
name|templateId
parameter_list|,
name|boolean
name|hasPrimaryType
parameter_list|,
name|boolean
name|hasMixinType
parameter_list|,
name|boolean
name|zeroChildNodes
parameter_list|,
name|boolean
name|manyChildNodes
parameter_list|,
name|int
name|mixinCount
parameter_list|,
name|int
name|propertyCount
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|templateId
operator|=
name|templateId
expr_stmt|;
name|this
operator|.
name|hasPrimaryType
operator|=
name|hasPrimaryType
expr_stmt|;
name|this
operator|.
name|hasMixinType
operator|=
name|hasMixinType
expr_stmt|;
name|this
operator|.
name|zeroChildNodes
operator|=
name|zeroChildNodes
expr_stmt|;
name|this
operator|.
name|manyChildNodes
operator|=
name|manyChildNodes
expr_stmt|;
name|this
operator|.
name|mixinCount
operator|=
name|mixinCount
expr_stmt|;
name|this
operator|.
name|propertyCount
operator|=
name|propertyCount
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
block|}
comment|/**      * Result type of {@link #parseMap(RecordId, RecordId, MapRecord)}.      */
specifier|public
specifier|static
class|class
name|MapInfo
block|{
comment|/** Id of this record */
specifier|public
specifier|final
name|RecordId
name|mapId
decl_stmt|;
comment|/** Size in bytes of this map. {@code -1} if not known. */
specifier|public
specifier|final
name|int
name|size
decl_stmt|;
specifier|public
name|MapInfo
parameter_list|(
name|RecordId
name|mapId
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|mapId
operator|=
name|mapId
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
block|}
comment|/**      * Result type of {@link #parseProperty(RecordId, RecordId, PropertyTemplate)}.      */
specifier|public
specifier|static
class|class
name|PropertyInfo
block|{
comment|/** Id of this record */
specifier|public
specifier|final
name|RecordId
name|propertyId
decl_stmt|;
comment|/** Number of values in properties of this type. {@code -1} for single value properties. */
specifier|public
specifier|final
name|int
name|count
decl_stmt|;
comment|/** Size in bytes of this property */
specifier|public
specifier|final
name|int
name|size
decl_stmt|;
specifier|public
name|PropertyInfo
parameter_list|(
name|RecordId
name|propertyId
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|propertyId
operator|=
name|propertyId
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
block|}
comment|/** Result type of {@link #parseValue(RecordId, RecordId, Type)}. */
specifier|public
specifier|static
class|class
name|ValueInfo
block|{
comment|/** Id of this record */
specifier|public
specifier|final
name|RecordId
name|valueId
decl_stmt|;
comment|/** Type of this value */
specifier|public
specifier|final
name|Type
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
specifier|public
name|ValueInfo
parameter_list|(
name|RecordId
name|valueId
parameter_list|,
name|Type
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|this
operator|.
name|valueId
operator|=
name|valueId
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
block|}
comment|/** Return type of {@link #parseBlob(RecordId)}. */
specifier|public
specifier|static
class|class
name|BlobInfo
block|{
comment|/** Id of this record */
specifier|public
specifier|final
name|RecordId
name|blobId
decl_stmt|;
comment|/** Type of this blob */
specifier|public
specifier|final
name|BlobType
name|blobType
decl_stmt|;
comment|/** Size in bytes of this blob */
specifier|public
specifier|final
name|int
name|size
decl_stmt|;
specifier|public
name|BlobInfo
parameter_list|(
name|RecordId
name|blobId
parameter_list|,
name|BlobType
name|blobType
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|blobId
operator|=
name|blobId
expr_stmt|;
name|this
operator|.
name|blobType
operator|=
name|blobType
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
block|}
comment|/** Return type of {@link #parseList(RecordId, RecordId, int)} . */
specifier|public
specifier|static
class|class
name|ListInfo
block|{
comment|/** Id of this record */
specifier|public
specifier|final
name|RecordId
name|listId
decl_stmt|;
comment|/** Number of items in this list */
specifier|public
specifier|final
name|int
name|count
decl_stmt|;
comment|/** Size in bytes of this list */
specifier|public
specifier|final
name|int
name|size
decl_stmt|;
specifier|public
name|ListInfo
parameter_list|(
name|RecordId
name|listId
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|listId
operator|=
name|listId
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
block|}
comment|/** Return type of {@link #parseListBucket(RecordId, int, int, int)}. */
specifier|public
specifier|static
class|class
name|ListBucketInfo
block|{
comment|/** Id of this record */
specifier|public
specifier|final
name|RecordId
name|listId
decl_stmt|;
comment|/** {@code true} if this is a leaf bucket, {@code false} otherwise. */
specifier|public
specifier|final
name|boolean
name|leaf
decl_stmt|;
comment|/** Entries of this bucket */
specifier|public
specifier|final
name|List
argument_list|<
name|RecordId
argument_list|>
name|entries
decl_stmt|;
comment|/** Size in bytes of this bucket. */
specifier|public
specifier|final
name|int
name|size
decl_stmt|;
specifier|public
name|ListBucketInfo
parameter_list|(
name|RecordId
name|listId
parameter_list|,
name|boolean
name|leaf
parameter_list|,
name|List
argument_list|<
name|RecordId
argument_list|>
name|entries
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|listId
operator|=
name|listId
expr_stmt|;
name|this
operator|.
name|leaf
operator|=
name|leaf
expr_stmt|;
name|this
operator|.
name|entries
operator|=
name|entries
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
block|}
annotation|@
name|Nonnull
specifier|private
specifier|final
name|SegmentStore
name|store
decl_stmt|;
specifier|public
name|SegmentParser
parameter_list|(
annotation|@
name|Nonnull
name|SegmentStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|checkNotNull
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
comment|/**      * Callback called by {@link #parseNode(RecordId)} upon encountering      * a child node.      *      * @param parentId  id of the parent node      * @param nodeId    if of the child node      */
specifier|protected
name|void
name|onNode
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|nodeId
parameter_list|)
block|{
name|parseNode
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
comment|/**      * Callback called by {@link #parseNode(RecordId)} upon encountering      * a template      *      * @param parentId   id of the node being parsed      * @param templateId id of the template      */
specifier|protected
name|void
name|onTemplate
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|templateId
parameter_list|)
block|{
name|parseTemplate
argument_list|(
name|templateId
argument_list|)
expr_stmt|;
block|}
comment|/**      * Callback called by {@link #parseNode(RecordId)},      * {@link #parseMapDiff(RecordId, MapRecord)} and      * {@link #parseMapBranch(RecordId, MapRecord)} upon encountering a map.      *      * @param parentId  the id of the parent of the map      * @param mapId     the id of the map      * @param map       the map      */
specifier|protected
name|void
name|onMap
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
name|parseMap
argument_list|(
name|parentId
argument_list|,
name|mapId
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
comment|/**      * Callback called by {@link #parseMap(RecordId, RecordId, MapRecord)} upon encountering      * a map diff.      *      * @param parentId  the id of the parent map      * @param mapId     the id of the map      * @param map       the map      */
specifier|protected
name|void
name|onMapDiff
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
name|parseMapDiff
argument_list|(
name|mapId
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
comment|/**      * Callback called by {@link #parseMap(RecordId, RecordId, MapRecord)} upon encountering      * a map leaf.      *      * @param parentId  the id of the parent map      * @param mapId     the id of the map      * @param map       the map      */
specifier|protected
name|void
name|onMapLeaf
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
name|parseMapLeaf
argument_list|(
name|mapId
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
comment|/**      * Callback called by {@link #parseMap(RecordId, RecordId, MapRecord)} upon encountering      * a map branch.      *      * @param parentId  the id of the parent map      * @param mapId     the id of the map      * @param map       the map      */
specifier|protected
name|void
name|onMapBranch
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
name|parseMapBranch
argument_list|(
name|mapId
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
comment|/**      * Callback called by {@link #parseNode(RecordId)} upon encountering      * a property.      *      * @param parentId    the id of the parent node      * @param propertyId  the id of the property      * @param template    the property template      */
specifier|protected
name|void
name|onProperty
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|propertyId
parameter_list|,
name|PropertyTemplate
name|template
parameter_list|)
block|{
name|parseProperty
argument_list|(
name|parentId
argument_list|,
name|propertyId
argument_list|,
name|template
argument_list|)
expr_stmt|;
block|}
comment|/**      * Callback called by {@link #parseProperty(RecordId, RecordId, PropertyTemplate)} upon      * encountering a value.      *      * @param parentId   the id the value's parent      * @param valueId    the id of the value      * @param type       the type of the value      */
specifier|protected
name|void
name|onValue
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|valueId
parameter_list|,
name|Type
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|parseValue
argument_list|(
name|parentId
argument_list|,
name|valueId
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
comment|/**      * Callback called by {@link #parseValue(RecordId, RecordId, Type)} upon encountering a blob.      *      * @param parentId  the id of the blob's parent      * @param blobId    the id of the blob      */
specifier|protected
name|void
name|onBlob
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|blobId
parameter_list|)
block|{
name|parseBlob
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
block|}
comment|/**      * Callback called by {@link #parseTemplate(RecordId)},      * {@link #parseMapLeaf(RecordId, MapRecord)} and      * {@link #parseValue(RecordId, RecordId, Type)} upon encountering a string.      *      * @param parentId  the id of the string's parent      * @param stringId  the id of the string      */
specifier|protected
name|void
name|onString
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|stringId
parameter_list|)
block|{
name|parseString
argument_list|(
name|stringId
argument_list|)
expr_stmt|;
block|}
comment|/**      * Callback called by {@link #parseNode(RecordId)},      * {@link #parseProperty(RecordId, RecordId, PropertyTemplate)},      * {@link #parseTemplate(RecordId)},      * {@link #parseBlob(RecordId)} and      * {@link #parseString(RecordId)} upon encountering a list.      *      * @param parentId  the id of the list's parent      * @param listId    the id of the list      * @param count     the number of elements in the list      */
specifier|protected
name|void
name|onList
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|listId
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|parseList
argument_list|(
name|parentId
argument_list|,
name|listId
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**      * Callback called by {@link #parseList(RecordId, RecordId, int)} and      * {@link #parseListBucket(RecordId, int, int, int)} upon encountering a list      * bucket.      *      * @param parentId    the id of the list's parent      * @param listId      the id of the list      * @param index       the index into the bucket      * @param count       the number of items in the bucket      * @param capacity    the capacity of the bucket      */
specifier|protected
name|void
name|onListBucket
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|listId
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|capacity
parameter_list|)
block|{
name|parseListBucket
argument_list|(
name|listId
argument_list|,
name|index
argument_list|,
name|count
argument_list|,
name|capacity
argument_list|)
expr_stmt|;
block|}
comment|/**      * Parse a node record      * @param nodeId      * @return      */
specifier|public
name|NodeInfo
name|parseNode
parameter_list|(
name|RecordId
name|nodeId
parameter_list|)
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
name|int
name|nodeCount
init|=
literal|0
decl_stmt|;
name|int
name|propertyCount
init|=
literal|0
decl_stmt|;
name|Segment
name|segment
init|=
name|nodeId
operator|.
name|getSegment
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|nodeId
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|String
name|stableId
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|store
argument_list|,
name|nodeId
argument_list|)
operator|.
name|getStableId
argument_list|()
decl_stmt|;
name|offset
operator|+=
name|RECORD_ID_BYTES
expr_stmt|;
name|RecordId
name|templateId
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|onTemplate
argument_list|(
name|nodeId
argument_list|,
name|templateId
argument_list|)
expr_stmt|;
name|Template
name|template
init|=
name|store
operator|.
name|getReader
argument_list|()
operator|.
name|readTemplate
argument_list|(
name|store
argument_list|,
name|templateId
argument_list|)
decl_stmt|;
comment|// Recurses into child nodes in this segment
if|if
condition|(
name|template
operator|.
name|getChildName
argument_list|()
operator|==
name|MANY_CHILD_NODES
condition|)
block|{
name|RecordId
name|childMapId
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|offset
operator|+
name|RECORD_ID_BYTES
argument_list|)
decl_stmt|;
name|MapRecord
name|childMap
init|=
name|store
operator|.
name|getReader
argument_list|()
operator|.
name|readMap
argument_list|(
name|store
argument_list|,
name|childMapId
argument_list|)
decl_stmt|;
name|onMap
argument_list|(
name|nodeId
argument_list|,
name|childMapId
argument_list|,
name|childMap
argument_list|)
expr_stmt|;
for|for
control|(
name|ChildNodeEntry
name|childNodeEntry
range|:
name|childMap
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|NodeState
name|child
init|=
name|childNodeEntry
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|SegmentNodeState
condition|)
block|{
name|RecordId
name|childId
init|=
operator|(
operator|(
name|Record
operator|)
name|child
operator|)
operator|.
name|getRecordId
argument_list|()
decl_stmt|;
name|onNode
argument_list|(
name|nodeId
argument_list|,
name|childId
argument_list|)
expr_stmt|;
name|nodeCount
operator|++
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|template
operator|.
name|getChildName
argument_list|()
operator|!=
name|ZERO_CHILD_NODES
condition|)
block|{
name|RecordId
name|childId
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|offset
operator|+
name|RECORD_ID_BYTES
argument_list|)
decl_stmt|;
name|onNode
argument_list|(
name|nodeId
argument_list|,
name|childId
argument_list|)
expr_stmt|;
name|nodeCount
operator|++
expr_stmt|;
block|}
name|int
name|ids
init|=
name|template
operator|.
name|getChildName
argument_list|()
operator|==
name|ZERO_CHILD_NODES
condition|?
literal|1
else|:
literal|2
decl_stmt|;
name|size
operator|+=
name|ids
operator|*
name|RECORD_ID_BYTES
expr_stmt|;
comment|// Recurse into properties
name|PropertyTemplate
index|[]
name|propertyTemplates
init|=
name|template
operator|.
name|getPropertyTemplates
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyTemplates
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|size
operator|+=
name|RECORD_ID_BYTES
expr_stmt|;
name|RecordId
name|id
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|offset
operator|+
name|ids
operator|*
name|RECORD_ID_BYTES
argument_list|)
decl_stmt|;
name|ListRecord
name|pIds
init|=
operator|new
name|ListRecord
argument_list|(
name|id
argument_list|,
name|propertyTemplates
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propertyTemplates
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|RecordId
name|propertyId
init|=
name|pIds
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|onProperty
argument_list|(
name|nodeId
argument_list|,
name|propertyId
argument_list|,
name|propertyTemplates
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|propertyCount
operator|++
expr_stmt|;
block|}
name|onList
argument_list|(
name|nodeId
argument_list|,
name|id
argument_list|,
name|propertyTemplates
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|NodeInfo
argument_list|(
name|nodeId
argument_list|,
name|stableId
argument_list|,
name|nodeCount
argument_list|,
name|propertyCount
argument_list|,
name|size
argument_list|)
return|;
block|}
comment|/**      * Parse a template record      * @param templateId      * @return      */
specifier|public
name|TemplateInfo
name|parseTemplate
parameter_list|(
name|RecordId
name|templateId
parameter_list|)
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
name|Segment
name|segment
init|=
name|templateId
operator|.
name|getSegment
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|templateId
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|int
name|head
init|=
name|segment
operator|.
name|readInt
argument_list|(
name|offset
operator|+
name|size
argument_list|)
decl_stmt|;
name|boolean
name|hasPrimaryType
init|=
operator|(
name|head
operator|&
operator|(
literal|1
operator|<<
literal|31
operator|)
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|hasMixinTypes
init|=
operator|(
name|head
operator|&
operator|(
literal|1
operator|<<
literal|30
operator|)
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|zeroChildNodes
init|=
operator|(
name|head
operator|&
operator|(
literal|1
operator|<<
literal|29
operator|)
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|manyChildNodes
init|=
operator|(
name|head
operator|&
operator|(
literal|1
operator|<<
literal|28
operator|)
operator|)
operator|!=
literal|0
decl_stmt|;
name|int
name|mixinCount
init|=
operator|(
name|head
operator|>>
literal|18
operator|)
operator|&
operator|(
operator|(
literal|1
operator|<<
literal|10
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
name|int
name|propertyCount
init|=
name|head
operator|&
operator|(
operator|(
literal|1
operator|<<
literal|18
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
name|size
operator|+=
literal|4
expr_stmt|;
if|if
condition|(
name|hasPrimaryType
condition|)
block|{
name|RecordId
name|primaryId
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|offset
operator|+
name|size
argument_list|)
decl_stmt|;
name|onString
argument_list|(
name|templateId
argument_list|,
name|primaryId
argument_list|)
expr_stmt|;
name|size
operator|+=
name|RECORD_ID_BYTES
expr_stmt|;
block|}
if|if
condition|(
name|hasMixinTypes
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mixinCount
condition|;
name|i
operator|++
control|)
block|{
name|RecordId
name|mixinId
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|offset
operator|+
name|size
argument_list|)
decl_stmt|;
name|onString
argument_list|(
name|templateId
argument_list|,
name|mixinId
argument_list|)
expr_stmt|;
name|size
operator|+=
name|RECORD_ID_BYTES
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|zeroChildNodes
operator|&&
operator|!
name|manyChildNodes
condition|)
block|{
name|RecordId
name|childNameId
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|offset
operator|+
name|size
argument_list|)
decl_stmt|;
name|onString
argument_list|(
name|templateId
argument_list|,
name|childNameId
argument_list|)
expr_stmt|;
name|size
operator|+=
name|RECORD_ID_BYTES
expr_stmt|;
block|}
if|if
condition|(
name|propertyCount
operator|>
literal|0
condition|)
block|{
name|RecordId
name|listId
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|offset
operator|+
name|size
argument_list|)
decl_stmt|;
name|size
operator|+=
name|RECORD_ID_BYTES
expr_stmt|;
name|ListRecord
name|propertyNames
init|=
operator|new
name|ListRecord
argument_list|(
name|listId
argument_list|,
name|propertyCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propertyCount
condition|;
name|i
operator|++
control|)
block|{
name|RecordId
name|propertyNameId
init|=
name|propertyNames
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|size
operator|++
expr_stmt|;
comment|// type
name|onString
argument_list|(
name|templateId
argument_list|,
name|propertyNameId
argument_list|)
expr_stmt|;
block|}
name|onList
argument_list|(
name|templateId
argument_list|,
name|listId
argument_list|,
name|propertyCount
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TemplateInfo
argument_list|(
name|templateId
argument_list|,
name|hasPrimaryType
argument_list|,
name|hasMixinTypes
argument_list|,
name|zeroChildNodes
argument_list|,
name|manyChildNodes
argument_list|,
name|mixinCount
argument_list|,
name|propertyCount
argument_list|,
name|size
argument_list|)
return|;
block|}
comment|/**      * Parse a map record      * @param parentId  parent of this map or {@code null} if none      * @param mapId      * @param map      * @return      */
specifier|public
name|MapInfo
name|parseMap
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
if|if
condition|(
name|map
operator|.
name|isDiff
argument_list|()
condition|)
block|{
name|onMapDiff
argument_list|(
name|parentId
argument_list|,
name|mapId
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|map
operator|.
name|isLeaf
argument_list|()
condition|)
block|{
name|onMapLeaf
argument_list|(
name|parentId
argument_list|,
name|mapId
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|onMapBranch
argument_list|(
name|parentId
argument_list|,
name|mapId
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MapInfo
argument_list|(
name|mapId
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * Parse a map diff record      * @param mapId      * @param map      * @return      */
specifier|public
name|MapInfo
name|parseMapDiff
parameter_list|(
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
name|int
name|size
init|=
literal|4
decl_stmt|;
comment|// -1
name|size
operator|+=
literal|4
expr_stmt|;
comment|// hash of changed key
name|size
operator|+=
name|RECORD_ID_BYTES
expr_stmt|;
comment|// key
name|size
operator|+=
name|RECORD_ID_BYTES
expr_stmt|;
comment|// value
name|size
operator|+=
name|RECORD_ID_BYTES
expr_stmt|;
comment|// base
name|RecordId
name|baseId
init|=
name|mapId
operator|.
name|getSegment
argument_list|()
operator|.
name|readRecordId
argument_list|(
name|mapId
operator|.
name|getOffset
argument_list|()
operator|+
literal|8
operator|+
literal|2
operator|*
name|RECORD_ID_BYTES
argument_list|)
decl_stmt|;
name|onMap
argument_list|(
name|mapId
argument_list|,
name|baseId
argument_list|,
operator|new
name|MapRecord
argument_list|(
name|store
argument_list|,
name|baseId
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|MapInfo
argument_list|(
name|mapId
argument_list|,
name|size
argument_list|)
return|;
block|}
comment|/**      * Parse a map leaf record      * @param mapId      * @param map      * @return      */
specifier|public
name|MapInfo
name|parseMapLeaf
parameter_list|(
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
name|int
name|size
init|=
literal|4
decl_stmt|;
comment|// size
name|size
operator|+=
name|map
operator|.
name|size
argument_list|()
operator|*
literal|4
expr_stmt|;
comment|// key hashes
for|for
control|(
name|MapEntry
name|entry
range|:
name|map
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|size
operator|+=
literal|2
operator|*
name|RECORD_ID_BYTES
expr_stmt|;
comment|// key value pairs
name|onString
argument_list|(
name|mapId
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MapInfo
argument_list|(
name|mapId
argument_list|,
name|size
argument_list|)
return|;
block|}
comment|/**      * Parse a map branch record      * @param mapId      * @param map      * @return      */
specifier|public
name|MapInfo
name|parseMapBranch
parameter_list|(
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
name|int
name|size
init|=
literal|4
decl_stmt|;
comment|// level/size
name|size
operator|+=
literal|4
expr_stmt|;
comment|// bitmap
for|for
control|(
name|MapRecord
name|bucket
range|:
name|map
operator|.
name|getBuckets
argument_list|()
control|)
block|{
if|if
condition|(
name|bucket
operator|!=
literal|null
condition|)
block|{
name|size
operator|+=
name|RECORD_ID_BYTES
expr_stmt|;
name|onMap
argument_list|(
name|map
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|bucket
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|MapInfo
argument_list|(
name|mapId
argument_list|,
name|size
argument_list|)
return|;
block|}
comment|/**      * Parse a property      * @param parentId      * @param propertyId      * @param template      * @return      */
specifier|public
name|PropertyInfo
name|parseProperty
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|propertyId
parameter_list|,
name|PropertyTemplate
name|template
parameter_list|)
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
name|int
name|count
init|=
operator|-
literal|1
decl_stmt|;
comment|// -1 -> single valued property
name|Segment
name|segment
init|=
name|propertyId
operator|.
name|getSegment
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|propertyId
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|Type
argument_list|<
name|?
argument_list|>
name|type
init|=
name|template
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|count
operator|=
name|segment
operator|.
name|readInt
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|size
operator|+=
literal|4
expr_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|RecordId
name|listId
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|offset
operator|+
literal|4
argument_list|)
decl_stmt|;
name|size
operator|+=
name|RECORD_ID_BYTES
expr_stmt|;
for|for
control|(
name|RecordId
name|valueId
range|:
operator|new
name|ListRecord
argument_list|(
name|listId
argument_list|,
name|count
argument_list|)
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|onValue
argument_list|(
name|propertyId
argument_list|,
name|valueId
argument_list|,
name|type
operator|.
name|getBaseType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|onList
argument_list|(
name|propertyId
argument_list|,
name|listId
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|onValue
argument_list|(
name|parentId
argument_list|,
name|propertyId
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PropertyInfo
argument_list|(
name|propertyId
argument_list|,
name|count
argument_list|,
name|size
argument_list|)
return|;
block|}
comment|/**      * Parse a value record      * @param parentId  parent of the value record, {@code null} if none      * @param valueId      * @param type      * @return      */
specifier|public
name|ValueInfo
name|parseValue
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|valueId
parameter_list|,
name|Type
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|checkArgument
argument_list|(
operator|!
name|type
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|BINARY
condition|)
block|{
name|onBlob
argument_list|(
name|parentId
argument_list|,
name|valueId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|onString
argument_list|(
name|parentId
argument_list|,
name|valueId
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ValueInfo
argument_list|(
name|valueId
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**      * Parse a blob record      * @param blobId      * @return      */
specifier|public
name|BlobInfo
name|parseBlob
parameter_list|(
name|RecordId
name|blobId
parameter_list|)
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
name|BlobType
name|blobType
decl_stmt|;
name|Segment
name|segment
init|=
name|blobId
operator|.
name|getSegment
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|blobId
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|byte
name|head
init|=
name|segment
operator|.
name|readByte
argument_list|(
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|head
operator|&
literal|0x80
operator|)
operator|==
literal|0x00
condition|)
block|{
comment|// 0xxx xxxx: small value
name|size
operator|+=
operator|(
literal|1
operator|+
name|head
operator|)
expr_stmt|;
name|blobType
operator|=
name|BlobType
operator|.
name|SMALL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|head
operator|&
literal|0xc0
operator|)
operator|==
literal|0x80
condition|)
block|{
comment|// 10xx xxxx: medium value
name|int
name|length
init|=
operator|(
name|segment
operator|.
name|readShort
argument_list|(
name|offset
argument_list|)
operator|&
literal|0x3fff
operator|)
operator|+
name|SMALL_LIMIT
decl_stmt|;
name|size
operator|+=
operator|(
literal|2
operator|+
name|length
operator|)
expr_stmt|;
name|blobType
operator|=
name|BlobType
operator|.
name|MEDIUM
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|head
operator|&
literal|0xe0
operator|)
operator|==
literal|0xc0
condition|)
block|{
comment|// 110x xxxx: long value
name|long
name|length
init|=
operator|(
name|segment
operator|.
name|readLong
argument_list|(
name|offset
argument_list|)
operator|&
literal|0x1fffffffffffffffL
operator|)
operator|+
name|MEDIUM_LIMIT
decl_stmt|;
name|int
name|count
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|length
operator|+
name|BLOCK_SIZE
operator|-
literal|1
operator|)
operator|/
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|RecordId
name|listId
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|offset
operator|+
literal|8
argument_list|)
decl_stmt|;
name|onList
argument_list|(
name|blobId
argument_list|,
name|listId
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|size
operator|+=
operator|(
literal|8
operator|+
name|RECORD_ID_BYTES
operator|+
name|length
operator|)
expr_stmt|;
name|blobType
operator|=
name|BlobType
operator|.
name|LONG
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|head
operator|&
literal|0xf0
operator|)
operator|==
literal|0xe0
condition|)
block|{
comment|// 1110 xxxx: external value
name|int
name|length
init|=
operator|(
name|head
operator|&
literal|0x0f
operator|)
operator|<<
literal|8
operator||
operator|(
name|segment
operator|.
name|readByte
argument_list|(
name|offset
operator|+
literal|1
argument_list|)
operator|&
literal|0xff
operator|)
decl_stmt|;
name|size
operator|+=
operator|(
literal|2
operator|+
name|length
operator|)
expr_stmt|;
name|blobType
operator|=
name|BlobType
operator|.
name|EXTERNAL
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected value record type: %02x"
argument_list|,
name|head
operator|&
literal|0xff
argument_list|)
argument_list|)
throw|;
block|}
return|return
operator|new
name|BlobInfo
argument_list|(
name|blobId
argument_list|,
name|blobType
argument_list|,
name|size
argument_list|)
return|;
block|}
comment|/**      * Parse a string record      * @param stringId      * @return      */
specifier|public
name|BlobInfo
name|parseString
parameter_list|(
name|RecordId
name|stringId
parameter_list|)
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
name|BlobType
name|blobType
decl_stmt|;
name|Segment
name|segment
init|=
name|stringId
operator|.
name|getSegment
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|stringId
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|long
name|length
init|=
name|segment
operator|.
name|readLength
argument_list|(
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|<
name|Segment
operator|.
name|SMALL_LIMIT
condition|)
block|{
name|size
operator|+=
operator|(
literal|1
operator|+
name|length
operator|)
expr_stmt|;
name|blobType
operator|=
name|BlobType
operator|.
name|SMALL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|length
operator|<
name|Segment
operator|.
name|MEDIUM_LIMIT
condition|)
block|{
name|size
operator|+=
operator|(
literal|2
operator|+
name|length
operator|)
expr_stmt|;
name|blobType
operator|=
name|BlobType
operator|.
name|MEDIUM
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|length
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|int
name|count
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|length
operator|+
name|BLOCK_SIZE
operator|-
literal|1
operator|)
operator|/
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|RecordId
name|listId
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|offset
operator|+
literal|8
argument_list|)
decl_stmt|;
name|onList
argument_list|(
name|stringId
argument_list|,
name|listId
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|size
operator|+=
operator|(
literal|8
operator|+
name|RECORD_ID_BYTES
operator|+
name|length
operator|)
expr_stmt|;
name|blobType
operator|=
name|BlobType
operator|.
name|LONG
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"String is too long: "
operator|+
name|length
argument_list|)
throw|;
block|}
return|return
operator|new
name|BlobInfo
argument_list|(
name|stringId
argument_list|,
name|blobType
argument_list|,
name|size
argument_list|)
return|;
block|}
comment|/**      * Parse a list record      * @param parentId  parent of the list, {@code null} if none      * @param listId      * @param count      * @return      */
specifier|public
name|ListInfo
name|parseList
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|listId
parameter_list|,
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|count
operator|!=
literal|0
condition|)
block|{
name|onListBucket
argument_list|(
name|parentId
argument_list|,
name|listId
argument_list|,
literal|0
argument_list|,
name|count
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ListInfo
argument_list|(
name|listId
argument_list|,
name|count
argument_list|,
name|noOfListSlots
argument_list|(
name|count
argument_list|)
operator|*
name|RECORD_ID_BYTES
argument_list|)
return|;
block|}
comment|/**      * Parse item of list buckets      * @param listId      * @param index      index of the first item to parse      * @param count      number of items to parse      * @param capacity   total number of items      * @return      */
specifier|public
name|ListBucketInfo
name|parseListBucket
parameter_list|(
name|RecordId
name|listId
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|capacity
parameter_list|)
block|{
name|Segment
name|segment
init|=
name|listId
operator|.
name|getSegment
argument_list|()
decl_stmt|;
name|int
name|bucketSize
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|bucketSize
operator|*
name|LEVEL_SIZE
operator|<
name|capacity
condition|)
block|{
name|bucketSize
operator|*=
name|LEVEL_SIZE
expr_stmt|;
block|}
name|List
argument_list|<
name|RecordId
argument_list|>
name|entries
decl_stmt|;
if|if
condition|(
name|capacity
operator|==
literal|1
condition|)
block|{
name|entries
operator|=
name|singletonList
argument_list|(
name|listId
argument_list|)
expr_stmt|;
return|return
operator|new
name|ListBucketInfo
argument_list|(
name|listId
argument_list|,
literal|true
argument_list|,
name|entries
argument_list|,
name|RECORD_ID_BYTES
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|bucketSize
operator|==
literal|1
condition|)
block|{
name|entries
operator|=
name|newArrayListWithCapacity
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
name|listId
argument_list|,
name|index
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ListBucketInfo
argument_list|(
name|listId
argument_list|,
literal|true
argument_list|,
name|entries
argument_list|,
name|count
operator|*
name|RECORD_ID_BYTES
argument_list|)
return|;
block|}
else|else
block|{
name|entries
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
while|while
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|int
name|bucketIndex
init|=
name|index
operator|/
name|bucketSize
decl_stmt|;
name|int
name|bucketOffset
init|=
name|index
operator|%
name|bucketSize
decl_stmt|;
name|RecordId
name|bucketId
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|getOffset
argument_list|(
name|listId
argument_list|,
name|bucketIndex
argument_list|)
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|bucketId
argument_list|)
expr_stmt|;
name|int
name|c
init|=
name|Math
operator|.
name|min
argument_list|(
name|bucketSize
argument_list|,
name|capacity
operator|-
name|bucketIndex
operator|*
name|bucketSize
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|Math
operator|.
name|min
argument_list|(
name|c
operator|-
name|bucketOffset
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|onListBucket
argument_list|(
name|listId
argument_list|,
name|bucketId
argument_list|,
name|bucketOffset
argument_list|,
name|n
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|index
operator|+=
name|n
expr_stmt|;
name|count
operator|-=
name|n
expr_stmt|;
block|}
return|return
operator|new
name|ListBucketInfo
argument_list|(
name|listId
argument_list|,
literal|false
argument_list|,
name|entries
argument_list|,
name|entries
operator|.
name|size
argument_list|()
operator|*
name|RECORD_ID_BYTES
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|int
name|getOffset
parameter_list|(
name|RecordId
name|id
parameter_list|,
name|int
name|ids
parameter_list|)
block|{
return|return
name|id
operator|.
name|getOffset
argument_list|()
operator|+
name|ids
operator|*
name|Segment
operator|.
name|RECORD_ID_BYTES
return|;
block|}
specifier|private
specifier|static
name|int
name|noOfListSlots
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|<=
name|LEVEL_SIZE
condition|)
block|{
return|return
name|size
return|;
block|}
else|else
block|{
name|int
name|fullBuckets
init|=
name|size
operator|/
name|LEVEL_SIZE
decl_stmt|;
if|if
condition|(
name|size
operator|%
name|LEVEL_SIZE
operator|>
literal|1
condition|)
block|{
return|return
name|size
operator|+
name|noOfListSlots
argument_list|(
name|fullBuckets
operator|+
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|size
operator|+
name|noOfListSlots
argument_list|(
name|fullBuckets
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

