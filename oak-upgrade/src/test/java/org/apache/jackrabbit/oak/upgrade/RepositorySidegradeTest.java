begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_FROZENMIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_FROZENPRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_FROZENUUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinitionTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionHistory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitWorkspace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|RepositorySidegradeTest
block|{
specifier|private
specifier|static
specifier|final
name|Calendar
name|DATE
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|BINARY
init|=
operator|new
name|byte
index|[
literal|64
operator|*
literal|1024
index|]
decl_stmt|;
static|static
block|{
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|BINARY
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|Credentials
name|CREDENTIALS
init|=
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|NodeStore
name|targetNodeStore
decl_stmt|;
specifier|private
name|Repository
name|targetRepository
decl_stmt|;
annotation|@
name|Before
specifier|public
specifier|synchronized
name|void
name|upgradeRepository
parameter_list|()
throws|throws
name|Exception
block|{
name|targetNodeStore
operator|=
operator|new
name|SegmentNodeStore
argument_list|()
expr_stmt|;
name|targetRepository
operator|=
operator|new
name|Jcr
argument_list|(
operator|new
name|Oak
argument_list|(
name|targetNodeStore
argument_list|)
argument_list|)
operator|.
name|createRepository
argument_list|()
expr_stmt|;
name|NodeStore
name|source
init|=
name|createSourceContent
argument_list|()
decl_stmt|;
name|RepositorySidegrade
name|sidegrade
init|=
operator|new
name|RepositorySidegrade
argument_list|(
name|source
argument_list|,
name|targetNodeStore
argument_list|)
decl_stmt|;
name|sidegrade
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
specifier|public
name|JackrabbitSession
name|createAdminSession
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
operator|(
name|JackrabbitSession
operator|)
name|targetRepository
operator|.
name|login
argument_list|(
name|CREDENTIALS
argument_list|)
return|;
block|}
comment|// OAK-2869
specifier|private
specifier|static
name|void
name|setAsync
parameter_list|(
name|NodeStore
name|source
parameter_list|)
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|source
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":async"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"test"
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|source
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
comment|// OAK-2869
annotation|@
name|Test
specifier|public
name|void
name|verifyAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|state
init|=
name|targetNodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|":async"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|state
operator|.
name|hasProperty
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|NodeStore
name|createSourceContent
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeStore
name|source
init|=
operator|new
name|SegmentNodeStore
argument_list|()
decl_stmt|;
name|setAsync
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|Repository
name|repository
init|=
operator|new
name|Jcr
argument_list|(
operator|new
name|Oak
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|createRepository
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|repository
operator|.
name|login
argument_list|(
name|CREDENTIALS
argument_list|)
decl_stmt|;
try|try
block|{
name|JackrabbitWorkspace
name|workspace
init|=
operator|(
name|JackrabbitWorkspace
operator|)
name|session
operator|.
name|getWorkspace
argument_list|()
decl_stmt|;
name|NamespaceRegistry
name|registry
init|=
name|workspace
operator|.
name|getNamespaceRegistry
argument_list|()
decl_stmt|;
name|registry
operator|.
name|registerNamespace
argument_list|(
literal|"test"
argument_list|,
literal|"http://www.example.org/"
argument_list|)
expr_stmt|;
name|NodeTypeManager
name|nodeTypeManager
init|=
name|workspace
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|NodeTypeTemplate
name|template
init|=
name|nodeTypeManager
operator|.
name|createNodeTypeTemplate
argument_list|()
decl_stmt|;
name|template
operator|.
name|setName
argument_list|(
literal|"test:unstructured"
argument_list|)
expr_stmt|;
name|template
operator|.
name|setDeclaredSuperTypeNames
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"nt:unstructured"
block|}
argument_list|)
expr_stmt|;
name|PropertyDefinitionTemplate
name|pDef1
init|=
name|nodeTypeManager
operator|.
name|createPropertyDefinitionTemplate
argument_list|()
decl_stmt|;
name|pDef1
operator|.
name|setName
argument_list|(
literal|"defaultString"
argument_list|)
expr_stmt|;
name|pDef1
operator|.
name|setRequiredType
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|Value
name|stringValue
init|=
name|session
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"stringValue"
argument_list|)
decl_stmt|;
name|pDef1
operator|.
name|setDefaultValues
argument_list|(
operator|new
name|Value
index|[]
block|{
name|stringValue
block|}
argument_list|)
expr_stmt|;
name|template
operator|.
name|getPropertyDefinitionTemplates
argument_list|()
operator|.
name|add
argument_list|(
name|pDef1
argument_list|)
expr_stmt|;
name|PropertyDefinitionTemplate
name|pDef2
init|=
name|nodeTypeManager
operator|.
name|createPropertyDefinitionTemplate
argument_list|()
decl_stmt|;
name|pDef2
operator|.
name|setName
argument_list|(
literal|"defaultPath"
argument_list|)
expr_stmt|;
name|pDef2
operator|.
name|setRequiredType
argument_list|(
name|PropertyType
operator|.
name|PATH
argument_list|)
expr_stmt|;
name|Value
name|pathValue
init|=
name|session
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"/jcr:path/nt:value"
argument_list|,
name|PropertyType
operator|.
name|PATH
argument_list|)
decl_stmt|;
name|pDef2
operator|.
name|setDefaultValues
argument_list|(
operator|new
name|Value
index|[]
block|{
name|pathValue
block|}
argument_list|)
expr_stmt|;
name|template
operator|.
name|getPropertyDefinitionTemplates
argument_list|()
operator|.
name|add
argument_list|(
name|pDef2
argument_list|)
expr_stmt|;
name|nodeTypeManager
operator|.
name|registerNodeType
argument_list|(
name|template
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|template
operator|=
name|nodeTypeManager
operator|.
name|createNodeTypeTemplate
argument_list|()
expr_stmt|;
name|template
operator|.
name|setName
argument_list|(
literal|"test:referenceable"
argument_list|)
expr_stmt|;
name|template
operator|.
name|setDeclaredSuperTypeNames
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"nt:unstructured"
block|,
literal|"mix:referenceable"
block|}
argument_list|)
expr_stmt|;
name|nodeTypeManager
operator|.
name|registerNodeType
argument_list|(
name|template
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Node
name|root
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Node
name|referenceable
init|=
name|root
operator|.
name|addNode
argument_list|(
literal|"referenceable"
argument_list|,
literal|"test:unstructured"
argument_list|)
decl_stmt|;
name|referenceable
operator|.
name|addMixin
argument_list|(
name|NodeType
operator|.
name|MIX_REFERENCEABLE
argument_list|)
expr_stmt|;
name|Node
name|versionable
init|=
name|root
operator|.
name|addNode
argument_list|(
literal|"versionable"
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|versionable
operator|.
name|addMixin
argument_list|(
name|MIX_VERSIONABLE
argument_list|)
expr_stmt|;
name|Node
name|child
init|=
name|versionable
operator|.
name|addNode
argument_list|(
literal|"child"
argument_list|,
literal|"test:referenceable"
argument_list|)
decl_stmt|;
name|child
operator|.
name|addNode
argument_list|(
literal|"child2"
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
operator|.
name|checkin
argument_list|(
literal|"/versionable"
argument_list|)
expr_stmt|;
name|Node
name|properties
init|=
name|root
operator|.
name|addNode
argument_list|(
literal|"properties"
argument_list|,
literal|"test:unstructured"
argument_list|)
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"boolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Binary
name|binary
init|=
name|session
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createBinary
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|BINARY
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"binary"
argument_list|,
name|binary
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|binary
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|setProperty
argument_list|(
literal|"date"
argument_list|,
name|DATE
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"decimal"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"double"
argument_list|,
name|Math
operator|.
name|PI
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"long"
argument_list|,
literal|9876543210L
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"reference"
argument_list|,
name|referenceable
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"weak_reference"
argument_list|,
name|session
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|referenceable
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"mv_reference"
argument_list|,
operator|new
name|Value
index|[]
block|{
name|session
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|versionable
argument_list|,
literal|false
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"mv_weak_reference"
argument_list|,
operator|new
name|Value
index|[]
block|{
name|session
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|versionable
argument_list|,
literal|true
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"string"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"multiple"
argument_list|,
literal|"a,b,c"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|binary
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"binary"
argument_list|)
operator|.
name|getBinary
argument_list|()
expr_stmt|;
try|try
block|{
name|InputStream
name|stream
init|=
name|binary
operator|.
name|getStream
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|byte
name|aBINARY
range|:
name|BINARY
control|)
block|{
name|assertEquals
argument_list|(
name|aBINARY
argument_list|,
operator|(
name|byte
operator|)
name|stream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|stream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|binary
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
return|return
name|source
return|;
block|}
finally|finally
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|verifyNameSpaces
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|createAdminSession
argument_list|()
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|"http://www.example.org/"
argument_list|,
name|session
operator|.
name|getNamespaceURI
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|verifyCustomNodeTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|createAdminSession
argument_list|()
decl_stmt|;
try|try
block|{
name|NodeTypeManager
name|manager
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|manager
operator|.
name|hasNodeType
argument_list|(
literal|"test:unstructured"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeType
name|type
init|=
name|manager
operator|.
name|getNodeType
argument_list|(
literal|"test:unstructured"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|type
operator|.
name|isMixin
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|type
operator|.
name|isNodeType
argument_list|(
literal|"nt:unstructured"
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|foundDefaultString
init|=
literal|false
decl_stmt|;
name|boolean
name|foundDefaultPath
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PropertyDefinition
name|pDef
range|:
name|type
operator|.
name|getPropertyDefinitions
argument_list|()
control|)
block|{
if|if
condition|(
literal|"defaultString"
operator|.
name|equals
argument_list|(
name|pDef
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|pDef
operator|.
name|getRequiredType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|pDef
operator|.
name|getDefaultValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pDef
operator|.
name|getDefaultValues
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"stringValue"
argument_list|,
name|pDef
operator|.
name|getDefaultValues
argument_list|()
index|[
literal|0
index|]
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|foundDefaultString
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"defaultPath"
operator|.
name|equals
argument_list|(
name|pDef
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|PATH
argument_list|,
name|pDef
operator|.
name|getRequiredType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|pDef
operator|.
name|getDefaultValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pDef
operator|.
name|getDefaultValues
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/jcr:path/nt:value"
argument_list|,
name|pDef
operator|.
name|getDefaultValues
argument_list|()
index|[
literal|0
index|]
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|foundDefaultPath
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Expected property definition with name \"defaultString\""
argument_list|,
name|foundDefaultString
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected property definition with name \"defaultPath\""
argument_list|,
name|foundDefaultPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|verifyNewBuiltinNodeTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|createAdminSession
argument_list|()
decl_stmt|;
try|try
block|{
name|NodeTypeManager
name|manager
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|manager
operator|.
name|hasNodeType
argument_list|(
name|UserConstants
operator|.
name|NT_REP_MEMBER_REFERENCES
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|manager
operator|.
name|hasNodeType
argument_list|(
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|verifyReplacedBuiltinNodeTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|createAdminSession
argument_list|()
decl_stmt|;
try|try
block|{
name|NodeTypeManager
name|manager
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|NodeType
name|nt
init|=
name|manager
operator|.
name|getNodeType
argument_list|(
name|UserConstants
operator|.
name|NT_REP_GROUP
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Migrated repository must have new nodetype definitions"
argument_list|,
name|nt
operator|.
name|isNodeType
argument_list|(
name|UserConstants
operator|.
name|NT_REP_MEMBER_REFERENCES
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|verifyGenericProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|createAdminSession
argument_list|()
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|session
operator|.
name|nodeExists
argument_list|(
literal|"/properties"
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|properties
init|=
name|session
operator|.
name|getNode
argument_list|(
literal|"/properties"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|BOOLEAN
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"boolean"
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"boolean"
argument_list|)
operator|.
name|getBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|BINARY
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"binary"
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Binary
name|binary
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"binary"
argument_list|)
operator|.
name|getBinary
argument_list|()
decl_stmt|;
try|try
block|{
name|InputStream
name|stream
init|=
name|binary
operator|.
name|getStream
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|byte
name|aBINARY
range|:
name|BINARY
control|)
block|{
name|assertEquals
argument_list|(
name|aBINARY
argument_list|,
operator|(
name|byte
operator|)
name|stream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|stream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|binary
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|DATE
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"date"
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DATE
operator|.
name|getTimeInMillis
argument_list|()
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"date"
argument_list|)
operator|.
name|getDate
argument_list|()
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|DECIMAL
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"decimal"
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|123
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"decimal"
argument_list|)
operator|.
name|getDecimal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|DOUBLE
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"double"
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|PI
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"double"
argument_list|)
operator|.
name|getDouble
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|LONG
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"long"
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9876543210L
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"long"
argument_list|)
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"string"
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"string"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"multiple"
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Value
index|[]
name|values
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"multiple"
argument_list|)
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|values
index|[
literal|0
index|]
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|values
index|[
literal|1
index|]
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|values
index|[
literal|2
index|]
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|verifyReferencePropertiesContent
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|createAdminSession
argument_list|()
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|session
operator|.
name|nodeExists
argument_list|(
literal|"/referenceable"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|testNodeIdentifier
init|=
name|session
operator|.
name|getNode
argument_list|(
literal|"/referenceable"
argument_list|)
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|session
operator|.
name|nodeExists
argument_list|(
literal|"/properties"
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|properties
init|=
name|session
operator|.
name|getNode
argument_list|(
literal|"/properties"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|REFERENCE
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"reference"
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testNodeIdentifier
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"reference"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/referenceable"
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"reference"
argument_list|)
operator|.
name|getNode
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyIterator
name|refs
init|=
name|session
operator|.
name|getNode
argument_list|(
literal|"/referenceable"
argument_list|)
operator|.
name|getReferences
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|refs
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|properties
operator|.
name|getPath
argument_list|()
operator|+
literal|"/reference"
argument_list|,
name|refs
operator|.
name|nextProperty
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|refs
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyIterator
name|refs2
init|=
name|session
operator|.
name|getNode
argument_list|(
literal|"/versionable"
argument_list|)
operator|.
name|getReferences
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|refs2
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|properties
operator|.
name|getPath
argument_list|()
operator|+
literal|"/mv_reference"
argument_list|,
name|refs2
operator|.
name|nextProperty
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|refs2
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|WEAKREFERENCE
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"weak_reference"
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testNodeIdentifier
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"weak_reference"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/referenceable"
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"weak_reference"
argument_list|)
operator|.
name|getNode
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyIterator
name|weakRefs
init|=
name|session
operator|.
name|getNode
argument_list|(
literal|"/referenceable"
argument_list|)
operator|.
name|getWeakReferences
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|weakRefs
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|properties
operator|.
name|getPath
argument_list|()
operator|+
literal|"/weak_reference"
argument_list|,
name|weakRefs
operator|.
name|nextProperty
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|weakRefs
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyIterator
name|weakRefs2
init|=
name|session
operator|.
name|getNode
argument_list|(
literal|"/versionable"
argument_list|)
operator|.
name|getWeakReferences
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|weakRefs2
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|properties
operator|.
name|getPath
argument_list|()
operator|+
literal|"/mv_weak_reference"
argument_list|,
name|weakRefs2
operator|.
name|nextProperty
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|weakRefs2
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|verifyVersionHistory
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|createAdminSession
argument_list|()
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|session
operator|.
name|nodeExists
argument_list|(
literal|"/versionable"
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|versionable
init|=
name|session
operator|.
name|getNode
argument_list|(
literal|"/versionable"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|versionable
operator|.
name|hasNode
argument_list|(
literal|"child"
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|child
init|=
name|versionable
operator|.
name|getNode
argument_list|(
literal|"child"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|child
operator|.
name|hasNode
argument_list|(
literal|"child2"
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|child2
init|=
name|child
operator|.
name|getNode
argument_list|(
literal|"child2"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|versionable
operator|.
name|isCheckedOut
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|versionable
operator|.
name|hasProperty
argument_list|(
name|JCR_UUID
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|child
operator|.
name|isCheckedOut
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|child
operator|.
name|hasProperty
argument_list|(
name|JCR_UUID
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|child2
operator|.
name|isCheckedOut
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|child2
operator|.
name|hasProperty
argument_list|(
name|JCR_UUID
argument_list|)
argument_list|)
expr_stmt|;
name|VersionManager
name|manager
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|Version
name|version
init|=
name|manager
operator|.
name|getBaseVersion
argument_list|(
literal|"/versionable"
argument_list|)
decl_stmt|;
name|Node
name|frozen
init|=
name|version
operator|.
name|getFrozenNode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|versionable
operator|.
name|getPrimaryNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|frozen
operator|.
name|getProperty
argument_list|(
name|JCR_FROZENPRIMARYTYPE
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|versionable
operator|.
name|getMixinNodeTypes
argument_list|()
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|frozen
operator|.
name|getProperty
argument_list|(
name|JCR_FROZENMIXINTYPES
argument_list|)
operator|.
name|getValues
argument_list|()
index|[
literal|0
index|]
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|versionable
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|frozen
operator|.
name|getProperty
argument_list|(
name|JCR_FROZENUUID
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|frozenChild
init|=
name|frozen
operator|.
name|getNode
argument_list|(
literal|"child"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|child
operator|.
name|getPrimaryNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|frozenChild
operator|.
name|getProperty
argument_list|(
name|JCR_FROZENPRIMARYTYPE
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|frozenChild
operator|.
name|hasProperty
argument_list|(
name|JCR_FROZENMIXINTYPES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"OAK-1789"
argument_list|,
name|child
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|frozenChild
operator|.
name|getProperty
argument_list|(
name|JCR_FROZENUUID
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|frozenChild2
init|=
name|frozenChild
operator|.
name|getNode
argument_list|(
literal|"child2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|child2
operator|.
name|getPrimaryNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|frozenChild2
operator|.
name|getProperty
argument_list|(
name|JCR_FROZENPRIMARYTYPE
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|frozenChild2
operator|.
name|hasProperty
argument_list|(
name|JCR_FROZENMIXINTYPES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"OAK-1789"
argument_list|,
name|child2
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|frozenChild2
operator|.
name|getProperty
argument_list|(
name|JCR_FROZENUUID
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|VersionHistory
name|history
init|=
name|manager
operator|.
name|getVersionHistory
argument_list|(
literal|"/versionable"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|history
operator|.
name|isNodeType
argument_list|(
literal|"rep:VersionablePaths"
argument_list|)
argument_list|)
expr_stmt|;
name|Property
name|versionablePath
init|=
name|history
operator|.
name|getProperty
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/versionable"
argument_list|,
name|versionablePath
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

