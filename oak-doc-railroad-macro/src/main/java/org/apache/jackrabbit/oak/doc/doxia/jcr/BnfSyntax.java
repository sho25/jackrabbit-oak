begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|doc
operator|.
name|doxia
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|bnf
operator|.
name|Bnf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|bnf
operator|.
name|BnfVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|bnf
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|bnf
operator|.
name|RuleFixed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|bnf
operator|.
name|RuleHead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_comment
comment|/**  * A BNF visitor that generates BNF in HTML form.  */
end_comment

begin_class
specifier|public
class|class
name|BnfSyntax
implements|implements
name|BnfVisitor
block|{
specifier|private
name|String
name|html
decl_stmt|;
comment|/**      * Get the HTML syntax for the given syntax.      *      * @param bnf the BNF      * @param syntaxLines the syntax      * @return the HTML      */
specifier|public
name|String
name|getHtml
parameter_list|(
name|Bnf
name|bnf
parameter_list|,
name|String
name|syntaxLines
parameter_list|)
block|{
name|syntaxLines
operator|=
name|StringUtils
operator|.
name|replaceAll
argument_list|(
name|syntaxLines
argument_list|,
literal|"\n    "
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|StringTokenizer
name|tokenizer
init|=
name|Bnf
operator|.
name|getTokenizer
argument_list|(
name|syntaxLines
argument_list|)
decl_stmt|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|s
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|||
name|StringUtils
operator|.
name|toUpperEnglish
argument_list|(
name|s
argument_list|)
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|xmlText
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|buff
operator|.
name|append
argument_list|(
name|getLink
argument_list|(
name|bnf
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|s
init|=
name|buff
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// ensure it works within XHTML comments
name|s
operator|=
name|StringUtils
operator|.
name|replaceAll
argument_list|(
name|s
argument_list|,
literal|"--"
argument_list|,
literal|"&#45;-"
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
comment|/**      * Get the HTML link to the given token.      *      * @param bnf the BNF      * @param token the token      * @return the HTML link      */
name|String
name|getLink
parameter_list|(
name|Bnf
name|bnf
parameter_list|,
name|String
name|token
parameter_list|)
block|{
name|RuleHead
name|found
init|=
literal|null
decl_stmt|;
name|String
name|key
init|=
name|Bnf
operator|.
name|getRuleMapKey
argument_list|(
name|token
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|token
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|test
init|=
name|StringUtils
operator|.
name|toLowerEnglish
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|RuleHead
name|r
init|=
name|bnf
operator|.
name|getRuleHead
argument_list|(
name|test
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|found
operator|=
name|r
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
operator|==
literal|null
condition|)
block|{
return|return
name|token
return|;
block|}
if|if
condition|(
name|found
operator|.
name|getRule
argument_list|()
operator|instanceof
name|RuleFixed
condition|)
block|{
name|found
operator|.
name|getRule
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|html
return|;
block|}
name|String
name|link
init|=
name|found
operator|.
name|getTopic
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
decl_stmt|;
name|link
operator|=
literal|"#"
operator|+
name|StringUtils
operator|.
name|urlEncode
argument_list|(
name|link
argument_list|)
expr_stmt|;
return|return
literal|"<a href=\""
operator|+
name|link
operator|+
literal|"\">"
operator|+
name|token
operator|+
literal|"</a>"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitRuleElement
parameter_list|(
name|boolean
name|keyword
parameter_list|,
name|String
name|name
parameter_list|,
name|Rule
name|link
parameter_list|)
block|{
comment|// not used
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitRuleFixed
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|html
operator|=
name|BnfRailroad
operator|.
name|getHtmlText
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitRuleList
parameter_list|(
name|boolean
name|or
parameter_list|,
name|ArrayList
argument_list|<
name|Rule
argument_list|>
name|list
parameter_list|)
block|{
comment|// not used
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitRuleOptional
parameter_list|(
name|Rule
name|rule
parameter_list|)
block|{
comment|// not used
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitRuleRepeat
parameter_list|(
name|boolean
name|comma
parameter_list|,
name|Rule
name|rule
parameter_list|)
block|{
comment|// not used
block|}
block|}
end_class

end_unit

