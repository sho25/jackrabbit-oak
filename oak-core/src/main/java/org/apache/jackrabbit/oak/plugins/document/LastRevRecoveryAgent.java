begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|filterKeys
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|ROOT_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|JOURNAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|PROPERTY_OR_DELETED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|isCommitted
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|resolveCommitRevision
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|MapFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utility class for recovering potential missing _lastRev updates of nodes due  * to crash of a node. The recovery agent is also responsible for document  * sweeping (reverting uncommitted changes).  */
end_comment

begin_class
specifier|public
class|class
name|LastRevRecoveryAgent
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|DocumentNodeStore
name|nodeStore
decl_stmt|;
specifier|private
specifier|final
name|MissingLastRevSeeker
name|missingLastRevUtil
decl_stmt|;
specifier|public
name|LastRevRecoveryAgent
parameter_list|(
name|DocumentNodeStore
name|nodeStore
parameter_list|,
name|MissingLastRevSeeker
name|seeker
parameter_list|)
block|{
name|this
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|this
operator|.
name|missingLastRevUtil
operator|=
name|seeker
expr_stmt|;
block|}
specifier|public
name|LastRevRecoveryAgent
parameter_list|(
name|DocumentNodeStore
name|nodeStore
parameter_list|)
block|{
name|this
argument_list|(
name|nodeStore
argument_list|,
operator|new
name|MissingLastRevSeeker
argument_list|(
name|nodeStore
operator|.
name|getDocumentStore
argument_list|()
argument_list|,
name|nodeStore
operator|.
name|getClock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Recover the correct _lastRev updates for potentially missing candidate      * nodes. If another cluster node is already performing the recovery for the      * given {@code clusterId}, this method will {@code waitUntil} the given      * time in milliseconds for the recovery to finish.      *      * This method will return:      *<ul>      *<li>{@code -1} when another cluster node is busy performing recovery      *     for the given {@code clusterId} and the {@code waitUntil} time is      *     reached.</li>      *<li>{@code 0} when no recovery was needed or this thread waited      *     for another cluster node to finish the recovery within the given      *     {@code waitUntil} time.</li>      *<li>A positive value for the number of recovered documents when      *     recovery was performed by this thread / cluster node.</li>      *</ul>      *      * @param clusterId the cluster id for which the _lastRev are to be recovered      * @param waitUntil wait until this time is milliseconds for recovery of the      *                  given {@code clusterId} if another cluster node is      *                  already performing the recovery.      * @return the number of restored nodes or {@code -1} if a timeout occurred      *          while waiting for an ongoing recovery by another cluster node.      */
specifier|public
name|int
name|recover
parameter_list|(
name|int
name|clusterId
parameter_list|,
name|long
name|waitUntil
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
name|ClusterNodeInfoDocument
name|nodeInfo
init|=
name|missingLastRevUtil
operator|.
name|getClusterNodeInfo
argument_list|(
name|clusterId
argument_list|)
decl_stmt|;
comment|//TODO Currently leaseTime remains same per cluster node. If this
comment|//is made configurable then it should be read from DB entry
specifier|final
name|long
name|leaseTime
init|=
name|ClusterNodeInfo
operator|.
name|DEFAULT_LEASE_DURATION_MILLIS
decl_stmt|;
specifier|final
name|long
name|asyncDelay
init|=
name|nodeStore
operator|.
name|getAsyncDelay
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeInfo
operator|!=
literal|null
condition|)
block|{
comment|// Check if _lastRev recovery needed for this cluster node
comment|// state is Active&& current time past leaseEnd
if|if
condition|(
name|missingLastRevUtil
operator|.
name|isRecoveryNeeded
argument_list|(
name|nodeInfo
argument_list|)
condition|)
block|{
name|long
name|leaseEnd
init|=
name|nodeInfo
operator|.
name|getLeaseEndTime
argument_list|()
decl_stmt|;
comment|// retrieve the root document's _lastRev
name|NodeDocument
name|root
init|=
name|missingLastRevUtil
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|Revision
name|lastRev
init|=
name|root
operator|.
name|getLastRev
argument_list|()
operator|.
name|get
argument_list|(
name|clusterId
argument_list|)
decl_stmt|;
name|Revision
name|sweepRev
init|=
name|root
operator|.
name|getSweepRevisions
argument_list|()
operator|.
name|getRevision
argument_list|(
name|clusterId
argument_list|)
decl_stmt|;
comment|// start time is the _lastRev timestamp of the cluster node
name|long
name|startTime
decl_stmt|;
name|String
name|reason
decl_stmt|;
comment|//lastRev can be null if other cluster node did not got
comment|//chance to perform lastRev rollup even once
if|if
condition|(
name|lastRev
operator|!=
literal|null
condition|)
block|{
name|startTime
operator|=
name|lastRev
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
name|reason
operator|=
literal|"lastRev: "
operator|+
name|lastRev
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|startTime
operator|=
name|leaseEnd
operator|-
name|leaseTime
operator|-
name|asyncDelay
expr_stmt|;
name|reason
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"no lastRev for root, using timestamp based on leaseEnd %d - leaseTime %d - asyncDelay %d"
argument_list|,
name|leaseEnd
argument_list|,
name|leaseTime
argument_list|,
name|asyncDelay
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sweepRev
operator|==
literal|null
condition|)
block|{
comment|// no sweep ever done for this cluster node. this is
comment|// quite unusual and means an upgrade happened for a
comment|// cluster node from 1.6 or older and then crashed
comment|// we need to scan the entire collection
name|startTime
operator|=
literal|0
expr_stmt|;
name|reason
operator|=
literal|"no sweepRevision for cluster node "
operator|+
name|clusterId
operator|+
literal|", using timestamp 0 (scanning the entire collection)"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sweepRev
operator|.
name|getTimestamp
argument_list|()
operator|<
name|startTime
condition|)
block|{
name|startTime
operator|=
name|sweepRev
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
name|reason
operator|=
literal|"sweepRev: "
operator|+
name|sweepRev
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|recoverCandidates
argument_list|(
name|nodeInfo
argument_list|,
name|startTime
argument_list|,
name|waitUntil
argument_list|,
name|reason
argument_list|)
return|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"No recovery needed for clusterId {}"
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**      * Same as {@link #recover(int, long)}, but does not wait for ongoing      * recovery.      *      * @param clusterId the cluster id for which the _lastRev are to be recovered      * @return the number of restored nodes or {@code -1} if there is an ongoing      *          recovery by another cluster node.      */
specifier|public
name|int
name|recover
parameter_list|(
name|int
name|clusterId
parameter_list|)
block|{
return|return
name|recover
argument_list|(
name|clusterId
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * Recover the correct _lastRev updates for the given candidate nodes.      *      * @param suspects the potential suspects      * @param clusterId the cluster id for which _lastRev recovery needed      * @return the number of documents that required recovery.      */
specifier|public
name|int
name|recover
parameter_list|(
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|suspects
parameter_list|,
name|int
name|clusterId
parameter_list|)
block|{
return|return
name|recover
argument_list|(
name|suspects
argument_list|,
name|clusterId
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Recover the correct _lastRev updates for the given candidate nodes.      *      * @param suspects the potential suspects      * @param clusterId the cluster id for which _lastRev recovery needed      * @param dryRun if {@code true}, this method will only perform a check      *               but not apply the changes to the _lastRev fields.      * @return the number of documents that required recovery. This method      *          returns the number of the affected documents even if      *          {@code dryRun} is set true and no document was changed.      */
specifier|public
name|int
name|recover
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|suspects
parameter_list|,
specifier|final
name|int
name|clusterId
parameter_list|,
specifier|final
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
specifier|final
name|DocumentStore
name|docStore
init|=
name|nodeStore
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
comment|// first run a sweep
specifier|final
name|AtomicReference
argument_list|<
name|Revision
argument_list|>
name|sweepRev
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RevisionContext
name|context
init|=
operator|new
name|InactiveRevisionContext
argument_list|(
name|Utils
operator|.
name|getRootDocument
argument_list|(
name|docStore
argument_list|)
argument_list|,
name|nodeStore
argument_list|,
name|clusterId
argument_list|)
decl_stmt|;
specifier|final
name|NodeDocumentSweeper
name|sweeper
init|=
operator|new
name|NodeDocumentSweeper
argument_list|(
name|context
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|sweeper
operator|.
name|sweep
argument_list|(
name|suspects
argument_list|,
operator|new
name|NodeDocumentSweepListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|sweepUpdate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|UpdateOp
argument_list|>
name|updates
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
if|if
condition|(
name|dryRun
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Dry run of sweeper identified [{}] documents for "
operator|+
literal|"cluster node [{}]: {}"
argument_list|,
name|updates
operator|.
name|size
argument_list|()
argument_list|,
name|clusterId
argument_list|,
name|updates
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// create an invalidate entry
name|JournalEntry
name|inv
init|=
name|JOURNAL
operator|.
name|newDocument
argument_list|(
name|docStore
argument_list|)
decl_stmt|;
name|inv
operator|.
name|modified
argument_list|(
name|updates
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|r
init|=
name|context
operator|.
name|newRevision
argument_list|()
operator|.
name|asBranchRevision
argument_list|()
decl_stmt|;
name|UpdateOp
name|invOp
init|=
name|inv
operator|.
name|asUpdateOp
argument_list|(
name|r
argument_list|)
decl_stmt|;
comment|// and reference it from a regular entry
name|JournalEntry
name|entry
init|=
name|JOURNAL
operator|.
name|newDocument
argument_list|(
name|docStore
argument_list|)
decl_stmt|;
name|entry
operator|.
name|invalidate
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|jRev
init|=
name|context
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|UpdateOp
name|jOp
init|=
name|entry
operator|.
name|asUpdateOp
argument_list|(
name|jRev
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|docStore
operator|.
name|create
argument_list|(
name|JOURNAL
argument_list|,
name|newArrayList
argument_list|(
name|invOp
argument_list|,
name|jOp
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Unable to create journal entries for "
operator|+
literal|"document invalidation."
decl_stmt|;
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|sweepRev
operator|.
name|set
argument_list|(
name|Utils
operator|.
name|max
argument_list|(
name|sweepRev
operator|.
name|get
argument_list|()
argument_list|,
name|jRev
argument_list|)
argument_list|)
expr_stmt|;
comment|// now that journal entry is in place, perform the actual
comment|// updates on the documents
name|docStore
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|newArrayList
argument_list|(
name|updates
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sweeper updated {}"
argument_list|,
name|updates
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// now deal with missing _lastRev updates
name|UnsavedModifications
name|unsaved
init|=
operator|new
name|UnsavedModifications
argument_list|()
decl_stmt|;
name|UnsavedModifications
name|unsavedParents
init|=
operator|new
name|UnsavedModifications
argument_list|()
decl_stmt|;
comment|//Map of known last rev of checked paths
name|Map
argument_list|<
name|String
argument_list|,
name|Revision
argument_list|>
name|knownLastRevOrModification
init|=
name|MapFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|final
name|JournalEntry
name|changes
init|=
name|JOURNAL
operator|.
name|newDocument
argument_list|(
name|docStore
argument_list|)
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NodeDocument
name|doc
range|:
name|suspects
control|)
block|{
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|%
literal|100000
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Scanned {} suspects so far..."
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|Revision
name|currentLastRev
init|=
name|doc
operator|.
name|getLastRev
argument_list|()
operator|.
name|get
argument_list|(
name|clusterId
argument_list|)
decl_stmt|;
comment|// 1. determine last committed modification on document
name|Revision
name|lastModifiedRev
init|=
name|determineLastModification
argument_list|(
name|doc
argument_list|,
name|clusterId
argument_list|)
decl_stmt|;
name|Revision
name|lastRevForParents
init|=
name|Utils
operator|.
name|max
argument_list|(
name|lastModifiedRev
argument_list|,
name|currentLastRev
argument_list|)
decl_stmt|;
comment|// remember the higher of the two revisions. this is the
comment|// most recent revision currently obtained from either a
comment|// _lastRev entry or an explicit modification on the document
if|if
condition|(
name|lastRevForParents
operator|!=
literal|null
condition|)
block|{
name|knownLastRevOrModification
operator|.
name|put
argument_list|(
name|doc
operator|.
name|getPath
argument_list|()
argument_list|,
name|lastRevForParents
argument_list|)
expr_stmt|;
block|}
comment|//If both currentLastRev and lostLastRev are null it means
comment|//that no change is done by suspect cluster on this document
comment|//so nothing needs to be updated. Probably it was only changed by
comment|//other cluster nodes. If this node is parent of any child node which
comment|//has been modified by cluster then that node roll up would
comment|//add this node path to unsaved
comment|//2. Update lastRev for parent paths aka rollup
if|if
condition|(
name|lastRevForParents
operator|!=
literal|null
condition|)
block|{
name|String
name|path
init|=
name|doc
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|changes
operator|.
name|modified
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// track all changes
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
break|break;
block|}
name|path
operator|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|unsavedParents
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|lastRevForParents
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|parentPath
range|:
name|unsavedParents
operator|.
name|getPaths
argument_list|()
control|)
block|{
name|Revision
name|calcLastRev
init|=
name|unsavedParents
operator|.
name|get
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
name|Revision
name|knownLastRev
init|=
name|knownLastRevOrModification
operator|.
name|get
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|knownLastRev
operator|==
literal|null
condition|)
block|{
comment|// we don't know when the document was last modified with
comment|// the given clusterId. need to read from store
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|docStore
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|Revision
name|lastRev
init|=
name|doc
operator|.
name|getLastRev
argument_list|()
operator|.
name|get
argument_list|(
name|clusterId
argument_list|)
decl_stmt|;
name|Revision
name|lastMod
init|=
name|determineLastModification
argument_list|(
name|doc
argument_list|,
name|clusterId
argument_list|)
decl_stmt|;
name|knownLastRev
operator|=
name|Utils
operator|.
name|max
argument_list|(
name|lastRev
argument_list|,
name|lastMod
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to find document: {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
comment|//Copy the calcLastRev of parent only if they have changed
comment|//In many case it might happen that parent have consistent lastRev
comment|//This check ensures that unnecessary updates are not made
if|if
condition|(
name|knownLastRev
operator|==
literal|null
operator|||
name|calcLastRev
operator|.
name|compareRevisionTime
argument_list|(
name|knownLastRev
argument_list|)
operator|>
literal|0
condition|)
block|{
name|unsaved
operator|.
name|put
argument_list|(
name|parentPath
argument_list|,
name|calcLastRev
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sweepRev
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|unsaved
operator|.
name|put
argument_list|(
name|ROOT_PATH
argument_list|,
name|sweepRev
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// take the root's lastRev
specifier|final
name|Revision
name|lastRootRev
init|=
name|unsaved
operator|.
name|get
argument_list|(
name|ROOT_PATH
argument_list|)
decl_stmt|;
comment|//Note the size before persist as persist operation
comment|//would empty the internal state
name|int
name|size
init|=
name|unsaved
operator|.
name|getPaths
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|String
name|updates
init|=
name|unsaved
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|dryRun
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Dry run of lastRev recovery identified [{}] documents for "
operator|+
literal|"cluster node [{}]: {}"
argument_list|,
name|size
argument_list|,
name|clusterId
argument_list|,
name|updates
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//UnsavedModifications is designed to be used in concurrent
comment|//access mode. For recovery case there is no concurrent access
comment|//involve so just pass a new lock instance
comment|// the lock uses to do the persisting is a plain reentrant lock
comment|// thus it doesn't matter, where exactly the check is done
comment|// as to whether the recovered lastRev has already been
comment|// written to the journal.
name|unsaved
operator|.
name|persist
argument_list|(
name|nodeStore
argument_list|,
operator|new
name|UnsavedModifications
operator|.
name|Snapshot
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|acquiring
parameter_list|(
name|Revision
name|mostRecent
parameter_list|)
block|{
if|if
condition|(
name|lastRootRev
operator|==
literal|null
condition|)
block|{
comment|// this should never happen - when unsaved has no changes
comment|// that is reflected in the 'map' to be empty - in that
comment|// case 'persist()' quits early and never calls
comment|// acquiring() here.
comment|//
comment|// but even if it would occur - if we have no lastRootRev
comment|// then we cannot and probably don't have to persist anything
return|return;
block|}
specifier|final
name|String
name|id
init|=
name|JournalEntry
operator|.
name|asId
argument_list|(
name|lastRootRev
argument_list|)
decl_stmt|;
comment|// lastRootRev never null at this point
specifier|final
name|JournalEntry
name|existingEntry
init|=
name|docStore
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|JOURNAL
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingEntry
operator|!=
literal|null
condition|)
block|{
comment|// then the journal entry was already written - as can happen if
comment|// someone else (or the original instance itself) wrote the
comment|// journal entry, then died.
comment|// in this case, don't write it again.
comment|// hence: nothing to be done here. return.
return|return;
block|}
comment|// otherwise store a new journal entry now
name|docStore
operator|.
name|create
argument_list|(
name|JOURNAL
argument_list|,
name|singletonList
argument_list|(
name|changes
operator|.
name|asUpdateOp
argument_list|(
name|lastRootRev
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
operator|new
name|ReentrantLock
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Updated lastRev of [{}] documents while performing lastRev recovery for "
operator|+
literal|"cluster node [{}]: {}"
argument_list|,
name|size
argument_list|,
name|clusterId
argument_list|,
name|updates
argument_list|)
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
comment|/**      * Retrieves possible candidates which have been modified after the given      * {@code startTime} and recovers the missing updates.      *      * @param nodeInfo the info of the cluster node to recover.      * @param startTime the start time      * @param waitUntil wait at most until this time for an ongoing recovery      *                  done by another cluster node.      * @param info a string with additional information how recovery is run.      * @return the number of restored nodes or {@code -1} if recovery is still      *      ongoing by another process even when {@code waitUntil} time was      *      reached.      */
specifier|private
name|int
name|recoverCandidates
parameter_list|(
specifier|final
name|ClusterNodeInfoDocument
name|nodeInfo
parameter_list|,
specifier|final
name|long
name|startTime
parameter_list|,
specifier|final
name|long
name|waitUntil
parameter_list|,
specifier|final
name|String
name|info
parameter_list|)
block|{
name|ClusterNodeInfoDocument
name|infoDoc
init|=
name|nodeInfo
decl_stmt|;
name|int
name|clusterId
init|=
name|infoDoc
operator|.
name|getClusterId
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|missingLastRevUtil
operator|.
name|acquireRecoveryLock
argument_list|(
name|clusterId
argument_list|,
name|nodeStore
operator|.
name|getClusterId
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
name|Clock
name|clock
init|=
name|nodeStore
operator|.
name|getClock
argument_list|()
decl_stmt|;
name|long
name|remaining
init|=
name|waitUntil
operator|-
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|remaining
operator|<
literal|0
condition|)
block|{
comment|// no need to wait for lock release, waitUntil already reached
return|return
operator|-
literal|1
return|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Last revision recovery already being performed by "
operator|+
literal|"cluster node {}. Waiting at most until {} for recovery "
operator|+
literal|"to finish ({} seconds remaining)."
argument_list|,
name|infoDoc
operator|.
name|getRecoveryBy
argument_list|()
argument_list|,
name|Utils
operator|.
name|timestampToString
argument_list|(
name|waitUntil
argument_list|)
argument_list|,
name|remaining
operator|/
literal|1000
argument_list|)
expr_stmt|;
comment|// check once every five seconds
name|long
name|time
init|=
name|Math
operator|.
name|min
argument_list|(
name|waitUntil
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
operator|+
literal|5000
argument_list|)
decl_stmt|;
try|try
block|{
name|clock
operator|.
name|waitUntil
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
name|String
name|msg
init|=
literal|"Interrupted while waiting for _lastRev recovery to finish."
decl_stmt|;
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|infoDoc
operator|=
name|missingLastRevUtil
operator|.
name|getClusterNodeInfo
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|missingLastRevUtil
operator|.
name|isRecoveryNeeded
argument_list|(
name|infoDoc
argument_list|)
condition|)
block|{
comment|// meanwhile another process finished recovery
return|return
literal|0
return|;
block|}
block|}
comment|// if we get here, the recovery lock was acquired successfully
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Recovering candidates modified after: [{}] for clusterId [{}] [{}]"
argument_list|,
name|Utils
operator|.
name|timestampToString
argument_list|(
name|startTime
argument_list|)
argument_list|,
name|clusterId
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|suspects
init|=
name|missingLastRevUtil
operator|.
name|getCandidates
argument_list|(
name|startTime
argument_list|)
decl_stmt|;
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Performing Last Revision Recovery for clusterNodeId {}"
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
name|int
name|num
init|=
name|recover
argument_list|(
name|suspects
argument_list|,
name|clusterId
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|num
return|;
block|}
finally|finally
block|{
name|Utils
operator|.
name|closeIfCloseable
argument_list|(
name|suspects
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|missingLastRevUtil
operator|.
name|releaseRecoveryLock
argument_list|(
name|clusterId
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|signalClusterStateChange
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Determines the last committed modification to the given document by      * a {@code clusterId}.      *      * @param doc a document.      * @param clusterId clusterId for which the last committed modification is      *                  looked up.      * @return the commit revision of the last modification by {@code clusterId}      *          to the given document.      */
annotation|@
name|CheckForNull
specifier|private
name|Revision
name|determineLastModification
parameter_list|(
name|NodeDocument
name|doc
parameter_list|,
name|int
name|clusterId
parameter_list|)
block|{
name|ClusterPredicate
name|cp
init|=
operator|new
name|ClusterPredicate
argument_list|(
name|clusterId
argument_list|)
decl_stmt|;
name|Revision
name|lastModified
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|property
range|:
name|Sets
operator|.
name|filter
argument_list|(
name|doc
operator|.
name|keySet
argument_list|()
argument_list|,
name|PROPERTY_OR_DELETED
argument_list|)
control|)
block|{
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
name|doc
operator|.
name|getLocalMap
argument_list|(
name|property
argument_list|)
decl_stmt|;
comment|// collect committed changes of this cluster node
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|filterKeys
argument_list|(
name|valueMap
argument_list|,
name|cp
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Revision
name|rev
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|cv
init|=
name|nodeStore
operator|.
name|getCommitValue
argument_list|(
name|rev
argument_list|,
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|isCommitted
argument_list|(
name|cv
argument_list|)
condition|)
block|{
name|lastModified
operator|=
name|Utils
operator|.
name|max
argument_list|(
name|lastModified
argument_list|,
name|resolveCommitRevision
argument_list|(
name|rev
argument_list|,
name|cv
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|lastModified
return|;
block|}
comment|/**      * Determines if any of the cluster node failed to renew its lease and      * did not properly shutdown. If any such cluster node is found then are      * potential candidates for last rev recovery. This method also returns      * true when there is a cluster node with an ongoing recovery.      *      * @return true if last rev recovery needs to be performed for any of the      *          cluster nodes      */
specifier|public
name|boolean
name|isRecoveryNeeded
parameter_list|()
block|{
return|return
name|missingLastRevUtil
operator|.
name|isRecoveryNeeded
argument_list|()
return|;
block|}
specifier|public
name|void
name|performRecoveryIfNeeded
parameter_list|()
block|{
if|if
condition|(
name|isRecoveryNeeded
argument_list|()
condition|)
block|{
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|clusterIds
init|=
name|getRecoveryCandidateNodes
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"ClusterNodeId [{}] starting Last Revision Recovery for clusterNodeId(s) {}"
argument_list|,
name|nodeStore
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|clusterIds
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|clusterId
range|:
name|clusterIds
control|)
block|{
if|if
condition|(
name|recover
argument_list|(
name|clusterId
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Last Revision Recovery for cluster node {} "
operator|+
literal|"ongoing by other cluster node."
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Gets the _lastRev recovery candidate cluster nodes. This also includes      * cluster nodes that are currently being recovered. The method would not      * return self as a candidate for recovery even if it has failed to update      * lease in time      *      * @return the recovery candidate nodes.      */
specifier|public
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|getRecoveryCandidateNodes
parameter_list|()
block|{
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|filter
argument_list|(
name|missingLastRevUtil
operator|.
name|getAllClusters
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|ClusterNodeInfoDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|ClusterNodeInfoDocument
name|input
parameter_list|)
block|{
return|return
name|nodeStore
operator|.
name|getClusterId
argument_list|()
operator|!=
name|input
operator|.
name|getClusterId
argument_list|()
operator|&&
name|missingLastRevUtil
operator|.
name|isRecoveryNeeded
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|ClusterNodeInfoDocument
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|ClusterNodeInfoDocument
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getClusterId
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|ClusterPredicate
implements|implements
name|Predicate
argument_list|<
name|Revision
argument_list|>
block|{
specifier|private
specifier|final
name|int
name|clusterId
decl_stmt|;
specifier|private
name|ClusterPredicate
parameter_list|(
name|int
name|clusterId
parameter_list|)
block|{
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Revision
name|input
parameter_list|)
block|{
return|return
name|clusterId
operator|==
name|input
operator|.
name|getClusterId
argument_list|()
return|;
block|}
block|}
comment|/**      * A revision context that represents an inactive cluster node for which      * recovery is performed.      */
specifier|private
specifier|static
class|class
name|InactiveRevisionContext
implements|implements
name|RevisionContext
block|{
specifier|private
specifier|final
name|NodeDocument
name|root
decl_stmt|;
specifier|private
specifier|final
name|RevisionContext
name|context
decl_stmt|;
specifier|private
specifier|final
name|int
name|clusterId
decl_stmt|;
name|InactiveRevisionContext
parameter_list|(
name|NodeDocument
name|root
parameter_list|,
name|RevisionContext
name|context
parameter_list|,
name|int
name|clusterId
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|UnmergedBranches
name|getBranches
parameter_list|()
block|{
comment|// an inactive cluster node does not have active unmerged branches
return|return
operator|new
name|UnmergedBranches
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|UnsavedModifications
name|getPendingModifications
parameter_list|()
block|{
comment|// an inactive cluster node does not have
comment|// pending in-memory _lastRev updates
return|return
operator|new
name|UnsavedModifications
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getClusterId
parameter_list|()
block|{
return|return
name|clusterId
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|RevisionVector
name|getHeadRevision
parameter_list|()
block|{
return|return
operator|new
name|RevisionVector
argument_list|(
name|root
operator|.
name|getLastRev
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Revision
name|newRevision
parameter_list|()
block|{
return|return
name|Revision
operator|.
name|newRevision
argument_list|(
name|clusterId
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Clock
name|getClock
parameter_list|()
block|{
return|return
name|context
operator|.
name|getClock
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCommitValue
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|changeRevision
parameter_list|,
annotation|@
name|Nonnull
name|NodeDocument
name|doc
parameter_list|)
block|{
return|return
name|context
operator|.
name|getCommitValue
argument_list|(
name|changeRevision
argument_list|,
name|doc
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

