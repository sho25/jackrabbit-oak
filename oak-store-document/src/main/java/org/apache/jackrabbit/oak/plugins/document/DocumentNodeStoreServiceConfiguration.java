begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * Configuration for the {@link DocumentNodeStoreService}. Access is provided  * via {@link Configuration}, while internally the implementation considers  * entries in the following sequence:  *<ul>  *<li>Framework/system properties, potentially with mapped names. See  *          {@link #frameworkPropertyNameFor(String)}.</li>  *<li>OSGi configuration for {@link DocumentNodeStoreService} with  *          {@link Configuration#PID} if the property is set via the  *          OSGi Configuration Admin.</li>  *<li>OSGi configuration with {@link Configuration#PRESET_PID}. The  *          default value for a configuration entry will be provided if the  *          OSGi Configuration Admin does not have an entry as a preset.</li>  *</ul>  */
end_comment

begin_class
specifier|final
class|class
name|DocumentNodeStoreServiceConfiguration
block|{
comment|/**      * Default framework property name prefix.      */
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_FWK_PREFIX
init|=
literal|"oak.documentstore."
decl_stmt|;
comment|/**      * Name of framework property to configure Mongo Connection URI      */
specifier|private
specifier|static
specifier|final
name|String
name|FWK_PROP_URI
init|=
literal|"oak.mongo.uri"
decl_stmt|;
comment|/**      * Name of framework property to configure Mongo Database name      * to use      */
specifier|private
specifier|static
specifier|final
name|String
name|FWK_PROP_DB
init|=
literal|"oak.mongo.db"
decl_stmt|;
comment|/**      * Name of framework property to configure socket keep-alive for MongoDB      */
specifier|private
specifier|static
specifier|final
name|String
name|FWK_PROP_SO_KEEP_ALIVE
init|=
literal|"oak.mongo.socketKeepAlive"
decl_stmt|;
comment|/**      * Name of the framework property to configure the update limit.      */
specifier|private
specifier|static
specifier|final
name|String
name|FWK_PROP_UPDATE_LIMIT
init|=
literal|"update.limit"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_DB
init|=
literal|"db"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_URI
init|=
literal|"mongouri"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_HOME
init|=
literal|"repository.home"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PROP_SO_KEEP_ALIVE
init|=
literal|"socketKeepAlive"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PROP_UPDATE_LIMIT
init|=
literal|"updateLimit"
decl_stmt|;
comment|/**      * Special mapping of property names to framework properties. All other      * property names are mapped to framework properties by prefixing them with      * {@link #DEFAULT_FWK_PREFIX}.      */
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|FWK_PROP_MAPPING
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|PROP_DB
argument_list|,
name|FWK_PROP_DB
argument_list|,
name|PROP_URI
argument_list|,
name|FWK_PROP_URI
argument_list|,
name|PROP_HOME
argument_list|,
name|PROP_HOME
argument_list|,
name|PROP_SO_KEEP_ALIVE
argument_list|,
name|FWK_PROP_SO_KEEP_ALIVE
argument_list|,
name|PROP_UPDATE_LIMIT
argument_list|,
name|FWK_PROP_UPDATE_LIMIT
argument_list|)
decl_stmt|;
specifier|private
name|DocumentNodeStoreServiceConfiguration
parameter_list|()
block|{     }
specifier|static
name|Configuration
name|create
parameter_list|(
name|ComponentContext
name|context
parameter_list|,
name|ConfigurationAdmin
name|configurationAdmin
parameter_list|,
name|Configuration
name|preset
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|Configuration
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|DocumentNodeStoreServiceConfiguration
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Configuration
operator|.
name|class
block|}
argument_list|,
operator|new
name|ConfigurationHandler
argument_list|(
name|context
argument_list|,
name|configurationAdmin
argument_list|,
name|preset
argument_list|,
name|configuration
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|frameworkPropertyNameFor
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
name|String
name|fwkPropName
init|=
name|FWK_PROP_MAPPING
operator|.
name|get
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fwkPropName
operator|==
literal|null
condition|)
block|{
name|fwkPropName
operator|=
name|DEFAULT_FWK_PREFIX
operator|+
name|propertyName
expr_stmt|;
block|}
return|return
name|fwkPropName
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|ConfigurationHandler
implements|implements
name|InvocationHandler
block|{
specifier|private
specifier|final
name|ComponentContext
name|context
decl_stmt|;
comment|/**          * The preset configuration.          */
specifier|private
specifier|final
name|Configuration
name|preset
decl_stmt|;
comment|/**          * The configuration taking precedence over the preset.          */
specifier|private
specifier|final
name|Configuration
name|configuration
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|configurationKeys
decl_stmt|;
name|ConfigurationHandler
parameter_list|(
name|ComponentContext
name|context
parameter_list|,
name|ConfigurationAdmin
name|configurationAdmin
parameter_list|,
name|Configuration
name|preset
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|context
operator|=
name|checkNotNull
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|preset
operator|=
name|checkNotNull
argument_list|(
name|preset
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|checkNotNull
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|this
operator|.
name|configurationKeys
operator|=
name|getConfigurationKeys
argument_list|(
name|checkNotNull
argument_list|(
name|configurationAdmin
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getConfigurationKeys
parameter_list|(
name|ConfigurationAdmin
name|configurationAdmin
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
name|c
init|=
name|configurationAdmin
operator|.
name|getConfiguration
argument_list|(
name|Configuration
operator|.
name|PID
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|k
range|:
name|Collections
operator|.
name|list
argument_list|(
name|c
operator|.
name|getProperties
argument_list|()
operator|.
name|keys
argument_list|()
argument_list|)
control|)
block|{
name|keys
operator|.
name|add
argument_list|(
name|k
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|keys
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|name
init|=
name|method
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"_"
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
name|Configuration
name|c
decl_stmt|;
if|if
condition|(
name|configurationKeys
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|c
operator|=
name|configuration
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
name|preset
expr_stmt|;
block|}
name|Object
name|value
init|=
name|method
operator|.
name|invoke
argument_list|(
name|c
argument_list|)
decl_stmt|;
comment|// check if this is overridden by a framework property
name|String
name|frameworkProp
init|=
name|OsgiUtil
operator|.
name|lookup
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|,
name|frameworkPropertyNameFor
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|frameworkProp
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|tryCoerce
argument_list|(
name|frameworkProp
argument_list|,
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
specifier|private
name|Object
name|tryCoerce
parameter_list|(
name|String
name|value
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Object
name|defaultValue
parameter_list|)
block|{
name|Object
name|obj
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Boolean
operator|.
name|class
operator|||
name|type
operator|==
name|boolean
operator|.
name|class
condition|)
block|{
name|obj
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Integer
operator|.
name|class
operator|||
name|type
operator|==
name|int
operator|.
name|class
condition|)
block|{
try|try
block|{
name|obj
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|obj
operator|=
name|defaultValue
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Long
operator|.
name|class
operator|||
name|type
operator|==
name|long
operator|.
name|class
condition|)
block|{
try|try
block|{
name|obj
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|obj
operator|=
name|defaultValue
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|String
operator|.
name|class
condition|)
block|{
name|obj
operator|=
name|value
expr_stmt|;
block|}
else|else
block|{
name|obj
operator|=
name|defaultValue
expr_stmt|;
block|}
return|return
name|obj
return|;
block|}
block|}
block|}
end_class

end_unit

