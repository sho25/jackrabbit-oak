begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|benchmark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|client
operator|.
name|StandbyClientSync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|jmx
operator|.
name|StandbyStatusMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|server
operator|.
name|StandbyServerSync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_class
specifier|public
class|class
name|BulkTransferBenchmark
extends|extends
name|BenchmarkBase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|HOST
init|=
literal|"127.0.0.1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PORT
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"standby.server.port"
argument_list|,
literal|52800
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|TIMEOUT
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"standby.test.timeout"
argument_list|,
literal|500
argument_list|)
decl_stmt|;
specifier|private
name|void
name|test100Nodes
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"100 nodes"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|test1000Nodes
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"1K nodes"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|test10000Nodes
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"10K nodes"
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|test100000Nodes
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"100K nodes"
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|test1MillionNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"1M nodes"
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|test1MillionNodesUsingSSL
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"1M nodes with SSL"
argument_list|,
literal|1000000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|test10MillionNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"10M nodes"
argument_list|,
literal|10000000
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|test
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|number
parameter_list|)
throws|throws
name|Exception
block|{
name|test
argument_list|(
name|name
argument_list|,
name|number
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createNodes
parameter_list|(
name|int
name|nodeCount
parameter_list|)
throws|throws
name|Exception
block|{
name|NodeStore
name|store
init|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|primaryStore
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|NodeBuilder
name|rootBuilder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createNodes
argument_list|(
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"store"
argument_list|)
argument_list|,
name|nodeCount
argument_list|,
operator|new
name|Random
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|rootBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|primaryStore
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|createNodes
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|int
name|nodeCount
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<=
name|nodeCount
operator|/
literal|1000
condition|;
name|j
operator|++
control|)
block|{
name|NodeBuilder
name|folder
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"Folder#"
operator|+
name|j
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|nodeCount
operator|<
literal|1000
condition|?
name|nodeCount
else|:
literal|1000
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|folder
operator|.
name|child
argument_list|(
literal|"Test#"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"ts"
argument_list|,
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|test
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|nodeCount
parameter_list|,
name|boolean
name|useSSL
parameter_list|)
throws|throws
name|Exception
block|{
name|createNodes
argument_list|(
name|nodeCount
argument_list|)
expr_stmt|;
try|try
init|(
name|TemporaryFolder
name|spoolFolder
init|=
operator|new
name|TemporaryFolder
argument_list|(
literal|"spool-"
argument_list|)
init|;
name|StandbyServerSync
name|serverSync
operator|=
operator|new
name|StandbyServerSync
argument_list|(
name|PORT
argument_list|,
name|primaryStore
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|,
name|useSSL
argument_list|)
init|;
name|StandbyClientSync
name|clientSync
operator|=
operator|new
name|StandbyClientSync
argument_list|(
name|HOST
argument_list|,
name|PORT
argument_list|,
name|standbyStore
argument_list|,
name|useSSL
argument_list|,
name|TIMEOUT
argument_list|,
literal|false
argument_list|,
name|spoolFolder
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
name|serverSync
operator|.
name|start
argument_list|()
expr_stmt|;
name|MBeanServer
name|jmxServer
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|status
init|=
operator|new
name|ObjectName
argument_list|(
name|StandbyStatusMBean
operator|.
name|JMX_NAME
operator|+
literal|",id=*"
argument_list|)
decl_stmt|;
name|ObjectName
name|clientStatus
init|=
operator|new
name|ObjectName
argument_list|(
name|clientSync
operator|.
name|getMBeanName
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectName
name|serverStatus
init|=
operator|new
name|ObjectName
argument_list|(
name|serverSync
operator|.
name|getMBeanName
argument_list|()
argument_list|)
decl_stmt|;
name|Stopwatch
name|stopwatch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|clientSync
operator|.
name|run
argument_list|()
expr_stmt|;
name|stopwatch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|instances
init|=
name|jmxServer
operator|.
name|queryNames
argument_list|(
name|status
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ObjectName
name|connectionStatus
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ObjectName
name|s
range|:
name|instances
control|)
block|{
if|if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
name|clientStatus
argument_list|)
operator|&&
operator|!
name|s
operator|.
name|equals
argument_list|(
name|serverStatus
argument_list|)
condition|)
block|{
name|connectionStatus
operator|=
name|s
expr_stmt|;
block|}
block|}
assert|assert
operator|(
name|connectionStatus
operator|!=
literal|null
operator|)
assert|;
name|long
name|segments
init|=
operator|(
name|Long
operator|)
name|jmxServer
operator|.
name|getAttribute
argument_list|(
name|connectionStatus
argument_list|,
literal|"TransferredSegments"
argument_list|)
decl_stmt|;
name|long
name|bytes
init|=
operator|(
name|Long
operator|)
name|jmxServer
operator|.
name|getAttribute
argument_list|(
name|connectionStatus
argument_list|,
literal|"TransferredSegmentBytes"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"%s: segments = %d, segments size = %d bytes, time = %s\n"
argument_list|,
name|name
argument_list|,
name|segments
argument_list|,
name|bytes
argument_list|,
name|stopwatch
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
interface|interface
name|Test
block|{
name|void
name|run
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|BulkTransferBenchmark
name|benchmark
init|=
operator|new
name|BulkTransferBenchmark
argument_list|()
decl_stmt|;
name|Test
index|[]
name|tests
init|=
operator|new
name|Test
index|[]
block|{
name|benchmark
operator|::
name|test100Nodes
block|,
name|benchmark
operator|::
name|test1000Nodes
block|,
name|benchmark
operator|::
name|test10000Nodes
block|,
name|benchmark
operator|::
name|test100000Nodes
block|,
name|benchmark
operator|::
name|test1MillionNodes
block|,
name|benchmark
operator|::
name|test1MillionNodesUsingSSL
block|,
name|benchmark
operator|::
name|test10MillionNodes
block|}
decl_stmt|;
for|for
control|(
name|Test
name|test
range|:
name|tests
control|)
block|{
try|try
block|{
name|benchmark
operator|.
name|setUpServerAndClient
argument_list|()
expr_stmt|;
name|test
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|benchmark
operator|.
name|closeServerAndClient
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

