begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_BASE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_FILE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUtils
operator|.
name|createIndexDefinition
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_NODE_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
operator|.
name|INITIAL_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdateProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryEngineSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|SelectorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|FilterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|TraversingIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|PropertyValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Test the Property2 index mechanism.  */
end_comment

begin_class
specifier|public
class|class
name|PropertyIndexTest
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MANY
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|EditorHook
name|HOOK
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|IndexUpdateProvider
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|costEstimation
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// disable the estimation
name|index
operator|.
name|setProperty
argument_list|(
literal|"entryCount"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MANY
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"x"
operator|+
name|i
operator|%
literal|20
argument_list|)
expr_stmt|;
block|}
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|NT_BASE
argument_list|)
decl_stmt|;
comment|// Query the index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|double
name|cost
decl_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"x1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
literal|6.5
operator|&&
name|cost
operator|<=
literal|7.5
argument_list|)
expr_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x1"
argument_list|,
literal|"x2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
literal|11.5
operator|&&
name|cost
operator|<=
literal|12.5
argument_list|)
expr_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x1"
argument_list|,
literal|"x2"
argument_list|,
literal|"x3"
argument_list|,
literal|"x4"
argument_list|,
literal|"x5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
literal|26.5
operator|&&
name|cost
operator|<=
literal|27.5
argument_list|)
expr_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x1"
argument_list|,
literal|"x2"
argument_list|,
literal|"x3"
argument_list|,
literal|"x4"
argument_list|,
literal|"x5"
argument_list|,
literal|"x6"
argument_list|,
literal|"x7"
argument_list|,
literal|"x8"
argument_list|,
literal|"x9"
argument_list|,
literal|"x0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
literal|51.5
operator|&&
name|cost
operator|<=
literal|52.5
argument_list|)
expr_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
name|MANY
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is essentially same test as {@link #costEstimation()} with one difference that it uses      * path constraint in query and creates similar trees under 2 branches {@code path1} and {@code path2}.      * The cost estimation is then verified to be same as that in {@code costEstimation} for query under {@code path1}      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|pathBasedCostEstimation
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// disable the estimation
name|index
operator|.
name|setProperty
argument_list|(
literal|"entryCount"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeBuilder
name|path1
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"path1"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|path2
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"path2"
argument_list|)
decl_stmt|;
comment|// Add some content and process it through the property index hook
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MANY
condition|;
name|i
operator|++
control|)
block|{
name|path1
operator|.
name|child
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"x"
operator|+
name|i
operator|%
literal|20
argument_list|)
expr_stmt|;
name|path2
operator|.
name|child
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"x"
operator|+
name|i
operator|%
literal|20
argument_list|)
expr_stmt|;
block|}
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|NT_BASE
argument_list|)
decl_stmt|;
name|f
operator|.
name|restrictPath
argument_list|(
literal|"/path1"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
argument_list|)
expr_stmt|;
comment|// Query the index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|double
name|cost
decl_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"x1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
literal|6.5
operator|&&
name|cost
operator|<=
literal|7.5
argument_list|)
expr_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x1"
argument_list|,
literal|"x2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
literal|11.5
operator|&&
name|cost
operator|<=
literal|12.5
argument_list|)
expr_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x1"
argument_list|,
literal|"x2"
argument_list|,
literal|"x3"
argument_list|,
literal|"x4"
argument_list|,
literal|"x5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
literal|26.5
operator|&&
name|cost
operator|<=
literal|27.5
argument_list|)
expr_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x1"
argument_list|,
literal|"x2"
argument_list|,
literal|"x3"
argument_list|,
literal|"x4"
argument_list|,
literal|"x5"
argument_list|,
literal|"x6"
argument_list|,
literal|"x7"
argument_list|,
literal|"x8"
argument_list|,
literal|"x9"
argument_list|,
literal|"x0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
literal|51.5
operator|&&
name|cost
operator|<=
literal|52.5
argument_list|)
expr_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
name|MANY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|costMaxEstimation
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|EmptyNodeState
operator|.
name|EMPTY_NODE
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// 100 nodes in the index:
comment|// with a single level /content cost is 121
comment|// adding a second level /content/data cost is133
comment|// 101 nodes in the index:
comment|// with a single level /content cost is 121
comment|// adding a second level /content/data cost is 133
comment|// 100 nodes, 12 levels deep, cost is 345
comment|// 101 nodes, 12 levels deep, cost is 345
comment|// threshold for estimation (PropertyIndexLookup.MAX_COST) is at 100
name|int
name|nodes
init|=
literal|101
decl_stmt|;
name|int
name|levels
init|=
literal|12
decl_stmt|;
name|NodeBuilder
name|data
init|=
name|builder
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|levels
condition|;
name|i
operator|++
control|)
block|{
name|data
operator|=
name|data
operator|.
name|child
argument_list|(
literal|"l"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|c
init|=
name|data
operator|.
name|child
argument_list|(
literal|"c_"
operator|+
name|i
argument_list|)
decl_stmt|;
name|c
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"azerty"
argument_list|)
expr_stmt|;
block|}
comment|// add more nodes (to make traversal more expensive)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|data
operator|.
name|child
argument_list|(
literal|"cx_"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|NT_BASE
argument_list|)
decl_stmt|;
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|double
name|cost
init|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"azerty"
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|traversal
init|=
operator|new
name|TraversingIndex
argument_list|()
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Estimated cost for "
operator|+
name|nodes
operator|+
literal|" nodes should not be higher than traversal ("
operator|+
name|cost
operator|+
literal|"< "
operator|+
name|traversal
operator|+
literal|")"
argument_list|,
name|cost
operator|<
name|traversal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertyLookup
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
literal|"entryCount"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"abc"
argument_list|,
literal|"def"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
comment|// plus lots of dummy content to highlight the benefit of indexing
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MANY
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|)
expr_stmt|;
block|}
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|NT_BASE
argument_list|)
decl_stmt|;
comment|// Query the index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"def"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"ghi"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MANY
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|,
name|f
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MANY
operator|+
literal|2
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|null
argument_list|,
name|f
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|cost
decl_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"xyz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
name|MANY
argument_list|)
expr_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
name|MANY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathAwarePropertyLookup
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|NT_BASE
argument_list|)
decl_stmt|;
name|f
operator|.
name|restrictPath
argument_list|(
literal|"/a"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
argument_list|)
expr_stmt|;
comment|// Query the index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|find
parameter_list|(
name|PropertyIndexLookup
name|lookup
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
name|lookup
operator|.
name|query
argument_list|(
name|filter
argument_list|,
name|name
argument_list|,
name|value
operator|==
literal|null
condition|?
literal|null
else|:
name|PropertyValues
operator|.
name|newString
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomConfigPropertyLookup
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"fooIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"extrafoo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"extrafoo"
argument_list|,
literal|"pqr"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"abc"
argument_list|,
literal|"def"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
comment|// plus lots of dummy content to highlight the benefit of indexing
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MANY
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|)
expr_stmt|;
block|}
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add an index
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|NT_BASE
argument_list|)
decl_stmt|;
comment|// Query the index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"def"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"ghi"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MANY
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|,
name|f
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"extrafoo"
argument_list|,
literal|"pqr"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"pqr"
argument_list|,
literal|"foo"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected: no index for "pqr"
block|}
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/OAK-666">OAK-666:      *      Property2Index: node type is used when indexing, but ignored when      *      querying</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testCustomConfigNodeType
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definitions
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"fooIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"extrafoo"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NT_UNSTRUCTURED
argument_list|)
argument_list|)
expr_stmt|;
name|createIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"fooIndexFile"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NT_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"abc"
argument_list|,
literal|"def"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
comment|// Query the index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"def"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"ghi"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"pqr"
argument_list|,
literal|"foo"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected: no index for "pqr"
block|}
block|}
specifier|private
specifier|static
name|FilterImpl
name|createFilter
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|String
name|nodeTypeName
parameter_list|)
block|{
name|NodeState
name|system
init|=
name|root
operator|.
name|getChildNode
argument_list|(
name|JCR_SYSTEM
argument_list|)
decl_stmt|;
name|NodeState
name|types
init|=
name|system
operator|.
name|getChildNode
argument_list|(
name|JCR_NODE_TYPES
argument_list|)
decl_stmt|;
name|NodeState
name|type
init|=
name|types
operator|.
name|getChildNode
argument_list|(
name|nodeTypeName
argument_list|)
decl_stmt|;
name|SelectorImpl
name|selector
init|=
operator|new
name|SelectorImpl
argument_list|(
name|type
argument_list|,
name|nodeTypeName
argument_list|)
decl_stmt|;
return|return
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
literal|"SELECT * FROM ["
operator|+
name|nodeTypeName
operator|+
literal|"]"
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/OAK-666">OAK-666:      *      Property2Index: node type is used when indexing, but ignored when      *      querying</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testCustomConfigNodeTypeFallback
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|EMPTY_NODE
decl_stmt|;
comment|// Add index definitions
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"fooIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"extrafoo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|createIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"fooIndexFile"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NT_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"abc"
argument_list|,
literal|"def"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add an index
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|after
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
comment|// Query the index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"def"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"ghi"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"pqr"
argument_list|,
literal|"foo"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected: no index for "pqr"
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testUnique
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|EMPTY_NODE
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"fooIndex"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"abc"
argument_list|,
literal|"def"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// should throw
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUniqueByTypeOK
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|EMPTY_NODE
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"fooIndex"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"typeFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"typeFoo"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"typeBar"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// should not throw
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testUniqueByTypeKO
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|EMPTY_NODE
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"fooIndex"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"typeFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"typeFoo"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"typeFoo"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// should throw
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUniqueByTypeDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|EMPTY_NODE
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"fooIndex"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"typeFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"typeFoo"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"typeBar"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// should not throw
block|}
block|}
end_class

end_unit

