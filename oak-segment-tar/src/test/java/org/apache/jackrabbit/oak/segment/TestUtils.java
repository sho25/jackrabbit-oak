begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
operator|.
name|RECORD_ALIGN_BITS
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|TestUtils
block|{
specifier|private
name|TestUtils
parameter_list|()
block|{}
specifier|public
specifier|static
name|RecordId
name|newRecordId
parameter_list|(
name|SegmentIdProvider
name|idProvider
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
name|SegmentId
name|id
init|=
name|idProvider
operator|.
name|newDataSegmentId
argument_list|()
decl_stmt|;
name|RecordId
name|r
init|=
operator|new
name|RecordId
argument_list|(
name|id
argument_list|,
name|newValidOffset
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|r
return|;
block|}
specifier|public
specifier|static
name|int
name|newValidOffset
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
return|return
name|random
operator|.
name|nextInt
argument_list|(
name|MAX_SEGMENT_SIZE
operator|>>
name|RECORD_ALIGN_BITS
argument_list|)
operator|<<
name|RECORD_ALIGN_BITS
return|;
block|}
comment|/**      * Returns a new valid record offset, between {@code a} and {@code b},      * exclusive.      */
specifier|public
specifier|static
name|int
name|newValidOffset
parameter_list|(
annotation|@
name|Nonnull
name|Random
name|random
parameter_list|,
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|int
name|p
init|=
operator|(
name|a
operator|>>
name|RECORD_ALIGN_BITS
operator|)
operator|+
literal|1
decl_stmt|;
name|int
name|q
init|=
operator|(
name|b
operator|>>
name|RECORD_ALIGN_BITS
operator|)
decl_stmt|;
return|return
operator|(
name|p
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|q
operator|-
name|p
argument_list|)
operator|)
operator|<<
name|RECORD_ALIGN_BITS
return|;
block|}
comment|/**      * Create a random map of record ids.      *      * @param rnd      * @param idProvider      * @param segmentCount  number of segments      * @param entriesPerSegment  number of records per segment      * @return  map of record ids      */
specifier|public
specifier|static
name|Map
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|randomRecordIdMap
parameter_list|(
name|Random
name|rnd
parameter_list|,
name|SegmentIdProvider
name|idProvider
parameter_list|,
name|int
name|segmentCount
parameter_list|,
name|int
name|entriesPerSegment
parameter_list|)
block|{
name|Map
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|map
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|segmentCount
condition|;
name|i
operator|++
control|)
block|{
name|SegmentId
name|id
init|=
name|idProvider
operator|.
name|newDataSegmentId
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|MAX_SEGMENT_SIZE
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|entriesPerSegment
condition|;
name|j
operator|++
control|)
block|{
name|offset
operator|=
name|newValidOffset
argument_list|(
name|rnd
argument_list|,
operator|(
name|entriesPerSegment
operator|-
name|j
operator|)
operator|<<
name|RECORD_ALIGN_BITS
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|RecordId
name|before
init|=
operator|new
name|RecordId
argument_list|(
name|id
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|RecordId
name|after
init|=
operator|new
name|RecordId
argument_list|(
name|idProvider
operator|.
name|newDataSegmentId
argument_list|()
argument_list|,
name|newValidOffset
argument_list|(
name|rnd
argument_list|,
literal|0
argument_list|,
name|MAX_SEGMENT_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
block|}
end_class

end_unit

