begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|COMMIT_ROOT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|setCommitRoot
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|setModified
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|TestUtils
operator|.
name|merge
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
operator|.
name|Operation
operator|.
name|Type
operator|.
name|REMOVE_MAP_ENTRY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
operator|.
name|Operation
operator|.
name|Type
operator|.
name|SET_MAP_ENTRY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|getIdFromPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|NodeDocumentSweeperTest
block|{
annotation|@
name|Rule
specifier|public
name|DocumentMKBuilderProvider
name|builderProvider
init|=
operator|new
name|DocumentMKBuilderProvider
argument_list|()
decl_stmt|;
specifier|private
name|Clock
name|clock
decl_stmt|;
specifier|private
name|DocumentNodeStore
name|ns
decl_stmt|;
specifier|private
name|DocumentMK
name|mk
decl_stmt|;
specifier|private
name|DocumentStore
name|store
decl_stmt|;
specifier|private
name|MissingLastRevSeeker
name|seeker
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|clock
operator|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|DocumentMK
operator|.
name|Builder
name|builder
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|mk
operator|=
name|builder
operator|.
name|open
argument_list|()
expr_stmt|;
name|ns
operator|=
name|builder
operator|.
name|getNodeStore
argument_list|()
expr_stmt|;
name|store
operator|=
name|ns
operator|.
name|getDocumentStore
argument_list|()
expr_stmt|;
name|seeker
operator|=
name|builder
operator|.
name|createMissingLastRevSeeker
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|resetClock
parameter_list|()
block|{
name|Revision
operator|.
name|resetClockToDefault
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sweepUncommittedBeforeHead
parameter_list|()
throws|throws
name|Exception
block|{
name|Revision
name|uncommitted
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|NodeBuilder
name|b
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|ns
operator|.
name|runBackgroundUpdateOperations
argument_list|()
expr_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|op
operator|.
name|setMapEntry
argument_list|(
literal|"foo"
argument_list|,
name|uncommitted
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|setCommitRoot
argument_list|(
name|op
argument_list|,
name|uncommitted
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|setModified
argument_list|(
name|op
argument_list|,
name|uncommitted
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|store
operator|.
name|findAndUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|ops
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Revision
name|nextSweepStart
init|=
name|sweep
argument_list|(
name|ops
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ns
operator|.
name|getHeadRevision
argument_list|()
operator|.
name|getRevision
argument_list|(
name|ns
operator|.
name|getClusterId
argument_list|()
argument_list|)
argument_list|,
name|nextSweepStart
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|=
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Key
argument_list|,
name|Operation
argument_list|>
name|changes
init|=
name|op
operator|.
name|getChanges
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|changes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Operation
name|o
init|=
name|changes
operator|.
name|get
argument_list|(
operator|new
name|Key
argument_list|(
name|COMMIT_ROOT
argument_list|,
name|uncommitted
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REMOVE_MAP_ENTRY
argument_list|,
name|o
operator|.
name|type
argument_list|)
expr_stmt|;
name|o
operator|=
name|changes
operator|.
name|get
argument_list|(
operator|new
name|Key
argument_list|(
literal|"foo"
argument_list|,
name|uncommitted
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REMOVE_MAP_ENTRY
argument_list|,
name|o
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sweepUncommittedAfterHead
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|b
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|ns
operator|.
name|runBackgroundUpdateOperations
argument_list|()
expr_stmt|;
name|Revision
name|uncommitted
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|op
operator|.
name|setMapEntry
argument_list|(
literal|"foo"
argument_list|,
name|uncommitted
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|setCommitRoot
argument_list|(
name|op
argument_list|,
name|uncommitted
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|setModified
argument_list|(
name|op
argument_list|,
name|uncommitted
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|store
operator|.
name|findAndUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|ops
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Revision
name|nextSweepStart
init|=
name|sweep
argument_list|(
name|ops
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ns
operator|.
name|getHeadRevision
argument_list|()
operator|.
name|getRevision
argument_list|(
name|ns
operator|.
name|getClusterId
argument_list|()
argument_list|)
argument_list|,
name|nextSweepStart
argument_list|)
expr_stmt|;
comment|// must not sweep change newer than head
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sweepUnmergedBranchCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|b
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/test"
argument_list|,
literal|"^\"foo\":\"value\""
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// force a new head revision newer than branch commit
name|b
operator|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|b
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|ns
operator|.
name|runBackgroundUpdateOperations
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|ops
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Revision
name|nextSweepStart
init|=
name|sweep
argument_list|(
name|ops
argument_list|)
decl_stmt|;
comment|// must not touch branch
name|assertEquals
argument_list|(
name|ns
operator|.
name|getHeadRevision
argument_list|()
operator|.
name|getRevision
argument_list|(
name|ns
operator|.
name|getClusterId
argument_list|()
argument_list|)
argument_list|,
name|nextSweepStart
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sweepMergedBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"bar\":{}"
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"baz\":{}"
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ns
operator|.
name|runBackgroundUpdateOperations
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|ops
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Revision
name|nextSweepStart
init|=
name|sweep
argument_list|(
name|ops
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ns
operator|.
name|getHeadRevision
argument_list|()
operator|.
name|getRevision
argument_list|(
name|ns
operator|.
name|getClusterId
argument_list|()
argument_list|)
argument_list|,
name|nextSweepStart
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|updatePre18Branch
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ns
operator|.
name|runBackgroundUpdateOperations
argument_list|()
expr_stmt|;
comment|// simulate a pre 1.8 branch commit by removing the branch commit entry
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|getLocalBranchCommits
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|doc
operator|.
name|getId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Revision
name|r
range|:
name|doc
operator|.
name|getLocalBranchCommits
argument_list|()
control|)
block|{
name|NodeDocument
operator|.
name|removeBranchCommit
argument_list|(
name|op
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|store
operator|.
name|findAndUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|ops
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Revision
name|nextSweepStart
init|=
name|sweep
argument_list|(
name|ops
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ns
operator|.
name|getHeadRevision
argument_list|()
operator|.
name|getRevision
argument_list|(
name|ns
operator|.
name|getClusterId
argument_list|()
argument_list|)
argument_list|,
name|nextSweepStart
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|=
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Key
argument_list|,
name|Operation
argument_list|>
name|changes
init|=
name|op
operator|.
name|getChanges
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|changes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Key
name|k
init|=
name|changes
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"_bc"
argument_list|,
name|k
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SET_MAP_ENTRY
argument_list|,
name|changes
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Revision
name|sweep
parameter_list|(
specifier|final
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|ops
parameter_list|)
throws|throws
name|Exception
block|{
name|NodeDocumentSweeper
name|sweeper
init|=
operator|new
name|NodeDocumentSweeper
argument_list|(
name|ns
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Revision
name|startRev
init|=
name|ns
operator|.
name|getSweepRevisions
argument_list|()
operator|.
name|getRevision
argument_list|(
name|ns
operator|.
name|getClusterId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|startRev
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|docs
init|=
name|seeker
operator|.
name|getCandidates
argument_list|(
name|startRev
operator|.
name|getTimestamp
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|sweeper
operator|.
name|sweep
argument_list|(
name|docs
argument_list|,
operator|new
name|NodeDocumentSweepListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|sweepUpdate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|UpdateOp
argument_list|>
name|updates
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
name|ops
operator|.
name|addAll
argument_list|(
name|updates
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

