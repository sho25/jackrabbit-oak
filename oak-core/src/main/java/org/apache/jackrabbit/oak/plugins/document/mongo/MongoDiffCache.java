begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|MemoryDiffCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Revision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|StableRevisionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Striped
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObjectBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|WriteConcern
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * A diff cache implementation using a capped collection as a secondary cache.  */
end_comment

begin_class
specifier|public
class|class
name|MongoDiffCache
extends|extends
name|MemoryDiffCache
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MongoDiffCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|MB
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION_NAME
init|=
literal|"changes"
decl_stmt|;
specifier|private
specifier|final
name|DBCollection
name|changes
decl_stmt|;
specifier|private
specifier|final
name|Cache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|blacklist
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Striped
argument_list|<
name|Lock
argument_list|>
name|locks
init|=
name|Striped
operator|.
name|lock
argument_list|(
literal|16
argument_list|)
decl_stmt|;
specifier|public
name|MongoDiffCache
parameter_list|(
name|DB
name|db
parameter_list|,
name|int
name|sizeMB
parameter_list|,
name|DocumentMK
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|collectionExists
argument_list|(
name|COLLECTION_NAME
argument_list|)
condition|)
block|{
name|changes
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|COLLECTION_NAME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|changes
operator|=
name|db
operator|.
name|createCollection
argument_list|(
name|COLLECTION_NAME
argument_list|,
name|BasicDBObjectBuilder
operator|.
name|start
argument_list|()
operator|.
name|add
argument_list|(
literal|"capped"
argument_list|,
literal|true
argument_list|)
operator|.
name|add
argument_list|(
literal|"size"
argument_list|,
name|sizeMB
operator|*
name|MB
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|String
name|getChanges
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|from
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|to
parameter_list|,
annotation|@
name|Nonnull
name|String
name|path
parameter_list|,
annotation|@
name|Nullable
name|Loader
name|loader
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|locks
operator|.
name|get
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|String
name|changes
init|=
name|getChangesInternal
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|changes
operator|==
literal|null
operator|&&
name|loader
operator|!=
literal|null
condition|)
block|{
name|changes
operator|=
name|loader
operator|.
name|call
argument_list|()
expr_stmt|;
comment|// put into memory cache
name|super
operator|.
name|newEntry
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
literal|false
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|changes
argument_list|)
expr_stmt|;
block|}
return|return
name|changes
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Entry
name|newEntry
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Revision
name|from
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|Revision
name|to
parameter_list|,
name|boolean
name|local
comment|/*ignored*/
parameter_list|)
block|{
return|return
operator|new
name|MemoryEntry
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
block|{
specifier|private
name|Diff
name|commit
init|=
operator|new
name|Diff
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|append
parameter_list|(
annotation|@
name|Nonnull
name|String
name|path
parameter_list|,
annotation|@
name|Nonnull
name|String
name|changes
parameter_list|)
block|{
comment|// super.append() will apply to diff cache in base class
name|super
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|changes
argument_list|)
expr_stmt|;
name|commit
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|changes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|done
parameter_list|()
block|{
try|try
block|{
comment|// do not write back if doc is too big
if|if
condition|(
name|commit
operator|.
name|size
operator|<
literal|16
operator|*
literal|1024
operator|*
literal|1024
condition|)
block|{
name|changes
operator|.
name|insert
argument_list|(
name|commit
operator|.
name|doc
argument_list|,
name|WriteConcern
operator|.
name|UNACKNOWLEDGED
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|MongoException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Write back of diff cache entry failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
specifier|private
name|String
name|getChangesInternal
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|from
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|to
parameter_list|,
annotation|@
name|Nonnull
name|String
name|path
parameter_list|)
block|{
comment|// first try to serve from cache
name|String
name|diff
init|=
name|super
operator|.
name|getChanges
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|null
condition|)
block|{
return|return
name|diff
return|;
block|}
if|if
condition|(
name|from
operator|.
name|getClusterId
argument_list|()
operator|!=
name|to
operator|.
name|getClusterId
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// check blacklist
if|if
condition|(
name|blacklist
operator|.
name|getIfPresent
argument_list|(
name|from
operator|+
literal|"/"
operator|+
name|to
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Revision
name|id
init|=
name|to
decl_stmt|;
name|Diff
name|d
init|=
literal|null
decl_stmt|;
name|int
name|numCommits
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
comment|// grab from mongo
name|DBObject
name|obj
init|=
name|changes
operator|.
name|findOne
argument_list|(
operator|new
name|BasicDBObject
argument_list|(
literal|"_id"
argument_list|,
name|id
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|numCommits
operator|++
expr_stmt|;
if|if
condition|(
name|numCommits
operator|>
literal|32
condition|)
block|{
comment|// do not merge more than 32 commits
name|blacklist
operator|.
name|put
argument_list|(
name|from
operator|+
literal|"/"
operator|+
name|to
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
name|d
operator|=
operator|new
name|Diff
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|.
name|mergeBeforeDiff
argument_list|(
operator|new
name|Diff
argument_list|(
name|obj
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// the from revision of the current diff
name|id
operator|=
name|Revision
operator|.
name|fromString
argument_list|(
operator|(
name|String
operator|)
name|obj
operator|.
name|get
argument_list|(
literal|"_b"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|from
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
comment|// diff is complete
name|LOG
operator|.
name|debug
argument_list|(
literal|"Built diff from {} commits"
argument_list|,
name|numCommits
argument_list|)
expr_stmt|;
comment|// apply to diff cache and serve later requests from cache
name|d
operator|.
name|applyToEntry
argument_list|(
name|super
operator|.
name|newEntry
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|done
argument_list|()
expr_stmt|;
comment|// return changes
return|return
name|d
operator|.
name|getChanges
argument_list|(
name|path
argument_list|)
return|;
block|}
if|if
condition|(
name|StableRevisionComparator
operator|.
name|INSTANCE
operator|.
name|compare
argument_list|(
name|id
argument_list|,
name|from
argument_list|)
operator|<
literal|0
condition|)
block|{
break|break;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|static
class|class
name|Diff
block|{
specifier|private
specifier|final
name|DBObject
name|doc
decl_stmt|;
specifier|private
name|long
name|size
decl_stmt|;
name|Diff
parameter_list|(
name|Revision
name|from
parameter_list|,
name|Revision
name|to
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
name|this
operator|.
name|doc
operator|.
name|put
argument_list|(
literal|"_id"
argument_list|,
name|to
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|doc
operator|.
name|put
argument_list|(
literal|"_b"
argument_list|,
name|from
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Diff
parameter_list|(
name|DBObject
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
block|}
name|void
name|append
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|changes
parameter_list|)
block|{
name|DBObject
name|current
init|=
name|doc
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|String
name|escName
init|=
name|Utils
operator|.
name|escapePropertyName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|containsField
argument_list|(
name|escName
argument_list|)
condition|)
block|{
name|current
operator|=
operator|(
name|DBObject
operator|)
name|current
operator|.
name|get
argument_list|(
name|escName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BasicDBObject
name|child
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|current
operator|.
name|put
argument_list|(
name|escName
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|current
operator|=
name|child
expr_stmt|;
name|size
operator|+=
name|escName
operator|.
name|length
argument_list|()
operator|*
literal|2
operator|+
literal|8
expr_stmt|;
block|}
block|}
name|current
operator|.
name|put
argument_list|(
literal|"_c"
argument_list|,
name|checkNotNull
argument_list|(
name|changes
argument_list|)
argument_list|)
expr_stmt|;
name|size
operator|+=
literal|4
operator|+
name|changes
operator|.
name|length
argument_list|()
operator|*
literal|2
operator|+
literal|8
expr_stmt|;
block|}
name|String
name|getChanges
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|DBObject
name|current
init|=
name|doc
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|String
name|n
init|=
name|Utils
operator|.
name|unescapePropertyName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|current
operator|=
operator|(
name|DBObject
operator|)
name|current
operator|.
name|get
argument_list|(
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|current
operator|==
literal|null
operator|||
operator|!
name|current
operator|.
name|containsField
argument_list|(
literal|"_c"
argument_list|)
condition|)
block|{
comment|// no changes here
return|return
literal|""
return|;
block|}
else|else
block|{
return|return
name|current
operator|.
name|get
argument_list|(
literal|"_c"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
name|Entry
name|applyToEntry
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|applyInternal
argument_list|(
name|doc
argument_list|,
literal|"/"
argument_list|,
name|entry
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
name|void
name|mergeBeforeDiff
parameter_list|(
name|Diff
name|before
parameter_list|)
block|{
name|mergeInternal
argument_list|(
name|doc
argument_list|,
name|before
operator|.
name|doc
argument_list|,
name|Sets
operator|.
expr|<
name|String
operator|>
name|newHashSet
argument_list|()
argument_list|,
name|Sets
operator|.
expr|<
name|String
operator|>
name|newHashSet
argument_list|()
argument_list|,
name|Sets
operator|.
expr|<
name|String
operator|>
name|newHashSet
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|put
argument_list|(
literal|"_b"
argument_list|,
name|before
operator|.
name|doc
operator|.
name|get
argument_list|(
literal|"_b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|mergeInternal
parameter_list|(
name|DBObject
name|doc
parameter_list|,
name|DBObject
name|before
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|added
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removed
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|modified
parameter_list|)
block|{
name|added
operator|.
name|clear
argument_list|()
expr_stmt|;
name|removed
operator|.
name|clear
argument_list|()
expr_stmt|;
name|modified
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|changes
init|=
operator|(
name|String
operator|)
name|doc
operator|.
name|get
argument_list|(
literal|"_c"
argument_list|)
decl_stmt|;
if|if
condition|(
name|changes
operator|!=
literal|null
condition|)
block|{
name|parse
argument_list|(
name|changes
argument_list|,
operator|new
name|ParserCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|added
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|added
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removed
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|removed
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modified
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|modified
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|changes
operator|=
operator|(
name|String
operator|)
name|before
operator|.
name|get
argument_list|(
literal|"_c"
argument_list|)
expr_stmt|;
if|if
condition|(
name|changes
operator|!=
literal|null
condition|)
block|{
name|parse
argument_list|(
name|changes
argument_list|,
operator|new
name|ParserCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|added
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|modified
operator|.
name|remove
argument_list|(
name|name
argument_list|)
operator|||
operator|!
name|removed
operator|.
name|remove
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|added
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removed
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|added
operator|.
name|remove
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|modified
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|removed
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|modified
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|added
operator|.
name|remove
argument_list|(
name|name
argument_list|)
operator|||
operator|!
name|removed
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|modified
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|doc
operator|.
name|put
argument_list|(
literal|"_c"
argument_list|,
name|serialize
argument_list|(
name|added
argument_list|,
name|removed
argument_list|,
name|modified
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// merge recursively
for|for
control|(
name|String
name|k
range|:
name|before
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|Utils
operator|.
name|isPropertyName
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|DBObject
name|beforeChild
init|=
operator|(
name|DBObject
operator|)
name|before
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|DBObject
name|thisChild
init|=
operator|(
name|DBObject
operator|)
name|doc
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|thisChild
operator|==
literal|null
condition|)
block|{
name|thisChild
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
name|doc
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|thisChild
argument_list|)
expr_stmt|;
block|}
name|mergeInternal
argument_list|(
name|thisChild
argument_list|,
name|beforeChild
argument_list|,
name|added
argument_list|,
name|removed
argument_list|,
name|modified
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|serialize
parameter_list|(
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|added
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removed
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|modified
parameter_list|)
block|{
name|JsopWriter
name|w
init|=
operator|new
name|JsopStream
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|added
control|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|p
range|:
name|removed
control|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'-'
argument_list|)
operator|.
name|value
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|p
range|:
name|modified
control|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
return|return
name|w
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|parse
parameter_list|(
name|String
name|changes
parameter_list|,
name|ParserCallback
name|callback
parameter_list|)
block|{
name|JsopTokenizer
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|changes
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|r
init|=
name|t
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|JsopReader
operator|.
name|END
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|r
condition|)
block|{
case|case
literal|'+'
case|:
block|{
name|callback
operator|.
name|added
argument_list|(
name|t
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'-'
case|:
block|{
name|callback
operator|.
name|removed
argument_list|(
name|t
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'^'
case|:
block|{
name|callback
operator|.
name|modified
argument_list|(
name|t
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"jsonDiff: illegal token '"
operator|+
name|t
operator|.
name|getToken
argument_list|()
operator|+
literal|"' at pos: "
operator|+
name|t
operator|.
name|getLastPos
argument_list|()
operator|+
literal|' '
operator|+
name|changes
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|applyInternal
parameter_list|(
name|DBObject
name|obj
parameter_list|,
name|String
name|path
parameter_list|,
name|Entry
name|entry
parameter_list|)
block|{
name|String
name|diff
init|=
operator|(
name|String
operator|)
name|obj
operator|.
name|get
argument_list|(
literal|"_c"
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|k
range|:
name|obj
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|Utils
operator|.
name|isPropertyName
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|Utils
operator|.
name|unescapePropertyName
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|applyInternal
argument_list|(
operator|(
name|DBObject
operator|)
name|obj
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
interface|interface
name|ParserCallback
block|{
name|void
name|added
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
name|void
name|removed
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
name|void
name|modified
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
block|}
block|}
block|}
end_class

end_unit

