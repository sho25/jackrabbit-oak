begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|upgrade
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|DECLARING_NODE_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|DISABLE_INDEXES_ON_NEXT_CYCLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|SUPERSEDED_INDEX_PATHS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|TYPE_DISABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
import|;
end_import

begin_comment
comment|/**  * Checks and mark old indexes as disabled. It looks for IndexConstants#SUPERSEDED_INDEX_PATHS  * for the index paths which need to be marked as disabled. The index paths can refer to absolute  * index path or nodeTypes like /oak:index/nodetype/@foo where 'foo' is one of the nodetype indexed  * by /oak:index/nodetype  */
end_comment

begin_class
specifier|public
class|class
name|IndexDisabler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IndexDisabler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|NodeBuilder
name|rootBuilder
decl_stmt|;
specifier|public
name|IndexDisabler
parameter_list|(
name|NodeBuilder
name|rootBuilder
parameter_list|)
block|{
name|this
operator|.
name|rootBuilder
operator|=
name|rootBuilder
expr_stmt|;
block|}
specifier|public
name|boolean
name|markDisableFlagIfRequired
parameter_list|(
name|String
name|currentIndexPath
parameter_list|,
name|NodeBuilder
name|idxBuilder
parameter_list|)
block|{
name|boolean
name|disableRequired
init|=
name|isAnyIndexToBeDisabled
argument_list|(
name|currentIndexPath
argument_list|,
name|idxBuilder
argument_list|)
decl_stmt|;
if|if
condition|(
name|disableRequired
condition|)
block|{
name|idxBuilder
operator|.
name|setProperty
argument_list|(
name|DISABLE_INDEXES_ON_NEXT_CYCLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|disableRequired
return|;
block|}
specifier|private
name|boolean
name|isAnyIndexToBeDisabled
parameter_list|(
name|String
name|currentIndexPath
parameter_list|,
name|NodeBuilder
name|idxBuilder
parameter_list|)
block|{
name|PropertyState
name|indexPathsProp
init|=
name|idxBuilder
operator|.
name|getProperty
argument_list|(
name|SUPERSEDED_INDEX_PATHS
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexPathsProp
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Iterable
argument_list|<
name|String
argument_list|>
name|indexPaths
init|=
name|indexPathsProp
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|indexPath
range|:
name|indexPaths
control|)
block|{
if|if
condition|(
name|isNodeTypePath
argument_list|(
name|indexPath
argument_list|)
condition|)
block|{
name|String
name|nodeTypeName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|indexPath
argument_list|)
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|nodeTypeIndexPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
name|NodeState
name|idxSate
init|=
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|rootBuilder
operator|.
name|getBaseState
argument_list|()
argument_list|,
name|nodeTypeIndexPath
argument_list|)
decl_stmt|;
name|PropertyState
name|declaredNodeTypes
init|=
name|idxSate
operator|.
name|getProperty
argument_list|(
name|DECLARING_NODE_TYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|idxSate
operator|.
name|exists
argument_list|()
operator|&&
name|declaredNodeTypes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Iterables
operator|.
name|contains
argument_list|(
name|declaredNodeTypes
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
argument_list|,
name|nodeTypeName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
else|else
block|{
name|NodeState
name|idxSate
init|=
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|rootBuilder
operator|.
name|getBaseState
argument_list|()
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|idxSate
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|TYPE_DISABLED
operator|.
name|equals
argument_list|(
name|idxSate
operator|.
name|getString
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|disableOldIndexes
parameter_list|(
name|String
name|currentIndexPath
parameter_list|,
name|NodeBuilder
name|idxBuilder
parameter_list|)
block|{
name|PropertyState
name|indexPathsProp
init|=
name|idxBuilder
operator|.
name|getProperty
argument_list|(
name|SUPERSEDED_INDEX_PATHS
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexPathsProp
operator|==
literal|null
condition|)
block|{
return|return
name|emptyList
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|idxBuilder
operator|.
name|getBoolean
argument_list|(
name|DISABLE_INDEXES_ON_NEXT_CYCLE
argument_list|)
condition|)
block|{
return|return
name|emptyList
argument_list|()
return|;
block|}
comment|//Skip disabling for the cycle where reindexing just got completed
if|if
condition|(
name|idxBuilder
operator|.
name|isReplaced
argument_list|(
name|DISABLE_INDEXES_ON_NEXT_CYCLE
argument_list|)
condition|)
block|{
return|return
name|emptyList
argument_list|()
return|;
block|}
name|Iterable
argument_list|<
name|String
argument_list|>
name|indexPaths
init|=
name|indexPathsProp
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|disabledIndexes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|indexPath
range|:
name|indexPaths
control|)
block|{
if|if
condition|(
name|isNodeTypePath
argument_list|(
name|indexPath
argument_list|)
condition|)
block|{
name|String
name|nodeTypeName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|indexPath
argument_list|)
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|nodeTypeIndexPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
name|NodeBuilder
name|nodeTypeIndexBuilder
init|=
name|child
argument_list|(
name|rootBuilder
argument_list|,
name|nodeTypeIndexPath
argument_list|)
decl_stmt|;
name|PropertyState
name|declaringNodeTypes
init|=
name|nodeTypeIndexBuilder
operator|.
name|getProperty
argument_list|(
name|DECLARING_NODE_TYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeTypeIndexBuilder
operator|.
name|exists
argument_list|()
operator|&&
name|declaringNodeTypes
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|existingTypes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|declaringNodeTypes
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingTypes
operator|.
name|remove
argument_list|(
name|nodeTypeName
argument_list|)
condition|)
block|{
name|disabledIndexes
operator|.
name|add
argument_list|(
name|indexPath
argument_list|)
expr_stmt|;
name|nodeTypeIndexBuilder
operator|.
name|setProperty
argument_list|(
name|DECLARING_NODE_TYPES
argument_list|,
name|existingTypes
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|NodeBuilder
name|disabledIndexBuilder
init|=
name|child
argument_list|(
name|rootBuilder
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|disabledIndexBuilder
operator|.
name|exists
argument_list|()
condition|)
block|{
name|disabledIndexBuilder
operator|.
name|setProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|,
name|TYPE_DISABLED
argument_list|)
expr_stmt|;
name|disabledIndexes
operator|.
name|add
argument_list|(
name|indexPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|disabledIndexes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Index at [{}] supersedes indexes {}. Marking those as disabled"
argument_list|,
name|currentIndexPath
argument_list|,
name|disabledIndexes
argument_list|)
expr_stmt|;
name|idxBuilder
operator|.
name|removeProperty
argument_list|(
name|DISABLE_INDEXES_ON_NEXT_CYCLE
argument_list|)
expr_stmt|;
block|}
return|return
name|disabledIndexes
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isNodeTypePath
parameter_list|(
name|String
name|indexPath
parameter_list|)
block|{
name|String
name|lastPathSegment
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
return|return
name|lastPathSegment
operator|.
name|startsWith
argument_list|(
literal|"@"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|NodeBuilder
name|child
parameter_list|(
name|NodeBuilder
name|nb
parameter_list|,
name|String
name|path
parameter_list|)
block|{
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|checkNotNull
argument_list|(
name|path
argument_list|)
argument_list|)
control|)
block|{
name|nb
operator|=
name|nb
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|nb
return|;
block|}
block|}
end_class

end_unit

