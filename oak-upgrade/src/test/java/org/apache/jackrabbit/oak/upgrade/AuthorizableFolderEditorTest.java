begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|TypeSafeMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
specifier|public
class|class
name|AuthorizableFolderEditorTest
extends|extends
name|AbstractRepositoryUpgradeTest
block|{
comment|// this repository config sets the groupsPath and usersPath to match
comment|// this tests expectations
specifier|private
specifier|static
specifier|final
name|String
name|REPOSITORY_XML_FILE
init|=
literal|"repository-groupmember.xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_GROUP
init|=
literal|"AuthorizableFolderEditorTest-Group"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_USER
init|=
literal|"AuthorizableFolderEditorTest-User"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HOME_PATH
init|=
literal|"/home"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GROUPS_PATH
init|=
name|HOME_PATH
operator|+
literal|"/groups"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USERS_PATH
init|=
name|HOME_PATH
operator|+
literal|"/users"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONTROL_PATH
init|=
name|HOME_PATH
operator|+
literal|"/control"
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|createSourceContent
parameter_list|(
specifier|final
name|Session
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|UserManager
name|userMgr
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|session
operator|)
operator|.
name|getUserManager
argument_list|()
decl_stmt|;
name|userMgr
operator|.
name|autoSave
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Group
name|group
init|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|TEST_GROUP
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|TEST_USER
argument_list|,
literal|"secret"
argument_list|)
decl_stmt|;
name|group
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// simulate the error, set node types to incorrect values
name|Node
name|home
init|=
name|session
operator|.
name|getNode
argument_list|(
literal|"/home"
argument_list|)
decl_stmt|;
name|home
operator|.
name|setPrimaryType
argument_list|(
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|home
operator|.
name|getNode
argument_list|(
literal|"users"
argument_list|)
operator|.
name|setPrimaryType
argument_list|(
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|home
operator|.
name|getNode
argument_list|(
literal|"groups"
argument_list|)
operator|.
name|setPrimaryType
argument_list|(
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|home
operator|.
name|addNode
argument_list|(
literal|"control"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getRepositoryConfig
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|REPOSITORY_XML_FILE
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|verifyCorrectedNodeTypes
parameter_list|()
throws|throws
name|RepositoryException
block|{
specifier|final
name|Session
name|session
init|=
name|createAdminSession
argument_list|()
decl_stmt|;
name|assertExisting
argument_list|(
name|session
argument_list|,
name|HOME_PATH
argument_list|,
name|USERS_PATH
argument_list|,
name|GROUPS_PATH
argument_list|,
name|CONTROL_PATH
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|session
operator|.
name|getNode
argument_list|(
name|HOME_PATH
argument_list|)
argument_list|,
name|hasNodeType
argument_list|(
name|UserConstants
operator|.
name|NT_REP_AUTHORIZABLE_FOLDER
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|session
operator|.
name|getNode
argument_list|(
name|USERS_PATH
argument_list|)
argument_list|,
name|hasNodeType
argument_list|(
name|UserConstants
operator|.
name|NT_REP_AUTHORIZABLE_FOLDER
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|session
operator|.
name|getNode
argument_list|(
name|GROUPS_PATH
argument_list|)
argument_list|,
name|hasNodeType
argument_list|(
name|UserConstants
operator|.
name|NT_REP_AUTHORIZABLE_FOLDER
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|session
operator|.
name|getNode
argument_list|(
name|CONTROL_PATH
argument_list|)
argument_list|,
name|hasNodeType
argument_list|(
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Matcher
argument_list|<
name|?
super|super
name|Node
argument_list|>
name|hasNodeType
parameter_list|(
specifier|final
name|String
name|expectedNodeType
parameter_list|)
block|{
return|return
operator|new
name|TypeSafeMatcher
argument_list|<
name|Node
argument_list|>
argument_list|()
block|{
specifier|private
name|String
name|path
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|boolean
name|matchesSafely
parameter_list|(
specifier|final
name|Node
name|node
parameter_list|)
block|{
name|path
operator|=
name|getPath
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|getNodeTypeName
argument_list|(
name|node
argument_list|)
operator|.
name|equals
argument_list|(
name|expectedNodeType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|describeTo
parameter_list|(
specifier|final
name|Description
name|description
parameter_list|)
block|{
name|description
operator|.
name|appendText
argument_list|(
literal|"the node "
operator|+
name|path
operator|+
literal|" to be of type "
argument_list|)
operator|.
name|appendValue
argument_list|(
name|expectedNodeType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|describeMismatchSafely
parameter_list|(
specifier|final
name|Node
name|node
parameter_list|,
specifier|final
name|Description
name|mismatchDescription
parameter_list|)
block|{
name|mismatchDescription
operator|.
name|appendText
argument_list|(
literal|" was "
argument_list|)
operator|.
name|appendValue
argument_list|(
name|getNodeTypeName
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getNodeTypeName
parameter_list|(
specifier|final
name|Node
name|node
parameter_list|)
block|{
try|try
block|{
return|return
name|node
operator|.
name|getPrimaryNodeType
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|getPath
parameter_list|(
specifier|final
name|Node
name|node
parameter_list|)
block|{
try|try
block|{
return|return
name|node
operator|.
name|getPath
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

