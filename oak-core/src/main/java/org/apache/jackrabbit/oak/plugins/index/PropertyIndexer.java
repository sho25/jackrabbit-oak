begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|unique
operator|.
name|UniqueIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|PrefixContentIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|PropertyContentIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|IndexUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_class
specifier|public
class|class
name|PropertyIndexer
implements|implements
name|QueryIndexProvider
implements|,
name|CommitHook
implements|,
name|PropertyIndexConstants
block|{
specifier|private
specifier|final
name|String
name|indexConfigPath
init|=
name|IndexUtils
operator|.
name|DEFAULT_INDEX_HOME
decl_stmt|;
specifier|private
specifier|final
name|Indexer
name|indexer
decl_stmt|;
specifier|public
name|PropertyIndexer
parameter_list|(
name|Indexer
name|indexer
parameter_list|)
block|{
name|this
operator|.
name|indexer
operator|=
name|indexer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|processCommit
parameter_list|(
name|NodeStore
name|store
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
comment|// TODO update index data see OAK-298
return|return
name|after
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|QueryIndex
argument_list|>
name|getQueryIndexes
parameter_list|(
name|NodeStore
name|store
parameter_list|)
block|{
name|List
argument_list|<
name|QueryIndex
argument_list|>
name|queryIndexList
init|=
operator|new
name|ArrayList
argument_list|<
name|QueryIndex
argument_list|>
argument_list|()
decl_stmt|;
name|NodeBuilder
name|rootBuilder
init|=
name|IndexUtils
operator|.
name|getChildBuilder
argument_list|(
name|store
argument_list|,
name|indexConfigPath
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IndexDefinition
argument_list|>
name|indexDefinitions
init|=
name|IndexUtils
operator|.
name|buildIndexDefinitions
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
argument_list|,
name|indexConfigPath
argument_list|,
name|INDEX_TYPE_PROPERTY
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexDefinition
name|def
range|:
name|indexDefinitions
control|)
block|{
name|NodeBuilder
name|builder
init|=
name|rootBuilder
operator|.
name|getChildBuilder
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// create the global :data node
name|builder
operator|.
name|getChildBuilder
argument_list|(
name|INDEX_CONTENT
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|k
range|:
name|builder
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
name|PropertyIndex
name|prop
init|=
name|PropertyIndex
operator|.
name|fromNodeName
argument_list|(
name|indexer
argument_list|,
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
condition|)
block|{
comment|// create the :data node
name|builder
operator|.
name|getChildBuilder
argument_list|(
name|prop
operator|.
name|getIndexNodeName
argument_list|()
argument_list|)
operator|.
name|getChildBuilder
argument_list|(
name|INDEX_CONTENT
argument_list|)
expr_stmt|;
name|queryIndexList
operator|.
name|add
argument_list|(
operator|new
name|PropertyContentIndex
argument_list|(
name|prop
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PrefixIndex
name|pref
init|=
name|PrefixIndex
operator|.
name|fromNodeName
argument_list|(
name|indexer
argument_list|,
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
condition|)
block|{
comment|// create the :data node
name|builder
operator|.
name|getChildBuilder
argument_list|(
name|pref
operator|.
name|getIndexNodeName
argument_list|()
argument_list|)
operator|.
name|getChildBuilder
argument_list|(
name|INDEX_CONTENT
argument_list|)
expr_stmt|;
name|queryIndexList
operator|.
name|add
argument_list|(
operator|new
name|PrefixContentIndex
argument_list|(
name|pref
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|queryIndexList
operator|.
name|add
argument_list|(
operator|new
name|UniqueIndex
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|queryIndexList
return|;
block|}
block|}
end_class

end_unit

