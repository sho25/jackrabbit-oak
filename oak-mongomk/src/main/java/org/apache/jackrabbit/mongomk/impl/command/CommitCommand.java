begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|instruction
operator|.
name|Instruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Commit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|MongoNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|action
operator|.
name|FetchCommitAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|action
operator|.
name|FetchNodesAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|action
operator|.
name|ReadAndIncHeadRevisionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|action
operator|.
name|SaveAndSetHeadRevisionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|action
operator|.
name|SaveCommitAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|action
operator|.
name|SaveNodesAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|command
operator|.
name|exception
operator|.
name|ConflictingCommitException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|exception
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|instruction
operator|.
name|CommitCommandInstructionVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|MongoCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|MongoNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|MongoSync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|WriteResult
import|;
end_import

begin_comment
comment|/**  * {@code Command} for {@code MongoMicroKernel#commit(String, String, String, String)}  */
end_comment

begin_class
specifier|public
class|class
name|CommitCommand
extends|extends
name|BaseCommand
argument_list|<
name|Long
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CommitCommand
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MongoCommit
name|commit
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|affectedPaths
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MongoNode
argument_list|>
name|existingNodes
decl_stmt|;
specifier|private
name|MongoSync
name|syncMongo
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|MongoNode
argument_list|>
name|nodeMongos
decl_stmt|;
specifier|private
name|Long
name|revisionId
decl_stmt|;
specifier|private
name|String
name|branchId
decl_stmt|;
comment|/**      * Constructs a new {@code CommitCommandMongo}.      *      * @param nodeStore Node store.      * @param commit {@link Commit}      */
specifier|public
name|CommitCommand
parameter_list|(
name|MongoNodeStore
name|nodeStore
parameter_list|,
name|Commit
name|commit
parameter_list|)
block|{
name|super
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
name|this
operator|.
name|commit
operator|=
operator|(
name|MongoCommit
operator|)
name|commit
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Trying to commit: %s"
argument_list|,
name|commit
operator|.
name|getDiff
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|readAndIncHeadRevision
argument_list|()
expr_stmt|;
name|createRevision
argument_list|()
expr_stmt|;
name|readBranchIdFromBaseCommit
argument_list|()
expr_stmt|;
name|createMongoNodes
argument_list|()
expr_stmt|;
name|prepareCommit
argument_list|()
expr_stmt|;
name|readExistingNodes
argument_list|()
expr_stmt|;
name|mergeNodes
argument_list|()
expr_stmt|;
name|prepareMongoNodes
argument_list|()
expr_stmt|;
name|saveNodes
argument_list|()
expr_stmt|;
name|saveCommit
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
name|saveAndSetHeadRevision
argument_list|()
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Success was: %b"
argument_list|,
name|success
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|markAsFailed
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ConflictingCommitException
argument_list|()
throw|;
block|}
name|addRevisionId
argument_list|()
expr_stmt|;
return|return
name|revisionId
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumOfRetries
parameter_list|()
block|{
return|return
literal|20
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsRetry
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// In createMongoNodes step, sometimes add operations could end up with
comment|// not found exceptions in high concurrency situations.
return|return
name|e
operator|instanceof
name|ConflictingCommitException
operator|||
name|e
operator|instanceof
name|NotFoundException
return|;
block|}
comment|/**      * FIXME - Currently this assumes a conflict if there's an update but it      * should really check the affected paths before assuming a conflict. When      * this is fixed, lower the number of retries.      *      * This is protected for testing purposed only.      *      * @return True if the operation was successful.      * @throws Exception If an exception happens.      */
specifier|protected
name|boolean
name|saveAndSetHeadRevision
parameter_list|()
throws|throws
name|Exception
block|{
name|MongoSync
name|syncMongo
init|=
operator|new
name|SaveAndSetHeadRevisionAction
argument_list|(
name|nodeStore
argument_list|,
name|this
operator|.
name|syncMongo
operator|.
name|getHeadRevisionId
argument_list|()
argument_list|,
name|revisionId
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|syncMongo
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Encounterd a conflicting update, thus can't commit"
operator|+
literal|" revision %s and will be retried with new revision"
argument_list|,
name|revisionId
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|addRevisionId
parameter_list|()
block|{
name|commit
operator|.
name|setRevisionId
argument_list|(
name|revisionId
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|prepareCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|commit
operator|.
name|setAffectedPaths
argument_list|(
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|(
name|affectedPaths
argument_list|)
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setBaseRevisionId
argument_list|(
name|syncMongo
operator|.
name|getHeadRevisionId
argument_list|()
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setRevisionId
argument_list|(
name|revisionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|commit
operator|.
name|getBranchId
argument_list|()
operator|==
literal|null
operator|&&
name|branchId
operator|!=
literal|null
condition|)
block|{
name|commit
operator|.
name|setBranchId
argument_list|(
name|branchId
argument_list|)
expr_stmt|;
block|}
name|commit
operator|.
name|removeField
argument_list|(
literal|"_id"
argument_list|)
expr_stmt|;
comment|// In case this is a retry.
block|}
specifier|private
name|void
name|createMongoNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|CommitCommandInstructionVisitor
name|visitor
init|=
operator|new
name|CommitCommandInstructionVisitor
argument_list|(
name|nodeStore
argument_list|,
name|syncMongo
operator|.
name|getHeadRevisionId
argument_list|()
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|setBranchId
argument_list|(
name|branchId
argument_list|)
expr_stmt|;
for|for
control|(
name|Instruction
name|instruction
range|:
name|commit
operator|.
name|getInstructions
argument_list|()
control|)
block|{
name|instruction
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|MongoNode
argument_list|>
name|pathNodeMap
init|=
name|visitor
operator|.
name|getPathNodeMap
argument_list|()
decl_stmt|;
name|affectedPaths
operator|=
name|pathNodeMap
operator|.
name|keySet
argument_list|()
expr_stmt|;
name|nodeMongos
operator|=
operator|new
name|HashSet
argument_list|<
name|MongoNode
argument_list|>
argument_list|(
name|pathNodeMap
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MongoNode
name|nodeMongo
range|:
name|nodeMongos
control|)
block|{
name|nodeMongo
operator|.
name|setRevisionId
argument_list|(
name|revisionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|branchId
operator|!=
literal|null
condition|)
block|{
name|nodeMongo
operator|.
name|setBranchId
argument_list|(
name|branchId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|createRevision
parameter_list|()
block|{
name|revisionId
operator|=
name|syncMongo
operator|.
name|getNextRevisionId
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
specifier|private
name|void
name|markAsFailed
parameter_list|()
throws|throws
name|Exception
block|{
name|DBCollection
name|commitCollection
init|=
name|nodeStore
operator|.
name|getCommitCollection
argument_list|()
decl_stmt|;
name|DBObject
name|query
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
literal|"_id"
argument_list|)
operator|.
name|is
argument_list|(
name|commit
operator|.
name|getObjectId
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|DBObject
name|update
init|=
operator|new
name|BasicDBObject
argument_list|(
literal|"$set"
argument_list|,
operator|new
name|BasicDBObject
argument_list|(
name|MongoCommit
operator|.
name|KEY_FAILED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
decl_stmt|;
name|WriteResult
name|writeResult
init|=
name|commitCollection
operator|.
name|update
argument_list|(
name|query
argument_list|,
name|update
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeResult
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// FIXME This is potentially a bug that we need to handle.
throw|throw
operator|new
name|Exception
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Update wasn't successful: %s"
argument_list|,
name|writeResult
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|mergeNodes
parameter_list|()
block|{
for|for
control|(
name|MongoNode
name|existingNode
range|:
name|existingNodes
control|)
block|{
for|for
control|(
name|MongoNode
name|committingNode
range|:
name|nodeMongos
control|)
block|{
if|if
condition|(
name|existingNode
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|committingNode
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Found existing node to merge: %s"
argument_list|,
name|existingNode
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Existing node: %s"
argument_list|,
name|existingNode
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Committing node: %s"
argument_list|,
name|committingNode
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|existingProperties
init|=
name|existingNode
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|existingProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|committingNode
operator|.
name|setProperties
argument_list|(
name|existingProperties
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Merged properties for %s: %s"
argument_list|,
name|existingNode
operator|.
name|getPath
argument_list|()
argument_list|,
name|existingProperties
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|existingChildren
init|=
name|existingNode
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|existingChildren
operator|!=
literal|null
condition|)
block|{
name|committingNode
operator|.
name|setChildren
argument_list|(
name|existingChildren
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Merged children for %s: %s"
argument_list|,
name|existingNode
operator|.
name|getPath
argument_list|()
argument_list|,
name|existingChildren
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|committingNode
operator|.
name|setBaseRevisionId
argument_list|(
name|existingNode
operator|.
name|getRevisionId
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Merged node for %s: %s"
argument_list|,
name|existingNode
operator|.
name|getPath
argument_list|()
argument_list|,
name|committingNode
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|prepareMongoNodes
parameter_list|()
block|{
for|for
control|(
name|MongoNode
name|committingNode
range|:
name|nodeMongos
control|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Preparing children (added and removed) of %s"
argument_list|,
name|committingNode
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Committing node: %s"
argument_list|,
name|committingNode
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|committingNode
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
name|children
operator|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|addedChildren
init|=
name|committingNode
operator|.
name|getAddedChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|addedChildren
operator|!=
literal|null
condition|)
block|{
name|children
operator|.
name|addAll
argument_list|(
name|addedChildren
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|removedChildren
init|=
name|committingNode
operator|.
name|getRemovedChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|removedChildren
operator|!=
literal|null
condition|)
block|{
name|children
operator|.
name|removeAll
argument_list|(
name|removedChildren
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|temp
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|children
argument_list|)
decl_stmt|;
comment|// remove all duplicates
name|committingNode
operator|.
name|setChildren
argument_list|(
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|(
name|temp
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|committingNode
operator|.
name|setChildren
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|committingNode
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|addedProperties
init|=
name|committingNode
operator|.
name|getAddedProps
argument_list|()
decl_stmt|;
if|if
condition|(
name|addedProperties
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|putAll
argument_list|(
name|addedProperties
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|removedProperties
init|=
name|committingNode
operator|.
name|getRemovedProps
argument_list|()
decl_stmt|;
if|if
condition|(
name|removedProperties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|removedProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|properties
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|committingNode
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|committingNode
operator|.
name|setProperties
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Prepared committing node: %s"
argument_list|,
name|committingNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|readBranchIdFromBaseCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|commitBranchId
init|=
name|commit
operator|.
name|getBranchId
argument_list|()
decl_stmt|;
if|if
condition|(
name|commitBranchId
operator|!=
literal|null
condition|)
block|{
comment|// This is a newly created branch, so no need to check the base
comment|// commit's branch id.
name|branchId
operator|=
name|commitBranchId
expr_stmt|;
return|return;
block|}
name|Long
name|baseRevisionId
init|=
name|commit
operator|.
name|getBaseRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|baseRevisionId
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|MongoCommit
name|baseCommit
init|=
operator|new
name|FetchCommitAction
argument_list|(
name|nodeStore
argument_list|,
name|baseRevisionId
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|branchId
operator|=
name|baseCommit
operator|.
name|getBranchId
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|readAndIncHeadRevision
parameter_list|()
throws|throws
name|Exception
block|{
name|syncMongo
operator|=
operator|new
name|ReadAndIncHeadRevisionAction
argument_list|(
name|nodeStore
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|readExistingNodes
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MongoNode
name|nodeMongo
range|:
name|nodeMongos
control|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|nodeMongo
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FetchNodesAction
name|action
init|=
operator|new
name|FetchNodesAction
argument_list|(
name|nodeStore
argument_list|,
name|paths
argument_list|,
name|syncMongo
operator|.
name|getHeadRevisionId
argument_list|()
argument_list|)
decl_stmt|;
name|action
operator|.
name|setBranchId
argument_list|(
name|branchId
argument_list|)
expr_stmt|;
name|existingNodes
operator|=
name|action
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|saveCommit
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|SaveCommitAction
argument_list|(
name|nodeStore
argument_list|,
name|commit
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|saveNodes
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|SaveNodesAction
argument_list|(
name|nodeStore
argument_list|,
name|nodeMongos
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

