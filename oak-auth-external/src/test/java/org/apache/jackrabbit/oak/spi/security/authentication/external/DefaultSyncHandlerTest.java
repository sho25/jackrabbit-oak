begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|value
operator|.
name|ValueFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|basic
operator|.
name|DefaultSyncConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|basic
operator|.
name|DefaultSyncContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * DefaultSyncHandlerTest  */
end_comment

begin_class
specifier|public
class|class
name|DefaultSyncHandlerTest
extends|extends
name|ExternalLoginModuleTestBase
block|{
specifier|private
specifier|final
name|String
name|userId
init|=
literal|"testUser"
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|ExternalIdentityProvider
name|createIDP
parameter_list|()
block|{
return|return
operator|new
name|TestIdentityProvider
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|destroyIDP
parameter_list|(
name|ExternalIdentityProvider
name|idp
parameter_list|)
block|{
comment|// ignore
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setSyncConfig
parameter_list|(
name|DefaultSyncConfig
name|cfg
parameter_list|)
block|{
if|if
condition|(
name|cfg
operator|!=
literal|null
condition|)
block|{
name|cfg
operator|.
name|user
argument_list|()
operator|.
name|setExpirationTime
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|setSyncConfig
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindMissingIdentity
parameter_list|()
throws|throws
name|Exception
block|{
name|UserManager
name|userManager
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|SyncHandler
name|mgr
init|=
name|syncManager
operator|.
name|getSyncHandler
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|SyncedIdentity
name|id
init|=
name|mgr
operator|.
name|findIdentity
argument_list|(
name|userManager
argument_list|,
literal|"foobar"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"unknown authorizable should not exist"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindLocalIdentity
parameter_list|()
throws|throws
name|Exception
block|{
name|UserManager
name|userManager
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|SyncHandler
name|mgr
init|=
name|syncManager
operator|.
name|getSyncHandler
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|SyncedIdentity
name|id
init|=
name|mgr
operator|.
name|findIdentity
argument_list|(
name|userManager
argument_list|,
literal|"admin"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"known authorizable should exist"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"local user should not have external ref"
argument_list|,
name|id
operator|.
name|getExternalIdRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindExternalIdentity
parameter_list|()
throws|throws
name|Exception
block|{
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|userId
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|UserManager
name|userManager
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|SyncHandler
name|mgr
init|=
name|syncManager
operator|.
name|getSyncHandler
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|SyncedIdentity
name|id
init|=
name|mgr
operator|.
name|findIdentity
argument_list|(
name|userManager
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"known authorizable should exist"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"external user should have correct external ref.idp"
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|,
name|id
operator|.
name|getExternalIdRef
argument_list|()
operator|.
name|getProviderName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"external user should have correct external ref.id"
argument_list|,
name|userId
argument_list|,
name|id
operator|.
name|getExternalIdRef
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequiresNoSync
parameter_list|()
throws|throws
name|Exception
block|{
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|userId
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|UserManager
name|userManager
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|SyncHandler
name|mgr
init|=
name|syncManager
operator|.
name|getSyncHandler
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|SyncedIdentity
name|id
init|=
name|mgr
operator|.
name|findIdentity
argument_list|(
name|userManager
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"known authorizable should exist"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"freshly synced id should not require sync"
argument_list|,
name|mgr
operator|.
name|requiresSync
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequiresSync
parameter_list|()
throws|throws
name|Exception
block|{
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|userId
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|ValueFactory
name|valueFactory
init|=
operator|new
name|ValueFactoryImpl
argument_list|(
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|Calendar
name|nowCal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|nowCal
operator|.
name|setTimeInMillis
argument_list|(
name|nowCal
operator|.
name|getTimeInMillis
argument_list|()
operator|-
literal|1000
argument_list|)
expr_stmt|;
name|Value
name|nowValue
init|=
name|valueFactory
operator|.
name|createValue
argument_list|(
name|nowCal
argument_list|)
decl_stmt|;
name|UserManager
name|userManager
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|Authorizable
name|a
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|userId
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
name|DefaultSyncContext
operator|.
name|REP_LAST_SYNCED
argument_list|,
name|nowValue
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SyncHandler
name|mgr
init|=
name|syncManager
operator|.
name|getSyncHandler
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|SyncedIdentity
name|id
init|=
name|mgr
operator|.
name|findIdentity
argument_list|(
name|userManager
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"known authorizable should exist"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"synced id should require sync"
argument_list|,
name|mgr
operator|.
name|requiresSync
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

