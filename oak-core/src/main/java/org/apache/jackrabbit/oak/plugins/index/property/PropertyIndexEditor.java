begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|addAll
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_ISMIXIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|concat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|DECLARING_NODE_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|PROPERTY_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
operator|.
name|TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_NODE_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_MIXIN_SUBTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_PRIMARY_SUBTYPES
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|ContentMirrorStoreStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|IndexStoreStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * {@link IndexEditor} implementation that is responsible for keeping the  * {@link PropertyIndex} up to date.  *<br>  * There is a tree of PropertyIndexDiff objects, each object represents the  * changes at a given node.  *   * @see PropertyIndex  * @see PropertyIndexLookup  */
end_comment

begin_class
class|class
name|PropertyIndexEditor
implements|implements
name|IndexEditor
implements|,
name|Closeable
block|{
specifier|private
specifier|final
name|IndexStoreStrategy
name|store
init|=
operator|new
name|ContentMirrorStoreStrategy
argument_list|()
decl_stmt|;
comment|/**      * The parent (null if this is the root node).      */
specifier|private
specifier|final
name|PropertyIndexEditor
name|parent
decl_stmt|;
comment|/**      * The node (can be null in the case of a deleted node).      */
specifier|private
specifier|final
name|NodeBuilder
name|node
decl_stmt|;
comment|/**      * The node name (the path element). Null for the root node.      */
specifier|private
specifier|final
name|String
name|nodeName
decl_stmt|;
comment|/**      * The path of the changed node (built lazily).      */
specifier|private
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|PropertyIndexUpdate
argument_list|>
name|updates
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|/**      * The map of known indexes. Key: the property name. Value: the list of      * indexes (it is possible to have multiple indexes for the same property      * name).      */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PropertyIndexUpdate
argument_list|>
argument_list|>
name|indexMap
decl_stmt|;
comment|/**      * The {@code /jcr:system/jcr:nodeTypes} subtree.      */
specifier|private
specifier|final
name|NodeState
name|types
decl_stmt|;
specifier|public
name|PropertyIndexEditor
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|builder
argument_list|,
literal|null
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PropertyIndexEditor
parameter_list|(
name|PropertyIndexEditor
name|parent
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
name|this
argument_list|(
name|parent
argument_list|,
name|IndexUtils
operator|.
name|getChildOrNull
argument_list|(
name|parent
operator|.
name|node
argument_list|,
name|nodeName
argument_list|)
argument_list|,
name|nodeName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PropertyIndexEditor
parameter_list|(
name|PropertyIndexEditor
name|parent
parameter_list|,
name|NodeBuilder
name|node
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|indexMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PropertyIndexUpdate
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|hasChildNode
argument_list|(
name|JCR_SYSTEM
argument_list|)
condition|)
block|{
name|NodeBuilder
name|typeNB
init|=
name|node
operator|.
name|getChildNode
argument_list|(
name|JCR_SYSTEM
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|JCR_NODE_TYPES
argument_list|)
decl_stmt|;
name|this
operator|.
name|types
operator|=
name|typeNB
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|types
operator|=
name|EmptyNodeState
operator|.
name|MISSING_NODE
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|indexMap
operator|=
name|parent
operator|.
name|indexMap
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|parent
operator|.
name|types
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
comment|// build the path lazily
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|concat
argument_list|(
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|nodeName
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
comment|/**      * Get all the indexes for the given property name.      *       * @param propertyName      *            the property name      * @return the indexes      */
specifier|private
name|Iterable
argument_list|<
name|PropertyIndexUpdate
argument_list|>
name|getIndexes
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
name|List
argument_list|<
name|PropertyIndexUpdate
argument_list|>
name|indexes
init|=
name|indexMap
operator|.
name|get
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexes
operator|==
literal|null
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|List
argument_list|<
name|PropertyIndexUpdate
argument_list|>
name|filtered
init|=
operator|new
name|ArrayList
argument_list|<
name|PropertyIndexUpdate
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyIndexUpdate
name|pi
range|:
name|indexes
control|)
block|{
if|if
condition|(
name|node
operator|==
literal|null
operator|||
name|pi
operator|.
name|matchesNodeType
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|filtered
operator|.
name|add
argument_list|(
name|pi
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|filtered
return|;
block|}
comment|/**      * Add the index definitions to the in-memory set of known index      * definitions.      *       * @param state      *            the node state that contains the index definition      * @param indexName      *            the name of the index      */
specifier|private
name|void
name|addIndexes
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|String
name|indexName
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|primaryTypes
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|mixinTypes
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|typeName
range|:
name|state
operator|.
name|getNames
argument_list|(
name|DECLARING_NODE_TYPES
argument_list|)
control|)
block|{
name|NodeState
name|type
init|=
name|types
operator|.
name|getChildNode
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getBoolean
argument_list|(
name|JCR_ISMIXIN
argument_list|)
condition|)
block|{
name|mixinTypes
operator|.
name|add
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|primaryTypes
operator|.
name|add
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
block|}
name|addAll
argument_list|(
name|primaryTypes
argument_list|,
name|type
operator|.
name|getNames
argument_list|(
name|OAK_PRIMARY_SUBTYPES
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|mixinTypes
argument_list|,
name|type
operator|.
name|getNames
argument_list|(
name|OAK_MIXIN_SUBTYPES
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PropertyState
name|ps
init|=
name|state
operator|.
name|getProperty
argument_list|(
name|PROPERTY_NAMES
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|propertyNames
init|=
name|ps
operator|!=
literal|null
condition|?
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
else|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pname
range|:
name|propertyNames
control|)
block|{
name|List
argument_list|<
name|PropertyIndexUpdate
argument_list|>
name|list
init|=
name|this
operator|.
name|indexMap
operator|.
name|get
argument_list|(
name|pname
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexMap
operator|.
name|put
argument_list|(
name|pname
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
name|String
name|localPath
init|=
name|getPath
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyIndexUpdate
name|piu
range|:
name|list
control|)
block|{
if|if
condition|(
name|piu
operator|.
name|matches
argument_list|(
name|localPath
argument_list|,
name|primaryTypes
argument_list|,
name|mixinTypes
argument_list|)
condition|)
block|{
name|exists
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|exists
condition|)
block|{
name|PropertyIndexUpdate
name|update
init|=
operator|new
name|PropertyIndexUpdate
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|node
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|child
argument_list|(
name|indexName
argument_list|)
argument_list|,
name|store
argument_list|,
name|primaryTypes
argument_list|,
name|mixinTypes
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|updates
operator|.
name|add
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|enter
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|after
operator|!=
literal|null
operator|&&
name|after
operator|.
name|hasChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
condition|)
block|{
name|NodeState
name|index
init|=
name|after
operator|.
name|getChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|indexName
range|:
name|index
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
name|NodeState
name|child
init|=
name|index
operator|.
name|getChildNode
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|IndexUtils
operator|.
name|isIndexNodeType
argument_list|(
name|child
argument_list|,
name|TYPE
argument_list|)
condition|)
block|{
name|addIndexes
argument_list|(
name|child
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|leave
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
for|for
control|(
name|PropertyIndexUpdate
name|update
range|:
name|updates
control|)
block|{
name|update
operator|.
name|checkUniqueKeys
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
for|for
control|(
name|PropertyIndexUpdate
name|update
range|:
name|getIndexes
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
control|)
block|{
name|update
operator|.
name|insert
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
for|for
control|(
name|PropertyIndexUpdate
name|update
range|:
name|getIndexes
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
control|)
block|{
name|update
operator|.
name|remove
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|before
argument_list|)
expr_stmt|;
name|update
operator|.
name|insert
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
for|for
control|(
name|PropertyIndexUpdate
name|update
range|:
name|getIndexes
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|)
control|)
block|{
name|update
operator|.
name|remove
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|before
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
name|childNodeChanged
argument_list|(
name|name
argument_list|,
name|EMPTY_NODE
argument_list|,
name|after
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
operator|new
name|PropertyIndexEditor
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
name|childNodeChanged
argument_list|(
name|name
argument_list|,
name|before
argument_list|,
name|EMPTY_NODE
argument_list|)
return|;
block|}
comment|// -----------------------------------------------------< Closeable>--
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|indexMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

