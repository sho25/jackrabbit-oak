begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|SecurityProviderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|util
operator|.
name|PasswordUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|PasswordValidationActionTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|PasswordValidationAction
name|pwAction
init|=
operator|new
name|PasswordValidationAction
argument_list|()
decl_stmt|;
specifier|private
name|TestAction
name|testAction
init|=
operator|new
name|TestAction
argument_list|()
decl_stmt|;
specifier|private
name|Root
name|root
decl_stmt|;
specifier|private
name|UserManager
name|userManager
decl_stmt|;
specifier|private
name|User
name|user
decl_stmt|;
specifier|private
name|User
name|testUser
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|root
operator|=
name|adminSession
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
name|userManager
operator|=
name|getSecurityProvider
argument_list|()
operator|.
name|getUserConfiguration
argument_list|()
operator|.
name|getUserManager
argument_list|(
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|user
operator|=
operator|(
name|User
operator|)
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|adminSession
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
name|testAction
operator|.
name|reset
argument_list|()
expr_stmt|;
name|pwAction
operator|.
name|setConstraint
argument_list|(
literal|"^.*(?=.{8,})(?=.*[a-z])(?=.*[A-Z]).*"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|testUser
operator|!=
literal|null
condition|)
block|{
name|testUser
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|root
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|SecurityProvider
name|getSecurityProvider
parameter_list|()
block|{
if|if
condition|(
name|securityProvider
operator|==
literal|null
condition|)
block|{
name|securityProvider
operator|=
operator|new
name|TestSecurityProvider
argument_list|()
expr_stmt|;
block|}
return|return
name|securityProvider
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testActionIsCalled
parameter_list|()
throws|throws
name|Exception
block|{
name|testUser
operator|=
name|userManager
operator|.
name|createUser
argument_list|(
literal|"testUser"
argument_list|,
literal|"testUser12345"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|testAction
operator|.
name|onCreateCalled
argument_list|)
expr_stmt|;
name|testUser
operator|.
name|changePassword
argument_list|(
literal|"pW12345678"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|testAction
operator|.
name|onPasswordChangeCalled
argument_list|)
expr_stmt|;
name|testUser
operator|.
name|changePassword
argument_list|(
literal|"pW1234567890"
argument_list|,
literal|"pW12345678"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|testAction
operator|.
name|onPasswordChangeCalled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPasswordValidationAction
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|invalid
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"pw1"
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"only6C"
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"12345678"
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"WITHOUTLOWERCASE"
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"withoutuppercase"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|pw
range|:
name|invalid
control|)
block|{
try|try
block|{
name|pwAction
operator|.
name|onPasswordChange
argument_list|(
name|user
argument_list|,
name|pw
argument_list|,
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw constraint violation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConstraintViolationException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|valid
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|valid
operator|.
name|add
argument_list|(
literal|"abCDefGH"
argument_list|)
expr_stmt|;
name|valid
operator|.
name|add
argument_list|(
literal|"Abbbbbbbbbbbb"
argument_list|)
expr_stmt|;
name|valid
operator|.
name|add
argument_list|(
literal|"cDDDDDDDDDDDDDDDDD"
argument_list|)
expr_stmt|;
name|valid
operator|.
name|add
argument_list|(
literal|"gH%%%%%%%%%%%%%%%%^^"
argument_list|)
expr_stmt|;
name|valid
operator|.
name|add
argument_list|(
literal|"&)(*&^%23qW"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|pw
range|:
name|valid
control|)
block|{
name|pwAction
operator|.
name|onPasswordChange
argument_list|(
name|user
argument_list|,
name|pw
argument_list|,
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPasswordValidationActionOnCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|hashed
init|=
name|PasswordUtility
operator|.
name|buildPasswordHash
argument_list|(
literal|"DWkej32H"
argument_list|)
decl_stmt|;
name|testUser
operator|=
name|userManager
operator|.
name|createUser
argument_list|(
literal|"testuser"
argument_list|,
name|hashed
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|pwValue
init|=
name|root
operator|.
name|getTree
argument_list|(
name|testUser
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PASSWORD
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|PasswordUtility
operator|.
name|isPlainTextPassword
argument_list|(
name|pwValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PasswordUtility
operator|.
name|isSame
argument_list|(
name|pwValue
argument_list|,
name|hashed
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPasswordValidationActionOnChange
parameter_list|()
throws|throws
name|Exception
block|{
name|testUser
operator|=
name|userManager
operator|.
name|createUser
argument_list|(
literal|"testuser"
argument_list|,
literal|"testPw123456"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
try|try
block|{
name|pwAction
operator|.
name|setConstraint
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|String
name|hashed
init|=
name|PasswordUtility
operator|.
name|buildPasswordHash
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
name|testUser
operator|.
name|changePassword
argument_list|(
name|hashed
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Password change must always enforce password validation."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConstraintViolationException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
comment|//--------------------------------------------------------------------------
specifier|private
class|class
name|TestAction
extends|extends
name|AbstractAuthorizableAction
block|{
specifier|private
name|int
name|onCreateCalled
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|onPasswordChangeCalled
init|=
literal|0
decl_stmt|;
name|void
name|reset
parameter_list|()
block|{
name|onCreateCalled
operator|=
literal|0
expr_stmt|;
name|onPasswordChangeCalled
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|(
name|SecurityProvider
name|securityProvider
parameter_list|,
name|ConfigurationParameters
name|config
parameter_list|)
block|{
comment|// nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCreate
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|password
parameter_list|,
name|Root
name|root
parameter_list|,
name|NamePathMapper
name|namePathMapper
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|onCreateCalled
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onPasswordChange
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|newPassword
parameter_list|,
name|Root
name|root
parameter_list|,
name|NamePathMapper
name|namePathMapper
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|onPasswordChangeCalled
operator|++
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|TestSecurityProvider
extends|extends
name|SecurityProviderImpl
block|{
specifier|private
specifier|final
name|AuthorizableAction
index|[]
name|actions
decl_stmt|;
specifier|private
name|TestSecurityProvider
parameter_list|()
block|{
name|this
operator|.
name|actions
operator|=
operator|new
name|AuthorizableAction
index|[]
block|{
name|pwAction
block|,
name|testAction
block|}
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|UserConfiguration
name|getUserConfiguration
parameter_list|()
block|{
return|return
operator|new
name|UserConfigurationImpl
argument_list|(
name|this
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|AuthorizableActionProvider
name|getAuthorizableActionProvider
parameter_list|()
block|{
return|return
operator|new
name|AuthorizableActionProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|AuthorizableAction
argument_list|>
name|getAuthorizableActions
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|actions
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

