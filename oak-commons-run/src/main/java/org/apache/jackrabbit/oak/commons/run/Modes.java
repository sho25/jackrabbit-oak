begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|run
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * represent an individual Mode for running a COMMAND. It's a substitution for the old Mode enum we  * used in order to allow reuse of logic.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Modes
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Command
argument_list|>
name|MODES
decl_stmt|;
specifier|public
name|Modes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Command
argument_list|>
name|modes
parameter_list|)
block|{
name|this
operator|.
name|MODES
operator|=
name|checkNotNull
argument_list|(
name|modes
argument_list|,
literal|"Provided map of Modes cannot be null"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Command
name|getCommand
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// as the Map already return null in case of not found we don't have to do anything here.
return|return
name|MODES
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getModes
parameter_list|()
block|{
return|return
name|MODES
operator|.
name|keySet
argument_list|()
return|;
block|}
block|}
end_class

end_unit

