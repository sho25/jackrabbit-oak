begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_class
class|class
name|HybridPropertyIndexUtil
block|{
comment|/**      * Node name under which all property indexes are created      */
specifier|static
specifier|final
name|String
name|PROPERTY_INDEX
init|=
literal|":property-index"
decl_stmt|;
comment|/**      * Property name referring to 'head' bucket      */
specifier|static
specifier|final
name|String
name|PROP_HEAD_BUCKET
init|=
literal|"head"
decl_stmt|;
comment|/**      * Property name referring to 'previous' bucket      */
specifier|static
specifier|final
name|String
name|PROP_PREVIOUS_BUCKET
init|=
literal|"previous"
decl_stmt|;
comment|/**      * Property set on each bucket to record that it entries after      * given async indexer state i.e. lastIndexTo time for the associated      * asyn indexer      */
specifier|static
specifier|final
name|String
name|PROP_ASYNC_INDEXED_TO_TIME_AT_SWITCH
init|=
literal|"asyncIndexedToTimeAtSwitch"
decl_stmt|;
comment|/**      * Creation time used for entries in unique property index. Instead of      * storing the data as calendar it stores it as epoch time      */
specifier|static
specifier|final
name|String
name|PROP_CREATED
init|=
name|JcrConstants
operator|.
name|JCR_CREATED
decl_stmt|;
specifier|static
specifier|final
name|String
name|PROP_STORAGE_TYPE
init|=
literal|"storageType"
decl_stmt|;
specifier|static
specifier|final
name|String
name|STORAGE_TYPE_CONTENT_MIRROR
init|=
literal|"contentMirror"
decl_stmt|;
specifier|static
specifier|final
name|String
name|STORAGE_TYPE_UNIQUE
init|=
literal|"unique"
decl_stmt|;
specifier|static
name|String
name|getNodeName
parameter_list|(
name|String
name|propertyRelativePath
parameter_list|)
block|{
return|return
name|propertyRelativePath
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'_'
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|simplePropertyIndex
parameter_list|(
name|NodeState
name|propIdxState
parameter_list|)
block|{
return|return
name|STORAGE_TYPE_CONTENT_MIRROR
operator|.
name|equals
argument_list|(
name|propIdxState
operator|.
name|getString
argument_list|(
name|PROP_STORAGE_TYPE
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|uniquePropertyIndex
parameter_list|(
name|NodeState
name|propIdxState
parameter_list|)
block|{
return|return
name|STORAGE_TYPE_UNIQUE
operator|.
name|equals
argument_list|(
name|propIdxState
operator|.
name|getString
argument_list|(
name|PROP_STORAGE_TYPE
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

