begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * A utility class that allows to verify access to a resource is synchronized.  */
end_comment

begin_class
specifier|public
class|class
name|SynchronizedVerifier
block|{
specifier|private
specifier|static
specifier|volatile
name|boolean
name|enabled
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|AtomicBoolean
argument_list|>
name|DETECT
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|AtomicBoolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Object
argument_list|,
name|Boolean
argument_list|>
name|CURRENT
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|IdentityHashMap
argument_list|<
name|Object
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Enable or disable detection for a given class.      *      * @param clazz the class      * @param value the new value (true means detection is enabled)      */
specifier|public
specifier|static
name|void
name|setDetect
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
block|{
name|DETECT
operator|.
name|put
argument_list|(
name|clazz
argument_list|,
operator|new
name|AtomicBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AtomicBoolean
name|b
init|=
name|DETECT
operator|.
name|remove
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Detection was not enabled"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|b
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"No object of this class was tested"
argument_list|)
throw|;
block|}
block|}
name|enabled
operator|=
name|DETECT
operator|.
name|size
argument_list|()
operator|>
literal|0
expr_stmt|;
block|}
comment|/**      * Verify the object is not accessed concurrently.      *      * @param o the object      * @param write if the object is modified      */
specifier|public
specifier|static
name|void
name|check
parameter_list|(
name|Object
name|o
parameter_list|,
name|boolean
name|write
parameter_list|)
block|{
if|if
condition|(
name|enabled
condition|)
block|{
name|detectConcurrentAccess
argument_list|(
name|o
argument_list|,
name|write
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|detectConcurrentAccess
parameter_list|(
name|Object
name|o
parameter_list|,
name|boolean
name|write
parameter_list|)
block|{
name|AtomicBoolean
name|value
init|=
name|DETECT
operator|.
name|get
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|value
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Boolean
name|old
init|=
name|CURRENT
operator|.
name|put
argument_list|(
name|o
argument_list|,
name|write
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|write
operator|||
name|old
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Concurrent write access"
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|old
operator|=
name|CURRENT
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
if|if
condition|(
name|old
operator|==
literal|null
operator|&&
name|write
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Concurrent write access"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

