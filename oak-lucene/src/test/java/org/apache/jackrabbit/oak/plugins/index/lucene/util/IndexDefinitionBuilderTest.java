begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|ImmutableRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FulltextIndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|factories
operator|.
name|TreeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|filter
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEPRECATED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_TAGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FulltextIndexConstants
operator|.
name|AGGREGATES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FulltextIndexConstants
operator|.
name|FIELD_BOOST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FulltextIndexConstants
operator|.
name|PROP_FACETS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FulltextIndexConstants
operator|.
name|PROP_REFRESH_DEFN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FulltextIndexConstants
operator|.
name|COST_PER_ENTRY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FulltextIndexConstants
operator|.
name|COST_PER_EXECUTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FulltextIndexConstants
operator|.
name|BLOB_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FulltextIndexConstants
operator|.
name|PROP_WEIGHT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MultiStringPropertyState
operator|.
name|stringProperty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|IndexDefinitionBuilderTest
block|{
specifier|private
name|IndexDefinitionBuilder
name|builder
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
specifier|private
name|NodeBuilder
name|nodeBuilder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
annotation|@
name|After
specifier|public
name|void
name|dumpState
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|NodeStateUtils
operator|.
name|toString
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|defaultSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|state
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|state
operator|.
name|getLong
argument_list|(
literal|"compatVersion"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"async"
argument_list|,
name|state
operator|.
name|getString
argument_list|(
literal|"async"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lucene"
argument_list|,
name|state
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexRule
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|includedPaths
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|queryPaths
argument_list|(
literal|"/c"
argument_list|,
literal|"/d"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|supersedes
argument_list|(
literal|"/e"
argument_list|,
literal|"/f"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|ordered
argument_list|()
operator|.
name|enclosingRule
argument_list|()
operator|.
name|property
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|analyzed
argument_list|()
operator|.
name|propertyIndex
argument_list|()
operator|.
name|enclosingRule
argument_list|()
operator|.
name|property
argument_list|(
literal|"baz"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|NodeState
name|state
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getChildNode
argument_list|(
literal|"indexRules"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getChildNode
argument_list|(
literal|"indexRules"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
argument_list|,
name|state
operator|.
name|getProperty
argument_list|(
name|PathFilter
operator|.
name|PROP_INCLUDED_PATHS
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"/c"
argument_list|,
literal|"/d"
argument_list|)
argument_list|,
name|state
operator|.
name|getProperty
argument_list|(
name|IndexConstants
operator|.
name|QUERY_PATHS
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"/e"
argument_list|,
literal|"/f"
argument_list|)
argument_list|,
name|state
operator|.
name|getProperty
argument_list|(
name|IndexConstants
operator|.
name|SUPERSEDED_INDEX_PATHS
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyDefIndexPropertySetIndexFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|disable
argument_list|()
expr_stmt|;
name|PropertyState
name|state
init|=
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"indexRules"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"index"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"index property must exist"
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Incorrect default value of index property"
argument_list|,
name|state
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|aggregates
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|aggregateRule
argument_list|(
literal|"cq:Page"
argument_list|)
operator|.
name|include
argument_list|(
literal|"jcr:content"
argument_list|)
operator|.
name|relativeNode
argument_list|()
expr_stmt|;
name|builder
operator|.
name|aggregateRule
argument_list|(
literal|"dam:Asset"
argument_list|,
literal|"*"
argument_list|,
literal|"*/*"
argument_list|)
expr_stmt|;
name|NodeState
name|state
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getChildNode
argument_list|(
literal|"aggregates"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getChildNode
argument_list|(
literal|"aggregates"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"dam:Asset"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getChildNode
argument_list|(
literal|"aggregates"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"cq:Page"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|duplicatePropertyName
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|ordered
argument_list|()
operator|.
name|enclosingRule
argument_list|()
operator|.
name|property
argument_list|(
literal|"jcr:content/foo"
argument_list|)
operator|.
name|analyzed
argument_list|()
operator|.
name|propertyIndex
argument_list|()
operator|.
name|enclosingRule
argument_list|()
operator|.
name|property
argument_list|(
literal|"metadata/content/foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|NodeState
name|state
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getChildNode
argument_list|(
literal|"indexRules"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getChildNode
argument_list|(
literal|"indexRules"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|state
operator|.
name|getChildNode
argument_list|(
literal|"indexRules"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|getChildNodeCount
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ruleOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:unstructured"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|Tree
name|tree
init|=
name|TreeFactory
operator|.
name|createTree
argument_list|(
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|build
argument_list|(
name|tree
argument_list|)
expr_stmt|;
comment|//Assert the order
name|Iterator
argument_list|<
name|Tree
argument_list|>
name|children
init|=
name|tree
operator|.
name|getChild
argument_list|(
literal|"indexRules"
argument_list|)
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"nt:unstructured"
argument_list|,
name|children
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nt:base"
argument_list|,
name|children
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|regexProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
name|FulltextIndexConstants
operator|.
name|REGEX_ALL_PROPS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NodeState
name|state
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|state
argument_list|,
literal|"indexRules/nt:base/properties/prop"
argument_list|)
operator|.
name|getBoolean
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_IS_REGEX
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mergeExisting
parameter_list|()
throws|throws
name|Exception
block|{
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|NodeState
name|state
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|state
operator|.
name|getString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"async"
argument_list|,
name|state
operator|.
name|getString
argument_list|(
literal|"async"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mergeExisting_IndexRule
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:unstructured"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|=
name|builder
operator|.
name|build
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|builder
operator|.
name|hasIndexRule
argument_list|(
literal|"nt:unstructured"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|builder
operator|.
name|hasIndexRule
argument_list|(
literal|"nt:base"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:unstructured"
argument_list|)
operator|.
name|property
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:unstructured"
argument_list|)
operator|.
name|hasPropertyRule
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:unstructured"
argument_list|)
operator|.
name|hasPropertyRule
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mergeExisting_Aggregates
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|aggregateRule
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|include
argument_list|(
literal|"/path1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|aggregateRule
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|include
argument_list|(
literal|"/path2"
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|=
name|builder
operator|.
name|build
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|aggregateRule
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|include
argument_list|(
literal|"/path1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|aggregateRule
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|include
argument_list|(
literal|"/path3"
argument_list|)
expr_stmt|;
name|NodeState
name|state
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|state
operator|.
name|getChildNode
argument_list|(
name|AGGREGATES
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getChildNodeCount
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noReindexIfNoChange
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|includedPaths
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|ordered
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|=
name|builder
operator|.
name|build
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|includedPaths
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|builder
operator|.
name|isReindexRequired
argument_list|()
argument_list|)
expr_stmt|;
name|NodeState
name|state
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|state
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|state
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|baseState
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|nodeBuilder
operator|=
name|baseState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:file"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|builder
operator|.
name|isReindexRequired
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|baseState
operator|.
name|builder
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:file"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|builder
operator|.
name|isReindexRequired
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|builder
operator|.
name|isReindexRequired
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|state
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|reindexAndAsyncFlagChange
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|async
argument_list|(
literal|"async"
argument_list|,
name|IndexConstants
operator|.
name|INDEXING_MODE_NRT
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|=
name|builder
operator|.
name|build
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NodeState
name|oldState
init|=
name|nodeBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|async
argument_list|(
literal|"async"
argument_list|,
name|IndexConstants
operator|.
name|INDEXING_MODE_SYNC
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|oldState
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|async
argument_list|(
literal|"fulltext-async"
argument_list|,
name|IndexConstants
operator|.
name|INDEXING_MODE_SYNC
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noReindexWhenIfQueryPathsAddedOrChanged
parameter_list|()
block|{
name|NodeState
name|currentNodeState
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|queryPaths
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|queryPaths
argument_list|(
literal|"/a"
argument_list|,
literal|"/c"
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|removeProperty
argument_list|(
name|IndexConstants
operator|.
name|QUERY_PATHS
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noReindexWhenIfIndexTagsAddedOrChanged
parameter_list|()
block|{
name|NodeState
name|currentNodeState
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|tags
argument_list|(
literal|"foo1"
argument_list|,
literal|"foo2"
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|tags
argument_list|(
literal|"foo2"
argument_list|,
literal|"foo3"
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addTags
argument_list|(
literal|"foo2"
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|removeProperty
argument_list|(
name|IndexConstants
operator|.
name|INDEX_TAGS
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noReindexWhenIfBlobSizeAddedOrChanged
parameter_list|()
block|{
name|NodeState
name|currentNodeState
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|setProperty
argument_list|(
name|BLOB_SIZE
argument_list|,
literal|32768
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|setProperty
argument_list|(
name|BLOB_SIZE
argument_list|,
literal|35768
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|removeProperty
argument_list|(
name|BLOB_SIZE
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// This property is used in cost estimation - no reindexing required
comment|// on property change
annotation|@
name|Test
specifier|public
name|void
name|noReindexIfWeightPropertyAddedOrChanged
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"fooProp"
argument_list|)
expr_stmt|;
name|NodeState
name|currentNodeState
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
comment|//Unset the reindex flag first because first build would have set it .
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
comment|// Add the property weight to fooProp - this shouldn't cause reindex flag to set
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"fooProp"
argument_list|)
operator|.
name|weight
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
comment|// Now change the value for weight on fooProp - this also shouldn't lead to setting of reindex flag
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"fooProp"
argument_list|)
operator|.
name|weight
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
comment|//Now check for property delete use case
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"fooProp"
argument_list|)
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|removeProperty
argument_list|(
name|PROP_WEIGHT
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// modifying boost value shouldn't require reindexing because we use
comment|// QueryTime Boosts and not index time boosts. Refer OAK-3367 for details
annotation|@
name|Test
specifier|public
name|void
name|noReindexIfBoostPropAddedOrChanged
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"fooProp"
argument_list|)
expr_stmt|;
name|NodeState
name|currentNodeState
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
comment|//Unset the reindex flag first because first build would have set it .
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
comment|// Add the property  boost - this shouldn't cause reindex flag to set
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"fooProp"
argument_list|)
operator|.
name|boost
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
comment|// Now change the value for boost - this also shouldn't lead to setting of reindex flag
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"fooProp"
argument_list|)
operator|.
name|boost
argument_list|(
literal|2.0f
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
comment|//Now check for property delete use case
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"fooProp"
argument_list|)
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|removeProperty
argument_list|(
name|FIELD_BOOST
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noReindexOnUseIfExists
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo1"
argument_list|)
expr_stmt|;
name|NodeState
name|currentNodeState
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
comment|// Unset the reindex flag first because first build would have set it .
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
comment|// Add the "useIfExists" property
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|USE_IF_EXISTS
argument_list|,
literal|"/oak:index"
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now test deleting the flag - should also not set the reindexing flag
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|removeProperty
argument_list|(
name|IndexConstants
operator|.
name|USE_IF_EXISTS
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// This is a node for configuration on how faceted search works
comment|// Everything impacts querty time evauation - so no need of reindexing in case of changes
annotation|@
name|Test
specifier|public
name|void
name|noReindexWhenFacetNodeAddedOrRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo1"
argument_list|)
operator|.
name|facets
argument_list|()
expr_stmt|;
name|NodeState
name|currentNodeState
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
comment|//Unset the reindex flag first because first build would have set it .
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
comment|//Add the facets child node now
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|addChild
argument_list|(
name|PROP_FACETS
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now test deleting the facets node should also not set the reindexing flag
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
name|PROP_FACETS
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noReindexWhenFacetConfigChanged_topChildren
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo1"
argument_list|)
operator|.
name|facets
argument_list|()
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|addChild
argument_list|(
name|PROP_FACETS
argument_list|)
expr_stmt|;
name|NodeState
name|currentNodeState
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
comment|//Unset the reindex flag first because first build would have set it .
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
comment|//Add top Children prop on facets node
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
name|PROP_FACETS
argument_list|)
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_FACETS_TOP_CHILDREN
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
comment|//Now test with changing the value - this too shouldn't set the reindexing flag
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
name|PROP_FACETS
argument_list|)
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_FACETS_TOP_CHILDREN
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
comment|//Now check for property delete use case
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
name|PROP_FACETS
argument_list|)
operator|.
name|removeProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_FACETS_TOP_CHILDREN
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noReindexWhenFacetConfigChanged_secure
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo1"
argument_list|)
operator|.
name|facets
argument_list|()
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|addChild
argument_list|(
name|PROP_FACETS
argument_list|)
expr_stmt|;
name|NodeState
name|currentNodeState
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
comment|//Unset the reindex flag first because first build would have set it .
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
comment|//Add top secure prop on facets node
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
name|PROP_FACETS
argument_list|)
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_SECURE_FACETS
argument_list|,
name|FulltextIndexConstants
operator|.
name|PROP_SECURE_FACETS_VALUE_SECURE
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
comment|//Now test with changing the value - this too shouldn't set the reindexing flag
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
name|PROP_FACETS
argument_list|)
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_SECURE_FACETS
argument_list|,
name|FulltextIndexConstants
operator|.
name|PROP_SECURE_FACETS_VALUE_INSECURE
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
comment|//Now check for property delete use case
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
name|PROP_FACETS
argument_list|)
operator|.
name|removeProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_SECURE_FACETS
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noReindexWhenFacetConfigChanged_sampleSize
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo1"
argument_list|)
operator|.
name|facets
argument_list|()
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|addChild
argument_list|(
name|PROP_FACETS
argument_list|)
expr_stmt|;
name|NodeState
name|currentNodeState
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
comment|//Unset the reindex flag first because first build would have set it .
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
comment|//Add top sample size prop on facets node
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
name|PROP_FACETS
argument_list|)
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_STATISTICAL_FACET_SAMPLE_SIZE
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
comment|//Now test with changing the value - this too shouldn't set the reindexing flag
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
name|PROP_FACETS
argument_list|)
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_STATISTICAL_FACET_SAMPLE_SIZE
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
comment|//Now check for property delete use case
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
name|PROP_FACETS
argument_list|)
operator|.
name|removeProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_STATISTICAL_FACET_SAMPLE_SIZE
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noReindexWhenIfCostPerExecAddedOrChanged
parameter_list|()
block|{
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|NodeState
name|currentNodeState
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
comment|//Unset the reindex flag first because first build would have set it .
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
literal|"indexRules"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|COST_PER_EXECUTION
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
comment|//Now test with changing the value - this too shouldn't set the reindexing flag
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
literal|"indexRules"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|COST_PER_EXECUTION
argument_list|,
literal|3.0
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
comment|//Now check for property delete use case
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
literal|"indexRules"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|removeProperty
argument_list|(
name|COST_PER_EXECUTION
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noReindexWhenIfCostPerEntryAddedOrChanged
parameter_list|()
block|{
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|NodeState
name|currentNodeState
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
comment|//Unset the reindex flag first because first build would have set it .
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
literal|"indexRules"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|COST_PER_ENTRY
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
comment|//Now test with changing the value - this too shouldn't set the reindexing flag
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
literal|"indexRules"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|COST_PER_ENTRY
argument_list|,
literal|3.0
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
comment|//Now check for property delete use case
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
literal|"indexRules"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|removeProperty
argument_list|(
name|COST_PER_ENTRY
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|reindexFlagSetWhenRequired
parameter_list|()
block|{
name|NodeState
name|currentNodeState
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|includedPaths
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|includedPaths
argument_list|(
literal|"/a"
argument_list|,
literal|"/c"
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|removeProperty
argument_list|(
name|PathFilter
operator|.
name|PROP_INCLUDED_PATHS
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|renidexIfFacetsNodeAddedwithSomeNewPropThatReqIndexing
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo1"
argument_list|)
operator|.
name|facets
argument_list|()
expr_stmt|;
name|NodeState
name|currentNodeState
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
comment|//Unset the reindex flag first because first build would have set it .
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|addChild
argument_list|(
name|PROP_FACETS
argument_list|)
expr_stmt|;
comment|//Add foo prop on facets node
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
name|PROP_FACETS
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
comment|//Now test with changing the value - this too should set the reindexing flag
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
name|PROP_FACETS
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar2"
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
comment|//now deleting the node
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
name|PROP_FACETS
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBuilder
operator|=
name|currentNodeState
operator|.
name|builder
argument_list|()
expr_stmt|;
name|nodeBuilder
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|addChild
argument_list|(
name|PROP_FACETS
argument_list|)
expr_stmt|;
comment|//Add foo prop on facets node
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
name|PROP_FACETS
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getBuilderTree
argument_list|()
operator|.
name|getChild
argument_list|(
name|PROP_FACETS
argument_list|)
operator|.
name|setProperty
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_STATISTICAL_FACET_SAMPLE_SIZE
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|currentNodeState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|currentNodeState
operator|.
name|getBoolean
argument_list|(
name|PROP_REFRESH_DEFN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propRuleCustomName
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|property
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"fooProp"
argument_list|,
literal|"foo2"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"fooProp"
argument_list|,
literal|"foo2"
argument_list|)
expr_stmt|;
name|Root
name|idx
init|=
operator|new
name|ImmutableRoot
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|idx
operator|.
name|getTree
argument_list|(
literal|"/indexRules/nt:base/properties/fooProp"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|idx
operator|.
name|getTree
argument_list|(
literal|"/indexRules/nt:base/properties/bar"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|idx
operator|.
name|getTree
argument_list|(
literal|"/indexRules/nt:base/properties/foo"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|typeNotChangedIfSet
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|state
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"lucene"
argument_list|,
name|state
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeBuilder
name|updated
init|=
name|state
operator|.
name|builder
argument_list|()
decl_stmt|;
name|updated
operator|.
name|setProperty
argument_list|(
literal|"type"
argument_list|,
literal|"disabled"
argument_list|)
expr_stmt|;
name|IndexDefinitionBuilder
name|newBuilder
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|updated
argument_list|)
decl_stmt|;
name|NodeState
name|updatedState
init|=
name|newBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"disabled"
argument_list|,
name|updatedState
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Type other than 'disabled' would be reset
name|updated
operator|.
name|setProperty
argument_list|(
literal|"type"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lucene"
argument_list|,
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|updated
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeTypeIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|nodeTypeIndex
argument_list|()
expr_stmt|;
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:file"
argument_list|)
expr_stmt|;
name|NodeState
name|state
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getChildNode
argument_list|(
literal|"indexRules"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|NodeState
name|ntFileRule
init|=
name|state
operator|.
name|getChildNode
argument_list|(
literal|"indexRules"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"nt:file"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ntFileRule
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getBoolean
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_INDEX_NODE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ntFileRule
operator|.
name|getBoolean
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_SYNC
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeTypeIndexSync
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|nodeTypeIndex
argument_list|()
expr_stmt|;
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:file"
argument_list|)
operator|.
name|sync
argument_list|()
expr_stmt|;
name|NodeState
name|state
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getChildNode
argument_list|(
literal|"indexRules"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|NodeState
name|ntFileRule
init|=
name|state
operator|.
name|getChildNode
argument_list|(
literal|"indexRules"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"nt:file"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ntFileRule
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getBoolean
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_INDEX_NODE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ntFileRule
operator|.
name|getBoolean
argument_list|(
name|FulltextIndexConstants
operator|.
name|PROP_SYNC
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noPropertiesNodeForEmptyRule
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|nodeTypeIndex
argument_list|()
expr_stmt|;
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:file"
argument_list|)
operator|.
name|sync
argument_list|()
expr_stmt|;
name|NodeState
name|state
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|state
argument_list|,
literal|"/indexRules/nt:file/properties"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deprecated
parameter_list|()
block|{
name|NodeState
name|state
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"By default index isn't deprecated"
argument_list|,
name|state
operator|.
name|getBoolean
argument_list|(
name|INDEX_DEPRECATED
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|=
name|builder
operator|.
name|deprecated
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Index must be deprecated if marked so"
argument_list|,
name|state
operator|.
name|getBoolean
argument_list|(
name|INDEX_DEPRECATED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|boost
parameter_list|()
block|{
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo1"
argument_list|)
operator|.
name|boost
argument_list|(
literal|1.0f
argument_list|)
operator|.
name|enclosingRule
argument_list|()
operator|.
name|property
argument_list|(
literal|"foo2"
argument_list|)
operator|.
name|boost
argument_list|(
literal|2.0f
argument_list|)
expr_stmt|;
name|NodeState
name|state
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|NodeState
name|foo1
init|=
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|state
argument_list|,
literal|"indexRules/nt:base/properties/foo1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|foo1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrectly set boost"
argument_list|,
literal|1.0f
argument_list|,
name|foo1
operator|.
name|getProperty
argument_list|(
name|FIELD_BOOST
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
operator|.
name|floatValue
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|NodeState
name|foo2
init|=
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|state
argument_list|,
literal|"indexRules/nt:base/properties/foo2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|foo2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrectly set boost"
argument_list|,
literal|2.0f
argument_list|,
name|foo2
operator|.
name|getProperty
argument_list|(
name|FIELD_BOOST
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
operator|.
name|floatValue
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|facets
parameter_list|()
block|{
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo1"
argument_list|)
operator|.
name|facets
argument_list|()
operator|.
name|enclosingRule
argument_list|()
operator|.
name|property
argument_list|(
literal|"foo2"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|NodeState
name|state
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|NodeState
name|foo1
init|=
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|state
argument_list|,
literal|"indexRules/nt:base/properties/foo1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|foo1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrectly set facets property"
argument_list|,
name|foo1
operator|.
name|getBoolean
argument_list|(
name|PROP_FACETS
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|foo2
init|=
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|state
argument_list|,
literal|"indexRules/nt:base/properties/foo2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|foo2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Incorrectly existing facets property"
argument_list|,
name|foo2
operator|.
name|hasProperty
argument_list|(
name|PROP_FACETS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|tags
parameter_list|()
block|{
name|NodeState
name|state
init|=
name|EMPTY_NODE
decl_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|state
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|tags
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|state
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|tags
init|=
name|state
operator|.
name|getProperty
argument_list|(
name|INDEX_TAGS
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of tags"
argument_list|,
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|tags
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|getProperty
argument_list|(
name|INDEX_TAGS
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|,
name|Matchers
operator|.
name|containsInAnyOrder
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|state
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addTags
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|state
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|tags
operator|=
name|state
operator|.
name|getProperty
argument_list|(
name|INDEX_TAGS
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of tags"
argument_list|,
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|tags
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|getProperty
argument_list|(
name|INDEX_TAGS
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|,
name|Matchers
operator|.
name|containsInAnyOrder
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|state
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addTags
argument_list|(
literal|"foo"
argument_list|,
literal|"foo1"
argument_list|)
expr_stmt|;
name|state
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|tags
operator|=
name|state
operator|.
name|getProperty
argument_list|(
name|INDEX_TAGS
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of tags"
argument_list|,
literal|2
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|tags
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|getProperty
argument_list|(
name|INDEX_TAGS
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|,
name|Matchers
operator|.
name|containsInAnyOrder
argument_list|(
literal|"foo"
argument_list|,
literal|"foo1"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|state
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addTags
argument_list|(
literal|"foo2"
argument_list|)
expr_stmt|;
name|state
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|tags
operator|=
name|state
operator|.
name|getProperty
argument_list|(
name|INDEX_TAGS
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of tags"
argument_list|,
literal|3
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|tags
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|getProperty
argument_list|(
name|INDEX_TAGS
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|,
name|Matchers
operator|.
name|containsInAnyOrder
argument_list|(
literal|"foo"
argument_list|,
literal|"foo1"
argument_list|,
literal|"foo2"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|state
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addTags
argument_list|(
literal|"foo2"
argument_list|,
literal|"foo3"
argument_list|)
expr_stmt|;
name|state
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|tags
operator|=
name|state
operator|.
name|getProperty
argument_list|(
name|INDEX_TAGS
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of tags"
argument_list|,
literal|4
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|tags
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|getProperty
argument_list|(
name|INDEX_TAGS
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|,
name|Matchers
operator|.
name|containsInAnyOrder
argument_list|(
literal|"foo"
argument_list|,
literal|"foo1"
argument_list|,
literal|"foo2"
argument_list|,
literal|"foo3"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|IndexDefinitionBuilder
argument_list|(
name|state
operator|.
name|builder
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|tags
argument_list|(
literal|"foo4"
argument_list|)
expr_stmt|;
name|state
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|tags
operator|=
name|state
operator|.
name|getProperty
argument_list|(
name|INDEX_TAGS
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of tags"
argument_list|,
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|tags
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|getProperty
argument_list|(
name|INDEX_TAGS
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|,
name|Matchers
operator|.
name|containsInAnyOrder
argument_list|(
literal|"foo4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

